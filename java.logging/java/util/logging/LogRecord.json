{
  "packageName": "java.util.logging",
  "simpleName": "LogRecord",
  "moduleName": "java.logging",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLoggerName",
      "comment": "Get the source Logger\u0027s name.",
      "annotations": [],
      "tagMap": {
        "return": [
          "source logger name (may be null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLoggerName",
      "comment": "Set the source Logger\u0027s name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the source logger name (may be null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResourceBundle",
      "comment": "Get the localization resource bundle This is the ResourceBundle that should be used to localize the message string before formatting it. The result may be null if the message is not localizable, or if no suitable ResourceBundle is available.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the localization resource bundle"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.ResourceBundle",
            "type": "Class"
          },
          "name": "bundle",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setResourceBundle",
      "comment": "Set the localization resource bundle.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebundle\u003c/code\u003e - localization bundle (may be null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResourceBundleName",
      "comment": "Get the localization resource bundle name This is the name for the ResourceBundle that should be used to localize the message string before formatting it. The result may be null if the message is not localizable.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the localization resource bundle name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setResourceBundleName",
      "comment": "Set the localization resource bundle name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - localization bundle name (may be null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLevel",
      "comment": "Get the logging message level, for example Level.SEVERE.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the logging message level"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLevel",
      "comment": "Set the logging message level, for example Level.SEVERE.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - the logging message level"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSequenceNumber",
      "comment": "Get the sequence number. Sequence numbers are normally assigned in the LogRecord constructor, which assigns unique sequence numbers to each new LogRecord in increasing order.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the sequence number"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "seq",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSequenceNumber",
      "comment": "Set the sequence number. Sequence numbers are normally assigned in the LogRecord constructor, so it should not normally be necessary to use this method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eseq\u003c/code\u003e - the sequence number"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSourceClassName",
      "comment": "Get the name of the class that (allegedly) issued the logging request. Note that this sourceClassName is not verified and may be spoofed. This information may either have been provided as part of the logging call, or it may have been inferred automatically by the logging framework. In the latter case, the information may only be approximate and may in fact describe an earlier call on the stack frame. May be null if no information could be obtained.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the source class name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClassName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSourceClassName",
      "comment": "Set the name of the class that (allegedly) issued the logging request.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceClassName\u003c/code\u003e - the source class name (may be null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSourceMethodName",
      "comment": "Get the name of the method that (allegedly) issued the logging request. Note that this sourceMethodName is not verified and may be spoofed. This information may either have been provided as part of the logging call, or it may have been inferred automatically by the logging framework. In the latter case, the information may only be approximate and may in fact describe an earlier call on the stack frame. May be null if no information could be obtained.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the source method name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethodName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSourceMethodName",
      "comment": "Set the name of the method that (allegedly) issued the logging request.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceMethodName\u003c/code\u003e - the source method name (may be null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMessage",
      "comment": "Get the \"raw\" log message, before localization or formatting. May be null, which is equivalent to the empty string \"\". This message may be either the final text or a localization key. During formatting, if the source logger has a localization ResourceBundle and if that ResourceBundle has an entry for this message string, then the message string is replaced with the localized value.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the raw message string"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "message",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMessage",
      "comment": "Set the \"raw\" log message, before localization or formatting.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - the raw message string (may be null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParameters",
      "comment": "Get the parameters to the log message.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the log message parameters. May be null if there are no parameters."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "parameters",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParameters",
      "comment": "Set the parameters to the log message.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameters\u003c/code\u003e - the log message parameters. (may be null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getThreadID",
      "comment": "Get an identifier for the thread where the message originated. This is a thread identifier within the Java VM and may or may not map to any operating system ID.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "16"
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "thread ID"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "threadID",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setThreadID",
      "comment": "Set an identifier for the thread where the message originated.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "16"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003ethreadID\u003c/code\u003e - the thread ID"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLongThreadID",
      "comment": "Get a thread identifier for the thread where message originated This is a thread identifier within the Java VM and may or may not map to any operating system ID.",
      "annotations": [],
      "tagMap": {
        "return": [
          "thread ID"
        ],
        "since": [
          "16"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.LogRecord",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "longThreadID",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLongThreadID",
      "comment": "Set an identifier for the thread where the message originated.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elongThreadID\u003c/code\u003e - the thread ID"
        ],
        "return": [
          "this LogRecord"
        ],
        "since": [
          "16"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMillis",
      "comment": "Get truncated event time in milliseconds since 1970.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This is equivalent to calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/LogRecord.html#getInstant()\"\u003e\u003ccode\u003egetInstant().toEpochMilli()\u003c/code\u003e\u003c/a\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/LogRecord.html#getInstant()\"\u003e\u003ccode\u003egetInstant()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "To get the full nanosecond resolution event time, use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/LogRecord.html#getInstant()\"\u003e\u003ccode\u003egetInstant()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "truncated event time in millis since 1970"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "millis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMillis",
      "comment": "Set event time.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "implSpec": [
          "This is equivalent to calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/LogRecord.html#setInstant(java.time.Instant)\"\u003e\u003ccode\u003esetInstant(Instant.ofEpochMilli(millis))\u003c/code\u003e\u003c/a\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/LogRecord.html#setInstant(java.time.Instant)\"\u003e\u003ccode\u003esetInstant(java.time.Instant)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emillis\u003c/code\u003e - event time in millis since 1970."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Instant",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInstant",
      "comment": "Gets the instant that the event occurred.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the instant that the event occurred."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.Instant",
            "type": "Class"
          },
          "name": "instant",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInstant",
      "comment": "Sets the instant that the event occurred. If the given instant represents a point on the time-line too far in the future or past to fit in a long milliseconds and nanoseconds adjustment, then an ArithmeticException will be thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einstant\u003c/code\u003e - the instant that the event occurred."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einstant\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow would occur while calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/Instant.html#toEpochMilli()\"\u003e\u003ccode\u003einstant.toEpochMilli()\u003c/code\u003e\u003c/a\u003e."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Throwable",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getThrown",
      "comment": "Get any throwable associated with the log record. If the event involved an exception, this will be the exception object. Otherwise null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a throwable"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "thrown",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setThrown",
      "comment": "Set a throwable associated with the log event.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ethrown\u003c/code\u003e - a throwable (may be null)"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a LogRecord with the given level and message values. The sequence property will be initialized with a new unique value. These sequence values are allocated in increasing order within a VM. Since JDK 9, the event time is represented by an Instant. The instant property will be initialized to the current instant, using the best available clock on the system. The thread ID property will be initialized with a unique ID for the current thread. All other properties will be initialized to \"null\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/Clock.html#systemUTC()\"\u003e\u003ccode\u003eClock.systemUTC()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - a logging level value",
          "\u003ccode\u003emsg\u003c/code\u003e - the raw non-localized logging message (may be null)"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.logging.LogRecord",
  "comment": "LogRecord objects are used to pass logging requests between the logging framework and individual log Handlers. \n\u003cp\u003e When a LogRecord is passed into the logging framework it logically belongs to the framework and should no longer be used or updated by the client application. \u003c/p\u003e\n\u003cp\u003e Note that if the client application has not specified an explicit source method name and source class name, then the LogRecord class will infer them automatically when they are first accessed (due to a call on getSourceMethodName or getSourceClassName) by analyzing the call stack. Therefore, if a logging Handler wants to pass off a LogRecord to another thread, or to transmit it over RMI, and if it wishes to subsequently obtain method name or class name information it should call one of getSourceClassName or getSourceMethodName to force the values to be filled in. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003e Serialization notes:\u003c/b\u003e \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe LogRecord class is serializable. \u003c/li\u003e\n \u003cli\u003e Because objects in the parameters array may not be serializable, during serialization all objects in the parameters array are written as the corresponding Strings (using Object.toString). \u003c/li\u003e\n \u003cli\u003e The ResourceBundle is not transmitted as part of the serialized form, but the resource bundle name is, and the recipient object\u0027s readObject method will attempt to locate a suitable resource bundle. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.logging.LogRecord\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}