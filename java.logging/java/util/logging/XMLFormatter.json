{
  "packageName": "java.util.logging",
  "simpleName": "XMLFormatter",
  "moduleName": "java.logging",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.logging.Formatter",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.logging.LogRecord",
            "type": "Class"
          },
          "field": {
            "name": "record"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Format the given message to XML. This method can be overridden in a subclass. It is recommended to use the Formatter.formatMessage(java.util.logging.LogRecord) convenience method to localize and format the message field.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/Formatter.html#format(java.util.logging.LogRecord)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/Formatter.html\" title\u003d\"class in java.util.logging\"\u003eFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erecord\u003c/code\u003e - the log record to be formatted."
        ],
        "return": [
          "a formatted log record"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.logging.Handler",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHead",
      "comment": "Return the header string for a set of XML formatted records.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/Formatter.html#getHead(java.util.logging.Handler)\"\u003egetHead\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/Formatter.html\" title\u003d\"class in java.util.logging\"\u003eFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eh\u003c/code\u003e - The target handler (can be null)"
        ],
        "return": [
          "a valid XML string"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.logging.Handler",
            "type": "Class"
          },
          "field": {
            "name": "h"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTail",
      "comment": "Return the tail string for a set of XML formatted records.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/Formatter.html#getTail(java.util.logging.Handler)\"\u003egetTail\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/Formatter.html\" title\u003d\"class in java.util.logging\"\u003eFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eh\u003c/code\u003e - The target handler (can be null)"
        ],
        "return": [
          "a valid XML string"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new instance of XMLFormatter.",
      "tagMap": {
        "implSpec": [
          "Since JDK 9, the XMLFormatter will print out the record \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/LogRecord.html#getInstant()\"\u003eevent time\u003c/a\u003e as an Instant. This instant has the best resolution available on the system. The \n\u003ccode\u003e\u0026lt;date\u0026gt;\u003c/code\u003e element will contain the instant as formatted by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_INSTANT\"\u003e\u003ccode\u003eDateTimeFormatter.ISO_INSTANT\u003c/code\u003e\u003c/a\u003e. In addition, an optional \n\u003ccode\u003e\u0026lt;nanos\u0026gt;\u003c/code\u003e element containing a nanosecond adjustment will be printed if the instant contains some nanoseconds below the millisecond resolution. \n\u003cp\u003e This new behavior can be turned off, and the old formatting restored, by specifying a property in the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/LogManager.html#getProperty(java.lang.String)\"\u003elogging configuration\u003c/a\u003e. If \u003ccode\u003eLogManager.getLogManager().getProperty( this.getClass().getName()+\".useInstant\")\u003c/code\u003e is \u003ccode\u003e\"false\"\u003c/code\u003e or \u003ccode\u003e\"0\"\u003c/code\u003e, the old formatting will be restored.\u003c/p\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.logging.XMLFormatter",
  "comment": "Format a LogRecord into a standard XML format. \n\u003cp\u003e The DTD specification is provided as Appendix A to the Java Logging APIs specification. \u003c/p\u003e\n\u003cp\u003e The XMLFormatter can be used with arbitrary character encodings, but it is recommended that it normally be used with UTF-8. The character encoding can be set on the output Handler.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "Since JDK 9, instances of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/LogRecord.html\" title\u003d\"class in java.util.logging\"\u003eLogRecord\u003c/a\u003e contain an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/LogRecord.html#getInstant()\"\u003e\u003ccode\u003eInstant\u003c/code\u003e\u003c/a\u003e which can have nanoseconds below the millisecond resolution. The DTD specification has been updated to allow for an optional \n\u003ccode\u003e\u0026lt;nanos\u0026gt;\u003c/code\u003e element. By default, the XMLFormatter will compute the nanosecond adjustment below the millisecond resolution (using \n\u003ccode\u003eLogRecord.getInstant().getNano() % 1000_000\u003c/code\u003e) - and if this is not 0, this adjustment value will be printed in the new \n\u003ccode\u003e\u0026lt;nanos\u0026gt;\u003c/code\u003e element. The event instant can then be reconstructed using \n\u003ccode\u003eInstant.ofEpochSecond(millis/1000L, (millis % 1000L) * 1000_000L + nanos)\u003c/code\u003e where \n\u003ccode\u003emillis\u003c/code\u003e and \n\u003ccode\u003enanos\u003c/code\u003e represent the numbers serialized in the \n\u003ccode\u003e\u0026lt;millis\u0026gt;\u003c/code\u003e and \n\u003ccode\u003e\u0026lt;nanos\u0026gt;\u003c/code\u003e elements, respectively. \n\u003cbr\u003e The \n\u003ccode\u003e\u0026lt;date\u0026gt;\u003c/code\u003e element will now contain the whole instant as formatted by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_INSTANT\"\u003e\u003ccode\u003eDateTimeFormatter.ISO_INSTANT\u003c/code\u003e\u003c/a\u003e formatter. \n\u003cp\u003e For compatibility with old parsers, XMLFormatters can be configured to revert to the old format by specifying a \u003ccode\u003e\u0026lt;xml-formatter-fully-qualified-class-name\u0026gt;.useInstant \u003d false\u003c/code\u003e \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/LogManager.html#getProperty(java.lang.String)\"\u003eproperty\u003c/a\u003e in the logging configuration. When \u003ccode\u003euseInstant\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, the old formatting will be preserved. When \u003ccode\u003euseInstant\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e (the default), the \u003ccode\u003e\u0026lt;nanos\u0026gt;\u003c/code\u003e element will be printed and the \u003ccode\u003e\u0026lt;date\u0026gt;\u003c/code\u003e element will contain the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeFormatter.html#ISO_INSTANT\"\u003eformatted\u003c/a\u003e instant. \u003c/p\u003e\n\u003cp\u003e For instance, in order to configure plain instances of XMLFormatter to omit the new \u003ccode\u003e\u0026lt;nano\u0026gt;\u003c/code\u003e element, \u003ccode\u003ejava.util.logging.XMLFormatter.useInstant \u003d false\u003c/code\u003e can be specified in the logging configuration.\u003c/p\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}