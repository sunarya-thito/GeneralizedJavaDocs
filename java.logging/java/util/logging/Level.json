{
  "packageName": "java.util.logging",
  "simpleName": "Level",
  "moduleName": "java.logging",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OFF",
      "comment": "OFF is a special level that can be used to turn off logging. This level is initialized to Integer.MAX_VALUE.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SEVERE",
      "comment": "SEVERE is a message level indicating a serious failure. In general SEVERE messages should describe events that are of considerable importance and which will prevent normal program execution. They should be reasonably intelligible to end users and to system administrators. This level is initialized to 1000.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WARNING",
      "comment": "WARNING is a message level indicating a potential problem. In general WARNING messages should describe events that will be of interest to end users or system managers, or which indicate potential problems. This level is initialized to 900.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INFO",
      "comment": "INFO is a message level for informational messages. Typically INFO messages will be written to the console or its equivalent. So the INFO level should only be used for reasonably significant messages that will make sense to end users and system administrators. This level is initialized to 800.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CONFIG",
      "comment": "CONFIG is a message level for static configuration messages. CONFIG messages are intended to provide a variety of static configuration information, to assist in debugging problems that may be associated with particular configurations. For example, CONFIG message might include the CPU type, the graphics depth, the GUI look-and-feel, etc. This level is initialized to 700.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FINE",
      "comment": "FINE is a message level providing tracing information. All of FINE, FINER, and FINEST are intended for relatively detailed tracing. The exact meaning of the three levels will vary between subsystems, but in general, FINEST should be used for the most voluminous detailed output, FINER for somewhat less detailed output, and FINE for the lowest volume (and most important) messages. In general the FINE level should be used for information that will be broadly interesting to developers who do not have a specialized interest in the specific subsystem. FINE messages might include things like minor (recoverable) failures. Issues indicating potential performance problems are also worth logging as FINE. This level is initialized to 500.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FINER",
      "comment": "FINER indicates a fairly detailed tracing message. By default logging calls for entering, returning, or throwing an exception are traced at this level. This level is initialized to 400.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FINEST",
      "comment": "FINEST indicates a highly detailed tracing message. This level is initialized to 300.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ALL",
      "comment": "ALL indicates that all messages should be logged. This level is initialized to Integer.MIN_VALUE.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResourceBundleName",
      "comment": "Return the level\u0027s localization resource bundle name, or null if no localization bundle is defined.",
      "annotations": [],
      "tagMap": {
        "return": [
          "localization resource bundle name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Return the non-localized string name of the Level.",
      "annotations": [],
      "tagMap": {
        "return": [
          "non-localized name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocalizedName",
      "comment": "Return the localized string name of the Level, for the current default locale. If no localization information is available, the non-localized name is returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "localized name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "toString",
      "comment": "Returns a string representation of this Level.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the non-localized name of the Level, for example \"INFO\"."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "intValue",
      "comment": "Get the integer value for this level. This integer value can be used for efficient ordering comparisons between Level objects.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the integer value for this level."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parse",
      "comment": "Parse a level name string into a Level. The argument string may consist of either a level name or an integer value. For example: \"SEVERE\" \"1000\"",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - string to be parsed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the name is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value is not valid. Valid values are integers between \n\u003ccode\u003eInteger.MIN_VALUE\u003c/code\u003e and \n\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e, and all known level names. Known names are the levels defined by this class (e.g., \n\u003ccode\u003eFINE\u003c/code\u003e, \n\u003ccode\u003eFINER\u003c/code\u003e, \n\u003ccode\u003eFINEST\u003c/code\u003e), or created by this class with appropriate package access, or new levels defined or created by subclasses."
        ],
        "return": [
          "The parsed value. Passing an integer that corresponds to a known name (e.g., 700) will return the associated name (e.g., \n\u003ccode\u003eCONFIG\u003c/code\u003e). Passing an integer that does not (e.g., 1) will return a new level name initialized to that value."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "ox",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compare two objects for value equality.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eox\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "true if and only if the two objects have the same level value."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Generate a hashcode.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hashcode based on the level value"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Create a named Level with a given integer value. Note that this constructor is \"protected\" to allow subclassing. In general clients of logging should use one of the constant Level objects such as SEVERE or FINEST. However, if clients need to add new logging levels, they may subclass Level and define new constants.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the Level, for example \"SEVERE\".",
          "\u003ccode\u003evalue\u003c/code\u003e - an integer value for the level."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the name is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "resourceBundleName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Create a named Level with a given integer value and a given localization resource name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the Level, for example \"SEVERE\".",
          "\u003ccode\u003evalue\u003c/code\u003e - an integer value for the level.",
          "\u003ccode\u003eresourceBundleName\u003c/code\u003e - name of a resource bundle to use in localizing the given name. If the resourceBundleName is null or an empty string, it is ignored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the name is null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.logging.Level",
  "comment": "The Level class defines a set of standard logging levels that can be used to control logging output. The logging Level objects are ordered and are specified by ordered integers. Enabling logging at a given level also enables logging at all higher levels. \n\u003cp\u003e Clients should normally use the predefined Level constants such as Level.SEVERE. \u003c/p\u003e\n\u003cp\u003e The levels in descending order are: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eSEVERE (highest value) \u003c/li\u003e\n \u003cli\u003eWARNING \u003c/li\u003e\n \u003cli\u003eINFO \u003c/li\u003e\n \u003cli\u003eCONFIG \u003c/li\u003e\n \u003cli\u003eFINE \u003c/li\u003e\n \u003cli\u003eFINER \u003c/li\u003e\n \u003cli\u003eFINEST (lowest value) \u003c/li\u003e\n\u003c/ul\u003e In addition there is a level OFF that can be used to turn off logging, and a level ALL that can be used to enable logging of all messages. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e It is possible for third parties to define additional logging levels by subclassing Level. In such cases subclasses should take care to chose unique integer level values and to ensure that they maintain the Object uniqueness property across serialization by defining a suitable readResolve method.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.logging.Level\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}