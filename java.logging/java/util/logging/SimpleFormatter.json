{
  "packageName": "java.util.logging",
  "simpleName": "SimpleFormatter",
  "moduleName": "java.logging",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.logging.Formatter",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.logging.LogRecord",
            "type": "Class"
          },
          "field": {
            "name": "record"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Format the given LogRecord. The formatting can be customized by specifying the format string in the java.util.logging.SimpleFormatter.format property. The given LogRecord will be formatted as if by calling:     String.format(format, date, source, logger, level, message, thrown);\n where the arguments are: format - the java.util.Formatter format string specified in the java.util.logging.SimpleFormatter.format property or the default format. date - a ZonedDateTime object representing event time of the log record in the ZoneId.systemDefault() system time zone. source - a string representing the caller, if available; otherwise, the logger\u0027s name. logger - the logger\u0027s name. level - the log level. message - the formatted log message returned from the Formatter.formatMessage(LogRecord) method. It uses java.text formatting and does not use the java.util.Formatter format argument. thrown - a string representing the throwable associated with the log record and its backtrace beginning with a newline character, if any; otherwise, an empty string. Some example formats: java.util.logging.SimpleFormatter.format\u003d\"%4$s: %5$s [%1$tc]%n\" This prints 1 line with the log level (4$), the log message (5$) and the timestamp (1$) in a square bracket.      WARNING: warning message [Tue Mar 22 13:11:31 PDT 2011]\n     java.util.logging.SimpleFormatter.format\u003d\"%1$tc %2$s%n%4$s: %5$s%6$s%n\" This prints 2 lines where the first line includes the timestamp (1$) and the source (2$); the second line includes the log level (4$) and the log message (5$) followed by the throwable and its backtrace (6$), if any:      Tue Mar 22 13:11:31 PDT 2011 MyClass fatal\n     SEVERE: several message with an exception\n     java.lang.IllegalArgumentException: invalid argument\n             at MyClass.mash(MyClass.java:9)\n             at MyClass.crunch(MyClass.java:6)\n             at MyClass.main(MyClass.java:3)\n     java.util.logging.SimpleFormatter.format\u003d\"%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n\" This prints 2 lines similar to the example above with a different date/time formatting and does not print the throwable and its backtrace:      Mar 22, 2011 1:11:31 PM MyClass fatal\n     SEVERE: several message with an exception\n     java.util.logging.SimpleFormatter.format\u003d\"%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS.%1$tN %1$Tp %2$s%n%4$s: %5$s%6$s%n\" Since JDK 9, java.util.logging uses java.time to create more precise time stamps. The format above can be used to add a .%1$tN to the date/time formatting so that nanoseconds will also be printed:      Feb 06, 2015 5:33:10.279216000 PM example.Main main\n     INFO: This is a test\n     This method can also be overridden in a subclass. It is recommended to use the Formatter.formatMessage(java.util.logging.LogRecord) convenience method to localize and format the message field.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/Formatter.html#format(java.util.logging.LogRecord)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/Formatter.html\" title\u003d\"class in java.util.logging\"\u003eFormatter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erecord\u003c/code\u003e - the log record to be formatted."
        ],
        "return": [
          "a formatted log record"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a SimpleFormatter.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.logging.SimpleFormatter",
  "comment": "Print a brief summary of the \n\u003ccode\u003eLogRecord\u003c/code\u003e in a human readable format. The summary will typically be 1 or 2 lines. \n\u003cp\u003e \u003ca id\u003d\"formatting\"\u003e \u003cb\u003eConfiguration:\u003c/b\u003e\u003c/a\u003e The \u003ccode\u003eSimpleFormatter\u003c/code\u003e is initialized with the format string specified in the \u003ccode\u003e\u003cspan id\u003d\"java.util.logging.SimpleFormatter.format\" class\u003d\"search-tag-result\"\u003ejava.util.logging.SimpleFormatter.format\u003c/span\u003e\u003c/code\u003e property to \u003ca href\u003d\"#format(java.util.logging.LogRecord)\"\u003eformat\u003c/a\u003e the log messages. This property can be defined in the \u003ca href\u003d\"LogManager.html#getProperty(java.lang.String)\"\u003elogging properties\u003c/a\u003e configuration file or as a system property. If this property is set in both the logging properties and system properties, the format string specified in the system property will be used. If this property is not defined or the given format string is \u003ca href\u003d\"../../../../java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eillegal\u003c/a\u003e, the default format is implementation-specific.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatter\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}