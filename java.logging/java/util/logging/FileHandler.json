{
  "packageName": "java.util.logging",
  "simpleName": "FileHandler",
  "moduleName": "java.logging",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.logging.StreamHandler",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.logging.LogRecord",
            "type": "Class"
          },
          "field": {
            "name": "record"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "publish",
      "comment": "Format and publish a LogRecord.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/StreamHandler.html#publish(java.util.logging.LogRecord)\"\u003epublish\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/StreamHandler.html\" title\u003d\"class in java.util.logging\"\u003eStreamHandler\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erecord\u003c/code\u003e - description of the log event. A null record is silently ignored and is not published"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "close",
      "comment": "Close all the files.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/StreamHandler.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/StreamHandler.html\" title\u003d\"class in java.util.logging\"\u003eStreamHandler\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a default FileHandler. This will be configured entirely from LogManager properties (or their default values).",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there are IO problems opening the files.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\"))\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if pattern property is an empty String."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "pattern"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Initialize a FileHandler to write to the given filename. The FileHandler is configured based on LogManager properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, and the file count is set to one. There is no limit on the amount of data that may be written, so use this with care.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - the name of the output file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there are IO problems opening the files.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if pattern is an empty string"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "pattern"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "append"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Initialize a FileHandler to write to the given filename, with optional append. The FileHandler is configured based on LogManager properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, the file count is set to one, and the append mode is set to the given append argument. There is no limit on the amount of data that may be written, so use this with care.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - the name of the output file",
          "\u003ccode\u003eappend\u003c/code\u003e - specifies append mode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there are IO problems opening the files.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if pattern is an empty string"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "pattern"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "limit"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Initialize a FileHandler to write to a set of files. When (approximately) the given limit has been written to one file, another file will be opened. The output will cycle through a set of count files. The FileHandler is configured based on LogManager properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument. The count must be at least 1.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - the pattern for naming the output file",
          "\u003ccode\u003elimit\u003c/code\u003e - the maximum number of bytes to write to any one file",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of files to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there are IO problems opening the files.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elimit \u0026lt; 0\u003c/code\u003e, or \n\u003ccode\u003ecount \u0026lt; 1\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if pattern is an empty string"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "pattern"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "limit"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "append"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Initialize a FileHandler to write to a set of files with optional append. When (approximately) the given limit has been written to one file, another file will be opened. The output will cycle through a set of count files. The FileHandler is configured based on LogManager properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument, and the append mode is set to the given append argument. The count must be at least 1.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - the pattern for naming the output file",
          "\u003ccode\u003elimit\u003c/code\u003e - the maximum number of bytes to write to any one file",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of files to use",
          "\u003ccode\u003eappend\u003c/code\u003e - specifies append mode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there are IO problems opening the files.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elimit \u0026lt; 0\u003c/code\u003e, or \n\u003ccode\u003ecount \u0026lt; 1\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if pattern is an empty string"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "pattern"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "limit"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "append"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Initialize a FileHandler to write to a set of files with optional append. When (approximately) the given limit has been written to one file, another file will be opened. The output will cycle through a set of count files. The FileHandler is configured based on LogManager properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument, and the append mode is set to the given append argument. The count must be at least 1.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epattern\u003c/code\u003e - the pattern for naming the output file",
          "\u003ccode\u003elimit\u003c/code\u003e - the maximum number of bytes to write to any one file",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of files to use",
          "\u003ccode\u003eappend\u003c/code\u003e - specifies append mode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there are IO problems opening the files.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elimit \u0026lt; 0\u003c/code\u003e, or \n\u003ccode\u003ecount \u0026lt; 1\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if pattern is an empty string"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.logging.FileHandler",
  "comment": "Simple file logging \n\u003ccode\u003eHandler\u003c/code\u003e. \n\u003cp\u003e The \u003ccode\u003eFileHandler\u003c/code\u003e can either write to a specified file, or it can write to a rotating set of files. \u003c/p\u003e\n\u003cp\u003e For a rotating set of files, as each file reaches a given size limit, it is closed, rotated out, and a new file opened. Successively older files are named by adding \"0\", \"1\", \"2\", etc. into the base filename. \u003c/p\u003e\n\u003cp\u003e By default buffering is enabled in the IO libraries but each log record is flushed out when it is complete. \u003c/p\u003e\n\u003cp\u003e By default the \u003ccode\u003eXMLFormatter\u003c/code\u003e class is used for formatting. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eConfiguration:\u003c/b\u003e By default each \u003ccode\u003eFileHandler\u003c/code\u003e is initialized using the following \u003ccode\u003eLogManager\u003c/code\u003e configuration properties where \u003ccode\u003e\u0026lt;handler-name\u0026gt;\u003c/code\u003e refers to the fully-qualified class name of the handler. If properties are not defined (or have invalid values) then the specified default values are used. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.level specifies the default level for the \u003ccode\u003eHandler\u003c/code\u003e (defaults to \u003ccode\u003eLevel.ALL\u003c/code\u003e). \u003c/li\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.filter specifies the name of a \u003ccode\u003eFilter\u003c/code\u003e class to use (defaults to no \u003ccode\u003eFilter\u003c/code\u003e). \u003c/li\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.formatter specifies the name of a \u003ccode\u003eFormatter\u003c/code\u003e class to use (defaults to \u003ccode\u003ejava.util.logging.XMLFormatter\u003c/code\u003e) \u003c/li\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.encoding the name of the character set encoding to use (defaults to the default platform encoding). \u003c/li\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.limit specifies an approximate maximum amount to write (in bytes) to any one file. If this is zero, then there is no limit. (Defaults to no limit). \u003c/li\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.count specifies how many output files to cycle through (defaults to 1). \u003c/li\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.pattern specifies a pattern for generating the output file name. See below for details. (Defaults to \"%h/java%u.log\"). \u003c/li\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.append specifies whether the FileHandler should append onto any existing files (defaults to false). \u003c/li\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.maxLocks specifies the maximum number of concurrent locks held by FileHandler (defaults to 100). \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For example, the properties for \u003ccode\u003eFileHandler\u003c/code\u003e would be: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e java.util.logging.FileHandler.level\u003dINFO \u003c/li\u003e \n \u003cli\u003e java.util.logging.FileHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For a custom handler, e.g. com.foo.MyHandler, the properties would be: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e com.foo.MyHandler.level\u003dINFO \u003c/li\u003e \n \u003cli\u003e com.foo.MyHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A pattern consists of a string that includes the following special components that will be replaced at runtime: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e \"/\" the local pathname separator \u003c/li\u003e \n \u003cli\u003e \"%t\" the system temporary directory \u003c/li\u003e \n \u003cli\u003e \"%h\" the value of the \"user.home\" system property \u003c/li\u003e \n \u003cli\u003e \"%g\" the generation number to distinguish rotated logs \u003c/li\u003e \n \u003cli\u003e \"%u\" a unique number to resolve conflicts \u003c/li\u003e \n \u003cli\u003e \"%%\" translates to a single percent sign \"%\" \u003c/li\u003e \n\u003c/ul\u003e If no \"%g\" field has been specified and the file count is greater than one, then the generation number will be added to the end of the generated filename, after a dot. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Thus for example a pattern of \"%t/java%g.log\" with a count of 2 would typically cause log files to be written on Solaris to /var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they would be typically written to C:\\TEMP\\java0.log and C:\\TEMP\\java1.log \u003c/p\u003e\n\u003cp\u003e Generation numbers follow the sequence 0, 1, 2, etc. \u003c/p\u003e\n\u003cp\u003e Normally the \"%u\" unique field is set to 0. However, if the \u003ccode\u003eFileHandler\u003c/code\u003e tries to open the filename and finds the file is currently in use by another process it will increment the unique number field and try again. This will be repeated until \u003ccode\u003eFileHandler\u003c/code\u003e finds a file name that is not currently in use. If there is a conflict and no \"%u\" field has been specified, it will be added at the end of the filename after a dot. (This will be after any automatically added generation number.) \u003c/p\u003e\n\u003cp\u003e Thus if three processes were all trying to log to fred%u.%g.txt then they might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as the first file in their rotating sequences. \u003c/p\u003e\n\u003cp\u003e Note that the use of unique ids to avoid conflicts is only guaranteed to work reliably when using a local disk file system.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}