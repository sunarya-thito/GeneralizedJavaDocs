{
  "packageName": "java.util.logging",
  "simpleName": "LoggingMXBean",
  "moduleName": "java.logging",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLoggerNames",
      "comment": "Returns the list of currently registered logger names. This method calls LogManager.getLoggerNames() and returns a list of the logger names.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A list of \n\u003ccode\u003eString\u003c/code\u003e each of which is a currently registered \n\u003ccode\u003eLogger\u003c/code\u003e name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "loggerName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLoggerLevel",
      "comment": "Gets the name of the log level associated with the specified logger. If the specified logger does not exist, null is returned. This method first finds the logger of the given name and then returns the name of the log level by calling: Logger.getLevel().getName(); If the Level of the specified logger is null, which means that this logger\u0027s effective level is inherited from its parent, an empty string will be returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/Logger.html#getLevel()\"\u003e\u003ccode\u003eLogger.getLevel()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eloggerName\u003c/code\u003e - The name of the \n\u003ccode\u003eLogger\u003c/code\u003e to be retrieved."
        ],
        "return": [
          "The name of the log level of the specified logger; or an empty string if the log level of the specified logger is \n\u003ccode\u003enull\u003c/code\u003e. If the specified logger does not exist, \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "loggerName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "levelName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLoggerLevel",
      "comment": "Sets the specified logger to the specified new level. If the levelName is not null, the level of the specified logger is set to the parsed Level matching the levelName. If the levelName is null, the level of the specified logger is set to null and the effective level of the logger is inherited from its nearest ancestor with a specific (non-null) level value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/Logger.html#setLevel(java.util.logging.Level)\"\u003e\u003ccode\u003eLogger.setLevel(java.util.logging.Level)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eloggerName\u003c/code\u003e - The name of the \n\u003ccode\u003eLogger\u003c/code\u003e to be set. Must be non-null.",
          "\u003ccode\u003elevelName\u003c/code\u003e - The name of the level to set on the specified logger, or \n\u003ccode\u003enull\u003c/code\u003e if setting the level to inherit from its nearest ancestor."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified logger does not exist, or \n\u003ccode\u003elevelName\u003c/code\u003e is not a valid level name.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have LoggingPermission(\"control\")."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "loggerName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getParentLoggerName",
      "comment": "Returns the name of the parent for the specified logger. If the specified logger does not exist, null is returned. If the specified logger is the root Logger in the namespace, the result will be an empty string.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eloggerName\u003c/code\u003e - The name of a \n\u003ccode\u003eLogger\u003c/code\u003e."
        ],
        "return": [
          "the name of the nearest existing parent logger; an empty string if the specified logger is the root logger. If the specified logger does not exist, \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.logging.LoggingMXBean",
  "annotations": [
    {
      "type": {
        "name": "Deprecated",
        "type": "Class"
      },
      "values": [
        {
          "name": "since",
          "value": "9"
        }
      ]
    }
  ],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/PlatformLoggingMXBean.html\" title\u003d\"interface in java.lang.management\"\u003e\u003ccode\u003ePlatformLoggingMXBean\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}