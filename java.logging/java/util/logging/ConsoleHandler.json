{
  "packageName": "java.util.logging",
  "simpleName": "ConsoleHandler",
  "moduleName": "java.logging",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.logging.StreamHandler",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.LogRecord",
            "type": "Class"
          },
          "name": "record",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "publish",
      "comment": "Publish a LogRecord. The logging request was made initially to a Logger object, which initialized the LogRecord and forwarded it here.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/StreamHandler.html#publish(java.util.logging.LogRecord)\"\u003epublish\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/StreamHandler.html\" title\u003d\"class in java.util.logging\"\u003eStreamHandler\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erecord\u003c/code\u003e - description of the log event. A null record is silently ignored and is not published"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "close",
      "comment": "Override StreamHandler.close to do a flush but not to close the output stream. That is, we do not close System.err.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/StreamHandler.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.logging/java/util/logging/StreamHandler.html\" title\u003d\"class in java.util.logging\"\u003eStreamHandler\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a ConsoleHandler for System.err. The ConsoleHandler is configured based on LogManager properties (or their default values).",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.logging.ConsoleHandler",
  "comment": "This \n\u003ccode\u003eHandler\u003c/code\u003e publishes log records to \n\u003ccode\u003eSystem.err\u003c/code\u003e. By default the \n\u003ccode\u003eSimpleFormatter\u003c/code\u003e is used to generate brief summaries. \n\u003cp\u003e \u003cb\u003eConfiguration:\u003c/b\u003e By default each \u003ccode\u003eConsoleHandler\u003c/code\u003e is initialized using the following \u003ccode\u003eLogManager\u003c/code\u003e configuration properties where \u003ccode\u003e\u0026lt;handler-name\u0026gt;\u003c/code\u003e refers to the fully-qualified class name of the handler. If properties are not defined (or have invalid values) then the specified default values are used. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.level specifies the default level for the \u003ccode\u003eHandler\u003c/code\u003e (defaults to \u003ccode\u003eLevel.INFO\u003c/code\u003e). \u003c/li\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.filter specifies the name of a \u003ccode\u003eFilter\u003c/code\u003e class to use (defaults to no \u003ccode\u003eFilter\u003c/code\u003e). \u003c/li\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.formatter specifies the name of a \u003ccode\u003eFormatter\u003c/code\u003e class to use (defaults to \u003ccode\u003ejava.util.logging.SimpleFormatter\u003c/code\u003e). \u003c/li\u003e \n \u003cli\u003e \u0026lt;handler-name\u0026gt;.encoding the name of the character set encoding to use (defaults to the default platform encoding). \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For example, the properties for \u003ccode\u003eConsoleHandler\u003c/code\u003e would be: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e java.util.logging.ConsoleHandler.level\u003dINFO \u003c/li\u003e \n \u003cli\u003e java.util.logging.ConsoleHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For a custom handler, e.g. com.foo.MyHandler, the properties would be: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e com.foo.MyHandler.level\u003dINFO \u003c/li\u003e \n \u003cli\u003e com.foo.MyHandler.formatter\u003djava.util.logging.SimpleFormatter \u003c/li\u003e \n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}