{
  "packageName": "java.util.logging",
  "simpleName": "Logger",
  "moduleName": "java.logging",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GLOBAL_LOGGER_NAME",
      "comment": "GLOBAL_LOGGER_NAME is a name for the global logger.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.logging.Logger.GLOBAL_LOGGER_NAME\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.util.logging.Logger",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "global",
      "comment": "The \"global\" Logger object is provided as a convenience to developers who are making casual use of the Logging package. Developers who are making serious use of the logging package (for example in products) should create and use their own Logger objects, with appropriate names, so that logging can be controlled on a suitable per-Logger granularity. Developers also need to keep a strong reference to their Logger objects to prevent them from being garbage collected.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.util.logging.Logger",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getGlobal",
      "comment": "Return global logger object with the name Logger.GLOBAL_LOGGER_NAME.",
      "annotations": [],
      "tagMap": {
        "return": [
          "global logger object"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Logger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLogger",
      "comment": "Find or create a logger for a named subsystem. If a logger has already been created with the given name it is returned. Otherwise a new logger is created. If a new logger is created its log level will be configured based on the LogManager configuration and it will be configured to also send logging output to its parent\u0027s Handlers. It will be registered in the LogManager global namespace. Note: The LogManager may only retain a weak reference to the newly created Logger. It is important to understand that a previously created Logger with the given name may be garbage collected at any time if there is no strong reference to the Logger. In particular, this means that two back-to-back calls like getLogger(\"MyLogger\").log(...) may use different Logger objects named \"MyLogger\" if there is no strong reference to the Logger named \"MyLogger\" elsewhere in the program.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - A name for the logger. This should be a dot-separated name and should normally be based on the package name or class name of the subsystem, such as java.net or javax.swing"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the name is null."
        ],
        "return": [
          "a suitable Logger"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Logger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "resourceBundleName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLogger",
      "comment": "Find or create a logger for a named subsystem. If a logger has already been created with the given name it is returned. Otherwise a new logger is created. If a new logger is created its log level will be configured based on the LogManager and it will be configured to also send logging output to its parent\u0027s Handlers. It will be registered in the LogManager global namespace. Note: The LogManager may only retain a weak reference to the newly created Logger. It is important to understand that a previously created Logger with the given name may be garbage collected at any time if there is no strong reference to the Logger. In particular, this means that two back-to-back calls like getLogger(\"MyLogger\", ...).log(...) may use different Logger objects named \"MyLogger\" if there is no strong reference to the Logger named \"MyLogger\" elsewhere in the program. If the named Logger already exists and does not yet have a localization resource bundle then the given resource bundle name is used. If the named Logger already exists and has a different resource bundle name then an IllegalArgumentException is thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - A name for the logger. This should be a dot-separated name and should normally be based on the package name or class name of the subsystem, such as java.net or javax.swing",
          "\u003ccode\u003eresourceBundleName\u003c/code\u003e - name of ResourceBundle to be used for localizing messages for this logger. May be \n\u003ccode\u003enull\u003c/code\u003e if none of the messages require localization."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if the resourceBundleName is non-null and no corresponding resource can be found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the Logger already exists and uses a different resource bundle name; or if \n\u003ccode\u003eresourceBundleName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e but the named logger has a resource bundle set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the name is null."
        ],
        "return": [
          "a suitable Logger"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Logger",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAnonymousLogger",
      "comment": "Create an anonymous Logger. The newly created Logger is not registered in the LogManager namespace. There will be no access checks on updates to the logger. This factory method is primarily intended for use from applets. Because the resulting Logger is anonymous it can be kept private by the creating class. This removes the need for normal security checks, which in turn allows untrusted applet code to update the control state of the Logger. For example an applet can do a setLevel or an addHandler on an anonymous Logger. Even although the new logger is anonymous, it is configured to have the root logger (\"\") as its parent. This means that by default it inherits its effective level and handlers from the root logger. Changing its parent via the setParent method will still require the security permission specified by that method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a newly created private Logger"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Logger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "resourceBundleName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAnonymousLogger",
      "comment": "Create an anonymous Logger. The newly created Logger is not registered in the LogManager namespace. There will be no access checks on updates to the logger. This factory method is primarily intended for use from applets. Because the resulting Logger is anonymous it can be kept private by the creating class. This removes the need for normal security checks, which in turn allows untrusted applet code to update the control state of the Logger. For example an applet can do a setLevel or an addHandler on an anonymous Logger. Even although the new logger is anonymous, it is configured to have the root logger (\"\") as its parent. This means that by default it inherits its effective level and handlers from the root logger. Changing its parent via the setParent method will still require the security permission specified by that method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eresourceBundleName\u003c/code\u003e - name of ResourceBundle to be used for localizing messages for this logger. May be null if none of the messages require localization."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if the resourceBundleName is non-null and no corresponding resource can be found."
        ],
        "return": [
          "a newly created private Logger"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResourceBundle",
      "comment": "Retrieve the localization resource bundle for this logger. This method will return a ResourceBundle that was either set by the setResourceBundle method or mapped from the the resource bundle name set via the getLogger factory method for the current default locale. Note that if the result is null, then the Logger will use a resource bundle or resource bundle name inherited from its parent.",
      "annotations": [],
      "tagMap": {
        "return": [
          "localization bundle (may be \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResourceBundleName",
      "comment": "Retrieve the localization resource bundle name for this logger. This is either the name specified through the getLogger factory method, or the base name of the ResourceBundle set through setResourceBundle method. Note that if the result is null, then the Logger will use a resource bundle or resource bundle name inherited from its parent.",
      "annotations": [],
      "tagMap": {
        "return": [
          "localization bundle name (may be \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Filter",
            "type": "Class"
          },
          "name": "newFilter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFilter",
      "comment": "Set a filter to control output on this Logger. After passing the initial \"level\" check, the Logger will call this Filter to check if a log record should really be published.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewFilter\u003c/code\u003e - a filter object (may be null)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists, this logger is not anonymous, and the caller does not have LoggingPermission(\"control\")."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Filter",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFilter",
      "comment": "Get the current filter for this Logger.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a filter object (may be null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.LogRecord",
            "type": "Class"
          },
          "name": "record",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "log",
      "comment": "Log a LogRecord. All the other logging methods in this class call through this method to actually perform any logging. Subclasses can override this single method to capture all log activity.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erecord\u003c/code\u003e - the LogRecord to be published"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "log",
      "comment": "Log a message, with no arguments. If the logger is currently enabled for the given message level then the given message is forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "msgSupplier",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "log",
      "comment": "Log a message, which is only to be constructed if the logging level is such that the message will actually be logged. If the logger is currently enabled for the given message level then the message is constructed by invoking the provided supplier function and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003emsgSupplier\u003c/code\u003e - A function, which when called, produces the desired log message"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "param1",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "log",
      "comment": "Log a message, with one object parameter. If the logger is currently enabled for the given message level then a corresponding LogRecord is created and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003eparam1\u003c/code\u003e - parameter to the message"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "params",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "log",
      "comment": "Log a message, with an array of object arguments. If the logger is currently enabled for the given message level then a corresponding LogRecord is created and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003eparams\u003c/code\u003e - array of parameters to the message"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "thrown",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "log",
      "comment": "Log a message, with associated Throwable information. If the logger is currently enabled for the given message level then the given arguments are stored in a LogRecord which is forwarded to all registered output handlers. Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus it is processed specially by output Formatters and is not treated as a formatting parameter to the LogRecord message property.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003ethrown\u003c/code\u003e - Throwable associated with log message."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "thrown",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "msgSupplier",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "log",
      "comment": "Log a lazily constructed message, with associated Throwable information. If the logger is currently enabled for the given message level then the message is constructed by invoking the provided supplier function. The message and the given Throwable are then stored in a LogRecord which is forwarded to all registered output handlers. Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus it is processed specially by output Formatters and is not treated as a formatting parameter to the LogRecord message property.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003ethrown\u003c/code\u003e - Throwable associated with log message.",
          "\u003ccode\u003emsgSupplier\u003c/code\u003e - A function, which when called, produces the desired log message"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logp",
      "comment": "Log a message, specifying source class and method, with no arguments. If the logger is currently enabled for the given message level then the given message is forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that issued the logging request",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "msgSupplier",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logp",
      "comment": "Log a lazily constructed message, specifying source class and method, with no arguments. If the logger is currently enabled for the given message level then the message is constructed by invoking the provided supplier function and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that issued the logging request",
          "\u003ccode\u003emsgSupplier\u003c/code\u003e - A function, which when called, produces the desired log message"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "param1",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logp",
      "comment": "Log a message, specifying source class and method, with a single object parameter to the log message. If the logger is currently enabled for the given message level then a corresponding LogRecord is created and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that issued the logging request",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003eparam1\u003c/code\u003e - Parameter to the log message."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "params",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logp",
      "comment": "Log a message, specifying source class and method, with an array of object arguments. If the logger is currently enabled for the given message level then a corresponding LogRecord is created and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that issued the logging request",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003eparams\u003c/code\u003e - Array of parameters to the message"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "thrown",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logp",
      "comment": "Log a message, specifying source class and method, with associated Throwable information. If the logger is currently enabled for the given message level then the given arguments are stored in a LogRecord which is forwarded to all registered output handlers. Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus it is processed specially by output Formatters and is not treated as a formatting parameter to the LogRecord message property.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that issued the logging request",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003ethrown\u003c/code\u003e - Throwable associated with log message."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "thrown",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "msgSupplier",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logp",
      "comment": "Log a lazily constructed message, specifying source class and method, with associated Throwable information. If the logger is currently enabled for the given message level then the message is constructed by invoking the provided supplier function. The message and the given Throwable are then stored in a LogRecord which is forwarded to all registered output handlers. Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus it is processed specially by output Formatters and is not treated as a formatting parameter to the LogRecord message property.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that issued the logging request",
          "\u003ccode\u003ethrown\u003c/code\u003e - Throwable associated with log message.",
          "\u003ccode\u003emsgSupplier\u003c/code\u003e - A function, which when called, produces the desired log message"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "bundleName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logrb",
      "comment": "Log a message, specifying source class, method, and resource bundle name with no arguments. If the logger is currently enabled for the given message level then the given message is forwarded to all the registered output Handler objects. The msg string is localized using the named resource bundle. If the resource bundle name is null, or an empty String or invalid then the msg string is not localized.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that issued the logging request",
          "\u003ccode\u003ebundleName\u003c/code\u003e - name of resource bundle to localize msg, can be null",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "bundleName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "param1",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logrb",
      "comment": "Log a message, specifying source class, method, and resource bundle name, with a single object parameter to the log message. If the logger is currently enabled for the given message level then a corresponding LogRecord is created and forwarded to all the registered output Handler objects. The msg string is localized using the named resource bundle. If the resource bundle name is null, or an empty String or invalid then the msg string is not localized.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that issued the logging request",
          "\u003ccode\u003ebundleName\u003c/code\u003e - name of resource bundle to localize msg, can be null",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003eparam1\u003c/code\u003e - Parameter to the log message."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "bundleName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "params",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logrb",
      "comment": "Log a message, specifying source class, method, and resource bundle name, with an array of object arguments. If the logger is currently enabled for the given message level then a corresponding LogRecord is created and forwarded to all the registered output Handler objects. The msg string is localized using the named resource bundle. If the resource bundle name is null, or an empty String or invalid then the msg string is not localized.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that issued the logging request",
          "\u003ccode\u003ebundleName\u003c/code\u003e - name of resource bundle to localize msg, can be null.",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003eparams\u003c/code\u003e - Array of parameters to the message"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.ResourceBundle",
            "type": "Class"
          },
          "name": "bundle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "params",
          "varargs": true
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logrb",
      "comment": "Log a message, specifying source class, method, and resource bundle, with an optional list of message parameters. If the logger is currently enabled for the given message level then a corresponding LogRecord is created and forwarded to all the registered output Handler objects. The msg string is localized using the given resource bundle. If the resource bundle is null, then the msg string is not localized.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., \n\u003ccode\u003eSEVERE\u003c/code\u003e",
          "\u003ccode\u003esourceClass\u003c/code\u003e - Name of the class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - Name of the method that issued the logging request",
          "\u003ccode\u003ebundle\u003c/code\u003e - Resource bundle to localize \n\u003ccode\u003emsg\u003c/code\u003e, can be \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003eparams\u003c/code\u003e - Parameters to the message (optional, may be none)."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.ResourceBundle",
            "type": "Class"
          },
          "name": "bundle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "params",
          "varargs": true
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logrb",
      "comment": "Log a message, specifying source class, method, and resource bundle, with an optional list of message parameters. If the logger is currently enabled for the given message level then a corresponding LogRecord is created and forwarded to all the registered output Handler objects. The msg string is localized using the given resource bundle. If the resource bundle is null, then the msg string is not localized.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., \n\u003ccode\u003eSEVERE\u003c/code\u003e",
          "\u003ccode\u003ebundle\u003c/code\u003e - Resource bundle to localize \n\u003ccode\u003emsg\u003c/code\u003e; can be \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003eparams\u003c/code\u003e - Parameters to the message (optional, may be none)."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "bundleName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "thrown",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logrb",
      "comment": "Log a message, specifying source class, method, and resource bundle name, with associated Throwable information. If the logger is currently enabled for the given message level then the given arguments are stored in a LogRecord which is forwarded to all registered output handlers. The msg string is localized using the named resource bundle. If the resource bundle name is null, or an empty String or invalid then the msg string is not localized. Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus it is processed specially by output Formatters and is not treated as a formatting parameter to the LogRecord message property.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., SEVERE",
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that issued the logging request",
          "\u003ccode\u003ebundleName\u003c/code\u003e - name of resource bundle to localize msg, can be null",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003ethrown\u003c/code\u003e - Throwable associated with log message."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.ResourceBundle",
            "type": "Class"
          },
          "name": "bundle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "thrown",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logrb",
      "comment": "Log a message, specifying source class, method, and resource bundle, with associated Throwable information. If the logger is currently enabled for the given message level then the given arguments are stored in a LogRecord which is forwarded to all registered output handlers. The msg string is localized using the given resource bundle. If the resource bundle is null, then the msg string is not localized. Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus it is processed specially by output Formatter objects and is not treated as a formatting parameter to the LogRecord message property.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., \n\u003ccode\u003eSEVERE\u003c/code\u003e",
          "\u003ccode\u003esourceClass\u003c/code\u003e - Name of the class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - Name of the method that issued the logging request",
          "\u003ccode\u003ebundle\u003c/code\u003e - Resource bundle to localize \n\u003ccode\u003emsg\u003c/code\u003e, can be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003ethrown\u003c/code\u003e - Throwable associated with the log message."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.ResourceBundle",
            "type": "Class"
          },
          "name": "bundle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "thrown",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "logrb",
      "comment": "Log a message, specifying source class, method, and resource bundle, with associated Throwable information. If the logger is currently enabled for the given message level then the given arguments are stored in a LogRecord which is forwarded to all registered output handlers. The msg string is localized using the given resource bundle. If the resource bundle is null, then the msg string is not localized. Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus it is processed specially by output Formatter objects and is not treated as a formatting parameter to the LogRecord message property.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - One of the message level identifiers, e.g., \n\u003ccode\u003eSEVERE\u003c/code\u003e",
          "\u003ccode\u003ebundle\u003c/code\u003e - Resource bundle to localize \n\u003ccode\u003emsg\u003c/code\u003e; can be \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)",
          "\u003ccode\u003ethrown\u003c/code\u003e - Throwable associated with the log message."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "entering",
      "comment": "Log a method entry. This is a convenience method that can be used to log entry to a method. A LogRecord with message \"ENTRY\", log level FINER, and the given sourceMethod and sourceClass is logged.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that is being entered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "param1",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "entering",
      "comment": "Log a method entry, with one parameter. This is a convenience method that can be used to log entry to a method. A LogRecord with message \"ENTRY {0}\", log level FINER, and the given sourceMethod, sourceClass, and parameter is logged.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that is being entered",
          "\u003ccode\u003eparam1\u003c/code\u003e - parameter to the method being entered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "params",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "entering",
      "comment": "Log a method entry, with an array of parameters. This is a convenience method that can be used to log entry to a method. A LogRecord with message \"ENTRY\" (followed by a format {N} indicator for each entry in the parameter array), log level FINER, and the given sourceMethod, sourceClass, and parameters is logged.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of method that is being entered",
          "\u003ccode\u003eparams\u003c/code\u003e - array of parameters to the method being entered"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "exiting",
      "comment": "Log a method return. This is a convenience method that can be used to log returning from a method. A LogRecord with message \"RETURN\", log level FINER, and the given sourceMethod and sourceClass is logged.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of the method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "result",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "exiting",
      "comment": "Log a method return, with result object. This is a convenience method that can be used to log returning from a method. A LogRecord with message \"RETURN {0}\", log level FINER, and the gives sourceMethod, sourceClass, and result object is logged.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of the method",
          "\u003ccode\u003eresult\u003c/code\u003e - Object that is being returned"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sourceMethod",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "thrown",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "throwing",
      "comment": "Log throwing an exception. This is a convenience method to log that a method is terminating by throwing an exception. The logging is done using the FINER level. If the logger is currently enabled for the given message level then the given arguments are stored in a LogRecord which is forwarded to all registered output handlers. The LogRecord\u0027s message is set to \"THROW\". Note that the thrown argument is stored in the LogRecord thrown property, rather than the LogRecord parameters property. Thus it is processed specially by output Formatters and is not treated as a formatting parameter to the LogRecord message property.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceClass\u003c/code\u003e - name of class that issued the logging request",
          "\u003ccode\u003esourceMethod\u003c/code\u003e - name of the method.",
          "\u003ccode\u003ethrown\u003c/code\u003e - The Throwable that is being thrown."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "severe",
      "comment": "Log a SEVERE message. If the logger is currently enabled for the SEVERE message level then the given message is forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "warning",
      "comment": "Log a WARNING message. If the logger is currently enabled for the WARNING message level then the given message is forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "info",
      "comment": "Log an INFO message. If the logger is currently enabled for the INFO message level then the given message is forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "config",
      "comment": "Log a CONFIG message. If the logger is currently enabled for the CONFIG message level then the given message is forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fine",
      "comment": "Log a FINE message. If the logger is currently enabled for the FINE message level then the given message is forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "finer",
      "comment": "Log a FINER message. If the logger is currently enabled for the FINER message level then the given message is forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "msg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "finest",
      "comment": "Log a FINEST message. If the logger is currently enabled for the FINEST message level then the given message is forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsg\u003c/code\u003e - The string message (or a key in the message catalog)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "msgSupplier",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "severe",
      "comment": "Log a SEVERE message, which is only to be constructed if the logging level is such that the message will actually be logged. If the logger is currently enabled for the SEVERE message level then the message is constructed by invoking the provided supplier function and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsgSupplier\u003c/code\u003e - A function, which when called, produces the desired log message"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "msgSupplier",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "warning",
      "comment": "Log a WARNING message, which is only to be constructed if the logging level is such that the message will actually be logged. If the logger is currently enabled for the WARNING message level then the message is constructed by invoking the provided supplier function and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsgSupplier\u003c/code\u003e - A function, which when called, produces the desired log message"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "msgSupplier",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "info",
      "comment": "Log a INFO message, which is only to be constructed if the logging level is such that the message will actually be logged. If the logger is currently enabled for the INFO message level then the message is constructed by invoking the provided supplier function and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsgSupplier\u003c/code\u003e - A function, which when called, produces the desired log message"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "msgSupplier",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "config",
      "comment": "Log a CONFIG message, which is only to be constructed if the logging level is such that the message will actually be logged. If the logger is currently enabled for the CONFIG message level then the message is constructed by invoking the provided supplier function and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsgSupplier\u003c/code\u003e - A function, which when called, produces the desired log message"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "msgSupplier",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fine",
      "comment": "Log a FINE message, which is only to be constructed if the logging level is such that the message will actually be logged. If the logger is currently enabled for the FINE message level then the message is constructed by invoking the provided supplier function and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsgSupplier\u003c/code\u003e - A function, which when called, produces the desired log message"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "msgSupplier",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "finer",
      "comment": "Log a FINER message, which is only to be constructed if the logging level is such that the message will actually be logged. If the logger is currently enabled for the FINER message level then the message is constructed by invoking the provided supplier function and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsgSupplier\u003c/code\u003e - A function, which when called, produces the desired log message"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "msgSupplier",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "finest",
      "comment": "Log a FINEST message, which is only to be constructed if the logging level is such that the message will actually be logged. If the logger is currently enabled for the FINEST message level then the message is constructed by invoking the provided supplier function and forwarded to all the registered output Handler objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emsgSupplier\u003c/code\u003e - A function, which when called, produces the desired log message"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "newLevel",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLevel",
      "comment": "Set the log level specifying which message levels will be logged by this logger. Message levels lower than this value will be discarded. The level value Level.OFF can be used to turn off logging. If the new level is null, it means that this node should inherit its level from its nearest ancestor with a specific (non-null) level value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewLevel\u003c/code\u003e - the new value for the log level (may be null)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists, this logger is not anonymous, and the caller does not have LoggingPermission(\"control\")."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLevel",
      "comment": "Get the log Level that has been specified for this Logger. The result may be null, which means that this logger\u0027s effective level will be inherited from its parent.",
      "annotations": [],
      "tagMap": {
        "return": [
          "this Logger\u0027s level"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLoggable",
      "comment": "Check if a message of the given level would actually be logged by this logger. This check is based on the Loggers effective level, which may be inherited from its parent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - a message logging level"
        ],
        "return": [
          "true if the given message level is currently being logged."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Get the name for this logger.",
      "annotations": [],
      "tagMap": {
        "return": [
          "logger name. Will be null for anonymous Loggers."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Handler",
            "type": "Class"
          },
          "name": "handler",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addHandler",
      "comment": "Add a log Handler to receive logging messages. By default, Loggers also send their output to their parent logger. Typically the root Logger is configured with a set of Handlers that essentially act as default handlers for all loggers.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehandler\u003c/code\u003e - a logging Handler"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists, this logger is not anonymous, and the caller does not have LoggingPermission(\"control\")."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Handler",
            "type": "Class"
          },
          "name": "handler",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeHandler",
      "comment": "Remove a log Handler. Returns silently if the given Handler is not found or is null",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehandler\u003c/code\u003e - a logging Handler"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists, this logger is not anonymous, and the caller does not have LoggingPermission(\"control\")."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Handler",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHandlers",
      "comment": "Get the Handlers associated with this logger.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array of all registered Handlers"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "useParentHandlers",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUseParentHandlers",
      "comment": "Specify whether or not this logger should send its output to its parent Logger. This means that any LogRecords will also be written to the parent\u0027s Handlers, and potentially to its parent, recursively up the namespace.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euseParentHandlers\u003c/code\u003e - true if output is to be sent to the logger\u0027s parent."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists, this logger is not anonymous, and the caller does not have LoggingPermission(\"control\")."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUseParentHandlers",
      "comment": "Discover whether or not this logger is sending its output to its parent logger.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if output is to be sent to the logger\u0027s parent"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.ResourceBundle",
            "type": "Class"
          },
          "name": "bundle",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setResourceBundle",
      "comment": "Sets a resource bundle on this logger. All messages will be logged using the given resource bundle for its specific locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebundle\u003c/code\u003e - The resource bundle that this logger shall use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given bundle is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given bundle doesn\u0027t have a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#getBaseBundleName()\"\u003ebase name\u003c/a\u003e, or if this logger already has a resource bundle set but the given bundle has a different base name.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists, this logger is not anonymous, and the caller does not have LoggingPermission(\"control\")."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Logger",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParent",
      "comment": "Return the parent for this Logger. This method returns the nearest extant parent in the namespace. Thus if a Logger is called \"a.b.c.d\", and a Logger called \"a.b\" has been created but no logger \"a.b.c\" exists, then a call of getParent on the Logger \"a.b.c.d\" will return the Logger \"a.b\". The result will be null if it is called on the root Logger in the namespace.",
      "annotations": [],
      "tagMap": {
        "return": [
          "nearest existing parent Logger"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.logging.Logger",
            "type": "Class"
          },
          "name": "parent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setParent",
      "comment": "Set the parent for this Logger. This method is used by the LogManager to update a Logger when the namespace changes. It should not be called from application code.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - the new parent logger"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have LoggingPermission(\"control\")."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "resourceBundleName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Protected method to construct a logger for a named subsystem. The logger will be initially configured with a null Level and with useParentHandlers set to true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - A name for the logger. This should be a dot-separated name and should normally be based on the package name or class name of the subsystem, such as java.net or javax.swing. It may be null for anonymous Loggers.",
          "\u003ccode\u003eresourceBundleName\u003c/code\u003e - name of ResourceBundle to be used for localizing messages for this logger. May be null if none of the messages require localization."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if the resourceBundleName is non-null and no corresponding resource can be found."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.logging.Logger",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}