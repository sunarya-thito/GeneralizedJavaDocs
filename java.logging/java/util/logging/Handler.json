{
  "packageName": "java.util.logging",
  "simpleName": "Handler",
  "moduleName": "java.logging",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.logging.LogRecord",
            "type": "Class"
          },
          "field": {
            "name": "record"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "publish",
      "comment": "Publish a LogRecord. The logging request was made initially to a Logger object, which initialized the LogRecord and forwarded it here. The Handler is responsible for formatting the message, when and if necessary. The formatting should include localization.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erecord\u003c/code\u003e - description of the log event. A null record is silently ignored and is not published"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "flush",
      "comment": "Flush any buffered output.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "close",
      "comment": "Close the Handler and free all associated resources. The close method will perform a flush and then close the Handler. After close has been called this Handler should no longer be used. Method calls may either be silently ignored or may throw runtime exceptions.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.logging.Formatter",
            "type": "Class"
          },
          "field": {
            "name": "newFormatter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFormatter",
      "comment": "Set a Formatter. This Formatter will be used to format LogRecords for this Handler. Some Handlers may not use Formatters, in which case the Formatter will be remembered, but not used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewFormatter\u003c/code\u003e - the \n\u003ccode\u003eFormatter\u003c/code\u003e to use (may not be null)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Formatter",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFormatter",
      "comment": "Return the Formatter for this Handler.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eFormatter\u003c/code\u003e (may be null)."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        },
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "encoding"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEncoding",
      "comment": "Set the character encoding used by this Handler. The encoding should be set before any LogRecords are written to the Handler.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eencoding\u003c/code\u003e - The name of a supported character encoding. May be null, to indicate the default platform encoding."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - if the named encoding is not supported."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEncoding",
      "comment": "Return the character encoding for this Handler.",
      "tagMap": {
        "return": [
          "The encoding name. May be null, which indicates the default encoding should be used."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.logging.Filter",
            "type": "Class"
          },
          "field": {
            "name": "newFilter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFilter",
      "comment": "Set a Filter to control output on this Handler. For each call of publish the Handler will call this Filter (if it is non-null) to check if the LogRecord should be published or discarded.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewFilter\u003c/code\u003e - a \n\u003ccode\u003eFilter\u003c/code\u003e object (may be null)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Filter",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFilter",
      "comment": "Get the current Filter for this Handler.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eFilter\u003c/code\u003e object (may be null)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.logging.ErrorManager",
            "type": "Class"
          },
          "field": {
            "name": "em"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setErrorManager",
      "comment": "Define an ErrorManager for this Handler. The ErrorManager\u0027s \"error\" method will be invoked if any errors occur while using this Handler.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eem\u003c/code\u003e - the new ErrorManager"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.ErrorManager",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getErrorManager",
      "comment": "Retrieves the ErrorManager for this Handler.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e."
        ],
        "return": [
          "the ErrorManager for this Handler"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "msg"
          }
        },
        {
          "type": {
            "name": "java.lang.Exception",
            "type": "Class"
          },
          "field": {
            "name": "ex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "code"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "reportError",
      "comment": "Protected convenience method to report an error to this Handler\u0027s ErrorManager. Note that this method retrieves and uses the ErrorManager without doing a security check. It can therefore be used in environments where the caller may be non-privileged.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emsg\u003c/code\u003e - a descriptive string (may be null)",
          "\u003ccode\u003eex\u003c/code\u003e - an exception (may be null)",
          "\u003ccode\u003ecode\u003c/code\u003e - an error code defined in ErrorManager"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.SecurityException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.logging.Level",
            "type": "Class"
          },
          "field": {
            "name": "newLevel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLevel",
      "comment": "Set the log level specifying which message levels will be logged by this Handler. Message levels lower than this value will be discarded. The intention is to allow developers to turn on voluminous logging, but to limit the messages that are sent to certain Handlers.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewLevel\u003c/code\u003e - the new value for the log level"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and if the caller does not have \n\u003ccode\u003eLoggingPermission(\"control\")\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.logging.Level",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLevel",
      "comment": "Get the log level specifying which messages will be logged by this Handler. Message levels lower than this level will be discarded.",
      "tagMap": {
        "return": [
          "the level of messages being logged."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.logging.LogRecord",
            "type": "Class"
          },
          "field": {
            "name": "record"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLoggable",
      "comment": "Check if this Handler would actually log a given LogRecord. This method checks if the LogRecord has an appropriate Level and whether it satisfies any Filter. It also may make other Handler specific checks that might prevent a handler from logging the LogRecord. It will return false if the LogRecord is null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erecord\u003c/code\u003e - a \n\u003ccode\u003eLogRecord\u003c/code\u003e (may be null)."
        ],
        "return": [
          "true if the \n\u003ccode\u003eLogRecord\u003c/code\u003e would be logged."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Default constructor. The resulting Handler has a log level of Level.ALL, no Formatter, and no Filter. A default ErrorManager instance is installed as the ErrorManager.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.logging.Handler",
  "comment": "A \n\u003ccode\u003eHandler\u003c/code\u003e object takes log messages from a \n\u003ccode\u003eLogger\u003c/code\u003e and exports them. It might for example, write them to a console or write them to a file, or send them to a network logging service, or forward them to an OS log, or whatever. \n\u003cp\u003e A \u003ccode\u003eHandler\u003c/code\u003e can be disabled by doing a \u003ccode\u003esetLevel(Level.OFF)\u003c/code\u003e and can be re-enabled by doing a \u003ccode\u003esetLevel\u003c/code\u003e with an appropriate level. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eHandler\u003c/code\u003e classes typically use \u003ccode\u003eLogManager\u003c/code\u003e properties to set default values for the \u003ccode\u003eHandler\u003c/code\u003e\u0027s \u003ccode\u003eFilter\u003c/code\u003e, \u003ccode\u003eFormatter\u003c/code\u003e, and \u003ccode\u003eLevel\u003c/code\u003e. See the specific documentation for each concrete \u003ccode\u003eHandler\u003c/code\u003e class.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}