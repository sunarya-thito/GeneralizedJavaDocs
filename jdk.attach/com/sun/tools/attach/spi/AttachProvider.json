{
  "packageName": "com.sun.tools.attach.spi",
  "simpleName": "AttachProvider",
  "moduleName": "jdk.attach",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "name",
      "comment": "Return this provider\u0027s name.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The name of this provider"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "type",
      "comment": "Return this provider\u0027s type.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The type of this provider"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.tools.attach.VirtualMachine",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "attachVirtualMachine",
      "comment": "Attaches to a Java virtual machine. A Java virtual machine is identified by an abstract identifier. The nature of this identifier is platform dependent but in many cases it will be the string representation of the process identifier (or pid). This method parses the identifier and maps the identifier to a Java virtual machine (in an implementation dependent manner). If the identifier cannot be parsed by the provider then an AttachNotSupportedException is thrown. Once parsed this method attempts to attach to the Java virtual machine. If the provider detects that the identifier corresponds to a Java virtual machine that does not exist, or it corresponds to a Java virtual machine that does not support the attach mechanism implemented by this provider, or it detects that the Java virtual machine is a version to which this provider cannot attach, then an AttachNotSupportedException is thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - The abstract identifier that identifies the Java virtual machine."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager has been installed and it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.attach/com/sun/tools/attach/AttachPermission.html\" title\u003d\"class in com.sun.tools.attach\"\u003e\u003ccode\u003eAttachPermission\u003c/code\u003e\u003c/a\u003e (\"\n\u003ccode\u003eattachVirtualMachine\u003c/code\u003e\"), or other permission required by the implementation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.attach/com/sun/tools/attach/AttachNotSupportedException.html\" title\u003d\"class in com.sun.tools.attach\"\u003eAttachNotSupportedException\u003c/a\u003e\u003c/code\u003e - If the identifier cannot be parsed, or it corresponds to to a Java virtual machine that does not exist, or it corresponds to a Java virtual machine which this provider cannot attach.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If some other I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eid\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "VirtualMachine representing the target virtual machine."
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.tools.attach.VirtualMachine",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "attachVirtualMachine",
      "comment": "Attaches to a Java virtual machine. A Java virtual machine can be described using a VirtualMachineDescriptor. This method invokes the descriptor\u0027s provider() method to check that it is equal to this provider. It then attempts to attach to the Java virtual machine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evmd\u003c/code\u003e - The virtual machine descriptor"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager has been installed and it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.attach/com/sun/tools/attach/AttachPermission.html\" title\u003d\"class in com.sun.tools.attach\"\u003e\u003ccode\u003eAttachPermission\u003c/code\u003e\u003c/a\u003e (\"\n\u003ccode\u003eattachVirtualMachine\u003c/code\u003e\"), or other permission required by the implementation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.attach/com/sun/tools/attach/AttachNotSupportedException.html\" title\u003d\"class in com.sun.tools.attach\"\u003eAttachNotSupportedException\u003c/a\u003e\u003c/code\u003e - If the descriptor\u0027s \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.attach/com/sun/tools/attach/VirtualMachineDescriptor.html#provider()\"\u003e\u003ccode\u003eprovider()\u003c/code\u003e\u003c/a\u003e method returns a provider that is not this provider, or it does not correspond to a Java virtual machine to which this provider can attach.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If some other I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003evmd\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "VirtualMachine representing the target virtual machine."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.tools.attach.VirtualMachineDescriptor",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "listVirtualMachines",
      "comment": "Lists the Java virtual machines known to this provider. This method returns a list of VirtualMachineDescriptor elements. Each VirtualMachineDescriptor describes a Java virtual machine to which this provider can potentially attach. There isn\u0027t any guarantee that invoking attachVirtualMachine on each descriptor in the list will succeed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The list of virtual machine descriptors which describe the Java virtual machines known to this provider (may be empty)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.tools.attach.spi.AttachProvider",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "providers",
      "comment": "Returns a list of the installed attach providers. An AttachProvider is installed on the platform if: It is installed in a JAR file that is visible to the defining class loader of the AttachProvider type (usually, but not required to be, the system class loader). The JAR file contains a provider configuration named com.sun.tools.attach.spi.AttachProvider in the resource directory META-INF/services. The provider configuration file lists the full-qualified class name of the AttachProvider implementation. The format of the provider configuration file is one fully-qualified class name per line. Space and tab characters surrounding each class name, as well as blank lines are ignored. The comment character is \u0027#\u0027 (0x23), and on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8. AttachProvider implementations are loaded and instantiated (using the zero-arg constructor) at the first invocation of this method. The list returned by the first invocation of this method is the list of providers. Subsequent invocations of this method return a list of the same providers. The list is unmodifiable.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A list of the installed attach providers."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initializes a new instance of this class.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager has been installed and it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.attach/com/sun/tools/attach/AttachPermission.html\" title\u003d\"class in com.sun.tools.attach\"\u003e\u003ccode\u003eAttachPermission\u003c/code\u003e\u003c/a\u003e (\"\n\u003ccode\u003ecreateAttachProvider\u003c/code\u003e\")"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "com.sun.tools.attach.spi.AttachProvider",
  "comment": "Attach provider class for attaching to a Java virtual machine. \n\u003cp\u003e An attach provider is a concrete subclass of this class that has a zero-argument constructor and implements the abstract methods specified below. \u003c/p\u003e\n\u003cp\u003e An attach provider implementation is typically tied to a Java virtual machine implementation, version, or even mode of operation. That is, a specific provider implementation will typically only be capable of attaching to a specific Java virtual machine implementation or version. For example, Oracle\u0027s JDK implementation ships with provider implementations that can only attach to Oracle\u0027s \u003ci\u003eHotSpot\u003c/i\u003e virtual machine. In general, if an environment consists of Java virtual machines of different versions and from different vendors then there will be an attach provider implementation for each \u003ci\u003efamily\u003c/i\u003e of implementations or versions. \u003c/p\u003e\n\u003cp\u003e An attach provider is identified by its \u003ca href\u003d\"#name()\"\u003e\u003ccode\u003e\u003ci\u003ename\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#type()\"\u003e\u003ccode\u003e\u003ci\u003etype\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e. The \u003ci\u003ename\u003c/i\u003e is typically, but not required to be, a name that corresponds to the VM vendor. The Oracle JDK implementation, for example, ships with attach providers that use the package name \u003ci\u003e\"sun\"\u003c/i\u003e (for historical reasons). The \u003ci\u003etype\u003c/i\u003e typically corresponds to the attach mechanism. For example, an implementation that uses the Doors inter-process communication mechanism might use the type \u003ci\u003e\"doors\"\u003c/i\u003e. The purpose of the name and type is to identify providers in environments where there are multiple providers installed. \u003c/p\u003e\n\u003cp\u003e AttachProvider implementations are loaded and instantiated at the first invocation of the \u003ca href\u003d\"#providers()\"\u003e\u003ccode\u003eproviders\u003c/code\u003e\u003c/a\u003e method. This method attempts to load all provider implementations that are installed on the platform. \u003c/p\u003e\n\u003cp\u003e All of the methods in this class are safe for use by multiple concurrent threads.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}