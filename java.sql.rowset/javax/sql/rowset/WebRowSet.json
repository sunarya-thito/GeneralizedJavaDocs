{
  "packageName": "javax.sql.rowset",
  "simpleName": "WebRowSet",
  "moduleName": "java.sql.rowset",
  "type": "INTERFACE",
  "superClass": {
    "name": "javax.sql.rowset.CachedRowSet",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "PUBLIC_XML_SCHEMA",
      "comment": "The public identifier for the XML Schema definition that defines the XML tags and their valid values for a WebRowSet implementation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.WebRowSet.PUBLIC_XML_SCHEMA\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "SCHEMA_SYSTEM_ID",
      "comment": "The URL for the XML Schema definition file that defines the XML tags and their valid values for a WebRowSet implementation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.WebRowSet.SCHEMA_SYSTEM_ID\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "readXml",
      "comment": "Reads a WebRowSet object in its XML format from the given Reader object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e stream from which this \n\u003ccode\u003eWebRowSet\u003c/code\u003e object will be populated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "iStream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "readXml",
      "comment": "Reads a stream based XML input to populate this WebRowSet object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eiStream\u003c/code\u003e - the \n\u003ccode\u003ejava.io.InputStream\u003c/code\u003e from which this \n\u003ccode\u003eWebRowSet\u003c/code\u003e object will be populated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a data source access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an IO exception occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.sql.ResultSet",
            "type": "Class"
          },
          "field": {
            "name": "rs"
          }
        },
        {
          "type": {
            "name": "java.io.Writer",
            "type": "Class"
          },
          "field": {
            "name": "writer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeXml",
      "comment": "Populates this WebRowSet object with the contents of the given ResultSet object and writes its data, properties, and metadata to the given Writer object in XML format. NOTE: The WebRowSet cursor may be moved to write out the contents to the XML data source. If implemented in this way, the cursor must be returned to its position just prior to the writeXml() call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ers\u003c/code\u003e - the \n\u003ccode\u003eResultSet\u003c/code\u003e object with which to populate this \n\u003ccode\u003eWebRowSet\u003c/code\u003e object",
          "\u003ccode\u003ewriter\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Writer\u003c/code\u003e object to write to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs writing out the rowset contents in XML format"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.sql.ResultSet",
            "type": "Class"
          },
          "field": {
            "name": "rs"
          }
        },
        {
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "field": {
            "name": "oStream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeXml",
      "comment": "Populates this WebRowSet object with the contents of the given ResultSet object and writes its data, properties, and metadata to the given OutputStream object in XML format. NOTE: The WebRowSet cursor may be moved to write out the contents to the XML data source. If implemented in this way, the cursor must be returned to its position just prior to the writeXml() call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ers\u003c/code\u003e - the \n\u003ccode\u003eResultSet\u003c/code\u003e object with which to populate this \n\u003ccode\u003eWebRowSet\u003c/code\u003e object",
          "\u003ccode\u003eoStream\u003c/code\u003e - the \n\u003ccode\u003ejava.io.OutputStream\u003c/code\u003e to write to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a data source access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a IO exception occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.Writer",
            "type": "Class"
          },
          "field": {
            "name": "writer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeXml",
      "comment": "Writes the data, properties, and metadata for this WebRowSet object to the given Writer object in XML format.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ewriter\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Writer\u003c/code\u003e stream to write to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs writing out the rowset contents to XML"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "field": {
            "name": "oStream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeXml",
      "comment": "Writes the data, properties, and metadata for this WebRowSet object to the given OutputStream object in XML format.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoStream\u003c/code\u003e - the \n\u003ccode\u003ejava.io.OutputStream\u003c/code\u003e stream to write to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a data source access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a IO exception occurs"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.sql.rowset.WebRowSet",
  "comment": "The standard interface that all implementations of a \n\u003ccode\u003eWebRowSet\u003c/code\u003e must implement. \n\u003ch2\u003e1.0 Overview\u003c/h2\u003e The \n\u003ccode\u003eWebRowSetImpl\u003c/code\u003e provides the standard reference implementation, which may be extended if required. \n\u003cp\u003e The standard WebRowSet XML Schema definition is available at the following URI: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e \u003ca href\u003d\"http://xmlns.jcp.org/xml/ns//jdbc/webrowset.xsd\"\u003ehttp://xmlns.jcp.org/xml/ns//jdbc/webrowset.xsd\u003c/a\u003e \u003c/li\u003e \n\u003c/ul\u003e It describes the standard XML document format required when describing a \n\u003ccode\u003eRowSet\u003c/code\u003e object in XML and must be used be all standard implementations of the \n\u003ccode\u003eWebRowSet\u003c/code\u003e interface to ensure interoperability. In addition, the \n\u003ccode\u003eWebRowSet\u003c/code\u003e schema uses specific SQL/XML Schema annotations, thus ensuring greater cross platform interoperability. This is an effort currently under way at the ISO organization. The SQL/XML definition is available at the following URI: \n\u003cul\u003e \n \u003cli\u003e \u003ca href\u003d\"http://standards.iso.org/iso/9075/2002/12/sqlxml.xsd\"\u003ehttp://standards.iso.org/iso/9075/2002/12/sqlxml.xsd\u003c/a\u003e \u003c/li\u003e \n\u003c/ul\u003e The schema definition describes the internal data of a \n\u003ccode\u003eRowSet\u003c/code\u003e object in three distinct areas: \n\u003cul\u003e \n \u003cli\u003eproperties - These properties describe the standard synchronization provider properties in addition to the more general \u003ccode\u003eRowSet\u003c/code\u003e properties. \u003c/li\u003e \n \u003cli\u003emetadata - This describes the metadata associated with the tabular structure governed by a \u003ccode\u003eWebRowSet\u003c/code\u003e object. The metadata described is closely aligned with the metadata accessible in the underlying \u003ccode\u003ejava.sql.ResultSet\u003c/code\u003e interface. \u003c/li\u003e \n \u003cli\u003edata - This describes the original data (the state of data since the last population or last synchronization of the \u003ccode\u003eWebRowSet\u003c/code\u003e object) and the current data. By keeping track of the delta between the original data and the current data, a \u003ccode\u003eWebRowSet\u003c/code\u003e maintains the ability to synchronize changes in its data back to the originating data source. \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003e2.0 WebRowSet States\u003c/h2\u003e The following sections demonstrates how a \n\u003ccode\u003eWebRowSet\u003c/code\u003e implementation should use the XML Schema to describe update, insert, and delete operations and to describe the state of a \n\u003ccode\u003eWebRowSet\u003c/code\u003e object in XML. \n\u003ch2\u003e2.1 State 1 - Outputting a \u003ccode\u003eWebRowSet\u003c/code\u003e Object to XML\u003c/h2\u003e In this example, a \n\u003ccode\u003eWebRowSet\u003c/code\u003e object is created and populated with a simple 2 column, 5 row table from a data source. Having the 5 rows in a \n\u003ccode\u003eWebRowSet\u003c/code\u003e object makes it possible to describe them in XML. The metadata describing the various standard JavaBeans properties as defined in the RowSet interface plus the standard properties defined in the \n\u003ccode\u003eCachedRowSet\u003c/code\u003e interface provide key details that describe WebRowSet properties. Outputting the WebRowSet object to XML using the standard \n\u003ccode\u003ewriteXml\u003c/code\u003e methods describes the internal properties as follows: \n\u003cpre\u003e \u003ccode\u003e\n \u0026lt;properties\u0026gt;\n       \u0026lt;command\u0026gt;select co1, col2 from test_table\u0026lt;/command\u0026gt;\n      \u0026lt;concurrency\u0026gt;1\u0026lt;/concurrency\u0026gt;\n      \u0026lt;datasource/\u0026gt;\n      \u0026lt;escape-processing\u0026gt;true\u0026lt;/escape-processing\u0026gt;\n      \u0026lt;fetch-direction\u0026gt;0\u0026lt;/fetch-direction\u0026gt;\n      \u0026lt;fetch-size\u0026gt;0\u0026lt;/fetch-size\u0026gt;\n      \u0026lt;isolation-level\u0026gt;1\u0026lt;/isolation-level\u0026gt;\n      \u0026lt;key-columns/\u0026gt;\n      \u0026lt;map/\u0026gt;\n      \u0026lt;max-field-size\u0026gt;0\u0026lt;/max-field-size\u0026gt;\n      \u0026lt;max-rows\u0026gt;0\u0026lt;/max-rows\u0026gt;\n      \u0026lt;query-timeout\u0026gt;0\u0026lt;/query-timeout\u0026gt;\n      \u0026lt;read-only\u0026gt;false\u0026lt;/read-only\u0026gt;\n      \u0026lt;rowset-type\u0026gt;TRANSACTION_READ_UNCOMMITTED\u0026lt;/rowset-type\u0026gt;\n      \u0026lt;show-deleted\u0026gt;false\u0026lt;/show-deleted\u0026gt;\n      \u0026lt;table-name/\u0026gt;\n      \u0026lt;url\u0026gt;jdbc:thin:oracle\u0026lt;/url\u0026gt;\n      \u0026lt;sync-provider\u0026gt;\n              \u0026lt;sync-provider-name\u0026gt;.com.rowset.provider.RIOptimisticProvider\u0026lt;/sync-provider-name\u0026gt;\n              \u0026lt;sync-provider-vendor\u0026gt;Oracle Corporation\u0026lt;/sync-provider-vendor\u0026gt;\n              \u0026lt;sync-provider-version\u0026gt;1.0\u0026lt;/sync-provider-name\u0026gt;\n              \u0026lt;sync-provider-grade\u0026gt;LOW\u0026lt;/sync-provider-grade\u0026gt;\n              \u0026lt;data-source-lock\u0026gt;NONE\u0026lt;/data-source-lock\u0026gt;\n      \u0026lt;/sync-provider\u0026gt;\n \u0026lt;/properties\u0026gt;\n \u003c/code\u003e \u003c/pre\u003e The meta-data describing the make up of the WebRowSet is described in XML as detailed below. Note both columns are described between the \n\u003ccode\u003ecolumn-definition\u003c/code\u003e tags. \n\u003cpre\u003e \u003ccode\u003e\n \u0026lt;metadata\u0026gt;\n      \u0026lt;column-count\u0026gt;2\u0026lt;/column-count\u0026gt;\n      \u0026lt;column-definition\u0026gt;\n              \u0026lt;column-index\u0026gt;1\u0026lt;/column-index\u0026gt;\n              \u0026lt;auto-increment\u0026gt;false\u0026lt;/auto-increment\u0026gt;\n              \u0026lt;case-sensitive\u0026gt;true\u0026lt;/case-sensitive\u0026gt;\n              \u0026lt;currency\u0026gt;false\u0026lt;/currency\u0026gt;\n              \u0026lt;nullable\u0026gt;1\u0026lt;/nullable\u0026gt;\n              \u0026lt;signed\u0026gt;false\u0026lt;/signed\u0026gt;\n              \u0026lt;searchable\u0026gt;true\u0026lt;/searchable\u0026gt;\n              \u0026lt;column-display-size\u0026gt;10\u0026lt;/column-display-size\u0026gt;\n              \u0026lt;column-label\u0026gt;COL1\u0026lt;/column-label\u0026gt;\n              \u0026lt;column-name\u0026gt;COL1\u0026lt;/column-name\u0026gt;\n              \u0026lt;schema-name/\u0026gt;\n              \u0026lt;column-precision\u0026gt;10\u0026lt;/column-precision\u0026gt;\n              \u0026lt;column-scale\u0026gt;0\u0026lt;/column-scale\u0026gt;\n              \u0026lt;table-name/\u0026gt;\n              \u0026lt;catalog-name/\u0026gt;\n              \u0026lt;column-type\u0026gt;1\u0026lt;/column-type\u0026gt;\n              \u0026lt;column-type-name\u0026gt;CHAR\u0026lt;/column-type-name\u0026gt;\n      \u0026lt;/column-definition\u0026gt;\n      \u0026lt;column-definition\u0026gt;\n              \u0026lt;column-index\u0026gt;2\u0026lt;/column-index\u0026gt;\n              \u0026lt;auto-increment\u0026gt;false\u0026lt;/auto-increment\u0026gt;\n              \u0026lt;case-sensitive\u0026gt;false\u0026lt;/case-sensitive\u0026gt;\n              \u0026lt;currency\u0026gt;false\u0026lt;/currency\u0026gt;\n              \u0026lt;nullable\u0026gt;1\u0026lt;/nullable\u0026gt;\n              \u0026lt;signed\u0026gt;true\u0026lt;/signed\u0026gt;\n              \u0026lt;searchable\u0026gt;true\u0026lt;/searchable\u0026gt;\n              \u0026lt;column-display-size\u0026gt;39\u0026lt;/column-display-size\u0026gt;\n              \u0026lt;column-label\u0026gt;COL2\u0026lt;/column-label\u0026gt;\n              \u0026lt;column-name\u0026gt;COL2\u0026lt;/column-name\u0026gt;\n              \u0026lt;schema-name/\u0026gt;\n              \u0026lt;column-precision\u0026gt;38\u0026lt;/column-precision\u0026gt;\n              \u0026lt;column-scale\u0026gt;0\u0026lt;/column-scale\u0026gt;\n              \u0026lt;table-name/\u0026gt;\n              \u0026lt;catalog-name/\u0026gt;\n              \u0026lt;column-type\u0026gt;3\u0026lt;/column-type\u0026gt;\n              \u0026lt;column-type-name\u0026gt;NUMBER\u0026lt;/column-type-name\u0026gt;\n      \u0026lt;/column-definition\u0026gt;\n \u0026lt;/metadata\u0026gt;\n \u003c/code\u003e\u003c/pre\u003e Having detailed how the properties and metadata are described, the following details how the contents of a \n\u003ccode\u003eWebRowSet\u003c/code\u003e object is described in XML. Note, that this describes a \n\u003ccode\u003eWebRowSet\u003c/code\u003e object that has not undergone any modifications since its instantiation. A \n\u003ccode\u003ecurrentRow\u003c/code\u003e tag is mapped to each row of the table structure that the \n\u003ccode\u003eWebRowSet\u003c/code\u003e object provides. A \n\u003ccode\u003ecolumnValue\u003c/code\u003e tag may contain either the \n\u003ccode\u003estringData\u003c/code\u003e or \n\u003ccode\u003ebinaryData\u003c/code\u003e tag, according to the SQL type that the XML value is mapping back to. The \n\u003ccode\u003ebinaryData\u003c/code\u003e tag contains data in the Base64 encoding and is typically used for \n\u003ccode\u003eBLOB\u003c/code\u003e and \n\u003ccode\u003eCLOB\u003c/code\u003e type data. \n\u003cpre\u003e \u003ccode\u003e\n \u0026lt;data\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      firstrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      1\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      secondrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      2\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      thirdrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      3\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      fourthrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      4\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n \u0026lt;/data\u0026gt;\n \u003c/code\u003e\u003c/pre\u003e \n\u003ch2\u003e2.2 State 2 - Deleting a Row\u003c/h2\u003e Deleting a row in a \n\u003ccode\u003eWebRowSet\u003c/code\u003e object involves simply moving to the row to be deleted and then calling the method \n\u003ccode\u003edeleteRow\u003c/code\u003e, as in any other \n\u003ccode\u003eRowSet\u003c/code\u003e object. The following two lines of code, in which \n\u003ci\u003ewrs\u003c/i\u003e is a \n\u003ccode\u003eWebRowSet\u003c/code\u003e object, delete the third row. \n\u003cpre\u003e     wrs.absolute(3);\n     wrs.deleteRow();\n \u003c/pre\u003e The XML description shows the third row is marked as a \n\u003ccode\u003edeleteRow\u003c/code\u003e, which eliminates the third row in the \n\u003ccode\u003eWebRowSet\u003c/code\u003e object. \n\u003cpre\u003e \u003ccode\u003e\n \u0026lt;data\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      firstrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      1\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      secondrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      2\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;deleteRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      thirdrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      3\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/deleteRow\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      fourthrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      4\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n \u0026lt;/data\u0026gt;\n\u003c/code\u003e \u003c/pre\u003e \n\u003ch2\u003e2.3 State 3 - Inserting a Row\u003c/h2\u003e A \n\u003ccode\u003eWebRowSet\u003c/code\u003e object can insert a new row by moving to the insert row, calling the appropriate updater methods for each column in the row, and then calling the method \n\u003ccode\u003einsertRow\u003c/code\u003e. \n\u003cpre\u003e \u003ccode\u003e\n wrs.moveToInsertRow();\n wrs.updateString(1, \"fifththrow\");\n wrs.updateString(2, \"5\");\n wrs.insertRow();\n \u003c/code\u003e\u003c/pre\u003e The following code fragment changes the second column value in the row just inserted. Note that this code applies when new rows are inserted right after the current row, which is why the method \n\u003ccode\u003enext\u003c/code\u003e moves the cursor to the correct row. Calling the method \n\u003ccode\u003eacceptChanges\u003c/code\u003e writes the change to the data source. \n\u003cpre\u003e \u003ccode\u003ewrs.moveToCurrentRow();\n wrs.next();\n wrs.updateString(2, \"V\");\n wrs.acceptChanges();\n \u003c/code\u003e\u003c/pre\u003e Describing this in XML demonstrates where the Java code inserts a new row and then performs an update on the newly inserted row on an individual field. \n\u003cpre\u003e \u003ccode\u003e\n \u0026lt;data\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      firstrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      1\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      secondrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      2\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      newthirdrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      III\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;insertRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      fifthrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      5\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;updateValue\u0026gt;\n                      V\n              \u0026lt;/updateValue\u0026gt;\n      \u0026lt;/insertRow\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      fourthrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      4\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n \u0026lt;/date\u0026gt;\n\u003c/code\u003e \u003c/pre\u003e \n\u003ch2\u003e2.4 State 4 - Modifying a Row\u003c/h2\u003e Modifying a row produces specific XML that records both the new value and the value that was replaced. The value that was replaced becomes the original value, and the new value becomes the current value. The following code moves the cursor to a specific row, performs some modifications, and updates the row when complete. \n\u003cpre\u003e\u003ccode\u003e\n wrs.absolute(5);\n wrs.updateString(1, \"new4thRow\");\n wrs.updateString(2, \"IV\");\n wrs.updateRow();\n \u003c/code\u003e\u003c/pre\u003e In XML, this is described by the \n\u003ccode\u003emodifyRow\u003c/code\u003e tag. Both the original and new values are contained within the tag for original row tracking purposes. \n\u003cpre\u003e \u003ccode\u003e\n \u0026lt;data\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      firstrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      1\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      secondrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      2\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      newthirdrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      III\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;currentRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      fifthrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      5\n              \u0026lt;/columnValue\u0026gt;\n      \u0026lt;/currentRow\u0026gt;\n      \u0026lt;modifyRow\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      fourthrow\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;updateValue\u0026gt;\n                      new4thRow\n              \u0026lt;/updateValue\u0026gt;\n              \u0026lt;columnValue\u0026gt;\n                      4\n              \u0026lt;/columnValue\u0026gt;\n              \u0026lt;updateValue\u0026gt;\n                      IV\n              \u0026lt;/updateValue\u0026gt;\n      \u0026lt;/modifyRow\u0026gt;\n \u0026lt;/data\u0026gt;\n \u003c/code\u003e\u003c/pre\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/JdbcRowSet.html\" title\u003d\"interface in javax.sql.rowset\"\u003e\u003ccode\u003eJdbcRowSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/CachedRowSet.html\" title\u003d\"interface in javax.sql.rowset\"\u003e\u003ccode\u003eCachedRowSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/FilteredRowSet.html\" title\u003d\"interface in javax.sql.rowset\"\u003e\u003ccode\u003eFilteredRowSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/JoinRowSet.html\" title\u003d\"interface in javax.sql.rowset\"\u003e\u003ccode\u003eJoinRowSet\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}