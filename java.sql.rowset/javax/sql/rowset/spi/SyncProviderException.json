{
  "packageName": "javax.sql.rowset.spi",
  "simpleName": "SyncProviderException",
  "moduleName": "java.sql.rowset",
  "type": "CLASS",
  "superClass": {
    "name": "java.sql.SQLException",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.sql.rowset.spi.SyncResolver",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSyncResolver",
      "comment": "Retrieves the SyncResolver object that has been set for this SyncProviderException object, or if none has been set, an instance of the default SyncResolver implementation included in the reference implementation. If a SyncProviderException object is thrown, an application may use this method to generate a SyncResolver object with which to resolve the conflict or conflicts that caused the exception to be thrown.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eSyncResolver\u003c/code\u003e object set for this \n\u003ccode\u003eSyncProviderException\u003c/code\u003e object or, if none has been set, an instance of the default \n\u003ccode\u003eSyncResolver\u003c/code\u003e implementation. In addition, the default \n\u003ccode\u003eSyncResolver\u003c/code\u003e implementation is also returned if the \n\u003ccode\u003eSyncResolver()\u003c/code\u003e or \n\u003ccode\u003eSyncResolver(String)\u003c/code\u003e constructors are used to instantiate the \n\u003ccode\u003eSyncResolver\u003c/code\u003e instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sql.rowset.spi.SyncResolver",
            "type": "Class"
          },
          "field": {
            "name": "syncResolver"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSyncResolver",
      "comment": "Sets the SyncResolver object for this SyncProviderException object to the one supplied. If the argument supplied is null, a call to the method getSyncResolver will return the default reference implementation of the SyncResolver interface.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncProviderException.html#getSyncResolver()\"\u003e\u003ccode\u003egetSyncResolver()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esyncResolver\u003c/code\u003e - the \n\u003ccode\u003eSyncResolver\u003c/code\u003e object to be set; cannot be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eSyncResolver\u003c/code\u003e object is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new SyncProviderException object without a detail message.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "msg"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SyncProviderException object with the specified detail message.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emsg\u003c/code\u003e - the detail message"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.sql.rowset.spi.SyncResolver",
            "type": "Class"
          },
          "field": {
            "name": "syncResolver"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a SyncProviderException object with the specified SyncResolver instance.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esyncResolver\u003c/code\u003e - the \n\u003ccode\u003eSyncResolver\u003c/code\u003e instance used to to process the synchronization conflicts"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eSyncResolver\u003c/code\u003e object is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.sql.rowset.spi.SyncProviderException",
  "comment": "Indicates an error with the \n\u003ccode\u003eSyncProvider\u003c/code\u003e mechanism. This exception is created by a \n\u003ccode\u003eSyncProvider\u003c/code\u003e abstract class extension if it encounters violations in reading from or writing to the originating data source. \n\u003cp\u003e If it is implemented to do so, the \u003ccode\u003eSyncProvider\u003c/code\u003e object may also create a \u003ccode\u003eSyncResolver\u003c/code\u003e object and either initialize the \u003ccode\u003eSyncProviderException\u003c/code\u003e object with it at construction time or set it with the \u003ccode\u003eSyncProvider\u003c/code\u003e object at a later time. \u003c/p\u003e\n\u003cp\u003e The method \u003ccode\u003eacceptChanges\u003c/code\u003e will throw this exception after the writer has finished checking for conflicts and has found one or more conflicts. An application may catch a \u003ccode\u003eSyncProviderException\u003c/code\u003e object and call its \u003ccode\u003egetSyncResolver\u003c/code\u003e method to get its \u003ccode\u003eSyncResolver\u003c/code\u003e object. See the code fragment in the interface comment for \u003ca href\u003d\"SyncResolver.html\"\u003e\u003ccode\u003eSyncResolver\u003c/code\u003e\u003c/a\u003e for an example. This \u003ccode\u003eSyncResolver\u003c/code\u003e object will mirror the \u003ccode\u003eRowSet\u003c/code\u003e object that generated the exception, except that it will contain only the values from the data source that are in conflict. All other values in the \u003ccode\u003eSyncResolver\u003c/code\u003e object will be \u003ccode\u003enull\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eSyncResolver\u003c/code\u003e object may be used to examine and resolve each conflict in a row and then go to the next row with a conflict to repeat the procedure. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eSyncProviderException\u003c/code\u003e object may or may not contain a description of the condition causing the exception. The inherited method \u003ccode\u003egetMessage\u003c/code\u003e may be called to retrieve the description if there is one.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html\" title\u003d\"class in javax.sql.rowset.spi\"\u003e\u003ccode\u003eSyncFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncResolver.html\" title\u003d\"interface in javax.sql.rowset.spi\"\u003e\u003ccode\u003eSyncResolver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactoryException.html\" title\u003d\"class in javax.sql.rowset.spi\"\u003e\u003ccode\u003eSyncFactoryException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.sql.rowset.spi.SyncProviderException\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}