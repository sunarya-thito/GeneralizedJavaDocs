{
  "packageName": "javax.sql.rowset.spi",
  "simpleName": "SyncProvider",
  "moduleName": "java.sql.rowset",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GRADE_NONE",
      "comment": "Indicates that no synchronization with the originating data source is provided. A SyncProvider implementation returning this grade will simply attempt to write updates in the RowSet object to the underlying data source without checking the validity of any data.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.spi.SyncProvider.GRADE_NONE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GRADE_CHECK_MODIFIED_AT_COMMIT",
      "comment": "Indicates a low level optimistic synchronization grade with respect to the originating data source. A SyncProvider implementation returning this grade will check only rows that have changed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.spi.SyncProvider.GRADE_CHECK_MODIFIED_AT_COMMIT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GRADE_CHECK_ALL_AT_COMMIT",
      "comment": "Indicates a high level optimistic synchronization grade with respect to the originating data source. A SyncProvider implementation returning this grade will check all rows, including rows that have not changed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.spi.SyncProvider.GRADE_CHECK_ALL_AT_COMMIT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GRADE_LOCK_WHEN_MODIFIED",
      "comment": "Indicates a pessimistic synchronization grade with respect to the originating data source. A SyncProvider implementation returning this grade will lock the row in the originating data source.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.spi.SyncProvider.GRADE_LOCK_WHEN_MODIFIED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GRADE_LOCK_WHEN_LOADED",
      "comment": "Indicates the most pessimistic synchronization grade with respect to the originating data source. A SyncProvider implementation returning this grade will lock the entire view and/or table affected by the original statement used to populate a RowSet object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.spi.SyncProvider.GRADE_LOCK_WHEN_LOADED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DATASOURCE_NO_LOCK",
      "comment": "Indicates that no locks remain on the originating data source. This is the default lock setting for all SyncProvider implementations unless otherwise directed by a RowSet object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.spi.SyncProvider.DATASOURCE_NO_LOCK\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DATASOURCE_ROW_LOCK",
      "comment": "Indicates that a lock is placed on the rows that are touched by the original SQL statement used to populate the RowSet object that is using this SyncProvider object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.spi.SyncProvider.DATASOURCE_ROW_LOCK\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DATASOURCE_TABLE_LOCK",
      "comment": "Indicates that a lock is placed on all tables that are touched by the original SQL statement used to populate the RowSet object that is using this SyncProvider object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.spi.SyncProvider.DATASOURCE_TABLE_LOCK\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DATASOURCE_DB_LOCK",
      "comment": "Indicates that a lock is placed on the entire data source that is the source of data for the RowSet object that is using this SyncProvider object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.spi.SyncProvider.DATASOURCE_DB_LOCK\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UPDATABLE_VIEW_SYNC",
      "comment": "Indicates that a SyncProvider implementation supports synchronization between a RowSet object and the SQL VIEW used to populate it.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.spi.SyncProvider.UPDATABLE_VIEW_SYNC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NONUPDATABLE_VIEW_SYNC",
      "comment": "Indicates that a SyncProvider implementation does not support synchronization between a RowSet object and the SQL VIEW used to populate it.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.spi.SyncProvider.NONUPDATABLE_VIEW_SYNC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getProviderID",
      "comment": "Returns the unique identifier for this SyncProvider object.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e object with the fully qualified class name of this \n\u003ccode\u003eSyncProvider\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sql.RowSetReader",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRowSetReader",
      "comment": "Returns a javax.sql.RowSetReader object, which can be used to populate a RowSet object with data.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ejavax.sql.RowSetReader\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sql.RowSetWriter",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRowSetWriter",
      "comment": "Returns a javax.sql.RowSetWriter object, which can be used to write a RowSet object\u0027s data back to the underlying data source.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003ejavax.sql.RowSetWriter\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getProviderGrade",
      "comment": "Returns a constant indicating the grade of synchronization a RowSet object can expect from this SyncProvider object.",
      "tagMap": {
        "return": [
          "an int that is one of the following constants: SyncProvider.GRADE_NONE, SyncProvider.GRADE_CHECK_MODIFIED_AT_COMMIT, SyncProvider.GRADE_CHECK_ALL_AT_COMMIT, SyncProvider.GRADE_LOCK_WHEN_MODIFIED, SyncProvider.GRADE_LOCK_WHEN_LOADED"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.spi.SyncProviderException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "datasource_lock"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setDataSourceLock",
      "comment": "Sets a lock on the underlying data source at the level indicated by datasource_lock. This should cause the SyncProvider to adjust its behavior by increasing or decreasing the level of optimism it provides for a successful synchronization.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncProvider.html#getDataSourceLock()\"\u003e\u003ccode\u003egetDataSourceLock()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edatasource_lock\u003c/code\u003e - one of the following constants indicating the severity level of data source lock required: \n\u003cpre\u003e           SyncProvider.DATASOURCE_NO_LOCK,\n           SyncProvider.DATASOURCE_ROW_LOCK,\n           SyncProvider.DATASOURCE_TABLE_LOCK,\n           SyncProvider.DATASOURCE_DB_LOCK,\n \u003c/pre\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncProviderException.html\" title\u003d\"class in javax.sql.rowset.spi\"\u003eSyncProviderException\u003c/a\u003e\u003c/code\u003e - if an unsupported data source locking level is set."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.spi.SyncProviderException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDataSourceLock",
      "comment": "Returns the current data source lock severity level active in this SyncProvider implementation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncProvider.html#setDataSourceLock(int)\"\u003e\u003ccode\u003esetDataSourceLock(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncProviderException.html\" title\u003d\"class in javax.sql.rowset.spi\"\u003eSyncProviderException\u003c/a\u003e\u003c/code\u003e - if an error occurs determining the data source locking level."
        ],
        "return": [
          "a constant indicating the current level of data source lock active in this \n\u003ccode\u003eSyncProvider\u003c/code\u003e object; one of the following: \n\u003cpre\u003e           SyncProvider.DATASOURCE_NO_LOCK,\n           SyncProvider.DATASOURCE_ROW_LOCK,\n           SyncProvider.DATASOURCE_TABLE_LOCK,\n           SyncProvider.DATASOURCE_DB_LOCK\n \u003c/pre\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "supportsUpdatableView",
      "comment": "Returns whether this SyncProvider implementation can perform synchronization between a RowSet object and the SQL VIEW in the data source from which the RowSet object got its data.",
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e saying whether this \n\u003ccode\u003eSyncProvider\u003c/code\u003e object supports updating an SQL \n\u003ccode\u003eVIEW\u003c/code\u003e; one of the following: SyncProvider.UPDATABLE_VIEW_SYNC, SyncProvider.NONUPDATABLE_VIEW_SYNC"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getVersion",
      "comment": "Returns the release version of this SyncProvider instance.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e detailing the release version of the \n\u003ccode\u003eSyncProvider\u003c/code\u003e implementation"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getVendor",
      "comment": "Returns the vendor name of this SyncProvider instance",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e detailing the vendor name of this \n\u003ccode\u003eSyncProvider\u003c/code\u003e implementation"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a default SyncProvider object.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.sql.rowset.spi.SyncProvider",
  "comment": "The synchronization mechanism that provides reader/writer capabilities for disconnected \n\u003ccode\u003eRowSet\u003c/code\u003e objects. A \n\u003ccode\u003eSyncProvider\u003c/code\u003e implementation is a class that extends the \n\u003ccode\u003eSyncProvider\u003c/code\u003e abstract class. \n\u003cp\u003e A \u003ccode\u003eSyncProvider\u003c/code\u003e implementation is identified by a unique ID, which is its fully qualified class name. This name must be registered with the \u003ccode\u003eSyncFactory\u003c/code\u003e SPI, thus making the implementation available to all \u003ccode\u003eRowSet\u003c/code\u003e implementations. The factory mechanism in the reference implementation uses this name to instantiate the implementation, which can then provide a \u003ccode\u003eRowSet\u003c/code\u003e object with its reader (a \u003ccode\u003ejavax.sql.RowSetReader\u003c/code\u003e object) and its writer (a \u003ccode\u003ejavax.sql.RowSetWriter\u003c/code\u003e object). \u003c/p\u003e\n\u003cp\u003e The Jdbc \u003ccode\u003eRowSet\u003c/code\u003e Implementations specification provides two reference implementations of the \u003ccode\u003eSyncProvider\u003c/code\u003e abstract class: \u003ccode\u003eRIOptimisticProvider\u003c/code\u003e and \u003ccode\u003eRIXMLProvider\u003c/code\u003e. The \u003ccode\u003eRIOptimisticProvider\u003c/code\u003e can set any \u003ccode\u003eRowSet\u003c/code\u003e implementation with a \u003ccode\u003eRowSetReader\u003c/code\u003e object and a \u003ccode\u003eRowSetWriter\u003c/code\u003e object. However, only the \u003ccode\u003eRIXMLProvider\u003c/code\u003e implementation can set an \u003ccode\u003eXmlReader\u003c/code\u003e object and an \u003ccode\u003eXmlWriter\u003c/code\u003e object. A \u003ccode\u003eWebRowSet\u003c/code\u003e object uses the \u003ccode\u003eXmlReader\u003c/code\u003e object to read data in XML format to populate itself with that data. It uses the \u003ccode\u003eXmlWriter\u003c/code\u003e object to write itself to a stream or \u003ccode\u003ejava.io.Writer\u003c/code\u003e object in XML format. \u003c/p\u003e\n\u003ch2\u003e1.0 Naming Convention for Implementations\u003c/h2\u003e As a guide to naming \n\u003ccode\u003eSyncProvider\u003c/code\u003e implementations, the following should be noted: \n\u003cul\u003e \n \u003cli\u003eThe name for a \u003ccode\u003eSyncProvider\u003c/code\u003e implementation is its fully qualified class name. \u003c/li\u003e\n \u003cli\u003eIt is recommended that vendors supply a \u003ccode\u003eSyncProvider\u003c/code\u003e implementation in a package named \u003ccode\u003eproviders\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e For instance, if a vendor named Fred, Inc. offered a \u003ccode\u003eSyncProvider\u003c/code\u003e implementation, you could have the following: \u003c/p\u003e\n\u003cpre\u003e     Vendor name:  Fred, Inc.\n     Domain name of vendor:  com.fred\n     Package name:  com.fred.providers\n     SyncProvider implementation class name:  HighAvailabilityProvider\n\n     Fully qualified class name of SyncProvider implementation:\n                        com.fred.providers.HighAvailabilityProvider\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following line of code uses the fully qualified name to register this implementation with the \u003ccode\u003eSyncFactory\u003c/code\u003e static instance. \u003c/p\u003e\n\u003cpre\u003e     SyncFactory.registerProvider(\n                          \"com.fred.providers.HighAvailabilityProvider\");\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The default \u003ccode\u003eSyncProvider\u003c/code\u003e object provided with the reference implementation uses the following name: \u003c/p\u003e\n\u003cpre\u003e     com.sun.rowset.providers.RIOptimisticProvider\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Vendors should refer to the reference implementation synchronization providers for additional guidance on how to implement a new \u003ccode\u003eSyncProvider\u003c/code\u003e implementation. \u003c/p\u003e\n\u003ch2\u003e2.0 How a \u003ccode\u003eRowSet\u003c/code\u003e Object Gets Its Provider\u003c/h2\u003e A disconnected \n\u003ccode\u003eRowset\u003c/code\u003e object may get access to a \n\u003ccode\u003eSyncProvider\u003c/code\u003e object in one of the following two ways: \n\u003cul\u003e \n \u003cli\u003eUsing a constructor\u003cbr\u003e \u003cpre\u003e       CachedRowSet crs \u003d new CachedRowSet(\n                  \"com.fred.providers.HighAvailabilitySyncProvider\");\n      \u003c/pre\u003e \u003c/li\u003e\n \u003cli\u003eUsing the \u003ccode\u003esetSyncProvider\u003c/code\u003e method \u003cpre\u003e       CachedRowSet crs \u003d new CachedRowSet();\n       crs.setSyncProvider(\"com.fred.providers.HighAvailabilitySyncProvider\");\n      \u003c/pre\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e By default, the reference implementations of the \u003ccode\u003eRowSet\u003c/code\u003e synchronization providers are always available to the Java platform. If no other pluggable synchronization providers have been correctly registered, the \u003ccode\u003eSyncFactory\u003c/code\u003e will automatically generate an instance of the default \u003ccode\u003eSyncProvider\u003c/code\u003e reference implementation. Thus, in the preceding code fragment, if no implementation named \u003ccode\u003ecom.fred.providers.HighAvailabilitySyncProvider\u003c/code\u003e has been registered with the \u003ccode\u003eSyncFactory\u003c/code\u003e instance, \u003ci\u003ecrs\u003c/i\u003e will be assigned the default provider in the reference implementation, which is \u003ccode\u003ecom.sun.rowset.providers.RIOptimisticProvider\u003c/code\u003e. \u003c/p\u003e\n\u003ch2\u003e3.0 Violations and Synchronization Issues\u003c/h2\u003e If an update between a disconnected \n\u003ccode\u003eRowSet\u003c/code\u003e object and a data source violates the original query or the underlying data source constraints, this will result in undefined behavior for all disconnected \n\u003ccode\u003eRowSet\u003c/code\u003e implementations and their designated \n\u003ccode\u003eSyncProvider\u003c/code\u003e implementations. Not defining the behavior when such violations occur offers greater flexibility for a \n\u003ccode\u003eSyncProvider\u003c/code\u003e implementation to determine its own best course of action. \n\u003cp\u003e A \u003ccode\u003eSyncProvider\u003c/code\u003e implementation may choose to implement a specific handler to handle a subset of query violations. However if an original query violation or a more general data source constraint violation is not handled by the \u003ccode\u003eSyncProvider\u003c/code\u003e implementation, all \u003ccode\u003eSyncProvider\u003c/code\u003e objects must throw a \u003ccode\u003eSyncProviderException\u003c/code\u003e. \u003c/p\u003e\n\u003ch2\u003e4.0 Updatable SQL VIEWs\u003c/h2\u003e It is possible for any disconnected or connected \n\u003ccode\u003eRowSet\u003c/code\u003e object to be populated from an SQL query that is formulated originally from an SQL \n\u003ccode\u003eVIEW\u003c/code\u003e. While in many cases it is possible for an update to be performed to an underlying view, such an update requires additional metadata, which may vary. The \n\u003ccode\u003eSyncProvider\u003c/code\u003e class provides two constants to indicate whether an implementation supports updating an SQL \n\u003ccode\u003eVIEW\u003c/code\u003e. \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003e\u003cb\u003eNONUPDATABLE_VIEW_SYNC\u003c/b\u003e\u003c/code\u003e - Indicates that a \u003ccode\u003eSyncProvider\u003c/code\u003e implementation does not support synchronization with an SQL \u003ccode\u003eVIEW\u003c/code\u003e as the underlying source of data for the \u003ccode\u003eRowSet\u003c/code\u003e object. \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003e\u003cb\u003eUPDATABLE_VIEW_SYNC\u003c/b\u003e\u003c/code\u003e - Indicates that a \u003ccode\u003eSyncProvider\u003c/code\u003e implementation supports synchronization with an SQL \u003ccode\u003eVIEW\u003c/code\u003e as the underlying source of data. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e The default is for a \u003ccode\u003eRowSet\u003c/code\u003e object not to be updatable if it was populated with data from an SQL \u003ccode\u003eVIEW\u003c/code\u003e. \u003c/p\u003e\n\u003ch2\u003e5.0 \u003ccode\u003eSyncProvider\u003c/code\u003e Constants\u003c/h2\u003e The \n\u003ccode\u003eSyncProvider\u003c/code\u003e class provides three sets of constants that are used as return values or parameters for \n\u003ccode\u003eSyncProvider\u003c/code\u003e methods. \n\u003ccode\u003eSyncProvider\u003c/code\u003e objects may be implemented to perform synchronization between a \n\u003ccode\u003eRowSet\u003c/code\u003e object and its underlying data source with varying degrees of care. The first group of constants indicate how synchronization is handled. For example, \n\u003ccode\u003eGRADE_NONE\u003c/code\u003e indicates that a \n\u003ccode\u003eSyncProvider\u003c/code\u003e object will not take any care to see what data is valid and will simply write the \n\u003ccode\u003eRowSet\u003c/code\u003e data to the data source. \n\u003ccode\u003eGRADE_MODIFIED_AT_COMMIT\u003c/code\u003e indicates that the provider will check only modified data for validity. Other grades check all data for validity or set locks when data is modified or loaded. \n\u003col\u003e \n \u003cli\u003eConstants to indicate the synchronization grade of a \u003ccode\u003eSyncProvider\u003c/code\u003e object \n  \u003cul\u003e \n   \u003cli\u003eSyncProvider.GRADE_NONE \u003c/li\u003e\n   \u003cli\u003eSyncProvider.GRADE_MODIFIED_AT_COMMIT \u003c/li\u003e\n   \u003cli\u003eSyncProvider.GRADE_CHECK_ALL_AT_COMMIT \u003c/li\u003e\n   \u003cli\u003eSyncProvider.GRADE_LOCK_WHEN_MODIFIED \u003c/li\u003e\n   \u003cli\u003eSyncProvider.GRADE_LOCK_WHEN_LOADED \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n \u003cli\u003eConstants to indicate what locks are set on the data source \n  \u003cul\u003e \n   \u003cli\u003eSyncProvider.DATASOURCE_NO_LOCK \u003c/li\u003e\n   \u003cli\u003eSyncProvider.DATASOURCE_ROW_LOCK \u003c/li\u003e\n   \u003cli\u003eSyncProvider.DATASOURCE_TABLE_LOCK \u003c/li\u003e\n   \u003cli\u003eSyncProvider.DATASOURCE_DB_LOCK \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n \u003cli\u003eConstants to indicate whether a \u003ccode\u003eSyncProvider\u003c/code\u003e object can perform updates to an SQL \u003ccode\u003eVIEW\u003c/code\u003e \u003cbr\u003e These constants are explained in the preceding section (4.0). \n  \u003cul\u003e \n   \u003cli\u003eSyncProvider.UPDATABLE_VIEW_SYNC \u003c/li\u003e\n   \u003cli\u003eSyncProvider.NONUPDATABLE_VIEW_SYNC \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n\u003c/ol\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html\" title\u003d\"class in javax.sql.rowset.spi\"\u003e\u003ccode\u003eSyncFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactoryException.html\" title\u003d\"class in javax.sql.rowset.spi\"\u003e\u003ccode\u003eSyncFactoryException\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}