{
  "packageName": "javax.sql.rowset.serial",
  "simpleName": "SQLInputImpl",
  "moduleName": "java.sql.rowset",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readString",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as a String in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readString()\"\u003ereadString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position or if there are no further values in the stream."
        ],
        "return": [
          "the next attribute in this \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readBoolean",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as a boolean in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readBoolean()\"\u003ereadBoolean\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position or if there are no further values in the stream."
        ],
        "return": [
          "the next attribute in this \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readByte",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as a byte in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readByte()\"\u003ereadByte\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position or if there are no further values in the stream"
        ],
        "return": [
          "the next attribute in this \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readShort",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as a short in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readShort()\"\u003ereadShort\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position or if there are no more values in the stream"
        ],
        "return": [
          "the next attribute in this \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readInt",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as an int in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readInt()\"\u003ereadInt\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position or if there are no more values in the stream"
        ],
        "return": [
          "the next attribute in this \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readLong",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as a long in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readLong()\"\u003ereadLong\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position or if there are no more values in the stream"
        ],
        "return": [
          "the next attribute in this \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readFloat",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as a float in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readFloat()\"\u003ereadFloat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position or if there are no more values in the stream"
        ],
        "return": [
          "the next attribute in this \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readDouble",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as a double in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readDouble()\"\u003ereadDouble\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position or if there are no more values in the stream"
        ],
        "return": [
          "the next attribute in this \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readBigDecimal",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as a java.math.BigDecimal. This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readBigDecimal()\"\u003ereadBigDecimal\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position or if there are no more values in the stream"
        ],
        "return": [
          "the next attribute in this \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readBytes",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as an array of bytes. This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readBytes()\"\u003ereadBytes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position or if there are no more values in the stream"
        ],
        "return": [
          "the next attribute in this \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Date",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readDate",
      "comment": "Retrieves the next attribute in this SQLInputImpl as a java.sql.Date object. This method does not perform type-safe checking to determine if the returned type is the expected type; this responsibility is delegated to the UDT mapping as defined by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readDate()\"\u003ereadDate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position or if there are no more values in the stream"
        ],
        "return": [
          "the next attribute in this \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Time",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readTime",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as a java.sql.Time object. This method does not perform type-safe checking to determine if the returned type is the expected type as this responsibility is delegated to the UDT mapping as implemented by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readTime()\"\u003ereadTime\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position; or if there are no further values in the stream."
        ],
        "return": [
          "the attribute; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Timestamp",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readTimestamp",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as a java.sql.Timestamp object.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readTimestamp()\"\u003ereadTimestamp\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position; or if there are no further values in the stream."
        ],
        "return": [
          "the attribute; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readCharacterStream",
      "comment": "Retrieves the next attribute in this SQLInputImpl object as a stream of Unicode characters. This method does not perform type-safe checking to determine if the returned type is the expected type as this responsibility is delegated to the UDT mapping as implemented by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readCharacterStream()\"\u003ereadCharacterStream\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position; or if there are no further values in the stream."
        ],
        "return": [
          "the attribute; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readAsciiStream",
      "comment": "Returns the next attribute in this SQLInputImpl object as a stream of ASCII characters. This method does not perform type-safe checking to determine if the returned type is the expected type as this responsibility is delegated to the UDT mapping as implemented by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readAsciiStream()\"\u003ereadAsciiStream\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position; or if there are no further values in the stream."
        ],
        "return": [
          "the attribute; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readBinaryStream",
      "comment": "Returns the next attribute in this SQLInputImpl object as a stream of uninterpreted bytes. This method does not perform type-safe checking to determine if the returned type is the expected type as this responsibility is delegated to the UDT mapping as implemented by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readBinaryStream()\"\u003ereadBinaryStream\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position; or if there are no further values in the stream."
        ],
        "return": [
          "the attribute; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readObject",
      "comment": "Retrieves the value at the head of this SQLInputImpl object as an Object in the Java programming language. The actual type of the object returned is determined by the default mapping of SQL types to types in the Java programming language unless there is a custom mapping, in which case the type of the object returned is determined by this stream\u0027s type map. The JDBC technology-enabled driver registers a type map with the stream before passing the stream to the application. When the datum at the head of the stream is an SQL NULL, this method returns null. If the datum is an SQL structured or distinct type with a custom mapping, this method determines the SQL type of the datum at the head of the stream, constructs an object of the appropriate class, and calls the method SQLData.readSQL on that object. The readSQL method then calls the appropriate SQLInputImpl.readXXX methods to retrieve the attribute values from the stream.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readObject()\"\u003ereadObject\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position; or if there are no further values in the stream."
        ],
        "return": [
          "the value at the head of the stream as an \n\u003ccode\u003eObject\u003c/code\u003e in the Java programming language; \n\u003ccode\u003enull\u003c/code\u003e if the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Ref",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readRef",
      "comment": "Retrieves the value at the head of this SQLInputImpl object as a Ref object in the Java programming language.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readRef()\"\u003ereadRef\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position; or if there are no further values in the stream."
        ],
        "return": [
          "a \n\u003ccode\u003eRef\u003c/code\u003e object representing the SQL \n\u003ccode\u003eREF\u003c/code\u003e value at the head of the stream; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Blob",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readBlob",
      "comment": "Retrieves the BLOB value at the head of this SQLInputImpl object as a Blob object in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type as this responsibility is delegated to the UDT mapping as implemented by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readBlob()\"\u003ereadBlob\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position; or if there are no further values in the stream."
        ],
        "return": [
          "a \n\u003ccode\u003eBlob\u003c/code\u003e object representing the SQL \n\u003ccode\u003eBLOB\u003c/code\u003e value at the head of this stream; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Clob",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readClob",
      "comment": "Retrieves the CLOB value at the head of this SQLInputImpl object as a Clob object in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type as this responsibility is delegated to the UDT mapping as implemented by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readClob()\"\u003ereadClob\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position; or if there are no further values in the stream."
        ],
        "return": [
          "a \n\u003ccode\u003eClob\u003c/code\u003e object representing the SQL \n\u003ccode\u003eCLOB\u003c/code\u003e value at the head of the stream; if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Array",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readArray",
      "comment": "Reads an SQL ARRAY value from the stream and returns it as an Array object in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type as this responsibility is delegated to the UDT mapping as implemented by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readArray()\"\u003ereadArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position; or if there are no further values in the stream."
        ],
        "return": [
          "an \n\u003ccode\u003eArray\u003c/code\u003e object representing the SQL \n\u003ccode\u003eARRAY\u003c/code\u003e value at the head of the stream; * if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "wasNull",
      "comment": "Ascertains whether the last value read from this SQLInputImpl object was null.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#wasNull()\"\u003ewasNull\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs determining the last value read was a \n\u003ccode\u003enull\u003c/code\u003e value or not;"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the SQL value read most recently was \n\u003ccode\u003enull\u003c/code\u003e; otherwise, \n\u003ccode\u003efalse\u003c/code\u003e; by default it will return false"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URL",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readURL",
      "comment": "Reads an SQL DATALINK value from the stream and returns it as an URL object in the Java programming language. This method does not perform type-safe checking to determine if the returned type is the expected type as this responsibility is delegated to the UDT mapping as implemented by a SQLData implementation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readURL()\"\u003ereadURL\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the read position is located at an invalid position; or if there are no further values in the stream."
        ],
        "return": [
          "an \n\u003ccode\u003eURL\u003c/code\u003e object representing the SQL \n\u003ccode\u003eDATALINK\u003c/code\u003e value at the head of the stream; * if the value is \n\u003ccode\u003eSQL NULL\u003c/code\u003e, return \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.NClob",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readNClob",
      "comment": "Reads an SQL NCLOB value from the stream and returns it as a Clob object in the Java programming language.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readNClob()\"\u003ereadNClob\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eNClob\u003c/code\u003e object representing data of the SQL \n\u003ccode\u003eNCLOB\u003c/code\u003e value at the head of the stream; \n\u003ccode\u003enull\u003c/code\u003e if the value read is SQL \n\u003ccode\u003eNULL\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readNString",
      "comment": "Reads the next attribute in the stream and returns it as a String in the Java programming language. It is intended for use when accessing NCHAR,NVARCHAR and LONGNVARCHAR columns.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readNString()\"\u003ereadNString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "the attribute; if the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, returns \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.SQLXML",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readSQLXML",
      "comment": "Reads an SQL XML value from the stream and returns it as a SQLXML object in the Java programming language.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readSQLXML()\"\u003ereadSQLXML\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eSQLXML\u003c/code\u003e object representing data of the SQL \n\u003ccode\u003eXML\u003c/code\u003e value at the head of the stream; \n\u003ccode\u003enull\u003c/code\u003e if the value read is SQL \n\u003ccode\u003eNULL\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.RowId",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readRowId",
      "comment": "Reads an SQL ROWID value from the stream and returns it as a RowId object in the Java programming language.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html#readRowId()\"\u003ereadRowId\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLInput.html\" title\u003d\"interface in java.sql\"\u003eSQLInput\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eRowId\u003c/code\u003e object representing data of the SQL \n\u003ccode\u003eROWID\u003c/code\u003e value at the head of the stream; \n\u003ccode\u003enull\u003c/code\u003e if the value read is SQL \n\u003ccode\u003eNULL\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "attributes"
          }
        },
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "map"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an SQLInputImpl object initialized with the given array of attributes and the given type map. If any of the attributes is a UDT whose name is in an entry in the type map, the attribute will be mapped according to the corresponding SQLData implementation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eattributes\u003c/code\u003e - an array of \n\u003ccode\u003eObject\u003c/code\u003e instances in which each element is an attribute of a UDT. The order of the attributes in the array is the same order in which the attributes were defined in the UDT definition.",
          "\u003ccode\u003emap\u003c/code\u003e - a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object containing zero or more entries, with each entry consisting of 1) a \n\u003ccode\u003eString\u003c/code\u003e giving the fully qualified name of the UDT and 2) the \n\u003ccode\u003eClass\u003c/code\u003e object for the \n\u003ccode\u003eSQLData\u003c/code\u003e implementation that defines how the UDT is to be mapped"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eattributes\u003c/code\u003e or the \n\u003ccode\u003emap\u003c/code\u003e is a \n\u003ccode\u003enull\u003c/code\u003e value"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.sql.rowset.serial.SQLInputImpl",
  "comment": "An input stream used for custom mapping user-defined types (UDTs). An \n\u003ccode\u003eSQLInputImpl\u003c/code\u003e object is an input stream that contains a stream of values that are the attributes of a UDT. \n\u003cp\u003e This class is used by the driver behind the scenes when the method \u003ccode\u003egetObject\u003c/code\u003e is called on an SQL structured or distinct type that has a custom mapping; a programmer never invokes \u003ccode\u003eSQLInputImpl\u003c/code\u003e methods directly. They are provided here as a convenience for those who write \u003ccode\u003eRowSet\u003c/code\u003e implementations. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eSQLInputImpl\u003c/code\u003e class provides a set of reader methods analogous to the \u003ccode\u003eResultSet\u003c/code\u003e getter methods. These methods make it possible to read the values in an \u003ccode\u003eSQLInputImpl\u003c/code\u003e object. \u003c/p\u003e\n\u003cp\u003e The method \u003ccode\u003ewasNull\u003c/code\u003e is used to determine whether the the last value read was SQL \u003ccode\u003eNULL\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eWhen the method \u003ccode\u003egetObject\u003c/code\u003e is called with an object of a class implementing the interface \u003ccode\u003eSQLData\u003c/code\u003e, the JDBC driver calls the method \u003ccode\u003eSQLData.getSQLType\u003c/code\u003e to determine the SQL type of the UDT being custom mapped. The driver creates an instance of \u003ccode\u003eSQLInputImpl\u003c/code\u003e, populating it with the attributes of the UDT. The driver then passes the input stream to the method \u003ccode\u003eSQLData.readSQL\u003c/code\u003e, which in turn calls the \u003ccode\u003eSQLInputImpl\u003c/code\u003e reader methods to read the attributes from the input stream.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLData.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSQLData\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}