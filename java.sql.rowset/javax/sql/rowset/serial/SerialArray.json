{
  "packageName": "javax.sql.rowset.serial",
  "simpleName": "SerialArray",
  "moduleName": "java.sql.rowset",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "free",
      "comment": "This method frees the SerialArray object and releases the resources that it holds. The object is invalid once the free method is called. If free is called multiple times, the subsequent calls to free are treated as a no-op.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html#free()\"\u003efree\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html\" title\u003d\"interface in java.sql\"\u003eArray\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs releasing the SerialArray\u0027s resources"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getArray",
      "comment": "Returns a new array that is a copy of this SerialArray object.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html#getArray()\"\u003egetArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html\" title\u003d\"interface in java.sql\"\u003eArray\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if an error occurs; if \n\u003ccode\u003efree\u003c/code\u003e had previously been called on this object"
        ],
        "return": [
          "a copy of this \n\u003ccode\u003eSerialArray\u003c/code\u003e object as an \n\u003ccode\u003eObject\u003c/code\u003e in the Java programming language"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "map"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getArray",
      "comment": "Returns a new array that is a copy of this SerialArray object, using the given type map for the custom mapping of each element when the elements are SQL UDTs. This method does custom mapping if the array elements are a UDT and the given type map has an entry for that UDT. Custom mapping is recursive, meaning that if, for instance, an element of an SQL structured type is an SQL structured type that itself has an element that is an SQL structured type, each structured type that has a custom mapping will be mapped according to the given type map.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html#getArray(java.util.Map)\"\u003egetArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html\" title\u003d\"interface in java.sql\"\u003eArray\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003emap\u003c/code\u003e - a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object in which each entry consists of 1) a \n\u003ccode\u003eString\u003c/code\u003e object giving the fully qualified name of a UDT and 2) the \n\u003ccode\u003eClass\u003c/code\u003e object for the \n\u003ccode\u003eSQLData\u003c/code\u003e implementation that defines how the UDT is to be mapped"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if an error occurs; if \n\u003ccode\u003efree\u003c/code\u003e had previously been called on this object"
        ],
        "return": [
          "a copy of this \n\u003ccode\u003eSerialArray\u003c/code\u003e object as an \n\u003ccode\u003eObject\u003c/code\u003e in the Java programming language"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getArray",
      "comment": "Returns a new array that is a copy of a slice of this SerialArray object, starting with the element at the given index and containing the given number of consecutive elements.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html#getArray(long,int)\"\u003egetArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html\" title\u003d\"interface in java.sql\"\u003eArray\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index into this \n\u003ccode\u003eSerialArray\u003c/code\u003e object of the first element to be copied; the index of the first element is \n\u003ccode\u003e0\u003c/code\u003e",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of consecutive elements to be copied, starting at the given index"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if an error occurs; if \n\u003ccode\u003efree\u003c/code\u003e had previously been called on this object"
        ],
        "return": [
          "a copy of the designated elements in this \n\u003ccode\u003eSerialArray\u003c/code\u003e object as an \n\u003ccode\u003eObject\u003c/code\u003e in the Java programming language"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        },
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "map"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getArray",
      "comment": "Returns a new array that is a copy of a slice of this SerialArray object, starting with the element at the given index and containing the given number of consecutive elements. This method does custom mapping if the array elements are a UDT and the given type map has an entry for that UDT. Custom mapping is recursive, meaning that if, for instance, an element of an SQL structured type is an SQL structured type that itself has an element that is an SQL structured type, each structured type that has a custom mapping will be mapped according to the given type map.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html#getArray(long,int,java.util.Map)\"\u003egetArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html\" title\u003d\"interface in java.sql\"\u003eArray\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index into this \n\u003ccode\u003eSerialArray\u003c/code\u003e object of the first element to be copied; the index of the first element in the array is \n\u003ccode\u003e0\u003c/code\u003e",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of consecutive elements to be copied, starting at the given index",
          "\u003ccode\u003emap\u003c/code\u003e - a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object in which each entry consists of 1) a \n\u003ccode\u003eString\u003c/code\u003e object giving the fully qualified name of a UDT and 2) the \n\u003ccode\u003eClass\u003c/code\u003e object for the \n\u003ccode\u003eSQLData\u003c/code\u003e implementation that defines how the UDT is to be mapped"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if an error occurs; if \n\u003ccode\u003efree\u003c/code\u003e had previously been called on this object"
        ],
        "return": [
          "a copy of the designated elements in this \n\u003ccode\u003eSerialArray\u003c/code\u003e object as an \n\u003ccode\u003eObject\u003c/code\u003e in the Java programming language"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaseType",
      "comment": "Retrieves the SQL type of the elements in this SerialArray object. The int returned is one of the constants in the class java.sql.Types.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html#getBaseType()\"\u003egetBaseType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html\" title\u003d\"interface in java.sql\"\u003eArray\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if an error occurs; if \n\u003ccode\u003efree\u003c/code\u003e had previously been called on this object"
        ],
        "return": [
          "one of the constants in \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e, indicating the SQL type of the elements in this \n\u003ccode\u003eSerialArray\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaseTypeName",
      "comment": "Retrieves the DBMS-specific type name for the elements in this SerialArray object.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html#getBaseTypeName()\"\u003egetBaseTypeName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html\" title\u003d\"interface in java.sql\"\u003eArray\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if an error occurs; if \n\u003ccode\u003efree\u003c/code\u003e had previously been called on this object"
        ],
        "return": [
          "the SQL type name used by the DBMS for the base type of this \n\u003ccode\u003eSerialArray\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.ResultSet",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResultSet",
      "comment": "Retrieves a ResultSet object holding the elements of the subarray that starts at index index and contains up to count successive elements. This method uses the connection\u0027s type map to map the elements of the array if the map contains an entry for the base type. Otherwise, the standard mapping is used.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html#getResultSet(long,int)\"\u003egetResultSet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html\" title\u003d\"interface in java.sql\"\u003eArray\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index into this \n\u003ccode\u003eSerialArray\u003c/code\u003e object of the first element to be copied; the index of the first element in the array is \n\u003ccode\u003e0\u003c/code\u003e",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of consecutive elements to be copied, starting at the given index"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if called with the cause set to \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eResultSet\u003c/code\u003e object containing the designated elements in this \n\u003ccode\u003eSerialArray\u003c/code\u003e object, with a separate row for each element"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.ResultSet",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "map"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResultSet",
      "comment": "Retrieves a ResultSet object that contains all of the elements of the SQL ARRAY value represented by this SerialArray object. This method uses the specified map for type map customizations unless the base type of the array does not match a user-defined type (UDT) in map, in which case it uses the standard mapping. This version of the method getResultSet uses either the given type map or the standard mapping; it never uses the type map associated with the connection.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html#getResultSet(java.util.Map)\"\u003egetResultSet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html\" title\u003d\"interface in java.sql\"\u003eArray\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003emap\u003c/code\u003e - a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object in which each entry consists of 1) a \n\u003ccode\u003eString\u003c/code\u003e object giving the fully qualified name of a UDT and 2) the \n\u003ccode\u003eClass\u003c/code\u003e object for the \n\u003ccode\u003eSQLData\u003c/code\u003e implementation that defines how the UDT is to be mapped"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if called with the cause set to \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eResultSet\u003c/code\u003e object containing all of the elements in this \n\u003ccode\u003eSerialArray\u003c/code\u003e object, with a separate row for each element"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.ResultSet",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResultSet",
      "comment": "Retrieves a ResultSet object that contains all of the elements in the ARRAY value that this SerialArray object represents. If appropriate, the elements of the array are mapped using the connection\u0027s type map; otherwise, the standard mapping is used.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html#getResultSet()\"\u003egetResultSet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html\" title\u003d\"interface in java.sql\"\u003eArray\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if called with the cause set to \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eResultSet\u003c/code\u003e object containing all of the elements in this \n\u003ccode\u003eSerialArray\u003c/code\u003e object, with a separate row for each element"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.ResultSet",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        },
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "map"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResultSet",
      "comment": "Retrieves a result set holding the elements of the subarray that starts at Retrieves a ResultSet object that contains a subarray of the elements in this SerialArray object, starting at index index and containing up to count successive elements. This method uses the specified map for type map customizations unless the base type of the array does not match a user-defined type (UDT) in map, in which case it uses the standard mapping. This version of the method getResultSet uses either the given type map or the standard mapping; it never uses the type map associated with the connection.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html#getResultSet(long,int,java.util.Map)\"\u003egetResultSet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Array.html\" title\u003d\"interface in java.sql\"\u003eArray\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index into this \n\u003ccode\u003eSerialArray\u003c/code\u003e object of the first element to be copied; the index of the first element in the array is \n\u003ccode\u003e0\u003c/code\u003e",
          "\u003ccode\u003ecount\u003c/code\u003e - the number of consecutive elements to be copied, starting at the given index",
          "\u003ccode\u003emap\u003c/code\u003e - a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object in which each entry consists of 1) a \n\u003ccode\u003eString\u003c/code\u003e object giving the fully qualified name of a UDT and 2) the \n\u003ccode\u003eClass\u003c/code\u003e object for the \n\u003ccode\u003eSQLData\u003c/code\u003e implementation that defines how the UDT is to be mapped"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if called with the cause set to \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eResultSet\u003c/code\u003e object containing the designated elements in this \n\u003ccode\u003eSerialArray\u003c/code\u003e object, with a separate row for each element"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this SerialArray to the specified object. The result is true if and only if the argument is not null and is a SerialArray object whose elements are identical to this object\u0027s elements",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The object to compare this \n\u003ccode\u003eSerialArray\u003c/code\u003e against"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given object represents a \n\u003ccode\u003eSerialArray\u003c/code\u003e equivalent to this SerialArray, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code for this SerialArray. The hash code for a SerialArray object is computed using the hash codes of the elements of the SerialArray object",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Returns a clone of this SerialArray. The copy will contain a reference to a clone of the underlying objects array, not a reference to the original underlying object array of this SerialArray object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this SerialArray"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        },
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.sql.Array",
            "type": "Class"
          },
          "field": {
            "name": "array"
          }
        },
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "map"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new SerialArray object from the given Array object, using the given type map for the custom mapping of each element when the elements are SQL UDTs. This method does custom mapping if the array elements are a UDT and the given type map has an entry for that UDT. Custom mapping is recursive, meaning that if, for instance, an element of an SQL structured type is an SQL structured type that itself has an element that is an SQL structured type, each structured type that has a custom mapping will be mapped according to the given type map. The new SerialArray object contains the same elements as the Array object from which it is built, except when the base type is the SQL type STRUCT, ARRAY, BLOB, CLOB, DATALINK or JAVA_OBJECT. In this case, each element in the new SerialArray object is the appropriate serialized form, that is, a SerialStruct, SerialArray, SerialBlob, SerialClob, SerialDatalink, or SerialJavaObject object. Note: (1) The Array object from which a SerialArray object is created must have materialized the SQL ARRAY value\u0027s data on the client before it is passed to the constructor. Otherwise, the new SerialArray object will contain no data. Note: (2) If the Array contains java.sql.Types.JAVA_OBJECT types, the SerialJavaObject constructor is called where checks are made to ensure this object is serializable. Note: (3) The Array object supplied to this constructor cannot return null for any Array.getArray() methods. SerialArray cannot serialize null array values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - the \n\u003ccode\u003eArray\u003c/code\u003e object to be serialized",
          "\u003ccode\u003emap\u003c/code\u003e - a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object in which each entry consists of 1) a \n\u003ccode\u003eString\u003c/code\u003e object giving the fully qualified name of a UDT (an SQL structured type or distinct type) and 2) the \n\u003ccode\u003eClass\u003c/code\u003e object for the \n\u003ccode\u003eSQLData\u003c/code\u003e implementation that defines how the UDT is to be mapped. The \n\u003ci\u003emap\u003c/i\u003e parameter does not have any effect for \n\u003ccode\u003eBlob\u003c/code\u003e, \n\u003ccode\u003eClob\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, or \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e types."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if an error occurs serializing the \n\u003ccode\u003eArray\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or if the \n\u003ci\u003earray\u003c/i\u003e or the \n\u003ci\u003emap\u003c/i\u003e values are \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.sql.rowset.serial.SerialException",
          "type": "Class"
        },
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.sql.Array",
            "type": "Class"
          },
          "field": {
            "name": "array"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new SerialArray object from the given Array object. This constructor does not do custom mapping. If the base type of the array is an SQL structured type and custom mapping is desired, the constructor SerialArray(Array array, Map map) should be used. The new SerialArray object contains the same elements as the Array object from which it is built, except when the base type is the SQL type BLOB, CLOB, DATALINK or JAVA_OBJECT. In this case, each element in the new SerialArray object is the appropriate serialized form, that is, a SerialBlob, SerialClob, SerialDatalink, or SerialJavaObject object. Note: (1) The Array object from which a SerialArray object is created must have materialized the SQL ARRAY value\u0027s data on the client before it is passed to the constructor. Otherwise, the new SerialArray object will contain no data. Note: (2) The Array object supplied to this constructor cannot return null for any Array.getArray() methods. SerialArray cannot serialize null array values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - the \n\u003ccode\u003eArray\u003c/code\u003e object to be serialized"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialException.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003eSerialException\u003c/a\u003e\u003c/code\u003e - if an error occurs serializing the \n\u003ccode\u003eArray\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or the \n\u003ci\u003earray\u003c/i\u003e parameter is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.sql.rowset.serial.SerialArray",
  "comment": "A serialized version of an \n\u003ccode\u003eArray\u003c/code\u003e object, which is the mapping in the Java programming language of an SQL \n\u003ccode\u003eARRAY\u003c/code\u003e value. \n\u003cp\u003e The \u003ccode\u003eSerialArray\u003c/code\u003e class provides a constructor for creating a \u003ccode\u003eSerialArray\u003c/code\u003e instance from an \u003ccode\u003eArray\u003c/code\u003e object, methods for getting the base type and the SQL name for the base type, and methods for copying all or part of a \u003ccode\u003eSerialArray\u003c/code\u003e object. \u003c/p\u003e\n\u003cp\u003e Note: In order for this class to function correctly, a connection to the data source must be available in order for the SQL \u003ccode\u003eArray\u003c/code\u003e object to be materialized (have all of its elements brought to the client server) if necessary. At this time, logical pointers to the data in the data source, such as locators, are not currently supported. \u003c/p\u003e\n\u003ch2\u003e Thread safety \u003c/h2\u003e A SerialArray is not safe for use by multiple concurrent threads. If a SerialArray is to be used by more than one thread then access to the SerialArray should be controlled by appropriate synchronization.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.sql.rowset.serial.SerialArray\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}