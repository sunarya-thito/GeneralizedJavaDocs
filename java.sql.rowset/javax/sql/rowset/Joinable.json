{
  "packageName": "javax.sql.rowset",
  "simpleName": "Joinable",
  "moduleName": "java.sql.rowset",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "columnIdx",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMatchColumn",
      "comment": "Sets the designated column as the match column for this RowSet object. A JoinRowSet object can now add this RowSet object based on the match column. Sub-interfaces such as the CachedRowSet interface define the method CachedRowSet.setKeyColumns, which allows primary key semantics to be enforced on specific columns. Implementations of the setMatchColumn(int columnIdx) method should ensure that the constraints on the key columns are maintained when a CachedRowSet object sets a primary key column as a match column.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#setMatchColumn(int%5B%5D)\"\u003e\u003ccode\u003esetMatchColumn(int[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#unsetMatchColumn(int)\"\u003e\u003ccode\u003eunsetMatchColumn(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnIdx\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e identifying the index of the column to be set as the match column"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an invalid column index is set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "columnIdxes",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMatchColumn",
      "comment": "Sets the designated columns as the match column for this RowSet object. A JoinRowSet object can now add this RowSet object based on the match column.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#setMatchColumn(int%5B%5D)\"\u003e\u003ccode\u003esetMatchColumn(int[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#unsetMatchColumn(int%5B%5D)\"\u003e\u003ccode\u003eunsetMatchColumn(int[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnIdxes\u003c/code\u003e - an array of \n\u003ccode\u003eint\u003c/code\u003e identifying the indexes of the columns to be set as the match columns"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an invalid column index is set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "columnName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMatchColumn",
      "comment": "Sets the designated column as the match column for this RowSet object. A JoinRowSet object can now add this RowSet object based on the match column. Subinterfaces such as the CachedRowSet interface define the method CachedRowSet.setKeyColumns, which allows primary key semantics to be enforced on specific columns. Implementations of the setMatchColumn(String columnIdx) method should ensure that the constraints on the key columns are maintained when a CachedRowSet object sets a primary key column as a match column.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#unsetMatchColumn(int)\"\u003e\u003ccode\u003eunsetMatchColumn(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#setMatchColumn(int%5B%5D)\"\u003e\u003ccode\u003esetMatchColumn(int[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnName\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e object giving the name of the column to be set as the match column"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an invalid column name is set, the column name is a null, or the column name is an empty string"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "columnNames",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMatchColumn",
      "comment": "Sets the designated columns as the match column for this RowSet object. A JoinRowSet object can now add this RowSet object based on the match column.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#unsetMatchColumn(int)\"\u003e\u003ccode\u003eunsetMatchColumn(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#setMatchColumn(int%5B%5D)\"\u003e\u003ccode\u003esetMatchColumn(int[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnNames\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003e objects giving the names of the column to be set as the match columns"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an invalid column name is set, the column name is a null, or the column name is an empty string"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": 1
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMatchColumnIndexes",
      "comment": "Retrieves the indexes of the match columns that were set for this RowSet object with the method setMatchColumn(int[] columnIdxes).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#setMatchColumn(int)\"\u003e\u003ccode\u003esetMatchColumn(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#unsetMatchColumn(int)\"\u003e\u003ccode\u003eunsetMatchColumn(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if no match column has been set"
        ],
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e array identifying the indexes of the columns that were set as the match columns for this \n\u003ccode\u003eRowSet\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMatchColumnNames",
      "comment": "Retrieves the names of the match columns that were set for this RowSet object with the method setMatchColumn(String [] columnNames).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#setMatchColumn(int)\"\u003e\u003ccode\u003esetMatchColumn(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#unsetMatchColumn(int)\"\u003e\u003ccode\u003eunsetMatchColumn(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if no match column has been set"
        ],
        "return": [
          "an array of \n\u003ccode\u003eString\u003c/code\u003e objects giving the names of the columns set as the match columns for this \n\u003ccode\u003eRowSet\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "columnIdx",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unsetMatchColumn",
      "comment": "Unsets the designated column as the match column for this RowSet object. RowSet objects that implement the Joinable interface must ensure that a key-like constraint continues to be enforced until the method CachedRowSet.unsetKeyColumns has been called on the designated column.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#setMatchColumn(int)\"\u003e\u003ccode\u003esetMatchColumn(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnIdx\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e that identifies the index of the column that is to be unset as a match column"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an invalid column index is designated or if the designated column was not previously set as a match column"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "columnIdxes",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unsetMatchColumn",
      "comment": "Unsets the designated columns as the match column for this RowSet object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#setMatchColumn(int)\"\u003e\u003ccode\u003esetMatchColumn(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnIdxes\u003c/code\u003e - an array of \n\u003ccode\u003eint\u003c/code\u003e that identifies the indexes of the columns that are to be unset as match columns"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an invalid column index is designated or if the designated column was not previously set as a match column"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "columnName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unsetMatchColumn",
      "comment": "Unsets the designated column as the match column for this RowSet object. RowSet objects that implement the Joinable interface must ensure that a key-like constraint continues to be enforced until the method CachedRowSet.unsetKeyColumns has been called on the designated column.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#setMatchColumn(int)\"\u003e\u003ccode\u003esetMatchColumn(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnName\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e object giving the name of the column that is to be unset as a match column"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an invalid column name is designated or the designated column was not previously set as a match column"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "columnName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unsetMatchColumn",
      "comment": "Unsets the designated columns as the match columns for this RowSet object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/Joinable.html#setMatchColumn(int)\"\u003e\u003ccode\u003esetMatchColumn(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecolumnName\u003c/code\u003e - an array of \n\u003ccode\u003eString\u003c/code\u003e objects giving the names of the columns that are to be unset as the match columns"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an invalid column name is designated or the designated column was not previously set as a match column"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.sql.rowset.Joinable",
  "comment": "\u003ch2\u003e1.0 Background\u003c/h2\u003e The \n\u003ccode\u003eJoinable\u003c/code\u003e interface provides the methods for getting and setting a match column, which is the basis for forming the SQL \n\u003ccode\u003eJOIN\u003c/code\u003e formed by adding \n\u003ccode\u003eRowSet\u003c/code\u003e objects to a \n\u003ccode\u003eJoinRowSet\u003c/code\u003e object. \n\u003cp\u003e Any standard \u003ccode\u003eRowSet\u003c/code\u003e implementation \u003cb\u003emay\u003c/b\u003e implement the \u003ccode\u003eJoinable\u003c/code\u003e interface in order to be added to a \u003ccode\u003eJoinRowSet\u003c/code\u003e object. Implementing this interface gives a \u003ccode\u003eRowSet\u003c/code\u003e object the ability to use \u003ccode\u003eJoinable\u003c/code\u003e methods, which set, retrieve, and get information about match columns. An application may add a \u003ccode\u003eRowSet\u003c/code\u003e object that has not implemented the \u003ccode\u003eJoinable\u003c/code\u003e interface to a \u003ccode\u003eJoinRowSet\u003c/code\u003e object, but to do so it must use one of the \u003ccode\u003eJoinRowSet.addRowSet\u003c/code\u003e methods that takes both a \u003ccode\u003eRowSet\u003c/code\u003e object and a match column or an array of \u003ccode\u003eRowSet\u003c/code\u003e objects and an array of match columns. \u003c/p\u003e\n\u003cp\u003e To get access to the methods in the \u003ccode\u003eJoinable\u003c/code\u003e interface, a \u003ccode\u003eRowSet\u003c/code\u003e object implements at least one of the five standard \u003ccode\u003eRowSet\u003c/code\u003e interfaces and also implements the \u003ccode\u003eJoinable\u003c/code\u003e interface. In addition, most \u003ccode\u003eRowSet\u003c/code\u003e objects extend the \u003ccode\u003eBaseRowSet\u003c/code\u003e class. For example: \u003c/p\u003e\n\u003cpre\u003e     class MyRowSetImpl extends BaseRowSet implements CachedRowSet, Joinable {\n         :\n         :\n     }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003e2.0 Usage Guidelines\u003c/h2\u003e \n\u003cp\u003e The methods in the \u003ccode\u003eJoinable\u003c/code\u003e interface allow a \u003ccode\u003eRowSet\u003c/code\u003e object to set a match column, retrieve a match column, or unset a match column, which is the column upon which an SQL \u003ccode\u003eJOIN\u003c/code\u003e can be based. An instance of a class that implements these methods can be added to a \u003ccode\u003eJoinRowSet\u003c/code\u003e object to allow an SQL \u003ccode\u003eJOIN\u003c/code\u003e relationship to be established. \u003c/p\u003e\n\u003cpre\u003e     CachedRowSet crs \u003d new MyRowSetImpl();\n     crs.populate((ResultSet)rs);\n     (Joinable)crs.setMatchColumnIndex(1);\n\n     JoinRowSet jrs \u003d new JoinRowSetImpl();\n     jrs.addRowSet(crs);\n \u003c/pre\u003e In the previous example, \n\u003ci\u003ecrs\u003c/i\u003e is a \n\u003ccode\u003eCachedRowSet\u003c/code\u003e object that has implemented the \n\u003ccode\u003eJoinable\u003c/code\u003e interface. In the following example, \n\u003ci\u003ecrs2\u003c/i\u003e has not, so it must supply the match column as an argument to the \n\u003ccode\u003eaddRowSet\u003c/code\u003e method. This example assumes that column 1 is the match column. \n\u003cpre\u003e     CachedRowSet crs2 \u003d new MyRowSetImpl();\n     crs2.populate((ResultSet)rs);\n\n     JoinRowSet jrs2 \u003d new JoinRowSetImpl();\n     jrs2.addRowSet(crs2, 1);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eJoinRowSet\u003c/code\u003e interface makes it possible to get data from one or more \u003ccode\u003eRowSet\u003c/code\u003e objects consolidated into one table without having to incur the expense of creating a connection to a database. It is therefore ideally suited for use by disconnected \u003ccode\u003eRowSet\u003c/code\u003e objects. Nevertheless, any \u003ccode\u003eRowSet\u003c/code\u003e object \u003cb\u003emay\u003c/b\u003e implement this interface regardless of whether it is connected or disconnected. Note that a \u003ccode\u003eJdbcRowSet\u003c/code\u003e object, being always connected to its data source, can become part of an SQL \u003ccode\u003eJOIN\u003c/code\u003e directly without having to become part of a \u003ccode\u003eJoinRowSet\u003c/code\u003e object. \u003c/p\u003e\n\u003ch2\u003e3.0 Managing Multiple Match Columns\u003c/h2\u003e The index array passed into the \n\u003ccode\u003esetMatchColumn\u003c/code\u003e methods indicates how many match columns are being set (the length of the array) in addition to which columns will be used for the match. For example: \n\u003cpre\u003e     int[] i \u003d {1, 2, 4, 7}; // indicates four match columns, with column\n                             // indexes 1, 2, 4, 7 participating in the JOIN.\n     Joinable.setMatchColumn(i);\n \u003c/pre\u003e Subsequent match columns may be added as follows to a different \n\u003ccode\u003eJoinable\u003c/code\u003e object (a \n\u003ccode\u003eRowSet\u003c/code\u003e object that has implemented the \n\u003ccode\u003eJoinable\u003c/code\u003e interface). \n\u003cpre\u003e     int[] w \u003d {3, 2, 5, 3};\n     Joinable2.setMatchColumn(w);\n \u003c/pre\u003e When an application adds two or more \n\u003ccode\u003eRowSet\u003c/code\u003e objects to a \n\u003ccode\u003eJoinRowSet\u003c/code\u003e object, the order of the indexes in the array is particularly important. Each index of the array maps directly to the corresponding index of the previously added \n\u003ccode\u003eRowSet\u003c/code\u003e object. If overlap or underlap occurs, the match column data is maintained in the event an additional \n\u003ccode\u003eJoinable\u003c/code\u003e RowSet is added and needs to relate to the match column data. Therefore, applications can set multiple match columns in any order, but this order has a direct effect on the outcome of the \n\u003ccode\u003eSQL\u003c/code\u003e JOIN. \n\u003cp\u003e This assertion applies in exactly the same manner when column names are used rather than column indexes to indicate match columns.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/JoinRowSet.html\" title\u003d\"interface in javax.sql.rowset\"\u003e\u003ccode\u003eJoinRowSet\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}