{
  "packageName": "javax.sql.rowset",
  "simpleName": "JdbcRowSet",
  "moduleName": "java.sql.rowset",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "javax.sql.RowSet",
      "type": "Class"
    },
    {
      "name": "javax.sql.rowset.Joinable",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getShowDeleted",
      "comment": "Retrieves a boolean indicating whether rows marked for deletion appear in the set of current rows. If true is returned, deleted rows are visible with the current rows. If false is returned, rows are not visible with the set of current rows. The default value is false. Standard rowset implementations may choose to restrict this behavior for security considerations or for certain deployment scenarios. The visibility of deleted rows is implementation-defined and does not represent standard behavior. Note: Allowing deleted rows to remain visible complicates the behavior of some standard JDBC RowSet implementations methods. However, most rowset users can simply ignore this extra detail because only very specialized applications will likely want to take advantage of this feature.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/JdbcRowSet.html#setShowDeleted(boolean)\"\u003e\u003ccode\u003esetShowDeleted(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a rowset implementation is unable to to determine whether rows marked for deletion remain visible"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if deleted rows are visible; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShowDeleted",
      "comment": "Sets the property showDeleted to the given boolean value. This property determines whether rows marked for deletion continue to appear in the set of current rows. If the value is set to true, deleted rows are immediately visible with the set of current rows. If the value is set to false, the deleted rows are set as invisible with the current set of rows. Standard rowset implementations may choose to restrict this behavior for security considerations or for certain deployment scenarios. This is left as implementation-defined and does not represent standard behavior.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/JdbcRowSet.html#getShowDeleted()\"\u003e\u003ccode\u003egetShowDeleted()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if deleted rows should be shown; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a rowset implementation is unable to to reset whether deleted rows should be visible"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.sql.rowset.RowSetWarning",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRowSetWarnings",
      "comment": "Retrieves the first warning reported by calls on this JdbcRowSet object. If a second warning was reported on this JdbcRowSet object, it will be chained to the first warning and can be retrieved by calling the method RowSetWarning.getNextWarning on the first warning. Subsequent warnings on this JdbcRowSet object will be chained to the RowSetWarning objects returned by the method RowSetWarning.getNextWarning. The warning chain is automatically cleared each time a new row is read. This method may not be called on a RowSet object that has been closed; doing so will cause an SQLException to be thrown. Because it is always connected to its data source, a JdbcRowSet object can rely on the presence of active Statement, Connection, and ResultSet instances. This means that applications can obtain additional SQLWarning notifications by calling the getNextWarning methods that they provide. Disconnected Rowset objects, such as a CachedRowSet object, do not have access to these getNextWarning methods.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/RowSetWarning.html\" title\u003d\"class in javax.sql.rowset\"\u003e\u003ccode\u003eRowSetWarning\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if this method is called on a closed \n\u003ccode\u003eJdbcRowSet\u003c/code\u003e object"
        ],
        "return": [
          "the first \n\u003ccode\u003eRowSetWarning\u003c/code\u003e object reported on this \n\u003ccode\u003eJdbcRowSet\u003c/code\u003e object or \n\u003ccode\u003enull\u003c/code\u003e if there are none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "commit",
      "comment": "Each JdbcRowSet contains a Connection object from the ResultSet or JDBC properties passed to it\u0027s constructors. This method wraps the Connection commit method to allow flexible auto commit or non auto commit transactional control support. Makes all changes made since the previous commit/rollback permanent and releases any database locks currently held by this Connection object. This method should be used only when auto-commit mode has been disabled.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setAutoCommit(boolean)\"\u003e\u003ccode\u003eConnection.setAutoCommit(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this Connection object within this \n\u003ccode\u003eJdbcRowSet\u003c/code\u003e is in auto-commit mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAutoCommit",
      "comment": "Each JdbcRowSet contains a Connection object from the original ResultSet or JDBC properties passed to it. This method wraps the Connection\u0027s getAutoCommit method to allow an application to determine the JdbcRowSet transaction behavior. Sets this connection\u0027s auto-commit mode to the given state. If a connection is in auto-commit mode, then all its SQL statements will be executed and committed as individual transactions. Otherwise, its SQL statements are grouped into transactions that are terminated by a call to either the method commit or the method rollback. By default, new connections are in auto-commit mode.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#getAutoCommit()\"\u003e\u003ccode\u003eConnection.getAutoCommit()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if auto-commit is enabled; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAutoCommit",
      "comment": "Each JdbcRowSet contains a Connection object from the original ResultSet or JDBC properties passed to it. This method wraps the Connection\u0027s getAutoCommit method to allow an application to set the JdbcRowSet transaction behavior. Sets the current auto-commit mode for this Connection object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setAutoCommit(boolean)\"\u003e\u003ccode\u003eConnection.setAutoCommit(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eautoCommit\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to enable auto-commit; \n\u003ccode\u003efalse\u003c/code\u003e to disable auto-commit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rollback",
      "comment": "Each JdbcRowSet contains a Connection object from the original ResultSet or JDBC properties passed to it. Undoes all changes made in the current transaction and releases any database locks currently held by this Connection object. This method should be used only when auto-commit mode has been disabled.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/JdbcRowSet.html#rollback(java.sql.Savepoint)\"\u003e\u003ccode\u003erollback(Savepoint)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this \n\u003ccode\u003eConnection\u003c/code\u003e object within this \n\u003ccode\u003eJdbcRowSet\u003c/code\u003e is in auto-commit mode."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rollback",
      "comment": "Each JdbcRowSet contains a Connection object from the original ResultSet or JDBC properties passed to it. Undoes all changes made in the current transaction to the last set savepoint and releases any database locks currently held by this Connection object. This method should be used only when auto-commit mode has been disabled.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/JdbcRowSet.html#rollback()\"\u003e\u003ccode\u003erollback()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - The \n\u003ccode\u003eSavepoint\u003c/code\u003e to rollback to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this \n\u003ccode\u003eConnection\u003c/code\u003e object within this \n\u003ccode\u003eJdbcRowSet\u003c/code\u003e is in auto-commit mode."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.sql.rowset.JdbcRowSet",
  "comment": "The standard interface that all standard implementations of \n\u003ccode\u003eJdbcRowSet\u003c/code\u003e must implement. \n\u003ch2\u003e1.0 Overview\u003c/h2\u003e A wrapper around a \n\u003ccode\u003eResultSet\u003c/code\u003e object that makes it possible to use the result set as a JavaBeans component. Thus, a \n\u003ccode\u003eJdbcRowSet\u003c/code\u003e object can be one of the Beans that a tool makes available for composing an application. Because a \n\u003ccode\u003eJdbcRowSet\u003c/code\u003e is a connected rowset, that is, it continually maintains its connection to a database using a JDBC technology-enabled driver, it also effectively makes the driver a JavaBeans component. \n\u003cp\u003e Because it is always connected to its database, an instance of \u003ccode\u003eJdbcRowSet\u003c/code\u003e can simply take calls invoked on it and in turn call them on its \u003ccode\u003eResultSet\u003c/code\u003e object. As a consequence, a result set can, for example, be a component in a Swing application. \u003c/p\u003e\n\u003cp\u003e Another advantage of a \u003ccode\u003eJdbcRowSet\u003c/code\u003e object is that it can be used to make a \u003ccode\u003eResultSet\u003c/code\u003e object scrollable and updatable. All \u003ccode\u003eRowSet\u003c/code\u003e objects are by default scrollable and updatable. If the driver and database being used do not support scrolling and/or updating of result sets, an application can populate a \u003ccode\u003eJdbcRowSet\u003c/code\u003e object with the data of a \u003ccode\u003eResultSet\u003c/code\u003e object and then operate on the \u003ccode\u003eJdbcRowSet\u003c/code\u003e object as if it were the \u003ccode\u003eResultSet\u003c/code\u003e object. \u003c/p\u003e\n\u003ch2\u003e2.0 Creating a \u003ccode\u003eJdbcRowSet\u003c/code\u003e Object\u003c/h2\u003e The reference implementation of the \n\u003ccode\u003eJdbcRowSet\u003c/code\u003e interface, \n\u003ccode\u003eJdbcRowSetImpl\u003c/code\u003e, provides an implementation of the default constructor. A new instance is initialized with default values, which can be set with new values as needed. A new instance is not really functional until its \n\u003ccode\u003eexecute\u003c/code\u003e method is called. In general, this method does the following: \n\u003cul\u003e \n \u003cli\u003e establishes a connection with a database \u003c/li\u003e\n \u003cli\u003e creates a \u003ccode\u003ePreparedStatement\u003c/code\u003e object and sets any of its placeholder parameters \u003c/li\u003e\n \u003cli\u003e executes the statement to create a \u003ccode\u003eResultSet\u003c/code\u003e object \u003c/li\u003e\n\u003c/ul\u003e If the \n\u003ccode\u003eexecute\u003c/code\u003e method is successful, it will set the appropriate private \n\u003ccode\u003eJdbcRowSet\u003c/code\u003e fields with the following: \n\u003cul\u003e \n \u003cli\u003e a \u003ccode\u003eConnection\u003c/code\u003e object -- the connection between the rowset and the database \u003c/li\u003e\n \u003cli\u003e a \u003ccode\u003ePreparedStatement\u003c/code\u003e object -- the query that produces the result set \u003c/li\u003e\n \u003cli\u003e a \u003ccode\u003eResultSet\u003c/code\u003e object -- the result set that the rowset\u0027s command produced and that is being made, in effect, a JavaBeans component \u003c/li\u003e\n\u003c/ul\u003e If these fields have not been set, meaning that the \n\u003ccode\u003eexecute\u003c/code\u003e method has not executed successfully, no methods other than \n\u003ccode\u003eexecute\u003c/code\u003e and \n\u003ccode\u003eclose\u003c/code\u003e may be called on the rowset. All other public methods will throw an exception. \n\u003cp\u003e Before calling the \u003ccode\u003eexecute\u003c/code\u003e method, however, the command and properties needed for establishing a connection must be set. The following code fragment creates a \u003ccode\u003eJdbcRowSetImpl\u003c/code\u003e object, sets the command and connection properties, sets the placeholder parameter, and then invokes the method \u003ccode\u003eexecute\u003c/code\u003e. \u003c/p\u003e\n\u003cpre\u003e     JdbcRowSetImpl jrs \u003d new JdbcRowSetImpl();\n     jrs.setCommand(\"SELECT * FROM TITLES WHERE TYPE \u003d ?\");\n     jrs.setURL(\"jdbc:myDriver:myAttribute\");\n     jrs.setUsername(\"cervantes\");\n     jrs.setPassword(\"sancho\");\n     jrs.setString(1, \"BIOGRAPHY\");\n     jrs.execute();\n \u003c/pre\u003e The variable \n\u003ccode\u003ejrs\u003c/code\u003e now represents an instance of \n\u003ccode\u003eJdbcRowSetImpl\u003c/code\u003e that is a thin wrapper around the \n\u003ccode\u003eResultSet\u003c/code\u003e object containing all the rows in the table \n\u003ccode\u003eTITLES\u003c/code\u003e where the type of book is biography. At this point, operations called on \n\u003ccode\u003ejrs\u003c/code\u003e will affect the rows in the result set, which is effectively a JavaBeans component. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The implementation of the \u003ccode\u003eRowSet\u003c/code\u003e method \u003ccode\u003eexecute\u003c/code\u003e in the \u003ccode\u003eJdbcRowSet\u003c/code\u003e reference implementation differs from that in the \u003ccode\u003eCachedRowSet\u003c/code\u003e reference implementation to account for the different requirements of connected and disconnected \u003ccode\u003eRowSet\u003c/code\u003e objects.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}