{
  "packageName": "javax.sql.rowset",
  "simpleName": "BaseRowSet",
  "moduleName": "java.sql.rowset",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNICODE_STREAM_PARAM",
      "comment": "A constant indicating to a RowSetReaderImpl object that a given parameter is a Unicode stream. This RowSetReaderImpl object is provided as an extension of the SyncProvider abstract class defined in the SyncFactory static factory SPI mechanism.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.BaseRowSet.UNICODE_STREAM_PARAM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BINARY_STREAM_PARAM",
      "comment": "A constant indicating to a RowSetReaderImpl object that a given parameter is a binary stream. A RowSetReaderImpl object is provided as an extension of the SyncProvider abstract class defined in the SyncFactory static factory SPI mechanism.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.BaseRowSet.BINARY_STREAM_PARAM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ASCII_STREAM_PARAM",
      "comment": "A constant indicating to a RowSetReaderImpl object that a given parameter is an ASCII stream. A RowSetReaderImpl object is provided as an extension of the SyncProvider abstract class defined in the SyncFactory static factory SPI mechanism.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.sql.rowset.BaseRowSet.ASCII_STREAM_PARAM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "binaryStream",
      "comment": "The InputStream object that will be returned by the method getBinaryStream, which is specified in the ResultSet interface.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "unicodeStream",
      "comment": "The InputStream object that will be returned by the method getUnicodeStream, which is specified in the ResultSet interface.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "asciiStream",
      "comment": "The InputStream object that will be returned by the method getAsciiStream, which is specified in the ResultSet interface.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "charStream",
      "comment": "The Reader object that will be returned by the method getCharacterStream, which is specified in the ResultSet interface.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "initParams",
      "comment": "Performs the necessary internal configurations and initializations to allow any JDBC RowSet implementation to start using the standard facilities provided by a BaseRowSet instance. This method should be called after the RowSet object has been instantiated to correctly initialize all parameters. This method should never be called by an application, but is called from with a RowSet implementation extending this class.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addRowSetListener",
      "comment": "The listener will be notified whenever an event occurs on this RowSet object. A listener might, for example, be a table or graph that needs to be updated in order to accurately reflect the current state of the RowSet object. Note: if the RowSetListener object is null, this method silently discards the null value and does not add a null reference to the set of listeners. Note: if the listener is already set, and the new RowSetListener instance is added to the set of listeners already registered to receive event notifications from this RowSet.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#removeRowSetListener(javax.sql.RowSetListener)\"\u003e\u003ccode\u003eremoveRowSetListener(javax.sql.RowSetListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - an object that has implemented the \n\u003ccode\u003ejavax.sql.RowSetListener\u003c/code\u003e interface and wants to be notified of any events that occur on this \n\u003ccode\u003eRowSet\u003c/code\u003e object; May be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeRowSetListener",
      "comment": "Removes the designated object from this RowSet object\u0027s list of listeners. If the given argument is not a registered listener, this method does nothing. Note: if the RowSetListener object is null, this method silently discards the null value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#addRowSetListener(javax.sql.RowSetListener)\"\u003e\u003ccode\u003eaddRowSetListener(javax.sql.RowSetListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - a \n\u003ccode\u003eRowSetListener\u003c/code\u003e object that is on the list of listeners for this \n\u003ccode\u003eRowSet\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "notifyCursorMoved",
      "comment": "Notifies all of the listeners registered with this RowSet object that its cursor has moved. When an application calls a method to move the cursor, that method moves the cursor and then calls this method internally. An application should never invoke this method directly.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the class extending the \n\u003ccode\u003eBaseRowSet\u003c/code\u003e abstract class does not implement the \n\u003ccode\u003eRowSet\u003c/code\u003e interface or one of it\u0027s sub-interfaces."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "notifyRowChanged",
      "comment": "Notifies all of the listeners registered with this RowSet object that one of its rows has changed. When an application calls a method that changes a row, such as the CachedRowSet methods insertRow, updateRow, or deleteRow, that method calls notifyRowChanged internally. An application should never invoke this method directly.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the class extending the \n\u003ccode\u003eBaseRowSet\u003c/code\u003e abstract class does not implement the \n\u003ccode\u003eRowSet\u003c/code\u003e interface or one of it\u0027s sub-interfaces."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "notifyRowSetChanged",
      "comment": "Notifies all of the listeners registered with this RowSet object that its entire contents have changed. When an application calls methods that change the entire contents of the RowSet object, such as the CachedRowSet methods execute, populate, restoreOriginal, or release, that method calls notifyRowSetChanged internally (either directly or indirectly). An application should never invoke this method directly.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the class extending the \n\u003ccode\u003eBaseRowSet\u003c/code\u003e abstract class does not implement the \n\u003ccode\u003eRowSet\u003c/code\u003e interface or one of it\u0027s sub-interfaces."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCommand",
      "comment": "Retrieves the SQL query that is the command for this RowSet object. The command property contains the query that will be executed to populate this RowSet object. The SQL query returned by this method is used by RowSet methods such as execute and populate, which may be implemented by any class that extends the BaseRowSet abstract class and implements one or more of the standard JSR-114 RowSet interfaces. The command is used by the RowSet object\u0027s reader to obtain a ResultSet object. The reader then reads the data from the ResultSet object and uses it to to populate this RowSet object. The default value for the command property is null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setCommand(java.lang.String)\"\u003e\u003ccode\u003esetCommand(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eString\u003c/code\u003e that is the value for this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s \n\u003ccode\u003ecommand\u003c/code\u003e property; may be \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCommand",
      "comment": "Sets this RowSet object\u0027s command property to the given String object and clears the parameters, if any, that were set for the previous command. The command property may not be needed if the RowSet object gets its data from a source that does not support commands, such as a spreadsheet or other tabular file. Thus, this property is optional and may be null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getCommand()\"\u003e\u003ccode\u003egetCommand()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecmd\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e object containing an SQL query that will be set as this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command property; may be \n\u003ccode\u003enull\u003c/code\u003e but may not be an empty string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an empty string is provided as the command value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUrl",
      "comment": "Retrieves the JDBC URL that this RowSet object\u0027s javax.sql.Reader object uses to make a connection with a relational database using a JDBC technology-enabled driver. The Url property will be null if the underlying data source is a non-SQL data source, such as a spreadsheet or an XML data source.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setUrl(java.lang.String)\"\u003e\u003ccode\u003esetUrl(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs retrieving the URL value"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e object that contains the JDBC URL used to establish the connection for this \n\u003ccode\u003eRowSet\u003c/code\u003e object; may be \n\u003ccode\u003enull\u003c/code\u003e (default value) if not set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUrl",
      "comment": "Sets the Url property for this RowSet object to the given String object and sets the dataSource name property to null. The Url property is a JDBC URL that is used when the connection is created using a JDBC technology-enabled driver (\"JDBC driver\") and the DriverManager. The correct JDBC URL for the specific driver to be used can be found in the driver documentation. Although there are guidelines for how a JDBC URL is formed, a driver vendor can specify any String object except one with a length of 0 (an empty string). Setting the Url property is optional if connections are established using a DataSource object instead of the DriverManager. The driver will use either the URL property or the dataSourceName property to create a connection, whichever was specified most recently. If an application uses a JDBC URL, it must load a JDBC driver that accepts the JDBC URL before it uses the RowSet object to connect to a database. The RowSet object will use the URL internally to create a database connection in order to read or write data.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getUrl()\"\u003e\u003ccode\u003egetUrl()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e object that contains the JDBC URL that will be used to establish the connection to a database for this \n\u003ccode\u003eRowSet\u003c/code\u003e object; may be \n\u003ccode\u003enull\u003c/code\u003e but must not be an empty string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs setting the Url property or the parameter supplied is a string with a length of \n\u003ccode\u003e0\u003c/code\u003e (an empty string)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDataSourceName",
      "comment": "Returns the logical name that when supplied to a naming service that uses the Java Naming and Directory Interface (JNDI) API, will retrieve a javax.sql.DataSource object. This DataSource object can be used to establish a connection to the data source that it represents. Users should set either the url or the data source name property. The driver will use the property set most recently to establish a connection.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setDataSourceName(java.lang.String)\"\u003e\u003ccode\u003esetDataSourceName(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e object that identifies the \n\u003ccode\u003eDataSource\u003c/code\u003e object to be used for making a connection; if no logical name has been set, \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDataSourceName",
      "comment": "Sets the DataSource name property for this RowSet object to the given logical name and sets this RowSet object\u0027s Url property to null. The name must have been bound to a DataSource object in a JNDI naming service so that an application can do a lookup using that name to retrieve the DataSource object bound to it. The DataSource object can then be used to establish a connection to the data source it represents. Users should set either the Url property or the dataSourceName property. If both properties are set, the driver will use the property set most recently.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getDataSourceName()\"\u003e\u003ccode\u003egetDataSourceName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e object with the name that can be supplied to a naming service based on JNDI technology to retrieve the \n\u003ccode\u003eDataSource\u003c/code\u003e object that can be used to get a connection; may be \n\u003ccode\u003enull\u003c/code\u003e but must not be an empty string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an empty string is provided as the \n\u003ccode\u003eDataSource\u003c/code\u003e name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUsername",
      "comment": "Returns the user name used to create a database connection. Because it is not serialized, the username property is set at runtime before calling the method execute.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setUsername(java.lang.String)\"\u003e\u003ccode\u003esetUsername(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eString\u003c/code\u003e object containing the user name that is supplied to the data source to create a connection; may be \n\u003ccode\u003enull\u003c/code\u003e (default value) if not set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUsername",
      "comment": "Sets the username property for this RowSet object to the given user name. Because it is not serialized, the username property is set at run time before calling the method execute.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getUsername()\"\u003e\u003ccode\u003egetUsername()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e object containing the user name that is supplied to the data source to create a connection. It may be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPassword",
      "comment": "Returns the password used to create a database connection for this RowSet object. Because the password property is not serialized, it is set at run time before calling the method execute. The default value is null",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setPassword(java.lang.String)\"\u003e\u003ccode\u003esetPassword(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eString\u003c/code\u003e object that represents the password that must be supplied to the database to create a connection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPassword",
      "comment": "Sets the password used to create a database connection for this RowSet object to the given String object. Because the password property is not serialized, it is set at run time before calling the method execute.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getPassword()\"\u003e\u003ccode\u003egetPassword()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epass\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e object that represents the password that is supplied to the database to create a connection. It may be null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setType",
      "comment": "Sets the type for this RowSet object to the specified type. The default type is ResultSet.TYPE_SCROLL_INSENSITIVE.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getConcurrency()\"\u003e\u003ccode\u003egetConcurrency()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getType()\"\u003e\u003ccode\u003egetType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - one of the following constants: \n\u003ccode\u003eResultSet.TYPE_FORWARD_ONLY\u003c/code\u003e, \n\u003ccode\u003eResultSet.TYPE_SCROLL_INSENSITIVE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.TYPE_SCROLL_SENSITIVE\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameter supplied is not one of the following constants: \n\u003ccode\u003eResultSet.TYPE_FORWARD_ONLY\u003c/code\u003e or \n\u003ccode\u003eResultSet.TYPE_SCROLL_INSENSITIVE\u003c/code\u003e \n\u003ccode\u003eResultSet.TYPE_SCROLL_SENSITIVE\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getType",
      "comment": "Returns the type of this RowSet object. The type is initially determined by the statement that created the RowSet object. The RowSet object can call the method setType at any time to change its type. The default is TYPE_SCROLL_INSENSITIVE.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setType(int)\"\u003e\u003ccode\u003esetType(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs getting the type of of this \n\u003ccode\u003eRowSet\u003c/code\u003e object"
        ],
        "return": [
          "the type of this JDBC \n\u003ccode\u003eRowSet\u003c/code\u003e object, which must be one of the following: \n\u003ccode\u003eResultSet.TYPE_FORWARD_ONLY\u003c/code\u003e, \n\u003ccode\u003eResultSet.TYPE_SCROLL_INSENSITIVE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.TYPE_SCROLL_SENSITIVE\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setConcurrency",
      "comment": "Sets the concurrency for this RowSet object to the specified concurrency. The default concurrency for any RowSet object (connected or disconnected) is ResultSet.CONCUR_UPDATABLE, but this method may be called at any time to change the concurrency.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getConcurrency()\"\u003e\u003ccode\u003egetConcurrency()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#isReadOnly()\"\u003e\u003ccode\u003eisReadOnly()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003econcurrency\u003c/code\u003e - one of the following constants: \n\u003ccode\u003eResultSet.CONCUR_READ_ONLY\u003c/code\u003e or \n\u003ccode\u003eResultSet.CONCUR_UPDATABLE\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameter supplied is not one of the following constants: \n\u003ccode\u003eResultSet.CONCUR_UPDATABLE\u003c/code\u003e or \n\u003ccode\u003eResultSet.CONCUR_READ_ONLY\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isReadOnly",
      "comment": "Returns a boolean indicating whether this RowSet object is read-only. Any attempts to update a read-only RowSet object will result in an SQLException being thrown. By default, rowsets are updatable if updates are possible.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setConcurrency(int)\"\u003e\u003ccode\u003esetConcurrency(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setReadOnly(boolean)\"\u003e\u003ccode\u003esetReadOnly(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eRowSet\u003c/code\u003e object cannot be updated; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setReadOnly",
      "comment": "Sets this RowSet object\u0027s readOnly property to the given boolean.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to indicate that this \n\u003ccode\u003eRowSet\u003c/code\u003e object is read-only; \n\u003ccode\u003efalse\u003c/code\u003e to indicate that it is updatable"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTransactionIsolation",
      "comment": "Returns the transaction isolation property for this RowSet object\u0027s connection. This property represents the transaction isolation level requested for use in transactions. For RowSet implementations such as the CachedRowSet that operate in a disconnected environment, the SyncProvider object offers complementary locking and data integrity options. The options described below are pertinent only to connected RowSet objects (JdbcRowSet objects).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html\" title\u003d\"class in javax.sql.rowset.spi\"\u003e\u003ccode\u003eSyncFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncProvider.html\" title\u003d\"class in javax.sql.rowset.spi\"\u003e\u003ccode\u003eSyncProvider\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setTransactionIsolation(int)\"\u003e\u003ccode\u003esetTransactionIsolation(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "one of the following constants: \n\u003ccode\u003eConnection.TRANSACTION_NONE\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_READ_UNCOMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_READ_COMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_REPEATABLE_READ\u003c/code\u003e, or \n\u003ccode\u003eConnection.TRANSACTION_SERIALIZABLE\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTransactionIsolation",
      "comment": "Sets the transaction isolation property for this JDBC RowSet object to the given constant. The DBMS will use this transaction isolation level for transactions if it can. For RowSet implementations such as the CachedRowSet that operate in a disconnected environment, the SyncProvider object being used offers complementary locking and data integrity options. The options described below are pertinent only to connected RowSet objects (JdbcRowSet objects).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncFactory.html\" title\u003d\"class in javax.sql.rowset.spi\"\u003e\u003ccode\u003eSyncFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/spi/SyncProvider.html\" title\u003d\"class in javax.sql.rowset.spi\"\u003e\u003ccode\u003eSyncProvider\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getTransactionIsolation()\"\u003e\u003ccode\u003egetTransactionIsolation()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - one of the following constants, listed in ascending order: \n\u003ccode\u003eConnection.TRANSACTION_NONE\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_READ_UNCOMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_READ_COMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_REPEATABLE_READ\u003c/code\u003e, or \n\u003ccode\u003eConnection.TRANSACTION_SERIALIZABLE\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the given parameter is not one of the Connection constants"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTypeMap",
      "comment": "Retrieves the type map associated with the Connection object for this RowSet object. Drivers that support the JDBC 3.0 API will create Connection objects with an associated type map. This type map, which is initially empty, can contain one or more fully-qualified SQL names and Class objects indicating the class to which the named SQL value will be mapped. The type mapping specified in the connection\u0027s type map is used for custom type mapping when no other type map supersedes it. If a type map is explicitly supplied to a method that can perform custom mapping, that type map supersedes the connection\u0027s type map.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object that is the type map for this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s connection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTypeMap",
      "comment": "Installs the given java.util.Map object as the type map associated with the Connection object for this RowSet object. The custom mapping indicated in this type map will be used unless a different type map is explicitly supplied to a method, in which case the type map supplied will be used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emap\u003c/code\u003e - a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object that contains the mapping from SQL type names for user defined types (UDT) to classes in the Java programming language. Each entry in the \n\u003ccode\u003eMap\u003c/code\u003e object consists of the fully qualified SQL name of a UDT and the \n\u003ccode\u003eClass\u003c/code\u003e object for the \n\u003ccode\u003eSQLData\u003c/code\u003e implementation of that UDT. May be \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxFieldSize",
      "comment": "Retrieves the maximum number of bytes that can be used for a column value in this RowSet object. This limit applies only to columns that hold values of the following types: BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR. If the limit is exceeded, the excess data is silently discarded.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs internally determining the maximum limit of the column size"
        ],
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e indicating the current maximum column size limit; zero means that there is no limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaxFieldSize",
      "comment": "Sets the maximum number of bytes that can be used for a column value in this RowSet object to the given number. This limit applies only to columns that hold values of the following types: BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, and LONGVARCHAR. If the limit is exceeded, the excess data is silently discarded. For maximum portability, it is advisable to use values greater than 256.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emax\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e indicating the new maximum column size limit; zero means that there is no limit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if (1) an error occurs internally setting the maximum limit of the column size or (2) a size of less than 0 is set"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxRows",
      "comment": "Retrieves the maximum number of rows that this RowSet object may contain. If this limit is exceeded, the excess rows are silently dropped.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs internally determining the maximum limit of rows that a \n\u003ccode\u003eRowset\u003c/code\u003e object can contain"
        ],
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e indicating the current maximum number of rows; zero means that there is no limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaxRows",
      "comment": "Sets the maximum number of rows that this RowSet object may contain to the given number. If this limit is exceeded, the excess rows are silently dropped.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emax\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e indicating the current maximum number of rows; zero means that there is no limit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs internally setting the maximum limit on the number of rows that a JDBC \n\u003ccode\u003eRowSet\u003c/code\u003e object can contain; or if \n\u003ci\u003emax\u003c/i\u003e is less than \n\u003ccode\u003e0\u003c/code\u003e; or if \n\u003ci\u003emax\u003c/i\u003e is less than the \n\u003ccode\u003efetchSize\u003c/code\u003e of the \n\u003ccode\u003eRowSet\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEscapeProcessing",
      "comment": "Sets to the given boolean whether or not the driver will scan for escape syntax and do escape substitution before sending SQL statements to the database. The default is for the driver to do escape processing. Note: Since PreparedStatement objects have usually been parsed prior to making this call, disabling escape processing for prepared statements will likely have no effect.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eenable\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to enable escape processing; \n\u003ccode\u003efalse\u003c/code\u003e to disable it"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs setting the underlying JDBC technology-enabled driver to process the escape syntax"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getQueryTimeout",
      "comment": "Retrieves the maximum number of seconds the driver will wait for a query to execute. If the limit is exceeded, an SQLException is thrown.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs in determining the query time-out value"
        ],
        "return": [
          "the current query timeout limit in seconds; zero means that there is no limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setQueryTimeout",
      "comment": "Sets to the given number the maximum number of seconds the driver will wait for a query to execute. If the limit is exceeded, an SQLException is thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eseconds\u003c/code\u003e - the new query time-out limit in seconds; zero means that there is no limit; must not be less than zero"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs setting the query time-out or if the query time-out value is less than 0"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getShowDeleted",
      "comment": "Retrieves a boolean indicating whether rows marked for deletion appear in the set of current rows. The default value is false. Note: Allowing deleted rows to remain visible complicates the behavior of some of the methods. However, most RowSet object users can simply ignore this extra detail because only sophisticated applications will likely want to take advantage of this feature.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setShowDeleted(boolean)\"\u003e\u003ccode\u003esetShowDeleted(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs determining if deleted rows are visible or not"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if deleted rows are visible; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setShowDeleted",
      "comment": "Sets the property showDeleted to the given boolean value, which determines whether rows marked for deletion appear in the set of current rows.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getShowDeleted()\"\u003e\u003ccode\u003egetShowDeleted()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if deleted rows should be shown; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs setting whether deleted rows are visible or not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEscapeProcessing",
      "comment": "Ascertains whether escape processing is enabled for this RowSet object.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs determining if escape processing is enabled or not or if the internal escape processing trigger has not been enabled"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if escape processing is turned on; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFetchDirection",
      "comment": "Gives the driver a performance hint as to the direction in which the rows in this RowSet object will be processed. The driver may ignore this hint. A RowSet object inherits the default properties of the ResultSet object from which it got its data. That ResultSet object\u0027s default fetch direction is set by the Statement object that created it. This method applies to a RowSet object only while it is connected to a database using a JDBC driver. A RowSet object may use this method at any time to change its setting for the fetch direction.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getFetchDirection()\"\u003e\u003ccode\u003egetFetchDirection()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edirection\u003c/code\u003e - one of \n\u003ccode\u003eResultSet.FETCH_FORWARD\u003c/code\u003e, \n\u003ccode\u003eResultSet.FETCH_REVERSE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.FETCH_UNKNOWN\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if (1) the \n\u003ccode\u003eRowSet\u003c/code\u003e type is \n\u003ccode\u003eTYPE_FORWARD_ONLY\u003c/code\u003e and the given fetch direction is not \n\u003ccode\u003eFETCH_FORWARD\u003c/code\u003e or (2) the given fetch direction is not one of the following: ResultSet.FETCH_FORWARD, ResultSet.FETCH_REVERSE, or ResultSet.FETCH_UNKNOWN"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFetchDirection",
      "comment": "Retrieves this RowSet object\u0027s current setting for the fetch direction. The default type is ResultSet.FETCH_FORWARD",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setFetchDirection(int)\"\u003e\u003ccode\u003esetFetchDirection(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs in determining the current fetch direction for fetching rows"
        ],
        "return": [
          "one of \n\u003ccode\u003eResultSet.FETCH_FORWARD\u003c/code\u003e, \n\u003ccode\u003eResultSet.FETCH_REVERSE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.FETCH_UNKNOWN\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFetchSize",
      "comment": "Sets the fetch size for this RowSet object to the given number of rows. The fetch size gives a JDBC technology-enabled driver (\"JDBC driver\") a hint as to the number of rows that should be fetched from the database when more rows are needed for this RowSet object. If the fetch size specified is zero, the driver ignores the value and is free to make its own best guess as to what the fetch size should be. A RowSet object inherits the default properties of the ResultSet object from which it got its data. That ResultSet object\u0027s default fetch size is set by the Statement object that created it. This method applies to a RowSet object only while it is connected to a database using a JDBC driver. For connected RowSet implementations such as JdbcRowSet, this method has a direct and immediate effect on the underlying JDBC driver. A RowSet object may use this method at any time to change its setting for the fetch size. For RowSet implementations such as CachedRowSet, which operate in a disconnected environment, the SyncProvider object being used may leverage the fetch size to poll the data source and retrieve a number of rows that do not exceed the fetch size and that may form a subset of the actual rows returned by the original query. This is an implementation variance determined by the specific SyncProvider object employed by the disconnected RowSet object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getFetchSize()\"\u003e\u003ccode\u003egetFetchSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erows\u003c/code\u003e - the number of rows to fetch; \n\u003ccode\u003e0\u003c/code\u003e to let the driver decide what the best fetch size is; must not be less than \n\u003ccode\u003e0\u003c/code\u003e or more than the maximum number of rows allowed for this \n\u003ccode\u003eRowSet\u003c/code\u003e object (the number returned by a call to the method \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getMaxRows()\"\u003e\u003ccode\u003egetMaxRows()\u003c/code\u003e\u003c/a\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the specified fetch size is less than \n\u003ccode\u003e0\u003c/code\u003e or more than the limit for the maximum number of rows"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFetchSize",
      "comment": "Returns the fetch size for this RowSet object. The default value is zero.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setFetchSize(int)\"\u003e\u003ccode\u003esetFetchSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs determining the number of rows in the current fetch size"
        ],
        "return": [
          "the number of rows suggested as the fetch size when this \n\u003ccode\u003eRowSet\u003c/code\u003e object needs more rows from the database"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getConcurrency",
      "comment": "Returns the concurrency for this RowSet object. The default is CONCUR_UPDATABLE for both connected and disconnected RowSet objects. An application can call the method setConcurrency at any time to change a RowSet object\u0027s concurrency.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#setConcurrency(int)\"\u003e\u003ccode\u003esetConcurrency(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#isReadOnly()\"\u003e\u003ccode\u003eisReadOnly()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs getting the concurrency of this \n\u003ccode\u003eRowSet\u003c/code\u003e object"
        ],
        "return": [
          "the concurrency type for this \n\u003ccode\u003eRowSet\u003c/code\u003e object, which must be one of the following: \n\u003ccode\u003eResultSet.CONCUR_READ_ONLY\u003c/code\u003e or \n\u003ccode\u003eResultSet.CONCUR_UPDATABLE\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNull",
      "comment": "Sets the designated parameter to SQL NULL. Note that the parameter\u0027s SQL type must be specified using one of the type codes defined in java.sql.Types. This SQL type is specified in the second parameter. Note that the second parameter tells the DBMS the data type of the value being set to NULL. Some DBMSs require this information, so it is required in order to make code more portable. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after this version of setNull has been called will return an Object array containing the parameter values that have been set. In that array, the element that represents the values set with this method will itself be an array. The first element of that array is null. The second element is the value set for sqlType. The parameter number is indicated by an element\u0027s position in the array returned by the method getParams, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the second placeholder parameter is being set to null, the array containing it will be the second element in the array returned by getParams. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003esqlType\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e that is one of the SQL type codes defined in the class \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e. If a non-standard \n\u003ci\u003esqlType\u003c/i\u003e is supplied, this method will not throw a \n\u003ccode\u003eSQLException\u003c/code\u003e. This allows implicit support for non-standard SQL types."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or the given parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNull",
      "comment": "Sets the designated parameter to SQL NULL. Although this version of the method setNull is intended for user-defined and REF parameters, this method may be used to set a null parameter for any JDBC type. The following are user-defined types: STRUCT, DISTINCT, and JAVA_OBJECT, and named array types. Note: To be portable, applications must give the SQL type code and the fully qualified SQL type name when specifying a NULL user-defined or REF parameter. In the case of a user-defined type, the name is the type name of the parameter itself. For a REF parameter, the name is the type name of the referenced type. If a JDBC technology-enabled driver does not need the type code or type name information, it may ignore it. If the parameter does not have a user-defined or REF type, the given typeName parameter is ignored. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after this version of setNull has been called will return an Object array containing the parameter values that have been set. In that array, the element that represents the values set with this method will itself be an array. The first element of that array is null. The second element is the value set for sqlType, and the third element is the value set for typeName. The parameter number is indicated by an element\u0027s position in the array returned by the method getParams, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the second placeholder parameter is being set to null, the array containing it will be the second element in the array returned by getParams. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003esqlType\u003c/code\u003e - a value from \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e",
          "\u003ccode\u003etypeName\u003c/code\u003e - the fully qualified name of an SQL user-defined type, which is ignored if the parameter is not a user-defined type or \n\u003ccode\u003eREF\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the given parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBoolean",
      "comment": "Sets the designated parameter to the given boolean in the Java programming language. The driver converts this to an SQL BIT value when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute, populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setByte",
      "comment": "Sets the designated parameter to the given byte in the Java programming language. The driver converts this to an SQL TINYINT value when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setShort",
      "comment": "Sets the designated parameter to the given short in the Java programming language. The driver converts this to an SQL SMALLINT value when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInt",
      "comment": "Sets the designated parameter to an int in the Java programming language. The driver converts this to an SQL INTEGER value when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLong",
      "comment": "Sets the designated parameter to the given long in the Java programming language. The driver converts this to an SQL BIGINT value when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFloat",
      "comment": "Sets the designated parameter to the given float in the Java programming language. The driver converts this to an SQL FLOAT value when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDouble",
      "comment": "Sets the designated parameter to the given double in the Java programming language. The driver converts this to an SQL DOUBLE value when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBigDecimal",
      "comment": "Sets the designated parameter to the given java.lang.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. Note: JdbcRowSet does not require the populate method as it is undefined in this class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setString",
      "comment": "Sets the designated parameter to the given String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument\u0027s size relative to the driver\u0027s limits on VARCHAR values) when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBytes",
      "comment": "Sets the designated parameter to the given array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY value (depending on the argument\u0027s size relative to the driver\u0027s limits on VARBINARY values) when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDate",
      "comment": "Sets the designated parameter to the given java.sql.Date value. The driver converts this to an SQL DATE value when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after this version of setDate has been called will return an array with the value to be set for placeholder parameter number parameterIndex being the Date object supplied as the second parameter. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTime",
      "comment": "Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after this version of the method setTime has been called will return an array of the parameters that have been set. The parameter to be set for parameter placeholder number parameterIndex will be the Time object that was set as the second parameter to this method. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003ejava.sql.Time\u003c/code\u003e object, which is to be set as the value for placeholder parameter \n\u003ci\u003eparameterIndex\u003c/i\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after this version of setTimestamp has been called will return an array with the value for parameter placeholder number parameterIndex being the Timestamp object that was supplied as the second parameter to this method. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003ejava.sql.Timestamp\u003c/code\u003e object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter to the given java.io.InputStream object, which will have the specified number of bytes. The contents of the stream will be read and sent to the database. This method throws an SQLException object if the number of bytes read and sent to the database is not equal to length. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream object. A JDBC technology-enabled driver will read the data from the stream as needed until it reaches end-of-file. The driver will do any necessary conversion from ASCII to the database CHAR format. Note: This stream object can be either a standard Java stream object or your own subclass that implements the standard interface. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. Note: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after setAsciiStream has been called will return an array containing the parameter values that have been set. The element in the array that represents the values set with this method will itself be an array. The first element of that array is the given java.io.InputStream object. The second element is the value set for length. The third element is an internal BaseRowSet constant specifying that the stream passed to this method is an ASCII stream. The parameter number is indicated by an element\u0027s position in the array returned by the method getParams, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the input stream being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by getParams. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is element number parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream. This is the number of bytes the driver will send to the DBMS; lengths of 0 or less are are undefined but will cause an invalid length exception to be thrown in the underlying JDBC driver."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs, the parameter index is out of bounds, or when connected to a data source, the number of bytes the driver reads and sends to the database is not equal to the number of bytes specified in \n\u003ci\u003elength\u003c/i\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setAsciiStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter to the given java.io.InputStream object, which will have the specified number of bytes. The contents of the stream will be read and sent to the database. This method throws an SQLException object if the number of bytes read and sent to the database is not equal to length. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. A JDBC technology-enabled driver will read the data from the stream as needed until it reaches end-of-file. Note: This stream object can be either a standard Java stream object or your own subclass that implements the standard interface. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after setBinaryStream has been called will return an array containing the parameter values that have been set. In that array, the element that represents the values set with this method will itself be an array. The first element of that array is the given java.io.InputStream object. The second element is the value set for length. The third element is an internal BaseRowSet constant specifying that the stream passed to this method is a binary stream. The parameter number is indicated by an element\u0027s position in the array returned by the method getParams, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the input stream being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by getParams. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is element number parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the input stream that contains the binary value to be set",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream; lengths of 0 or less are are undefined but will cause an invalid length exception to be thrown in the underlying JDBC driver."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs, the parameter index is out of bounds, or when connected to a data source, the number of bytes the driver reads and sends to the database is not equal to the number of bytes specified in \n\u003ci\u003elength\u003c/i\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBinaryStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUnicodeStream",
      "comment": "Sets the designated parameter to the given java.io.InputStream object, which will have the specified number of bytes. The contents of the stream will be read and sent to the database. This method throws an SQLException if the number of bytes read and sent to the database is not equal to length. When a very large Unicode value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream object. A JDBC technology-enabled driver will read the data from the stream as needed, until it reaches end-of-file. The driver will do any necessary conversion from Unicode to the database CHAR format. The byte format of the Unicode stream must be Java UTF-8, as defined in the Java Virtual Machine Specification. Note: This stream object can be either a standard Java stream object or your own subclass that implements the standard interface. This method is deprecated; the method getCharacterStream should be used in its place. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Calls made to the method getParams after setUnicodeStream has been called will return an array containing the parameter values that have been set. In that array, the element that represents the values set with this method will itself be an array. The first element of that array is the given java.io.InputStream object. The second element is the value set for length. The third element is an internal BaseRowSet constant specifying that the stream passed to this method is a Unicode stream. The parameter number is indicated by an element\u0027s position in the array returned by the method getParams, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the input stream being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by getParams. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is element number parameterIndex -1.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003ejava.io.InputStream\u003c/code\u003e object that contains the UNICODE parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the input stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs, the parameter index is out of bounds, or the number of bytes the driver reads and sends to the database is not equal to the number of bytes specified in \n\u003ci\u003elength\u003c/i\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter to the given java.io.Reader object, which will have the specified number of characters. The contents of the reader will be read and sent to the database. This method throws an SQLException if the number of bytes read and sent to the database is not equal to length. When a very large Unicode value is input to a LONGVARCHAR parameter, it may be more practical to send it via a Reader object. A JDBC technology-enabled driver will read the data from the stream as needed until it reaches end-of-file. The driver will do any necessary conversion from Unicode to the database CHAR format. The byte format of the Unicode stream must be Java UTF-8, as defined in the Java Virtual Machine Specification. Note: This stream object can be either a standard Java stream object or your own subclass that implements the standard interface. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after setCharacterStream has been called will return an array containing the parameter values that have been set. In that array, the element that represents the values set with this method will itself be an array. The first element of that array is the given java.io.Reader object. The second element is the value set for length. The parameter number is indicated by an element\u0027s position in the array returned by the method getParams, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the reader being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by getParams. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is element number parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003eReader\u003c/code\u003e object that contains the Unicode data",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the stream; lengths of 0 or less are undefined but will cause an invalid length exception to be thrown in the underlying JDBC driver."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs, the parameter index is out of bounds, or when connected to a data source, the number of bytes the driver reads and sends to the database is not equal to the number of bytes specified in \n\u003ci\u003elength\u003c/i\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setCharacterStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the Unicode data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setObject",
      "comment": "Sets the designated parameter to an Object in the Java programming language. The second parameter must be an Object type. For integral values, the java.lang equivalent objects should be used. For example, use the class Integer for an int. The driver converts this object to the specified target SQL type before sending it to the database. If the object has a custom mapping (is of a class implementing SQLData), the driver should call the method SQLData.writeSQL to write the object to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, Struct, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass database- specific abstract data types. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after this version of setObject has been called will return an array containing the parameter values that have been set. In that array, the element that represents the values set with this method will itself be an array. The first element of that array is the given Object instance, and the second element is the value set for targetSqlType. The third element is the value set for scale, which the driver will ignore if the type of the object being set is not java.sql.Types.NUMERIC or java.sql.Types.DECIMAL. The parameter number is indicated by an element\u0027s position in the array returned by the method getParams, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the object being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by getParams. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is element number parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e containing the input parameter value; must be an \n\u003ccode\u003eObject\u003c/code\u003e type",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e) to be sent to the database. The \n\u003ccode\u003escale\u003c/code\u003e argument may further qualify this type. If a non-standard \n\u003ci\u003etargetSqlType\u003c/i\u003e is supplied, this method will not throw a \n\u003ccode\u003eSQLException\u003c/code\u003e. This allows implicit support for non-standard SQL types.",
          "\u003ccode\u003escale\u003c/code\u003e - for the types \n\u003ccode\u003ejava.sql.Types.DECIMAL\u003c/code\u003e and \n\u003ccode\u003ejava.sql.Types.NUMERIC\u003c/code\u003e, this is the number of digits after the decimal point. For all other types, this value will be ignored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given Object value. This method is like setObject(int parameterIndex, Object x, int targetSqlType, int scale) except that it assumes a scale of zero. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after this version of setObject has been called will return an array containing the parameter values that have been set. In that array, the element that represents the values set with this method will itself be an array. The first element of that array is the given Object instance. The second element is the value set for targetSqlType. The parameter number is indicated by an element\u0027s position in the array returned by the method getParams, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the object being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by getParams. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is element number parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e containing the input parameter value; must be an \n\u003ccode\u003eObject\u003c/code\u003e type",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e) to be sent to the database. If a non-standard \n\u003ci\u003etargetSqlType\u003c/i\u003e is supplied, this method will not throw a \n\u003ccode\u003eSQLException\u003c/code\u003e. This allows implicit support for non-standard SQL types."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setObject",
      "comment": "Sets the designated parameter to an Object in the Java programming language. The second parameter must be an Object type. For integral values, the java.lang equivalent objects should be used. For example, use the class Integer for an int. The JDBC specification defines a standard mapping from Java Object types to SQL types. The driver will use this standard mapping to convert the given object to its corresponding SQL type before sending it to the database. If the object has a custom mapping (is of a class implementing SQLData), the driver should call the method SQLData.writeSQL to write the object to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, Struct, or Array, the driver should pass it to the database as a value of the corresponding SQL type. This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one interface. Note that this method may be used to pass database-specific abstract data types. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. After this method has been called, a call to the method getParams will return an object array of the current command parameters, which will include the Object set for placeholder parameter number parameterIndex. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is element number parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs the parameter index is out of bounds, or there is ambiguity in the implementation of the object being set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRef",
      "comment": "Sets the designated parameter to the given Ref object in the Java programming language. The driver converts this to an SQL REF value when it sends it to the database. Internally, the Ref is represented as a SerialRef to ensure serializability. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. After this method has been called, a call to the method getParams will return an object array of the current command parameters, which will include the Ref object set for placeholder parameter number parameterIndex. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is element number parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialRef.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003e\u003ccode\u003eSerialRef\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003eref\u003c/code\u003e - a \n\u003ccode\u003eRef\u003c/code\u003e object representing an SQL \n\u003ccode\u003eREF\u003c/code\u003e value; cannot be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs; the parameter index is out of bounds or the \n\u003ccode\u003eRef\u003c/code\u003e object is \n\u003ccode\u003enull\u003c/code\u003e; or the \n\u003ccode\u003eRef\u003c/code\u003e object returns a \n\u003ccode\u003enull\u003c/code\u003e base type name."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBlob",
      "comment": "Sets the designated parameter to the given Blob object in the Java programming language. The driver converts this to an SQL BLOB value when it sends it to the database. Internally, the Blob is represented as a SerialBlob to ensure serializability. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. After this method has been called, a call to the method getParams will return an object array of the current command parameters, which will include the Blob object set for placeholder parameter number parameterIndex. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is element number parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003e\u003ccode\u003eSerialBlob\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003eBlob\u003c/code\u003e object representing an SQL \n\u003ccode\u003eBLOB\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setClob",
      "comment": "Sets the designated parameter to the given Clob object in the Java programming language. The driver converts this to an SQL CLOB value when it sends it to the database. Internally, the Clob is represented as a SerialClob to ensure serializability. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. After this method has been called, a call to the method getParams will return an object array of the current command parameters, which will include the Clob object set for placeholder parameter number parameterIndex. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is element number parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialBlob.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003e\u003ccode\u003eSerialBlob\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003eClob\u003c/code\u003e object representing an SQL \n\u003ccode\u003eCLOB\u003c/code\u003e value; cannot be null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs; the parameter index is out of bounds or the \n\u003ccode\u003eClob\u003c/code\u003e is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setArray",
      "comment": "Sets the designated parameter to an Array object in the Java programming language. The driver converts this to an SQL ARRAY value when it sends it to the database. Internally, the Array is represented as a SerialArray to ensure serializability. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. Note: JdbcRowSet does not require the populate method as it is undefined in this class. After this method has been called, a call to the method getParams will return an object array of the current command parameters, which will include the Array object set for placeholder parameter number parameterIndex. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is element number parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/serial/SerialArray.html\" title\u003d\"class in javax.sql.rowset.serial\"\u003e\u003ccode\u003eSerialArray\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003earray\u003c/code\u003e - an \n\u003ccode\u003eArray\u003c/code\u003e object representing an SQL \n\u003ccode\u003eARRAY\u003c/code\u003e value; cannot be null. The \n\u003ccode\u003eArray\u003c/code\u003e object passed to this method must return a non-null Object for all \n\u003ccode\u003egetArray()\u003c/code\u003e method calls. A null value will cause a \n\u003ccode\u003eSQLException\u003c/code\u003e to be thrown."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs; the parameter index is out of bounds or the \n\u003ccode\u003eARRAY\u003c/code\u003e is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDate",
      "comment": "Sets the designated parameter to the given java.sql.Date object. When the DBMS does not store time zone information, the driver will use the given Calendar object to construct the SQL DATE value to send to the database. With a Calendar object, the driver can calculate the date taking into account a custom time zone. If no Calendar object is specified, the driver uses the time zone of the Virtual Machine that is running the application. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after this version of setDate has been called will return an array containing the parameter values that have been set. In that array, the element that represents the values set with this method will itself be an array. The first element of that array is the given java.sql.Date object. The second element is the value set for cal. The parameter number is indicated by an element\u0027s position in the array returned by the method getParams, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the date being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by getParams. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003ejava.sql.Date\u003c/code\u003e object representing an SQL \n\u003ccode\u003eDATE\u003c/code\u003e value",
          "\u003ccode\u003ecal\u003c/code\u003e - a \n\u003ccode\u003ejava.util.Calendar\u003c/code\u003e object to use when when constructing the date"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTime",
      "comment": "Sets the designated parameter to the given java.sql.Time object. The driver converts this to an SQL TIME value when it sends it to the database. When the DBMS does not store time zone information, the driver will use the given Calendar object to construct the SQL TIME value to send to the database. With a Calendar object, the driver can calculate the date taking into account a custom time zone. If no Calendar object is specified, the driver uses the time zone of the Virtual Machine that is running the application. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after this version of setTime has been called will return an array containing the parameter values that have been set. In that array, the element that represents the values set with this method will itself be an array. The first element of that array is the given java.sql.Time object. The second element is the value set for cal. The parameter number is indicated by an element\u0027s position in the array returned by the method getParams, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the time being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by getParams. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003ejava.sql.Time\u003c/code\u003e object",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003ejava.util.Calendar\u003c/code\u003e object the driver can use to construct the time"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter to the given java.sql.Timestamp object. The driver converts this to an SQL TIMESTAMP value when it sends it to the database. When the DBMS does not store time zone information, the driver will use the given Calendar object to construct the SQL TIMESTAMP value to send to the database. With a Calendar object, the driver can calculate the timestamp taking into account a custom time zone. If no Calendar object is specified, the driver uses the time zone of the Virtual Machine that is running the application. The parameter value set by this method is stored internally and will be supplied as the appropriate parameter in this RowSet object\u0027s command when the method execute is called. Methods such as execute and populate must be provided in any class that extends this class and implements one or more of the standard JSR-114 RowSet interfaces. NOTE: JdbcRowSet does not require the populate method as it is undefined in this class. Calls made to the method getParams after this version of setTimestamp has been called will return an array containing the parameter values that have been set. In that array, the element that represents the values set with this method will itself be an array. The first element of that array is the given java.sql.Timestamp object. The second element is the value set for cal. The parameter number is indicated by an element\u0027s position in the array returned by the method getParams, with the first element being the value for the first placeholder parameter, the second element being the value for the second placeholder parameter, and so on. In other words, if the timestamp being set is the value for the second placeholder parameter, the array containing it will be the second element in the array returned by getParams. Note that because the numbering of elements in an array starts at zero, the array element that corresponds to placeholder parameter number parameterIndex is parameterIndex -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the ordinal number of the placeholder parameter in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command that is to be set. The first parameter is 1, the second is 2, and so on; must be \n\u003ccode\u003e1\u003c/code\u003e or greater",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003ejava.sql.Timestamp\u003c/code\u003e object",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003ejava.util.Calendar\u003c/code\u003e object the driver can use to construct the timestamp"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs or the parameter index is out of bounds"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clearParameters",
      "comment": "Clears all of the current parameter values in this RowSet object\u0027s internal representation of the parameters to be set in this RowSet object\u0027s command when it is executed. In general, parameter values remain in force for repeated use in this RowSet object\u0027s command. Setting a parameter value with the setter methods automatically clears the value of the designated parameter and replaces it with the new specified value. This method is called internally by the setCommand method to clear all of the parameters set for the previous command. Furthermore, this method differs from the initParams method in that it maintains the schema of the RowSet object.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs clearing the parameters"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParams",
      "comment": "Retrieves an array containing the parameter values (both Objects and primitives) that have been set for this RowSet object\u0027s command and throws an SQLException object if all parameters have not been set. Before the command is sent to the DBMS to be executed, these parameters will be substituted for placeholder parameters in the PreparedStatement object that is the command for a RowSet implementation extending the BaseRowSet class. Each element in the array that is returned is an Object instance that contains the values of the parameters supplied to a setter method. The order of the elements is determined by the value supplied for parameterIndex. If the setter method takes only the parameter index and the value to be set (possibly null), the array element will contain the value to be set (which will be expressed as an Object). If there are additional parameters, the array element will itself be an array containing the value to be set plus any additional parameter values supplied to the setter method. If the method sets a stream, the array element includes the type of stream being supplied to the method. These additional parameters are for the use of the driver or the DBMS and may or may not be used. NOTE: Stored parameter values of types Array, Blob, Clob and Ref are returned as SerialArray, SerialBlob, SerialClob and SerialRef respectively.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs retrieving the object array of parameters of this \n\u003ccode\u003eRowSet\u003c/code\u003e object or if not all parameters have been set"
        ],
        "return": [
          "an array of \n\u003ccode\u003eObject\u003c/code\u003e instances that includes the parameter values that may be set in this \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command; an empty array if no parameters have been set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNull",
      "comment": "Sets the designated parameter to SQL NULL. Note: You must specify the parameter\u0027s SQL type.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - the SQL type code defined in \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNull",
      "comment": "Sets the designated parameter to SQL NULL. This version of the method setNull should be used for user-defined types and REF type parameters. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. Note: To be portable, applications must give the SQL type code and the fully-qualified SQL type name when specifying a NULL user-defined or REF parameter. In the case of a user-defined type the name is the type name of the parameter itself. For a REF parameter, the name is the type name of the referenced type. If a JDBC driver does not need the type code or type name information, it may ignore it. Although it is intended for user-defined and Ref parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the given typeName is ignored.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - a value from \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e",
          "\u003ccode\u003etypeName\u003c/code\u003e - the fully-qualified name of an SQL user-defined type; ignored if the parameter is not a user-defined type or SQL \n\u003ccode\u003eREF\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBoolean",
      "comment": "Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT or BOOLEAN value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setByte",
      "comment": "Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setShort",
      "comment": "Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInt",
      "comment": "Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLong",
      "comment": "Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFloat",
      "comment": "Sets the designated parameter to the given Java float value. The driver converts this to an SQL FLOAT value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDouble",
      "comment": "Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBigDecimal",
      "comment": "Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setString",
      "comment": "Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument\u0027s size relative to the driver\u0027s limits on VARCHAR values) when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBytes",
      "comment": "Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument\u0027s size relative to the driver\u0027s limits on VARBINARY values) when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the UNICODE data used as the designated parameter",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setAsciiStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBinaryStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setCharacterStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the Unicode data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNCharacterStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; if a database access error occurs; or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. The second argument must be an object type; for integral values, the java.lang equivalent objects should be used. The given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass database- specific abstract data types.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type.",
          "\u003ccode\u003escale\u003c/code\u003e - for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For all other types, this value will be ignored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etargetSqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. This method is like the method setObject above, except that it assumes a scale of zero.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in java.sql.Types) to be sent to the database"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etargetSqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. The second parameter must be of type Object; therefore, the java.lang equivalent objects should be used for built-in types. The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database. Note that this method may be used to pass database- specific abstract data types, by using a driver-specific Java type. If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of the interfaces named above.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e or if the given \n\u003ccode\u003eObject\u003c/code\u003e parameter is ambiguous",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBlob",
      "comment": "Sets the designated parameter to a InputStream object. The InputStream must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e, if parameterIndex does not correspond to a parameter marker in the SQL statement, if the length specified is less than zero or if the number of bytes in the \n\u003ccode\u003eInputStream\u003c/code\u003e does not match the specified length.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBlob",
      "comment": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBlob which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or if parameterIndex does not correspond to a parameter marker in the SQL statement,",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBlob",
      "comment": "Sets the designated parameter to a InputStream object. The Inputstream must contain the number of characters specified by length, otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set the second is 2, ...",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement, or if the length specified is less than zero; if the number of bytes in the \n\u003ccode\u003eInputStream\u003c/code\u003e does not match the specified length; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBlob",
      "comment": "Sets the designated parameter to the given java.sql.Blob object. The driver converts this to an SQL BLOB value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003eBlob\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eBLOB\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBlob",
      "comment": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARBINARY or a BLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBlob which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e, if parameterIndex does not correspond to a parameter marker in the SQL statement, or if the length specified is less than zero.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setClob which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003eor if parameterIndex does not correspond to a parameter marker in the SQL statement",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setClob",
      "comment": "Sets the designated parameter to the given java.sql.Clob object. The driver converts this to an SQL CLOB value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003eClob\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eCLOB\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setClob which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDate",
      "comment": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application. The driver converts this to an SQL DATE value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDate",
      "comment": "Sets the designated parameter to the given java.sql.Date value, using the given Calendar object. The driver uses the Calendar object to construct an SQL DATE value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the date taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the date"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTime",
      "comment": "Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTime",
      "comment": "Sets the designated parameter to the given java.sql.Time value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIME value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the time taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the time"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIMESTAMP value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the timestamp taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql.rowset/javax/sql/rowset/BaseRowSet.html#getParams()\"\u003e\u003ccode\u003egetParams()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the timestamp"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSQLXML",
      "comment": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003exmlObject\u003c/code\u003e - a \n\u003ccode\u003eSQLXML\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eXML\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed result set, the \n\u003ccode\u003ejava.xml.transform.Result\u003c/code\u003e, \n\u003ccode\u003eWriter\u003c/code\u003e or \n\u003ccode\u003eOutputStream\u003c/code\u003e has not been closed for the \n\u003ccode\u003eSQLXML\u003c/code\u003e object or if there is an error processing the XML value. The \n\u003ccode\u003egetCause\u003c/code\u003e method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSQLXML",
      "comment": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003exmlObject\u003c/code\u003e - a \n\u003ccode\u003eSQLXML\u003c/code\u003e object that maps an \n\u003ccode\u003eSQL XML\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed result set, the \n\u003ccode\u003ejava.xml.transform.Result\u003c/code\u003e, \n\u003ccode\u003eWriter\u003c/code\u003e or \n\u003ccode\u003eOutputStream\u003c/code\u003e has not been closed for the \n\u003ccode\u003eSQLXML\u003c/code\u003e object or if there is an error processing the XML value. The \n\u003ccode\u003egetCause\u003c/code\u003e method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRowId",
      "comment": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID value when it sends it to the database",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRowId",
      "comment": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNString",
      "comment": "Sets the designated parameter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR value (depending on the argument\u0027s size relative to the driver\u0027s limits on NVARCHAR values) when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNString",
      "comment": "Sets the designated parameter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the column to be set",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the column to be set",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNCharacterStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; if a database access error occurs; or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a java.sql.NClob object. The object implements the java.sql.NClob interface. This NClob object maps to a SQL NCLOB.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the column to be set",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNClob which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a java.sql.NClob object. The driver converts this oa SQL NCLOB value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNClob which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setURL",
      "comment": "Sets the designated parameter to the given java.net.URL value. The driver converts this to an SQL DATALINK value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003ejava.net.URL\u003c/code\u003e object to be set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new BaseRowSet object initialized with a default Vector object for its listeners field. The other default values with which it is initialized are listed in Section 6.0 of the class comment for this class.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.sql.rowset.BaseRowSet",
  "comment": "An abstract class providing a \n\u003ccode\u003eRowSet\u003c/code\u003e object with its basic functionality. The basic functions include having properties and sending event notifications, which all JavaBeans components must implement. \n\u003ch2\u003e1.0 Overview\u003c/h2\u003e The \n\u003ccode\u003eBaseRowSet\u003c/code\u003e class provides the core functionality for all \n\u003ccode\u003eRowSet\u003c/code\u003e implementations, and all standard implementations \n\u003cb\u003emay\u003c/b\u003e use this class in combination with one or more \n\u003ccode\u003eRowSet\u003c/code\u003e interfaces in order to provide a standard vendor-specific implementation. To clarify, all implementations must implement at least one of the \n\u003ccode\u003eRowSet\u003c/code\u003e interfaces (\n\u003ccode\u003eJdbcRowSet\u003c/code\u003e, \n\u003ccode\u003eCachedRowSet\u003c/code\u003e, \n\u003ccode\u003eJoinRowSet\u003c/code\u003e, \n\u003ccode\u003eFilteredRowSet\u003c/code\u003e, or \n\u003ccode\u003eWebRowSet\u003c/code\u003e). This means that any implementation that extends the \n\u003ccode\u003eBaseRowSet\u003c/code\u003e class must also implement one of the \n\u003ccode\u003eRowSet\u003c/code\u003e interfaces. \n\u003cp\u003e The \u003ccode\u003eBaseRowSet\u003c/code\u003e class provides the following: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003cb\u003eProperties\u003c/b\u003e \n  \u003cul\u003e \n   \u003cli\u003eFields for storing current properties \u003c/li\u003e\n   \u003cli\u003eMethods for getting and setting properties \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n \u003cli\u003e\u003cb\u003eEvent notification\u003c/b\u003e \u003c/li\u003e\n \u003cli\u003e\u003cb\u003eA complete set of setter methods\u003c/b\u003e for setting the parameters in a \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command \u003c/li\u003e\n \u003cli\u003e \u003cb\u003eStreams\u003c/b\u003e \n  \u003cul\u003e \n   \u003cli\u003eFields for storing stream instances \u003c/li\u003e\n   \u003cli\u003eConstants for indicating the type of a stream \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003e2.0 Setting Properties\u003c/h2\u003e All rowsets maintain a set of properties, which will usually be set using a tool. The number and kinds of properties a rowset has will vary, depending on what the \n\u003ccode\u003eRowSet\u003c/code\u003e implementation does and how it gets its data. For example, rowsets that get their data from a \n\u003ccode\u003eResultSet\u003c/code\u003e object need to set the properties that are required for making a database connection. If a \n\u003ccode\u003eRowSet\u003c/code\u003e object uses the \n\u003ccode\u003eDriverManager\u003c/code\u003e facility to make a connection, it needs to set a property for the JDBC URL that identifies the appropriate driver, and it needs to set the properties that give the user name and password. If, on the other hand, the rowset uses a \n\u003ccode\u003eDataSource\u003c/code\u003e object to make the connection, which is the preferred method, it does not need to set the property for the JDBC URL. Instead, it needs to set the property for the logical name of the data source along with the properties for the user name and password. \n\u003cp\u003e NOTE: In order to use a \u003ccode\u003eDataSource\u003c/code\u003e object for making a connection, the \u003ccode\u003eDataSource\u003c/code\u003e object must have been registered with a naming service that uses the Java Naming and Directory Interface (JNDI) API. This registration is usually done by a person acting in the capacity of a system administrator. \u003c/p\u003e\n\u003ch2\u003e3.0 Setting the Command and Its Parameters\u003c/h2\u003e When a rowset gets its data from a relational database, it executes a command (a query) that produces a \n\u003ccode\u003eResultSet\u003c/code\u003e object. This query is the command that is set for the \n\u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command property. The rowset populates itself with data by reading the data from the \n\u003ccode\u003eResultSet\u003c/code\u003e object into itself. If the query contains placeholders for values to be set, the \n\u003ccode\u003eBaseRowSet\u003c/code\u003e setter methods are used to set these values. All setter methods allow these values to be set to \n\u003ccode\u003enull\u003c/code\u003e if required. \n\u003cp\u003e The following code fragment illustrates how the \u003ccode\u003eCachedRowSet\u003c/code\u003e object \u003ccode\u003ecrs\u003c/code\u003e might have its command property set. Note that if a tool is used to set properties, this is the code that the tool would use. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    crs.setCommand(\"SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS\" +\n                   \"WHERE CREDIT_LIMIT \u0026gt; ? AND REGION \u003d ?\");\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e In this example, the values for \u003ccode\u003eCREDIT_LIMIT\u003c/code\u003e and \u003ccode\u003eREGION\u003c/code\u003e are placeholder parameters, which are indicated with a question mark (?). The first question mark is placeholder parameter number \u003ccode\u003e1\u003c/code\u003e, the second question mark is placeholder parameter number \u003ccode\u003e2\u003c/code\u003e, and so on. Any placeholder parameters must be set with values before the query can be executed. To set these placeholder parameters, the \u003ccode\u003eBaseRowSet\u003c/code\u003e class provides a set of setter methods, similar to those provided by the \u003ccode\u003ePreparedStatement\u003c/code\u003e interface, for setting values of each data type. A \u003ccode\u003eRowSet\u003c/code\u003e object stores the parameter values internally, and its \u003ccode\u003eexecute\u003c/code\u003e method uses them internally to set values for the placeholder parameters before it sends the command to the DBMS to be executed. \u003c/p\u003e\n\u003cp\u003e The following code fragment demonstrates setting the two parameters in the query from the previous example. \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n    crs.setInt(1, 5000);\n    crs.setString(2, \"West\");\n \u003c/code\u003e\u003c/pre\u003e If the \n\u003ccode\u003eexecute\u003c/code\u003e method is called at this point, the query sent to the DBMS will be: \n\u003cpre\u003e\u003ccode\u003e\n    \"SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS\" +\n                   \"WHERE CREDIT_LIMIT \u0026gt; 5000 AND REGION \u003d \u0027West\u0027\"\n \u003c/code\u003e\u003c/pre\u003e NOTE: Setting \n\u003ccode\u003eArray\u003c/code\u003e, \n\u003ccode\u003eClob\u003c/code\u003e, \n\u003ccode\u003eBlob\u003c/code\u003e and \n\u003ccode\u003eRef\u003c/code\u003e objects as a command parameter, stores these values as \n\u003ccode\u003eSerialArray\u003c/code\u003e, \n\u003ccode\u003eSerialClob\u003c/code\u003e, \n\u003ccode\u003eSerialBlob\u003c/code\u003e and \n\u003ccode\u003eSerialRef\u003c/code\u003e objects respectively. \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003e4.0 Handling of Parameters Behind the Scenes\u003c/h2\u003e NOTE: The \n\u003ccode\u003eBaseRowSet\u003c/code\u003e class provides two kinds of setter methods, those that set properties and those that set placeholder parameters. The setter methods discussed in this section are those that set placeholder parameters. \n\u003cp\u003e The placeholder parameters set with the \u003ccode\u003eBaseRowSet\u003c/code\u003e setter methods are stored as objects in an internal \u003ccode\u003eHashtable\u003c/code\u003e object. Primitives are stored as their \u003ccode\u003eObject\u003c/code\u003e type. For example, \u003ccode\u003ebyte\u003c/code\u003e is stored as \u003ccode\u003eByte\u003c/code\u003e object, and \u003ccode\u003eint\u003c/code\u003e is stored as an \u003ccode\u003eInteger\u003c/code\u003e object. When the method \u003ccode\u003eexecute\u003c/code\u003e is called, the values in the \u003ccode\u003eHashtable\u003c/code\u003e object are substituted for the appropriate placeholder parameters in the command. \u003c/p\u003e\n\u003cp\u003e A call to the method \u003ccode\u003egetParams\u003c/code\u003e returns the values stored in the \u003ccode\u003eHashtable\u003c/code\u003e object as an array of \u003ccode\u003eObject\u003c/code\u003e instances. An element in this array may be a simple \u003ccode\u003eObject\u003c/code\u003e instance or an array (which is a type of \u003ccode\u003eObject\u003c/code\u003e). The particular setter method used determines whether an element in this array is an \u003ccode\u003eObject\u003c/code\u003e or an array. \u003c/p\u003e\n\u003cp\u003e The majority of methods for setting placeholder parameters take two parameters, with the first parameter indicating which placeholder parameter is to be set, and the second parameter giving the value to be set. Methods such as \u003ccode\u003esetInt\u003c/code\u003e, \u003ccode\u003esetString\u003c/code\u003e, \u003ccode\u003esetBoolean\u003c/code\u003e, and \u003ccode\u003esetLong\u003c/code\u003e fall into this category. After these methods have been called, a call to the method \u003ccode\u003egetParams\u003c/code\u003e will return an array with the values that have been set. Each element in the array is an \u003ccode\u003eObject\u003c/code\u003e instance representing the values that have been set. The order of these values in the array is determined by the \u003ccode\u003eint\u003c/code\u003e (the first parameter) passed to the setter method. The values in the array are the values (the second parameter) passed to the setter method. In other words, the first element in the array is the value to be set for the first placeholder parameter in the \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command. The second element is the value to be set for the second placeholder parameter, and so on. \u003c/p\u003e\n\u003cp\u003e Several setter methods send the driver and DBMS information beyond the value to be set. When the method \u003ccode\u003egetParams\u003c/code\u003e is called after one of these setter methods has been used, the elements in the array will themselves be arrays to accommodate the additional information. In this category, the method \u003ccode\u003esetNull\u003c/code\u003e is a special case because one version takes only two parameters (\u003ccode\u003esetNull(int parameterIndex, int SqlType)\u003c/code\u003e). Nevertheless, it requires an array to contain the information that will be passed to the driver and DBMS. The first element in this array is the value to be set, which is \u003ccode\u003enull\u003c/code\u003e, and the second element is the \u003ccode\u003eint\u003c/code\u003e supplied for \u003ci\u003esqlType\u003c/i\u003e, which indicates the type of SQL value that is being set to \u003ccode\u003enull\u003c/code\u003e. This information is needed by some DBMSs and is therefore required in order to ensure that applications are portable. The other version is intended to be used when the value to be set to \u003ccode\u003enull\u003c/code\u003e is a user-defined type. It takes three parameters (\u003ccode\u003esetNull(int parameterIndex, int sqlType, String typeName)\u003c/code\u003e) and also requires an array to contain the information to be passed to the driver and DBMS. The first two elements in this array are the same as for the first version of \u003ccode\u003esetNull\u003c/code\u003e. The third element, \u003ci\u003etypeName\u003c/i\u003e, gives the SQL name of the user-defined type. As is true with the other setter methods, the number of the placeholder parameter to be set is indicated by an element\u0027s position in the array returned by \u003ccode\u003egetParams\u003c/code\u003e. So, for example, if the parameter supplied to \u003ccode\u003esetNull\u003c/code\u003e is \u003ccode\u003e2\u003c/code\u003e, the second element in the array returned by \u003ccode\u003egetParams\u003c/code\u003e will be an array of two or three elements. \u003c/p\u003e\n\u003cp\u003e Some methods, such as \u003ccode\u003esetObject\u003c/code\u003e and \u003ccode\u003esetDate\u003c/code\u003e have versions that take more than two parameters, with the extra parameters giving information to the driver or the DBMS. For example, the methods \u003ccode\u003esetDate\u003c/code\u003e, \u003ccode\u003esetTime\u003c/code\u003e, and \u003ccode\u003esetTimestamp\u003c/code\u003e can take a \u003ccode\u003eCalendar\u003c/code\u003e object as their third parameter. If the DBMS does not store time zone information, the driver uses the \u003ccode\u003eCalendar\u003c/code\u003e object to construct the \u003ccode\u003eDate\u003c/code\u003e, \u003ccode\u003eTime\u003c/code\u003e, or \u003ccode\u003eTimestamp\u003c/code\u003e object being set. As is true with other methods that provide additional information, the element in the array returned by \u003ccode\u003egetParams\u003c/code\u003e is an array instead of a simple \u003ccode\u003eObject\u003c/code\u003e instance. \u003c/p\u003e\n\u003cp\u003e The methods \u003ccode\u003esetAsciiStream\u003c/code\u003e, \u003ccode\u003esetBinaryStream\u003c/code\u003e, \u003ccode\u003esetCharacterStream\u003c/code\u003e, and \u003ccode\u003esetUnicodeStream\u003c/code\u003e (which is deprecated, so applications should use \u003ccode\u003egetCharacterStream\u003c/code\u003e instead) take three parameters, so for them, the element in the array returned by \u003ccode\u003egetParams\u003c/code\u003e is also an array. What is different about these setter methods is that in addition to the information provided by parameters, the array contains one of the \u003ccode\u003eBaseRowSet\u003c/code\u003e constants indicating the type of stream being set. \u003c/p\u003e\n\u003cp\u003e NOTE: The method \u003ccode\u003egetParams\u003c/code\u003e is called internally by \u003ccode\u003eRowSet\u003c/code\u003e implementations extending this class; it is not normally called by an application programmer directly. \u003c/p\u003e\n\u003ch2\u003e5.0 Event Notification\u003c/h2\u003e The \n\u003ccode\u003eBaseRowSet\u003c/code\u003e class provides the event notification mechanism for rowsets. It contains the field \n\u003ccode\u003elisteners\u003c/code\u003e, methods for adding and removing listeners, and methods for notifying listeners of changes. \n\u003cp\u003e A listener is an object that has implemented the \u003ccode\u003eRowSetListener\u003c/code\u003e interface. If it has been added to a \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s list of listeners, it will be notified when an event occurs on that \u003ccode\u003eRowSet\u003c/code\u003e object. Each listener\u0027s implementation of the \u003ccode\u003eRowSetListener\u003c/code\u003e methods defines what that object will do when it is notified that an event has occurred. \u003c/p\u003e\n\u003cp\u003e There are three possible events for a \u003ccode\u003eRowSet\u003c/code\u003e object: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003ethe cursor moves \u003c/li\u003e\n \u003cli\u003ean individual row is changed (updated, deleted, or inserted) \u003c/li\u003e\n \u003cli\u003ethe contents of the entire \u003ccode\u003eRowSet\u003c/code\u003e object are changed \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eBaseRowSet\u003c/code\u003e method used for the notification indicates the type of event that has occurred. For example, the method \u003ccode\u003enotifyRowChanged\u003c/code\u003e indicates that a row has been updated, deleted, or inserted. Each of the notification methods creates a \u003ccode\u003eRowSetEvent\u003c/code\u003e object, which is supplied to the listener in order to identify the \u003ccode\u003eRowSet\u003c/code\u003e object on which the event occurred. What the listener does with this information, which may be nothing, depends on how it was implemented. \u003c/p\u003e\n\u003ch2\u003e6.0 Default Behavior\u003c/h2\u003e A default \n\u003ccode\u003eBaseRowSet\u003c/code\u003e object is initialized with many starting values. The following is true of a default \n\u003ccode\u003eRowSet\u003c/code\u003e instance that extends the \n\u003ccode\u003eBaseRowSet\u003c/code\u003e class: \n\u003cul\u003e \n \u003cli\u003eHas a scrollable cursor and does not show changes made by others. \u003c/li\u003e\n \u003cli\u003eIs updatable. \u003c/li\u003e\n \u003cli\u003eDoes not show rows that have been deleted. \u003c/li\u003e\n \u003cli\u003eHas no time limit for how long a driver may take to execute the \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command. \u003c/li\u003e\n \u003cli\u003eHas no limit for the number of rows it may contain. \u003c/li\u003e\n \u003cli\u003eHas no limit for the number of bytes a column may contain. NOTE: This limit applies only to columns that hold values of the following types: \u003ccode\u003eBINARY\u003c/code\u003e, \u003ccode\u003eVARBINARY\u003c/code\u003e, \u003ccode\u003eLONGVARBINARY\u003c/code\u003e, \u003ccode\u003eCHAR\u003c/code\u003e, \u003ccode\u003eVARCHAR\u003c/code\u003e, and \u003ccode\u003eLONGVARCHAR\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eWill not see uncommitted data (make \"dirty\" reads). \u003c/li\u003e\n \u003cli\u003eHas escape processing turned on. \u003c/li\u003e\n \u003cli\u003eHas its connection\u0027s type map set to \u003ccode\u003enull\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eHas an empty \u003ccode\u003eVector\u003c/code\u003e object for storing the values set for the placeholder parameters in the \u003ccode\u003eRowSet\u003c/code\u003e object\u0027s command. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e If other values are desired, an application must set the property values explicitly. For example, the following line of code sets the maximum number of rows for the \u003ccode\u003eCachedRowSet\u003c/code\u003e object \u003ci\u003ecrs\u003c/i\u003e to 500. \u003c/p\u003e\n\u003cpre\u003e    crs.setMaxRows(500);\n \u003c/pre\u003e Methods implemented in extensions of this \n\u003ccode\u003eBaseRowSet\u003c/code\u003e class \n\u003cb\u003emust\u003c/b\u003e throw an \n\u003ccode\u003eSQLException\u003c/code\u003e object for any violation of the defined assertions. Also, if the extending class overrides and reimplements any \n\u003ccode\u003eBaseRowSet\u003c/code\u003e method and encounters connectivity or underlying data source issues, that method \n\u003cb\u003emay\u003c/b\u003e in addition throw an \n\u003ccode\u003eSQLException\u003c/code\u003e object for that reason.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.sql.rowset.BaseRowSet\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}