{
  "packageName": "jdk.incubator.foreign",
  "simpleName": "VaList",
  "moduleName": "jdk.incubator.foreign",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "jdk.incubator.foreign.Addressable",
      "type": "Class"
    },
    {
      "name": "java.lang.AutoCloseable",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryLayout",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vargAsInt",
      "comment": "Reads the next value as an int and advances this va list\u0027s position.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the layout of the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the C \n\u003ccode\u003eva_list\u003c/code\u003e associated with this instance is no longer valid (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given memory layout is not compatible with \n\u003ccode\u003eint\u003c/code\u003e"
        ],
        "return": [
          "the value read as an \n\u003ccode\u003eint\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryLayout",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vargAsLong",
      "comment": "Reads the next value as a long and advances this va list\u0027s position.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the layout of the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the C \n\u003ccode\u003eva_list\u003c/code\u003e associated with this instance is no longer valid (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given memory layout is not compatible with \n\u003ccode\u003elong\u003c/code\u003e"
        ],
        "return": [
          "the value read as an \n\u003ccode\u003elong\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryLayout",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vargAsDouble",
      "comment": "Reads the next value as a double and advances this va list\u0027s position.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the layout of the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the C \n\u003ccode\u003eva_list\u003c/code\u003e associated with this instance is no longer valid (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given memory layout is not compatible with \n\u003ccode\u003edouble\u003c/code\u003e"
        ],
        "return": [
          "the value read as an \n\u003ccode\u003edouble\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemoryAddress",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryLayout",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vargAsAddress",
      "comment": "Reads the next value as a MemoryAddress and advances this va list\u0027s position.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the layout of the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the C \n\u003ccode\u003eva_list\u003c/code\u003e associated with this instance is no longer valid (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given memory layout is not compatible with \n\u003ccode\u003eMemoryAddress\u003c/code\u003e"
        ],
        "return": [
          "the value read as an \n\u003ccode\u003eMemoryAddress\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryLayout",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vargAsSegment",
      "comment": "Reads the next value as a MemorySegment, and advances this va list\u0027s position. The memory segment returned by this method will be allocated using MemorySegment.allocateNative(long, long), and will have to be closed separately.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the layout of the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the C \n\u003ccode\u003eva_list\u003c/code\u003e associated with this instance is no longer valid (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given memory layout is not compatible with \n\u003ccode\u003eMemorySegment\u003c/code\u003e"
        ],
        "return": [
          "the value read as an \n\u003ccode\u003eMemorySegment\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryLayout",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.NativeScope",
            "type": "Class"
          },
          "name": "scope",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vargAsSegment",
      "comment": "Reads the next value as a MemorySegment, and advances this va list\u0027s position. The memory segment returned by this method will be allocated using the given NativeScope.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the layout of the value",
          "\u003ccode\u003escope\u003c/code\u003e - the scope to allocate the segment in"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the C \n\u003ccode\u003eva_list\u003c/code\u003e associated with this instance is no longer valid (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given memory layout is not compatible with \n\u003ccode\u003eMemorySegment\u003c/code\u003e"
        ],
        "return": [
          "the value read as an \n\u003ccode\u003eMemorySegment\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryLayout",
            "type": "Class"
          },
          "name": "layouts",
          "varargs": true
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "skip",
      "comment": "Skips a number of elements with the given memory layouts, and advances this va list\u0027s position.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayouts\u003c/code\u003e - the layout of the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the C \n\u003ccode\u003eva_list\u003c/code\u003e associated with this instance is no longer valid (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e)."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isAlive",
      "comment": "A predicate used to check if the memory associated with the C va_list modelled by this instance is still valid to use.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true, if the memory associated with the C \n\u003ccode\u003eva_list\u003c/code\u003e modelled by this instance is still valid"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "close",
      "comment": "Releases the underlying C va_list modelled by this instance, and any native memory that is attached to this va list that holds its elements (see make(Consumer)). After calling this method, isAlive() will return false and further attempts to read values from this va list will result in an exception.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html#isAlive()\"\u003e\u003ccode\u003eisAlive()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker$VaList",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "copy",
      "comment": "Copies this C va_list at its current position. Copying is useful to traverse the va list\u0027s elements starting from the current position, without affecting the state of the original va list, essentially allowing the elements to be traversed multiple times. If this method needs to allocate native memory for the copy, it will use MemorySegment.allocateNative(long, long) to do so. close() will have to be called on the returned va list instance to release the allocated memory. This method only copies the va list cursor itself and not the memory that may be attached to the va list which holds its elements. That means that if this va list was created with the make(Consumer) method, closing this va list will also release the native memory that holds its elements, making the copy unusable.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the C \n\u003ccode\u003eva_list\u003c/code\u003e associated with this instance is no longer valid (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e)."
        ],
        "return": [
          "a copy of this C \n\u003ccode\u003eva_list\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker$VaList",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.NativeScope",
            "type": "Class"
          },
          "name": "scope",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "copy",
      "comment": "Copies this C va_list at its current position. Copying is useful to traverse the va list\u0027s elements starting from the current position, without affecting the state of the original va list, essentially allowing the elements to be traversed multiple times. If this method needs to allocate native memory for the copy, it will use the given NativeScope to do so. This method only copies the va list cursor itself and not the memory that may be attached to the va list which holds its elements. That means that if this va list was created with the make(Consumer) method, closing this va list will also release the native memory that holds its elements, making the copy unusable.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003escope\u003c/code\u003e - the scope to allocate the copy in"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the C \n\u003ccode\u003eva_list\u003c/code\u003e associated with this instance is no longer valid (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e)."
        ],
        "return": [
          "a copy of this C \n\u003ccode\u003eva_list\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemoryAddress",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "address",
      "comment": "Returns the memory address of the C va_list associated with this instance.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/Addressable.html#address()\"\u003eaddress\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/Addressable.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eAddressable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the memory address of the C \n\u003ccode\u003eva_list\u003c/code\u003e associated with this instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker$VaList",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryAddress",
            "type": "Class"
          },
          "name": "address",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "ofAddressRestricted",
      "comment": "Constructs a new VaList instance out of a memory address pointing to an existing C va_list. This method is restricted. Restricted method are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddress\u003c/code\u003e - a memory address pointing to an existing C \n\u003ccode\u003eva_list\u003c/code\u003e."
        ],
        "return": [
          "a new \n\u003ccode\u003eVaList\u003c/code\u003e instance backed by the C \n\u003ccode\u003eva_list\u003c/code\u003e at \n\u003ccode\u003eaddress\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker$VaList",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "jdk.incubator.foreign.CLinker$VaList$Builder",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "actions",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "make",
      "comment": "Constructs a new VaList using a builder (see CLinker.VaList.Builder). If this method needs to allocate native memory for the va list, it will use MemorySegment.allocateNative(long, long) to do so. This method will allocate native memory to hold the elements in the va list. This memory will be \u0027attached\u0027 to the returned va list instance, and will be released when close() is called. Note that when there are no elements added to the created va list, this method will return the same as empty().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eactions\u003c/code\u003e - a consumer for a builder (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.Builder.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eCLinker.VaList.Builder\u003c/code\u003e\u003c/a\u003e) which can be used to specify the elements of the underlying C \n\u003ccode\u003eva_list\u003c/code\u003e."
        ],
        "return": [
          "a new \n\u003ccode\u003eVaList\u003c/code\u003e instance backed by a fresh C \n\u003ccode\u003eva_list\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker$VaList",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "jdk.incubator.foreign.CLinker$VaList$Builder",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "actions",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.NativeScope",
            "type": "Class"
          },
          "name": "scope",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "make",
      "comment": "Constructs a new VaList using a builder (see CLinker.VaList.Builder). If this method needs to allocate native memory for the va list, it will use the given NativeScope to do so. This method will allocate native memory to hold the elements in the va list. This memory will be managed by the given NativeScope, and will be released when the scope is closed. Note that when there are no elements added to the created va list, this method will return the same as empty().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eactions\u003c/code\u003e - a consumer for a builder (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.Builder.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eCLinker.VaList.Builder\u003c/code\u003e\u003c/a\u003e) which can be used to specify the elements of the underlying C \n\u003ccode\u003eva_list\u003c/code\u003e.",
          "\u003ccode\u003escope\u003c/code\u003e - the scope to be used for the valist allocation."
        ],
        "return": [
          "a new \n\u003ccode\u003eVaList\u003c/code\u003e instance backed by a fresh C \n\u003ccode\u003eva_list\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker$VaList",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "empty",
      "comment": "Returns an empty C va_list constant. The returned VaList can not be closed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eVaList\u003c/code\u003e modelling an empty C \n\u003ccode\u003eva_list\u003c/code\u003e."
        ]
      }
    }
  ],
  "innerClasses": [
    "jdk.incubator.foreign.CLinker$VaList$Builder"
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "jdk.incubator.foreign.CLinker$VaList",
  "comment": "An interface that models a C \n\u003ccode\u003eva_list\u003c/code\u003e. \n\u003cp\u003e A va list is a stateful cursor used to iterate over a set of variadic arguments. \u003c/p\u003e\n\u003cp\u003e Per the C specification (see C standard 6.5.2.2 Function calls - item 6), arguments to variadic calls are erased by way of \u0027default argument promotions\u0027, which erases integral types by way of integer promotion (see C standard 6.3.1.1 - item 2), and which erases all \u003ccode\u003efloat\u003c/code\u003e arguments to \u003ccode\u003edouble\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e As such, this interface only supports reading \u003ccode\u003eint\u003c/code\u003e, \u003ccode\u003edouble\u003c/code\u003e, and any other type that fits into a \u003ccode\u003elong\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Unless otherwise specified, passing a \u003ccode\u003enull\u003c/code\u003e argument, or an array argument containing one or more \u003ccode\u003enull\u003c/code\u003e elements to a method in this class causes a \u003ca href\u003d\"../../../../java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown. \u003c/p\u003e",
  "tagMap": {
    "apiNote": [
      "In the future, if the Java language permits, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eCLinker.VaList\u003c/code\u003e\u003c/a\u003e may become a \n\u003ccode\u003esealed\u003c/code\u003e interface, which would prohibit subclassing except by explicitly permitted types."
    ]
  }
}