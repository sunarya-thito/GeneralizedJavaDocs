{
  "packageName": "jdk.incubator.foreign",
  "simpleName": "MemoryLayouts",
  "moduleName": "jdk.incubator.foreign",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BITS_8_LE",
      "comment": "A value layout constant with size of one byte, and byte order set to ByteOrder.LITTLE_ENDIAN.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BITS_16_LE",
      "comment": "A value layout constant with size of two bytes, and byte order set to ByteOrder.LITTLE_ENDIAN.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BITS_32_LE",
      "comment": "A value layout constant with size of four bytes, and byte order set to ByteOrder.LITTLE_ENDIAN.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BITS_64_LE",
      "comment": "A value layout constant with size of eight bytes, and byte order set to ByteOrder.LITTLE_ENDIAN.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BITS_8_BE",
      "comment": "A value layout constant with size of one byte, and byte order set to ByteOrder.BIG_ENDIAN.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BITS_16_BE",
      "comment": "A value layout constant with size of two bytes, and byte order set to ByteOrder.BIG_ENDIAN.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BITS_32_BE",
      "comment": "A value layout constant with size of four bytes, and byte order set to ByteOrder.BIG_ENDIAN.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BITS_64_BE",
      "comment": "A value layout constant with size of eight bytes, and byte order set to ByteOrder.BIG_ENDIAN.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.MemoryLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PAD_8",
      "comment": "A padding layout constant with size of one byte.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.MemoryLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PAD_16",
      "comment": "A padding layout constant with size of two bytes.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.MemoryLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PAD_32",
      "comment": "A padding layout constant with size of four bytes.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.MemoryLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PAD_64",
      "comment": "A padding layout constant with size of eight bytes.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ADDRESS",
      "comment": "A value layout constant whose size is the same as that of a machine address (e.g. size_t), and byte order set to ByteOrder.nativeOrder().",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JAVA_BYTE",
      "comment": "A value layout constant whose size is the same as that of a Java byte, and byte order set to ByteOrder.nativeOrder().",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JAVA_CHAR",
      "comment": "A value layout constant whose size is the same as that of a Java char, and byte order set to ByteOrder.nativeOrder().",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JAVA_SHORT",
      "comment": "A value layout constant whose size is the same as that of a Java short, and byte order set to ByteOrder.nativeOrder().",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JAVA_INT",
      "comment": "A value layout constant whose size is the same as that of a Java int, and byte order set to ByteOrder.nativeOrder().",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JAVA_LONG",
      "comment": "A value layout constant whose size is the same as that of a Java long, and byte order set to ByteOrder.nativeOrder(). The alignment of this layout (see MemoryLayout.byteAlignment() is platform-dependent, so that the following invariant holds: \n    MemoryLayouts.JAVA_LONG.byteAlignment() \u003d\u003d MemoryLayouts.ADDRESS.byteSize();",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JAVA_FLOAT",
      "comment": "A value layout constant whose size is the same as that of a Java float, and byte order set to ByteOrder.nativeOrder().",
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JAVA_DOUBLE",
      "comment": "A value layout constant whose size is the same as that of a Java double, and byte order set to ByteOrder.nativeOrder(). The alignment of this layout (see MemoryLayout.byteAlignment() is platform-dependent, so that the following invariant holds: \n    MemoryLayouts.JAVA_DOUBLE.byteAlignment() \u003d\u003d MemoryLayouts.ADDRESS.byteSize();",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.incubator.foreign.MemoryLayouts",
  "comment": "This class defines useful layout constants. Some of the constants defined in this class are explicit in both size and byte order (see \n\u003ca href\u003d\"#BITS_64_BE\"\u003e\u003ccode\u003eBITS_64_BE\u003c/code\u003e\u003c/a\u003e), and can therefore be used to explicitly and unambiguously specify the contents of a memory segment. Other constants make implicit byte order assumptions (see \n\u003ca href\u003d\"#JAVA_INT\"\u003e\u003ccode\u003eJAVA_INT\u003c/code\u003e\u003c/a\u003e); as such, these constants make it easy to work with other serialization-centric APIs, such as \n\u003ca href\u003d\"../../../../java.base/java/nio/ByteBuffer.html\" title\u003d\"class in java.nio\"\u003e\u003ccode\u003eByteBuffer\u003c/code\u003e\u003c/a\u003e.",
  "tagMap": {}
}