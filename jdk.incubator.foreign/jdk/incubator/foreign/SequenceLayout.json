{
  "packageName": "jdk.incubator.foreign",
  "simpleName": "SequenceLayout",
  "moduleName": "jdk.incubator.foreign",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemoryLayout",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "elementLayout",
      "comment": "Returns the element layout associated with this sequence layout.",
      "tagMap": {
        "return": [
          "The element layout associated with this sequence layout."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.OptionalLong",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "elementCount",
      "comment": "Returns the element count of this sequence layout (if any).",
      "tagMap": {
        "return": [
          "the element count of this sequence layout (if any)."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.SequenceLayout",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "elementCount"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withElementCount",
      "comment": "Obtains a new sequence layout with same element layout, alignment constraints and name as this sequence layout but with the new specified element count.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementCount\u003c/code\u003e - the new element count."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelementCount \u0026lt; 0\u003c/code\u003e."
        ],
        "return": [
          "a new sequence with given element count."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.SequenceLayout",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "elementCounts"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reshape",
      "comment": "Returns a new sequence layout where element layouts in the flattened projection of this sequence layout (see flatten()) are re-arranged into one or more nested sequence layouts according to the provided element counts. This transformation preserves the layout size; that is, multiplying the provided element counts must yield the same element count as the flattened projection of this sequence layout. For instance, given a sequence layout of the kind: \n    var seq \u003d MemoryLayout.ofSequence(4, MemoryLayout.ofSequence(3, MemoryLayouts.JAVA_INT));\n calling seq.reshape(2, 6) will yield the following sequence layout: \n    var reshapeSeq \u003d MemoryLayout.ofSequence(2, MemoryLayout.ofSequence(6, MemoryLayouts.JAVA_INT));\n If one of the provided element count is the special value -1, then the element count in that position will be inferred from the remaining element counts and the element count of the flattened projection of this layout. For instance, a layout equivalent to the above reshapeSeq can also be computed in the following ways: \n    var reshapeSeqImplicit1 \u003d seq.reshape(-1, 6);\n    var reshapeSeqImplicit2 \u003d seq.reshape(2, -1);",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementCounts\u003c/code\u003e - an array of element counts, of which at most one can be \n\u003ccode\u003e-1\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this sequence layout does not have an element count.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if two or more element counts are set to \n\u003ccode\u003e-1\u003c/code\u003e, or if one or more element count is \n\u003ccode\u003e\u0026lt;\u003d 0\u003c/code\u003e (but other than \n\u003ccode\u003e-1\u003c/code\u003e) or, if, after any required inference, multiplying the element counts does not yield the same element count as the flattened projection of this sequence layout."
        ],
        "return": [
          "a new sequence layout where element layouts in the flattened projection of this sequence layout (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/SequenceLayout.html#flatten()\"\u003e\u003ccode\u003eflatten()\u003c/code\u003e\u003c/a\u003e) are re-arranged into one or more nested sequence layouts."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.SequenceLayout",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "flatten",
      "comment": "Returns a new, flattened sequence layout whose element layout is the first non-sequence element layout found by recursively traversing the element layouts of this sequence layout. This transformation preserves the layout size; nested sequence layout in this sequence layout will be dropped and their element counts will be incorporated into that of the returned sequence layout. For instance, given a sequence layout of the kind: \n    var seq \u003d MemoryLayout.ofSequence(4, MemoryLayout.ofSequence(3, MemoryLayouts.JAVA_INT));\n calling seq.flatten() will yield the following sequence layout: \n    var flattenedSeq \u003d MemoryLayout.ofSequence(12, MemoryLayouts.JAVA_INT);",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this sequence layout, or one of the nested sequence layouts being flattened, does not have an element count."
        ],
        "return": [
          "a new sequence layout with the same size as this layout (but, possibly, with different element count), whose element layout is not a sequence layout."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Description copied from class: Object",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Description copied from class: Object",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is the same as the obj argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Description copied from class: Object",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.constant.DynamicConstantDesc",
            "parameters": [
              {
                "name": "jdk.incubator.foreign.SequenceLayout",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "describeConstable",
      "comment": "Description copied from interface: MemoryLayout",
      "tagMap": {
        "return": [
          "An \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e containing the resulting nominal descriptor, or an empty \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e if one cannot be constructed."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.SequenceLayout",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withName",
      "comment": "Creates a new layout which features the desired layout name. This is equivalent to the following code: \n    withAttribute(LAYOUT_NAME, name);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#name()\"\u003e\u003ccode\u003eMemoryLayout.name()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#withName(java.lang.String)\"\u003ewithName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the layout name."
        ],
        "return": [
          "a new layout which is the same as this layout, except for the \n\u003cem\u003ename\u003c/em\u003e associated to it."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.SequenceLayout",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "alignmentBits"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withBitAlignment",
      "comment": "Creates a new layout which features the desired alignment constraint.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#withBitAlignment(long)\"\u003ewithBitAlignment\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ealignmentBits\u003c/code\u003e - the layout alignment constraint, expressed in bits."
        ],
        "return": [
          "a new layout which is the same as this layout, except for the alignment constraint associated to it."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.SequenceLayout",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.constant.Constable",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withAttribute",
      "comment": "Returns a new memory layout which features the same attributes as this layout, plus the newly specified attribute. If this layout already contains an attribute with the same name, the existing attribute value is overwritten in the returned layout.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#withAttribute(java.lang.String,java.lang.constant.Constable)\"\u003ewithAttribute\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the attribute name.",
          "\u003ccode\u003evalue\u003c/code\u003e - the attribute value."
        ],
        "return": [
          "a new memory layout which features the same attributes as this layout, plus the newly specified attribute."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "name",
      "comment": "Description copied from interface: MemoryLayout",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#withName(java.lang.String)\"\u003e\u003ccode\u003eMemoryLayout.withName(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#name()\"\u003ename\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the layout \n\u003cem\u003ename\u003c/em\u003e (if any)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.constant.Constable",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "attribute",
      "comment": "Description copied from interface: MemoryLayout",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#attribute(java.lang.String)\"\u003eattribute\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the attribute name"
        ],
        "return": [
          "the attribute with the given name (if it exists)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "attributes",
      "comment": "Description copied from interface: MemoryLayout",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#attributes()\"\u003eattributes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a stream of the attribute names associated with this layout."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "bitAlignment",
      "comment": "Description copied from interface: MemoryLayout",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#bitAlignment()\"\u003ebitAlignment\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the layout alignment constraint, in bits."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasSize",
      "comment": "Description copied from interface: MemoryLayout",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#hasSize()\"\u003ehasSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e, if this layout has a specified size."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "bitSize",
      "comment": "Description copied from interface: MemoryLayout",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#bitSize()\"\u003ebitSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the layout size, in bits."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPadding",
      "comment": "Description copied from interface: MemoryLayout",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html#isPadding()\"\u003eisPadding\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryLayout.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eMemoryLayout\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true, if this layout is a padding layout."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.incubator.foreign.SequenceLayout",
  "comment": "A sequence layout. A sequence layout is used to denote a repetition of a given layout, also called the sequence layout\u0027s \n\u003cem\u003eelement layout\u003c/em\u003e. The repetition count, where it exists (e.g. for \n\u003cem\u003efinite\u003c/em\u003e sequence layouts) is said to be the the sequence layout\u0027s \n\u003cem\u003eelement count\u003c/em\u003e. A finite sequence layout can be thought of as a group layout where the sequence layout\u0027s element layout is repeated a number of times that is equal to the sequence layout\u0027s element count. In other words this layout: \n\u003cpre\u003e\u003ccode\u003e\nMemoryLayout.ofSequence(3, MemoryLayout.ofValueBits(32, ByteOrder.BIG_ENDIAN));\n \u003c/code\u003e\u003c/pre\u003e is equivalent to the following layout: \n\u003cpre\u003e\u003ccode\u003e\nMemoryLayout.ofStruct(\n    MemoryLayout.ofValueBits(32, ByteOrder.BIG_ENDIAN),\n    MemoryLayout.ofValueBits(32, ByteOrder.BIG_ENDIAN),\n    MemoryLayout.ofValueBits(32, ByteOrder.BIG_ENDIAN));\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e This is a \u003ca href\u003d\"../../../../java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e class; programmers should treat instances that are \u003ca href\u003d\"#equals(java.lang.Object)\"\u003eequal\u003c/a\u003e as interchangeable and should not use instances for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail. The \u003ccode\u003eequals\u003c/code\u003e method should be used for comparisons. \u003c/p\u003e\n\u003cp\u003e Unless otherwise specified, passing a \u003ccode\u003enull\u003c/code\u003e argument, or an array argument containing one or more \u003ccode\u003enull\u003c/code\u003e elements to a method in this class causes a \u003ca href\u003d\"../../../../java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown. \u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "This class is immutable and thread-safe."
    ]
  }
}