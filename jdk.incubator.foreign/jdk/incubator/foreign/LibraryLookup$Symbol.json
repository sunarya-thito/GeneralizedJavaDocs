{
  "packageName": "jdk.incubator.foreign",
  "simpleName": "Symbol",
  "moduleName": "jdk.incubator.foreign",
  "type": "INTERFACE",
  "superClass": {
    "name": "jdk.incubator.foreign.Addressable",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "name",
      "comment": "The name of this lookup symbol.",
      "tagMap": {
        "return": [
          "the name of this lookup symbol."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemoryAddress",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "address",
      "comment": "The memory address of this lookup symbol. If the memory associated with this symbol needs to be dereferenced, clients can obtain a segment from this symbol\u0027s address using the MemoryAddress.asSegmentRestricted(long, Runnable, Object), and making sure that the created segment maintains a strong reference to this symbol, to prevent library unloading.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/Addressable.html#address()\"\u003eaddress\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/Addressable.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003eAddressable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the memory address of this lookup symbol."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "jdk.incubator.foreign.LibraryLookup$Symbol",
  "comment": "A symbol retrieved during a library lookup. A lookup symbol has a \n\u003cem\u003ename\u003c/em\u003e and can be projected into a memory address (see \n\u003ca href\u003d\"#name()\"\u003e\u003ccode\u003ename()\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"#address()\"\u003e\u003ccode\u003eaddress()\u003c/code\u003e\u003c/a\u003e, respectively).",
  "tagMap": {
    "implSpec": [
      "Implementations of this interface are immutable, thread-safe and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e."
    ],
    "apiNote": [
      "In the future, if the Java language permits, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/LibraryLookup.Symbol.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eLibraryLookup.Symbol\u003c/code\u003e\u003c/a\u003e may become a \n\u003ccode\u003esealed\u003c/code\u003e interface, which would prohibit subclassing except by explicitly permitted types."
    ]
  }
}