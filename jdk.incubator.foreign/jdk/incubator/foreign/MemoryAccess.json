{
  "packageName": "jdk.incubator.foreign",
  "simpleName": "MemoryAccess",
  "moduleName": "jdk.incubator.foreign",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getByteAtOffset",
      "comment": "Reads a byte from given segment and offset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e."
        ],
        "return": [
          "a byte value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setByteAtOffset",
      "comment": "Writes a byte at given segment and offset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the byte value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCharAtOffset",
      "comment": "Reads a char from given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    getCharAtOffset(segment, offset, ByteOrder.nativeOrder());",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e."
        ],
        "return": [
          "a char value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setCharAtOffset",
      "comment": "Writes a char at given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setCharAtOffset(segment, offset, ByteOrder.nativeOrder(), value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the char value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getShortAtOffset",
      "comment": "Reads a short from given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    getShortAtOffset(segment, offset, ByteOrder.nativeOrder());",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e."
        ],
        "return": [
          "a short value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setShortAtOffset",
      "comment": "Writes a short at given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setShortAtOffset(segment, offset, ByteOrder.nativeOrder(), value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the short value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getIntAtOffset",
      "comment": "Reads an int from given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    getIntAtOffset(segment, offset, ByteOrder.nativeOrder());",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e."
        ],
        "return": [
          "an int value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setIntAtOffset",
      "comment": "Writes an int at given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setIntAtOffset(segment, offset, ByteOrder.nativeOrder(), value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the int value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFloatAtOffset",
      "comment": "Reads a float from given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    getFloatAtOffset(segment, offset, ByteOrder.nativeOrder());",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e."
        ],
        "return": [
          "a float value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setFloatAtOffset",
      "comment": "Writes a float at given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setFloatAtOffset(segment, offset, ByteOrder.nativeOrder(), value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the float value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLongAtOffset",
      "comment": "Reads a long from given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    getLongAtOffset(segment, offset, ByteOrder.nativeOrder());",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e."
        ],
        "return": [
          "a long value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setLongAtOffset",
      "comment": "Writes a long at given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setLongAtOffset(segment, offset, ByteOrder.nativeOrder(), value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the long value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDoubleAtOffset",
      "comment": "Reads a double from given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    getDoubleAtOffset(segment, offset, ByteOrder.nativeOrder());",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e."
        ],
        "return": [
          "a double value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDoubleAtOffset",
      "comment": "Writes a double at given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setDoubleAtOffset(segment, offset, ByteOrder.nativeOrder(), value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the double value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemoryAddress",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAddressAtOffset",
      "comment": "Reads a memory address from given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent (e.g. on a 64-bit platform) to the following code: \n    VarHandle handle \u003d MemoryHandles.asAddressHandle(MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder()));\n    MemoryAddress value \u003d (MemoryAddress)handle.get(segment, offset);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e."
        ],
        "return": [
          "a memory address read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.foreign.Addressable",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setAddressAtOffset",
      "comment": "Writes a memory address at given segment and offset, with byte order set to ByteOrder.nativeOrder(). This is equivalent (e.g. on a 64-bit platform) to the following code: \n    VarHandle handle \u003d MemoryHandles.asAddressHandle(MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder()));\n    handle.set(segment, offset, value.address());",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the memory address to be written (expressed as an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/Addressable.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eAddressable\u003c/code\u003e\u003c/a\u003e instance)."
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCharAtOffset",
      "comment": "Reads a char from given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(char.class, 1, order);\n    char value \u003d (char)handle.get(segment, offset);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a char value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setCharAtOffset",
      "comment": "Writes a char at given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(char.class, 1, order);\n    handle.set(segment, offset, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the char value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getShortAtOffset",
      "comment": "Reads a short from given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(short.class, 1, order);\n    short value \u003d (short)handle.get(segment, offset);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a short value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setShortAtOffset",
      "comment": "Writes a short at given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(short.class, 1, order);\n    handle.set(segment, offset, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the short value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getIntAtOffset",
      "comment": "Reads an int from given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(int.class, 1, order);\n    int value \u003d (int)handle.get(segment, offset);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "an int value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setIntAtOffset",
      "comment": "Writes an int at given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(int.class, 1, order);\n    handle.set(segment, offset, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the int value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFloatAtOffset",
      "comment": "Reads a float from given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(float.class, 1, order);\n    float value \u003d (float)handle.get(segment, offset);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a float value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setFloatAtOffset",
      "comment": "Writes a float at given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(float.class, 1, order);\n    handle.set(segment, offset, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the float value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLongAtOffset",
      "comment": "Reads a long from given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(long.class, 1, order);\n    long value \u003d (long)handle.get(segment, offset);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a long value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setLongAtOffset",
      "comment": "Writes a long at given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(long.class, 1, order);\n    handle.set(segment, offset, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the long value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDoubleAtOffset",
      "comment": "Reads a double from given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(double.class, 1, order);\n    double value \u003d (double)handle.get(segment, offset);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a double value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDoubleAtOffset",
      "comment": "Writes a double at given segment and offset with given byte order. This is equivalent to the following code: \n    VarHandle handle \u003d MemoryHandles.varHandle(double.class, 1, order);\n    handle.set(segment, offset, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset in bytes (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(offset)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the double value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getByte",
      "comment": "Reads a byte from given segment. This is equivalent to the following code: \n    byte value \u003d getByteAtOffset(segment, 0L);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced."
        ],
        "return": [
          "a byte value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setByte",
      "comment": "Writes a byte at given segment. This is equivalent to the following code: \n    setByteAtOffset(segment, 0L, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003evalue\u003c/code\u003e - the byte value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getChar",
      "comment": "Reads a char from given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    char value \u003d getCharAtOffset(segment, 0L);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced."
        ],
        "return": [
          "a char value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setChar",
      "comment": "Writes a char at given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setCharAtOffset(segment, 0L, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003evalue\u003c/code\u003e - the char value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getShort",
      "comment": "Reads a short from given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    short value \u003d getShortAtOffset(segment, 0L);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced."
        ],
        "return": [
          "a short value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setShort",
      "comment": "Writes a short at given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setShortAtOffset(segment, 0L, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003evalue\u003c/code\u003e - the short value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInt",
      "comment": "Reads an int from given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    int value \u003d getIntAtOffset(segment, 0L);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced."
        ],
        "return": [
          "an int value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setInt",
      "comment": "Writes an int at given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setIntAtOffset(segment, 0L, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003evalue\u003c/code\u003e - the int value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFloat",
      "comment": "Reads a float from given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    float value \u003d getFloatAtOffset(segment, 0L);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced."
        ],
        "return": [
          "a float value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setFloat",
      "comment": "Writes a float at given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setFloatAtOffset(segment, 0L, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003evalue\u003c/code\u003e - the float value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLong",
      "comment": "Reads a long from given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    long value \u003d getLongAtOffset(segment, 0L);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced."
        ],
        "return": [
          "a long value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setLong",
      "comment": "Writes a long at given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setLongAtOffset(segment, 0L, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003evalue\u003c/code\u003e - the long value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDouble",
      "comment": "Reads a double from given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    double value \u003d getDoubleAtOffset(segment, 0L);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced."
        ],
        "return": [
          "a double value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDouble",
      "comment": "Writes a double at given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setDoubleAtOffset(segment, 0L, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003evalue\u003c/code\u003e - the double value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemoryAddress",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAddress",
      "comment": "Reads a memory address from given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    MemoryAddress value \u003d getAddressAtOffset(segment, 0L);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced."
        ],
        "return": [
          "a memory address read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.foreign.Addressable",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setAddress",
      "comment": "Writes a memory address at given segment, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setAddressAtOffset(segment, 0L, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003evalue\u003c/code\u003e - the memory address to be written (expressed as an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/Addressable.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eAddressable\u003c/code\u003e\u003c/a\u003e instance)."
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getChar",
      "comment": "Reads a char from given segment, with given byte order. This is equivalent to the following code: \n    char value \u003d getCharAtOffset(segment, 0L, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a char value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setChar",
      "comment": "Writes a char at given segment, with given byte order. This is equivalent to the following code: \n    setCharAtOffset(segment, 0L, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the char value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getShort",
      "comment": "Reads a short from given segment, with given byte order. This is equivalent to the following code: \n    short value \u003d getShortAtOffset(segment, 0L, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a short value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setShort",
      "comment": "Writes a short at given segment, with given byte order. This is equivalent to the following code: \n    setShortAtOffset(segment, 0L, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the short value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInt",
      "comment": "Reads an int from given segment, with given byte order. This is equivalent to the following code: \n    int value \u003d getIntAtOffset(segment, 0L, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "an int value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setInt",
      "comment": "Writes an int at given segment, with given byte order. This is equivalent to the following code: \n    setIntAtOffset(segment, 0L, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the int value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFloat",
      "comment": "Reads a float from given segment, with given byte order. This is equivalent to the following code: \n    float value \u003d getFloatAtOffset(segment, 0L, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a float value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setFloat",
      "comment": "Writes a float at given segment, with given byte order. This is equivalent to the following code: \n    setFloatAtOffset(segment, 0L, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the float value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLong",
      "comment": "Reads a long from given segment, with given byte order. This is equivalent to the following code: \n    long value \u003d getLongAtOffset(segment, 0L, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a long value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setLong",
      "comment": "Writes a long at given segment, with given byte order. This is equivalent to the following code: \n    setLongAtOffset(segment, 0L, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the long value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDouble",
      "comment": "Reads a double from given segment, with given byte order. This is equivalent to the following code: \n    double value \u003d getDoubleAtOffset(segment, 0L, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a double value read from \n\u003ccode\u003esegment\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDouble",
      "comment": "Writes a double at given segment, with given byte order. This is equivalent to the following code: \n    setDoubleAtOffset(segment, 0L, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the double value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCharAtIndex",
      "comment": "Reads a char from given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    char value \u003d getCharAtOffset(segment, 2 * index);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 2)\u003c/code\u003e."
        ],
        "return": [
          "a char value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setCharAtIndex",
      "comment": "Writes a char at given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setCharAtOffset(segment, 2 * index, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 2)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the char value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getShortAtIndex",
      "comment": "Reads a short from given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    short value \u003d getShortAtOffset(segment, 2 * index);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 2)\u003c/code\u003e."
        ],
        "return": [
          "a short value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setShortAtIndex",
      "comment": "Writes a short at given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setShortAtOffset(segment, 2 * index, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 2)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the short value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getIntAtIndex",
      "comment": "Reads an int from given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    int value \u003d getIntAtOffset(segment, 4 * index);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 4)\u003c/code\u003e."
        ],
        "return": [
          "an int value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setIntAtIndex",
      "comment": "Writes an int at given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setIntAtOffset(segment, 4 * index, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 4)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the int value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFloatAtIndex",
      "comment": "Reads a float from given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    float value \u003d getFloatAtOffset(segment, 4 * index);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 4)\u003c/code\u003e."
        ],
        "return": [
          "a float value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setFloatAtIndex",
      "comment": "Writes a float at given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setFloatAtOffset(segment, 4 * index, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 4)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the float value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLongAtIndex",
      "comment": "Reads a long from given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    return getLongAtOffset(segment, 8 * index);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 8)\u003c/code\u003e."
        ],
        "return": [
          "a long value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setLongAtIndex",
      "comment": "Writes a long at given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setLongAtOffset(segment, 8 * index, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 8)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the long value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDoubleAtIndex",
      "comment": "Reads a double from given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    return getDoubleAtOffset(segment, 8 * index);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 8)\u003c/code\u003e."
        ],
        "return": [
          "a double value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDoubleAtIndex",
      "comment": "Writes a double at given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setDoubleAtOffset(segment, 8 * index, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 8)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the double value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemoryAddress",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAddressAtIndex",
      "comment": "Reads a memory address from given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    return getAddressAtOffset(segment, index * MemoryLayouts.ADDRESS.byteSize());",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 8)\u003c/code\u003e."
        ],
        "return": [
          "a memory address read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "jdk.incubator.foreign.Addressable",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setAddressAtIndex",
      "comment": "Writes a memory address at given segment and element index, with byte order set to ByteOrder.nativeOrder(). This is equivalent to the following code: \n    setAddressAtOffset(segment, index * MemoryLayouts.ADDRESS.byteSize(), value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 8)\u003c/code\u003e.",
          "\u003ccode\u003evalue\u003c/code\u003e - the memory address to be written (expressed as an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/Addressable.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eAddressable\u003c/code\u003e\u003c/a\u003e instance)."
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCharAtIndex",
      "comment": "Reads a char from given segment and element index, with given byte order. This is equivalent to the following code: \n    char value \u003d getCharAtOffset(segment, 2 * index, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 2)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a char value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setCharAtIndex",
      "comment": "Writes a char at given segment and element index, with given byte order. This is equivalent to the following code: \n    setCharAtOffset(segment, 2 * index, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 2)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the char value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getShortAtIndex",
      "comment": "Reads a short from given segment and element index, with given byte order. This is equivalent to the following code: \n    short value \u003d getShortAtOffset(segment, 2 * index, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 2)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a short value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setShortAtIndex",
      "comment": "Writes a short at given segment and element index, with given byte order. This is equivalent to the following code: \n    setShortAtOffset(segment, 2 * index, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 2)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the short value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getIntAtIndex",
      "comment": "Reads an int from given segment and element index, with given byte order. This is equivalent to the following code: \n    int value \u003d getIntAtOffset(segment, 4 * index, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 4)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "an int value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setIntAtIndex",
      "comment": "Writes an int at given segment and element index, with given byte order. This is equivalent to the following code: \n    setIntAtOffset(segment, 4 * index, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 4)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the int value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFloatAtIndex",
      "comment": "Reads a float from given segment and element index, with given byte order. This is equivalent to the following code: \n    float value \u003d getFloatAtOffset(segment, 4 * index, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 4)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a float value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setFloatAtIndex",
      "comment": "Writes a float at given segment and element index, with given byte order. This is equivalent to the following code: \n    setFloatAtOffset(segment, 4 * index, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 4)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the float value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLongAtIndex",
      "comment": "Reads a long from given segment and element index, with given byte order. This is equivalent to the following code: \n    return getLongAtOffset(segment, 8 * index, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 8)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a long value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setLongAtIndex",
      "comment": "Writes a long at given segment and element index, with given byte order. This is equivalent to the following code: \n    setLongAtOffset(segment, 8 * index, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 8)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the long value to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDoubleAtIndex",
      "comment": "Reads a double from given segment and element index, with given byte order. This is equivalent to the following code: \n    return getDoubleAtOffset(segment, 8 * index, order);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 8)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order."
        ],
        "return": [
          "a double value read from \n\u003ccode\u003esegment\u003c/code\u003e at the element index specified by \n\u003ccode\u003eindex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "field": {
            "name": "segment"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "order"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDoubleAtIndex",
      "comment": "Writes a double at given segment and element index, with given byte order. This is equivalent to the following code: \n    setDoubleAtOffset(segment, 8 * index, order, value);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esegment\u003c/code\u003e - the segment to be dereferenced.",
          "\u003ccode\u003eindex\u003c/code\u003e - element index (relative to \n\u003ccode\u003esegment\u003c/code\u003e). The final address of this read operation can be expressed as \n\u003ccode\u003esegment.address().addOffset(index * 8)\u003c/code\u003e.",
          "\u003ccode\u003eorder\u003c/code\u003e - the specified byte order.",
          "\u003ccode\u003evalue\u003c/code\u003e - the double value to be written."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "jdk.incubator.foreign.MemoryAccess",
  "comment": "This class defines ready-made static accessors which can be used to dereference memory segments in many ways. \n\u003cp\u003e The most primitive accessors (see \u003ca href\u003d\"#getIntAtOffset(jdk.incubator.foreign.MemorySegment,long,java.nio.ByteOrder)\"\u003e\u003ccode\u003egetIntAtOffset(MemorySegment, long, ByteOrder)\u003c/code\u003e\u003c/a\u003e) take a segment, an offset (expressed in bytes) and a byte order. The final address at which the dereference will occur will be computed by offsetting the base address by the specified offset, as if by calling \u003ca href\u003d\"MemoryAddress.html#addOffset(long)\"\u003e\u003ccode\u003eMemoryAddress.addOffset(long)\u003c/code\u003e\u003c/a\u003e on the specified base address. \u003c/p\u003e\n\u003cp\u003e In cases where no offset is required, overloads are provided (see \u003ca href\u003d\"#getInt(jdk.incubator.foreign.MemorySegment,java.nio.ByteOrder)\"\u003e\u003ccode\u003egetInt(MemorySegment, ByteOrder)\u003c/code\u003e\u003c/a\u003e) so that clients can omit the offset coordinate. \u003c/p\u003e\n\u003cp\u003e To help dereferencing in array-like use cases (e.g. where the layout of a given memory segment is a sequence layout of given size an element count), higher-level overloads are also provided (see \u003ca href\u003d\"#getIntAtIndex(jdk.incubator.foreign.MemorySegment,long,java.nio.ByteOrder)\"\u003e\u003ccode\u003egetIntAtIndex(MemorySegment, long, ByteOrder)\u003c/code\u003e\u003c/a\u003e), which take a segment and a \u003cem\u003elogical\u003c/em\u003e element index. The formula to obtain the byte offset \u003ccode\u003eO\u003c/code\u003e from an index \u003ccode\u003eI\u003c/code\u003e is given by \u003ccode\u003eO \u003d I * S\u003c/code\u003e where \u003ccode\u003eS\u003c/code\u003e is the size (expressed in bytes) of the element to be dereferenced. \u003c/p\u003e\n\u003cp\u003e In cases where native byte order is preferred, overloads are provided (see \u003ca href\u003d\"#getIntAtOffset(jdk.incubator.foreign.MemorySegment,long)\"\u003e\u003ccode\u003egetIntAtOffset(MemorySegment, long)\u003c/code\u003e\u003c/a\u003e) so that clients can omit the byte order parameter. \u003c/p\u003e\n\u003cp\u003e Unless otherwise specified, passing a \u003ccode\u003enull\u003c/code\u003e argument, or an array argument containing one or more \u003ccode\u003enull\u003c/code\u003e elements to a method in this class causes a \u003ca href\u003d\"../../../../java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown. \u003c/p\u003e",
  "tagMap": {}
}