{
  "packageName": "jdk.incubator.foreign",
  "simpleName": "CLinker",
  "moduleName": "jdk.incubator.foreign",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_CHAR",
      "comment": "The layout for the char C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_SHORT",
      "comment": "The layout for the short C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_INT",
      "comment": "The layout for the int C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_LONG",
      "comment": "The layout for the long C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_LONG_LONG",
      "comment": "The layout for the long long C type.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_FLOAT",
      "comment": "The layout for the float C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_DOUBLE",
      "comment": "The layout for the double C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_POINTER",
      "comment": "The T* native type.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.MemoryLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_VA_LIST",
      "comment": "The layout for the va_list C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "getInstance",
      "comment": "Returns the C linker for the current platform. This method is restricted. Restricted method are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the runtime property \n\u003ccode\u003eforeign.restricted\u003c/code\u003e is not set to either \n\u003ccode\u003epermit\u003c/code\u003e, \n\u003ccode\u003ewarn\u003c/code\u003e or \n\u003ccode\u003edebug\u003c/code\u003e (the default value is set to \n\u003ccode\u003edeny\u003c/code\u003e)."
        ],
        "return": [
          "a linker for this system."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.Addressable",
            "type": "Class"
          },
          "name": "symbol",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodType",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.FunctionDescriptor",
            "type": "Class"
          },
          "name": "function",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "downcallHandle",
      "comment": "Obtain a foreign method handle, with given type, which can be used to call a target foreign function at a given address and featuring a given function descriptor.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/LibraryLookup.html#lookup(java.lang.String)\"\u003e\u003ccode\u003eLibraryLookup.lookup(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esymbol\u003c/code\u003e - downcall symbol.",
          "\u003ccode\u003etype\u003c/code\u003e - the method type.",
          "\u003ccode\u003efunction\u003c/code\u003e - the function descriptor."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - in the case of a method type and function descriptor mismatch."
        ],
        "return": [
          "the downcall method handle."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandle",
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.FunctionDescriptor",
            "type": "Class"
          },
          "name": "function",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "upcallStub",
      "comment": "Allocates a native segment whose base address (see MemorySegment.address()) can be passed to other foreign functions (as a function pointer); calling such a function pointer from native code will result in the execution of the provided method handle. The returned segment is shared, and it only features the MemorySegment.CLOSE access mode. When the returned segment is closed, the corresponding native stub will be deallocated.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the target method handle.",
          "\u003ccode\u003efunction\u003c/code\u003e - the function descriptor."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the target\u0027s method type and the function descriptor mismatch."
        ],
        "return": [
          "the native stub segment."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "jdk.incubator.foreign.MemoryLayout",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "asVarArg",
      "comment": "Returns a memory layout that is suitable to use as the layout for variadic arguments in a specialized function descriptor.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the memory layout type"
        ],
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the layout the adapt"
        ],
        "return": [
          "a potentially newly created layout with the right attributes"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toCString",
      "comment": "Converts a Java string into a null-terminated C string, using the platform\u0027s default charset, storing the result into a new native memory segment. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement byte array. The CharsetEncoder class should be used when more control over the encoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the Java string to be converted into a C string."
        ],
        "return": [
          "a new native memory segment containing the converted C string."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "charset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toCString",
      "comment": "Converts a Java string into a null-terminated C string, using the given charset, storing the result into a new native memory segment. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement byte array. The CharsetEncoder class should be used when more control over the encoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the Java string to be converted into a C string.",
          "\u003ccode\u003echarset\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharset\u003c/code\u003e\u003c/a\u003e to be used to compute the contents of the C string."
        ],
        "return": [
          "a new native memory segment containing the converted C string."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.NativeScope",
            "type": "Class"
          },
          "name": "scope",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toCString",
      "comment": "Converts a Java string into a null-terminated C string, using the platform\u0027s default charset, storing the result into a native memory segment allocated using the provided scope. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement byte array. The CharsetEncoder class should be used when more control over the encoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the Java string to be converted into a C string.",
          "\u003ccode\u003escope\u003c/code\u003e - the scope to be used for the native segment allocation."
        ],
        "return": [
          "a new native memory segment containing the converted C string."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "charset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.NativeScope",
            "type": "Class"
          },
          "name": "scope",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toCString",
      "comment": "Converts a Java string into a null-terminated C string, using the given charset, storing the result into a new native memory segment native memory segment allocated using the provided scope. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement byte array. The CharsetEncoder class should be used when more control over the encoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the Java string to be converted into a C string.",
          "\u003ccode\u003echarset\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharset\u003c/code\u003e\u003c/a\u003e to be used to compute the contents of the C string.",
          "\u003ccode\u003escope\u003c/code\u003e - the scope to be used for the native segment allocation."
        ],
        "return": [
          "a new native memory segment containing the converted C string."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryAddress",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toJavaStringRestricted",
      "comment": "Converts a null-terminated C string stored at given address into a Java string, using the platform\u0027s default charset. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required. This method is restricted. Restricted method are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - the address at which the string is stored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the largest string supported by the platform."
        ],
        "return": [
          "a Java string with the contents of the null-terminated C string at given address."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryAddress",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "charset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toJavaStringRestricted",
      "comment": "Converts a null-terminated C string stored at given address into a Java string, using the given charset. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required. This method is restricted. Restricted method are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - the address at which the string is stored.",
          "\u003ccode\u003echarset\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharset\u003c/code\u003e\u003c/a\u003e to be used to compute the contents of the Java string."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the largest string supported by the platform."
        ],
        "return": [
          "a Java string with the contents of the null-terminated C string at given address."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toJavaString",
      "comment": "Converts a null-terminated C string stored at given address into a Java string, using the platform\u0027s default charset. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - the address at which the string is stored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the largest string supported by the platform.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the size of the segment associated with \n\u003ccode\u003eaddr\u003c/code\u003e, or if \n\u003ccode\u003eaddr\u003c/code\u003e is associated with a segment that is \n\u003cem\u003enot alive\u003c/em\u003e."
        ],
        "return": [
          "a Java string with the contents of the null-terminated C string at given address."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "charset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toJavaString",
      "comment": "Converts a null-terminated C string stored at given address into a Java string, using the given charset. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - the address at which the string is stored.",
          "\u003ccode\u003echarset\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharset\u003c/code\u003e\u003c/a\u003e to be used to compute the contents of the Java string."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the largest string supported by the platform.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the size of the segment associated with \n\u003ccode\u003eaddr\u003c/code\u003e, or if \n\u003ccode\u003eaddr\u003c/code\u003e is associated with a segment that is \n\u003cem\u003enot alive\u003c/em\u003e."
        ],
        "return": [
          "a Java string with the contents of the null-terminated C string at given address."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemoryAddress",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "size",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "allocateMemoryRestricted",
      "comment": "Allocates memory of given size using malloc. This method is restricted. Restricted method are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esize\u003c/code\u003e - memory size to be allocated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/OutOfMemoryError.html\" title\u003d\"class in java.lang\"\u003eOutOfMemoryError\u003c/a\u003e\u003c/code\u003e - if malloc could not allocate the required amount of native memory."
        ],
        "return": [
          "addr memory address of the allocated memory"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryAddress",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "freeMemoryRestricted",
      "comment": "Frees the memory pointed by the given memory address. This method is restricted. Restricted method are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - memory address of the native memory to be freed"
        ]
      }
    }
  ],
  "innerClasses": [
    "jdk.incubator.foreign.CLinker$TypeKind",
    "jdk.incubator.foreign.CLinker$VaList"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.incubator.foreign.CLinker",
  "comment": "A C linker implements the C Application Binary Interface (ABI) calling conventions. Instances of this interface can be used to link foreign functions in native libraries that follow the JVM\u0027s target platform C ABI. \n\u003cp\u003e Linking a foreign function is a process which requires two components: a method type, and a function descriptor. The method type, consists of a set of \u003cem\u003ecarrier\u003c/em\u003e types, which, together, specify the Java signature which clients must adhere to when calling the underlying foreign function. The function descriptor contains a set of memory layouts which, together, specify the foreign function signature and classification information (via a custom layout attributes, see \u003ca href\u003d\"CLinker.TypeKind.html\" title\u003d\"enum class in jdk.incubator.foreign\"\u003e\u003ccode\u003eCLinker.TypeKind\u003c/code\u003e\u003c/a\u003e), so that linking can take place. \u003c/p\u003e\n\u003cp\u003e Clients of this API can build function descriptors using the predefined memory layout constants (based on a subset of the built-in types provided by the C language), found in this interface; alternatively, they can also decorate existing value layouts using the required \u003ca href\u003d\"CLinker.TypeKind.html\" title\u003d\"enum class in jdk.incubator.foreign\"\u003e\u003ccode\u003eCLinker.TypeKind\u003c/code\u003e\u003c/a\u003e classification attribute (this can be done using the \u003ca href\u003d\"MemoryLayout.html#withAttribute(java.lang.String,java.lang.constant.Constable)\"\u003e\u003ccode\u003eMemoryLayout.withAttribute(String, Constable)\u003c/code\u003e\u003c/a\u003e method). A failure to do so might result in linkage errors, given that linking requires additional classification information to determine, for instance, how arguments should be loaded into registers during a foreign function call. \u003c/p\u003e\n\u003cp\u003e Implementations of this interface support the following primitive carrier types: \u003ccode\u003ebyte\u003c/code\u003e, \u003ccode\u003eshort\u003c/code\u003e, \u003ccode\u003echar\u003c/code\u003e, \u003ccode\u003eint\u003c/code\u003e, \u003ccode\u003elong\u003c/code\u003e, \u003ccode\u003efloat\u003c/code\u003e, and \u003ccode\u003edouble\u003c/code\u003e, as well as \u003ca href\u003d\"MemoryAddress.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eMemoryAddress\u003c/code\u003e\u003c/a\u003e for passing pointers, and \u003ca href\u003d\"MemorySegment.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eMemorySegment\u003c/code\u003e\u003c/a\u003e for passing structs and unions. Finally, the \u003ca href\u003d\"CLinker.VaList.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eCLinker.VaList\u003c/code\u003e\u003c/a\u003e carrier type can be used to match the native \u003ccode\u003eva_list\u003c/code\u003e type. \u003c/p\u003e\n\u003cp\u003e For the linking process to be successful, some requirements must be satisfied; if \u003ccode\u003eM\u003c/code\u003e and \u003ccode\u003eF\u003c/code\u003e are the method type and the function descriptor, respectively, used during the linking process, then it must be that: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe arity of \u003ccode\u003eM\u003c/code\u003e is the same as that of \u003ccode\u003eF\u003c/code\u003e;\u003c/li\u003e \n \u003cli\u003eIf the return type of \u003ccode\u003eM\u003c/code\u003e is \u003ccode\u003evoid\u003c/code\u003e, then \u003ccode\u003eF\u003c/code\u003e should have no return layout (see \u003ca href\u003d\"FunctionDescriptor.html#ofVoid(jdk.incubator.foreign.MemoryLayout...)\"\u003e\u003ccode\u003eFunctionDescriptor.ofVoid(MemoryLayout...)\u003c/code\u003e\u003c/a\u003e);\u003c/li\u003e \n \u003cli\u003efor each pair of carrier type \u003ccode\u003eC\u003c/code\u003e and layout \u003ccode\u003eL\u003c/code\u003e in \u003ccode\u003eM\u003c/code\u003e and \u003ccode\u003eF\u003c/code\u003e, respectively, where \u003ccode\u003eC\u003c/code\u003e and \u003ccode\u003eL\u003c/code\u003e refer to the same argument, or to the return value, the following conditions must hold: \n  \u003cul\u003e \n   \u003cli\u003eIf \u003ccode\u003eC\u003c/code\u003e is a primitve type, then \u003ccode\u003eL\u003c/code\u003e must be a \u003ccode\u003eValueLayout\u003c/code\u003e, and the size of the layout must match that of the carrier type (see \u003ca href\u003d\"../../../../java.base/java/lang/Integer.html#SIZE\"\u003e\u003ccode\u003eInteger.SIZE\u003c/code\u003e\u003c/a\u003e and similar fields in other primitive wrapper classes);\u003c/li\u003e \n   \u003cli\u003eIf \u003ccode\u003eC\u003c/code\u003e is \u003ccode\u003eMemoryAddress.class\u003c/code\u003e, then \u003ccode\u003eL\u003c/code\u003e must be a \u003ccode\u003eValueLayout\u003c/code\u003e, and its size must match the platform\u0027s address size (see \u003ca href\u003d\"MemoryLayouts.html#ADDRESS\"\u003e\u003ccode\u003eMemoryLayouts.ADDRESS\u003c/code\u003e\u003c/a\u003e). For this purpose, the \u003ca href\u003d\"#C_POINTER\"\u003e\u003ccode\u003eC_POINTER\u003c/code\u003e\u003c/a\u003e layout constant can be used;\u003c/li\u003e \n   \u003cli\u003eIf \u003ccode\u003eC\u003c/code\u003e is \u003ccode\u003eMemorySegment.class\u003c/code\u003e, then \u003ccode\u003eL\u003c/code\u003e must be a \u003ccode\u003eGroupLayout\u003c/code\u003e\u003c/li\u003e \n   \u003cli\u003eIf \u003ccode\u003eC\u003c/code\u003e is \u003ccode\u003eVaList.class\u003c/code\u003e, then \u003ccode\u003eL\u003c/code\u003e must be \u003ca href\u003d\"#C_VA_LIST\"\u003e\u003ccode\u003eC_VA_LIST\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e \n  \u003c/ul\u003e \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eVariadic functions, declared in C either with a trailing ellipses (\u003ccode\u003e...\u003c/code\u003e) at the end of the formal parameter list or with an empty formal parameter list, are not supported directly. It is not possible to create a method handle that takes a variable number of arguments, and neither is it possible to create an upcall stub wrapping a method handle that accepts a variable number of arguments. However, for downcalls only, it is possible to link a native variadic function by using a \u003cem\u003especialized\u003c/em\u003e method type and function descriptor: for each argument that is to be passed as a variadic argument, an explicit, additional, carrier type and memory layout must be present in the method type and function descriptor objects passed to the linker. Furthermore, as memory layouts corresponding to variadic arguments in a function descriptor must contain additional classification information, it is required that \u003ca href\u003d\"#asVarArg(T)\"\u003e\u003ccode\u003easVarArg(MemoryLayout)\u003c/code\u003e\u003c/a\u003e is used to create the memory layouts for each parameter corresponding to a variadic argument in a specialized function descriptor. \u003c/p\u003e\n\u003cp\u003eOn unsupported platforms this class will fail to initialize with an \u003ca href\u003d\"../../../../java.base/java/lang/ExceptionInInitializerError.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eExceptionInInitializerError\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e Unless otherwise specified, passing a \u003ccode\u003enull\u003c/code\u003e argument, or an array argument containing one or more \u003ccode\u003enull\u003c/code\u003e elements to a method in this class causes a \u003ca href\u003d\"../../../../java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown. \u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "Implementations of this interface are immutable, thread-safe and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e."
    ],
    "apiNote": [
      "In the future, if the Java language permits, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eCLinker\u003c/code\u003e\u003c/a\u003e may become a \n\u003ccode\u003esealed\u003c/code\u003e interface, which would prohibit subclassing except by explicitly permitted types."
    ]
  }
}