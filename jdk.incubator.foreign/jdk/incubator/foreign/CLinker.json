{
  "packageName": "jdk.incubator.foreign",
  "simpleName": "CLinker",
  "moduleName": "jdk.incubator.foreign",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_CHAR",
      "comment": "The layout for the char C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_SHORT",
      "comment": "The layout for the short C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_INT",
      "comment": "The layout for the int C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_LONG",
      "comment": "The layout for the long C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_LONG_LONG",
      "comment": "The layout for the long long C type.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_FLOAT",
      "comment": "The layout for the float C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_DOUBLE",
      "comment": "The layout for the double C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.ValueLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_POINTER",
      "comment": "The T* native type.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "jdk.incubator.foreign.MemoryLayout",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "C_VA_LIST",
      "comment": "The layout for the va_list C type",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "getInstance",
      "comment": "Returns the C linker for the current platform. This method is restricted. Restricted method are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the runtime property \n\u003ccode\u003eforeign.restricted\u003c/code\u003e is not set to either \n\u003ccode\u003epermit\u003c/code\u003e, \n\u003ccode\u003ewarn\u003c/code\u003e or \n\u003ccode\u003edebug\u003c/code\u003e (the default value is set to \n\u003ccode\u003edeny\u003c/code\u003e)."
        ],
        "return": [
          "a linker for this system."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.Addressable",
            "type": "Class"
          },
          "name": "symbol",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodType",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.FunctionDescriptor",
            "type": "Class"
          },
          "name": "function",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "downcallHandle",
      "comment": "Obtain a foreign method handle, with given type, which can be used to call a target foreign function at a given address and featuring a given function descriptor.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/LibraryLookup.html#lookup(java.lang.String)\"\u003e\u003ccode\u003eLibraryLookup.lookup(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esymbol\u003c/code\u003e - downcall symbol.",
          "\u003ccode\u003etype\u003c/code\u003e - the method type.",
          "\u003ccode\u003efunction\u003c/code\u003e - the function descriptor."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - in the case of a method type and function descriptor mismatch."
        ],
        "return": [
          "the downcall method handle."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandle",
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.FunctionDescriptor",
            "type": "Class"
          },
          "name": "function",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "upcallStub",
      "comment": "Allocates a native segment whose base address (see MemorySegment.address()) can be passed to other foreign functions (as a function pointer); calling such a function pointer from native code will result in the execution of the provided method handle. The returned segment is shared, and it only features the MemorySegment.CLOSE access mode. When the returned segment is closed, the corresponding native stub will be deallocated.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the target method handle.",
          "\u003ccode\u003efunction\u003c/code\u003e - the function descriptor."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the target\u0027s method type and the function descriptor mismatch."
        ],
        "return": [
          "the native stub segment."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "jdk.incubator.foreign.MemoryLayout",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "asVarArg",
      "comment": "Returns a memory layout that is suitable to use as the layout for variadic arguments in a specialized function descriptor.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the memory layout type"
        ],
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the layout the adapt"
        ],
        "return": [
          "a potentially newly created layout with the right attributes"
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toCString",
      "comment": "Converts a Java string into a null-terminated C string, using the platform\u0027s default charset, storing the result into a new native memory segment. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement byte array. The CharsetEncoder class should be used when more control over the encoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the Java string to be converted into a C string."
        ],
        "return": [
          "a new native memory segment containing the converted C string."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "charset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toCString",
      "comment": "Converts a Java string into a null-terminated C string, using the given charset, storing the result into a new native memory segment. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement byte array. The CharsetEncoder class should be used when more control over the encoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the Java string to be converted into a C string.",
          "\u003ccode\u003echarset\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharset\u003c/code\u003e\u003c/a\u003e to be used to compute the contents of the C string."
        ],
        "return": [
          "a new native memory segment containing the converted C string."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.NativeScope",
            "type": "Class"
          },
          "name": "scope",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toCString",
      "comment": "Converts a Java string into a null-terminated C string, using the platform\u0027s default charset, storing the result into a native memory segment allocated using the provided scope. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement byte array. The CharsetEncoder class should be used when more control over the encoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the Java string to be converted into a C string.",
          "\u003ccode\u003escope\u003c/code\u003e - the scope to be used for the native segment allocation."
        ],
        "return": [
          "a new native memory segment containing the converted C string."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemorySegment",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "charset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.NativeScope",
            "type": "Class"
          },
          "name": "scope",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toCString",
      "comment": "Converts a Java string into a null-terminated C string, using the given charset, storing the result into a new native memory segment native memory segment allocated using the provided scope. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement byte array. The CharsetEncoder class should be used when more control over the encoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the Java string to be converted into a C string.",
          "\u003ccode\u003echarset\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharset\u003c/code\u003e\u003c/a\u003e to be used to compute the contents of the C string.",
          "\u003ccode\u003escope\u003c/code\u003e - the scope to be used for the native segment allocation."
        ],
        "return": [
          "a new native memory segment containing the converted C string."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryAddress",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toJavaStringRestricted",
      "comment": "Converts a null-terminated C string stored at given address into a Java string, using the platform\u0027s default charset. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required. This method is restricted. Restricted method are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - the address at which the string is stored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the largest string supported by the platform."
        ],
        "return": [
          "a Java string with the contents of the null-terminated C string at given address."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryAddress",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "charset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toJavaStringRestricted",
      "comment": "Converts a null-terminated C string stored at given address into a Java string, using the given charset. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required. This method is restricted. Restricted method are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - the address at which the string is stored.",
          "\u003ccode\u003echarset\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharset\u003c/code\u003e\u003c/a\u003e to be used to compute the contents of the Java string."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the largest string supported by the platform."
        ],
        "return": [
          "a Java string with the contents of the null-terminated C string at given address."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toJavaString",
      "comment": "Converts a null-terminated C string stored at given address into a Java string, using the platform\u0027s default charset. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - the address at which the string is stored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the largest string supported by the platform.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the size of the segment associated with \n\u003ccode\u003eaddr\u003c/code\u003e, or if \n\u003ccode\u003eaddr\u003c/code\u003e is associated with a segment that is \n\u003cem\u003enot alive\u003c/em\u003e."
        ],
        "return": [
          "a Java string with the contents of the null-terminated C string at given address."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "charset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "toJavaString",
      "comment": "Converts a null-terminated C string stored at given address into a Java string, using the given charset. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - the address at which the string is stored.",
          "\u003ccode\u003echarset\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharset\u003c/code\u003e\u003c/a\u003e to be used to compute the contents of the Java string."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the largest string supported by the platform.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the size of the native string is greater than the size of the segment associated with \n\u003ccode\u003eaddr\u003c/code\u003e, or if \n\u003ccode\u003eaddr\u003c/code\u003e is associated with a segment that is \n\u003cem\u003enot alive\u003c/em\u003e."
        ],
        "return": [
          "a Java string with the contents of the null-terminated C string at given address."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemoryAddress",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "size",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "allocateMemoryRestricted",
      "comment": "Allocates memory of given size using malloc. This method is restricted. Restricted method are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esize\u003c/code\u003e - memory size to be allocated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/OutOfMemoryError.html\" title\u003d\"class in java.lang\"\u003eOutOfMemoryError\u003c/a\u003e\u003c/code\u003e - if malloc could not allocate the required amount of native memory."
        ],
        "return": [
          "addr memory address of the allocated memory"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemoryAddress",
            "type": "Class"
          },
          "name": "addr",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "freeMemoryRestricted",
      "comment": "Frees the memory pointed by the given memory address. This method is restricted. Restricted method are unsafe, and, if used incorrectly, their use might crash the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on restricted methods, and use safe and supported functionalities, where possible.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaddr\u003c/code\u003e - memory address of the native memory to be freed"
        ]
      }
    }
  ],
  "innerClasses": [
    "jdk.incubator.foreign.CLinker$TypeKind",
    "jdk.incubator.foreign.CLinker$VaList"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.incubator.foreign.CLinker",
  "annotations": [],
  "tagMap": {
    "implSpec": [
      "Implementations of this interface are immutable, thread-safe and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e."
    ],
    "apiNote": [
      "In the future, if the Java language permits, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eCLinker\u003c/code\u003e\u003c/a\u003e may become a \n\u003ccode\u003esealed\u003c/code\u003e interface, which would prohibit subclassing except by explicitly permitted types."
    ]
  }
}