{
  "packageName": "jdk.incubator.foreign",
  "simpleName": "Builder",
  "moduleName": "jdk.incubator.foreign",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker$VaList$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.ValueLayout",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vargFromInt",
      "comment": "Adds a native value represented as an int to the C va_list being constructed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the native layout of the value.",
          "\u003ccode\u003evalue\u003c/code\u003e - the value, represented as an \n\u003ccode\u003eint\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given memory layout is not compatible with \n\u003ccode\u003eint\u003c/code\u003e"
        ],
        "return": [
          "this builder."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker$VaList$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.ValueLayout",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vargFromLong",
      "comment": "Adds a native value represented as a long to the C va_list being constructed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the native layout of the value.",
          "\u003ccode\u003evalue\u003c/code\u003e - the value, represented as a \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given memory layout is not compatible with \n\u003ccode\u003elong\u003c/code\u003e"
        ],
        "return": [
          "this builder."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker$VaList$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.ValueLayout",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vargFromDouble",
      "comment": "Adds a native value represented as a double to the C va_list being constructed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the native layout of the value.",
          "\u003ccode\u003evalue\u003c/code\u003e - the value, represented as a \n\u003ccode\u003edouble\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given memory layout is not compatible with \n\u003ccode\u003edouble\u003c/code\u003e"
        ],
        "return": [
          "this builder."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker$VaList$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.ValueLayout",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.Addressable",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vargFromAddress",
      "comment": "Adds a native value represented as a MemoryAddress to the C va_list being constructed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the native layout of the value.",
          "\u003ccode\u003evalue\u003c/code\u003e - the value, represented as a \n\u003ccode\u003eAddressable\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given memory layout is not compatible with \n\u003ccode\u003eMemoryAddress\u003c/code\u003e"
        ],
        "return": [
          "this builder."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.incubator.foreign.CLinker$VaList$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.GroupLayout",
            "type": "Class"
          },
          "name": "layout",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "jdk.incubator.foreign.MemorySegment",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "vargFromSegment",
      "comment": "Adds a native value represented as a MemorySegment to the C va_list being constructed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elayout\u003c/code\u003e - the native layout of the value.",
          "\u003ccode\u003evalue\u003c/code\u003e - the value, represented as a \n\u003ccode\u003eMemorySegment\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given memory layout is not compatible with \n\u003ccode\u003eMemorySegment\u003c/code\u003e"
        ],
        "return": [
          "this builder."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "jdk.incubator.foreign.CLinker$VaList$Builder",
  "annotations": [],
  "tagMap": {
    "apiNote": [
      "In the future, if the Java language permits, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.Builder.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eCLinker.VaList.Builder\u003c/code\u003e\u003c/a\u003e may become a \n\u003ccode\u003esealed\u003c/code\u003e interface, which would prohibit subclassing except by explicitly permitted types."
    ]
  }
}