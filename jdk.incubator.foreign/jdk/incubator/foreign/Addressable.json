{
  "packageName": "jdk.incubator.foreign",
  "simpleName": "Addressable",
  "moduleName": "jdk.incubator.foreign",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.incubator.foreign.MemoryAddress",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "address",
      "comment": "Map this object into a MemoryAddress instance.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryAddress.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eMemoryAddress\u003c/code\u003e\u003c/a\u003e instance associated with this object."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.incubator.foreign.Addressable",
  "comment": "Represents a type which is \n\u003cem\u003eaddressable\u003c/em\u003e. An addressable type is one which can be projected down to a memory address instance (see \n\u003ca href\u003d\"#address()\"\u003e\u003ccode\u003eaddress()\u003c/code\u003e\u003c/a\u003e). Examples of addressable types are \n\u003ca href\u003d\"MemorySegment.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eMemorySegment\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"MemoryAddress.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eMemoryAddress\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"LibraryLookup.Symbol.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eLibraryLookup.Symbol\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"CLinker.VaList.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eCLinker.VaList\u003c/code\u003e\u003c/a\u003e.",
  "tagMap": {
    "implSpec": [
      "Implementations of this interface \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e."
    ],
    "apiNote": [
      "In the future, if the Java language permits, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/Addressable.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eAddressable\u003c/code\u003e\u003c/a\u003e may become a \n\u003ccode\u003esealed\u003c/code\u003e interface, which would prohibit subclassing except by explicitly permitted types, such as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemorySegment.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eMemorySegment\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/MemoryAddress.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eMemoryAddress\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/LibraryLookup.Symbol.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eLibraryLookup.Symbol\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.incubator.foreign/jdk/incubator/foreign/CLinker.VaList.html\" title\u003d\"interface in jdk.incubator.foreign\"\u003e\u003ccode\u003eCLinker.VaList\u003c/code\u003e\u003c/a\u003e."
    ]
  }
}