{
  "packageName": "java.lang.management",
  "simpleName": "MemoryUsage",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInit",
      "comment": "Returns the amount of memory in bytes that the Java virtual machine initially requests from the operating system for memory management. This method returns -1 if the initial memory size is undefined.",
      "tagMap": {
        "return": [
          "the initial size of memory in bytes; \n\u003ccode\u003e-1\u003c/code\u003e if undefined."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUsed",
      "comment": "Returns the amount of used memory in bytes.",
      "tagMap": {
        "return": [
          "the amount of used memory in bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCommitted",
      "comment": "Returns the amount of memory in bytes that is committed for the Java virtual machine to use. This amount of memory is guaranteed for the Java virtual machine to use.",
      "tagMap": {
        "return": [
          "the amount of committed memory in bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMax",
      "comment": "Returns the maximum amount of memory in bytes that can be used for memory management. This method returns -1 if the maximum memory size is undefined. This amount of memory is not guaranteed to be available for memory management if it is greater than the amount of committed memory. The Java virtual machine may fail to allocate memory even if the amount of used memory does not exceed this maximum size.",
      "tagMap": {
        "return": [
          "the maximum amount of memory in bytes; \n\u003ccode\u003e-1\u003c/code\u003e if undefined."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a descriptive representation of this memory usage.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.management.MemoryUsage",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.openmbean.CompositeData",
            "type": "Class"
          },
          "field": {
            "name": "cd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Returns a MemoryUsage object represented by the given CompositeData. The given CompositeData must contain the following attributes: The attributes and the types the given CompositeData contains Attribute Name Type init java.lang.Long used java.lang.Long committed java.lang.Long max java.lang.Long",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecd\u003c/code\u003e - \n\u003ccode\u003eCompositeData\u003c/code\u003e representing a \n\u003ccode\u003eMemoryUsage\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecd\u003c/code\u003e does not represent a \n\u003ccode\u003eMemoryUsage\u003c/code\u003e with the attributes described above."
        ],
        "return": [
          "a \n\u003ccode\u003eMemoryUsage\u003c/code\u003e object represented by \n\u003ccode\u003ecd\u003c/code\u003e if \n\u003ccode\u003ecd\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e; \n\u003ccode\u003enull\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "init"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "used"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "committed"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "max"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a MemoryUsage object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einit\u003c/code\u003e - the initial amount of memory in bytes that the Java virtual machine allocates; or \n\u003ccode\u003e-1\u003c/code\u003e if undefined.",
          "\u003ccode\u003eused\u003c/code\u003e - the amount of used memory in bytes.",
          "\u003ccode\u003ecommitted\u003c/code\u003e - the amount of committed memory in bytes.",
          "\u003ccode\u003emax\u003c/code\u003e - the maximum amount of memory in bytes that can be used; or \n\u003ccode\u003e-1\u003c/code\u003e if undefined."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003cul\u003e \n \u003cli\u003e the value of \u003ccode\u003einit\u003c/code\u003e or \u003ccode\u003emax\u003c/code\u003e is negative but not \u003ccode\u003e-1\u003c/code\u003e; or\u003c/li\u003e \n \u003cli\u003e the value of \u003ccode\u003eused\u003c/code\u003e or \u003ccode\u003ecommitted\u003c/code\u003e is negative; or\u003c/li\u003e \n \u003cli\u003e \u003ccode\u003eused\u003c/code\u003e is greater than the value of \u003ccode\u003ecommitted\u003c/code\u003e; or\u003c/li\u003e \n \u003cli\u003e \u003ccode\u003ecommitted\u003c/code\u003e is greater than the value of \u003ccode\u003emax\u003c/code\u003e \u003ccode\u003emax\u003c/code\u003e if defined.\u003c/li\u003e \n\u003c/ul\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.management.MemoryUsage",
  "comment": "A \n\u003ccode\u003eMemoryUsage\u003c/code\u003e object represents a snapshot of memory usage. Instances of the \n\u003ccode\u003eMemoryUsage\u003c/code\u003e class are usually constructed by methods that are used to obtain memory usage information about individual memory pool of the Java virtual machine or the heap or non-heap memory of the Java virtual machine as a whole. \n\u003cp\u003e A \u003ccode\u003eMemoryUsage\u003c/code\u003e object contains four values: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  Describes the MemoryUsage object content\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"col\"\u003eValue\u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e\n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody style\u003d\"text-align:left\"\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003einit\u003c/code\u003e \u003c/th\u003e \n   \u003ctd style\u003d\"vertical-align:top\"\u003e represents the initial amount of memory (in bytes) that the Java virtual machine requests from the operating system for memory management during startup. The Java virtual machine may request additional memory from the operating system and may also release memory to the system over time. The value of \u003ccode\u003einit\u003c/code\u003e may be undefined. \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003eused\u003c/code\u003e \u003c/th\u003e \n   \u003ctd style\u003d\"vertical-align:top\"\u003e represents the amount of memory currently used (in bytes). \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003ecommitted\u003c/code\u003e \u003c/th\u003e \n   \u003ctd style\u003d\"vertical-align:top\"\u003e represents the amount of memory (in bytes) that is guaranteed to be available for use by the Java virtual machine. The amount of committed memory may change over time (increase or decrease). The Java virtual machine may release memory to the system and \u003ccode\u003ecommitted\u003c/code\u003e could be less than \u003ccode\u003einit\u003c/code\u003e. \u003ccode\u003ecommitted\u003c/code\u003e will always be greater than or equal to \u003ccode\u003eused\u003c/code\u003e. \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003emax\u003c/code\u003e \u003c/th\u003e \n   \u003ctd style\u003d\"vertical-align:top\"\u003e represents the maximum amount of memory (in bytes) that can be used for memory management. Its value may be undefined. The maximum amount of memory may change over time if defined. The amount of used and committed memory will always be less than or equal to \u003ccode\u003emax\u003c/code\u003e if \u003ccode\u003emax\u003c/code\u003e is defined. A memory allocation may fail if it attempts to increase the used memory such that \u003ccode\u003eused \u0026gt; committed\u003c/code\u003e even if \u003ccode\u003eused \u0026lt;\u003d max\u003c/code\u003e would still be true (for example, when the system is low on virtual memory). \u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e Below is a picture showing an example of a memory pool: \n\u003cpre\u003e        +----------------------------------------------+\n        +////////////////           |                  +\n        +////////////////           |                  +\n        +----------------------------------------------+\n\n        |--------|\n           init\n        |---------------|\n               used\n        |---------------------------|\n                  committed\n        |----------------------------------------------|\n                            max\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003eMXBean Mapping\u003c/h2\u003e \n\u003ccode\u003eMemoryUsage\u003c/code\u003e is mapped to a \n\u003ca href\u003d\"../../../javax/management/openmbean/CompositeData.html\" title\u003d\"interface in javax.management.openmbean\"\u003e\u003ccode\u003eCompositeData\u003c/code\u003e\u003c/a\u003e with attributes as specified in the \n\u003ca href\u003d\"#from(javax.management.openmbean.CompositeData)\"\u003e\u003ccode\u003efrom\u003c/code\u003e\u003c/a\u003e method.",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}