{
  "packageName": "java.lang.management",
  "simpleName": "MemoryNotificationInfo",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MEMORY_THRESHOLD_EXCEEDED",
      "comment": "Notification type denoting that the memory usage of a memory pool has reached or exceeded its usage threshold value. This notification is emitted by MemoryMXBean. Subsequent crossing of the usage threshold value does not cause further notification until the memory usage has returned to become less than the usage threshold value. The value of this notification type is java.management.memory.threshold.exceeded.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.management.MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MEMORY_COLLECTION_THRESHOLD_EXCEEDED",
      "comment": "Notification type denoting that the memory usage of a memory pool is greater than or equal to its collection usage threshold after the Java virtual machine has expended effort in recycling unused objects in that memory pool. This notification is emitted by MemoryMXBean. The value of this notification type is java.management.memory.collection.threshold.exceeded.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.management.MemoryNotificationInfo.MEMORY_COLLECTION_THRESHOLD_EXCEEDED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPoolName",
      "comment": "Returns the name of the memory pool that triggers this notification. The memory pool usage has crossed a threshold.",
      "tagMap": {
        "return": [
          "the name of the memory pool that triggers this notification."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.management.MemoryUsage",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUsage",
      "comment": "Returns the memory usage of the memory pool when this notification was constructed.",
      "tagMap": {
        "return": [
          "the memory usage of the memory pool when this notification was constructed."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCount",
      "comment": "Returns the number of times that the memory usage has crossed a threshold when the notification was constructed. For usage threshold notifications, this count will be the threshold count. For collection threshold notifications, this count will be the collection usage threshold count.",
      "tagMap": {
        "return": [
          "the number of times that the memory usage has crossed a threshold when the notification was constructed."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.management.MemoryNotificationInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.openmbean.CompositeData",
            "type": "Class"
          },
          "field": {
            "name": "cd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Returns a MemoryNotificationInfo object represented by the given CompositeData. The given CompositeData must contain the following attributes: The attributes and the types the given CompositeData contains Attribute Name Type poolName java.lang.String usage javax.management.openmbean.CompositeData count java.lang.Long",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecd\u003c/code\u003e - \n\u003ccode\u003eCompositeData\u003c/code\u003e representing a \n\u003ccode\u003eMemoryNotificationInfo\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecd\u003c/code\u003e does not represent a \n\u003ccode\u003eMemoryNotificationInfo\u003c/code\u003e object."
        ],
        "return": [
          "a \n\u003ccode\u003eMemoryNotificationInfo\u003c/code\u003e object represented by \n\u003ccode\u003ecd\u003c/code\u003e if \n\u003ccode\u003ecd\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e; \n\u003ccode\u003enull\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "poolName"
          }
        },
        {
          "type": {
            "name": "java.lang.management.MemoryUsage",
            "type": "Class"
          },
          "field": {
            "name": "usage"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a MemoryNotificationInfo object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epoolName\u003c/code\u003e - The name of the memory pool which triggers this notification.",
          "\u003ccode\u003eusage\u003c/code\u003e - Memory usage of the memory pool.",
          "\u003ccode\u003ecount\u003c/code\u003e - The threshold crossing count."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.management.MemoryNotificationInfo",
  "comment": "The information about a memory notification. \n\u003cp\u003e A memory notification is emitted by \u003ca href\u003d\"MemoryMXBean.html\" title\u003d\"interface in java.lang.management\"\u003e\u003ccode\u003eMemoryMXBean\u003c/code\u003e\u003c/a\u003e when the Java virtual machine detects that the memory usage of a memory pool is exceeding a threshold value. The notification emitted will contain the memory notification information about the detected condition: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe name of the memory pool.\u003c/li\u003e \n \u003cli\u003eThe memory usage of the memory pool when the notification was constructed.\u003c/li\u003e \n \u003cli\u003eThe number of times that the memory usage has crossed a threshold when the notification was constructed. For usage threshold notifications, this count will be the \u003ca href\u003d\"MemoryPoolMXBean.html#getUsageThresholdCount()\"\u003e\u003ccode\u003eusage threshold count\u003c/code\u003e\u003c/a\u003e. For collection threshold notifications, this count will be the \u003ca href\u003d\"MemoryPoolMXBean.html#getCollectionUsageThresholdCount()\"\u003e\u003ccode\u003ecollection usage threshold count\u003c/code\u003e\u003c/a\u003e. \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A \u003ca href\u003d\"../../../javax/management/openmbean/CompositeData.html\" title\u003d\"interface in javax.management.openmbean\"\u003e\u003ccode\u003eCompositeData\u003c/code\u003e\u003c/a\u003e representing the \u003ccode\u003eMemoryNotificationInfo\u003c/code\u003e object is stored in the \u003ca href\u003d\"../../../javax/management/Notification.html#setUserData(java.lang.Object)\"\u003e\u003ccode\u003euser data\u003c/code\u003e\u003c/a\u003e of a \u003ca href\u003d\"../../../javax/management/Notification.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003enotification\u003c/code\u003e\u003c/a\u003e. The \u003ca href\u003d\"#from(javax.management.openmbean.CompositeData)\"\u003e\u003ccode\u003efrom\u003c/code\u003e\u003c/a\u003e method is provided to convert from a \u003ccode\u003eCompositeData\u003c/code\u003e to a \u003ccode\u003eMemoryNotificationInfo\u003c/code\u003e object. For example: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e      Notification notif;\n\n      // receive the notification emitted by MemoryMXBean and set to notif\n      ...\n\n      String notifType \u003d notif.getType();\n      if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED) ||\n          notifType.equals(MemoryNotificationInfo.MEMORY_COLLECTION_THRESHOLD_EXCEEDED)) {\n          // retrieve the memory notification information\n          CompositeData cd \u003d (CompositeData) notif.getUserData();\n          MemoryNotificationInfo info \u003d MemoryNotificationInfo.from(cd);\n          ....\n      }\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The types of notifications emitted by \u003ccode\u003eMemoryMXBean\u003c/code\u003e are: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eA \u003ca href\u003d\"#MEMORY_THRESHOLD_EXCEEDED\"\u003e\u003ccode\u003eusage threshold exceeded notification\u003c/code\u003e\u003c/a\u003e. \u003cbr\u003eThis notification will be emitted when the memory usage of a memory pool is increased and has reached or exceeded its \u003ca href\u003d\"MemoryPoolMXBean.html#UsageThreshold\"\u003e usage threshold\u003c/a\u003e value. Subsequent crossing of the usage threshold value does not cause further notification until the memory usage has returned to become less than the usage threshold value. \u003c/li\u003e \n \u003cli\u003eA \u003ca href\u003d\"#MEMORY_COLLECTION_THRESHOLD_EXCEEDED\"\u003e\u003ccode\u003ecollection usage threshold exceeded notification\u003c/code\u003e\u003c/a\u003e. \u003cbr\u003eThis notification will be emitted when the memory usage of a memory pool is greater than or equal to its \u003ca href\u003d\"MemoryPoolMXBean.html#CollectionThreshold\"\u003e collection usage threshold\u003c/a\u003e after the Java virtual machine has expended effort in recycling unused objects in that memory pool.\u003c/li\u003e \n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}