{
  "packageName": "java.lang.management",
  "simpleName": "LockInfo",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getClassName",
      "comment": "Returns the fully qualified name of the class of the lock object.",
      "tagMap": {
        "return": [
          "the fully qualified name of the class of the lock object."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIdentityHashCode",
      "comment": "Returns the identity hash code of the lock object returned from the System.identityHashCode(java.lang.Object) method.",
      "tagMap": {
        "return": [
          "the identity hash code of the lock object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.management.LockInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.openmbean.CompositeData",
            "type": "Class"
          },
          "field": {
            "name": "cd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Returns a LockInfo object represented by the given CompositeData. The given CompositeData must contain the following attributes: The attributes and the types the given CompositeData contains Attribute Name Type className java.lang.String identityHashCode java.lang.Integer",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecd\u003c/code\u003e - \n\u003ccode\u003eCompositeData\u003c/code\u003e representing a \n\u003ccode\u003eLockInfo\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecd\u003c/code\u003e does not represent a \n\u003ccode\u003eLockInfo\u003c/code\u003e with the attributes described above."
        ],
        "return": [
          "a \n\u003ccode\u003eLockInfo\u003c/code\u003e object represented by \n\u003ccode\u003ecd\u003c/code\u003e if \n\u003ccode\u003ecd\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e; \n\u003ccode\u003enull\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of a lock. The returned string representation consists of the name of the class of the lock object, the at-sign character `@\u0027, and the unsigned hexadecimal representation of the identity hash code of the object. This method returns a string equals to the value of:  lock.getClass().getName() + \u0027@\u0027 + Integer.toHexString(System.identityHashCode(lock))\n where lock is the lock object.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string representation of a lock."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "className"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "identityHashCode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a LockInfo object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eclassName\u003c/code\u003e - the fully qualified name of the class of the lock object.",
          "\u003ccode\u003eidentityHashCode\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eidentity hash code\u003c/code\u003e\u003c/a\u003e of the lock object."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.management.LockInfo",
  "comment": "Information about a \n\u003cem\u003elock\u003c/em\u003e. A lock can be a built-in object monitor, an \n\u003cem\u003eownable synchronizer\u003c/em\u003e, or the \n\u003ca href\u003d\"../../../../java.base/java/util/concurrent/locks/Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e object associated with synchronizers. \n\u003cp\u003e \u003ca id\u003d\"OwnableSynchronizer\"\u003eAn ownable synchronizer\u003c/a\u003e is a synchronizer that may be exclusively owned by a thread and uses \u003ca href\u003d\"../../../../java.base/java/util/concurrent/locks/AbstractOwnableSynchronizer.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eAbstractOwnableSynchronizer\u003c/code\u003e\u003c/a\u003e (or its subclass) to implement its synchronization property. \u003ca href\u003d\"../../../../java.base/java/util/concurrent/locks/ReentrantLock.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e\u003c/a\u003e and the write-lock (but not the read-lock) of \u003ca href\u003d\"../../../../java.base/java/util/concurrent/locks/ReentrantReadWriteLock.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eReentrantReadWriteLock\u003c/code\u003e\u003c/a\u003e are two examples of ownable synchronizers provided by the platform. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"MappedType\"\u003eMXBean Mapping\u003c/a\u003e\u003c/h2\u003e \n\u003ccode\u003eLockInfo\u003c/code\u003e is mapped to a \n\u003ca href\u003d\"../../../javax/management/openmbean/CompositeData.html\" title\u003d\"interface in javax.management.openmbean\"\u003e\u003ccode\u003eCompositeData\u003c/code\u003e\u003c/a\u003e as specified in the \n\u003ca href\u003d\"#from(javax.management.openmbean.CompositeData)\"\u003e\u003ccode\u003efrom\u003c/code\u003e\u003c/a\u003e method.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractOwnableSynchronizer.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eAbstractOwnableSynchronizer\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}