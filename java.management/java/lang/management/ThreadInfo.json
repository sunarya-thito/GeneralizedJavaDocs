{
  "packageName": "java.lang.management",
  "simpleName": "ThreadInfo",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getThreadId",
      "comment": "Returns the ID of the thread associated with this ThreadInfo.",
      "tagMap": {
        "return": [
          "the ID of the associated thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getThreadName",
      "comment": "Returns the name of the thread associated with this ThreadInfo.",
      "tagMap": {
        "return": [
          "the name of the associated thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Thread$State",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getThreadState",
      "comment": "Returns the state of the thread associated with this ThreadInfo.",
      "tagMap": {
        "return": [
          "\u003ccode\u003eThread.State\u003c/code\u003e of the associated thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlockedTime",
      "comment": "Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this ThreadInfo has blocked to enter or reenter a monitor since thread contention monitoring is enabled. I.e. the total accumulated time the thread has been in the BLOCKED state since thread contention monitoring was last enabled. This method returns -1 if thread contention monitoring is disabled. The Java virtual machine may measure the time with a high resolution timer. This statistic is reset when the thread contention monitoring is reenabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ThreadMXBean.html#isThreadContentionMonitoringSupported()\"\u003e\u003ccode\u003eThreadMXBean.isThreadContentionMonitoringSupported()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ThreadMXBean.html#setThreadContentionMonitoringEnabled(boolean)\"\u003e\u003ccode\u003eThreadMXBean.setThreadContentionMonitoringEnabled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the Java virtual machine does not support this operation."
        ],
        "return": [
          "the approximate accumulated elapsed time in milliseconds that a thread entered the \n\u003ccode\u003eBLOCKED\u003c/code\u003e state; \n\u003ccode\u003e-1\u003c/code\u003e if thread contention monitoring is disabled."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlockedCount",
      "comment": "Returns the total number of times that the thread associated with this ThreadInfo blocked to enter or reenter a monitor. I.e. the number of times a thread has been in the BLOCKED state.",
      "tagMap": {
        "return": [
          "the total number of times that the thread entered the \n\u003ccode\u003eBLOCKED\u003c/code\u003e state."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWaitedTime",
      "comment": "Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this ThreadInfo has waited for notification since thread contention monitoring is enabled. I.e. the total accumulated time the thread has been in the WAITING or TIMED_WAITING state since thread contention monitoring is enabled. This method returns -1 if thread contention monitoring is disabled. The Java virtual machine may measure the time with a high resolution timer. This statistic is reset when the thread contention monitoring is reenabled.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ThreadMXBean.html#isThreadContentionMonitoringSupported()\"\u003e\u003ccode\u003eThreadMXBean.isThreadContentionMonitoringSupported()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ThreadMXBean.html#setThreadContentionMonitoringEnabled(boolean)\"\u003e\u003ccode\u003eThreadMXBean.setThreadContentionMonitoringEnabled(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the Java virtual machine does not support this operation."
        ],
        "return": [
          "the approximate accumulated elapsed time in milliseconds that a thread has been in the \n\u003ccode\u003eWAITING\u003c/code\u003e or \n\u003ccode\u003eTIMED_WAITING\u003c/code\u003e state; \n\u003ccode\u003e-1\u003c/code\u003e if thread contention monitoring is disabled."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWaitedCount",
      "comment": "Returns the total number of times that the thread associated with this ThreadInfo waited for notification. I.e. the number of times that a thread has been in the WAITING or TIMED_WAITING state.",
      "tagMap": {
        "return": [
          "the total number of times that the thread was in the \n\u003ccode\u003eWAITING\u003c/code\u003e or \n\u003ccode\u003eTIMED_WAITING\u003c/code\u003e state."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.management.LockInfo",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLockInfo",
      "comment": "Returns the LockInfo of an object for which the thread associated with this ThreadInfo is blocked waiting. A thread can be blocked waiting for one of the following: an object monitor to be acquired for entering or reentering a synchronization block/method. The thread is in the BLOCKED state waiting to enter the synchronized statement or method. an object monitor to be notified by another thread. The thread is in the WAITING or TIMED_WAITING state due to a call to the Object.wait method. a synchronization object responsible for the thread parking. The thread is in the WAITING or TIMED_WAITING state due to a call to the LockSupport.park method. The synchronization object is the object returned from LockSupport.getBlocker method. Typically it is an ownable synchronizer or a Condition. This method returns null if the thread is not in any of the above conditions.",
      "tagMap": {
        "return": [
          "\u003ccode\u003eLockInfo\u003c/code\u003e of an object for which the thread is blocked waiting if any; \n\u003ccode\u003enull\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLockName",
      "comment": "Returns the string representation of an object for which the thread associated with this ThreadInfo is blocked waiting. This method is equivalent to calling:  getLockInfo().toString()\n This method will return null if this thread is not blocked waiting for any object or if the object is not owned by any thread.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ThreadInfo.html#getLockInfo()\"\u003e\u003ccode\u003egetLockInfo()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the string representation of the object on which the thread is blocked if any; \n\u003ccode\u003enull\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLockOwnerId",
      "comment": "Returns the ID of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting. This method will return -1 if this thread is not blocked waiting for any object or if the object is not owned by any thread.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ThreadInfo.html#getLockInfo()\"\u003e\u003ccode\u003egetLockInfo()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the thread ID of the owner thread of the object this thread is blocked on; \n\u003ccode\u003e-1\u003c/code\u003e if this thread is not blocked or if the object is not owned by any thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLockOwnerName",
      "comment": "Returns the name of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting. This method will return null if this thread is not blocked waiting for any object or if the object is not owned by any thread.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ThreadInfo.html#getLockInfo()\"\u003e\u003ccode\u003egetLockInfo()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the name of the thread that owns the object this thread is blocked on; \n\u003ccode\u003enull\u003c/code\u003e if this thread is not blocked or if the object is not owned by any thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StackTraceElement",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStackTrace",
      "comment": "Returns the stack trace of the thread associated with this ThreadInfo. If no stack trace was requested for this thread info, this method will return a zero-length array. If the returned array is of non-zero length then the first element of the array represents the top of the stack, which is the most recent method invocation in the sequence. The last element of the array represents the bottom of the stack, which is the least recent method invocation in the sequence. Some Java virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning the thread associated with this ThreadInfo is permitted to return a zero-length array from this method.",
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eStackTraceElement\u003c/code\u003e objects of the thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSuspended",
      "comment": "Tests if the thread associated with this ThreadInfo is suspended. This method returns true if Thread.suspend() has been called.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the thread is suspended; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isInNative",
      "comment": "Tests if the thread associated with this ThreadInfo is executing native code via the Java Native Interface (JNI). The JNI native code does not include the virtual machine support code or the compiled native code generated by the virtual machine.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the thread is executing native code; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDaemon",
      "comment": "Tests if the thread associated with this ThreadInfo is a daemon thread.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#isDaemon()\"\u003e\u003ccode\u003eThread.isDaemon()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the thread is a daemon thread, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPriority",
      "comment": "Returns the thread priority of the thread associated with this ThreadInfo.",
      "tagMap": {
        "return": [
          "The priority of the thread associated with this \n\u003ccode\u003eThreadInfo\u003c/code\u003e."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this thread info. The format of this string depends on the implementation. The returned string will typically include the thread name, the thread ID, its state, and a stack trace if any.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this thread info."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.management.ThreadInfo",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.openmbean.CompositeData",
            "type": "Class"
          },
          "field": {
            "name": "cd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Returns a ThreadInfo object represented by the given CompositeData. A CompositeData representing a ThreadInfo of version N must contain all of the attributes defined in version ≤ N unless specified otherwise. The same rule applies the composite type of the given CompositeData and transitively to attributes whose type or component type is CompositeType. A CompositeData representing ThreadInfo of version N contains \"stackTrace\" attribute and \"lockedMonitors\" attribute representing an array of StackTraceElement and an array of MonitorInfo respectively and their types are of version N. The \"lockedStackFrame\" attribute in MonitorInfo\u0027s composite type must represent StackTraceElement of the same version N. Otherwise, this method will throw IllegalArgumentException. The attributes and their types for ThreadInfo\u0027s composite data Attribute Name Type Since threadId java.lang.Long 5 threadName java.lang.String 5 threadState java.lang.String 5 suspended java.lang.Boolean 5 inNative java.lang.Boolean 5 blockedCount java.lang.Long 5 blockedTime java.lang.Long 5 waitedCount java.lang.Long 5 waitedTime java.lang.Long 5 lockName java.lang.String 5 lockOwnerId java.lang.Long 5 lockOwnerName java.lang.String 5 stackTrace javax.management.openmbean.CompositeData[], each element is a CompositeData representing StackTraceElement as specified below. 5 lockInfo javax.management.openmbean.CompositeData - the mapped type for LockInfo as specified in the LockInfo.from(javax.management.openmbean.CompositeData) method. If the given CompositeData does not contain this attribute, the LockInfo object will be constructed from the value of the lockName attribute. 6 lockedMonitors javax.management.openmbean.CompositeData[] whose element type is the mapped type for MonitorInfo as specified in the MonitorInfo.from method. If the given CompositeData does not contain this attribute, this attribute will be set to an empty array. 6 lockedSynchronizers javax.management.openmbean.CompositeData[] whose element type is the mapped type for LockInfo as specified in the LockInfo.from(javax.management.openmbean.CompositeData) method. If the given CompositeData does not contain this attribute, this attribute will be set to an empty array. 6 daemon java.lang.Boolean If the given CompositeData does not contain this attribute, this attribute will be set to false. 9 priority java.lang.Integer If the given CompositeData does not contain this attribute, This attribute will be set to Thread.NORM_PRIORITY. 9 A CompositeData representing StackTraceElement of version N must contain all of the attributes defined in version ≤ N unless specified otherwise. The attributes and their types for StackTraceElement\u0027s composite data Attribute Name Type Since classLoaderName java.lang.String 9 moduleName java.lang.String 9 moduleVersion java.lang.String 9 className java.lang.String 5 methodName java.lang.String 5 fileName java.lang.String 5 lineNumber java.lang.Integer 5 nativeMethod java.lang.Boolean 5",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecd\u003c/code\u003e - \n\u003ccode\u003eCompositeData\u003c/code\u003e representing a \n\u003ccode\u003eThreadInfo\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003ecd\u003c/code\u003e and its composite type does not contain all of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ThreadInfo.html#attributes\"\u003ethe attributes\u003c/a\u003e defined for a \n\u003ccode\u003eThreadInfo\u003c/code\u003e of a specific runtime version."
        ],
        "return": [
          "a \n\u003ccode\u003eThreadInfo\u003c/code\u003e object represented by \n\u003ccode\u003ecd\u003c/code\u003e if \n\u003ccode\u003ecd\u003c/code\u003e is not \n\u003ccode\u003enull\u003c/code\u003e; \n\u003ccode\u003enull\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.management.MonitorInfo",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLockedMonitors",
      "comment": "Returns an array of MonitorInfo objects, each of which represents an object monitor currently locked by the thread associated with this ThreadInfo. If no locked monitor was requested for this thread info or no monitor is locked by the thread, this method will return a zero-length array.",
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eMonitorInfo\u003c/code\u003e objects representing the object monitors locked by the thread."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.management.LockInfo",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLockedSynchronizers",
      "comment": "Returns an array of LockInfo objects, each of which represents an ownable synchronizer currently locked by the thread associated with this ThreadInfo. If no locked synchronizer was requested for this thread info or no synchronizer is locked by the thread, this method will return a zero-length array.",
      "tagMap": {
        "return": [
          "an array of \n\u003ccode\u003eLockInfo\u003c/code\u003e objects representing the ownable synchronizers locked by the thread."
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.management.ThreadInfo",
  "comment": "Thread information. \n\u003ccode\u003eThreadInfo\u003c/code\u003e contains the information about a thread including: \n\u003ch2\u003eGeneral thread information\u003c/h2\u003e \n\u003cul\u003e \n \u003cli\u003eThread ID.\u003c/li\u003e \n \u003cli\u003eName of the thread.\u003c/li\u003e \n \u003cli\u003eWhether a thread is a daemon thread\u003c/li\u003e \n\u003c/ul\u003e \n\u003ch2\u003eExecution information\u003c/h2\u003e \n\u003cul\u003e \n \u003cli\u003eThread state.\u003c/li\u003e \n \u003cli\u003eThe object upon which the thread is blocked due to: \n  \u003cul\u003e \n   \u003cli\u003ewaiting to enter a synchronization block/method, or\u003c/li\u003e \n   \u003cli\u003ewaiting to be notified in a \u003ca href\u003d\"../../../../java.base/java/lang/Object.html#wait()\"\u003e\u003ccode\u003eObject.wait\u003c/code\u003e\u003c/a\u003e method, or\u003c/li\u003e \n   \u003cli\u003eparking due to a \u003ca href\u003d\"../../../../java.base/java/util/concurrent/locks/LockSupport.html#park(java.lang.Object)\"\u003e\u003ccode\u003eLockSupport.park\u003c/code\u003e\u003c/a\u003e call.\u003c/li\u003e \n  \u003c/ul\u003e \u003c/li\u003e \n \u003cli\u003eThe ID of the thread that owns the object that the thread is blocked.\u003c/li\u003e \n \u003cli\u003eStack trace of the thread.\u003c/li\u003e \n \u003cli\u003eList of object monitors locked by the thread.\u003c/li\u003e \n \u003cli\u003eList of \u003ca href\u003d\"LockInfo.html#OwnableSynchronizer\"\u003e ownable synchronizers\u003c/a\u003e locked by the thread.\u003c/li\u003e \n \u003cli\u003eThread priority\u003c/li\u003e \n\u003c/ul\u003e \n\u003ch3\u003e\u003ca id\u003d\"SyncStats\"\u003eSynchronization Statistics\u003c/a\u003e\u003c/h3\u003e \n\u003cul\u003e \n \u003cli\u003eThe number of times that the thread has blocked for synchronization or waited for notification.\u003c/li\u003e \n \u003cli\u003eThe accumulated elapsed time that the thread has blocked for synchronization or waited for notification since \u003ca href\u003d\"ThreadMXBean.html#setThreadContentionMonitoringEnabled(boolean)\"\u003e\u003ccode\u003ethread contention monitoring\u003c/code\u003e\u003c/a\u003e was enabled. Some Java virtual machine implementation may not support this. The \u003ca href\u003d\"ThreadMXBean.html#isThreadContentionMonitoringSupported()\"\u003e\u003ccode\u003eThreadMXBean.isThreadContentionMonitoringSupported()\u003c/code\u003e\u003c/a\u003e method can be used to determine if a Java virtual machine supports this.\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003eThis thread information class is designed for use in monitoring of the system, not for synchronization control. \u003c/p\u003e\n\u003ch3\u003eMXBean Mapping\u003c/h3\u003e \n\u003ccode\u003eThreadInfo\u003c/code\u003e is mapped to a \n\u003ca href\u003d\"../../../javax/management/openmbean/CompositeData.html\" title\u003d\"interface in javax.management.openmbean\"\u003e\u003ccode\u003eCompositeData\u003c/code\u003e\u003c/a\u003e with attributes as specified in the \n\u003ca href\u003d\"#from(javax.management.openmbean.CompositeData)\"\u003e\u003ccode\u003efrom\u003c/code\u003e\u003c/a\u003e method.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ThreadMXBean.html#getThreadInfo(long)\"\u003e\u003ccode\u003eThreadMXBean.getThreadInfo(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ThreadMXBean.html#dumpAllThreads(boolean,boolean)\"\u003e\u003ccode\u003eThreadMXBean.dumpAllThreads(boolean, boolean)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}