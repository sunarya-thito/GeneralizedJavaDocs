{
  "packageName": "javax.management",
  "simpleName": "ObjectName",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WILDCARD",
      "comment": "Defines the wildcard \"*:*\" ObjectName.",
      "tagMap": {
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.MalformedObjectNameException",
          "type": "Class"
        },
        {
          "name": "java.lang.NullPointerException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Return an instance of ObjectName that can be used anywhere an object obtained with new ObjectName(name) can be used. The returned object may be of a subclass of ObjectName. Calling this method twice with the same parameters may return the same object or two equal but not identical objects.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - A string representation of the object name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MalformedObjectNameException.html\" title\u003d\"class in javax.management\"\u003eMalformedObjectNameException\u003c/a\u003e\u003c/code\u003e - The string passed as a parameter does not have the right format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - The \n\u003ccode\u003ename\u003c/code\u003e parameter is null."
        ],
        "return": [
          "an ObjectName corresponding to the given String."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.MalformedObjectNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "domain"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Return an instance of ObjectName that can be used anywhere an object obtained with new ObjectName(domain, key, value) can be used. The returned object may be of a subclass of ObjectName. Calling this method twice with the same parameters may return the same object or two equal but not identical objects.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edomain\u003c/code\u003e - The domain part of the object name.",
          "\u003ccode\u003ekey\u003c/code\u003e - The attribute in the key property of the object name.",
          "\u003ccode\u003evalue\u003c/code\u003e - The value in the key property of the object name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MalformedObjectNameException.html\" title\u003d\"class in javax.management\"\u003eMalformedObjectNameException\u003c/a\u003e\u003c/code\u003e - The \n\u003ccode\u003edomain\u003c/code\u003e, \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003evalue\u003c/code\u003e contains an illegal character, or \n\u003ccode\u003evalue\u003c/code\u003e does not follow the rules for quoting, or the domain\u0027s length exceeds the maximum allowed length.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - One of the parameters is null."
        ],
        "return": [
          "an ObjectName corresponding to the given domain, key, and value."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.MalformedObjectNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "domain"
          }
        },
        {
          "type": {
            "name": "java.util.Hashtable",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "table"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Return an instance of ObjectName that can be used anywhere an object obtained with new ObjectName(domain, table) can be used. The returned object may be of a subclass of ObjectName. Calling this method twice with the same parameters may return the same object or two equal but not identical objects.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edomain\u003c/code\u003e - The domain part of the object name.",
          "\u003ccode\u003etable\u003c/code\u003e - A hash table containing one or more key properties. The key of each entry in the table is the key of a key property in the object name. The associated value in the table is the associated value in the object name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MalformedObjectNameException.html\" title\u003d\"class in javax.management\"\u003eMalformedObjectNameException\u003c/a\u003e\u003c/code\u003e - The \n\u003ccode\u003edomain\u003c/code\u003e contains an illegal character, or one of the keys or values in \n\u003ccode\u003etable\u003c/code\u003e contains an illegal character, or one of the values in \n\u003ccode\u003etable\u003c/code\u003e does not follow the rules for quoting, or the domain\u0027s length exceeds the maximum allowed length.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - One of the parameters is null."
        ],
        "return": [
          "an ObjectName corresponding to the given domain and key mappings."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Return an instance of ObjectName that can be used anywhere the given object can be used. The returned object may be of a subclass of ObjectName. If name is of a subclass of ObjectName, it is not guaranteed that the returned object will be of the same class. The returned value may or may not be identical to name. Calling this method twice with the same parameters may return the same object or two equal but not identical objects. Since ObjectName is immutable, it is not usually useful to make a copy of an ObjectName. The principal use of this method is to guard against a malicious caller who might pass an instance of a subclass with surprising behavior to sensitive code. Such code can call this method to obtain an ObjectName that is known not to have surprising behavior.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - an instance of the ObjectName class or of a subclass"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - The \n\u003ccode\u003ename\u003c/code\u003e is null."
        ],
        "return": [
          "an instance of ObjectName or a subclass that is known to have the same semantics. If \n\u003ccode\u003ename\u003c/code\u003e respects the semantics of ObjectName, then the returned object is equal (though not necessarily identical) to \n\u003ccode\u003ename\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPattern",
      "comment": "Checks whether the object name is a pattern. An object name is a pattern if its domain contains a wildcard or if the object name is a property pattern.",
      "tagMap": {
        "return": [
          "True if the name is a pattern, otherwise false."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDomainPattern",
      "comment": "Checks whether the object name is a pattern on the domain part.",
      "tagMap": {
        "return": [
          "True if the name is a domain pattern, otherwise false."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPropertyPattern",
      "comment": "Checks whether the object name is a pattern on the key properties. An object name is a pattern on the key properties if it is a pattern on the key property list (e.g. \"d:k\u003dv,*\") or on the property values (e.g. \"d:k\u003d*\") or on both (e.g. \"d:k\u003d*,*\").",
      "tagMap": {
        "return": [
          "True if the name is a property pattern, otherwise false."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPropertyListPattern",
      "comment": "Checks whether the object name is a pattern on the key property list. For example, \"d:k\u003dv,*\" and \"d:k\u003d*,*\" are key property list patterns whereas \"d:k\u003d*\" is not.",
      "tagMap": {
        "return": [
          "True if the name is a property list pattern, otherwise false."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPropertyValuePattern",
      "comment": "Checks whether the object name is a pattern on the value part of at least one of the key properties. For example, \"d:k\u003d*\" and \"d:k\u003d*,*\" are property value patterns whereas \"d:k\u003dv,*\" is not.",
      "tagMap": {
        "return": [
          "True if the name is a property value pattern, otherwise false."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "property"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPropertyValuePattern",
      "comment": "Checks whether the value associated with a key in a key property is a pattern.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eproperty\u003c/code\u003e - The property whose value is to be checked."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eproperty\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eproperty\u003c/code\u003e is not a valid key property for this ObjectName."
        ],
        "return": [
          "True if the value associated with the given key property is a pattern, otherwise false."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCanonicalName",
      "comment": "Returns the canonical form of the name; that is, a string representation where the properties are sorted in lexical order. More precisely, the canonical form of the name is a String consisting of the domain part, a colon (:), the canonical key property list, and a pattern indication. The canonical key property list is the same string as described for getCanonicalKeyPropertyListString(). The pattern indication is: empty for an ObjectName that is not a property list pattern; an asterisk for an ObjectName that is a property list pattern with no keys; or a comma and an asterisk (,*) for an ObjectName that is a property list pattern with at least one key.",
      "tagMap": {
        "return": [
          "The canonical form of the name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDomain",
      "comment": "Returns the domain part.",
      "tagMap": {
        "return": [
          "The domain."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "property"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getKeyProperty",
      "comment": "Obtains the value associated with a key in a key property.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eproperty\u003c/code\u003e - The property whose value is to be obtained."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eproperty\u003c/code\u003e is null."
        ],
        "return": [
          "The value of the property, or null if there is no such property in this ObjectName."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Hashtable",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getKeyPropertyList",
      "comment": "Returns the key properties as a Hashtable. The returned value is a Hashtable in which each key is a key in the ObjectName\u0027s key property list and each value is the associated value. The returned value may be unmodifiable. If it is modifiable, changing it has no effect on this ObjectName.",
      "tagMap": {
        "return": [
          "The table of key properties."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getKeyPropertyListString",
      "comment": "Returns a string representation of the list of key properties specified at creation time. If this ObjectName was constructed with the constructor ObjectName(String), the key properties in the returned String will be in the same order as in the argument to the constructor.",
      "tagMap": {
        "return": [
          "The key property list string. This string is independent of whether the ObjectName is a pattern."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCanonicalKeyPropertyListString",
      "comment": "Returns a string representation of the list of key properties, in which the key properties are sorted in lexical order. This is used in lexicographic comparisons performed in order to select MBeans based on their key property list. Lexical order is the order implied by String.compareTo(String).",
      "tagMap": {
        "return": [
          "The canonical key property list string. This string is independent of whether the ObjectName is a pattern."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of the object name. The format of this string is not specified, but users can expect that two ObjectNames return the same string if and only if they are equal.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this object name."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "object"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares the current object name with another object name. Two ObjectName instances are equal if and only if their canonical forms are equal. The canonical form is the string described for getCanonicalName().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobject\u003c/code\u003e - The object name that the current object name is to be compared with."
        ],
        "return": [
          "True if \n\u003ccode\u003eobject\u003c/code\u003e is an ObjectName whose canonical form is equal to that of this ObjectName."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code for this object name.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "quote",
      "comment": "Returns a quoted form of the given String, suitable for inclusion in an ObjectName. The returned value can be used as the value associated with a key in an ObjectName. The String s may contain any character. Appropriate quoting ensures that the returned value is legal in an ObjectName. The returned value consists of a quote (\u0027\"\u0027), a sequence of characters corresponding to the characters of s, and another quote. Characters in s appear unchanged within the returned value except: A quote (\u0027\"\u0027) is replaced by a backslash (\\) followed by a quote. An asterisk (\u0027*\u0027) is replaced by a backslash (\\) followed by an asterisk. A question mark (\u0027?\u0027) is replaced by a backslash (\\) followed by a question mark. A backslash (\u0027\\\u0027) is replaced by two backslashes. A newline character (the character \u0027\\n\u0027 in Java) is replaced by a backslash followed by the character \u0027\\n\u0027.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the String to be quoted."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003es\u003c/code\u003e is null."
        ],
        "return": [
          "the quoted String."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "q"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unquote",
      "comment": "Returns an unquoted form of the given String. If q is a String returned by quote(s), then unquote(q).equals(s). If there is no String s for which quote(s).equals(q), then unquote(q) throws an IllegalArgumentException. These rules imply that there is a one-to-one mapping between quoted and unquoted forms.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eq\u003c/code\u003e - the String to be unquoted."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eq\u003c/code\u003e could not have been returned by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ObjectName.html#quote(java.lang.String)\"\u003e\u003ccode\u003equote(java.lang.String)\u003c/code\u003e\u003c/a\u003e method, for instance if it does not begin and end with a quote (\").",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eq\u003c/code\u003e is null."
        ],
        "return": [
          "the unquoted String."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "apply",
      "comment": "Test whether this ObjectName, which may be a pattern, matches another ObjectName. If name is a pattern, the result is false. If this ObjectName is a pattern, the result is true if and only if name matches the pattern. If neither this ObjectName nor name is a pattern, the result is true if and only if the two ObjectNames are equal as described for the equals(Object) method.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/QueryExp.html#apply(javax.management.ObjectName)\"\u003eapply\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/QueryExp.html\" title\u003d\"interface in javax.management\"\u003eQueryExp\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the MBean to compare to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is null."
        ],
        "return": [
          "True if \n\u003ccode\u003ename\u003c/code\u003e matches this ObjectName."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanServer",
            "type": "Class"
          },
          "field": {
            "name": "mbs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMBeanServer",
      "comment": "Description copied from interface: QueryExp",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/QueryExp.html#setMBeanServer(javax.management.MBeanServer)\"\u003esetMBeanServer\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/QueryExp.html\" title\u003d\"interface in javax.management\"\u003eQueryExp\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003embs\u003c/code\u003e - The MBean server on which the query is to be performed."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares two ObjectName instances. The ordering relation between ObjectNames is not completely specified but is intended to be such that a sorted list of ObjectNames will appear in an order that is convenient for a person to read. In particular, if the two ObjectName instances have different domains then their order is the lexicographical order of the domains. The ordering of the key property list remains unspecified. For example, the ObjectName instances below: Shapes:type\u003dSquare,name\u003d3 Colors:type\u003dRed,name\u003d2 Shapes:type\u003dTriangle,side\u003disosceles,name\u003d2 Colors:type\u003dRed,name\u003d1 Shapes:type\u003dSquare,name\u003d1 Colors:type\u003dBlue,name\u003d1 Shapes:type\u003dSquare,name\u003d2 JMImplementation:type\u003dMBeanServerDelegate Shapes:type\u003dTriangle,side\u003dscalene,name\u003d1 could be ordered as follows: Colors:type\u003dBlue,name\u003d1 Colors:type\u003dRed,name\u003d1 Colors:type\u003dRed,name\u003d2 JMImplementation:type\u003dMBeanServerDelegate Shapes:type\u003dSquare,name\u003d1 Shapes:type\u003dSquare,name\u003d2 Shapes:type\u003dSquare,name\u003d3 Shapes:type\u003dTriangle,side\u003dscalene,name\u003d1 Shapes:type\u003dTriangle,side\u003disosceles,name\u003d2",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ObjectName.html\" title\u003d\"class in javax.management\"\u003eObjectName\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the ObjectName to be compared."
        ],
        "return": [
          "a negative integer, zero, or a positive integer as this ObjectName is less than, equal to, or greater than the specified ObjectName."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.management.MalformedObjectNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct an object name from the given string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - A string representation of the object name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MalformedObjectNameException.html\" title\u003d\"class in javax.management\"\u003eMalformedObjectNameException\u003c/a\u003e\u003c/code\u003e - The string passed as a parameter does not have the right format.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - The \n\u003ccode\u003ename\u003c/code\u003e parameter is null."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.management.MalformedObjectNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "domain"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct an object name with exactly one key property.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edomain\u003c/code\u003e - The domain part of the object name.",
          "\u003ccode\u003ekey\u003c/code\u003e - The attribute in the key property of the object name.",
          "\u003ccode\u003evalue\u003c/code\u003e - The value in the key property of the object name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MalformedObjectNameException.html\" title\u003d\"class in javax.management\"\u003eMalformedObjectNameException\u003c/a\u003e\u003c/code\u003e - The \n\u003ccode\u003edomain\u003c/code\u003e, \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003evalue\u003c/code\u003e contains an illegal character, or \n\u003ccode\u003evalue\u003c/code\u003e does not follow the rules for quoting, or the domain\u0027s length exceeds the maximum allowed length.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - One of the parameters is null."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.management.MalformedObjectNameException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "domain"
          }
        },
        {
          "type": {
            "name": "java.util.Hashtable",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "table"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct an object name with several key properties from a Hashtable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edomain\u003c/code\u003e - The domain part of the object name.",
          "\u003ccode\u003etable\u003c/code\u003e - A hash table containing one or more key properties. The key of each entry in the table is the key of a key property in the object name. The associated value in the table is the associated value in the object name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MalformedObjectNameException.html\" title\u003d\"class in javax.management\"\u003eMalformedObjectNameException\u003c/a\u003e\u003c/code\u003e - The \n\u003ccode\u003edomain\u003c/code\u003e contains an illegal character, or one of the keys or values in \n\u003ccode\u003etable\u003c/code\u003e contains an illegal character, or one of the values in \n\u003ccode\u003etable\u003c/code\u003e does not follow the rules for quoting, or the domain\u0027s length exceeds the maximum allowed length.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - One of the parameters is null."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.ObjectName",
  "comment": "\u003cp\u003eRepresents the object name of an MBean, or a pattern that can match the names of several MBeans. Instances of this class are immutable.\u003c/p\u003e \n\u003cp\u003eAn instance of this class can be used to represent:\u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003eAn object name\u003c/li\u003e \n \u003cli\u003eAn object name pattern, within the context of a query\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003eAn object name consists of two parts, the domain and the key properties.\u003c/p\u003e \n\u003cp\u003eThe \u003cem\u003edomain\u003c/em\u003e is a string of characters not including the character colon (\u003ccode\u003e:\u003c/code\u003e). It is recommended that the domain should not contain the string \"\u003ccode\u003e//\u003c/code\u003e\", which is reserved for future use. \u003c/p\u003e\n\u003cp\u003eIf the domain includes at least one occurrence of the wildcard characters asterisk (\u003ccode\u003e*\u003c/code\u003e) or question mark (\u003ccode\u003e?\u003c/code\u003e), then the object name is a pattern. The asterisk matches any sequence of zero or more characters, while the question mark matches any single character.\u003c/p\u003e \n\u003cp\u003eIf the domain is empty, it will be replaced in certain contexts by the \u003cem\u003edefault domain\u003c/em\u003e of the MBean server in which the ObjectName is used.\u003c/p\u003e \n\u003cp\u003eThe \u003cem\u003ekey properties\u003c/em\u003e are an unordered set of keys and associated values.\u003c/p\u003e \n\u003cp\u003eEach \u003cem\u003ekey\u003c/em\u003e is a nonempty string of characters which may not contain any of the characters comma (\u003ccode\u003e,\u003c/code\u003e), equals (\u003ccode\u003e\u003d\u003c/code\u003e), colon, asterisk, or question mark. The same key may not occur twice in a given ObjectName.\u003c/p\u003e \n\u003cp\u003eEach \u003cem\u003evalue\u003c/em\u003e associated with a key is a string of characters that is either unquoted or quoted.\u003c/p\u003e \n\u003cp\u003eAn \u003cem\u003eunquoted value\u003c/em\u003e is a possibly empty string of characters which may not contain any of the characters comma, equals, colon, or quote.\u003c/p\u003e \n\u003cp\u003eIf the \u003cem\u003eunquoted value\u003c/em\u003e contains at least one occurrence of the wildcard characters asterisk or question mark, then the object name is a \u003cem\u003eproperty value pattern\u003c/em\u003e. The asterisk matches any sequence of zero or more characters, while the question mark matches any single character.\u003c/p\u003e \n\u003cp\u003eA \u003cem\u003equoted value\u003c/em\u003e consists of a quote (\u003ccode\u003e\"\u003c/code\u003e), followed by a possibly empty string of characters, followed by another quote. Within the string of characters, the backslash (\u003ccode\u003e\\\u003c/code\u003e) has a special meaning. It must be followed by one of the following characters:\u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003eAnother backslash. The second backslash has no special meaning and the two characters represent a single backslash.\u003c/li\u003e \n \u003cli\u003eThe character \u0027n\u0027. The two characters represent a newline (\u0027\\n\u0027 in Java).\u003c/li\u003e \n \u003cli\u003eA quote. The two characters represent a quote, and that quote is not considered to terminate the quoted value. An ending closing quote must be present for the quoted value to be valid.\u003c/li\u003e \n \u003cli\u003eA question mark (?) or asterisk (*). The two characters represent a question mark or asterisk respectively.\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003eA quote may not appear inside a quoted value except immediately after an odd number of consecutive backslashes.\u003c/p\u003e \n\u003cp\u003eThe quotes surrounding a quoted value, and any backslashes within that value, are considered to be part of the value.\u003c/p\u003e \n\u003cp\u003eIf the \u003cem\u003equoted value\u003c/em\u003e contains at least one occurrence of the characters asterisk or question mark and they are not preceded by a backslash, then they are considered as wildcard characters and the object name is a \u003cem\u003eproperty value pattern\u003c/em\u003e. The asterisk matches any sequence of zero or more characters, while the question mark matches any single character.\u003c/p\u003e \n\u003cp\u003eAn ObjectName may be a \u003cem\u003eproperty list pattern\u003c/em\u003e. In this case it may have zero or more keys and associated values. It matches a nonpattern ObjectName whose domain matches and that contains the same keys and associated values, as well as possibly other keys and values.\u003c/p\u003e \n\u003cp\u003eAn ObjectName is a \u003cem\u003eproperty value pattern\u003c/em\u003e when at least one of its \u003cem\u003equoted\u003c/em\u003e or \u003cem\u003eunquoted\u003c/em\u003e key property values contains the wildcard characters asterisk or question mark as described above. In this case it has one or more keys and associated values, with at least one of the values containing wildcard characters. It matches a nonpattern ObjectName whose domain matches and that contains the same keys whose values match; if the property value pattern is also a property list pattern then the nonpattern ObjectName can contain other keys and values.\u003c/p\u003e \n\u003cp\u003eAn ObjectName is a \u003cem\u003eproperty pattern\u003c/em\u003e if it is either a \u003cem\u003eproperty list pattern\u003c/em\u003e or a \u003cem\u003eproperty value pattern\u003c/em\u003e or both.\u003c/p\u003e \n\u003cp\u003eAn ObjectName is a pattern if its domain contains a wildcard or if the ObjectName is a property pattern.\u003c/p\u003e \n\u003cp\u003eIf an ObjectName is not a pattern, it must contain at least one key with its associated value.\u003c/p\u003e \n\u003cp\u003eExamples of ObjectName patterns are:\u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003e*:type\u003dFoo,name\u003dBar\u003c/code\u003e to match names in any domain whose exact set of keys is \u003ccode\u003etype\u003dFoo,name\u003dBar\u003c/code\u003e.\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003ed:type\u003dFoo,name\u003dBar,*\u003c/code\u003e to match names in the domain \u003ccode\u003ed\u003c/code\u003e that have the keys \u003ccode\u003etype\u003dFoo,name\u003dBar\u003c/code\u003e plus zero or more other keys.\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003e*:type\u003dFoo,name\u003dBar,*\u003c/code\u003e to match names in any domain that has the keys \u003ccode\u003etype\u003dFoo,name\u003dBar\u003c/code\u003e plus zero or more other keys.\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003ed:type\u003dF?o,name\u003dBar\u003c/code\u003e will match e.g. \u003ccode\u003ed:type\u003dFoo,name\u003dBar\u003c/code\u003e and \u003ccode\u003ed:type\u003dFro,name\u003dBar\u003c/code\u003e.\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003ed:type\u003dF*o,name\u003dBar\u003c/code\u003e will match e.g. \u003ccode\u003ed:type\u003dFo,name\u003dBar\u003c/code\u003e and \u003ccode\u003ed:type\u003dFrodo,name\u003dBar\u003c/code\u003e.\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003ed:type\u003dFoo,name\u003d\"B*\"\u003c/code\u003e will match e.g. \u003ccode\u003ed:type\u003dFoo,name\u003d\"Bling\"\u003c/code\u003e. Wildcards are recognized even inside quotes, and like other special characters can be escaped with \u003ccode\u003e\\\u003c/code\u003e.\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003eAn ObjectName can be written as a String with the following elements in order:\u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003eThe domain. \u003c/li\u003e\n \u003cli\u003eA colon (\u003ccode\u003e:\u003c/code\u003e). \u003c/li\u003e\n \u003cli\u003eA key property list as defined below. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003eA key property list written as a String is a comma-separated list of elements. Each element is either an asterisk or a key property. A key property consists of a key, an equals (\u003ccode\u003e\u003d\u003c/code\u003e), and the associated value.\u003c/p\u003e \n\u003cp\u003eAt most one element of a key property list may be an asterisk. If the key property list contains an asterisk element, the ObjectName is a property list pattern.\u003c/p\u003e \n\u003cp\u003eSpaces have no special significance in a String representing an ObjectName. For example, the String: \u003c/p\u003e\n\u003cpre\u003e domain: key1 \u003d value1 , key2 \u003d value2\n \u003c/pre\u003e represents an ObjectName with two keys. The name of each key contains six characters, of which the first and last are spaces. The value associated with the key \n\u003ccode\u003e\"\u0026nbsp;key1\u0026nbsp;\"\u003c/code\u003e also begins and ends with a space. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIn addition to the restrictions on characters spelt out above, no part of an ObjectName may contain a newline character (\u003ccode\u003e\u0027\\n\u0027\u003c/code\u003e), whether the domain, a key, or a value, whether quoted or unquoted. The newline character can be represented in a quoted value with the sequence \u003ccode\u003e\\n\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThe rules on special characters and quoting apply regardless of which constructor is used to make an ObjectName.\u003c/p\u003e \n\u003cp\u003eTo avoid collisions between MBeans supplied by different vendors, a useful convention is to begin the domain name with the reverse DNS name of the organization that specifies the MBeans, followed by a period and a string whose interpretation is determined by that organization. For example, MBeans specified by \u003ccode\u003eexample.com\u003c/code\u003e would have domains such as \u003ccode\u003ecom.example.MyDomain\u003c/code\u003e. This is essentially the same convention as for Java-language package names.\u003c/p\u003e \n\u003cp\u003eThe \u003cb\u003eserialVersionUID\u003c/b\u003e of this class is \u003ccode\u003e1081892073854801359L\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.management.ObjectName\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "implNote": [
      "The maximum allowed length of the domain name in this implementation is \n\u003ccode\u003eInteger.MAX_VALUE/4\u003c/code\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}