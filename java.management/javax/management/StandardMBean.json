{
  "packageName": "javax.management",
  "simpleName": "StandardMBean",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.NotCompliantMBeanException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "implementation"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setImplementation",
      "comment": "Replace the implementation object wrapped in this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/StandardMBean.html#getImplementation()\"\u003e\u003ccode\u003egetImplementation()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eimplementation\u003c/code\u003e - The new implementation of this Standard MBean (or MXBean). The \n\u003ccode\u003eimplementation\u003c/code\u003e object must implement the Standard MBean (or MXBean) interface that was supplied when this \n\u003ccode\u003eStandardMBean\u003c/code\u003e was constructed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003cvar\u003eimplementation\u003c/var\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotCompliantMBeanException.html\" title\u003d\"class in javax.management\"\u003eNotCompliantMBeanException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003cvar\u003eimplementation\u003c/var\u003e does not implement the Standard MBean (or MXBean) interface that was supplied at construction."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getImplementation",
      "comment": "Get the implementation of this Standard MBean (or MXBean).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/StandardMBean.html#setImplementation(java.lang.Object)\"\u003e\u003ccode\u003esetImplementation(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The implementation of this Standard MBean (or MXBean)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getMBeanInterface",
      "comment": "Get the Management Interface of this Standard MBean (or MXBean).",
      "tagMap": {
        "return": [
          "The management interface of this Standard MBean (or MXBean)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getImplementationClass",
      "comment": "Get the class of the implementation of this Standard MBean (or MXBean).",
      "tagMap": {
        "return": [
          "The class of the implementation of this Standard MBean (or MXBean)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.AttributeNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.MBeanException",
          "type": "Class"
        },
        {
          "name": "javax.management.ReflectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attribute"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAttribute",
      "comment": "Description copied from interface: DynamicMBean",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html#setAttribute(javax.management.Attribute)\"\u003e\u003ccode\u003eDynamicMBean.setAttribute(javax.management.Attribute)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html#getAttribute(java.lang.String)\"\u003egetAttribute\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html\" title\u003d\"interface in javax.management\"\u003eDynamicMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eattribute\u003c/code\u003e - The name of the attribute to be retrieved"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/AttributeNotFoundException.html\" title\u003d\"class in javax.management\"\u003eAttributeNotFoundException\u003c/a\u003e\u003c/code\u003e - if specified attribute does not exist or cannot be retrieved",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanException.html\" title\u003d\"class in javax.management\"\u003eMBeanException\u003c/a\u003e\u003c/code\u003e - Wraps a \n\u003ccode\u003ejava.lang.Exception\u003c/code\u003e thrown by the MBean\u0027s getter.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ReflectionException.html\" title\u003d\"class in javax.management\"\u003eReflectionException\u003c/a\u003e\u003c/code\u003e - Wraps a \n\u003ccode\u003ejava.lang.Exception\u003c/code\u003e thrown while trying to invoke the getter."
        ],
        "return": [
          "The value of the attribute retrieved."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.AttributeNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.InvalidAttributeValueException",
          "type": "Class"
        },
        {
          "name": "javax.management.MBeanException",
          "type": "Class"
        },
        {
          "name": "javax.management.ReflectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.Attribute",
            "type": "Class"
          },
          "field": {
            "name": "attribute"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAttribute",
      "comment": "Description copied from interface: DynamicMBean",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html#getAttribute(java.lang.String)\"\u003e\u003ccode\u003eDynamicMBean.getAttribute(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html#setAttribute(javax.management.Attribute)\"\u003esetAttribute\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html\" title\u003d\"interface in javax.management\"\u003eDynamicMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eattribute\u003c/code\u003e - The identification of the attribute to be set and the value it is to be set to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/AttributeNotFoundException.html\" title\u003d\"class in javax.management\"\u003eAttributeNotFoundException\u003c/a\u003e\u003c/code\u003e - if specified attribute does not exist or cannot be retrieved",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/InvalidAttributeValueException.html\" title\u003d\"class in javax.management\"\u003eInvalidAttributeValueException\u003c/a\u003e\u003c/code\u003e - if value specified is not valid for the attribute",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanException.html\" title\u003d\"class in javax.management\"\u003eMBeanException\u003c/a\u003e\u003c/code\u003e - Wraps a \n\u003ccode\u003ejava.lang.Exception\u003c/code\u003e thrown by the MBean\u0027s setter.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ReflectionException.html\" title\u003d\"class in javax.management\"\u003eReflectionException\u003c/a\u003e\u003c/code\u003e - Wraps a \n\u003ccode\u003ejava.lang.Exception\u003c/code\u003e thrown while trying to invoke the MBean\u0027s setter."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.AttributeList",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "attributes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAttributes",
      "comment": "Description copied from interface: DynamicMBean",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html#setAttributes(javax.management.AttributeList)\"\u003e\u003ccode\u003eDynamicMBean.setAttributes(javax.management.AttributeList)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html#getAttributes(java.lang.String%5B%5D)\"\u003egetAttributes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html\" title\u003d\"interface in javax.management\"\u003eDynamicMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eattributes\u003c/code\u003e - A list of the attributes to be retrieved."
        ],
        "return": [
          "The list of attributes retrieved."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.AttributeList",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.AttributeList",
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAttributes",
      "comment": "Description copied from interface: DynamicMBean",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html#getAttributes(java.lang.String%5B%5D)\"\u003e\u003ccode\u003eDynamicMBean.getAttributes(java.lang.String[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html#setAttributes(javax.management.AttributeList)\"\u003esetAttributes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html\" title\u003d\"interface in javax.management\"\u003eDynamicMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eattributes\u003c/code\u003e - A list of attributes: The identification of the attributes to be set and the values they are to be set to."
        ],
        "return": [
          "The list of attributes that were set, with their new values."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.MBeanException",
          "type": "Class"
        },
        {
          "name": "javax.management.ReflectionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "actionName"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "params"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "signature"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "invoke",
      "comment": "Description copied from interface: DynamicMBean",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html#invoke(java.lang.String,java.lang.Object%5B%5D,java.lang.String%5B%5D)\"\u003einvoke\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html\" title\u003d\"interface in javax.management\"\u003eDynamicMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eactionName\u003c/code\u003e - The name of the action to be invoked.",
          "\u003ccode\u003eparams\u003c/code\u003e - An array containing the parameters to be set when the action is invoked.",
          "\u003ccode\u003esignature\u003c/code\u003e - An array containing the signature of the action. The class objects will be loaded through the same class loader as the one used for loading the MBean on which the action is invoked."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanException.html\" title\u003d\"class in javax.management\"\u003eMBeanException\u003c/a\u003e\u003c/code\u003e - Wraps a \n\u003ccode\u003ejava.lang.Exception\u003c/code\u003e thrown by the MBean\u0027s invoked method.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ReflectionException.html\" title\u003d\"class in javax.management\"\u003eReflectionException\u003c/a\u003e\u003c/code\u003e - Wraps a \n\u003ccode\u003ejava.lang.Exception\u003c/code\u003e thrown while trying to invoke the method"
        ],
        "return": [
          "The object returned by the action, which represents the result of invoking the action on the MBean specified."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.MBeanInfo",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMBeanInfo",
      "comment": "Get the MBeanInfo for this MBean. This method implements DynamicMBean.getMBeanInfo(). This method first calls getCachedMBeanInfo() in order to retrieve the cached MBeanInfo for this MBean, if any. If the MBeanInfo returned by getCachedMBeanInfo() is not null, then it is returned. Otherwise, this method builds a default MBeanInfo for this MBean, using the Management Interface specified for this MBean. While building the MBeanInfo, this method calls the customization hooks that make it possible for subclasses to supply their custom descriptions, parameter names, etc... Finally, it calls cacheMBeanInfo() in order to cache the new MBeanInfo.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html#getMBeanInfo()\"\u003egetMBeanInfo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/DynamicMBean.html\" title\u003d\"interface in javax.management\"\u003eDynamicMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The cached MBeanInfo for that MBean, if not null, or a newly built MBeanInfo if none was cached."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getClassName",
      "comment": "Customization hook: Get the className that will be used in the MBeanInfo returned by this MBean. Subclasses may redefine this method in order to supply their custom class name. The default implementation returns info.getClassName().",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - The default MBeanInfo derived by reflection."
        ],
        "return": [
          "the class name for the new MBeanInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getDescription",
      "comment": "Customization hook: Get the description that will be used in the MBeanInfo returned by this MBean. Subclasses may redefine this method in order to supply their custom MBean description. The default implementation returns info.getDescription().",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - The default MBeanInfo derived by reflection."
        ],
        "return": [
          "the description for the new MBeanInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanFeatureInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getDescription",
      "comment": "Customization hook: Get the description that will be used in the MBeanFeatureInfo returned by this MBean. Subclasses may redefine this method in order to supply their custom description. The default implementation returns info.getDescription(). This method is called by getDescription(MBeanAttributeInfo), getDescription(MBeanOperationInfo), getDescription(MBeanConstructorInfo).",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - The default MBeanFeatureInfo derived by reflection."
        ],
        "return": [
          "the description for the given MBeanFeatureInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanAttributeInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getDescription",
      "comment": "Customization hook: Get the description that will be used in the MBeanAttributeInfo returned by this MBean. Subclasses may redefine this method in order to supply their custom description. The default implementation returns getDescription((MBeanFeatureInfo) info).",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - The default MBeanAttributeInfo derived by reflection."
        ],
        "return": [
          "the description for the given MBeanAttributeInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanConstructorInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getDescription",
      "comment": "Customization hook: Get the description that will be used in the MBeanConstructorInfo returned by this MBean. Subclasses may redefine this method in order to supply their custom description. The default implementation returns getDescription((MBeanFeatureInfo) info).",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - The default MBeanConstructorInfo derived by reflection."
        ],
        "return": [
          "the description for the given MBeanConstructorInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanConstructorInfo",
            "type": "Class"
          },
          "field": {
            "name": "ctor"
          }
        },
        {
          "type": {
            "name": "javax.management.MBeanParameterInfo",
            "type": "Class"
          },
          "field": {
            "name": "param"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sequence"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getDescription",
      "comment": "Customization hook: Get the description that will be used for the sequence MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean. Subclasses may redefine this method in order to supply their custom description. The default implementation returns param.getDescription().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ector\u003c/code\u003e - The default MBeanConstructorInfo derived by reflection.",
          "\u003ccode\u003eparam\u003c/code\u003e - The default MBeanParameterInfo derived by reflection.",
          "\u003ccode\u003esequence\u003c/code\u003e - The sequence number of the parameter considered (\"0\" for the first parameter, \"1\" for the second parameter, etc...)."
        ],
        "return": [
          "the description for the given MBeanParameterInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanConstructorInfo",
            "type": "Class"
          },
          "field": {
            "name": "ctor"
          }
        },
        {
          "type": {
            "name": "javax.management.MBeanParameterInfo",
            "type": "Class"
          },
          "field": {
            "name": "param"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sequence"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getParameterName",
      "comment": "Customization hook: Get the name that will be used for the sequence MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean. Subclasses may redefine this method in order to supply their custom parameter name. The default implementation returns param.getName().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ector\u003c/code\u003e - The default MBeanConstructorInfo derived by reflection.",
          "\u003ccode\u003eparam\u003c/code\u003e - The default MBeanParameterInfo derived by reflection.",
          "\u003ccode\u003esequence\u003c/code\u003e - The sequence number of the parameter considered (\"0\" for the first parameter, \"1\" for the second parameter, etc...)."
        ],
        "return": [
          "the name for the given MBeanParameterInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanOperationInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getDescription",
      "comment": "Customization hook: Get the description that will be used in the MBeanOperationInfo returned by this MBean. Subclasses may redefine this method in order to supply their custom description. The default implementation returns getDescription((MBeanFeatureInfo) info).",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - The default MBeanOperationInfo derived by reflection."
        ],
        "return": [
          "the description for the given MBeanOperationInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanOperationInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getImpact",
      "comment": "Customization hook: Get the impact flag of the operation that will be used in the MBeanOperationInfo returned by this MBean. Subclasses may redefine this method in order to supply their custom impact flag. The default implementation returns info.getImpact().",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - The default MBeanOperationInfo derived by reflection."
        ],
        "return": [
          "the impact flag for the given MBeanOperationInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanOperationInfo",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "javax.management.MBeanParameterInfo",
            "type": "Class"
          },
          "field": {
            "name": "param"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sequence"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getParameterName",
      "comment": "Customization hook: Get the name that will be used for the sequence MBeanParameterInfo of the MBeanOperationInfo returned by this MBean. Subclasses may redefine this method in order to supply their custom parameter name. The default implementation returns param.getName().",
      "tagMap": {
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - The default MBeanOperationInfo derived by reflection.",
          "\u003ccode\u003eparam\u003c/code\u003e - The default MBeanParameterInfo derived by reflection.",
          "\u003ccode\u003esequence\u003c/code\u003e - The sequence number of the parameter considered (\"0\" for the first parameter, \"1\" for the second parameter, etc...)."
        ],
        "return": [
          "the name to use for the given MBeanParameterInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanOperationInfo",
            "type": "Class"
          },
          "field": {
            "name": "op"
          }
        },
        {
          "type": {
            "name": "javax.management.MBeanParameterInfo",
            "type": "Class"
          },
          "field": {
            "name": "param"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sequence"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getDescription",
      "comment": "Customization hook: Get the description that will be used for the sequence MBeanParameterInfo of the MBeanOperationInfo returned by this MBean. Subclasses may redefine this method in order to supply their custom description. The default implementation returns param.getDescription().",
      "tagMap": {
        "param": [
          "\u003ccode\u003eop\u003c/code\u003e - The default MBeanOperationInfo derived by reflection.",
          "\u003ccode\u003eparam\u003c/code\u003e - The default MBeanParameterInfo derived by reflection.",
          "\u003ccode\u003esequence\u003c/code\u003e - The sequence number of the parameter considered (\"0\" for the first parameter, \"1\" for the second parameter, etc...)."
        ],
        "return": [
          "the description for the given MBeanParameterInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.MBeanConstructorInfo",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanConstructorInfo",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "ctors"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "impl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getConstructors",
      "comment": "Customization hook: Get the MBeanConstructorInfo[] that will be used in the MBeanInfo returned by this MBean. By default, this method returns null if the wrapped implementation is not this. Indeed, if the wrapped implementation is not this object itself, it will not be possible to recreate a wrapped implementation by calling the implementation constructors through MBeanServer.createMBean(...). Otherwise, if the wrapped implementation is this, ctors is returned. Subclasses may redefine this method in order to modify this behavior, if needed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ectors\u003c/code\u003e - The default MBeanConstructorInfo[] derived by reflection.",
          "\u003ccode\u003eimpl\u003c/code\u003e - The wrapped implementation. If \n\u003ccode\u003enull\u003c/code\u003e is passed, the wrapped implementation is ignored and \n\u003cvar\u003ectors\u003c/var\u003e is returned."
        ],
        "return": [
          "the MBeanConstructorInfo[] for the new MBeanInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.MBeanInfo",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getCachedMBeanInfo",
      "comment": "Customization hook: Return the MBeanInfo cached for this object. Subclasses may redefine this method in order to implement their own caching policy. The default implementation stores one MBeanInfo object per instance.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/StandardMBean.html#cacheMBeanInfo(javax.management.MBeanInfo)\"\u003e\u003ccode\u003ecacheMBeanInfo(MBeanInfo)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The cached MBeanInfo, or null if no MBeanInfo is cached."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "cacheMBeanInfo",
      "comment": "Customization hook: cache the MBeanInfo built for this object. Subclasses may redefine this method in order to implement their own caching policy. The default implementation stores info in this instance. A subclass can define other policies, such as not saving info (so it is reconstructed every time getMBeanInfo() is called) or sharing a unique MBeanInfo object when several StandardMBean instances have equal MBeanInfo values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - the new \n\u003ccode\u003eMBeanInfo\u003c/code\u003e to cache. Any previously cached value is discarded. This parameter may be null, in which case there is no new cached value."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanServer",
            "type": "Class"
          },
          "field": {
            "name": "server"
          }
        },
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preRegister",
      "comment": "Allows the MBean to perform any operations it needs before being registered in the MBean server. If the name of the MBean is not specified, the MBean can provide a name for its registration. If any exception is raised, the MBean will not be registered in the MBean server. The default implementation of this method returns the name parameter. It does nothing else for Standard MBeans. For MXBeans, it records the MBeanServer and ObjectName parameters so they can be used to translate inter-MXBean references. It is good practice for a subclass that overrides this method to call the overridden method via super.preRegister(...). This is necessary if this object is an MXBean that is referenced by attributes or operations in other MXBeans.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#preRegister(javax.management.MBeanServer,javax.management.ObjectName)\"\u003epreRegister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eserver\u003c/code\u003e - The MBean server in which the MBean will be registered.",
          "\u003ccode\u003ename\u003c/code\u003e - The object name of the MBean. This name is null if the name parameter to one of the \n\u003ccode\u003ecreateMBean\u003c/code\u003e or \n\u003ccode\u003eregisterMBean\u003c/code\u003e methods in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanServer.html\" title\u003d\"interface in javax.management\"\u003e\u003ccode\u003eMBeanServer\u003c/code\u003e\u003c/a\u003e interface is null. In that case, this method must return a non-null ObjectName for the new MBean."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this is an MXBean and \n\u003ccode\u003ename\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/InstanceAlreadyExistsException.html\" title\u003d\"class in javax.management\"\u003eInstanceAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if this is an MXBean and it has already been registered under another name (in this MBean Server or another).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - no other checked exceptions are thrown by this method but \n\u003ccode\u003eException\u003c/code\u003e is declared so that subclasses can override the method and throw their own exceptions."
        ],
        "return": [
          "The name under which the MBean is to be registered. This value must not be null. If the \n\u003ccode\u003ename\u003c/code\u003e parameter is not null, it will usually but not necessarily be the returned value."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Boolean",
            "type": "Class"
          },
          "field": {
            "name": "registrationDone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postRegister",
      "comment": "Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed. The default implementation of this method does nothing for Standard MBeans. For MXBeans, it undoes any work done by preRegister if registration fails. It is good practice for a subclass that overrides this method to call the overridden method via super.postRegister(...). This is necessary if this object is an MXBean that is referenced by attributes or operations in other MXBeans.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#postRegister(java.lang.Boolean)\"\u003epostRegister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eregistrationDone\u003c/code\u003e - Indicates whether or not the MBean has been successfully registered in the MBean server. The value false means that the registration phase has failed."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preDeregister",
      "comment": "Allows the MBean to perform any operations it needs before being unregistered by the MBean server. The default implementation of this method does nothing. It is good practice for a subclass that overrides this method to call the overridden method via super.preDeregister(...).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#preDeregister()\"\u003epreDeregister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - no checked exceptions are throw by this method but \n\u003ccode\u003eException\u003c/code\u003e is declared so that subclasses can override this method and throw their own exceptions."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postDeregister",
      "comment": "Allows the MBean to perform any operations needed after having been unregistered in the MBean server. The default implementation of this method does nothing for Standard MBeans. For MXBeans, it removes any information that was recorded by the preRegister method. It is good practice for a subclass that overrides this method to call the overridden method via super.postRegister(...). This is necessary if this object is an MXBean that is referenced by attributes or operations in other MXBeans.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#postDeregister()\"\u003epostDeregister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.management.NotCompliantMBeanException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "implementation"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mbeanInterface"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Make a DynamicMBean out of the object implementation, using the specified mbeanInterface class.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - Allows the compiler to check that \n\u003ccode\u003eimplementation\u003c/code\u003e does indeed implement the class described by \n\u003ccode\u003embeanInterface\u003c/code\u003e. The compiler can only check this if \n\u003ccode\u003embeanInterface\u003c/code\u003e is a class literal such as \n\u003ccode\u003eMyMBean.class\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003eimplementation\u003c/code\u003e - The implementation of this MBean.",
          "\u003ccode\u003embeanInterface\u003c/code\u003e - The Management Interface exported by this MBean\u0027s implementation. If \n\u003ccode\u003enull\u003c/code\u003e, then this object will use standard JMX design pattern to determine the management interface associated with the given implementation."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003cvar\u003eimplementation\u003c/var\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotCompliantMBeanException.html\" title\u003d\"class in javax.management\"\u003eNotCompliantMBeanException\u003c/a\u003e\u003c/code\u003e - if the \n\u003cvar\u003embeanInterface\u003c/var\u003e does not follow JMX design patterns for Management Interfaces, or if the given \n\u003cvar\u003eimplementation\u003c/var\u003e does not implement the specified interface."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.management.NotCompliantMBeanException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mbeanInterface"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Make a DynamicMBean out of this, using the specified mbeanInterface class. Calls this(this,mbeanInterface). This constructor is reserved to subclasses.",
      "tagMap": {
        "param": [
          "\u003ccode\u003embeanInterface\u003c/code\u003e - The Management Interface exported by this MBean."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotCompliantMBeanException.html\" title\u003d\"class in javax.management\"\u003eNotCompliantMBeanException\u003c/a\u003e\u003c/code\u003e - if the \n\u003cvar\u003embeanInterface\u003c/var\u003e does not follow JMX design patterns for Management Interfaces, or if \n\u003cvar\u003ethis\u003c/var\u003e does not implement the specified interface."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "implementation"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mbeanInterface"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isMXBean"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Make a DynamicMBean out of the object implementation, using the specified mbeanInterface class, and choosing whether the resultant MBean is an MXBean. This constructor can be used to make either Standard MBeans or MXBeans. Unlike the constructor StandardMBean(Object, Class), it does not throw NotCompliantMBeanException.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - Allows the compiler to check that \n\u003ccode\u003eimplementation\u003c/code\u003e does indeed implement the class described by \n\u003ccode\u003embeanInterface\u003c/code\u003e. The compiler can only check this if \n\u003ccode\u003embeanInterface\u003c/code\u003e is a class literal such as \n\u003ccode\u003eMyMBean.class\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003eimplementation\u003c/code\u003e - The implementation of this MBean.",
          "\u003ccode\u003embeanInterface\u003c/code\u003e - The Management Interface exported by this MBean\u0027s implementation. If \n\u003ccode\u003enull\u003c/code\u003e, then this object will use standard JMX design pattern to determine the management interface associated with the given implementation.",
          "\u003ccode\u003eisMXBean\u003c/code\u003e - If true, the \n\u003ccode\u003embeanInterface\u003c/code\u003e parameter names an MXBean interface and the resultant MBean is an MXBean."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003cvar\u003eimplementation\u003c/var\u003e is null, or if the \n\u003cvar\u003embeanInterface\u003c/var\u003e does not follow JMX design patterns for Management Interfaces, or if the given \n\u003cvar\u003eimplementation\u003c/var\u003e does not implement the specified interface."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mbeanInterface"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isMXBean"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Make a DynamicMBean out of this, using the specified mbeanInterface class, and choosing whether the resulting MBean is an MXBean. This constructor can be used to make either Standard MBeans or MXBeans. Unlike the constructor StandardMBean(Object, Class), it does not throw NotCompliantMBeanException. Calls this(this, mbeanInterface, isMXBean). This constructor is reserved to subclasses.",
      "tagMap": {
        "param": [
          "\u003ccode\u003embeanInterface\u003c/code\u003e - The Management Interface exported by this MBean.",
          "\u003ccode\u003eisMXBean\u003c/code\u003e - If true, the \n\u003ccode\u003embeanInterface\u003c/code\u003e parameter names an MXBean interface and the resultant MBean is an MXBean."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003cvar\u003embeanInterface\u003c/var\u003e does not follow JMX design patterns for Management Interfaces, or if \n\u003cvar\u003ethis\u003c/var\u003e does not implement the specified interface."
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.StandardMBean",
  "comment": "\u003cp\u003eAn MBean whose management interface is determined by reflection on a Java interface.\u003c/p\u003e \n\u003cp\u003eThis class brings more flexibility to the notion of Management Interface in the use of Standard MBeans. Straightforward use of the patterns for Standard MBeans described in the JMX Specification means that there is a fixed relationship between the implementation class of an MBean and its management interface (i.e., if the implementation class is Thing, the management interface must be ThingMBean). This class makes it possible to keep the convenience of specifying the management interface with a Java interface, without requiring that there be any naming relationship between the implementation and interface classes.\u003c/p\u003e \n\u003cp\u003eBy making a DynamicMBean out of an MBean, this class makes it possible to select any interface implemented by the MBean as its management interface, provided that it complies with JMX patterns (i.e., attributes defined by getter/setter etc...).\u003c/p\u003e \n\u003cp\u003e This class also provides hooks that make it possible to supply custom descriptions and names for the \u003ca href\u003d\"MBeanInfo.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eMBeanInfo\u003c/code\u003e\u003c/a\u003e returned by the DynamicMBean interface.\u003c/p\u003e \n\u003cp\u003eUsing this class, an MBean can be created with any implementation class name \u003ci\u003eImpl\u003c/i\u003e and with a management interface defined (as for current Standard MBeans) by any interface \u003ci\u003eIntf\u003c/i\u003e, in one of two general ways:\u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003eUsing the public constructor \u003ca href\u003d\"#%3Cinit%3E(T,java.lang.Class,boolean)\"\u003e\u003ccode\u003eStandardMBean(impl,interface)\u003c/code\u003e\u003c/a\u003e: \u003cpre\u003e     MBeanServer mbs;\n     ...\n     Impl impl \u003d new Impl(...);\n     StandardMBean mbean \u003d new StandardMBean(impl, Intf.class, false);\n     mbs.registerMBean(mbean, objectName);\n     \u003c/pre\u003e\u003c/li\u003e \n \u003cli\u003eSubclassing StandardMBean: \u003cpre\u003e     public class Impl extends StandardMBean implements Intf {\n        public Impl() {\n          super(Intf.class, false);\n       }\n       // implement methods of Intf\n     }\n\n     [...]\n\n     MBeanServer mbs;\n     ....\n     Impl impl \u003d new Impl();\n     mbs.registerMBean(impl, objectName);\n     \u003c/pre\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003eIn either case, the class \u003ci\u003eImpl\u003c/i\u003e must implement the interface \u003ci\u003eIntf\u003c/i\u003e.\u003c/p\u003e \n\u003cp\u003eStandard MBeans based on the naming relationship between implementation and interface classes are of course still available.\u003c/p\u003e \n\u003cp\u003eThis class may also be used to construct MXBeans. The usage is exactly the same as for Standard MBeans except that in the examples above, the \u003ccode\u003efalse\u003c/code\u003e parameter to the constructor or \u003ccode\u003esuper(...)\u003c/code\u003e invocation is instead \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}