{
  "packageName": "javax.management.openmbean",
  "simpleName": "ArrayType",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "javax.management.openmbean.OpenType",
    "parameters": [
      {
        "name": "T",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDimension",
      "comment": "Returns the dimension of arrays described by this ArrayType instance.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the dimension."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.openmbean.OpenType",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getElementOpenType",
      "comment": "Returns the open type of element values contained in the arrays described by this ArrayType instance.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the element type."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPrimitiveArray",
      "comment": "Returns true if the open data values this open type describes are primitive arrays, false otherwise.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this is a primitive array type."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isValue",
      "comment": "Tests whether obj is a value for this ArrayType instance. This method returns true if and only if obj is not null, obj is an array and any one of the following is true: if this ArrayType instance describes an array of SimpleType elements or their corresponding primitive types, obj\u0027s class name is the same as the className field defined for this ArrayType instance (i.e. the class name returned by the getClassName method, which includes the dimension information), if this ArrayType instance describes an array of classes implementing the TabularData interface or the CompositeData interface, obj is assignable to such a declared array, and each element contained in {obj is either null or a valid value for the element\u0027s open type specified by this ArrayType instance.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/OpenType.html#isValue(java.lang.Object)\"\u003eisValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/OpenType.html\" title\u003d\"class in javax.management.openmbean\"\u003eOpenType\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/ArrayType.html\" title\u003d\"type parameter in ArrayType\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003cvar\u003eobj\u003c/var\u003e is a value for this \n\u003ccode\u003eArrayType\u003c/code\u003e instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares the specified obj parameter with this ArrayType instance for equality. Two ArrayType instances are equal if and only if they describe array instances which have the same dimension, elements\u0027 open type and primitive array flag.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/OpenType.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/OpenType.html\" title\u003d\"class in javax.management.openmbean\"\u003eOpenType\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/ArrayType.html\" title\u003d\"type parameter in ArrayType\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to be compared for equality with this \n\u003ccode\u003eArrayType\u003c/code\u003e instance; if \n\u003cvar\u003eobj\u003c/var\u003e is \n\u003ccode\u003enull\u003c/code\u003e or is not an instance of the class \n\u003ccode\u003eArrayType\u003c/code\u003e this method returns \n\u003ccode\u003efalse\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified object is equal to this \n\u003ccode\u003eArrayType\u003c/code\u003e instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code value for this ArrayType instance. The hash code of an ArrayType instance is the sum of the hash codes of all the elements of information used in equals comparisons (i.e. dimension, elements\u0027 open type and primitive array flag). The hashcode for a primitive value is the hashcode of the corresponding boxed object (e.g. the hashcode for true is Boolean.TRUE.hashCode()). This ensures that t1.equals(t2) implies that t1.hashCode()\u003d\u003dt2.hashCode() for any two ArrayType instances t1 and t2, as required by the general contract of the method Object.hashCode(). As ArrayType instances are immutable, the hash code for this instance is calculated once, on the first call to hashCode, and then the same value is returned for subsequent calls.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the hash code value for this \n\u003ccode\u003eArrayType\u003c/code\u003e instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this ArrayType instance. The string representation consists of the name of this class (i.e. javax.management.openmbean.ArrayType), the type name, the dimension, the elements\u0027 open type and the primitive array flag defined for this instance. As ArrayType instances are immutable, the string representation for this instance is calculated once, on the first call to toString, and then the same value is returned for subsequent calls.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/OpenType.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/OpenType.html\" title\u003d\"class in javax.management.openmbean\"\u003eOpenType\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/ArrayType.html\" title\u003d\"type parameter in ArrayType\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eArrayType\u003c/code\u003e instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.openmbean.ArrayType",
        "parameters": [
          {
            "name": "E",
            "type": "Class",
            "arrayDimensions": 1
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.openmbean.OpenDataException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.management.openmbean.OpenType",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "elementType",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getArrayType",
      "comment": "Create an ArrayType instance in a type-safe manner. Multidimensional arrays can be built up by calling this method as many times as necessary. Calling this method twice with the same parameters may return the same object or two equal but not identical objects. As an example, the following piece of code: \n ArrayType\u003cString[]\u003e t1 \u003d ArrayType.getArrayType(SimpleType.STRING);\n ArrayType\u003cString[][]\u003e t2 \u003d ArrayType.getArrayType(t1);\n ArrayType\u003cString[][][]\u003e t3 \u003d ArrayType.getArrayType(t2);\n System.out.println(\"array class name       \u003d \" + t3.getClassName());\n System.out.println(\"element class name     \u003d \" + t3.getElementOpenType().getClassName());\n System.out.println(\"array type name        \u003d \" + t3.getTypeName());\n System.out.println(\"array type description \u003d \" + t3.getDescription());\n would produce the following output: \n array class name       \u003d [[[Ljava.lang.String;\n element class name     \u003d java.lang.String\n array type name        \u003d [[[Ljava.lang.String;\n array type description \u003d 3-dimension array of java.lang.String",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the Java type that described instances must have"
        ],
        "param": [
          "\u003ccode\u003eelementType\u003c/code\u003e - the \n\u003ci\u003eopen type\u003c/i\u003e of element values contained in the arrays described by this \n\u003ccode\u003eArrayType\u003c/code\u003e instance; must be an instance of either \n\u003ccode\u003eSimpleType\u003c/code\u003e, \n\u003ccode\u003eCompositeType\u003c/code\u003e, \n\u003ccode\u003eTabularType\u003c/code\u003e or another \n\u003ccode\u003eArrayType\u003c/code\u003e with a \n\u003ccode\u003eSimpleType\u003c/code\u003e, \n\u003ccode\u003eCompositeType\u003c/code\u003e or \n\u003ccode\u003eTabularType\u003c/code\u003e as its \n\u003ccode\u003eelementType\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/OpenDataException.html\" title\u003d\"class in javax.management.openmbean\"\u003eOpenDataException\u003c/a\u003e\u003c/code\u003e - if \n\u003cvar\u003eelementType\u0027s className\u003c/var\u003e is not one of the allowed Java class names for open data."
        ],
        "return": [
          "an \n\u003ccode\u003eArrayType\u003c/code\u003e instance"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.openmbean.ArrayType",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "arrayClass",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getPrimitiveArrayType",
      "comment": "Create an ArrayType instance in a type-safe manner. Calling this method twice with the same parameters may return the same object or two equal but not identical objects. As an example, the following piece of code: \n ArrayType\u003cint[][][]\u003e t \u003d ArrayType.getPrimitiveArrayType(int[][][].class);\n System.out.println(\"array class name       \u003d \" + t.getClassName());\n System.out.println(\"element class name     \u003d \" + t.getElementOpenType().getClassName());\n System.out.println(\"array type name        \u003d \" + t.getTypeName());\n System.out.println(\"array type description \u003d \" + t.getDescription());\n would produce the following output: \n array class name       \u003d [[[I\n element class name     \u003d java.lang.Integer\n array type name        \u003d [[[I\n array type description \u003d 3-dimension array of int",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the Java type that described instances must have"
        ],
        "param": [
          "\u003ccode\u003earrayClass\u003c/code\u003e - a primitive array class such as \n\u003ccode\u003eint[].class\u003c/code\u003e, \n\u003ccode\u003eboolean[][].class\u003c/code\u003e, etc. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/ArrayType.html#getElementOpenType()\"\u003e\u003ccode\u003egetElementOpenType()\u003c/code\u003e\u003c/a\u003e method of the returned \n\u003ccode\u003eArrayType\u003c/code\u003e returns the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/SimpleType.html\" title\u003d\"class in javax.management.openmbean\"\u003e\u003ccode\u003eSimpleType\u003c/code\u003e\u003c/a\u003e corresponding to the wrapper type of the primitive type of the array."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003cvar\u003earrayClass\u003c/var\u003e is not a primitive array."
        ],
        "return": [
          "an \n\u003ccode\u003eArrayType\u003c/code\u003e instance"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.management.openmbean.OpenDataException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dimension",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.management.openmbean.OpenType",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "elementType",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs an ArrayType instance describing open data values which are arrays with dimension dimension of elements whose open type is elementType. When invoked on an ArrayType instance, the getClassName method returns the class name of the array instances it describes (following the rules defined by the getName method of java.lang.Class), not the class name of the array elements (which is returned by a call to getElementOpenType().getClassName()). The internal field corresponding to the type name of this ArrayType instance is also set to the class name of the array instances it describes. In other words, the methods getClassName and getTypeName return the same string value. The internal field corresponding to the description of this ArrayType instance is set to a string value which follows the following template: if non-primitive array: \u003cdimension\u003e-dimension array of \u003celement_class_name\u003e if primitive array: \u003cdimension\u003e-dimension array of \u003cprimitive_type_of_the_element_class_name\u003e As an example, the following piece of code: \n ArrayType\u003cString[][][]\u003e t \u003d new ArrayType\u003cString[][][]\u003e(3, SimpleType.STRING);\n System.out.println(\"array class name       \u003d \" + t.getClassName());\n System.out.println(\"element class name     \u003d \" + t.getElementOpenType().getClassName());\n System.out.println(\"array type name        \u003d \" + t.getTypeName());\n System.out.println(\"array type description \u003d \" + t.getDescription());\n would produce the following output: \n array class name       \u003d [[[Ljava.lang.String;\n element class name     \u003d java.lang.String\n array type name        \u003d [[[Ljava.lang.String;\n array type description \u003d 3-dimension array of java.lang.String\n And the following piece of code which is equivalent to the one listed above would also produce the same output: \n ArrayType\u003cString[]\u003e t1 \u003d new ArrayType\u003cString[]\u003e(1, SimpleType.STRING);\n ArrayType\u003cString[][]\u003e t2 \u003d new ArrayType\u003cString[][]\u003e(1, t1);\n ArrayType\u003cString[][][]\u003e t3 \u003d new ArrayType\u003cString[][][]\u003e(1, t2);\n System.out.println(\"array class name       \u003d \" + t3.getClassName());\n System.out.println(\"element class name     \u003d \" + t3.getElementOpenType().getClassName());\n System.out.println(\"array type name        \u003d \" + t3.getTypeName());\n System.out.println(\"array type description \u003d \" + t3.getDescription());",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edimension\u003c/code\u003e - the dimension of arrays described by this \n\u003ccode\u003eArrayType\u003c/code\u003e instance; must be greater than or equal to 1.",
          "\u003ccode\u003eelementType\u003c/code\u003e - the \n\u003ci\u003eopen type\u003c/i\u003e of element values contained in the arrays described by this \n\u003ccode\u003eArrayType\u003c/code\u003e instance; must be an instance of either \n\u003ccode\u003eSimpleType\u003c/code\u003e, \n\u003ccode\u003eCompositeType\u003c/code\u003e, \n\u003ccode\u003eTabularType\u003c/code\u003e or another \n\u003ccode\u003eArrayType\u003c/code\u003e with a \n\u003ccode\u003eSimpleType\u003c/code\u003e, \n\u003ccode\u003eCompositeType\u003c/code\u003e or \n\u003ccode\u003eTabularType\u003c/code\u003e as its \n\u003ccode\u003eelementType\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edimension\u003c/code\u003e is not a positive integer.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/OpenDataException.html\" title\u003d\"class in javax.management.openmbean\"\u003eOpenDataException\u003c/a\u003e\u003c/code\u003e - if \n\u003cvar\u003eelementType\u0027s className\u003c/var\u003e is not one of the allowed Java class names for open data."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.management.openmbean.OpenDataException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.management.openmbean.SimpleType",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "elementType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "primitiveArray",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a unidimensional ArrayType instance for the supplied SimpleType. This constructor supports the creation of arrays of primitive types when primitiveArray is true. For primitive arrays the getElementOpenType() method returns the SimpleType corresponding to the wrapper type of the primitive type of the array. When invoked on an ArrayType instance, the getClassName method returns the class name of the array instances it describes (following the rules defined by the getName method of java.lang.Class), not the class name of the array elements (which is returned by a call to getElementOpenType().getClassName()). The internal field corresponding to the type name of this ArrayType instance is also set to the class name of the array instances it describes. In other words, the methods getClassName and getTypeName return the same string value. The internal field corresponding to the description of this ArrayType instance is set to a string value which follows the following template: if non-primitive array: 1-dimension array of \u003celement_class_name\u003e if primitive array: 1-dimension array of \u003cprimitive_type_of_the_element_class_name\u003e As an example, the following piece of code: \n ArrayType\u003cint[]\u003e t \u003d new ArrayType\u003cint[]\u003e(SimpleType.INTEGER, true);\n System.out.println(\"array class name       \u003d \" + t.getClassName());\n System.out.println(\"element class name     \u003d \" + t.getElementOpenType().getClassName());\n System.out.println(\"array type name        \u003d \" + t.getTypeName());\n System.out.println(\"array type description \u003d \" + t.getDescription());\n would produce the following output: \n array class name       \u003d [I\n element class name     \u003d java.lang.Integer\n array type name        \u003d [I\n array type description \u003d 1-dimension array of int",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementType\u003c/code\u003e - the \n\u003ccode\u003eSimpleType\u003c/code\u003e of the element values contained in the arrays described by this \n\u003ccode\u003eArrayType\u003c/code\u003e instance.",
          "\u003ccode\u003eprimitiveArray\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e when this array describes primitive arrays."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edimension\u003c/code\u003e is not a positive integer.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/openmbean/OpenDataException.html\" title\u003d\"class in javax.management.openmbean\"\u003eOpenDataException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eprimitiveArray\u003c/code\u003e is \n\u003ccode\u003etrue\u003c/code\u003e and \n\u003ccode\u003eelementType\u003c/code\u003e is not a valid \n\u003ccode\u003eSimpleType\u003c/code\u003e for a primitive type."
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.openmbean.ArrayType",
  "comment": "The \n\u003ccode\u003eArrayType\u003c/code\u003e class is the \n\u003ci\u003eopen type\u003c/i\u003e class whose instances describe all \n\u003ci\u003eopen data\u003c/i\u003e values which are n-dimensional arrays of \n\u003ci\u003eopen data\u003c/i\u003e values. \n\u003cp\u003e Examples of valid \u003ccode\u003eArrayType\u003c/code\u003e instances are: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n // 2-dimension array of java.lang.String\n ArrayType\u0026lt;String[][]\u0026gt; a1 \u003d new ArrayType\u0026lt;String[][]\u0026gt;(2, SimpleType.STRING);\n\n // 1-dimension array of int\n ArrayType\u0026lt;int[]\u0026gt; a2 \u003d new ArrayType\u0026lt;int[]\u0026gt;(SimpleType.INTEGER, true);\n\n // 1-dimension array of java.lang.Integer\n ArrayType\u0026lt;Integer[]\u0026gt; a3 \u003d new ArrayType\u0026lt;Integer[]\u0026gt;(SimpleType.INTEGER, false);\n\n // 4-dimension array of int\n ArrayType\u0026lt;int[][][][]\u0026gt; a4 \u003d new ArrayType\u0026lt;int[][][][]\u0026gt;(3, a2);\n\n // 4-dimension array of java.lang.Integer\n ArrayType\u0026lt;Integer[][][][]\u0026gt; a5 \u003d new ArrayType\u0026lt;Integer[][][][]\u0026gt;(3, a3);\n\n // 1-dimension array of java.lang.String\n ArrayType\u0026lt;String[]\u0026gt; a6 \u003d new ArrayType\u0026lt;String[]\u0026gt;(SimpleType.STRING, false);\n\n // 1-dimension array of long\n ArrayType\u0026lt;long[]\u0026gt; a7 \u003d new ArrayType\u0026lt;long[]\u0026gt;(SimpleType.LONG, true);\n\n // 1-dimension array of java.lang.Integer\n ArrayType\u0026lt;Integer[]\u0026gt; a8 \u003d ArrayType.getArrayType(SimpleType.INTEGER);\n\n // 2-dimension array of java.lang.Integer\n ArrayType\u0026lt;Integer[][]\u0026gt; a9 \u003d ArrayType.getArrayType(a8);\n\n // 2-dimension array of int\n ArrayType\u0026lt;int[][]\u0026gt; a10 \u003d ArrayType.getPrimitiveArrayType(int[][].class);\n\n // 3-dimension array of int\n ArrayType\u0026lt;int[][][]\u0026gt; a11 \u003d ArrayType.getArrayType(a10);\n\n // 1-dimension array of float\n ArrayType\u0026lt;float[]\u0026gt; a12 \u003d ArrayType.getPrimitiveArrayType(float[].class);\n\n // 2-dimension array of float\n ArrayType\u0026lt;float[][]\u0026gt; a13 \u003d ArrayType.getArrayType(a12);\n\n // 1-dimension array of javax.management.ObjectName\n ArrayType\u0026lt;ObjectName[]\u0026gt; a14 \u003d ArrayType.getArrayType(SimpleType.OBJECTNAME);\n\n // 2-dimension array of javax.management.ObjectName\n ArrayType\u0026lt;ObjectName[][]\u0026gt; a15 \u003d ArrayType.getArrayType(a14);\n\n // 3-dimension array of java.lang.String\n ArrayType\u0026lt;String[][][]\u0026gt; a16 \u003d new ArrayType\u0026lt;String[][][]\u0026gt;(3, SimpleType.STRING);\n\n // 1-dimension array of java.lang.String\n ArrayType\u0026lt;String[]\u0026gt; a17 \u003d new ArrayType\u0026lt;String[]\u0026gt;(1, SimpleType.STRING);\n\n // 2-dimension array of java.lang.String\n ArrayType\u0026lt;String[][]\u0026gt; a18 \u003d new ArrayType\u0026lt;String[][]\u0026gt;(1, a17);\n\n // 3-dimension array of java.lang.String\n ArrayType\u0026lt;String[][][]\u0026gt; a19 \u003d new ArrayType\u0026lt;String[][][]\u0026gt;(1, a18);\n \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.management.openmbean.ArrayType\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}