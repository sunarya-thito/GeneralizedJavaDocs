{
  "packageName": "javax.management.openmbean",
  "simpleName": "CompositeDataInvocationHandler",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "javax.management.openmbean.CompositeData",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCompositeData",
      "comment": "Return the CompositeData that was supplied to the constructor.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eCompositeData\u003c/code\u003e that this handler is backed by. This is never null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Throwable",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "proxy",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          },
          "name": "method",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "args",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "invoke",
      "comment": "Description copied from interface: InvocationHandler",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/UndeclaredThrowableException.html\" title\u003d\"class in java.lang.reflect\"\u003e\u003ccode\u003eUndeclaredThrowableException\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/InvocationHandler.html#invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object%5B%5D)\"\u003einvoke\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/InvocationHandler.html\" title\u003d\"interface in java.lang.reflect\"\u003eInvocationHandler\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eproxy\u003c/code\u003e - the proxy instance that the method was invoked on",
          "\u003ccode\u003emethod\u003c/code\u003e - the \n\u003ccode\u003eMethod\u003c/code\u003e instance corresponding to the interface method invoked on the proxy instance. The declaring class of the \n\u003ccode\u003eMethod\u003c/code\u003e object will be the interface that the method was declared in, which may be a superinterface of the proxy interface that the proxy class inherits the method through.",
          "\u003ccode\u003eargs\u003c/code\u003e - an array of objects containing the values of the arguments passed in the method invocation on the proxy instance, or \n\u003ccode\u003enull\u003c/code\u003e if interface method takes no arguments. Arguments of primitive types are wrapped in instances of the appropriate primitive wrapper class, such as \n\u003ccode\u003ejava.lang.Integer\u003c/code\u003e or \n\u003ccode\u003ejava.lang.Boolean\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html\" title\u003d\"class in java.lang\"\u003eThrowable\u003c/a\u003e\u003c/code\u003e - the exception to throw from the method invocation on the proxy instance. The exception\u0027s type must be assignable either to any of the exception types declared in the \n\u003ccode\u003ethrows\u003c/code\u003e clause of the interface method or to the unchecked exception types \n\u003ccode\u003ejava.lang.RuntimeException\u003c/code\u003e or \n\u003ccode\u003ejava.lang.Error\u003c/code\u003e. If a checked exception is thrown by this method that is not assignable to any of the exception types declared in the \n\u003ccode\u003ethrows\u003c/code\u003e clause of the interface method, then an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/UndeclaredThrowableException.html\" title\u003d\"class in java.lang.reflect\"\u003e\u003ccode\u003eUndeclaredThrowableException\u003c/code\u003e\u003c/a\u003e containing the exception that was thrown by this method will be thrown by the method invocation on the proxy instance."
        ],
        "return": [
          "the value to return from the method invocation on the proxy instance. If the declared return type of the interface method is a primitive type, then the value returned by this method must be an instance of the corresponding primitive wrapper class; otherwise, it must be a type assignable to the declared return type. If the value returned by this method is \n\u003ccode\u003enull\u003c/code\u003e and the interface method\u0027s return type is primitive, then a \n\u003ccode\u003eNullPointerException\u003c/code\u003e will be thrown by the method invocation on the proxy instance. If the value returned by this method is otherwise not compatible with the interface method\u0027s declared return type as described above, a \n\u003ccode\u003eClassCastException\u003c/code\u003e will be thrown by the method invocation on the proxy instance."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.management.openmbean.CompositeData",
            "type": "Class"
          },
          "name": "compositeData",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a handler backed by the given CompositeData.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecompositeData\u003c/code\u003e - the \n\u003ccode\u003eCompositeData\u003c/code\u003e that will supply information to getters."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecompositeData\u003c/code\u003e is null."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.openmbean.CompositeDataInvocationHandler",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}