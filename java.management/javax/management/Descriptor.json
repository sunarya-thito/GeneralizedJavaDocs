{
  "packageName": "javax.management",
  "simpleName": "Descriptor",
  "moduleName": "java.management",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.io.Serializable",
      "type": "Class"
    },
    {
      "name": "java.lang.Cloneable",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFieldValue",
      "comment": "Returns the value for a specific field name, or null if no value is present for that name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efieldName\u003c/code\u003e - the field name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/RuntimeOperationsException.html\" title\u003d\"class in javax.management\"\u003eRuntimeOperationsException\u003c/a\u003e\u003c/code\u003e - if the field name is illegal."
        ],
        "return": [
          "the corresponding value, or null if the field is not present."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setField",
      "comment": "Sets the value for a specific field name. This will modify an existing field or add a new field. The field value will be validated before it is set. If it is not valid, then an exception will be thrown. The meaning of validity is dependent on the descriptor implementation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efieldName\u003c/code\u003e - The field name to be set. Cannot be null or empty.",
          "\u003ccode\u003efieldValue\u003c/code\u003e - The field value to be set for the field name. Can be null if that is a valid value for the field."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/RuntimeOperationsException.html\" title\u003d\"class in javax.management\"\u003eRuntimeOperationsException\u003c/a\u003e\u003c/code\u003e - if the field name or field value is illegal (wrapped exception is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/a\u003e); or if the descriptor is immutable (wrapped exception is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFields",
      "comment": "Returns all of the fields contained in this descriptor as a string array.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/Descriptor.html#setFields(java.lang.String%5B%5D,java.lang.Object%5B%5D)\"\u003e\u003ccode\u003esetFields(java.lang.String[], java.lang.Object[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "String array of fields in the format \n\u003ci\u003efieldName\u003dfieldValue\u003c/i\u003e \n\u003cbr\u003eIf the value of a field is not a String, then the toString() method will be called on it and the returned value, enclosed in parentheses, used as the value for the field in the returned array. If the value of a field is null, then the value of the field in the returned array will be empty. If the descriptor is empty, you will get an empty array."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFieldNames",
      "comment": "Returns all the field names in the descriptor.",
      "annotations": [],
      "tagMap": {
        "return": [
          "String array of field names. If the descriptor is empty, you will get an empty array."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFieldValues",
      "comment": "Returns all the field values in the descriptor as an array of Objects. The returned values are in the same order as the fieldNames String array parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efieldNames\u003c/code\u003e - String array of the names of the fields that the values should be returned for. If the array is empty then an empty array will be returned. If the array is null then all values will be returned, as if the parameter were the array returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/Descriptor.html#getFieldNames()\"\u003e\u003ccode\u003egetFieldNames()\u003c/code\u003e\u003c/a\u003e. If a field name in the array does not exist, including the case where it is null or the empty string, then null is returned for the matching array element being returned."
        ],
        "return": [
          "Object array of field values. If the list of \n\u003ccode\u003efieldNames\u003c/code\u003e is empty, you will get an empty array."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeField",
      "comment": "Removes a field from the descriptor.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efieldName\u003c/code\u003e - String name of the field to be removed. If the field name is illegal or the field is not found, no exception is thrown."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/RuntimeOperationsException.html\" title\u003d\"class in javax.management\"\u003eRuntimeOperationsException\u003c/a\u003e\u003c/code\u003e - if a field of the given name exists and the descriptor is immutable. The wrapped exception will be an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFields",
      "comment": "Sets all fields in the field names array to the new value with the same index in the field values array. Array sizes must match. The field value will be validated before it is set. If it is not valid, then an exception will be thrown. If the arrays are empty, then no change will take effect.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/Descriptor.html#getFields()\"\u003e\u003ccode\u003egetFields()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efieldNames\u003c/code\u003e - String array of field names. The array and array elements cannot be null.",
          "\u003ccode\u003efieldValues\u003c/code\u003e - Object array of the corresponding field values. The array cannot be null. Elements of the array can be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/RuntimeOperationsException.html\" title\u003d\"class in javax.management\"\u003eRuntimeOperationsException\u003c/a\u003e\u003c/code\u003e - if the change fails for any reason. Wrapped exception is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/a\u003e if \n\u003ccode\u003efieldNames\u003c/code\u003e or \n\u003ccode\u003efieldValues\u003c/code\u003e is null, or if the arrays are of different lengths, or if there is an illegal value in one of them. Wrapped exception is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e if the descriptor is immutable, and the call would change its contents."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clone",
      "comment": "Returns a descriptor which is equal to this descriptor. Changes to the returned descriptor will have no effect on this descriptor, and vice versa. If this descriptor is immutable, it may fulfill this condition by returning itself.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/RuntimeOperationsException.html\" title\u003d\"class in javax.management\"\u003eRuntimeOperationsException\u003c/a\u003e\u003c/code\u003e - for illegal value for field names or field values. If the descriptor construction fails for any reason, this exception will be thrown."
        ],
        "return": [
          "A descriptor which is equal to this descriptor."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isValid",
      "comment": "Returns true if all of the fields have legal values given their names.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/RuntimeOperationsException.html\" title\u003d\"class in javax.management\"\u003eRuntimeOperationsException\u003c/a\u003e\u003c/code\u003e - If the validity checking fails for any reason, this exception will be thrown. The method returns false if the descriptor is not valid, but throws this exception if the attempt to determine validity fails."
        ],
        "return": [
          "true if the values are legal."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Compares this descriptor to the given object. The objects are equal if the given object is also a Descriptor, and if the two Descriptors have the same field names (possibly differing in case) and the same associated values. The respective values for a field in the two Descriptors are equal if the following conditions hold: If one value is null then the other must be too. If one value is a primitive array then the other must be a primitive array of the same type with the same elements. If one value is an object array then the other must be too and Arrays.deepEquals(Object[],Object[]) must return true. Otherwise Object.equals(Object) must return true.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to compare with."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the objects are the same; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hashCode",
      "comment": "Returns the hash code value for this descriptor. The hash code is computed as the sum of the hash codes for each field in the descriptor. The hash code of a field with name n and value v is n.toLowerCase().hashCode() ^ h. Here h is the hash code of v, computed as follows: If v is null then h is 0. If v is a primitive array then h is computed using the appropriate overloading of java.util.Arrays.hashCode. If v is an object array then h is computed using Arrays.deepHashCode(Object[]). Otherwise h is v.hashCode().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A hash code value for this object."
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.management.Descriptor",
  "comment": "\u003cp\u003eAdditional metadata for a JMX element. A \u003ccode\u003eDescriptor\u003c/code\u003e is associated with a \u003ca href\u003d\"MBeanInfo.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eMBeanInfo\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"MBeanAttributeInfo.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eMBeanAttributeInfo\u003c/code\u003e\u003c/a\u003e, etc. It consists of a collection of fields. A field is a name and an associated value.\u003c/p\u003e \n\u003cp\u003eField names are not case-sensitive. The names \u003ccode\u003edescriptorType\u003c/code\u003e, \u003ccode\u003edescriptortype\u003c/code\u003e, and \u003ccode\u003eDESCRIPTORTYPE\u003c/code\u003e are all equivalent. However, the case that was used when the field was first set is preserved in the result of the \u003ca href\u003d\"#getFields()\"\u003e\u003ccode\u003egetFields()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#getFieldNames()\"\u003e\u003ccode\u003egetFieldNames()\u003c/code\u003e\u003c/a\u003e methods.\u003c/p\u003e \n\u003cp\u003eNot all field names and values are predefined. New fields can be defined and added by any program.\u003c/p\u003e \n\u003cp\u003eA descriptor can be mutable or immutable. An immutable descriptor, once created, never changes. The \u003ccode\u003eDescriptor\u003c/code\u003e methods that could modify the contents of the descriptor will throw an exception for an immutable descriptor. Immutable descriptors are usually instances of \u003ca href\u003d\"ImmutableDescriptor.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eImmutableDescriptor\u003c/code\u003e\u003c/a\u003e or a subclass. Mutable descriptors are usually instances of \u003ca href\u003d\"modelmbean/DescriptorSupport.html\" title\u003d\"class in javax.management.modelmbean\"\u003e\u003ccode\u003eDescriptorSupport\u003c/code\u003e\u003c/a\u003e or a subclass. \u003c/p\u003e\n\u003cp\u003eCertain fields are used by the JMX implementation. This means either that the presence of the field may change the behavior of the JMX API or that the field may be set in descriptors returned by the JMX API. These fields appear in \u003ci\u003eitalics\u003c/i\u003e in the table below, and each one has a corresponding constant in the \u003ca href\u003d\"JMX.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eJMX\u003c/code\u003e\u003c/a\u003e class. For example, the field \u003ccode\u003edefaultValue\u003c/code\u003e is represented by the constant \u003ca href\u003d\"JMX.html#DEFAULT_VALUE_FIELD\"\u003e\u003ccode\u003eJMX.DEFAULT_VALUE_FIELD\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e \n\u003cp\u003eCertain other fields have conventional meanings described in the table below but they are not required to be understood or set by the JMX implementation.\u003c/p\u003e \n\u003cp\u003eField names defined by the JMX specification in this and all future versions will never contain a period (.). Users can safely create their own fields by including a period in the name and be sure that these names will not collide with any future version of the JMX API. It is recommended to follow the Java package naming convention to avoid collisions between field names from different origins. For example, a field created by \u003ccode\u003eexample.com\u003c/code\u003e might have the name \u003ccode\u003ecom.example.interestLevel\u003c/code\u003e.\u003c/p\u003e \n\u003cp\u003eNote that the values in the \u003ccode\u003edefaultValue\u003c/code\u003e, \u003ccode\u003e legalValues\u003c/code\u003e, \u003ccode\u003emaxValue\u003c/code\u003e, and \u003ccode\u003eminValue\u003c/code\u003e fields should be consistent with the type returned by the \u003ccode\u003egetType()\u003c/code\u003e method for the associated \u003ccode\u003eMBeanAttributeInfo\u003c/code\u003e or \u003ccode\u003e MBeanParameterInfo\u003c/code\u003e. For MXBeans, this means that they should be of the mapped Java type, called \u003cem\u003eopendata\u003c/em\u003e(J) in the \u003ca href\u003d\"MXBean.html#mapping-rules\"\u003eMXBean type mapping rules\u003c/a\u003e.\u003c/p\u003e \n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  Descriptor Fields\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"col\"\u003eName\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eType\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eUsed in\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eMeaning\u003c/th\u003e\n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody style\u003d\"text-align:left\"\u003e \n  \u003ctr id\u003d\"defaultValue\"\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ci\u003edefaultValue\u003c/i\u003e\u003c/th\u003e\n   \u003ctd\u003eObject\u003c/td\u003e \n   \u003ctd\u003eMBeanAttributeInfo\u003cbr\u003eMBeanParameterInfo\u003c/td\u003e \n   \u003ctd\u003eDefault value for an attribute or parameter. See \u003ca href\u003d\"openmbean/package-summary.html\"\u003e\u003ccode\u003ejavax.management.openmbean\u003c/code\u003e\u003c/a\u003e.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003edeprecated\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eAny\u003c/td\u003e \n   \u003ctd\u003eAn indication that this element of the information model is no longer recommended for use. A set of MBeans defined by an application is collectively called an \u003cem\u003einformation model\u003c/em\u003e. The convention is for the value of this field to contain a string that is the version of the model in which the element was first deprecated, followed by a space, followed by an explanation of the deprecation, for example \u003ccode\u003e\"1.3 Replaced by the Capacity attribute\"\u003c/code\u003e.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" id\u003d\"descriptionResourceBundleBaseName\"\u003edescriptionResource\u003cbr\u003e BundleBaseName\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eAny\u003c/td\u003e \n   \u003ctd\u003eThe base name for the \u003ca href\u003d\"../../../java.base/java/util/ResourceBundle.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle\u003c/code\u003e\u003c/a\u003e in which the key given in the \u003ccode\u003edescriptionResourceKey\u003c/code\u003e field can be found, for example \u003ccode\u003e\"com.example.myapp.MBeanResources\"\u003c/code\u003e. The meaning of this field is defined by this specification but the field is not set or used by the JMX API itself.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" id\u003d\"descriptionResourceKey\"\u003edescriptionResourceKey\u003c/th\u003e \n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eAny\u003c/td\u003e \n   \u003ctd\u003eA resource key for the description of this element. In conjunction with the \u003ccode\u003edescriptionResourceBundleBaseName\u003c/code\u003e, this can be used to find a localized version of the description. The meaning of this field is defined by this specification but the field is not set or used by the JMX API itself.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003eenabled\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e \n   \u003ctd\u003eMBeanAttributeInfo\u003cbr\u003eMBeanNotificationInfo\u003cbr\u003eMBeanOperationInfo\u003c/td\u003e \n   \u003ctd\u003eThe string \u003ccode\u003e\"true\"\u003c/code\u003e or \u003ccode\u003e\"false\"\u003c/code\u003e according as this item is enabled. When an attribute or operation is not enabled, it exists but cannot currently be accessed. A user interface might present it as a greyed-out item. For example, an attribute might only be meaningful after the \u003ccode\u003estart()\u003c/code\u003e method of an MBean has been called, and is otherwise disabled. Likewise, a notification might be disabled if it cannot currently be emitted but could be in other circumstances.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr id\u003d\"exceptions\"\u003e\n   \u003cth scope\u003d\"row\"\u003eexceptions\u003c/th\u003e\n   \u003ctd\u003eString[]\u003c/td\u003e \n   \u003ctd\u003eMBeanAttributeInfo, MBeanConstructorInfo, MBeanOperationInfo\u003c/td\u003e \n   \u003ctd\u003eThe class names of the exceptions that can be thrown when invoking a constructor or operation, or getting an attribute. The meaning of this field is defined by this specification but the field is not set or used by the JMX API itself. Exceptions thrown when setting an attribute are specified by the field \u003ca href\u003d\"#setExceptions\"\u003e\u003ccode\u003esetExceptions\u003c/code\u003e\u003c/a\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr id\u003d\"immutableInfo\"\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ci\u003eimmutableInfo\u003c/i\u003e\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e \n   \u003ctd\u003eMBeanInfo\u003c/td\u003e \n   \u003ctd\u003eThe string \u003ccode\u003e\"true\"\u003c/code\u003e or \u003ccode\u003e\"false\"\u003c/code\u003e according as this MBean\u0027s MBeanInfo is \u003cem\u003eimmutable\u003c/em\u003e. When this field is true, the MBeanInfo for the given MBean is guaranteed not to change over the lifetime of the MBean. Hence, a client can read it once and cache the read value. When this field is false or absent, there is no such guarantee, although that does not mean that the MBeanInfo will necessarily change. See also the \u003ca href\u003d\"MBeanInfo.html#info-changed\"\u003e\u003ccode\u003e\"jmx.mbean.info.changed\"\u003c/code\u003e\u003c/a\u003e notification.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr id\u003d\"infoTimeout\"\u003e\n   \u003cth scope\u003d\"row\"\u003einfoTimeout\u003c/th\u003e\n   \u003ctd\u003eString\u003cbr\u003eLong\u003c/td\u003e\n   \u003ctd\u003eMBeanInfo\u003c/td\u003e \n   \u003ctd\u003eThe time in milli-seconds that the MBeanInfo can reasonably be expected to be unchanged. The value can be a \u003ccode\u003eLong\u003c/code\u003e or a decimal string. This provides a hint from a DynamicMBean or any MBean that does not define \u003ccode\u003eimmutableInfo\u003c/code\u003e as \u003ccode\u003etrue\u003c/code\u003e that the MBeanInfo is not likely to change within this period and therefore can be cached. When this field is missing or has the value zero, it is not recommended to cache the MBeanInfo unless it has the \u003ccode\u003eimmutableInfo\u003c/code\u003e set to \u003ccode\u003etrue\u003c/code\u003e or it has \u003ca href\u003d\"MBeanInfo.html#info-changed\"\u003e\u003ccode\u003e\"jmx.mbean.info.changed\"\u003c/code\u003e\u003c/a\u003e in its \u003ca href\u003d\"MBeanNotificationInfo.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eMBeanNotificationInfo\u003c/code\u003e\u003c/a\u003e array.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr id\u003d\"interfaceClassName\"\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ci\u003einterfaceClassName\u003c/i\u003e\u003c/th\u003e \n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eMBeanInfo\u003c/td\u003e \n   \u003ctd\u003eThe Java interface name for a Standard MBean or MXBean, as returned by \u003ca href\u003d\"../../../java.base/java/lang/Class.html#getName()\"\u003e\u003ccode\u003eClass.getName()\u003c/code\u003e\u003c/a\u003e. A Standard MBean or MXBean registered directly in the MBean Server or created using the \u003ca href\u003d\"StandardMBean.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eStandardMBean\u003c/code\u003e\u003c/a\u003e class will have this field in its MBeanInfo Descriptor.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr id\u003d\"legalValues\"\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ci\u003elegalValues\u003c/i\u003e\u003c/th\u003e \n   \u003ctd\u003eSet\u0026lt;?\u0026gt;\u003c/td\u003e\n   \u003ctd\u003eMBeanAttributeInfo\u003cbr\u003eMBeanParameterInfo\u003c/td\u003e \n   \u003ctd\u003eLegal values for an attribute or parameter. See \u003ca href\u003d\"openmbean/package-summary.html\"\u003e\u003ccode\u003ejavax.management.openmbean\u003c/code\u003e\u003c/a\u003e.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr id\u003d\"locale\"\u003e\n   \u003cth scope\u003d\"row\"\u003elocale\u003c/th\u003e \n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eAny\u003c/td\u003e \n   \u003ctd\u003eThe \u003ca href\u003d\"../../../java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e of the description in this \u003ccode\u003eMBeanInfo\u003c/code\u003e, \u003ccode\u003eMBeanAttributeInfo\u003c/code\u003e, etc, as returned by \u003ca href\u003d\"../../../java.base/java/util/Locale.html#toString()\"\u003e\u003ccode\u003eLocale.toString()\u003c/code\u003e\u003c/a\u003e.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr id\u003d\"maxValue\"\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ci\u003emaxValue\u003c/i\u003e\u003c/th\u003e\n   \u003ctd\u003eObject\u003c/td\u003e \n   \u003ctd\u003eMBeanAttributeInfo\u003cbr\u003eMBeanParameterInfo\u003c/td\u003e \n   \u003ctd\u003eMaximum legal value for an attribute or parameter. See \u003ca href\u003d\"openmbean/package-summary.html\"\u003e\u003ccode\u003ejavax.management.openmbean\u003c/code\u003e\u003c/a\u003e.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr id\u003d\"metricType\"\u003e\n   \u003cth scope\u003d\"row\"\u003emetricType\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e \n   \u003ctd\u003eMBeanAttributeInfo\u003cbr\u003eMBeanOperationInfo\u003c/td\u003e \n   \u003ctd\u003eThe type of a metric, one of the strings \"counter\" or \"gauge\". A metric is a measurement exported by an MBean, usually an attribute but sometimes the result of an operation. A metric that is a \u003cem\u003ecounter\u003c/em\u003e has a value that never decreases except by being reset to a starting value. Counter metrics are almost always non-negative integers. An example might be the number of requests received. A metric that is a \u003cem\u003egauge\u003c/em\u003e has a numeric value that can increase or decrease. Examples might be the number of open connections or a cache hit rate or a temperature reading. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr id\u003d\"minValue\"\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ci\u003eminValue\u003c/i\u003e\u003c/th\u003e\n   \u003ctd\u003eObject\u003c/td\u003e \n   \u003ctd\u003eMBeanAttributeInfo\u003cbr\u003eMBeanParameterInfo\u003c/td\u003e \n   \u003ctd\u003eMinimum legal value for an attribute or parameter. See \u003ca href\u003d\"openmbean/package-summary.html\"\u003e\u003ccode\u003ejavax.management.openmbean\u003c/code\u003e\u003c/a\u003e.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr id\u003d\"mxbean\"\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ci\u003emxbean\u003c/i\u003e\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e \n   \u003ctd\u003eMBeanInfo\u003c/td\u003e \n   \u003ctd\u003eThe string \u003ccode\u003e\"true\"\u003c/code\u003e or \u003ccode\u003e\"false\"\u003c/code\u003e according as this MBean is an \u003ca href\u003d\"MXBean.html\" title\u003d\"annotation in javax.management\"\u003e\u003ccode\u003eMXBean\u003c/code\u003e\u003c/a\u003e. A Standard MBean or MXBean registered directly with the MBean Server or created using the \u003ca href\u003d\"StandardMBean.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eStandardMBean\u003c/code\u003e\u003c/a\u003e class will have this field in its MBeanInfo Descriptor.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr id\u003d\"openType\"\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ci\u003eopenType\u003c/i\u003e\u003c/th\u003e\n   \u003ctd\u003e\u003ca href\u003d\"openmbean/OpenType.html\" title\u003d\"class in javax.management.openmbean\"\u003e\u003ccode\u003eOpenType\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003eMBeanAttributeInfo\u003cbr\u003eMBeanOperationInfo\u003cbr\u003eMBeanParameterInfo\u003c/td\u003e \n   \u003ctd\u003e\u003cp\u003eThe Open Type of this element. In the case of \u003ccode\u003e MBeanAttributeInfo\u003c/code\u003e and \u003ccode\u003eMBeanParameterInfo\u003c/code\u003e, this is the Open Type of the attribute or parameter. In the case of \u003ccode\u003e MBeanOperationInfo\u003c/code\u003e, it is the Open Type of the return value. This field is set in the Descriptor for all instances of \u003ca href\u003d\"openmbean/OpenMBeanAttributeInfoSupport.html\" title\u003d\"class in javax.management.openmbean\"\u003e\u003ccode\u003eOpenMBeanAttributeInfoSupport\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"openmbean/OpenMBeanOperationInfoSupport.html\" title\u003d\"class in javax.management.openmbean\"\u003e\u003ccode\u003eOpenMBeanOperationInfoSupport\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"openmbean/OpenMBeanParameterInfoSupport.html\" title\u003d\"class in javax.management.openmbean\"\u003e\u003ccode\u003eOpenMBeanParameterInfoSupport\u003c/code\u003e\u003c/a\u003e. It is also set for attributes, operations, and parameters of MXBeans.\u003c/p\u003e \u003cp\u003eThis field can be set for an \u003ccode\u003eMBeanNotificationInfo\u003c/code\u003e, in which case it indicates the Open Type that the \u003ca href\u003d\"Notification.html#getUserData()\"\u003e\u003ccode\u003euser data\u003c/code\u003e\u003c/a\u003e will have.\u003c/p\u003e\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr id\u003d\"originalType\"\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ci\u003eoriginalType\u003c/i\u003e\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e \n   \u003ctd\u003eMBeanAttributeInfo\u003cbr\u003eMBeanOperationInfo\u003cbr\u003eMBeanParameterInfo\u003c/td\u003e \n   \u003ctd\u003e\u003cp\u003eThe original Java type of this element as it appeared in the \u003ca href\u003d\"MXBean.html\" title\u003d\"annotation in javax.management\"\u003e\u003ccode\u003eMXBean\u003c/code\u003e\u003c/a\u003e interface method that produced this \u003ccode\u003e MBeanAttributeInfo\u003c/code\u003e (etc). For example, a method\u003cbr\u003e \u003ccode\u003epublic \u003c/code\u003e \u003ca href\u003d\"../../java/lang/management/MemoryUsage.html\" title\u003d\"class in java.lang.management\"\u003e\u003ccode\u003eMemoryUsage\u003c/code\u003e\u003c/a\u003e\u003ccode\u003e getHeapMemoryUsage();\u003c/code\u003e\u003cbr\u003e in an MXBean interface defines an attribute called \u003ccode\u003e HeapMemoryUsage\u003c/code\u003e of type \u003ca href\u003d\"openmbean/CompositeData.html\" title\u003d\"interface in javax.management.openmbean\"\u003e\u003ccode\u003eCompositeData\u003c/code\u003e\u003c/a\u003e. The \u003ccode\u003e originalType\u003c/code\u003e field in the Descriptor for this attribute will have the value \u003ccode\u003e\"java.lang.management.MemoryUsage\"\u003c/code\u003e. \u003c/p\u003e\u003cp\u003eThe format of this string is described in the section \u003ca href\u003d\"MXBean.html#type-names\"\u003eType Names\u003c/a\u003e of the MXBean specification.\u003c/p\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr id\u003d\"setExceptions\"\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ci\u003esetExceptions\u003c/i\u003e\u003c/th\u003e\n   \u003ctd\u003eString[]\u003c/td\u003e \n   \u003ctd\u003eMBeanAttributeInfo\u003c/td\u003e \n   \u003ctd\u003eThe class names of the exceptions that can be thrown when setting an attribute. The meaning of this field is defined by this specification but the field is not set or used by the JMX API itself. Exceptions thrown when getting an attribute are specified by the field \u003ca href\u003d\"#exceptions\"\u003e\u003ccode\u003eexceptions\u003c/code\u003e\u003c/a\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003eseverity\u003c/th\u003e\n   \u003ctd\u003eString\u003cbr\u003eInteger\u003c/td\u003e \n   \u003ctd\u003eMBeanNotificationInfo\u003c/td\u003e \n   \u003ctd\u003eThe severity of this notification. It can be 0 to mean unknown severity or a value from 1 to 6 representing decreasing levels of severity. It can be represented as a decimal string or an \u003ccode\u003eInteger\u003c/code\u003e.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003esince\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eAny\u003c/td\u003e \n   \u003ctd\u003eThe version of the information model in which this element was introduced. A set of MBeans defined by an application is collectively called an \u003cem\u003einformation model\u003c/em\u003e. The application may also define versions of this model, and use the \u003ccode\u003e\"since\"\u003c/code\u003e field to record the version in which an element first appeared.\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003eunits\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e \n   \u003ctd\u003eMBeanAttributeInfo\u003cbr\u003eMBeanParameterInfo\u003cbr\u003eMBeanOperationInfo\u003c/td\u003e \n   \u003ctd\u003eThe units in which an attribute, parameter, or operation return value is measured, for example \u003ccode\u003e\"bytes\"\u003c/code\u003e or \u003ccode\u003e \"seconds\"\u003c/code\u003e.\u003c/td\u003e \n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003eSome additional fields are defined by Model MBeans. See the information for \u003ca href\u003d\"modelmbean/ModelMBeanInfo.html#descriptor\"\u003e\n  \u003c!--\n --\u003e\u003ccode\u003eModelMBeanInfo\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"modelmbean/ModelMBeanAttributeInfo.html#descriptor\"\u003e\n  \u003c!--\n --\u003e\u003ccode\u003eModelMBeanAttributeInfo\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"modelmbean/ModelMBeanConstructorInfo.html#descriptor\"\u003e\n  \u003c!--\n --\u003e\u003ccode\u003eModelMBeanConstructorInfo\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"modelmbean/ModelMBeanNotificationInfo.html#descriptor\"\u003e\n  \u003c!--\n --\u003e\u003ccode\u003eModelMBeanNotificationInfo\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"modelmbean/ModelMBeanOperationInfo.html#descriptor\"\u003e\n  \u003c!--\n --\u003e\u003ccode\u003eModelMBeanOperationInfo\u003c/code\u003e\u003c/a\u003e, as well as the chapter \"Model MBeans\" of the \u003ca href\u003d\"http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html\"\u003eJMX Specification\u003c/a\u003e. The following table summarizes these fields. Note that when the Type in this table is Number, a String that is the decimal representation of a Long can also be used.\u003c/p\u003e \n\u003cp\u003eNothing prevents the use of these fields in MBeans that are not Model MBeans. The \u003ca href\u003d\"#displayName\"\u003edisplayName\u003c/a\u003e, \u003ca href\u003d\"#severity\"\u003e\n  \u003c!--\n --\u003eseverity\u003c/a\u003e, and \u003ca href\u003d\"#visibility\"\u003evisibility\u003c/a\u003e fields are of interest outside Model MBeans, for example. But only Model MBeans have a predefined behavior for these fields.\u003c/p\u003e \n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  ModelMBean Fields\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"col\"\u003eName\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eType\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eUsed in\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eMeaning\u003c/th\u003e\n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody style\u003d\"text-align:left\"\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003eclass\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eModelMBeanOperationInfo\u003c/td\u003e \n   \u003ctd\u003eClass where method is defined (fully qualified).\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003ecurrencyTimeLimit\u003c/th\u003e\n   \u003ctd\u003eNumber\u003c/td\u003e \n   \u003ctd\u003eModelMBeanInfo\u003cbr\u003eModelMBeanAttributeInfo\u003cbr\u003eModelMBeanOperationInfo\u003c/td\u003e \n   \u003ctd\u003eHow long cached value is valid: \u0026lt;0 never, \u003d0 always, \u0026gt;0 seconds.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003edefault\u003c/th\u003e\n   \u003ctd\u003eObject\u003c/td\u003e\n   \u003ctd\u003eModelMBeanAttributeInfo\u003c/td\u003e \n   \u003ctd\u003eDefault value for attribute.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003edescriptorType\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eAny\u003c/td\u003e \n   \u003ctd\u003eType of descriptor, \"mbean\", \"attribute\", \"constructor\", \"operation\", or \"notification\".\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr id\u003d\"displayName\"\u003e\n   \u003cth scope\u003d\"row\"\u003edisplayName\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eAny\u003c/td\u003e \n   \u003ctd\u003eHuman readable name of this item.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003eexport\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eModelMBeanInfo\u003c/td\u003e \n   \u003ctd\u003eName to be used to export/expose this MBean so that it is findable by other JMX Agents.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003egetMethod\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eModelMBeanAttributeInfo\u003c/td\u003e \n   \u003ctd\u003eName of operation descriptor for get method.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003elastUpdatedTimeStamp\u003c/th\u003e\n   \u003ctd\u003eNumber\u003c/td\u003e \n   \u003ctd\u003eModelMBeanAttributeInfo\u003cbr\u003eModelMBeanOperationInfo\u003c/td\u003e \n   \u003ctd\u003eWhen \u003ca href\u003d\"#value-field\"\u003evalue\u003c/a\u003e was set.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003elog\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eModelMBeanInfo\u003cbr\u003eModelMBeanNotificationInfo\u003c/td\u003e \n   \u003ctd\u003et or T: log all notifications, f or F: log no notifications.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003elogFile\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eModelMBeanInfo\u003cbr\u003eModelMBeanNotificationInfo\u003c/td\u003e \n   \u003ctd\u003eFully qualified filename to log events to.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003emessageID\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eModelMBeanNotificationInfo\u003c/td\u003e \n   \u003ctd\u003eUnique key for message text (to allow translation, analysis).\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003emessageText\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eModelMBeanNotificationInfo\u003c/td\u003e \n   \u003ctd\u003eText of notification.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003ename\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eAny\u003c/td\u003e \n   \u003ctd\u003eName of this item.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003epersistFile\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eModelMBeanInfo\u003c/td\u003e \n   \u003ctd\u003eFile name into which the MBean should be persisted.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003epersistLocation\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eModelMBeanInfo\u003c/td\u003e \n   \u003ctd\u003eThe fully qualified directory name where the MBean should be persisted (if appropriate).\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003epersistPeriod\u003c/th\u003e\n   \u003ctd\u003eNumber\u003c/td\u003e \n   \u003ctd\u003eModelMBeanInfo\u003cbr\u003eModelMBeanAttributeInfo\u003c/td\u003e \n   \u003ctd\u003eFrequency of persist cycle in seconds. Used when persistPolicy is \"OnTimer\" or \"NoMoreOftenThan\".\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003epersistPolicy\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e \n   \u003ctd\u003eModelMBeanInfo\u003cbr\u003eModelMBeanAttributeInfo\u003c/td\u003e \n   \u003ctd\u003eOne of: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never. See the section \"MBean Descriptor Fields\" in the JMX specification document.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003epresentationString\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eAny\u003c/td\u003e \n   \u003ctd\u003eXML formatted string to allow presentation of data.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003eprotocolMap\u003c/th\u003e\n   \u003ctd\u003eDescriptor\u003c/td\u003e\n   \u003ctd\u003eModelMBeanAttributeInfo\u003c/td\u003e \n   \u003ctd\u003eSee the section \"Protocol Map Support\" in the JMX specification document. Mappings must be appropriate for the attribute and entries can be updated or augmented at runtime.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003erole\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e \n   \u003ctd\u003eModelMBeanConstructorInfo\u003cbr\u003eModelMBeanOperationInfo\u003c/td\u003e \n   \u003ctd\u003eOne of \"constructor\", \"operation\", \"getter\", or \"setter\".\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003esetMethod\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eModelMBeanAttributeInfo\u003c/td\u003e \n   \u003ctd\u003eName of operation descriptor for set method.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr id\u003d\"severity\"\u003e\n   \u003cth scope\u003d\"row\"\u003eseverity\u003c/th\u003e\n   \u003ctd\u003eNumber\u003c/td\u003e \n   \u003ctd\u003eModelMBeanNotificationInfo\u003c/td\u003e \n   \u003ctd\u003e0-6 where 0: unknown; 1: non-recoverable; 2: critical, failure; 3: major, severe; 4: minor, marginal, error; 5: warning; 6: normal, cleared, informative\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003etargetObject\u003c/th\u003e\n   \u003ctd\u003eObject\u003c/td\u003e\n   \u003ctd\u003eModelMBeanOperationInfo\u003c/td\u003e \n   \u003ctd\u003eObject on which to execute this method.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003etargetType\u003c/th\u003e\n   \u003ctd\u003eString\u003c/td\u003e\n   \u003ctd\u003eModelMBeanOperationInfo\u003c/td\u003e \n   \u003ctd\u003etype of object reference for targetObject. Can be: ObjectReference | Handle | EJBHandle | IOR | RMIReference.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr id\u003d\"value-field\"\u003e\n   \u003cth scope\u003d\"row\"\u003evalue\u003c/th\u003e\n   \u003ctd\u003eObject\u003c/td\u003e \n   \u003ctd\u003eModelMBeanAttributeInfo\u003cbr\u003eModelMBeanOperationInfo\u003c/td\u003e \n   \u003ctd\u003eCurrent (cached) value for attribute or operation.\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr id\u003d\"visibility\"\u003e\n   \u003cth scope\u003d\"row\"\u003evisibility\u003c/th\u003e\n   \u003ctd\u003eNumber\u003c/td\u003e\n   \u003ctd\u003eAny\u003c/td\u003e \n   \u003ctd\u003e1-4 where 1: always visible, 4: rarely visible.\u003c/td\u003e\n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}