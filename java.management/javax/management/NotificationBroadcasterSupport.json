{
  "packageName": "javax.management",
  "simpleName": "NotificationBroadcasterSupport",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.NotificationListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        },
        {
          "type": {
            "name": "javax.management.NotificationFilter",
            "type": "Class"
          },
          "field": {
            "name": "filter"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "handback"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addNotificationListener",
      "comment": "Adds a listener.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcasterSupport.html#removeNotificationListener(javax.management.NotificationListener)\"\u003e\u003ccode\u003eremoveNotificationListener(javax.management.NotificationListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html#addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)\"\u003eaddNotificationListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html\" title\u003d\"interface in javax.management\"\u003eNotificationBroadcaster\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - The listener to receive notifications.",
          "\u003ccode\u003efilter\u003c/code\u003e - The filter object. If filter is null, no filtering will be performed before handling notifications.",
          "\u003ccode\u003ehandback\u003c/code\u003e - An opaque object to be sent back to the listener when a notification is emitted. This object cannot be used by the Notification broadcaster object. It should be resent unchanged with the notification to the listener."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - thrown if the listener is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.ListenerNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.NotificationListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeNotificationListener",
      "comment": "Description copied from interface: NotificationBroadcaster",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html#addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)\"\u003e\u003ccode\u003eNotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationEmitter.html#removeNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)\"\u003e\u003ccode\u003eNotificationEmitter.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html#removeNotificationListener(javax.management.NotificationListener)\"\u003eremoveNotificationListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html\" title\u003d\"interface in javax.management\"\u003eNotificationBroadcaster\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - A listener that was previously added to this MBean."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ListenerNotFoundException.html\" title\u003d\"class in javax.management\"\u003eListenerNotFoundException\u003c/a\u003e\u003c/code\u003e - The listener is not registered with the MBean."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.ListenerNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.NotificationListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        },
        {
          "type": {
            "name": "javax.management.NotificationFilter",
            "type": "Class"
          },
          "field": {
            "name": "filter"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "handback"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeNotificationListener",
      "comment": "Description copied from interface: NotificationEmitter",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationEmitter.html#removeNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)\"\u003eremoveNotificationListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationEmitter.html\" title\u003d\"interface in javax.management\"\u003eNotificationEmitter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - A listener that was previously added to this MBean.",
          "\u003ccode\u003efilter\u003c/code\u003e - The filter that was specified when the listener was added.",
          "\u003ccode\u003ehandback\u003c/code\u003e - The handback that was specified when the listener was added."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ListenerNotFoundException.html\" title\u003d\"class in javax.management\"\u003eListenerNotFoundException\u003c/a\u003e\u003c/code\u003e - The listener is not registered with the MBean, or it is not registered with the given filter and handback."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.MBeanNotificationInfo",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNotificationInfo",
      "comment": "Description copied from interface: NotificationBroadcaster",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html#getNotificationInfo()\"\u003egetNotificationInfo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html\" title\u003d\"interface in javax.management\"\u003eNotificationBroadcaster\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the array of possible notifications."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.Notification",
            "type": "Class"
          },
          "field": {
            "name": "notification"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sendNotification",
      "comment": "Sends a notification. If an Executor was specified in the constructor, it will be given one task per selected listener to deliver the notification to that listener.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enotification\u003c/code\u003e - The notification to send."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.NotificationListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        },
        {
          "type": {
            "name": "javax.management.Notification",
            "type": "Class"
          },
          "field": {
            "name": "notif"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "handback"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "handleNotification",
      "comment": "This method is called by sendNotification for each listener in order to send the notification to that listener. It can be overridden in subclasses to change the behavior of notification delivery, for instance to deliver the notification in a separate thread. The default implementation of this method is equivalent to  listener.handleNotification(notif, handback);",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the listener to which the notification is being delivered.",
          "\u003ccode\u003enotif\u003c/code\u003e - the notification being delivered to the listener.",
          "\u003ccode\u003ehandback\u003c/code\u003e - the handback object that was supplied when the listener was added."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a NotificationBroadcasterSupport where each listener is invoked by the thread sending the notification. This constructor is equivalent to NotificationBroadcasterSupport(null, null).",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "field": {
            "name": "executor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a NotificationBroadcasterSupport where each listener is invoked using the given Executor. When sendNotification is called, a listener is selected if it was added with a null NotificationFilter, or if isNotificationEnabled returns true for the notification being sent. The call to NotificationFilter.isNotificationEnabled takes place in the thread that called sendNotification. Then, for each selected listener, executor.execute is called with a command that calls the handleNotification method. This constructor is equivalent to NotificationBroadcasterSupport(executor, null).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eexecutor\u003c/code\u003e - an executor used by the method \n\u003ccode\u003esendNotification\u003c/code\u003e to send each notification. If it is null, the thread calling \n\u003ccode\u003esendNotification\u003c/code\u003e will invoke the \n\u003ccode\u003ehandleNotification\u003c/code\u003e method itself."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanNotificationInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a NotificationBroadcasterSupport with information about the notifications that may be sent. Each listener is invoked by the thread sending the notification. This constructor is equivalent to NotificationBroadcasterSupport(null, info). If the info array is not empty, then it is cloned by the constructor as if by info.clone(), and each call to getNotificationInfo() returns a new clone.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einfo\u003c/code\u003e - an array indicating, for each notification this MBean may send, the name of the Java class of the notification and the notification type. Can be null, which is equivalent to an empty array."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "field": {
            "name": "executor"
          }
        },
        {
          "type": {
            "name": "javax.management.MBeanNotificationInfo",
            "type": "Class"
          },
          "field": {
            "name": "info"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a NotificationBroadcasterSupport with information about the notifications that may be sent, and where each listener is invoked using the given Executor. When sendNotification is called, a listener is selected if it was added with a null NotificationFilter, or if isNotificationEnabled returns true for the notification being sent. The call to NotificationFilter.isNotificationEnabled takes place in the thread that called sendNotification. Then, for each selected listener, executor.execute is called with a command that calls the handleNotification method. If the info array is not empty, then it is cloned by the constructor as if by info.clone(), and each call to getNotificationInfo() returns a new clone.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eexecutor\u003c/code\u003e - an executor used by the method \n\u003ccode\u003esendNotification\u003c/code\u003e to send each notification. If it is null, the thread calling \n\u003ccode\u003esendNotification\u003c/code\u003e will invoke the \n\u003ccode\u003ehandleNotification\u003c/code\u003e method itself.",
          "\u003ccode\u003einfo\u003c/code\u003e - an array indicating, for each notification this MBean may send, the name of the Java class of the notification and the notification type. Can be null, which is equivalent to an empty array."
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.NotificationBroadcasterSupport",
  "comment": "\u003cp\u003eProvides an implementation of \u003ca href\u003d\"NotificationEmitter.html\" title\u003d\"interface in javax.management\"\u003e\u003ccode\u003eNotificationEmitter\u003c/code\u003e\u003c/a\u003e interface. This can be used as the super class of an MBean that sends notifications.\u003c/p\u003e \n\u003cp\u003eBy default, the notification dispatch model is synchronous. That is, when a thread calls sendNotification, the \u003ccode\u003eNotificationListener.handleNotification\u003c/code\u003e method of each listener is called within that thread. You can override this default by overriding \u003ccode\u003ehandleNotification\u003c/code\u003e in a subclass, or by passing an Executor to the constructor.\u003c/p\u003e \n\u003cp\u003eIf the method call of a filter or listener throws an \u003ca href\u003d\"../../../java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e, then that exception does not prevent other listeners from being invoked. However, if the method call of a filter or of \u003ccode\u003eExecutor.execute\u003c/code\u003e or of \u003ccode\u003ehandleNotification\u003c/code\u003e (when no \u003ccode\u003eExcecutor\u003c/code\u003e is specified) throws an \u003ca href\u003d\"../../../java.base/java/lang/Error.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eError\u003c/code\u003e\u003c/a\u003e, then that \u003ccode\u003eError\u003c/code\u003e is propagated to the caller of \u003ca href\u003d\"#sendNotification(javax.management.Notification)\"\u003e\u003ccode\u003esendNotification\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e \n\u003cp\u003eRemote listeners added using the JMX Remote API (see JMXConnector) are not usually called synchronously. That is, when sendNotification returns, it is not guaranteed that any remote listeners have yet received the notification.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}