{
  "packageName": "javax.management.monitor",
  "simpleName": "CounterMonitor",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "javax.management.monitor.Monitor",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "start",
      "comment": "Starts the counter monitor.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/MonitorMBean.html#start()\"\u003estart\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/MonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eMonitorMBean\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/Monitor.html#start()\"\u003estart\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/Monitor.html\" title\u003d\"class in javax.management.monitor\"\u003eMonitor\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stop",
      "comment": "Stops the counter monitor.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/MonitorMBean.html#stop()\"\u003estop\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/MonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eMonitorMBean\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/Monitor.html#stop()\"\u003estop\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/Monitor.html\" title\u003d\"class in javax.management.monitor\"\u003eMonitor\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "object"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDerivedGauge",
      "comment": "Gets the derived gauge of the specified object, if this object is contained in the set of observed MBeans, or null otherwise.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#getDerivedGauge(javax.management.ObjectName)\"\u003egetDerivedGauge\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobject\u003c/code\u003e - the name of the object whose derived gauge is to be returned."
        ],
        "return": [
          "The derived gauge of the specified object."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "object"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDerivedGaugeTimeStamp",
      "comment": "Gets the derived gauge timestamp of the specified object, if this object is contained in the set of observed MBeans, or 0 otherwise.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#getDerivedGaugeTimeStamp(javax.management.ObjectName)\"\u003egetDerivedGaugeTimeStamp\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobject\u003c/code\u003e - the name of the object whose derived gauge timestamp is to be returned."
        ],
        "return": [
          "The derived gauge timestamp of the specified object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "object"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getThreshold",
      "comment": "Gets the current threshold value of the specified object, if this object is contained in the set of observed MBeans, or null otherwise.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#setThreshold(java.lang.Number)\"\u003e\u003ccode\u003eCounterMonitorMBean.setThreshold(java.lang.Number)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#getThreshold(javax.management.ObjectName)\"\u003egetThreshold\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobject\u003c/code\u003e - the name of the object whose threshold is to be returned."
        ],
        "return": [
          "The threshold value of the specified object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInitThreshold",
      "comment": "Gets the initial threshold value common to all observed objects.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#setInitThreshold(java.lang.Number)\"\u003e\u003ccode\u003esetInitThreshold(java.lang.Number)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#getInitThreshold()\"\u003egetInitThreshold\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The initial threshold."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Number",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInitThreshold",
      "comment": "Sets the initial threshold value common to all observed objects. The current threshold of every object in the set of observed MBeans is updated consequently.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#getInitThreshold()\"\u003e\u003ccode\u003egetInitThreshold()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#setInitThreshold(java.lang.Number)\"\u003esetInitThreshold\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The initial threshold value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - The specified threshold is null or the threshold value is less than zero."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDerivedGauge",
      "comment": "Returns the derived gauge of the first object in the set of observed MBeans.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#getDerivedGauge()\"\u003egetDerivedGauge\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The derived gauge."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDerivedGaugeTimeStamp",
      "comment": "Gets the derived gauge timestamp of the first object in the set of observed MBeans.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#getDerivedGaugeTimeStamp()\"\u003egetDerivedGaugeTimeStamp\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The derived gauge timestamp."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getThreshold",
      "comment": "Gets the threshold value of the first object in the set of observed MBeans.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#setThreshold(java.lang.Number)\"\u003e\u003ccode\u003esetThreshold(java.lang.Number)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#getThreshold()\"\u003egetThreshold\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The threshold value."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Number",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setThreshold",
      "comment": "Sets the initial threshold value.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#getThreshold()\"\u003e\u003ccode\u003egetThreshold()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#setThreshold(java.lang.Number)\"\u003esetThreshold\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The initial threshold value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - The specified threshold is null or the threshold value is less than zero."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOffset",
      "comment": "Gets the offset value common to all observed MBeans.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#setOffset(java.lang.Number)\"\u003e\u003ccode\u003esetOffset(java.lang.Number)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#getOffset()\"\u003egetOffset\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The offset value."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Number",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setOffset",
      "comment": "Sets the offset value common to all observed MBeans.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#getOffset()\"\u003e\u003ccode\u003egetOffset()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#setOffset(java.lang.Number)\"\u003esetOffset\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The offset value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - The specified offset is null or the offset value is less than zero."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Number",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModulus",
      "comment": "Gets the modulus value common to all observed MBeans.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#setModulus(java.lang.Number)\"\u003e\u003ccode\u003esetModulus(java.lang.Number)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#getModulus()\"\u003egetModulus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The modulus value."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Number",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setModulus",
      "comment": "Sets the modulus value common to all observed MBeans.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#getModulus()\"\u003e\u003ccode\u003egetModulus()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#setModulus(java.lang.Number)\"\u003esetModulus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The modulus value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - The specified modulus is null or the modulus value is less than zero."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNotify",
      "comment": "Gets the notification\u0027s on/off switch value common to all observed MBeans.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#setNotify(boolean)\"\u003e\u003ccode\u003esetNotify(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#getNotify()\"\u003egetNotify\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the counter monitor notifies when exceeding the threshold, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNotify",
      "comment": "Sets the notification\u0027s on/off switch value common to all observed MBeans.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#getNotify()\"\u003e\u003ccode\u003egetNotify()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#setNotify(boolean)\"\u003esetNotify\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The notification\u0027s on/off switch value."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDifferenceMode",
      "comment": "Gets the difference mode flag value common to all observed MBeans.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#setDifferenceMode(boolean)\"\u003e\u003ccode\u003esetDifferenceMode(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#getDifferenceMode()\"\u003egetDifferenceMode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the difference mode is used, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDifferenceMode",
      "comment": "Sets the difference mode flag value common to all observed MBeans.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitor.html#getDifferenceMode()\"\u003e\u003ccode\u003egetDifferenceMode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html#setDifferenceMode(boolean)\"\u003esetDifferenceMode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/monitor/CounterMonitorMBean.html\" title\u003d\"interface in javax.management.monitor\"\u003eCounterMonitorMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The difference mode flag value."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.MBeanNotificationInfo",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNotificationInfo",
      "comment": "Returns a NotificationInfo object containing the name of the Java class of the notification and the notification types sent by the counter monitor.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html#getNotificationInfo()\"\u003egetNotificationInfo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html\" title\u003d\"interface in javax.management\"\u003eNotificationBroadcaster\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the array of possible notifications."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Default constructor.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.monitor.CounterMonitor",
  "comment": "Defines a monitor MBean designed to observe the values of a counter attribute. \n\u003cp\u003e A counter monitor sends a \u003ca href\u003d\"MonitorNotification.html#THRESHOLD_VALUE_EXCEEDED\"\u003e\u003ccode\u003ethreshold notification\u003c/code\u003e\u003c/a\u003e when the value of the counter reaches or exceeds a threshold known as the comparison level. The notify flag must be set to \u003ccode\u003etrue\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e In addition, an offset mechanism enables particular counting intervals to be detected. If the offset value is not zero, whenever the threshold is triggered by the counter value reaching a comparison level, that comparison level is incremented by the offset value. This is regarded as taking place instantaneously, that is, before the count is incremented. Thus, for each level, the threshold triggers an event notification every time the count increases by an interval equal to the offset value. \u003c/p\u003e\n\u003cp\u003e If the counter can wrap around its maximum value, the modulus needs to be specified. The modulus is the value at which the counter is reset to zero. \u003c/p\u003e\n\u003cp\u003e If the counter difference mode is used, the value of the derived gauge is calculated as the difference between the observed counter values for two successive observations. If this difference is negative, the value of the derived gauge is incremented by the value of the modulus. The derived gauge value (V[t]) is calculated using the following method: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eif (counter[t] - counter[t-GP]) is positive then V[t] \u003d counter[t] - counter[t-GP] \u003c/li\u003e\n \u003cli\u003eif (counter[t] - counter[t-GP]) is negative then V[t] \u003d counter[t] - counter[t-GP] + MODULUS \u003c/li\u003e\n\u003c/ul\u003e This implementation of the counter monitor requires the observed attribute to be of the type integer (\n\u003ccode\u003eByte\u003c/code\u003e, \n\u003ccode\u003eInteger\u003c/code\u003e, \n\u003ccode\u003eShort\u003c/code\u003e, \n\u003ccode\u003eLong\u003c/code\u003e).\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}