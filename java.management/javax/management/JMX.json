{
  "packageName": "javax.management",
  "simpleName": "JMX",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DEFAULT_VALUE_FIELD",
      "comment": "The name of the defaultValue field.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.JMX.DEFAULT_VALUE_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "IMMUTABLE_INFO_FIELD",
      "comment": "The name of the immutableInfo field.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.JMX.IMMUTABLE_INFO_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INTERFACE_CLASS_NAME_FIELD",
      "comment": "The name of the interfaceClassName field.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.JMX.INTERFACE_CLASS_NAME_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LEGAL_VALUES_FIELD",
      "comment": "The name of the legalValues field.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.JMX.LEGAL_VALUES_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_VALUE_FIELD",
      "comment": "The name of the maxValue field.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.JMX.MAX_VALUE_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_VALUE_FIELD",
      "comment": "The name of the minValue field.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.JMX.MIN_VALUE_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MXBEAN_FIELD",
      "comment": "The name of the mxbean field.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.JMX.MXBEAN_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OPEN_TYPE_FIELD",
      "comment": "The name of the openType field.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.JMX.OPEN_TYPE_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ORIGINAL_TYPE_FIELD",
      "comment": "The name of the originalType field.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.JMX.ORIGINAL_TYPE_FIELD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.management.MBeanServerConnection",
            "type": "Class"
          },
          "name": "connection",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "name": "objectName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "interfaceClass",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newMBeanProxy",
      "comment": "Make a proxy for a Standard MBean in a local or remote MBean Server. If you have an MBean Server mbs containing an MBean with ObjectName name, and if the MBean\u0027s management interface is described by the Java interface MyMBean, you can construct a proxy for the MBean like this:  MyMBean proxy \u003d JMX.newMBeanProxy(mbs, name, MyMBean.class);\n Suppose, for example, MyMBean looks like this:  public interface MyMBean {\n     public String getSomeAttribute();\n     public void setSomeAttribute(String value);\n     public void someOperation(String param1, int param2);\n }\n Then you can execute: proxy.getSomeAttribute() which will result in a call to mbs.getAttribute(name, \"SomeAttribute\"). proxy.setSomeAttribute(\"whatever\") which will result in a call to mbs.setAttribute(name, new Attribute(\"SomeAttribute\", \"whatever\")). proxy.someOperation(\"param1\", 2) which will be translated into a call to mbs.invoke(name, \"someOperation\", \u003cetc\u003e). The object returned by this method is a Proxy whose InvocationHandler is an MBeanServerInvocationHandler. This method is equivalent to newMBeanProxy(connection, objectName, interfaceClass, false).",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - allows the compiler to know that if the \n\u003ccode\u003e interfaceClass\u003c/code\u003e parameter is \n\u003ccode\u003eMyMBean.class\u003c/code\u003e, for example, then the return type is \n\u003ccode\u003eMyMBean\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003econnection\u003c/code\u003e - the MBean server to forward to.",
          "\u003ccode\u003eobjectName\u003c/code\u003e - the name of the MBean within \n\u003ccode\u003econnection\u003c/code\u003e to forward to.",
          "\u003ccode\u003einterfaceClass\u003c/code\u003e - the management interface that the MBean exports, which will also be implemented by the returned proxy."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einterfaceClass\u003c/code\u003e is not a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/package-summary.html#mgIface\"\u003ecompliant MBean interface\u003c/a\u003e"
        ],
        "return": [
          "the new proxy instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.management.MBeanServerConnection",
            "type": "Class"
          },
          "name": "connection",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "name": "objectName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "interfaceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "notificationEmitter",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newMBeanProxy",
      "comment": "Make a proxy for a Standard MBean in a local or remote MBean Server that may also support the methods of NotificationEmitter. This method behaves the same as newMBeanProxy(MBeanServerConnection, ObjectName, Class), but additionally, if notificationEmitter is true, then the MBean is assumed to be a NotificationBroadcaster or NotificationEmitter and the returned proxy will implement NotificationEmitter as well as interfaceClass. A call to NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) on the proxy will result in a call to MBeanServerConnection.addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object), and likewise for the other methods of NotificationBroadcaster and NotificationEmitter.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - allows the compiler to know that if the \n\u003ccode\u003e interfaceClass\u003c/code\u003e parameter is \n\u003ccode\u003eMyMBean.class\u003c/code\u003e, for example, then the return type is \n\u003ccode\u003eMyMBean\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003econnection\u003c/code\u003e - the MBean server to forward to.",
          "\u003ccode\u003eobjectName\u003c/code\u003e - the name of the MBean within \n\u003ccode\u003econnection\u003c/code\u003e to forward to.",
          "\u003ccode\u003einterfaceClass\u003c/code\u003e - the management interface that the MBean exports, which will also be implemented by the returned proxy.",
          "\u003ccode\u003enotificationEmitter\u003c/code\u003e - make the returned proxy implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationEmitter.html\" title\u003d\"interface in javax.management\"\u003e\u003ccode\u003eNotificationEmitter\u003c/code\u003e\u003c/a\u003e by forwarding its methods via \n\u003ccode\u003econnection\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einterfaceClass\u003c/code\u003e is not a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/package-summary.html#mgIface\"\u003ecompliant MBean interface\u003c/a\u003e"
        ],
        "return": [
          "the new proxy instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.management.MBeanServerConnection",
            "type": "Class"
          },
          "name": "connection",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "name": "objectName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "interfaceClass",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newMXBeanProxy",
      "comment": "Make a proxy for an MXBean in a local or remote MBean Server. If you have an MBean Server mbs containing an MXBean with ObjectName name, and if the MXBean\u0027s management interface is described by the Java interface MyMXBean, you can construct a proxy for the MXBean like this:  MyMXBean proxy \u003d JMX.newMXBeanProxy(mbs, name, MyMXBean.class);\n Suppose, for example, MyMXBean looks like this:  public interface MyMXBean {\n     public String getSimpleAttribute();\n     public void setSimpleAttribute(String value);\n     public MemoryUsage getMappedAttribute();\n     public void setMappedAttribute(MemoryUsage memoryUsage);\n     public MemoryUsage someOperation(String param1, MemoryUsage param2);\n }\n Then: proxy.getSimpleAttribute() will result in a call to mbs.getAttribute(name, \"SimpleAttribute\"). proxy.setSimpleAttribute(\"whatever\") will result in a call to mbs.setAttribute(name, new Attribute(\"SimpleAttribute\", \"whatever\")). Because String is a simple type, in the sense of SimpleType, it is not changed in the context of an MXBean. The MXBean proxy behaves the same as a Standard MBean proxy (see newMBeanProxy) for the attribute SimpleAttribute. proxy.getMappedAttribute() will result in a call to mbs.getAttribute(\"MappedAttribute\"). The MXBean mapping rules mean that the actual type of the attribute MappedAttribute will be CompositeData and that is what the mbs.getAttribute call will return. The proxy will then convert the CompositeData back into the expected type MemoryUsage using the MXBean mapping rules. Similarly, proxy.setMappedAttribute(memoryUsage) will convert the MemoryUsage argument into a CompositeData before calling mbs.setAttribute. proxy.someOperation(\"whatever\", memoryUsage) will convert the MemoryUsage argument into a CompositeData and call mbs.invoke. The value returned by mbs.invoke will be also be a CompositeData, and the proxy will convert this into the expected type MemoryUsage using the MXBean mapping rules. The object returned by this method is a Proxy whose InvocationHandler is an MBeanServerInvocationHandler. This method is equivalent to newMXBeanProxy(connection, objectName, interfaceClass, false).",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - allows the compiler to know that if the \n\u003ccode\u003e interfaceClass\u003c/code\u003e parameter is \n\u003ccode\u003eMyMXBean.class\u003c/code\u003e, for example, then the return type is \n\u003ccode\u003eMyMXBean\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003econnection\u003c/code\u003e - the MBean server to forward to.",
          "\u003ccode\u003eobjectName\u003c/code\u003e - the name of the MBean within \n\u003ccode\u003econnection\u003c/code\u003e to forward to.",
          "\u003ccode\u003einterfaceClass\u003c/code\u003e - the MXBean interface, which will also be implemented by the returned proxy."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einterfaceClass\u003c/code\u003e is not a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MXBean.html\" title\u003d\"annotation in javax.management\"\u003e\u003ccode\u003ecompliant MXBean interface\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the new proxy instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.management.MBeanServerConnection",
            "type": "Class"
          },
          "name": "connection",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "name": "objectName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "interfaceClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "notificationEmitter",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newMXBeanProxy",
      "comment": "Make a proxy for an MXBean in a local or remote MBean Server that may also support the methods of NotificationEmitter. This method behaves the same as newMXBeanProxy(MBeanServerConnection, ObjectName, Class), but additionally, if notificationEmitter is true, then the MXBean is assumed to be a NotificationBroadcaster or NotificationEmitter and the returned proxy will implement NotificationEmitter as well as interfaceClass. A call to NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) on the proxy will result in a call to MBeanServerConnection.addNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object), and likewise for the other methods of NotificationBroadcaster and NotificationEmitter.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - allows the compiler to know that if the \n\u003ccode\u003e interfaceClass\u003c/code\u003e parameter is \n\u003ccode\u003eMyMXBean.class\u003c/code\u003e, for example, then the return type is \n\u003ccode\u003eMyMXBean\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003econnection\u003c/code\u003e - the MBean server to forward to.",
          "\u003ccode\u003eobjectName\u003c/code\u003e - the name of the MBean within \n\u003ccode\u003econnection\u003c/code\u003e to forward to.",
          "\u003ccode\u003einterfaceClass\u003c/code\u003e - the MXBean interface, which will also be implemented by the returned proxy.",
          "\u003ccode\u003enotificationEmitter\u003c/code\u003e - make the returned proxy implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationEmitter.html\" title\u003d\"interface in javax.management\"\u003e\u003ccode\u003eNotificationEmitter\u003c/code\u003e\u003c/a\u003e by forwarding its methods via \n\u003ccode\u003econnection\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einterfaceClass\u003c/code\u003e is not a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MXBean.html\" title\u003d\"annotation in javax.management\"\u003e\u003ccode\u003ecompliant MXBean interface\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the new proxy instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "interfaceClass",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isMXBeanInterface",
      "comment": "Test whether an interface is an MXBean interface. An interface is an MXBean interface if it is public, annotated @MXBean or @MXBean(true) or if it does not have an @MXBean annotation and its name ends with \"MXBean\".",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einterfaceClass\u003c/code\u003e - The candidate interface."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einterfaceClass\u003c/code\u003e is null."
        ],
        "return": [
          "true if \n\u003ccode\u003einterfaceClass\u003c/code\u003e is a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MXBean.html\" title\u003d\"annotation in javax.management\"\u003e\u003ccode\u003ecompliant MXBean interface\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.JMX",
  "comment": "Static methods from the JMX API. There are no instances of this class.",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}