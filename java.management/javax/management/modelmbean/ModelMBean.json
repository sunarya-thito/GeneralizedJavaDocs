{
  "packageName": "javax.management.modelmbean",
  "simpleName": "ModelMBean",
  "moduleName": "java.management",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "javax.management.DynamicMBean",
      "type": "Class"
    },
    {
      "name": "javax.management.PersistentMBean",
      "type": "Class"
    },
    {
      "name": "javax.management.modelmbean.ModelMBeanNotificationBroadcaster",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.MBeanException",
          "type": "Class"
        },
        {
          "name": "javax.management.RuntimeOperationsException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.modelmbean.ModelMBeanInfo",
            "type": "Class"
          },
          "field": {
            "name": "inModelMBeanInfo"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setModelMBeanInfo",
      "comment": "Initializes a ModelMBean object using ModelMBeanInfo passed in. This method makes it possible to set a customized ModelMBeanInfo on the ModelMBean as long as it is not registered with the MBeanServer. Once the ModelMBean\u0027s ModelMBeanInfo (with Descriptors) are customized and set on the ModelMBean, the ModelMBean can be registered with the MBeanServer. If the ModelMBean is currently registered, this method throws a RuntimeOperationsException wrapping an IllegalStateException",
      "tagMap": {
        "param": [
          "\u003ccode\u003einModelMBeanInfo\u003c/code\u003e - The ModelMBeanInfo object to be used by the ModelMBean."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanException.html\" title\u003d\"class in javax.management\"\u003eMBeanException\u003c/a\u003e\u003c/code\u003e - Wraps a distributed communication Exception.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/RuntimeOperationsException.html\" title\u003d\"class in javax.management\"\u003eRuntimeOperationsException\u003c/a\u003e\u003c/code\u003e - \n\u003cul\u003e\n \u003cli\u003eWraps an \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/a\u003e if the MBeanInfo passed in parameter is null.\u003c/li\u003e \n \u003cli\u003eWraps an \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eIllegalStateException\u003c/code\u003e\u003c/a\u003e if the ModelMBean is currently registered in the MBeanServer.\u003c/li\u003e \n\u003c/ul\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.MBeanException",
          "type": "Class"
        },
        {
          "name": "javax.management.RuntimeOperationsException",
          "type": "Class"
        },
        {
          "name": "javax.management.InstanceNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.modelmbean.InvalidTargetObjectTypeException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "mr"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mr_type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setManagedResource",
      "comment": "Sets the instance handle of the object against which to execute all methods in this ModelMBean management interface (MBeanInfo and Descriptors).",
      "tagMap": {
        "param": [
          "\u003ccode\u003emr\u003c/code\u003e - Object that is the managed resource",
          "\u003ccode\u003emr_type\u003c/code\u003e - The type of reference for the managed resource. Can be: ObjectReference, Handle, IOR, EJBHandle, RMIReference. If the MBeanServer cannot process the mr_type passed in, an InvalidTargetTypeException will be thrown."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanException.html\" title\u003d\"class in javax.management\"\u003eMBeanException\u003c/a\u003e\u003c/code\u003e - The initializer of the object has thrown an exception.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/RuntimeOperationsException.html\" title\u003d\"class in javax.management\"\u003eRuntimeOperationsException\u003c/a\u003e\u003c/code\u003e - Wraps an IllegalArgumentException: The managed resource type passed in parameter is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/InstanceNotFoundException.html\" title\u003d\"class in javax.management\"\u003eInstanceNotFoundException\u003c/a\u003e\u003c/code\u003e - The managed resource object could not be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/modelmbean/InvalidTargetObjectTypeException.html\" title\u003d\"class in javax.management.modelmbean\"\u003eInvalidTargetObjectTypeException\u003c/a\u003e\u003c/code\u003e - The managed resource type cannot be processed by the ModelMBean or JMX Agent."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.management.modelmbean.ModelMBean",
  "comment": "This interface must be implemented by the ModelMBeans. An implementation of this interface must be shipped with every JMX Agent. \n\u003cp\u003e Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer\u0027s createMBean method. The resource then sets the ModelMBeanInfo (with Descriptors) for the ModelMBean instance. The attributes and operations exposed via the ModelMBeanInfo for the ModelMBean are accessible from MBeans, connectors/adaptors like other MBeans. Through the ModelMBeanInfo Descriptors, values and methods in the managed application can be defined and mapped to attributes and operations of the ModelMBean. This mapping can be defined during development in an XML formatted file or dynamically and programmatically at runtime. \u003c/p\u003e\n\u003cp\u003e Every ModelMBean which is instantiated in the MBeanServer becomes manageable: its attributes and operations become remotely accessible through the connectors/adaptors connected to that MBeanServer. A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean. By instantiating a ModelMBean, resources are guaranteed that the MBean is valid. \u003c/p\u003e\n\u003cp\u003e MBeanException and RuntimeOperationsException must be thrown on every public method. This allows for wrapping exceptions from distributed communications (RMI, EJB, etc.). These exceptions do not have to be thrown by the implementation except in the scenarios described in the specification and javadoc.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}