{
  "packageName": "javax.management.relation",
  "simpleName": "RoleInfo",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROLE_CARDINALITY_INFINITY",
      "comment": "To specify an unlimited cardinality.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.relation.RoleInfo.ROLE_CARDINALITY_INFINITY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Returns the name of the role.",
      "tagMap": {
        "return": [
          "the name of the role."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isReadable",
      "comment": "Returns read access mode for the role (true if it is readable).",
      "tagMap": {
        "return": [
          "true if the role is readable."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isWritable",
      "comment": "Returns write access mode for the role (true if it is writable).",
      "tagMap": {
        "return": [
          "true if the role is writable."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDescription",
      "comment": "Returns description text for the role.",
      "tagMap": {
        "return": [
          "the description of the role."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinDegree",
      "comment": "Returns minimum degree for corresponding role reference.",
      "tagMap": {
        "return": [
          "the minimum degree."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaxDegree",
      "comment": "Returns maximum degree for corresponding role reference.",
      "tagMap": {
        "return": [
          "the maximum degree."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRefMBeanClassName",
      "comment": "Returns name of type of MBean expected to be referenced in corresponding role.",
      "tagMap": {
        "return": [
          "the name of the referenced type."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "checkMinDegree",
      "comment": "Returns true if the value parameter is greater than or equal to the expected minimum degree, false otherwise.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to be checked"
        ],
        "return": [
          "true if greater than or equal to minimum degree, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "checkMaxDegree",
      "comment": "Returns true if the value parameter is lower than or equal to the expected maximum degree, false otherwise.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to be checked"
        ],
        "return": [
          "true if lower than or equal to maximum degree, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string describing the role info.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a description of the role info."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRoleInfoException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.NotCompliantMBeanException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mbeanClassName"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "read"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "write"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "min"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "max"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "descr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eroleName\u003c/code\u003e - name of the role.",
          "\u003ccode\u003embeanClassName\u003c/code\u003e - name of the class of MBean(s) expected to be referenced in corresponding role. If an MBean \n\u003cem\u003eM\u003c/em\u003e is in this role, then the MBean server must return true for \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanServer.html#isInstanceOf(javax.management.ObjectName,java.lang.String)\"\u003e\u003ccode\u003eisInstanceOf(M, mbeanClassName)\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003eread\u003c/code\u003e - flag to indicate if the corresponding role can be read",
          "\u003ccode\u003ewrite\u003c/code\u003e - flag to indicate if the corresponding role can be set",
          "\u003ccode\u003emin\u003c/code\u003e - minimum degree for role, i.e. minimum number of MBeans to provide in corresponding role Must be less than or equal to \n\u003ccode\u003emax\u003c/code\u003e. (ROLE_CARDINALITY_INFINITY for unlimited)",
          "\u003ccode\u003emax\u003c/code\u003e - maximum degree for role, i.e. maximum number of MBeans to provide in corresponding role Must be greater than or equal to \n\u003ccode\u003emin\u003c/code\u003e (ROLE_CARDINALITY_INFINITY for unlimited)",
          "\u003ccode\u003edescr\u003c/code\u003e - description of the role (can be null)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRoleInfoException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRoleInfoException\u003c/a\u003e\u003c/code\u003e - if the minimum degree is greater than the maximum degree.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - As of JMX 1.2, this exception can no longer be thrown. It is retained in the declaration of this class for compatibility with existing code.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotCompliantMBeanException.html\" title\u003d\"class in javax.management\"\u003eNotCompliantMBeanException\u003c/a\u003e\u003c/code\u003e - if the class mbeanClassName is not a MBean class."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.NotCompliantMBeanException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mbeanClassName"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "read"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "write"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eroleName\u003c/code\u003e - name of the role",
          "\u003ccode\u003embeanClassName\u003c/code\u003e - name of the class of MBean(s) expected to be referenced in corresponding role. If an MBean \n\u003cem\u003eM\u003c/em\u003e is in this role, then the MBean server must return true for \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanServer.html#isInstanceOf(javax.management.ObjectName,java.lang.String)\"\u003e\u003ccode\u003eisInstanceOf(M, mbeanClassName)\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003eread\u003c/code\u003e - flag to indicate if the corresponding role can be read",
          "\u003ccode\u003ewrite\u003c/code\u003e - flag to indicate if the corresponding role can be set \n\u003cp\u003eMinimum and maximum degrees defaulted to 1. \u003c/p\u003e\n\u003cp\u003eDescription of role defaulted to null.\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - As of JMX 1.2, this exception can no longer be thrown. It is retained in the declaration of this class for compatibility with existing code.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotCompliantMBeanException.html\" title\u003d\"class in javax.management\"\u003eNotCompliantMBeanException\u003c/a\u003e\u003c/code\u003e - As of JMX 1.2, this exception can no longer be thrown. It is retained in the declaration of this class for compatibility with existing code."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.NotCompliantMBeanException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "mbeanClassName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eroleName\u003c/code\u003e - name of the role",
          "\u003ccode\u003embeanClassName\u003c/code\u003e - name of the class of MBean(s) expected to be referenced in corresponding role. If an MBean \n\u003cem\u003eM\u003c/em\u003e is in this role, then the MBean server must return true for \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanServer.html#isInstanceOf(javax.management.ObjectName,java.lang.String)\"\u003e\u003ccode\u003eisInstanceOf(M, mbeanClassName)\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003eIsReadable and IsWritable defaulted to true. \u003c/p\u003e\n\u003cp\u003eMinimum and maximum degrees defaulted to 1. \u003c/p\u003e\n\u003cp\u003eDescription of role defaulted to null.\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - As of JMX 1.2, this exception can no longer be thrown. It is retained in the declaration of this class for compatibility with existing code.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotCompliantMBeanException.html\" title\u003d\"class in javax.management\"\u003eNotCompliantMBeanException\u003c/a\u003e\u003c/code\u003e - As of JMX 1.2, this exception can no longer be thrown. It is retained in the declaration of this class for compatibility with existing code."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.relation.RoleInfo",
            "type": "Class"
          },
          "field": {
            "name": "roleInfo"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Copy constructor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eroleInfo\u003c/code\u003e - the \n\u003ccode\u003eRoleInfo\u003c/code\u003e instance to be copied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.relation.RoleInfo",
  "comment": "A RoleInfo object summarises a role in a relation type. \n\u003cp\u003eThe \u003cb\u003eserialVersionUID\u003c/b\u003e of this class is \u003ccode\u003e2504952983494636987L\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.management.relation.RoleInfo\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}