{
  "packageName": "javax.management.relation",
  "simpleName": "Relation",
  "moduleName": "java.management",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "javax.management.ObjectName",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRole",
      "comment": "Retrieves role value for given role name. Checks if the role exists and is readable according to the relation type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#setRole(javax.management.relation.Role)\"\u003e\u003ccode\u003esetRole(javax.management.relation.Role)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eroleName\u003c/code\u003e - name of role"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null role name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if: \n\u003cp\u003e- there is no role with given name \u003c/p\u003e\n\u003cp\u003e- the role is not readable.\u003c/p\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server"
        ],
        "return": [
          "the ArrayList of ObjectName objects being the role value"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "roleNameArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRoles",
      "comment": "Retrieves values of roles with given names. Checks for each role if it exists and is readable according to the relation type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#setRoles(javax.management.relation.RoleList)\"\u003e\u003ccode\u003esetRoles(javax.management.relation.RoleList)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eroleNameArray\u003c/code\u003e - array of names of roles to be retrieved"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null role name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server"
        ],
        "return": [
          "a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not retrieved)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRoleCardinality",
      "comment": "Returns the number of MBeans currently referenced in the given role.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eroleName\u003c/code\u003e - name of role"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null role name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if there is no role with given name"
        ],
        "return": [
          "the number of currently referenced MBeans in that role"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAllRoles",
      "comment": "Returns all roles present in the relation.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server"
        ],
        "return": [
          "a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not readable)."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleList",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "retrieveAllRoles",
      "comment": "Returns all roles in the relation without checking read mode.",
      "tagMap": {
        "return": [
          "a RoleList."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRoleValueException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.relation.Role",
            "type": "Class"
          },
          "field": {
            "name": "role"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRole",
      "comment": "Sets the given role. Will check the role according to its corresponding role definition provided in relation\u0027s relation type Will send a notification (RelationNotification with type RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the relation is a MBean or not).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#getRole(java.lang.String)\"\u003e\u003ccode\u003egetRole(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erole\u003c/code\u003e - role to be set (name and new value)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null role",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if there is no role with the supplied role\u0027s name or if the role is not writable (no test on the write access mode performed when initializing the role)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRoleValueException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRoleValueException\u003c/a\u003e\u003c/code\u003e - if value provided for role is not valid, i.e.: \n\u003cp\u003e- the number of referenced MBeans in given value is less than expected minimum degree \u003c/p\u003e\n\u003cp\u003e- the number of referenced MBeans in provided value exceeds expected maximum degree \u003c/p\u003e\n\u003cp\u003e- one referenced MBean in the value is not an Object of the MBean class expected for that role \u003c/p\u003e\n\u003cp\u003e- a MBean provided for that role does not exist.\u003c/p\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation type has not been declared in the Relation Service.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation has not been added in the Relation Service."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.relation.RoleList",
            "type": "Class"
          },
          "field": {
            "name": "roleList"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRoles",
      "comment": "Sets the given roles. Will check the role according to its corresponding role definition provided in relation\u0027s relation type Will send one notification (RelationNotification with type RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the relation is a MBean or not) per updated role.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#getRoles(java.lang.String%5B%5D)\"\u003e\u003ccode\u003egetRoles(java.lang.String[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eroleList\u003c/code\u003e - list of roles to be set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null role list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation type has not been declared in the Relation Service.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation MBean has not been added in the Relation Service."
        ],
        "return": [
          "a RoleResult object, including a RoleList (for roles successfully set) and a RoleUnresolvedList (for roles not set)."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRoleValueException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "objectName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "handleMBeanUnregistration",
      "comment": "Callback used by the Relation Service when a MBean referenced in a role is unregistered. The Relation Service will call this method to let the relation take action to reflect the impact of such unregistration. BEWARE. the user is not expected to call this method. Current implementation is to set the role with its current value (list of ObjectNames of referenced MBeans) without the unregistered one.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eobjectName\u003c/code\u003e - ObjectName of unregistered MBean",
          "\u003ccode\u003eroleName\u003c/code\u003e - name of role where the MBean is referenced"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if role does not exist in the relation or is not writable",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRoleValueException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRoleValueException\u003c/a\u003e\u003c/code\u003e - if role value does not conform to the associated role info (this will never happen when called from the Relation Service)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation type has not been declared in the Relation Service.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if this method is called for a relation MBean not added in the Relation Service."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getReferencedMBeans",
      "comment": "Retrieves MBeans referenced in the various roles of the relation.",
      "tagMap": {
        "return": [
          "a HashMap mapping: \n\u003cp\u003e ObjectName -\u0026gt; ArrayList of String (role names)\u003c/p\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRelationTypeName",
      "comment": "Returns name of associated relation type.",
      "tagMap": {
        "return": [
          "the name of the relation type."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRelationServiceName",
      "comment": "Returns ObjectName of the Relation Service handling the relation.",
      "tagMap": {
        "return": [
          "the ObjectName of the Relation Service."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRelationId",
      "comment": "Returns relation identifier (used to uniquely identify the relation inside the Relation Service).",
      "tagMap": {
        "return": [
          "the relation id."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.management.relation.Relation",
  "comment": "This interface has to be implemented by any MBean class expected to represent a relation managed using the Relation Service. \n\u003cp\u003eSimple relations, i.e. having only roles, no properties or methods, can be created directly by the Relation Service (represented as RelationSupport objects, internally handled by the Relation Service). \u003c/p\u003e\n\u003cp\u003eIf the user wants to represent more complex relations, involving properties and/or methods, he has to provide his own class implementing the Relation interface. This can be achieved either by inheriting from RelationSupport class, or by implementing the interface (fully or delegation to a RelationSupport object member). \u003c/p\u003e\n\u003cp\u003eSpecifying such user relation class is to introduce properties and/or methods. Those have to be exposed for remote management. So this means that any user relation class must be a MBean class.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}