{
  "packageName": "javax.management.relation",
  "simpleName": "RelationSupport",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "javax.management.ObjectName",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRole",
      "comment": "Retrieves role value for given role name. Checks if the role exists and is readable according to the relation type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationSupport.html#setRole(javax.management.relation.Role)\"\u003e\u003ccode\u003esetRole(javax.management.relation.Role)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#getRole(java.lang.String)\"\u003egetRole\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eroleName\u003c/code\u003e - name of role"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null role name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if: \n\u003cp\u003e- there is no role with given name \u003c/p\u003e\n\u003cp\u003e- the role is not readable.\u003c/p\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server"
        ],
        "return": [
          "the ArrayList of ObjectName objects being the role value"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "roleNameArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRoles",
      "comment": "Retrieves values of roles with given names. Checks for each role if it exists and is readable according to the relation type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationSupport.html#setRoles(javax.management.relation.RoleList)\"\u003e\u003ccode\u003esetRoles(javax.management.relation.RoleList)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#getRoles(java.lang.String%5B%5D)\"\u003egetRoles\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eroleNameArray\u003c/code\u003e - array of names of roles to be retrieved"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null role name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server"
        ],
        "return": [
          "a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not retrieved)."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAllRoles",
      "comment": "Returns all roles present in the relation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#getAllRoles()\"\u003egetAllRoles\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server"
        ],
        "return": [
          "a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not readable)."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleList",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "retrieveAllRoles",
      "comment": "Returns all roles in the relation without checking read mode.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#retrieveAllRoles()\"\u003eretrieveAllRoles\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a RoleList"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRoleCardinality",
      "comment": "Returns the number of MBeans currently referenced in the given role.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#getRoleCardinality(java.lang.String)\"\u003egetRoleCardinality\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eroleName\u003c/code\u003e - name of role"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null role name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if there is no role with given name"
        ],
        "return": [
          "the number of currently referenced MBeans in that role"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRoleValueException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.relation.Role",
            "type": "Class"
          },
          "field": {
            "name": "role"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRole",
      "comment": "Sets the given role. Will check the role according to its corresponding role definition provided in relation\u0027s relation type Will send a notification (RelationNotification with type RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the relation is a MBean or not).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationSupport.html#getRole(java.lang.String)\"\u003e\u003ccode\u003egetRole(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#setRole(javax.management.relation.Role)\"\u003esetRole\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erole\u003c/code\u003e - role to be set (name and new value)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null role",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if there is no role with the supplied role\u0027s name or if the role is not writable (no test on the write access mode performed when initializing the role)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRoleValueException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRoleValueException\u003c/a\u003e\u003c/code\u003e - if value provided for role is not valid, i.e.: \n\u003cp\u003e- the number of referenced MBeans in given value is less than expected minimum degree \u003c/p\u003e\n\u003cp\u003e- the number of referenced MBeans in provided value exceeds expected maximum degree \u003c/p\u003e\n\u003cp\u003e- one referenced MBean in the value is not an Object of the MBean class expected for that role \u003c/p\u003e\n\u003cp\u003e- a MBean provided for that role does not exist\u003c/p\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation type has not been declared in the Relation Service",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation has not been added in the Relation Service."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.relation.RoleList",
            "type": "Class"
          },
          "field": {
            "name": "list"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRoles",
      "comment": "Sets the given roles. Will check the role according to its corresponding role definition provided in relation\u0027s relation type Will send one notification (RelationNotification with type RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the relation is a MBean or not) per updated role.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationSupport.html#getRoles(java.lang.String%5B%5D)\"\u003e\u003ccode\u003egetRoles(java.lang.String[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#setRoles(javax.management.relation.RoleList)\"\u003esetRoles\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - list of roles to be set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null role list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation type has not been declared in the Relation Service.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation MBean has not been added in the Relation Service."
        ],
        "return": [
          "a RoleResult object, including a RoleList (for roles successfully set) and a RoleUnresolvedList (for roles not set)."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRoleValueException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "objectName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "handleMBeanUnregistration",
      "comment": "Callback used by the Relation Service when a MBean referenced in a role is unregistered. The Relation Service will call this method to let the relation take action to reflect the impact of such unregistration. BEWARE. the user is not expected to call this method. Current implementation is to set the role with its current value (list of ObjectNames of referenced MBeans) without the unregistered one.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#handleMBeanUnregistration(javax.management.ObjectName,java.lang.String)\"\u003ehandleMBeanUnregistration\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobjectName\u003c/code\u003e - ObjectName of unregistered MBean",
          "\u003ccode\u003eroleName\u003c/code\u003e - name of role where the MBean is referenced"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if role does not exist in the relation or is not writable",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRoleValueException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRoleValueException\u003c/a\u003e\u003c/code\u003e - if role value does not conform to the associated role info (this will never happen when called from the Relation Service)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation type has not been declared in the Relation Service.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if this method is called for a relation MBean not added in the Relation Service."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReferencedMBeans",
      "comment": "Retrieves MBeans referenced in the various roles of the relation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#getReferencedMBeans()\"\u003egetReferencedMBeans\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a HashMap mapping: \n\u003cp\u003e ObjectName -\u0026gt; ArrayList of String (role names)\u003c/p\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRelationTypeName",
      "comment": "Returns name of associated relation type.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#getRelationTypeName()\"\u003egetRelationTypeName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the name of the relation type."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRelationServiceName",
      "comment": "Returns ObjectName of the Relation Service handling the relation.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#getRelationServiceName()\"\u003egetRelationServiceName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the ObjectName of the Relation Service."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRelationId",
      "comment": "Returns relation identifier (used to uniquely identify the relation inside the Relation Service).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html#getRelationId()\"\u003egetRelationId\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/Relation.html\" title\u003d\"interface in javax.management.relation\"\u003eRelation\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the relation id."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanServer",
            "type": "Class"
          },
          "field": {
            "name": "server"
          }
        },
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preRegister",
      "comment": "Description copied from interface: MBeanRegistration",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#preRegister(javax.management.MBeanServer,javax.management.ObjectName)\"\u003epreRegister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eserver\u003c/code\u003e - The MBean Server in which the MBean will be registered.",
          "\u003ccode\u003ename\u003c/code\u003e - The object name of the MBean. This name is null if the name parameter to one of the \n\u003ccode\u003ecreateMBean\u003c/code\u003e or \n\u003ccode\u003eregisterMBean\u003c/code\u003e methods in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanServer.html\" title\u003d\"interface in javax.management\"\u003e\u003ccode\u003eMBeanServer\u003c/code\u003e\u003c/a\u003e interface is null. In that case, this method must return a non-null ObjectName for the new MBean."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - This exception will be caught by the MBean Server and re-thrown as an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistrationException.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eMBeanRegistrationException\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "The name under which the MBean is to be registered. This value must not be null. If the \n\u003ccode\u003ename\u003c/code\u003e parameter is not null, it will usually but not necessarily be the returned value."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Boolean",
            "type": "Class"
          },
          "field": {
            "name": "registrationDone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postRegister",
      "comment": "Description copied from interface: MBeanRegistration",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#postRegister(java.lang.Boolean)\"\u003epostRegister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eregistrationDone\u003c/code\u003e - Indicates whether or not the MBean has been successfully registered in the MBean server. The value false means that the registration phase has failed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preDeregister",
      "comment": "Description copied from interface: MBeanRegistration",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#preDeregister()\"\u003epreDeregister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - This exception will be caught by the MBean server and re-thrown as an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistrationException.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eMBeanRegistrationException\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postDeregister",
      "comment": "Description copied from interface: MBeanRegistration",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#postDeregister()\"\u003epostDeregister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isInRelationService",
      "comment": "Returns an internal flag specifying if the object is still handled by the Relation Service.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationSupportMBean.html#isInRelationService()\"\u003eisInRelationService\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationSupportMBean.html\" title\u003d\"interface in javax.management.relation\"\u003eRelationSupportMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a Boolean equal to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Boolean.html#TRUE\"\u003e\u003ccode\u003eBoolean.TRUE\u003c/code\u003e\u003c/a\u003e if the object is still handled by the Relation Service and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Boolean.html#FALSE\"\u003e\u003ccode\u003eBoolean.FALSE\u003c/code\u003e\u003c/a\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Boolean",
            "type": "Class"
          },
          "field": {
            "name": "flag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRelationServiceManagementFlag",
      "comment": "Description copied from interface: RelationSupportMBean",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationSupportMBean.html#setRelationServiceManagementFlag(java.lang.Boolean)\"\u003esetRelationServiceManagementFlag\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationSupportMBean.html\" title\u003d\"interface in javax.management.relation\"\u003eRelationSupportMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - whether the relation is handled by the Relation Service."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.management.relation.InvalidRoleValueException",
          "type": "Class"
        },
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        },
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "relationServiceName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        },
        {
          "type": {
            "name": "javax.management.relation.RoleList",
            "type": "Class"
          },
          "field": {
            "name": "list"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a RelationSupport object. This constructor has to be used when the RelationSupport object will be registered as a MBean by the user, or when creating a user relation MBean whose class extends RelationSupport. Nothing is done at the Relation Service level, i.e. the RelationSupport object is not added to the RelationService and no checks are performed to see if the provided values are correct. The object is always created, EXCEPT if: - any of the required parameters is null. - the same name is used for two roles. To be handled as a relation, the RelationSupport object has to be added to the Relation Service using the Relation Service method addRelation().",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation identifier, to identify the relation in the Relation Service. \n\u003cp\u003eExpected to be unique in the given Relation Service.\u003c/p\u003e",
          "\u003ccode\u003erelationServiceName\u003c/code\u003e - ObjectName of the Relation Service where the relation will be registered. \n\u003cp\u003eThis parameter is required as it is the Relation Service that is aware of the definition of the relation type of the given relation, so that will be able to check update operations (set).\u003c/p\u003e",
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - Name of relation type. \n\u003cp\u003eExpected to have been created in the given Relation Service.\u003c/p\u003e",
          "\u003ccode\u003elist\u003c/code\u003e - list of roles (Role objects) to initialize the relation. Can be \n\u003ccode\u003enull\u003c/code\u003e. \n\u003cp\u003eExpected to conform to relation info in associated relation type.\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRoleValueException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRoleValueException\u003c/a\u003e\u003c/code\u003e - if the same name is used for two roles.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the required parameters (relation id, relation service ObjectName, or relation type name) is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "javax.management.relation.InvalidRoleValueException",
          "type": "Class"
        },
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        },
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "relationServiceName"
          }
        },
        {
          "type": {
            "name": "javax.management.MBeanServer",
            "type": "Class"
          },
          "field": {
            "name": "relationServiceMBeanServer"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        },
        {
          "type": {
            "name": "javax.management.relation.RoleList",
            "type": "Class"
          },
          "field": {
            "name": "list"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a RelationSupport object. This constructor has to be used when the user relation MBean implements the interfaces expected to be supported by a relation by delegating to a RelationSupport object. This object needs to know the Relation Service expected to handle the relation. So it has to know the MBean Server where the Relation Service is registered. According to a limitation, a relation MBean must be registered in the same MBean Server as the Relation Service expected to handle it. So the user relation MBean has to be created and registered, and then the wrapped RelationSupport object can be created within the identified MBean Server. Nothing is done at the Relation Service level, i.e. the RelationSupport object is not added to the RelationService and no checks are performed to see if the provided values are correct. The object is always created, EXCEPT if: - any of the required parameters is null. - the same name is used for two roles. To be handled as a relation, the RelationSupport object has to be added to the Relation Service using the Relation Service method addRelation().",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation identifier, to identify the relation in the Relation Service. \n\u003cp\u003eExpected to be unique in the given Relation Service.\u003c/p\u003e",
          "\u003ccode\u003erelationServiceName\u003c/code\u003e - ObjectName of the Relation Service where the relation will be registered. \n\u003cp\u003eThis parameter is required as it is the Relation Service that is aware of the definition of the relation type of the given relation, so that will be able to check update operations (set).\u003c/p\u003e",
          "\u003ccode\u003erelationServiceMBeanServer\u003c/code\u003e - MBean Server where the wrapping MBean is or will be registered. \n\u003cp\u003eExpected to be the MBean Server where the Relation Service is or will be registered.\u003c/p\u003e",
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - Name of relation type. \n\u003cp\u003eExpected to have been created in the given Relation Service.\u003c/p\u003e",
          "\u003ccode\u003elist\u003c/code\u003e - list of roles (Role objects) to initialize the relation. Can be \n\u003ccode\u003enull\u003c/code\u003e. \n\u003cp\u003eExpected to conform to relation info in associated relation type.\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRoleValueException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRoleValueException\u003c/a\u003e\u003c/code\u003e - if the same name is used for two roles.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the required parameters (relation id, relation service ObjectName, relation service MBeanServer, or relation type name) is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.relation.RelationSupport",
  "comment": "A RelationSupport object is used internally by the Relation Service to represent simple relations (only roles, no properties or methods), with an unlimited number of roles, of any relation type. As internal representation, it is not exposed to the user. \n\u003cp\u003eRelationSupport class conforms to the design patterns of standard MBean. So the user can decide to instantiate a RelationSupport object himself as a MBean (as it follows the MBean design patterns), to register it in the MBean Server, and then to add it in the Relation Service. \u003c/p\u003e\n\u003cp\u003eThe user can also, when creating his own MBean relation class, have it extending RelationSupport, to retrieve the implementations of required interfaces (see below). \u003c/p\u003e\n\u003cp\u003eIt is also possible to have in a user relation MBean class a member being a RelationSupport object, and to implement the required interfaces by delegating all to this member. \u003c/p\u003e\n\u003cp\u003e RelationSupport implements the Relation interface (to be handled by the Relation Service). \u003c/p\u003e\n\u003cp\u003eIt implements also the MBeanRegistration interface to be able to retrieve the MBean Server where it is registered (if registered as a MBean) to access to its Relation Service.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}