{
  "packageName": "javax.management.relation",
  "simpleName": "RelationServiceMBean",
  "moduleName": "java.management",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isActive",
      "comment": "Checks if the Relation Service is active. Current condition is that the Relation Service must be registered in the MBean Server",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if it is not registered"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPurgeFlag",
      "comment": "Returns the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate \"purge\" of the relations (look for the relations no longer valid) has to be performed, or if that will be performed only when the purgeRelations method is explicitly called. true is immediate purge.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceMBean.html#setPurgeFlag(boolean)\"\u003e\u003ccode\u003esetPurgeFlag(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if purges are immediate."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "purgeFlag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPurgeFlag",
      "comment": "Sets the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate \"purge\" of the relations (look for the relations no longer valid) has to be performed, or if that will be performed only when the purgeRelations method is explicitly called. true is immediate purge.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceMBean.html#getPurgeFlag()\"\u003e\u003ccode\u003egetPurgeFlag()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epurgeFlag\u003c/code\u003e - flag"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRelationTypeException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        },
        {
          "type": {
            "name": "javax.management.relation.RoleInfo",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "roleInfoArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createRelationType",
      "comment": "Creates a relation type (RelationTypeSupport object) with given role infos (provided by the RoleInfo objects), and adds it in the Relation Service.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - name of the relation type",
          "\u003ccode\u003eroleInfoArray\u003c/code\u003e - array of role infos"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRelationTypeException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRelationTypeException\u003c/a\u003e\u003c/code\u003e - If: \n\u003cp\u003e- there is already a relation type with that name \u003c/p\u003e\n\u003cp\u003e- the same name has been used for two different role infos \u003c/p\u003e\n\u003cp\u003e- no role info provided \u003c/p\u003e\n\u003cp\u003e- one null role info provided\u003c/p\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRelationTypeException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.relation.RelationType",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeObj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addRelationType",
      "comment": "Adds given object as a relation type. The object is expected to implement the RelationType interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationTypeObj\u003c/code\u003e - relation type object (implementing the RelationType interface)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter or if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationType.html#getRelationTypeName()\"\u003e\u003ccode\u003erelationTypeObj.getRelationTypeName()\u003c/code\u003e\u003c/a\u003e returns null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRelationTypeException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRelationTypeException\u003c/a\u003e\u003c/code\u003e - if there is already a relation type with that name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAllRelationTypeNames",
      "comment": "Retrieves names of all known relation types.",
      "tagMap": {
        "return": [
          "ArrayList of relation type names (Strings)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "javax.management.relation.RoleInfo",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRoleInfos",
      "comment": "Retrieves list of role infos (RoleInfo objects) of a given relation type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - name of relation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if there is no relation type with that name."
        ],
        "return": [
          "ArrayList of RoleInfo."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleInfo",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleInfoNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleInfoName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRoleInfo",
      "comment": "Retrieves role info for given role of a given relation type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - name of relation type",
          "\u003ccode\u003eroleInfoName\u003c/code\u003e - name of role"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation type is not known in the Relation Service",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleInfoNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleInfoNotFoundException\u003c/a\u003e\u003c/code\u003e - if the role is not part of the relation type."
        ],
        "return": [
          "RoleInfo object."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeRelationType",
      "comment": "Removes given relation type from Relation Service. The relation objects of that type will be removed from the Relation Service.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - name of the relation type to be removed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - If there is no relation type with that name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRelationIdException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRoleValueException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        },
        {
          "type": {
            "name": "javax.management.relation.RoleList",
            "type": "Class"
          },
          "field": {
            "name": "roleList"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createRelation",
      "comment": "Creates a simple relation (represented by a RelationSupport object) of given relation type, and adds it in the Relation Service. Roles are initialized according to the role list provided in parameter. The ones not initialized in this way are set to an empty ArrayList of ObjectNames. A RelationNotification, with type RELATION_BASIC_CREATION, is sent.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation identifier, to identify uniquely the relation inside the Relation Service",
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - name of the relation type (has to be created in the Relation Service)",
          "\u003ccode\u003eroleList\u003c/code\u003e - role list to initialize roles of the relation (can be null)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if a value is provided for a role that does not exist in the relation type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRelationIdException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRelationIdException\u003c/a\u003e\u003c/code\u003e - if relation id already used",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if relation type not known in Relation Service",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRoleValueException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRoleValueException\u003c/a\u003e\u003c/code\u003e - if: \n\u003cp\u003e- the same role name is used for two different roles \u003c/p\u003e\n\u003cp\u003e- the number of referenced MBeans in given value is less than expected minimum degree \u003c/p\u003e\n\u003cp\u003e- the number of referenced MBeans in provided value exceeds expected maximum degree \u003c/p\u003e\n\u003cp\u003e- one referenced MBean in the value is not an Object of the MBean class expected for that role \u003c/p\u003e\n\u003cp\u003e- an MBean provided for that role does not exist\u003c/p\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "java.lang.NoSuchMethodException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRelationIdException",
          "type": "Class"
        },
        {
          "name": "javax.management.InstanceNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRelationServiceException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRoleValueException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "relationObjectName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addRelation",
      "comment": "Adds an MBean created by the user (and registered by him in the MBean Server) as a relation in the Relation Service. To be added as a relation, the MBean must conform to the following: - implement the Relation interface - have for RelationService ObjectName the ObjectName of current Relation Service - have a relation id that is unique and unused in current Relation Service - have for relation type a relation type created in the Relation Service - have roles conforming to the role info provided in the relation type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationObjectName\u003c/code\u003e - ObjectName of the relation MBean to be added."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchMethodException.html\" title\u003d\"class in java.lang\"\u003eNoSuchMethodException\u003c/a\u003e\u003c/code\u003e - If the MBean does not implement the Relation interface",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRelationIdException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRelationIdException\u003c/a\u003e\u003c/code\u003e - if: \n\u003cp\u003e- no relation identifier in MBean \u003c/p\u003e\n\u003cp\u003e- the relation identifier is already used in the Relation Service\u003c/p\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/InstanceNotFoundException.html\" title\u003d\"class in javax.management\"\u003eInstanceNotFoundException\u003c/a\u003e\u003c/code\u003e - if the MBean for given ObjectName has not been registered",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRelationServiceException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRelationServiceException\u003c/a\u003e\u003c/code\u003e - if: \n\u003cp\u003e- no Relation Service name in MBean \u003c/p\u003e\n\u003cp\u003e- the Relation Service name in the MBean is not the one of the current Relation Service\u003c/p\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if: \n\u003cp\u003e- no relation type name in MBean \u003c/p\u003e\n\u003cp\u003e- the relation type name in MBean does not correspond to a relation type created in the Relation Service\u003c/p\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRoleValueException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRoleValueException\u003c/a\u003e\u003c/code\u003e - if: \n\u003cp\u003e- the number of referenced MBeans in a role is less than expected minimum degree \u003c/p\u003e\n\u003cp\u003e- the number of referenced MBeans in a role exceeds expected maximum degree \u003c/p\u003e\n\u003cp\u003e- one referenced MBean in the value is not an Object of the MBean class expected for that role \u003c/p\u003e\n\u003cp\u003e- an MBean provided for a role does not exist\u003c/p\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if a value is provided for a role that does not exist in the relation type"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isRelationMBean",
      "comment": "If the relation is represented by an MBean (created by the user and added as a relation in the Relation Service), returns the ObjectName of the MBean.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation id identifying the relation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - there is no relation associated to that id"
        ],
        "return": [
          "ObjectName of the corresponding relation MBean, or null if the relation is not an MBean."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "objectName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isRelation",
      "comment": "Returns the relation id associated to the given ObjectName if the MBean has been added as a relation in the Relation Service.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eobjectName\u003c/code\u003e - ObjectName of supposed relation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter"
        ],
        "return": [
          "relation id (String) or null (if the ObjectName is not a relation handled by the Relation Service)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasRelation",
      "comment": "Checks if there is a relation identified in Relation Service with given relation id.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation id identifying the relation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter"
        ],
        "return": [
          "boolean: true if there is a relation, false else"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAllRelationIds",
      "comment": "Returns all the relation ids for all the relations handled by the Relation Service.",
      "tagMap": {
        "return": [
          "ArrayList of String"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "checkRoleReading",
      "comment": "Checks if given Role can be read in a relation of the given type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eroleName\u003c/code\u003e - name of role to be checked",
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - name of the relation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if the relation type is not known in the Relation Service"
        ],
        "return": [
          "an Integer wrapping an integer corresponding to possible problems represented as constants in RoleUnresolved: \n\u003cp\u003e- 0 if role can be read \u003c/p\u003e\n\u003cp\u003e- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME \u003c/p\u003e\n\u003cp\u003e- integer corresponding to RoleStatus.ROLE_NOT_READABLE\u003c/p\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.relation.Role",
            "type": "Class"
          },
          "field": {
            "name": "role"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        },
        {
          "type": {
            "name": "java.lang.Boolean",
            "type": "Class"
          },
          "field": {
            "name": "initFlag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "checkRoleWriting",
      "comment": "Checks if given Role can be set in a relation of given type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erole\u003c/code\u003e - role to be checked",
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - name of relation type",
          "\u003ccode\u003einitFlag\u003c/code\u003e - flag to specify that the checking is done for the initialization of a role, write access shall not be verified."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if unknown relation type"
        ],
        "return": [
          "an Integer wrapping an integer corresponding to possible problems represented as constants in RoleUnresolved: \n\u003cp\u003e- 0 if role can be set \u003c/p\u003e\n\u003cp\u003e- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME \u003c/p\u003e\n\u003cp\u003e- integer for RoleStatus.ROLE_NOT_WRITABLE \u003c/p\u003e\n\u003cp\u003e- integer for RoleStatus.LESS_THAN_MIN_ROLE_DEGREE \u003c/p\u003e\n\u003cp\u003e- integer for RoleStatus.MORE_THAN_MAX_ROLE_DEGREE \u003c/p\u003e\n\u003cp\u003e- integer for RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS \u003c/p\u003e\n\u003cp\u003e- integer for RoleStatus.REF_MBEAN_NOT_REGISTERED\u003c/p\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendRelationCreationNotification",
      "comment": "Sends a notification (RelationNotification) for a relation creation. The notification type is: - RelationNotification.RELATION_BASIC_CREATION if the relation is an object internal to the Relation Service - RelationNotification.RELATION_MBEAN_CREATION if the relation is a MBean added as a relation. The source object is the Relation Service itself. It is called in Relation Service createRelation() and addRelation() methods.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation identifier of the updated relation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if there is no relation for given relation id"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        },
        {
          "type": {
            "name": "javax.management.relation.Role",
            "type": "Class"
          },
          "field": {
            "name": "newRole"
          }
        },
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "javax.management.ObjectName",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "oldRoleValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendRoleUpdateNotification",
      "comment": "Sends a notification (RelationNotification) for a role update in the given relation. The notification type is: - RelationNotification.RELATION_BASIC_UPDATE if the relation is an object internal to the Relation Service - RelationNotification.RELATION_MBEAN_UPDATE if the relation is a MBean added as a relation. The source object is the Relation Service itself. It is called in relation MBean setRole() (for given role) and setRoles() (for each role) methods (implementation provided in RelationSupport class). It is also called in Relation Service setRole() (for given role) and setRoles() (for each role) methods.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation identifier of the updated relation",
          "\u003ccode\u003enewRole\u003c/code\u003e - new role (name and new value)",
          "\u003ccode\u003eoldRoleValue\u003c/code\u003e - old role value (List of ObjectName objects)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if there is no relation for given relation id"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        },
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "javax.management.ObjectName",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "unregMBeanList"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sendRelationRemovalNotification",
      "comment": "Sends a notification (RelationNotification) for a relation removal. The notification type is: - RelationNotification.RELATION_BASIC_REMOVAL if the relation is an object internal to the Relation Service - RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a MBean added as a relation. The source object is the Relation Service itself. It is called in Relation Service removeRelation() method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation identifier of the updated relation",
          "\u003ccode\u003eunregMBeanList\u003c/code\u003e - List of ObjectNames of MBeans expected to be unregistered due to relation removal (can be null)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if there is no relation for given relation id"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        },
        {
          "type": {
            "name": "javax.management.relation.Role",
            "type": "Class"
          },
          "field": {
            "name": "newRole"
          }
        },
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "javax.management.ObjectName",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "oldRoleValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "updateRoleMap",
      "comment": "Handles update of the Relation Service role map for the update of given role in given relation. It is called in relation MBean setRole() (for given role) and setRoles() (for each role) methods (implementation provided in RelationSupport class). It is also called in Relation Service setRole() (for given role) and setRoles() (for each role) methods. To allow the Relation Service to maintain the consistency (in case of MBean unregistration) and to be able to perform queries, this method must be called when a role is updated.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation identifier of the updated relation",
          "\u003ccode\u003enewRole\u003c/code\u003e - new role (name and new value)",
          "\u003ccode\u003eoldRoleValue\u003c/code\u003e - old role value (List of ObjectName objects)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if no relation for given id."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeRelation",
      "comment": "Removes given relation from the Relation Service. A RelationNotification notification is sent, its type being: - RelationNotification.RELATION_BASIC_REMOVAL if the relation was only internal to the Relation Service - RelationNotification.RELATION_MBEAN_REMOVAL if the relation is registered as an MBean. For MBeans referenced in such relation, nothing will be done,",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation id of the relation to be removed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if no relation corresponding to given relation id"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "purgeRelations",
      "comment": "Purges the relations. Depending on the purgeFlag value, this method is either called automatically when a notification is received for the unregistration of an MBean referenced in a relation (if the flag is set to true), or not (if the flag is set to false). In that case it is up to the user to call it to maintain the consistency of the relations. To be kept in mind that if an MBean is unregistered and the purge not done immediately, if the ObjectName is reused and assigned to another MBean referenced in a relation, calling manually this purgeRelations() method will cause trouble, as will consider the ObjectName as corresponding to the unregistered MBean, not seeing the new one. The behavior depends on the cardinality of the role where the unregistered MBean is referenced: - if removing one MBean reference in the role makes its number of references less than the minimum degree, the relation has to be removed. - if the remaining number of references after removing the MBean reference is still in the cardinality range, keep the relation and update it calling its handleMBeanUnregistration() callback.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "mbeanName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "findReferencingRelations",
      "comment": "Retrieves the relations where a given MBean is referenced. This corresponds to the CIM \"References\" and \"ReferenceNames\" operations.",
      "tagMap": {
        "param": [
          "\u003ccode\u003embeanName\u003c/code\u003e - ObjectName of MBean",
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - can be null; if specified, only the relations of that type will be considered in the search. Else all relation types are considered.",
          "\u003ccode\u003eroleName\u003c/code\u003e - can be null; if specified, only the relations where the MBean is referenced in that role will be returned. Else all roles are considered."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter"
        ],
        "return": [
          "an HashMap, where the keys are the relation ids of the relations where the MBean is referenced, and the value is, for each key, an ArrayList of role names (as an MBean can be referenced in several roles in the same relation)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "mbeanName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "findAssociatedMBeans",
      "comment": "Retrieves the MBeans associated to given one in a relation. This corresponds to CIM Associators and AssociatorNames operations.",
      "tagMap": {
        "param": [
          "\u003ccode\u003embeanName\u003c/code\u003e - ObjectName of MBean",
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - can be null; if specified, only the relations of that type will be considered in the search. Else all relation types are considered.",
          "\u003ccode\u003eroleName\u003c/code\u003e - can be null; if specified, only the relations where the MBean is referenced in that role will be considered. Else all roles are considered."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter"
        ],
        "return": [
          "an HashMap, where the keys are the ObjectNames of the MBeans associated to given MBean, and the value is, for each key, an ArrayList of the relation ids of the relations where the key MBean is associated to given one (as they can be associated in several different relations)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationTypeName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "findRelationsOfType",
      "comment": "Returns the relation ids for relations of the given type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationTypeName\u003c/code\u003e - relation type name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if there is no relation type with that name."
        ],
        "return": [
          "an ArrayList of relation ids."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "javax.management.ObjectName",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRole",
      "comment": "Retrieves role value for given role name in given relation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceMBean.html#setRole(java.lang.String,javax.management.relation.Role)\"\u003e\u003ccode\u003esetRole(java.lang.String, javax.management.relation.Role)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation id",
          "\u003ccode\u003eroleName\u003c/code\u003e - name of role"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if no relation with given id",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if: \n\u003cp\u003e- there is no role with given name \u003c/p\u003e\n\u003cp\u003eor \u003c/p\u003e\n\u003cp\u003e- the role is not readable.\u003c/p\u003e"
        ],
        "return": [
          "the ArrayList of ObjectName objects being the role value"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "roleNameArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRoles",
      "comment": "Retrieves values of roles with given names in given relation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceMBean.html#setRoles(java.lang.String,javax.management.relation.RoleList)\"\u003e\u003ccode\u003esetRoles(java.lang.String, javax.management.relation.RoleList)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation id",
          "\u003ccode\u003eroleNameArray\u003c/code\u003e - array of names of roles to be retrieved"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if no relation with given id"
        ],
        "return": [
          "a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not retrieved)."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAllRoles",
      "comment": "Returns all roles present in the relation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation id"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if no relation for given id",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server"
        ],
        "return": [
          "a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not readable)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Integer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "roleName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRoleCardinality",
      "comment": "Retrieves the number of MBeans currently referenced in the given role.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation id",
          "\u003ccode\u003eroleName\u003c/code\u003e - name of role"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if no relation with given id",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if there is no role with given name"
        ],
        "return": [
          "the number of currently referenced MBeans in that role"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RoleNotFoundException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.InvalidRoleValueException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationTypeNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        },
        {
          "type": {
            "name": "javax.management.relation.Role",
            "type": "Class"
          },
          "field": {
            "name": "role"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRole",
      "comment": "Sets the given role in given relation. Will check the role according to its corresponding role definition provided in relation\u0027s relation type The Relation Service will keep track of the change to keep the consistency of relations by handling referenced MBean deregistrations.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceMBean.html#getRole(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003egetRole(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation id",
          "\u003ccode\u003erole\u003c/code\u003e - role to be set (name and new value)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if no relation with given id",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RoleNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRoleNotFoundException\u003c/a\u003e\u003c/code\u003e - if: \n\u003cp\u003e- internal relation \u003c/p\u003e\n\u003cp\u003eand \u003c/p\u003e\n\u003cp\u003e- the role does not exist or is not writable\u003c/p\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/InvalidRoleValueException.html\" title\u003d\"class in javax.management.relation\"\u003eInvalidRoleValueException\u003c/a\u003e\u003c/code\u003e - if internal relation and value provided for role is not valid: \n\u003cp\u003e- the number of referenced MBeans in given value is less than expected minimum degree \u003c/p\u003e\n\u003cp\u003eor \u003c/p\u003e\n\u003cp\u003e- the number of referenced MBeans in provided value exceeds expected maximum degree \u003c/p\u003e\n\u003cp\u003eor \u003c/p\u003e\n\u003cp\u003e- one referenced MBean in the value is not an Object of the MBean class expected for that role \u003c/p\u003e\n\u003cp\u003eor \u003c/p\u003e\n\u003cp\u003e- an MBean provided for that role does not exist\u003c/p\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationTypeNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationTypeNotFoundException\u003c/a\u003e\u003c/code\u003e - if unknown relation type"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.relation.RoleResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.relation.RelationServiceNotRegisteredException",
          "type": "Class"
        },
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        },
        {
          "type": {
            "name": "javax.management.relation.RoleList",
            "type": "Class"
          },
          "field": {
            "name": "roleList"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRoles",
      "comment": "Sets the given roles in given relation. Will check the role according to its corresponding role definition provided in relation\u0027s relation type The Relation Service keeps track of the changes to keep the consistency of relations by handling referenced MBean deregistrations.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceMBean.html#getRoles(java.lang.String,java.lang.String%5B%5D)\"\u003e\u003ccode\u003egetRoles(java.lang.String, java.lang.String[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation id",
          "\u003ccode\u003eroleList\u003c/code\u003e - list of roles to be set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationServiceNotRegisteredException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationServiceNotRegisteredException\u003c/a\u003e\u003c/code\u003e - if the Relation Service is not registered in the MBean Server",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if no relation with given id"
        ],
        "return": [
          "a RoleResult object, including a RoleList (for roles successfully set) and a RoleUnresolvedList (for roles not set)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getReferencedMBeans",
      "comment": "Retrieves MBeans referenced in the various roles of the relation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation id"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if no relation for given relation id"
        ],
        "return": [
          "a HashMap mapping: \n\u003cp\u003e ObjectName -\u0026gt; ArrayList of String (role names)\u003c/p\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "javax.management.relation.RelationNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "relationId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRelationTypeName",
      "comment": "Returns name of associated relation type for given relation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003erelationId\u003c/code\u003e - relation id"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if null parameter",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/relation/RelationNotFoundException.html\" title\u003d\"class in javax.management.relation\"\u003eRelationNotFoundException\u003c/a\u003e\u003c/code\u003e - if no relation for given relation id"
        ],
        "return": [
          "the name of the associated relation type."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.management.relation.RelationServiceMBean",
  "comment": "The Relation Service is in charge of creating and deleting relation types and relations, of handling the consistency and of providing query mechanisms.",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}