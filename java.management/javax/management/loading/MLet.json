{
  "packageName": "javax.management.loading",
  "simpleName": "MLet",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.net.URLClassLoader",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addURL",
      "comment": "Appends the specified URL to the list of URLs to search for classes and resources.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLClassLoader.html#addURL(java.net.URL)\"\u003eaddURL\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLClassLoader.html\" title\u003d\"class in java.net\"\u003eURLClassLoader\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html#addURL(java.net.URL)\"\u003eaddURL\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html\" title\u003d\"interface in javax.management.loading\"\u003eMLetMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - the URL to be added to the search path of URLs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.ServiceNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addURL",
      "comment": "Appends the specified URL to the list of URLs to search for classes and resources.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html#addURL(java.lang.String)\"\u003eaddURL\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html\" title\u003d\"interface in javax.management.loading\"\u003eMLetMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - the URL to add."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ServiceNotFoundException.html\" title\u003d\"class in javax.management\"\u003eServiceNotFoundException\u003c/a\u003e\u003c/code\u003e - The specified URL is malformed."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URL",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getURLs",
      "comment": "Returns the search path of URLs for loading classes and resources. This includes the original list of URLs specified to the constructor, along with any URLs subsequently appended by the addURL() method.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLClassLoader.html#getURLs()\"\u003egetURLs\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLClassLoader.html\" title\u003d\"class in java.net\"\u003eURLClassLoader\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html#getURLs()\"\u003egetURLs\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html\" title\u003d\"interface in javax.management.loading\"\u003eMLetMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the search path of URLs for loading classes and resources."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.ServiceNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMBeansFromURL",
      "comment": "Loads a text file containing MLET tags that define the MBeans to be added to the MBean server. The location of the text file is specified by a URL. The MBeans specified in the MLET file will be instantiated and registered in the MBean server.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html#getMBeansFromURL(java.net.URL)\"\u003egetMBeansFromURL\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html\" title\u003d\"interface in javax.management.loading\"\u003eMLetMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - The URL of the text file to be loaded as URL object."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ServiceNotFoundException.html\" title\u003d\"class in javax.management\"\u003eServiceNotFoundException\u003c/a\u003e\u003c/code\u003e - One of the following errors has occurred: The m-let text file does not contain an MLET tag, the m-let text file is not found, a mandatory attribute of the MLET tag is not specified, the value of url is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - MLet MBean is not registered with an MBeanServer."
        ],
        "return": [
          "A set containing one entry per MLET tag in the m-let text file loaded. Each entry specifies either the ObjectInstance for the created MBean, or a throwable object (that is, an error or an exception) if the MBean could not be created."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.ServiceNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMBeansFromURL",
      "comment": "Loads a text file containing MLET tags that define the MBeans to be added to the MBean server. The location of the text file is specified by a URL. The MBeans specified in the MLET file will be instantiated and registered in the MBean server.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html#getMBeansFromURL(java.lang.String)\"\u003egetMBeansFromURL\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html\" title\u003d\"interface in javax.management.loading\"\u003eMLetMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - The URL of the text file to be loaded as String object."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ServiceNotFoundException.html\" title\u003d\"class in javax.management\"\u003eServiceNotFoundException\u003c/a\u003e\u003c/code\u003e - One of the following errors has occurred: The m-let text file does not contain an MLET tag, the m-let text file is not found, a mandatory attribute of the MLET tag is not specified, the url is malformed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - MLet MBean is not registered with an MBeanServer."
        ],
        "return": [
          "A set containing one entry per MLET tag in the m-let text file loaded. Each entry specifies either the ObjectInstance for the created MBean, or a throwable object (that is, an error or an exception) if the MBean could not be created."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLibraryDirectory",
      "comment": "Gets the current directory used by the library loader for storing native libraries before they are loaded into memory.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLet.html#setLibraryDirectory(java.lang.String)\"\u003e\u003ccode\u003esetLibraryDirectory(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html#getLibraryDirectory()\"\u003egetLibraryDirectory\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html\" title\u003d\"interface in javax.management.loading\"\u003eMLetMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this implementation does not support storing native libraries in this way."
        ],
        "return": [
          "The current directory used by the library loader."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "libdir"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLibraryDirectory",
      "comment": "Sets the directory used by the library loader for storing native libraries before they are loaded into memory.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLet.html#getLibraryDirectory()\"\u003e\u003ccode\u003egetLibraryDirectory()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html#setLibraryDirectory(java.lang.String)\"\u003esetLibraryDirectory\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLetMBean.html\" title\u003d\"interface in javax.management.loading\"\u003eMLetMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elibdir\u003c/code\u003e - The directory used by the library loader."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this implementation does not support storing native libraries in this way."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.MBeanServer",
            "type": "Class"
          },
          "field": {
            "name": "server"
          }
        },
        {
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preRegister",
      "comment": "Allows the m-let to perform any operations it needs before being registered in the MBean server. If the ObjectName is null, the m-let provides a default name for its registration \u003cdefaultDomain\u003e:type\u003dMLet",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#preRegister(javax.management.MBeanServer,javax.management.ObjectName)\"\u003epreRegister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eserver\u003c/code\u003e - The MBean server in which the m-let will be registered.",
          "\u003ccode\u003ename\u003c/code\u003e - The object name of the m-let."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - This exception should be caught by the MBean server and re-thrown as an MBeanRegistrationException."
        ],
        "return": [
          "The name of the m-let registered."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Boolean",
            "type": "Class"
          },
          "field": {
            "name": "registrationDone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postRegister",
      "comment": "Allows the m-let to perform any operations needed after having been registered in the MBean server or after the registration has failed.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#postRegister(java.lang.Boolean)\"\u003epostRegister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eregistrationDone\u003c/code\u003e - Indicates whether or not the m-let has been successfully registered in the MBean server. The value false means that either the registration phase has failed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preDeregister",
      "comment": "Allows the m-let to perform any operations it needs before being unregistered by the MBean server.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#preDeregister()\"\u003epreDeregister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - This exception should be caught by the MBean server and re-thrown as an MBeanRegistrationException."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postDeregister",
      "comment": "Allows the m-let to perform any operations needed after having been unregistered in the MBean server.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#postDeregister()\"\u003epostDeregister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.UnsupportedOperationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.ObjectOutput",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "writeExternal",
      "comment": "Save this MLet\u0027s contents to the given ObjectOutput. Not all implementations support this method. Those that do not throw UnsupportedOperationException. A subclass may override this method to support it or to change the format of the written data. The format of the written data is not specified, but if an implementation supports writeExternal(java.io.ObjectOutput) it must also support readExternal(java.io.ObjectInput) in such a way that what is written by the former can be read by the latter.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Externalizable.html#writeExternal(java.io.ObjectOutput)\"\u003ewriteExternal\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Externalizable.html\" title\u003d\"interface in java.io\"\u003eExternalizable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - The object output stream to write to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If a problem occurred while writing.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this implementation does not support this operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        },
        {
          "name": "java.lang.UnsupportedOperationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.ObjectInput",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readExternal",
      "comment": "Restore this MLet\u0027s contents from the given ObjectInput. Not all implementations support this method. Those that do not throw UnsupportedOperationException. A subclass may override this method to support it or to change the format of the read data. The format of the read data is not specified, but if an implementation supports readExternal(java.io.ObjectInput) it must also support writeExternal(java.io.ObjectOutput) in such a way that what is written by the latter can be read by the former.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Externalizable.html#readExternal(java.io.ObjectInput)\"\u003ereadExternal\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Externalizable.html\" title\u003d\"interface in java.io\"\u003eExternalizable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - The object input stream to read from."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a problem occurred while reading.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if the class for the object being restored cannot be found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this implementation does not support this operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "javax.management.loading.ClassLoaderRepository",
            "type": "Class"
          },
          "field": {
            "name": "clr"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "loadClass",
      "comment": "Load a class, using the given ClassLoaderRepository if the class is not found in this MLet\u0027s URLs. The given ClassLoaderRepository can be null, in which case a ClassNotFoundException occurs immediately if the class is not found in this MLet\u0027s URLs.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the class we want to load.",
          "\u003ccode\u003eclr\u003c/code\u003e - The ClassLoaderRepository that will be used to search for the given class, if it is not found in this ClassLoader. May be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - The specified class could not be found in this ClassLoader nor in the given ClassLoaderRepository."
        ],
        "return": [
          "The resulting Class object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.ClassNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "findClass",
      "comment": "This is the main method for class loaders that is being redefined.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLClassLoader.html#findClass(java.lang.String)\"\u003efindClass\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLClassLoader.html\" title\u003d\"class in java.net\"\u003eURLClassLoader\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the class."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - The specified class could not be found."
        ],
        "return": [
          "The resulting Class object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "libname"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "findLibrary",
      "comment": "Returns the absolute path name of a native library. The VM invokes this method to locate the native libraries that belong to classes loaded with this class loader. Libraries are searched in the JAR files using first just the native library name and if not found the native library name together with the architecture-specific path name (OSName/OSArch/OSVersion/lib/nativelibname), i.e. the library stat on Solaris SPARC 5.7 will be searched in the JAR file as: libstat.so SunOS/sparc/5.7/lib/libstat.so the library stat on Windows NT 4.0 will be searched in the JAR file as: stat.dll WindowsNT/x86/4.0/lib/stat.dll More specifically, let nativelibname be the result of System.mapLibraryName(libname). Then the following names are searched in the JAR files, in order: nativelibname \u003cos.name\u003e/\u003cos.arch\u003e/\u003cos.version\u003e/lib/nativelibname where \u003cX\u003e means System.getProperty(X) with any spaces in the result removed, and / stands for the file separator character (File.separator). If this method returns null, i.e. the libraries were not found in any of the JAR files loaded with this class loader, the VM searches the library along the path specified as the java.library.path property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#loadLibrary(java.lang.String)\"\u003e\u003ccode\u003eSystem.loadLibrary(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#mapLibraryName(java.lang.String)\"\u003e\u003ccode\u003eSystem.mapLibraryName(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#findLibrary(java.lang.String)\"\u003efindLibrary\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html\" title\u003d\"class in java.lang\"\u003eClassLoader\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elibname\u003c/code\u003e - The library name."
        ],
        "return": [
          "The absolute path of the native library."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URL",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "version"
          }
        },
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "codebase"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "jarfile"
          }
        },
        {
          "type": {
            "name": "javax.management.loading.MLetContent",
            "type": "Class"
          },
          "field": {
            "name": "mlet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "check",
      "comment": "This method is to be overridden when extending this service to support caching and versioning. It is called from getMBeansFromURL when the version, codebase, and jarfile have been extracted from the MLet file, and can be used to verify that it is all right to load the given MBean, or to replace the given URL with a different one. The default implementation of this method returns codebase unchanged.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eversion\u003c/code\u003e - The version number of the \n\u003ccode\u003e.jar\u003c/code\u003e file stored locally.",
          "\u003ccode\u003ecodebase\u003c/code\u003e - The base URL of the remote \n\u003ccode\u003e.jar\u003c/code\u003e file.",
          "\u003ccode\u003ejarfile\u003c/code\u003e - The name of the \n\u003ccode\u003e.jar\u003c/code\u003e file to be loaded.",
          "\u003ccode\u003emlet\u003c/code\u003e - The \n\u003ccode\u003eMLetContent\u003c/code\u003e instance that represents the \n\u003ccode\u003eMLET\u003c/code\u003e tag."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - if the MBean is not to be loaded for some reason. The exception will be added to the set returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/MLet.html#getMBeansFromURL(java.net.URL)\"\u003e\u003ccode\u003egetMBeansFromURL\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the codebase to use for the loaded MBean. The returned value should not be null."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new MLet using the default delegation parent ClassLoader.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "urls"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new MLet for the specified URLs using the default delegation parent ClassLoader. The URLs will be searched in the order specified for classes and resources after first searching in the parent class loader.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eurls\u003c/code\u003e - The URLs from which to load classes and resources."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "urls"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new MLet for the given URLs. The URLs will be searched in the order specified for classes and resources after first searching in the specified parent class loader. The parent argument will be used as the parent class loader for delegation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eurls\u003c/code\u003e - The URLs from which to load classes and resources.",
          "\u003ccode\u003eparent\u003c/code\u003e - The parent class loader for delegation."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "urls"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "java.net.URLStreamHandlerFactory",
            "type": "Class"
          },
          "field": {
            "name": "factory"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new MLet for the specified URLs, parent class loader, and URLStreamHandlerFactory. The parent argument will be used as the parent class loader for delegation. The factory argument will be used as the stream handler factory to obtain protocol handlers when creating new URLs.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eurls\u003c/code\u003e - The URLs from which to load classes and resources.",
          "\u003ccode\u003eparent\u003c/code\u003e - The parent class loader for delegation.",
          "\u003ccode\u003efactory\u003c/code\u003e - The URLStreamHandlerFactory to use when creating URLs."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "urls"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "delegateToCLR"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new MLet for the specified URLs using the default delegation parent ClassLoader. The URLs will be searched in the order specified for classes and resources after first searching in the parent class loader.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eurls\u003c/code\u003e - The URLs from which to load classes and resources.",
          "\u003ccode\u003edelegateToCLR\u003c/code\u003e - True if, when a class is not found in either the parent ClassLoader or the URLs, the MLet should delegate to its containing MBeanServer\u0027s \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/ClassLoaderRepository.html\" title\u003d\"interface in javax.management.loading\"\u003e\u003ccode\u003eClassLoaderRepository\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "urls"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "delegateToCLR"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new MLet for the given URLs. The URLs will be searched in the order specified for classes and resources after first searching in the specified parent class loader. The parent argument will be used as the parent class loader for delegation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eurls\u003c/code\u003e - The URLs from which to load classes and resources.",
          "\u003ccode\u003eparent\u003c/code\u003e - The parent class loader for delegation.",
          "\u003ccode\u003edelegateToCLR\u003c/code\u003e - True if, when a class is not found in either the parent ClassLoader or the URLs, the MLet should delegate to its containing MBeanServer\u0027s \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/ClassLoaderRepository.html\" title\u003d\"interface in javax.management.loading\"\u003e\u003ccode\u003eClassLoaderRepository\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "urls"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        },
        {
          "type": {
            "name": "java.net.URLStreamHandlerFactory",
            "type": "Class"
          },
          "field": {
            "name": "factory"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "delegateToCLR"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new MLet for the specified URLs, parent class loader, and URLStreamHandlerFactory. The parent argument will be used as the parent class loader for delegation. The factory argument will be used as the stream handler factory to obtain protocol handlers when creating new URLs.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eurls\u003c/code\u003e - The URLs from which to load classes and resources.",
          "\u003ccode\u003eparent\u003c/code\u003e - The parent class loader for delegation.",
          "\u003ccode\u003efactory\u003c/code\u003e - The URLStreamHandlerFactory to use when creating URLs.",
          "\u003ccode\u003edelegateToCLR\u003c/code\u003e - True if, when a class is not found in either the parent ClassLoader or the URLs, the MLet should delegate to its containing MBeanServer\u0027s \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/loading/ClassLoaderRepository.html\" title\u003d\"interface in javax.management.loading\"\u003e\u003ccode\u003eClassLoaderRepository\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.loading.MLet",
  "comment": "Allows you to instantiate and register one or several MBeans in the MBean server coming from a remote URL. M-let is a shortcut for management applet. The m-let service does this by loading an m-let text file, which specifies information on the MBeans to be obtained. The information on each MBean is specified in a single instance of a tag, called the MLET tag. The location of the m-let text file is specified by a URL. \n\u003cp\u003e The \u003ccode\u003eMLET\u003c/code\u003e tag has the following syntax: \u003c/p\u003e\n\u003cp\u003e \u0026lt;\u003ccode\u003eMLET\u003c/code\u003e\u003cbr\u003e \u003ccode\u003eCODE \u003d \u003c/code\u003e\u003cvar\u003eclass\u003c/var\u003e\u003ccode\u003e | OBJECT \u003d \u003c/code\u003e\u003cvar\u003eserfile\u003c/var\u003e\u003cbr\u003e \u003ccode\u003eARCHIVE \u003d \"\u003c/code\u003e\u003cvar\u003earchiveList\u003c/var\u003e\u003ccode\u003e\"\u003c/code\u003e\u003cbr\u003e \u003ccode\u003e[CODEBASE \u003d \u003c/code\u003e\u003cvar\u003ecodebaseURL\u003c/var\u003e\u003ccode\u003e]\u003c/code\u003e\u003cbr\u003e \u003ccode\u003e[NAME \u003d \u003c/code\u003e\u003cvar\u003embeanname\u003c/var\u003e\u003ccode\u003e]\u003c/code\u003e\u003cbr\u003e \u003ccode\u003e[VERSION \u003d \u003c/code\u003e\u003cvar\u003eversion\u003c/var\u003e\u003ccode\u003e]\u003c/code\u003e\u003cbr\u003e \u0026gt;\u003cbr\u003e \u003ccode\u003e[\u003c/code\u003e\u003cvar\u003earglist\u003c/var\u003e\u003ccode\u003e]\u003c/code\u003e\u003cbr\u003e \u0026lt;\u003ccode\u003e/MLET\u003c/code\u003e\u0026gt; \u003c/p\u003e\n\u003cp\u003e where: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e\n  \u003ccode\u003eCODE \u003d \u003c/code\u003e\n  \u003cvar\u003eclass\u003c/var\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   This attribute specifies the full Java class name, including package name, of the MBean to be obtained. The compiled \n  \u003ccode\u003e.class\u003c/code\u003e file of the MBean must be contained in one of the \n  \u003ccode\u003e.jar\u003c/code\u003e files specified by the \n  \u003ccode\u003eARCHIVE\u003c/code\u003e attribute. Either \n  \u003ccode\u003eCODE\u003c/code\u003e or \n  \u003ccode\u003eOBJECT\u003c/code\u003e must be present. \n \u003c/dd\u003e \n \u003cdt\u003e\n  \u003ccode\u003eOBJECT \u003d \u003c/code\u003e\n  \u003cvar\u003eserfile\u003c/var\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   This attribute specifies the \n  \u003ccode\u003e.ser\u003c/code\u003e file that contains a serialized representation of the MBean to be obtained. This file must be contained in one of the \n  \u003ccode\u003e.jar\u003c/code\u003e files specified by the \n  \u003ccode\u003eARCHIVE\u003c/code\u003e attribute. If the \n  \u003ccode\u003e.jar\u003c/code\u003e file contains a directory hierarchy, specify the path of the file within this hierarchy. Otherwise a match will not be found. Either \n  \u003ccode\u003eCODE\u003c/code\u003e or \n  \u003ccode\u003eOBJECT\u003c/code\u003e must be present. \n \u003c/dd\u003e \n \u003cdt\u003e\n  \u003ccode\u003eARCHIVE \u003d \"\u003c/code\u003e\n  \u003cvar\u003earchiveList\u003c/var\u003e\n  \u003ccode\u003e\"\u003c/code\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   This mandatory attribute specifies one or more \n  \u003ccode\u003e.jar\u003c/code\u003e files containing MBeans or other resources used by the MBean to be obtained. One of the \n  \u003ccode\u003e.jar\u003c/code\u003e files must contain the file specified by the \n  \u003ccode\u003eCODE\u003c/code\u003e or \n  \u003ccode\u003eOBJECT\u003c/code\u003e attribute. If archivelist contains more than one file: \n  \u003cul\u003e \n   \u003cli\u003eEach file must be separated from the one that follows it by a comma (,). \u003c/li\u003e\n   \u003cli\u003e\u003cvar\u003earchivelist\u003c/var\u003e must be enclosed in double quote marks. \u003c/li\u003e\n  \u003c/ul\u003e All \n  \u003ccode\u003e.jar\u003c/code\u003e files in \n  \u003cvar\u003earchivelist\u003c/var\u003e must be stored in the directory specified by the code base URL. \n \u003c/dd\u003e \n \u003cdt\u003e\n  \u003ccode\u003eCODEBASE \u003d \u003c/code\u003e\n  \u003cvar\u003ecodebaseURL\u003c/var\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   This optional attribute specifies the code base URL of the MBean to be obtained. It identifies the directory that contains the \n  \u003ccode\u003e.jar\u003c/code\u003e files specified by the \n  \u003ccode\u003eARCHIVE\u003c/code\u003e attribute. Specify this attribute only if the \n  \u003ccode\u003e.jar\u003c/code\u003e files are not in the same directory as the m-let text file. If this attribute is not specified, the base URL of the m-let text file is used. \n \u003c/dd\u003e \n \u003cdt\u003e\n  \u003ccode\u003eNAME \u003d \u003c/code\u003e\n  \u003cvar\u003embeanname\u003c/var\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   This optional attribute specifies the object name to be assigned to the MBean instance when the m-let service registers it. If \n  \u003cvar\u003embeanname\u003c/var\u003e starts with the colon character (:), the domain part of the object name is the default domain of the MBean server, as returned by \n  \u003ca href\u003d\"../MBeanServer.html#getDefaultDomain()\"\u003e\u003ccode\u003eMBeanServer.getDefaultDomain()\u003c/code\u003e\u003c/a\u003e. \n \u003c/dd\u003e \n \u003cdt\u003e\n  \u003ccode\u003eVERSION \u003d \u003c/code\u003e\n  \u003cvar\u003eversion\u003c/var\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   This optional attribute specifies the version number of the MBean and associated \n  \u003ccode\u003e.jar\u003c/code\u003e files to be obtained. This version number can be used to specify that the \n  \u003ccode\u003e.jar\u003c/code\u003e files are loaded from the server to update those stored locally in the cache the next time the m-let text file is loaded. \n  \u003cvar\u003eversion\u003c/var\u003e must be a series of non-negative decimal integers each separated by a period from the one that precedes it. \n \u003c/dd\u003e \n \u003cdt\u003e\n  \u003cvar\u003earglist\u003c/var\u003e\n \u003c/dt\u003e \n \u003cdd\u003e\n   This optional attribute specifies a list of one or more parameters for the MBean to be instantiated. This list describes the parameters to be passed the MBean\u0027s constructor. Use the following syntax to specify each item in \n  \u003cvar\u003earglist\u003c/var\u003e: \n  \u003cdl\u003e \n   \u003cdt\u003e\n    \u0026lt;\n    \u003ccode\u003eARG TYPE\u003d\u003c/code\u003e\n    \u003cvar\u003eargumentType\u003c/var\u003e \n    \u003ccode\u003eVALUE\u003d\u003c/code\u003e\n    \u003cvar\u003evalue\u003c/var\u003e\u0026gt;\n   \u003c/dt\u003e \n   \u003cdd\u003e\n    where: \n    \u003cul\u003e \n     \u003cli\u003e\u003cvar\u003eargumentType\u003c/var\u003e is the type of the argument that will be passed as parameter to the MBean\u0027s constructor.\u003c/li\u003e\n    \u003c/ul\u003e \n   \u003c/dd\u003e \n  \u003c/dl\u003e \n  \u003cp\u003eThe arguments\u0027 type in the argument list should be a Java primitive type or a Java basic type (\u003ccode\u003ejava.lang.Boolean, java.lang.Byte, java.lang.Short, java.lang.Long, java.lang.Integer, java.lang.Float, java.lang.Double, java.lang.String\u003c/code\u003e). \u003c/p\u003e\n \u003c/dd\u003e \n\u003c/dl\u003e When an m-let text file is loaded, an instance of each MBean specified in the file is created and registered. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The m-let service extends the \u003ccode\u003ejava.net.URLClassLoader\u003c/code\u003e and can be used to load remote classes and jar files in the VM of the agent. \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote - \u003c/strong\u003e The \u003ccode\u003eMLet\u003c/code\u003e class loader uses the \u003ca href\u003d\"../MBeanServerFactory.html#getClassLoaderRepository(javax.management.MBeanServer)\"\u003e\u003ccode\u003eMBeanServerFactory.getClassLoaderRepository(javax.management.MBeanServer)\u003c/code\u003e\u003c/a\u003e to load classes that could not be found in the loaded jar files.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.management.loading.MLet\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}