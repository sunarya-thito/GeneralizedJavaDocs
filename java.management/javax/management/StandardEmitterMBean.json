{
  "packageName": "javax.management",
  "simpleName": "StandardEmitterMBean",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "javax.management.StandardMBean",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.ListenerNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.NotificationListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeNotificationListener",
      "comment": "Description copied from interface: NotificationBroadcaster",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html#addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)\"\u003e\u003ccode\u003eNotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationEmitter.html#removeNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)\"\u003e\u003ccode\u003eNotificationEmitter.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html#removeNotificationListener(javax.management.NotificationListener)\"\u003eremoveNotificationListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html\" title\u003d\"interface in javax.management\"\u003eNotificationBroadcaster\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - A listener that was previously added to this MBean."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ListenerNotFoundException.html\" title\u003d\"class in javax.management\"\u003eListenerNotFoundException\u003c/a\u003e\u003c/code\u003e - The listener is not registered with the MBean."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "javax.management.ListenerNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.NotificationListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        },
        {
          "type": {
            "name": "javax.management.NotificationFilter",
            "type": "Class"
          },
          "field": {
            "name": "filter"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "handback"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "removeNotificationListener",
      "comment": "Description copied from interface: NotificationEmitter",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationEmitter.html#removeNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)\"\u003eremoveNotificationListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationEmitter.html\" title\u003d\"interface in javax.management\"\u003eNotificationEmitter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - A listener that was previously added to this MBean.",
          "\u003ccode\u003efilter\u003c/code\u003e - The filter that was specified when the listener was added.",
          "\u003ccode\u003ehandback\u003c/code\u003e - The handback that was specified when the listener was added."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/ListenerNotFoundException.html\" title\u003d\"class in javax.management\"\u003eListenerNotFoundException\u003c/a\u003e\u003c/code\u003e - The listener is not registered with the MBean, or it is not registered with the given filter and handback."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.NotificationListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        },
        {
          "type": {
            "name": "javax.management.NotificationFilter",
            "type": "Class"
          },
          "field": {
            "name": "filter"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "handback"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addNotificationListener",
      "comment": "Description copied from interface: NotificationBroadcaster",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html#removeNotificationListener(javax.management.NotificationListener)\"\u003e\u003ccode\u003eNotificationBroadcaster.removeNotificationListener(javax.management.NotificationListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html#addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)\"\u003eaddNotificationListener\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html\" title\u003d\"interface in javax.management\"\u003eNotificationBroadcaster\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - The listener object which will handle the notifications emitted by the broadcaster.",
          "\u003ccode\u003efilter\u003c/code\u003e - The filter object. If filter is null, no filtering will be performed before handling notifications.",
          "\u003ccode\u003ehandback\u003c/code\u003e - An opaque object to be sent back to the listener when a notification is emitted. This object cannot be used by the Notification broadcaster object. It should be resent unchanged with the notification to the listener."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.MBeanNotificationInfo",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNotificationInfo",
      "comment": "Description copied from interface: NotificationBroadcaster",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html#getNotificationInfo()\"\u003egetNotificationInfo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html\" title\u003d\"interface in javax.management\"\u003eNotificationBroadcaster\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the array of possible notifications."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.management.Notification",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sendNotification",
      "comment": "Sends a notification. If the emitter parameter to the constructor was an instance of NotificationBroadcasterSupport then this method will call emitter.sendNotification.",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - the notification to send."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eemitter\u003c/code\u003e parameter to the constructor was not a \n\u003ccode\u003eNotificationBroadcasterSupport\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "implementation"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mbeanInterface"
          }
        },
        {
          "type": {
            "name": "javax.management.NotificationEmitter",
            "type": "Class"
          },
          "field": {
            "name": "emitter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Make an MBean whose management interface is specified by mbeanInterface, with the given implementation and where notifications are handled by the given NotificationEmitter. The resultant MBean implements the NotificationEmitter interface by forwarding its methods to emitter. It is legal and useful for implementation and emitter to be the same object. If emitter is an instance of NotificationBroadcasterSupport then the MBean\u0027s sendNotification method will call emitter.sendNotification. The array returned by getNotificationInfo() on the new MBean is a copy of the array returned by emitter.getNotificationInfo() at the time of construction. If the array returned by emitter.getNotificationInfo() later changes, that will have no effect on this object\u0027s getNotificationInfo().",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the implementation type of the MBean"
        ],
        "param": [
          "\u003ccode\u003eimplementation\u003c/code\u003e - the implementation of the MBean interface.",
          "\u003ccode\u003embeanInterface\u003c/code\u003e - a Standard MBean interface.",
          "\u003ccode\u003eemitter\u003c/code\u003e - the object that will handle notifications."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003embeanInterface\u003c/code\u003e does not follow JMX design patterns for Management Interfaces, or if the given \n\u003ccode\u003eimplementation\u003c/code\u003e does not implement the specified interface, or if \n\u003ccode\u003eemitter\u003c/code\u003e is null."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "implementation"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mbeanInterface"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isMXBean"
          }
        },
        {
          "type": {
            "name": "javax.management.NotificationEmitter",
            "type": "Class"
          },
          "field": {
            "name": "emitter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Make an MBean whose management interface is specified by mbeanInterface, with the given implementation and where notifications are handled by the given NotificationEmitter. This constructor can be used to make either Standard MBeans or MXBeans. The resultant MBean implements the NotificationEmitter interface by forwarding its methods to emitter. It is legal and useful for implementation and emitter to be the same object. If emitter is an instance of NotificationBroadcasterSupport then the MBean\u0027s sendNotification method will call emitter.sendNotification. The array returned by getNotificationInfo() on the new MBean is a copy of the array returned by emitter.getNotificationInfo() at the time of construction. If the array returned by emitter.getNotificationInfo() later changes, that will have no effect on this object\u0027s getNotificationInfo().",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the implementation type of the MBean"
        ],
        "param": [
          "\u003ccode\u003eimplementation\u003c/code\u003e - the implementation of the MBean interface.",
          "\u003ccode\u003embeanInterface\u003c/code\u003e - a Standard MBean interface.",
          "\u003ccode\u003eisMXBean\u003c/code\u003e - If true, the \n\u003ccode\u003embeanInterface\u003c/code\u003e parameter names an MXBean interface and the resultant MBean is an MXBean.",
          "\u003ccode\u003eemitter\u003c/code\u003e - the object that will handle notifications."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003embeanInterface\u003c/code\u003e does not follow JMX design patterns for Management Interfaces, or if the given \n\u003ccode\u003eimplementation\u003c/code\u003e does not implement the specified interface, or if \n\u003ccode\u003eemitter\u003c/code\u003e is null."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mbeanInterface"
          }
        },
        {
          "type": {
            "name": "javax.management.NotificationEmitter",
            "type": "Class"
          },
          "field": {
            "name": "emitter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Make an MBean whose management interface is specified by mbeanInterface, and where notifications are handled by the given NotificationEmitter. The resultant MBean implements the NotificationEmitter interface by forwarding its methods to emitter. If emitter is an instance of NotificationBroadcasterSupport then the MBean\u0027s sendNotification method will call emitter.sendNotification. The array returned by getNotificationInfo() on the new MBean is a copy of the array returned by emitter.getNotificationInfo() at the time of construction. If the array returned by emitter.getNotificationInfo() later changes, that will have no effect on this object\u0027s getNotificationInfo(). This constructor must be called from a subclass that implements the given mbeanInterface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003embeanInterface\u003c/code\u003e - a StandardMBean interface.",
          "\u003ccode\u003eemitter\u003c/code\u003e - the object that will handle notifications."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003embeanInterface\u003c/code\u003e does not follow JMX design patterns for Management Interfaces, or if \n\u003ccode\u003ethis\u003c/code\u003e does not implement the specified interface, or if \n\u003ccode\u003eemitter\u003c/code\u003e is null."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mbeanInterface"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "isMXBean"
          }
        },
        {
          "type": {
            "name": "javax.management.NotificationEmitter",
            "type": "Class"
          },
          "field": {
            "name": "emitter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Make an MBean whose management interface is specified by mbeanInterface, and where notifications are handled by the given NotificationEmitter. This constructor can be used to make either Standard MBeans or MXBeans. The resultant MBean implements the NotificationEmitter interface by forwarding its methods to emitter. If emitter is an instance of NotificationBroadcasterSupport then the MBean\u0027s sendNotification method will call emitter.sendNotification. The array returned by getNotificationInfo() on the new MBean is a copy of the array returned by emitter.getNotificationInfo() at the time of construction. If the array returned by emitter.getNotificationInfo() later changes, that will have no effect on this object\u0027s getNotificationInfo(). This constructor must be called from a subclass that implements the given mbeanInterface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003embeanInterface\u003c/code\u003e - a StandardMBean interface.",
          "\u003ccode\u003eisMXBean\u003c/code\u003e - If true, the \n\u003ccode\u003embeanInterface\u003c/code\u003e parameter names an MXBean interface and the resultant MBean is an MXBean.",
          "\u003ccode\u003eemitter\u003c/code\u003e - the object that will handle notifications."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003embeanInterface\u003c/code\u003e does not follow JMX design patterns for Management Interfaces, or if \n\u003ccode\u003ethis\u003c/code\u003e does not implement the specified interface, or if \n\u003ccode\u003eemitter\u003c/code\u003e is null."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.StandardEmitterMBean",
  "comment": "\u003cp\u003eAn MBean whose management interface is determined by reflection on a Java interface, and that emits notifications.\u003c/p\u003e \n\u003cp\u003eThe following example shows how to use the public constructor \u003ca href\u003d\"#%3Cinit%3E(T,java.lang.Class,javax.management.NotificationEmitter)\"\u003e\u003ccode\u003eStandardEmitterMBean(implementation, mbeanInterface, emitter)\u003c/code\u003e\u003c/a\u003e to create an MBean emitting notifications with any implementation class name \u003ci\u003eImpl\u003c/i\u003e, with a management interface defined (as for current Standard MBeans) by any interface \u003ci\u003eIntf\u003c/i\u003e, and with any implementation of the interface \u003ca href\u003d\"NotificationEmitter.html\" title\u003d\"interface in javax.management\"\u003e\u003ccode\u003eNotificationEmitter\u003c/code\u003e\u003c/a\u003e. The example uses the class \u003ca href\u003d\"NotificationBroadcasterSupport.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eNotificationBroadcasterSupport\u003c/code\u003e\u003c/a\u003e as an implementation of the interface \u003ca href\u003d\"NotificationEmitter.html\" title\u003d\"interface in javax.management\"\u003e\u003ccode\u003eNotificationEmitter\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e \n\u003cpre\u003e     MBeanServer mbs;\n     ...\n     final String[] types \u003d new String[] {\"sun.disc.space\",\"sun.disc.alarm\"};\n     final MBeanNotificationInfo info \u003d new MBeanNotificationInfo(\n                                          types,\n                                          Notification.class.getName(),\n                                          \"Notification about disc info.\");\n     final NotificationEmitter emitter \u003d\n                    new NotificationBroadcasterSupport(info);\n\n     final Intf impl \u003d new Impl(...);\n     final Object mbean \u003d new StandardEmitterMBean(\n                                     impl, Intf.class, emitter);\n     mbs.registerMBean(mbean, objectName);\n     \u003c/pre\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/StandardMBean.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eStandardMBean\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}