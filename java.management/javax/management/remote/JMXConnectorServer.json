{
  "packageName": "javax.management.remote",
  "simpleName": "JMXConnectorServer",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "javax.management.NotificationBroadcasterSupport",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AUTHENTICATOR",
      "comment": "Name of the attribute that specifies the authenticator for a connector server. The value associated with this attribute, if any, must be an object that implements the interface JMXAuthenticator.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.remote.JMXConnectorServer.AUTHENTICATOR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.MBeanServer",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMBeanServer",
      "comment": "Returns the MBean server that this connector server is attached to.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the MBean server that this connector server is attached to, or null if it is not yet attached to an MBean server."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.management.remote.MBeanServerForwarder",
            "type": "Class"
          },
          "name": "mbsf",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMBeanServerForwarder",
      "comment": "Description copied from interface: JMXConnectorServerMBean",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServerMBean.html#setMBeanServerForwarder(javax.management.remote.MBeanServerForwarder)\"\u003esetMBeanServerForwarder\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServerMBean.html\" title\u003d\"interface in javax.management.remote\"\u003eJMXConnectorServerMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003embsf\u003c/code\u003e - the new \n\u003ccode\u003eMBeanServerForwarder\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getConnectionIds",
      "comment": "Description copied from interface: JMXConnectorServerMBean",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServerMBean.html#getConnectionIds()\"\u003egetConnectionIds\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServerMBean.html\" title\u003d\"interface in javax.management.remote\"\u003eJMXConnectorServerMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a new string array containing the list of IDs. If there are no currently-open connections, this array will be empty."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.remote.JMXConnector",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "env",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toJMXConnector",
      "comment": "Returns a client stub for this connector server. A client stub is a serializable object whose connect method can be used to make one new connection to this connector server. A given connector need not support the generation of client stubs. However, the connectors specified by the JMX Remote API do (JMXMP Connector and RMI Connector). The default implementation of this method uses JMXConnectorServerMBean.getAddress() and JMXConnectorFactory to generate the stub, with code equivalent to the following:  JMXServiceURL addr \u003d getAddress();\n return JMXConnectorFactory.newJMXConnector(addr, env);\n A connector server for which this is inappropriate must override this method so that it either implements the appropriate logic or throws UnsupportedOperationException.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServerMBean.html#toJMXConnector(java.util.Map)\"\u003etoJMXConnector\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServerMBean.html\" title\u003d\"interface in javax.management.remote\"\u003eJMXConnectorServerMBean\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eenv\u003c/code\u003e - client connection parameters of the same sort that could be provided to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnector.html#connect(java.util.Map)\"\u003e\u003ccode\u003eJMXConnector.connect(Map)\u003c/code\u003e\u003c/a\u003e. Can be null, which is equivalent to an empty map."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this connector server does not support the generation of client stubs.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the JMXConnectorServer is not started (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServerMBean.html#isActive()\"\u003e\u003ccode\u003eJMXConnectorServerMBean.isActive()\u003c/code\u003e\u003c/a\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a communications problem means that a stub cannot be created."
        ],
        "return": [
          "a client stub that can be used to make a new connection to this connector server."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.MBeanNotificationInfo",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNotificationInfo",
      "comment": "Returns an array indicating the notifications that this MBean sends. The implementation in JMXConnectorServer returns an array with one element, indicating that it can emit notifications of class JMXConnectionNotification with the types defined in that class. A subclass that can emit other notifications should return an array that contains this element plus descriptions of the other notifications.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html#getNotificationInfo()\"\u003egetNotificationInfo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/NotificationBroadcaster.html\" title\u003d\"interface in javax.management\"\u003eNotificationBroadcaster\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the array of possible notifications."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "connectionId",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "message",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "userData",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "connectionOpened",
      "comment": "Called by a subclass when a new client connection is opened. Adds connectionId to the list returned by getConnectionIds(), then emits a JMXConnectionNotification with type JMXConnectionNotification.OPENED.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003econnectionId\u003c/code\u003e - the ID of the new connection. This must be different from the ID of any connection previously opened by this connector server.",
          "\u003ccode\u003emessage\u003c/code\u003e - the message for the emitted \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectionNotification.html\" title\u003d\"class in javax.management.remote\"\u003e\u003ccode\u003eJMXConnectionNotification\u003c/code\u003e\u003c/a\u003e. Can be null. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/Notification.html#getMessage()\"\u003e\u003ccode\u003eNotification.getMessage()\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003euserData\u003c/code\u003e - the \n\u003ccode\u003euserData\u003c/code\u003e for the emitted \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectionNotification.html\" title\u003d\"class in javax.management.remote\"\u003e\u003ccode\u003eJMXConnectionNotification\u003c/code\u003e\u003c/a\u003e. Can be null. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/Notification.html#getUserData()\"\u003e\u003ccode\u003eNotification.getUserData()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003econnectionId\u003c/code\u003e is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "connectionId",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "message",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "userData",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "connectionClosed",
      "comment": "Called by a subclass when a client connection is closed normally. Removes connectionId from the list returned by getConnectionIds(), then emits a JMXConnectionNotification with type JMXConnectionNotification.CLOSED.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003econnectionId\u003c/code\u003e - the ID of the closed connection.",
          "\u003ccode\u003emessage\u003c/code\u003e - the message for the emitted \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectionNotification.html\" title\u003d\"class in javax.management.remote\"\u003e\u003ccode\u003eJMXConnectionNotification\u003c/code\u003e\u003c/a\u003e. Can be null. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/Notification.html#getMessage()\"\u003e\u003ccode\u003eNotification.getMessage()\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003euserData\u003c/code\u003e - the \n\u003ccode\u003euserData\u003c/code\u003e for the emitted \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectionNotification.html\" title\u003d\"class in javax.management.remote\"\u003e\u003ccode\u003eJMXConnectionNotification\u003c/code\u003e\u003c/a\u003e. Can be null. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/Notification.html#getUserData()\"\u003e\u003ccode\u003eNotification.getUserData()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003econnectionId\u003c/code\u003e is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "connectionId",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "message",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "userData",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "connectionFailed",
      "comment": "Called by a subclass when a client connection fails. Removes connectionId from the list returned by getConnectionIds(), then emits a JMXConnectionNotification with type JMXConnectionNotification.FAILED.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003econnectionId\u003c/code\u003e - the ID of the failed connection.",
          "\u003ccode\u003emessage\u003c/code\u003e - the message for the emitted \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectionNotification.html\" title\u003d\"class in javax.management.remote\"\u003e\u003ccode\u003eJMXConnectionNotification\u003c/code\u003e\u003c/a\u003e. Can be null. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/Notification.html#getMessage()\"\u003e\u003ccode\u003eNotification.getMessage()\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003euserData\u003c/code\u003e - the \n\u003ccode\u003euserData\u003c/code\u003e for the emitted \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectionNotification.html\" title\u003d\"class in javax.management.remote\"\u003e\u003ccode\u003eJMXConnectionNotification\u003c/code\u003e\u003c/a\u003e. Can be null. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/Notification.html#getUserData()\"\u003e\u003ccode\u003eNotification.getUserData()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003econnectionId\u003c/code\u003e is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.ObjectName",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.management.MBeanServer",
            "type": "Class"
          },
          "name": "mbs",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "javax.management.ObjectName",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preRegister",
      "comment": "Called by an MBean server when this connector server is registered in that MBean server. This connector server becomes attached to the MBean server and its getMBeanServer() method will return mbs. If this connector server is already attached to an MBean server, this method has no effect. The MBean server it is attached to is not necessarily the one it is being registered in.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#preRegister(javax.management.MBeanServer,javax.management.ObjectName)\"\u003epreRegister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003embs\u003c/code\u003e - the MBean server in which this connection server is being registered.",
          "\u003ccode\u003ename\u003c/code\u003e - The object name of the MBean."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003embs\u003c/code\u003e or \n\u003ccode\u003ename\u003c/code\u003e is null."
        ],
        "return": [
          "The name under which the MBean is to be registered."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Boolean",
            "type": "Class"
          },
          "name": "registrationDone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postRegister",
      "comment": "Description copied from interface: MBeanRegistration",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#postRegister(java.lang.Boolean)\"\u003epostRegister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eregistrationDone\u003c/code\u003e - Indicates whether or not the MBean has been successfully registered in the MBean server. The value false means that the registration phase has failed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Exception",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "preDeregister",
      "comment": "Called by an MBean server when this connector server is unregistered from that MBean server. If this connector server was attached to that MBean server by being registered in it, and if the connector server is still active, then unregistering it will call the stop method. If the stop method throws an exception, the unregistration attempt will fail. It is recommended to call the stop method explicitly before unregistering the MBean.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#preDeregister()\"\u003epreDeregister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if thrown by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServerMBean.html#stop()\"\u003e\u003ccode\u003estop\u003c/code\u003e\u003c/a\u003e method.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Exception.html\" title\u003d\"class in java.lang\"\u003eException\u003c/a\u003e\u003c/code\u003e - This exception will be caught by the MBean server and re-thrown as an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistrationException.html\" title\u003d\"class in javax.management\"\u003e\u003ccode\u003eMBeanRegistrationException\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "postDeregister",
      "comment": "Description copied from interface: MBeanRegistration",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html#postDeregister()\"\u003epostDeregister\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/MBeanRegistration.html\" title\u003d\"interface in javax.management\"\u003eMBeanRegistration\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a connector server that will be registered as an MBean in the MBean server it is attached to. This constructor is typically called by one of the createMBean methods when creating, within an MBean server, a connector server that makes it available remotely.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "javax.management.MBeanServer",
            "type": "Class"
          },
          "name": "mbeanServer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a connector server that is attached to the given MBean server. A connector server that is created in this way can be registered in a different MBean server, or not registered in any MBean server.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003embeanServer\u003c/code\u003e - the MBean server that this connector server is attached to. Null if this connector server will be attached to an MBean server by being registered in it."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "javax.management.remote.JMXConnectorServer",
  "comment": "\u003cp\u003eSuperclass of every connector server. A connector server is attached to an MBean server. It listens for client connection requests and creates a connection for each one.\u003c/p\u003e \n\u003cp\u003eA connector server is associated with an MBean server either by registering it in that MBean server, or by passing the MBean server to its constructor.\u003c/p\u003e \n\u003cp\u003eA connector server is inactive when created. It only starts listening for client connections when the \u003ca href\u003d\"JMXConnectorServerMBean.html#start()\"\u003e\u003ccode\u003estart\u003c/code\u003e\u003c/a\u003e method is called. A connector server stops listening for client connections when the \u003ca href\u003d\"JMXConnectorServerMBean.html#stop()\"\u003e\u003ccode\u003estop\u003c/code\u003e\u003c/a\u003e method is called or when the connector server is unregistered from its MBean server.\u003c/p\u003e \n\u003cp\u003eStopping a connector server does not unregister it from its MBean server. A connector server once stopped cannot be restarted.\u003c/p\u003e \n\u003cp\u003eEach time a client connection is made or broken, a notification of class \u003ca href\u003d\"JMXConnectionNotification.html\" title\u003d\"class in javax.management.remote\"\u003e\u003ccode\u003eJMXConnectionNotification\u003c/code\u003e\u003c/a\u003e is emitted.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}