{
  "packageName": "javax.management.remote",
  "simpleName": "JMXConnectorServerMBean",
  "moduleName": "java.management",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "start",
      "comment": "Activates the connector server, that is, starts listening for client connections. Calling this method when the connector server is already active has no effect. Calling this method when the connector server has been stopped will generate an IOException.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if it is not possible to start listening or if the connector server has been stopped.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the connector server has not been attached to an MBean server."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "stop",
      "comment": "Deactivates the connector server, that is, stops listening for client connections. Calling this method will also close all client connections that were made by this server. After this method returns, whether normally or with an exception, the connector server will not create any new client connections. Once a connector server has been stopped, it cannot be started again. Calling this method when the connector server has already been stopped has no effect. Calling this method when the connector server has not yet been started will disable the connector server object permanently. If closing a client connection produces an exception, that exception is not thrown from this method. A JMXConnectionNotification with type JMXConnectionNotification.FAILED is emitted from this MBean with the connection ID of the connection that could not be closed. Closing a connector server is a potentially slow operation. For example, if a client machine with an open connection has crashed, the close operation might have to wait for a network protocol timeout. Callers that do not want to block in a close operation should do it in a separate thread.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the server cannot be closed cleanly. When this exception is thrown, the server has already attempted to close all client connections. All client connections are closed except possibly those that generated exceptions when the server attempted to close them."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isActive",
      "comment": "Determines whether the connector server is active. A connector server starts being active when its start method returns successfully and remains active until either its stop method is called or the connector server fails.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the connector server is active."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMBeanServerForwarder",
      "comment": "Inserts an object that intercepts requests for the MBean server that arrive through this connector server. This object will be supplied as the MBeanServer for any new connection created by this connector server. Existing connections are unaffected. This method can be called more than once with different MBeanServerForwarder objects. The result is a chain of forwarders. The last forwarder added is the first in the chain. In more detail: If this connector server is already associated with an MBeanServer object, then that object is given to mbsf.setMBeanServer. If doing so produces an exception, this method throws the same exception without any other effect. If this connector is not already associated with an MBeanServer object, or if the mbsf.setMBeanServer call just mentioned succeeds, then mbsf becomes this connector server\u0027s MBeanServer.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003embsf\u003c/code\u003e - the new \n\u003ccode\u003eMBeanServerForwarder\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the call to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/MBeanServerForwarder.html#setMBeanServer(javax.management.MBeanServer)\"\u003e\u003ccode\u003embsf.setMBeanServer\u003c/code\u003e\u003c/a\u003e fails with \n\u003ccode\u003eIllegalArgumentException\u003c/code\u003e. This includes the case where \n\u003ccode\u003embsf\u003c/code\u003e is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getConnectionIds",
      "comment": "The list of IDs for currently-open connections to this connector server.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a new string array containing the list of IDs. If there are no currently-open connections, this array will be empty."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.remote.JMXServiceURL",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAddress",
      "comment": "The address of this connector server. The address returned may not be the exact original JMXServiceURL that was supplied when creating the connector server, since the original address may not always be complete. For example the port number may be dynamically allocated when starting the connector server. Instead the address returned is the actual JMXServiceURL of the JMXConnectorServer. This is the address that clients supply to JMXConnectorFactory.connect(JMXServiceURL). Note that the address returned may be null if the JMXConnectorServer is not yet active.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the address of this connector server, or null if it does not have one."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAttributes",
      "comment": "The attributes for this connector server.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a read-only map containing the attributes for this connector server. Attributes whose values are not serializable are omitted from this map. If there are no serializable attributes, the returned map is empty."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.remote.JMXConnector",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toJMXConnector",
      "comment": "Returns a client stub for this connector server. A client stub is a serializable object whose connect method can be used to make one new connection to this connector server. A given connector need not support the generation of client stubs. However, the connectors specified by the JMX Remote API do (JMXMP Connector and RMI Connector).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eenv\u003c/code\u003e - client connection parameters of the same sort that can be provided to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnector.html#connect(java.util.Map)\"\u003e\u003ccode\u003eJMXConnector.connect(Map)\u003c/code\u003e\u003c/a\u003e. Can be null, which is equivalent to an empty map."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this connector server does not support the generation of client stubs.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the JMXConnectorServer is not started (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServerMBean.html#isActive()\"\u003e\u003ccode\u003eisActive()\u003c/code\u003e\u003c/a\u003e).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a communications problem means that a stub cannot be created."
        ],
        "return": [
          "a client stub that can be used to make a new connection to this connector server."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.management.remote.JMXConnectorServerMBean",
  "comment": "\u003cp\u003eMBean interface for connector servers. A JMX API connector server is attached to an MBean server, and establishes connections to that MBean server for remote clients.\u003c/p\u003e \n\u003cp\u003eA newly-created connector server is \u003cem\u003einactive\u003c/em\u003e, and does not yet listen for connections. Only when its \u003ca href\u003d\"#start()\"\u003e\u003ccode\u003estart\u003c/code\u003e\u003c/a\u003e method has been called does it start listening for connections.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}