{
  "packageName": "javax.management.remote",
  "simpleName": "JMXConnectorServerFactory",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DEFAULT_CLASS_LOADER",
      "comment": "Name of the attribute that specifies the default class loader. This class loader is used to deserialize objects in requests received from the client, possibly after consulting an MBean-specific class loader. The value associated with this attribute is an instance of ClassLoader.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.remote.JMXConnectorServerFactory.DEFAULT_CLASS_LOADER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DEFAULT_CLASS_LOADER_NAME",
      "comment": "Name of the attribute that specifies the default class loader MBean name. This class loader is used to deserialize objects in requests received from the client, possibly after consulting an MBean-specific class loader. The value associated with this attribute is an instance of ObjectName.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.remote.JMXConnectorServerFactory.DEFAULT_CLASS_LOADER_NAME\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PROTOCOL_PROVIDER_PACKAGES",
      "comment": "Name of the attribute that specifies the provider packages that are consulted when looking for the handler for a protocol. The value associated with this attribute is a string with package names separated by vertical bars (|).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.remote.JMXConnectorServerFactory.PROTOCOL_PROVIDER_PACKAGES\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PROTOCOL_PROVIDER_CLASS_LOADER",
      "comment": "Name of the attribute that specifies the class loader for loading protocol providers. The value associated with this attribute is an instance of ClassLoader.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#javax.management.remote.JMXConnectorServerFactory.PROTOCOL_PROVIDER_CLASS_LOADER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.management.remote.JMXConnectorServer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "javax.management.remote.JMXServiceURL",
            "type": "Class"
          },
          "field": {
            "name": "serviceURL"
          }
        },
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "environment"
          }
        },
        {
          "type": {
            "name": "javax.management.MBeanServer",
            "type": "Class"
          },
          "field": {
            "name": "mbeanServer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newJMXConnectorServer",
      "comment": "Creates a connector server at the given address. The resultant server is not started until its start method is called.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eserviceURL\u003c/code\u003e - the address of the new connector server. The actual address of the new connector server, as returned by its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServerMBean.html#getAddress()\"\u003e\u003ccode\u003egetAddress\u003c/code\u003e\u003c/a\u003e method, will not necessarily be exactly the same. For example, it might include a port number if the original address did not.",
          "\u003ccode\u003eenvironment\u003c/code\u003e - a set of attributes to control the new connector server\u0027s behavior. This parameter can be null. Keys in this map must be Strings. The appropriate type of each associated value depends on the attribute. The contents of \n\u003ccode\u003eenvironment\u003c/code\u003e are not changed by this call.",
          "\u003ccode\u003embeanServer\u003c/code\u003e - the MBean server that this connector server is attached to. Null if this connector server will be attached to an MBean server by being registered in it."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eserviceURL\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the connector server cannot be made because of a communication problem.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if there is no provider for the protocol in \n\u003ccode\u003eserviceURL\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXProviderException.html\" title\u003d\"class in javax.management.remote\"\u003eJMXProviderException\u003c/a\u003e\u003c/code\u003e - if there is a provider for the protocol in \n\u003ccode\u003eserviceURL\u003c/code\u003e but it cannot be used for some reason."
        ],
        "return": [
          "a \n\u003ccode\u003eJMXConnectorServer\u003c/code\u003e representing the new connector server. Each successful call to this method produces a different object."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.remote.JMXConnectorServerFactory",
  "comment": "\u003cp\u003eFactory to create JMX API connector servers. There are no instances of this class.\u003c/p\u003e \n\u003cp\u003eEach connector server is created by an instance of \u003ca href\u003d\"JMXConnectorServerProvider.html\" title\u003d\"interface in javax.management.remote\"\u003e\u003ccode\u003eJMXConnectorServerProvider\u003c/code\u003e\u003c/a\u003e. This instance is found as follows. Suppose the given \u003ca href\u003d\"JMXServiceURL.html\" title\u003d\"class in javax.management.remote\"\u003e\u003ccode\u003eJMXServiceURL\u003c/code\u003e\u003c/a\u003e looks like \u003ccode\u003e\"service:jmx:\u003cem\u003eprotocol\u003c/em\u003e:\u003cem\u003eremainder\u003c/em\u003e\"\u003c/code\u003e. Then the factory will attempt to find the appropriate \u003ca href\u003d\"JMXConnectorServerProvider.html\" title\u003d\"interface in javax.management.remote\"\u003e\u003ccode\u003eJMXConnectorServerProvider\u003c/code\u003e\u003c/a\u003e for \u003ccode\u003e\u003cem\u003eprotocol\u003c/em\u003e\u003c/code\u003e. Each occurrence of the character \u003ccode\u003e+\u003c/code\u003e or \u003ccode\u003e-\u003c/code\u003e in \u003ccode\u003e\u003cem\u003eprotocol\u003c/em\u003e\u003c/code\u003e is replaced by \u003ccode\u003e.\u003c/code\u003e or \u003ccode\u003e_\u003c/code\u003e, respectively.\u003c/p\u003e \n\u003cp\u003eA \u003cem\u003eprovider package list\u003c/em\u003e is searched for as follows:\u003c/p\u003e \n\u003col\u003e \n \u003cli\u003eIf the \u003ccode\u003eenvironment\u003c/code\u003e parameter to \u003ca href\u003d\"#newJMXConnectorServer(javax.management.remote.JMXServiceURL,java.util.Map,javax.management.MBeanServer)\"\u003e\u003ccode\u003enewJMXConnectorServer\u003c/code\u003e\u003c/a\u003e contains the key \u003ccode\u003ejmx.remote.protocol.provider.pkgs\u003c/code\u003e then the associated value is the provider package list. \u003c/li\u003e\n \u003cli\u003eOtherwise, if the system property \u003ccode\u003ejmx.remote.protocol.provider.pkgs\u003c/code\u003e exists, then its value is the provider package list. \u003c/li\u003e\n \u003cli\u003eOtherwise, there is no provider package list. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003eThe provider package list is a string that is interpreted as a list of non-empty Java package names separated by vertical bars (\u003ccode\u003e|\u003c/code\u003e). If the string is empty, then so is the provider package list. If the provider package list is not a String, or if it contains an element that is an empty string, a \u003ca href\u003d\"JMXProviderException.html\" title\u003d\"class in javax.management.remote\"\u003e\u003ccode\u003eJMXProviderException\u003c/code\u003e\u003c/a\u003e is thrown.\u003c/p\u003e \n\u003cp\u003eIf the provider package list exists and is not empty, then for each element \u003ccode\u003e\u003cem\u003epkg\u003c/em\u003e\u003c/code\u003e of the list, the factory will attempt to load the class \u003c/p\u003e\n\u003cblockquote\u003e \n \u003ccode\u003e\u003cem\u003epkg\u003c/em\u003e.\u003cem\u003eprotocol\u003c/em\u003e.ServerProvider\u003c/code\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIf the \u003ccode\u003eenvironment\u003c/code\u003e parameter to \u003ca href\u003d\"#newJMXConnectorServer(javax.management.remote.JMXServiceURL,java.util.Map,javax.management.MBeanServer)\"\u003e\u003ccode\u003enewJMXConnectorServer\u003c/code\u003e\u003c/a\u003e contains the key \u003ccode\u003ejmx.remote.protocol.provider.class.loader\u003c/code\u003e then the associated value is the class loader to use to load the provider. If the associated value is not an instance of \u003ca href\u003d\"../../../../java.base/java/lang/ClassLoader.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClassLoader\u003c/code\u003e\u003c/a\u003e, an \u003ca href\u003d\"../../../../java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/a\u003e is thrown.\u003c/p\u003e \n\u003cp\u003eIf the \u003ccode\u003ejmx.remote.protocol.provider.class.loader\u003c/code\u003e key is not present in the \u003ccode\u003eenvironment\u003c/code\u003e parameter, the calling thread\u0027s context class loader is used.\u003c/p\u003e \n\u003cp\u003eIf the attempt to load this class produces a \u003ca href\u003d\"../../../../java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClassNotFoundException\u003c/code\u003e\u003c/a\u003e, the search for a handler continues with the next element of the list.\u003c/p\u003e \n\u003cp\u003eOtherwise, a problem with the provider found is signalled by a \u003ca href\u003d\"JMXProviderException.html\" title\u003d\"class in javax.management.remote\"\u003e\u003ccode\u003eJMXProviderException\u003c/code\u003e\u003c/a\u003e whose \u003ca href\u003d\"../../../../java.base/java/lang/Throwable.html#getCause()\"\u003e\u003ccode\u003e\u003cem\u003ecause\u003c/em\u003e\u003c/code\u003e\u003c/a\u003e indicates the underlying exception, as follows:\u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003eif the attempt to load the class produces an exception other than \u003ccode\u003eClassNotFoundException\u003c/code\u003e, that is the \u003cem\u003ecause\u003c/em\u003e; \u003c/li\u003e\n \u003cli\u003eif \u003ca href\u003d\"../../../../java.base/java/lang/Class.html#newInstance()\"\u003e\u003ccode\u003eClass.newInstance()\u003c/code\u003e\u003c/a\u003e for the class produces an exception, that is the \u003cem\u003ecause\u003c/em\u003e. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003eIf no provider is found by the above steps, including the default case where there is no provider package list, then the implementation will use its own provider for \u003ccode\u003e\u003cem\u003eprotocol\u003c/em\u003e\u003c/code\u003e, or it will throw a \u003ccode\u003eMalformedURLException\u003c/code\u003e if there is none. An implementation may choose to find providers by other means. For example, it may support \u003ca href\u003d\"../../../../java.base/java/util/ServiceLoader.html#developing-service-providers\"\u003eservice providers\u003c/a\u003e, where the service interface is \u003ccode\u003eJMXConnectorServerProvider\u003c/code\u003e.\u003c/p\u003e \n\u003cp\u003eEvery implementation must support the RMI connector protocol with the default RMI transport, specified with string \u003ccode\u003ermi\u003c/code\u003e. \u003c/p\u003e \n\u003cp\u003eOnce a provider is found, the result of the \u003ccode\u003enewJMXConnectorServer\u003c/code\u003e method is the result of calling \u003ca href\u003d\"JMXConnectorServerProvider.html#newJMXConnectorServer(javax.management.remote.JMXServiceURL,java.util.Map,javax.management.MBeanServer)\"\u003e\u003ccode\u003enewJMXConnectorServer\u003c/code\u003e\u003c/a\u003e on the provider.\u003c/p\u003e \n\u003cp\u003eThe \u003ccode\u003eMap\u003c/code\u003e parameter passed to the \u003ccode\u003eJMXConnectorServerProvider\u003c/code\u003e is a new read-only \u003ccode\u003eMap\u003c/code\u003e that contains all the entries that were in the \u003ccode\u003eenvironment\u003c/code\u003e parameter to \u003ca href\u003d\"#newJMXConnectorServer(javax.management.remote.JMXServiceURL,java.util.Map,javax.management.MBeanServer)\"\u003e\u003ccode\u003eJMXConnectorServerFactory.newJMXConnectorServer\u003c/code\u003e\u003c/a\u003e, if there was one. Additionally, if the \u003ccode\u003ejmx.remote.protocol.provider.class.loader\u003c/code\u003e key is not present in the \u003ccode\u003eenvironment\u003c/code\u003e parameter, it is added to the new read-only \u003ccode\u003eMap\u003c/code\u003e. The associated value is the calling thread\u0027s context class loader.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}