{
  "packageName": "javax.management.remote",
  "simpleName": "JMXServiceURL",
  "moduleName": "java.management",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getProtocol",
      "comment": "The protocol part of the Service URL.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the protocol part of the Service URL. This is never null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHost",
      "comment": "The host part of the Service URL. If the Service URL was constructed with the constructor that takes a URL string parameter, the result is the substring specifying the host in that URL. If the Service URL was constructed with a constructor that takes a separate host parameter, the result is the string that was specified. If that string was null, the result is InetAddress.getLocalHost().getHostName() if local host name can be resolved to an IP. Else numeric IP address of an active network interface will be used. In either case, if the host was specified using the [...] syntax for numeric IPv6 addresses, the square brackets are not included in the return value here.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the host part of the Service URL. This is never null."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPort",
      "comment": "The port of the Service URL. If no port was specified, the returned value is 0.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the port of the Service URL, or 0 if none."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getURLPath",
      "comment": "The URL Path part of the Service URL. This is an empty string, or a string beginning with a slash (/), or a string beginning with a semicolon (;).",
      "annotations": [],
      "tagMap": {
        "return": [
          "the URL Path part of the Service URL. This is never null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "The string representation of this Service URL. If the value returned by this method is supplied to the JMXServiceURL constructor, the resultant object is equal to this one. The host part of the returned string is the value returned by getHost(). If that value specifies a numeric IPv6 address, it is surrounded by square brackets []. The port part of the returned string is the value returned by getPort() in its shortest decimal form. If the value is zero, it is omitted.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string representation of this Service URL."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Indicates whether some other object is equal to this one. This method returns true if and only if obj is an instance of JMXServiceURL whose getProtocol(), getHost(), getPort(), and getURLPath() methods return the same values as for this object. The values for getProtocol() and getHost() can differ in case without affecting equality.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is the same as the \n\u003ccode\u003eobj\u003c/code\u003e argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "serviceURL",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JMXServiceURL by parsing a Service URL string.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eserviceURL\u003c/code\u003e - the URL string to be parsed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eserviceURL\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eserviceURL\u003c/code\u003e does not conform to the syntax for an Abstract Service URL or if it is not a valid name for a JMX Remote API service. A \n\u003ccode\u003eJMXServiceURL\u003c/code\u003e must begin with the string \n\u003ccode\u003e\"service:jmx:\"\u003c/code\u003e (case-insensitive). It must not contain any characters that are not printable ASCII characters."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "protocol",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "host",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "port",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JMXServiceURL with the given protocol, host, and port. This constructor is equivalent to JMXServiceURL(protocol, host, port, null).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eprotocol\u003c/code\u003e - the protocol part of the URL. If null, defaults to \n\u003ccode\u003ejmxmp\u003c/code\u003e.",
          "\u003ccode\u003ehost\u003c/code\u003e - the host part of the URL. If host is null and if local host name can be resolved to an IP, then host defaults to local host name as determined by \n\u003ccode\u003eInetAddress.getLocalHost().getHostName()\u003c/code\u003e. If host is null and if local host name cannot be resolved to an IP, then host defaults to numeric IP address of one of the active network interfaces. If host is a numeric IPv6 address, it can optionally be enclosed in square brackets \n\u003ccode\u003e[]\u003c/code\u003e.",
          "\u003ccode\u003eport\u003c/code\u003e - the port part of the URL."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if one of the parts is syntactically incorrect, or if \n\u003ccode\u003ehost\u003c/code\u003e is null and it is not possible to find the local host name, or if \n\u003ccode\u003eport\u003c/code\u003e is negative."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "protocol",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "host",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "port",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "urlPath",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a JMXServiceURL with the given parts.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eprotocol\u003c/code\u003e - the protocol part of the URL. If null, defaults to \n\u003ccode\u003ejmxmp\u003c/code\u003e.",
          "\u003ccode\u003ehost\u003c/code\u003e - the host part of the URL. If host is null and if local host name can be resolved to an IP, then host defaults to local host name as determined by \n\u003ccode\u003eInetAddress.getLocalHost().getHostName()\u003c/code\u003e. If host is null and if local host name cannot be resolved to an IP, then host defaults to numeric IP address of one of the active network interfaces. If host is a numeric IPv6 address, it can optionally be enclosed in square brackets \n\u003ccode\u003e[]\u003c/code\u003e.",
          "\u003ccode\u003eport\u003c/code\u003e - the port part of the URL.",
          "\u003ccode\u003eurlPath\u003c/code\u003e - the URL path part of the URL. If null, defaults to the empty string."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - if one of the parts is syntactically incorrect, or if \n\u003ccode\u003ehost\u003c/code\u003e is null and it is not possible to find the local host name, or if \n\u003ccode\u003eport\u003c/code\u003e is negative."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "javax.management.remote.JMXServiceURL",
  "comment": "\u003cp\u003eThe address of a JMX API connector server. Instances of this class are immutable.\u003c/p\u003e \n\u003cp\u003eThe address is an \u003cem\u003eAbstract Service URL\u003c/em\u003e for SLP, as defined in RFC 2609 and amended by RFC 3111. It must look like this:\u003c/p\u003e \n\u003cblockquote\u003e \n \u003ccode\u003eservice:jmx:\u003cem\u003eprotocol\u003c/em\u003e:\u003cem\u003esap\u003c/em\u003e\u003c/code\u003e \n\u003c/blockquote\u003e \n\u003cp\u003eHere, \u003ccode\u003e\u003cem\u003eprotocol\u003c/em\u003e\u003c/code\u003e is the transport protocol to be used to connect to the connector server. It is a string of one or more ASCII characters, each of which is a letter, a digit, or one of the characters \u003ccode\u003e+\u003c/code\u003e or \u003ccode\u003e-\u003c/code\u003e. The first character must be a letter. Uppercase letters are converted into lowercase ones.\u003c/p\u003e \n\u003cp\u003e\u003ccode\u003e\u003cem\u003esap\u003c/em\u003e\u003c/code\u003e is the address at which the connector server is found. This address uses a subset of the syntax defined by RFC 2609 for IP-based protocols. It is a subset because the \u003ccode\u003euser@host\u003c/code\u003e syntax is not supported.\u003c/p\u003e \n\u003cp\u003eThe other syntaxes defined by RFC 2609 are not currently supported by this class.\u003c/p\u003e \n\u003cp\u003eThe supported syntax is:\u003c/p\u003e \n\u003cblockquote\u003e \n \u003ccode\u003e//\u003cem\u003e[host[\u003c/em\u003e:\u003cem\u003eport]][url-path]\u003c/em\u003e\u003c/code\u003e \n\u003c/blockquote\u003e \n\u003cp\u003eSquare brackets \u003ccode\u003e[]\u003c/code\u003e indicate optional parts of the address. Not all protocols will recognize all optional parts.\u003c/p\u003e \n\u003cp\u003eThe \u003ccode\u003e\u003cem\u003ehost\u003c/em\u003e\u003c/code\u003e is a host name, an IPv4 numeric host address, or an IPv6 numeric address enclosed in square brackets.\u003c/p\u003e \n\u003cp\u003eThe \u003ccode\u003e\u003cem\u003eport\u003c/em\u003e\u003c/code\u003e is a decimal port number. 0 means a default or anonymous port, depending on the protocol.\u003c/p\u003e \n\u003cp\u003eThe \u003ccode\u003e\u003cem\u003ehost\u003c/em\u003e\u003c/code\u003e and \u003ccode\u003e\u003cem\u003eport\u003c/em\u003e\u003c/code\u003e can be omitted. The \u003ccode\u003e\u003cem\u003eport\u003c/em\u003e\u003c/code\u003e cannot be supplied without a \u003ccode\u003e\u003cem\u003ehost\u003c/em\u003e\u003c/code\u003e.\u003c/p\u003e \n\u003cp\u003eThe \u003ccode\u003e\u003cem\u003eurl-path\u003c/em\u003e\u003c/code\u003e, if any, begins with a slash (\u003ccode\u003e/\u003c/code\u003e) or a semicolon (\u003ccode\u003e;\u003c/code\u003e) and continues to the end of the address. It can contain attributes using the semicolon syntax specified in RFC 2609. Those attributes are not parsed by this class and incorrect attribute syntax is not detected.\u003c/p\u003e \n\u003cp\u003eAlthough it is legal according to RFC 2609 to have a \u003ccode\u003e\u003cem\u003eurl-path\u003c/em\u003e\u003c/code\u003e that begins with a semicolon, not all implementations of SLP allow it, so it is recommended to avoid that syntax.\u003c/p\u003e \n\u003cp\u003eCase is not significant in the initial \u003ccode\u003eservice:jmx:\u003cem\u003eprotocol\u003c/em\u003e\u003c/code\u003e string or in the host part of the address. Depending on the protocol, case can be significant in the \u003ccode\u003e\u003cem\u003eurl-path\u003c/em\u003e\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"http://www.ietf.org/rfc/rfc2609.txt\"\u003eRFC 2609, \"Service Templates and \u003ccode\u003eService:\u003c/code\u003e Schemes\"\u003c/a\u003e, \n\u003ca href\u003d\"http://www.ietf.org/rfc/rfc3111.txt\"\u003eRFC 3111, \"Service Location Protocol Modifications for IPv6\"\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#javax.management.remote.JMXServiceURL\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}