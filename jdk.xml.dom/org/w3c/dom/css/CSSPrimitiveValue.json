{
  "packageName": "org.w3c.dom.css",
  "simpleName": "CSSPrimitiveValue",
  "moduleName": "jdk.xml.dom",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.w3c.dom.css.CSSValue",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_UNKNOWN",
      "comment": "The value is not a recognized CSS2 value. The value can only be obtained by using the cssText attribute.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_UNKNOWN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_NUMBER",
      "comment": "The value is a simple number. The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_NUMBER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_PERCENTAGE",
      "comment": "The value is a percentage. The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_PERCENTAGE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_EMS",
      "comment": "The value is a length (ems). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_EMS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_EXS",
      "comment": "The value is a length (exs). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_EXS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_PX",
      "comment": "The value is a length (px). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_PX\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_CM",
      "comment": "The value is a length (cm). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_CM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_MM",
      "comment": "The value is a length (mm). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_MM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_IN",
      "comment": "The value is a length (in). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_IN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_PT",
      "comment": "The value is a length (pt). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_PT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_PC",
      "comment": "The value is a length (pc). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_PC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_DEG",
      "comment": "The value is an angle (deg). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_DEG\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_RAD",
      "comment": "The value is an angle (rad). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_RAD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_GRAD",
      "comment": "The value is an angle (grad). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_GRAD\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_MS",
      "comment": "The value is a time (ms). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_MS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_S",
      "comment": "The value is a time (s). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_S\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_HZ",
      "comment": "The value is a frequency (Hz). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_HZ\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_KHZ",
      "comment": "The value is a frequency (kHz). The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_KHZ\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_DIMENSION",
      "comment": "The value is a number with an unknown dimension. The value can be obtained by using the getFloatValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_DIMENSION\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_STRING",
      "comment": "The value is a STRING. The value can be obtained by using the getStringValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_STRING\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_URI",
      "comment": "The value is a URI. The value can be obtained by using the getStringValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_URI\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_IDENT",
      "comment": "The value is an identifier. The value can be obtained by using the getStringValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_IDENT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_ATTR",
      "comment": "The value is a attribute function. The value can be obtained by using the getStringValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_ATTR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_COUNTER",
      "comment": "The value is a counter or counters function. The value can be obtained by using the getCounterValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_COUNTER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_RECT",
      "comment": "The value is a rect function. The value can be obtained by using the getRectValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_RECT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CSS_RGBCOLOR",
      "comment": "The value is a RGB color. The value can be obtained by using the getRGBColorValue method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#org.w3c.dom.css.CSSPrimitiveValue.CSS_RGBCOLOR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPrimitiveType",
      "comment": "The type of the value as defined by the constants specified above.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFloatValue",
      "comment": "A method to set the float value with a specified unit. If the property attached with this value can not accept the specified unit or the float value, the value will be unchanged and a DOMException will be raised.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eunitType\u003c/code\u003e - A unit code as defined above. The unit code can only be a float unit type (i.e. \n\u003ccode\u003eCSS_NUMBER\u003c/code\u003e, \n\u003ccode\u003eCSS_PERCENTAGE\u003c/code\u003e, \n\u003ccode\u003eCSS_EMS\u003c/code\u003e, \n\u003ccode\u003eCSS_EXS\u003c/code\u003e, \n\u003ccode\u003eCSS_PX\u003c/code\u003e, \n\u003ccode\u003eCSS_CM\u003c/code\u003e, \n\u003ccode\u003eCSS_MM\u003c/code\u003e, \n\u003ccode\u003eCSS_IN\u003c/code\u003e, \n\u003ccode\u003eCSS_PT\u003c/code\u003e, \n\u003ccode\u003eCSS_PC\u003c/code\u003e, \n\u003ccode\u003eCSS_DEG\u003c/code\u003e, \n\u003ccode\u003eCSS_RAD\u003c/code\u003e, \n\u003ccode\u003eCSS_GRAD\u003c/code\u003e, \n\u003ccode\u003eCSS_MS\u003c/code\u003e, \n\u003ccode\u003eCSS_S\u003c/code\u003e, \n\u003ccode\u003eCSS_HZ\u003c/code\u003e, \n\u003ccode\u003eCSS_KHZ\u003c/code\u003e, \n\u003ccode\u003eCSS_DIMENSION\u003c/code\u003e).",
          "\u003ccode\u003efloatValue\u003c/code\u003e - The new float value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_ACCESS_ERR: Raised if the attached property doesn\u0027t support the float value or the unit type. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFloatValue",
      "comment": "This method is used to get a float value in a specified unit. If this CSS value doesn\u0027t contain a float value or can\u0027t be converted into the specified unit, a DOMException is raised.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eunitType\u003c/code\u003e - A unit code to get the float value. The unit code can only be a float unit type (i.e. \n\u003ccode\u003eCSS_NUMBER\u003c/code\u003e, \n\u003ccode\u003eCSS_PERCENTAGE\u003c/code\u003e, \n\u003ccode\u003eCSS_EMS\u003c/code\u003e, \n\u003ccode\u003eCSS_EXS\u003c/code\u003e, \n\u003ccode\u003eCSS_PX\u003c/code\u003e, \n\u003ccode\u003eCSS_CM\u003c/code\u003e, \n\u003ccode\u003eCSS_MM\u003c/code\u003e, \n\u003ccode\u003eCSS_IN\u003c/code\u003e, \n\u003ccode\u003eCSS_PT\u003c/code\u003e, \n\u003ccode\u003eCSS_PC\u003c/code\u003e, \n\u003ccode\u003eCSS_DEG\u003c/code\u003e, \n\u003ccode\u003eCSS_RAD\u003c/code\u003e, \n\u003ccode\u003eCSS_GRAD\u003c/code\u003e, \n\u003ccode\u003eCSS_MS\u003c/code\u003e, \n\u003ccode\u003eCSS_S\u003c/code\u003e, \n\u003ccode\u003eCSS_HZ\u003c/code\u003e, \n\u003ccode\u003eCSS_KHZ\u003c/code\u003e, \n\u003ccode\u003eCSS_DIMENSION\u003c/code\u003e)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_ACCESS_ERR: Raised if the CSS value doesn\u0027t contain a float value or if the float value can\u0027t be converted into the specified unit."
        ],
        "return": [
          "The float value in the specified unit."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setStringValue",
      "comment": "A method to set the string value with the specified unit. If the property attached to this value can\u0027t accept the specified unit or the string value, the value will be unchanged and a DOMException will be raised.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estringType\u003c/code\u003e - A string code as defined above. The string code can only be a string unit type (i.e. \n\u003ccode\u003eCSS_STRING\u003c/code\u003e, \n\u003ccode\u003eCSS_URI\u003c/code\u003e, \n\u003ccode\u003eCSS_IDENT\u003c/code\u003e, and \n\u003ccode\u003eCSS_ATTR\u003c/code\u003e).",
          "\u003ccode\u003estringValue\u003c/code\u003e - The new string value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_ACCESS_ERR: Raised if the CSS value doesn\u0027t contain a string value or if the string value can\u0027t be converted into the specified unit. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this property is readonly."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getStringValue",
      "comment": "This method is used to get the string value. If the CSS value doesn\u0027t contain a string value, a DOMException is raised. Some properties (like \u0027font-family\u0027 or \u0027voice-family\u0027) convert a whitespace separated list of idents to a string.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_ACCESS_ERR: Raised if the CSS value doesn\u0027t contain a string value."
        ],
        "return": [
          "The string value in the current unit. The current \n\u003ccode\u003eprimitiveType\u003c/code\u003e can only be a string unit type (i.e. \n\u003ccode\u003eCSS_STRING\u003c/code\u003e, \n\u003ccode\u003eCSS_URI\u003c/code\u003e, \n\u003ccode\u003eCSS_IDENT\u003c/code\u003e and \n\u003ccode\u003eCSS_ATTR\u003c/code\u003e)."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.css.Counter",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCounterValue",
      "comment": "This method is used to get the Counter value. If this CSS value doesn\u0027t contain a counter value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Counter interface.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_ACCESS_ERR: Raised if the CSS value doesn\u0027t contain a Counter value (e.g. this is not \n\u003ccode\u003eCSS_COUNTER\u003c/code\u003e)."
        ],
        "return": [
          "The Counter value."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.css.Rect",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRectValue",
      "comment": "This method is used to get the Rect value. If this CSS value doesn\u0027t contain a rect value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Rect interface.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_ACCESS_ERR: Raised if the CSS value doesn\u0027t contain a Rect value. (e.g. this is not \n\u003ccode\u003eCSS_RECT\u003c/code\u003e)."
        ],
        "return": [
          "The Rect value."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.css.RGBColor",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRGBColorValue",
      "comment": "This method is used to get the RGB color. If this CSS value doesn\u0027t contain a RGB color value, a DOMException is raised. Modification to the corresponding style property can be achieved using the RGBColor interface.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - INVALID_ACCESS_ERR: Raised if the attached property can\u0027t return a RGB color value (e.g. this is not \n\u003ccode\u003eCSS_RGBCOLOR\u003c/code\u003e)."
        ],
        "return": [
          "the RGB color value."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.css.CSSPrimitiveValue",
  "comment": "The \n\u003ccode\u003eCSSPrimitiveValue\u003c/code\u003e interface represents a single CSS value . This interface may be used to determine the value of a specific style property currently set in a block or to set a specific style property explicitly within the block. An instance of this interface might be obtained from the \n\u003ccode\u003egetPropertyCSSValue\u003c/code\u003e method of the \n\u003ccode\u003eCSSStyleDeclaration\u003c/code\u003e interface. A \n\u003ccode\u003eCSSPrimitiveValue\u003c/code\u003e object only occurs in a context of a CSS property. \n\u003cp\u003e Conversions are allowed between absolute values (from millimeters to centimeters, from degrees to radians, and so on) but not between relative values. (For example, a pixel value cannot be converted to a centimeter value.) Percentage values can\u0027t be converted since they are relative to the parent value (or another property value). There is one exception for color percentage values: since a color percentage value is relative to the range 0-255, a color percentage value can be converted to a number; (see also the \u003ccode\u003eRGBColor\u003c/code\u003e interface). \u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113\"\u003eDocument Object Model (DOM) Level 2 Style Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4, DOM Level 2"
    ]
  }
}