{
  "packageName": "org.w3c.dom.css",
  "simpleName": "CSSStyleDeclaration",
  "moduleName": "jdk.xml.dom",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCssText",
      "comment": "The parsable textual representation of the declaration block (excluding the surrounding curly braces). Setting this attribute will result in the parsing of the new value and resetting of all the properties in the declaration block including the removal or addition of properties.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "cssText",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCssText",
      "comment": "The parsable textual representation of the declaration block (excluding the surrounding curly braces). Setting this attribute will result in the parsing of the new value and resetting of all the properties in the declaration block including the removal or addition of properties.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - SYNTAX_ERR: Raised if the specified CSS string value has a syntax error and is unparsable. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or a property is readonly."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPropertyValue",
      "comment": "Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - The name of the CSS property. See the CSS property index."
        ],
        "return": [
          "Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.css.CSSValue",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPropertyCSSValue",
      "comment": "Used to retrieve the object representation of the value of a CSS property if it has been explicitly set within this declaration block. This method returns null if the property is a shorthand property. Shorthand property values can only be accessed and modified as strings, using the getPropertyValue and setProperty methods.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - The name of the CSS property. See the CSS property index."
        ],
        "return": [
          "Returns the value of the property if it has been explicitly set for this declaration block. Returns \n\u003ccode\u003enull\u003c/code\u003e if the property has not been set."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeProperty",
      "comment": "Used to remove a CSS property if it has been explicitly set within this declaration block.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - The name of the CSS property. See the CSS property index."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - NO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly."
        ],
        "return": [
          "Returns the value of the property if it has been explicitly set for this declaration block. Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPropertyPriority",
      "comment": "Used to retrieve the priority of a CSS property (e.g. the \"important\" qualifier) if the priority has been explicitly set in this declaration block.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - The name of the CSS property. See the CSS property index."
        ],
        "return": [
          "A string representing the priority (e.g. \n\u003ccode\u003e\"important\"\u003c/code\u003e) if the property has been explicitly set in this declaration block and has a priority specified. The empty string otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "org.w3c.dom.DOMException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "propertyName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "priority",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setProperty",
      "comment": "Used to set a property value and priority within this declaration block. setProperty permits to modify a property or add a new one in the declaration block. Any call to this method may modify the order of properties in the item method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epropertyName\u003c/code\u003e - The name of the CSS property. See the CSS property index.",
          "\u003ccode\u003evalue\u003c/code\u003e - The new value of the property.",
          "\u003ccode\u003epriority\u003c/code\u003e - The new priority of the property (e.g. \n\u003ccode\u003e\"important\"\u003c/code\u003e) or the empty string if none."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/org/w3c/dom/DOMException.html\" title\u003d\"class in org.w3c.dom\"\u003eDOMException\u003c/a\u003e\u003c/code\u003e - SYNTAX_ERR: Raised if the specified value has a syntax error and is unparsable. \n\u003cbr\u003eNO_MODIFICATION_ALLOWED_ERR: Raised if this declaration is readonly or the property is readonly."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLength",
      "comment": "The number of properties that have been explicitly set in this declaration block. The range of valid indices is 0 to length-1 inclusive.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "item",
      "comment": "Used to retrieve the properties that have been explicitly set in this declaration block. The order of the properties retrieved using this method does not have to be the order in which they were set. This method can be used to iterate over all properties in this declaration block.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - Index of the property name to retrieve."
        ],
        "return": [
          "The name of the property at this ordinal position. The empty string if no property exists at this position."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.css.CSSRule",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getParentRule",
      "comment": "The CSS rule that contains this declaration block or null if this CSSStyleDeclaration is not attached to a CSSRule.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.css.CSSStyleDeclaration",
  "comment": "The \n\u003ccode\u003eCSSStyleDeclaration\u003c/code\u003e interface represents a single CSS declaration block. This interface may be used to determine the style properties currently set in a block or to set style properties explicitly within the block. \n\u003cp\u003e While an implementation may not recognize all CSS properties within a CSS declaration block, it is expected to provide access to all specified properties in the style sheet through the \u003ccode\u003eCSSStyleDeclaration\u003c/code\u003e interface. Furthermore, implementations that support a specific level of CSS should correctly handle CSS shorthand properties for that level. For a further discussion of shorthand properties, see the \u003ccode\u003eCSS2Properties\u003c/code\u003e interface. \u003c/p\u003e\n\u003cp\u003e This interface is also used to provide a read-only access to the computed values of an element. See also the \u003ccode\u003eViewCSS\u003c/code\u003e interface. The CSS Object Model doesn\u0027t provide an access to the specified or actual values of the CSS cascade. \u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113\"\u003eDocument Object Model (DOM) Level 2 Style Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4, DOM Level 2"
    ]
  }
}