{
  "packageName": "org.w3c.dom.html",
  "simpleName": "HTMLDocument",
  "moduleName": "jdk.xml.dom",
  "type": "INTERFACE",
  "superClass": {
    "name": "org.w3c.dom.Document",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTitle",
      "comment": "The title of a document as specified by the TITLE element in the head of the document.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "title"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTitle",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getReferrer",
      "comment": "Returns the URI of the page that linked to this page. The value is an empty string if the user navigated to the page directly (not through a link, but, for example, via a bookmark).",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDomain",
      "comment": "The domain name of the server that served the document, or null if the server cannot be identified by a domain name.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getURL",
      "comment": "The complete URI of the document.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.html.HTMLElement",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBody",
      "comment": "The element that contains the content for the document. In documents with BODY contents, returns the BODY element. In frameset documents, this returns the outermost FRAMESET element.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "org.w3c.dom.html.HTMLElement",
            "type": "Class"
          },
          "field": {
            "name": "body"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBody",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.html.HTMLCollection",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getImages",
      "comment": "A collection of all the IMG elements in a document. The behavior is limited to IMG elements for backwards compatibility.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.html.HTMLCollection",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getApplets",
      "comment": "A collection of all the OBJECT elements that include applets and APPLET ( deprecated ) elements in a document.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.html.HTMLCollection",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLinks",
      "comment": "A collection of all AREA elements and anchor ( A ) elements in a document with a value for the href attribute.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.html.HTMLCollection",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getForms",
      "comment": "A collection of all the forms of a document.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.html.HTMLCollection",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnchors",
      "comment": "A collection of all the anchor (A ) elements in a document with a value for the name attribute. Note. For reasons of backwards compatibility, the returned set of anchors only contains those anchors created with the name attribute, not those created with the id attribute.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCookie",
      "comment": "The cookies associated with this document. If there are none, the value is an empty string. Otherwise, the value is a string: a semicolon-delimited list of \"name, value\" pairs for all the cookies associated with the page. For example, name\u003dvalue;expires\u003ddate .",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "cookie"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCookie",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "open",
      "comment": "Note. This method and the ones following allow a user to add to or replace the structure model of a document using strings of unparsed HTML. At the time of writing alternate methods for providing similar functionality for both HTML and XML documents were being considered. The following methods may be deprecated at some point in the future in favor of a more general-purpose mechanism. Open a document stream for writing. If a document exists in the target, this method clears it.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "close",
      "comment": "Closes a document stream opened by open() and forces rendering.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "write",
      "comment": "Write a string of text to a document stream opened by open() . The text is parsed into the document\u0027s structure model.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - The string to be parsed into some structure in the document structure model."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "writeln",
      "comment": "Write a string of text followed by a newline character to a document stream opened by open() . The text is parsed into the document\u0027s structure model.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - The string to be parsed into some structure in the document structure model."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.NodeList",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "elementName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getElementsByName",
      "comment": "Returns the (possibly empty) collection of elements whose name value is given by elementName .",
      "tagMap": {
        "param": [
          "\u003ccode\u003eelementName\u003c/code\u003e - The \n\u003ccode\u003ename\u003c/code\u003e attribute value for an element."
        ],
        "return": [
          "The matching elements."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.html.HTMLDocument",
  "comment": "An \n\u003ccode\u003eHTMLDocument\u003c/code\u003e is the root of the HTML hierarchy and holds the entire content. Besides providing access to the hierarchy, it also provides some convenience methods for accessing certain sets of information from the document. \n\u003cp\u003e The following properties have been deprecated in favor of the corresponding ones for the \u003ccode\u003eBODY\u003c/code\u003e element: alinkColor background bgColor fgColor linkColor vlinkColor In DOM Level 2, the method \u003ccode\u003egetElementById\u003c/code\u003e is inherited from the \u003ccode\u003eDocument\u003c/code\u003e interface where it was moved. \u003c/p\u003e\n\u003cp\u003eSee also the \u003ca href\u003d\"http://www.w3.org/TR/2000/CR-DOM-Level-2-20000510\"\u003eDocument Object Model (DOM) Level 2 Specification\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4, DOM Level 2"
    ]
  }
}