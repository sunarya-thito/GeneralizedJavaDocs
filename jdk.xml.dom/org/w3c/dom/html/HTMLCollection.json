{
  "packageName": "org.w3c.dom.html",
  "simpleName": "HTMLCollection",
  "moduleName": "jdk.xml.dom",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLength",
      "comment": "This attribute specifies the length or size of the list.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "item",
      "comment": "This method retrieves a node specified by ordinal index. Nodes are numbered in tree order (depth-first traversal order).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index of the node to be fetched. The index origin is 0."
        ],
        "return": [
          "The \n\u003ccode\u003eNode\u003c/code\u003e at the corresponding position upon success. A value of \n\u003ccode\u003enull\u003c/code\u003e is returned if the index is out of range."
        ]
      }
    },
    {
      "returnType": {
        "name": "org.w3c.dom.Node",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "namedItem",
      "comment": "This method retrieves a Node using a name. It first searches for a Node with a matching id attribute. If it doesn\u0027t find one, it then searches for a Node with a matching name attribute, but only on those elements that are allowed a name attribute.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the \n\u003ccode\u003eNode\u003c/code\u003e to be fetched."
        ],
        "return": [
          "The \n\u003ccode\u003eNode\u003c/code\u003e with a \n\u003ccode\u003ename\u003c/code\u003e or \n\u003ccode\u003eid\u003c/code\u003e attribute whose value corresponds to the specified string. Upon failure (e.g., no node with this name exists), returns \n\u003ccode\u003enull\u003c/code\u003e ."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "org.w3c.dom.html.HTMLCollection",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.4, DOM Level 2"
    ]
  }
}