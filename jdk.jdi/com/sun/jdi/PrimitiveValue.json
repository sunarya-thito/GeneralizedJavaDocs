{
  "packageName": "com.sun.jdi",
  "simpleName": "PrimitiveValue",
  "moduleName": "jdk.jdi",
  "type": "INTERFACE",
  "superClass": {
    "name": "com.sun.jdi.Value",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "booleanValue",
      "comment": "Converts this value to a BooleanValue and returns the result as a boolean.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this value is non-zero (or \n\u003ccode\u003etrue\u003c/code\u003e if already a BooleanValue); false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "byteValue",
      "comment": "Converts this value to a ByteValue and returns the result as a byte. The value will be narrowed as necessary, and magnitude or precision information may be lost (as if the primitive had been cast to a byte).",
      "tagMap": {
        "return": [
          "the value, converted to byte"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "charValue",
      "comment": "Converts this value to a CharValue and returns the result as a char. The value will be narrowed or widened as necessary, and magnitude or precision information may be lost (as if the primitive had been cast to a char, in the narrowing case).",
      "tagMap": {
        "return": [
          "the value, converted to char"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "shortValue",
      "comment": "Converts this value to a ShortValue and returns the result as a short. The value will be narrowed or widened as necessary, and magnitude or precision information may be lost (as if the primitive had been cast to a short, in the narrowing case).",
      "tagMap": {
        "return": [
          "the value, converted to short"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "intValue",
      "comment": "Converts this value to an IntegerValue and returns the result as an int. The value will be narrowed or widened as necessary, and magnitude or precision information may be lost (as if the primitive had been cast to an int, in the narrowing case).",
      "tagMap": {
        "return": [
          "the value, converted to int"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "longValue",
      "comment": "Converts this value to a LongValue and returns the result as a long. The value will be narrowed or widened as necessary, and magnitude or precision information may be lost (as if the primitive had been cast to a long, in the narrowing case).",
      "tagMap": {
        "return": [
          "the value, converted to long"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "floatValue",
      "comment": "Converts this value to a FloatValue and returns the result as a float. The value will be narrowed or widened as necessary, and magnitude or precision information may be lost (as if the primitive had been cast to a float, in the narrowing case).",
      "tagMap": {
        "return": [
          "the value, converted to float"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "doubleValue",
      "comment": "Converts this value to a DoubleValue and returns the result as a double. The value will be widened as necessary, and precision information may be lost.",
      "tagMap": {
        "return": [
          "the value, converted to double"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "com.sun.jdi.PrimitiveValue",
  "comment": "The value assigned to a field or variable of primitive type in a target VM. Each primitive values is accessed through a subinterface of this interface.",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}