{
  "packageName": "com.sun.jdi.connect",
  "simpleName": "ListeningConnector",
  "moduleName": "jdk.jdi",
  "type": "INTERFACE",
  "superClass": {
    "name": "com.sun.jdi.connect.Connector",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "supportsMultipleConnections",
      "comment": "Indicates whether this listening connector supports multiple connections for a single argument map. If so, a call to startListening(java.util.Map\u003cjava.lang.String, ? extends com.sun.jdi.connect.Connector.Argument\u003e) may allow multiple target VM to become connected.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if multiple connections are supported; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "startListening",
      "comment": "Listens for one or more connections initiated by target VMs. The connector uses the given argument map in determining the address at which to listen or else it generates an appropriate listen address. In either case, an address string is returned from this method which can be used in starting target VMs to identify this connector. The format of the address string is connector, transport, and, possibly, platform dependent. The argument map associates argument name strings to instances of Connector.Argument. The default argument map for a connector can be obtained through Connector.defaultArguments(). Argument map values can be changed, but map entries should not be added or deleted. This method does not return a VirtualMachine, and, normally, returns before any target VM initiates a connection. The connected target is obtained through accept(java.util.Map\u003cjava.lang.String, ? extends com.sun.jdi.connect.Connector.Argument\u003e) (using the same argument map as is passed to this method). If arguments contains addressing information and only one connection will be accepted, the accept method can be called immediately without calling this method.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - when unable to start listening. Specific exceptions are dependent on the Connector implementation in use.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/connect/IllegalConnectorArgumentsException.html\" title\u003d\"class in com.sun.jdi.connect\"\u003eIllegalConnectorArgumentsException\u003c/a\u003e\u003c/code\u003e - when one of the connector arguments is invalid."
        ],
        "return": [
          "the address at which the connector is listening for a connection."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "stopListening",
      "comment": "Cancels listening for connections. The given argument map should match the argument map given for a previous startListening(java.util.Map\u003cjava.lang.String, ? extends com.sun.jdi.connect.Connector.Argument\u003e) invocation.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - when unable to stop listening. Specific exceptions are dependent on the Connector implementation in use.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/connect/IllegalConnectorArgumentsException.html\" title\u003d\"class in com.sun.jdi.connect\"\u003eIllegalConnectorArgumentsException\u003c/a\u003e\u003c/code\u003e - when one of the connector arguments is invalid."
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.jdi.VirtualMachine",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "accept",
      "comment": "Waits for a target VM to attach to this connector.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/connect/TransportTimeoutException.html\" title\u003d\"class in com.sun.jdi.connect\"\u003eTransportTimeoutException\u003c/a\u003e\u003c/code\u003e - when the Connector encapsulates a transport that supports a timeout when accepting, a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/connect/Connector.Argument.html\" title\u003d\"interface in com.sun.jdi.connect\"\u003e\u003ccode\u003eConnector.Argument\u003c/code\u003e\u003c/a\u003e representing a timeout has been set in the argument map, and a timeout occurs whilst waiting for the target VM to connect.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - when unable to accept. Specific exceptions are dependent on the Connector implementation in use.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/connect/IllegalConnectorArgumentsException.html\" title\u003d\"class in com.sun.jdi.connect\"\u003eIllegalConnectorArgumentsException\u003c/a\u003e\u003c/code\u003e - when one of the connector arguments is invalid."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "com.sun.jdi.connect.ListeningConnector",
  "comment": "A connector which listens for a connection initiated by a target VM.",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}