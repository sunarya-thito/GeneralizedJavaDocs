{
  "packageName": "com.sun.jdi.connect",
  "simpleName": "LaunchingConnector",
  "moduleName": "jdk.jdi",
  "type": "INTERFACE",
  "superClass": {
    "name": "com.sun.jdi.connect.Connector",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "com.sun.jdi.VirtualMachine",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "com.sun.jdi.connect.IllegalConnectorArgumentsException",
          "type": "Class"
        },
        {
          "name": "com.sun.jdi.connect.VMStartException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "name": "com.sun.jdi.connect.Connector$Argument",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "arguments",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "launch",
      "comment": "Launches an application and connects to its VM. Properties of the launch (possibly including options, main class, and arguments) are specified in arguments. The argument map associates argument name strings to instances of Connector.Argument. The default argument map for a connector can be obtained through Connector.defaultArguments(). Argument map values can be changed, but map entries should not be added or deleted. A target VM launched by a launching connector is not guaranteed to be stable until after the VMStartEvent has been received. Important note: If a target VM is launched through this funcctions, its output and error streams must be read as it executes. These streams are available through the Process object returned by VirtualMachine.process(). If the streams are not periodically read, the target VM will stop executing when the buffers for these streams are filled.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earguments\u003c/code\u003e - the argument map to be used in launching the VM."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - when unable to launch. Specific exceptions are dependent on the Connector implementation in use.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/connect/IllegalConnectorArgumentsException.html\" title\u003d\"class in com.sun.jdi.connect\"\u003eIllegalConnectorArgumentsException\u003c/a\u003e\u003c/code\u003e - when one of the connector arguments is invalid.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/connect/VMStartException.html\" title\u003d\"class in com.sun.jdi.connect\"\u003eVMStartException\u003c/a\u003e\u003c/code\u003e - when the VM was successfully launched, but terminated with an error before a connection could be established."
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/VirtualMachine.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eVirtualMachine\u003c/code\u003e\u003c/a\u003e mirror of the target VM."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "com.sun.jdi.connect.LaunchingConnector",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}