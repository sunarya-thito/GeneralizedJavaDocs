{
  "packageName": "com.sun.jdi",
  "simpleName": "TypeComponent",
  "moduleName": "jdk.jdi",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "com.sun.jdi.Mirror",
      "type": "Class"
    },
    {
      "name": "com.sun.jdi.Accessible",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "name",
      "comment": "Gets the name of this type component. Note: for fields, this is the field name; for methods, this is the method name; for constructors, this is \u003cinit\u003e; for static initializers, this is \u003cclinit\u003e.",
      "tagMap": {
        "return": [
          "a string containing the name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "signature",
      "comment": "Gets the type signature for this type component. The signature is encoded type information as defined in the JNI documentation. It is a convenient, compact format for for manipulating type information internally, not necessarily for display to an end user. See Field.typeName() and Method.returnTypeName() for ways to help get a more readable representation of the type.",
      "tagMap": {
        "return": [
          "a string containing the signature"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "genericSignature",
      "comment": "Gets the generic signature for this TypeComponent if there is one. Generic signatures are described in the The Java Virtual Machine Specification.",
      "tagMap": {
        "return": [
          "a string containing the generic signature, or \n\u003ccode\u003enull\u003c/code\u003e if there is no generic signature."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.jdi.ReferenceType",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "declaringType",
      "comment": "Returns the type in which this component was declared. The returned ReferenceType mirrors either a class or an interface in the target VM.",
      "tagMap": {
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/ReferenceType.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eReferenceType\u003c/code\u003e\u003c/a\u003e for the type that declared this type component."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isStatic",
      "comment": "Determines if this TypeComponent is static. Return value is undefined for constructors and static initializers.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this type component was declared static; false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isFinal",
      "comment": "Determines if this TypeComponent is final. Return value is undefined for constructors and static initializers.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this type component was declared final; false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSynthetic",
      "comment": "Determines if this TypeComponent is synthetic. Synthetic members are generated by the compiler and are not present in the source code for the containing class. Not all target VMs support this query. See VirtualMachine.canGetSyntheticAttribute() to determine if the operation is supported.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the target VM cannot provide information on synthetic attributes."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this type component is synthetic; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "com.sun.jdi.TypeComponent",
  "comment": "An entity declared within a user defined type (class or interface). This interface is the root of the type component hierarchy which includes \n\u003ca href\u003d\"Field.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eField\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"Method.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eMethod\u003c/code\u003e\u003c/a\u003e. Type components of the same name declared in different classes (including those related by inheritance) have different TypeComponent objects. TypeComponents can be used alone to retrieve static information about their declaration, or can be used in conjunction with a \n\u003ca href\u003d\"ReferenceType.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eReferenceType\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"ObjectReference.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eObjectReference\u003c/code\u003e\u003c/a\u003e to access values or invoke, as applicable.",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}