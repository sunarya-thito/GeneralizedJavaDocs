{
  "packageName": "com.sun.jdi.event",
  "simpleName": "ExceptionEvent",
  "moduleName": "jdk.jdi",
  "type": "INTERFACE",
  "superClass": {
    "name": "com.sun.jdi.event.LocatableEvent",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "com.sun.jdi.ObjectReference",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "exception",
      "comment": "Gets the thrown exception object. The exception object is an instance of Throwable or a subclass in the target VM.",
      "tagMap": {
        "return": [
          "an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/ObjectReference.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eObjectReference\u003c/code\u003e\u003c/a\u003e which mirrors the thrown object in the target VM."
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.jdi.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "catchLocation",
      "comment": "Gets the location where the exception will be caught. An exception is considered to be caught if, at the point of the throw, the current location is dynamically enclosed in a try statement that handles the exception. (See the JVM specification for details). If there is such a try statement, the catch location is the first code index of the appropriate catch clause. If there are native methods in the call stack at the time of the exception, there are important restrictions to note about the returned catch location. In such cases, it is not possible to predict whether an exception will be handled by some native method on the call stack. Thus, it is possible that exceptions considered uncaught here will, in fact, be handled by a native method and not cause termination of the target VM. Furthermore, it cannot be assumed that the catch location returned here will ever be reached by the throwing thread. If there is a native frame between the current location and the catch location, the exception might be handled and cleared in that native method instead. Note that the compiler can generate try-catch blocks in some cases where they are not explicit in the source code; for example, the code generated for synchronized and finally blocks can contain implicit try-catch blocks. If such an implicitly generated try-catch is present on the call stack at the time of the throw, the exception will be considered caught even though it appears to be uncaught from examination of the source code.",
      "tagMap": {
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Location.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e where the exception will be caught or null if the exception is uncaught."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "com.sun.jdi.event.ExceptionEvent",
  "comment": "Notification of an exception in the target VM. When an exception is thrown which satisfies a currently enabled \n\u003ca href\u003d\"../request/ExceptionRequest.html\" title\u003d\"interface in com.sun.jdi.request\"\u003e\u003ccode\u003eexception request\u003c/code\u003e\u003c/a\u003e, an \n\u003ca href\u003d\"EventSet.html\" title\u003d\"interface in com.sun.jdi.event\"\u003e\u003ccode\u003eevent set\u003c/code\u003e\u003c/a\u003e containing an instance of this class will be added to the VM\u0027s event queue. If the exception is thrown from a non-native method, the exception event is generated at the location where the exception is thrown. If the exception is thrown from a native method, the exception event is generated at the first non-native location reached after the exception is thrown.",
  "tagMap": {
    "since": [
      "1.3"
    ]
  }
}