{
  "packageName": "com.sun.jdi",
  "simpleName": "Method",
  "moduleName": "jdk.jdi",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "com.sun.jdi.TypeComponent",
      "type": "Class"
    },
    {
      "name": "com.sun.jdi.Locatable",
      "type": "Class"
    },
    {
      "name": "java.lang.Comparable",
      "parameters": [
        {
          "name": "com.sun.jdi.Method",
          "type": "Class"
        }
      ],
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "returnTypeName",
      "comment": "Returns a text representation of the return type, as specified in the declaration of this method. This type name is always available even if the type has not yet been created or loaded.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e containing the return type name."
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.jdi.Type",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "com.sun.jdi.ClassNotLoadedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "returnType",
      "comment": "Returns the return type, as specified in the declaration of this method. Note: if the return type of this method is a reference type (class, interface, or array) and it has not been created or loaded by the declaring type\u0027s class loader - that is, declaringType() .classLoader(), then ClassNotLoadedException will be thrown. Also, a reference type may have been loaded but not yet prepared, in which case the type will be returned but attempts to perform some operations on the returned type (e.g. fields()) will throw a ClassNotPreparedException. Use ReferenceType.isPrepared() to determine if a reference type is prepared.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Type.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Field.html#type()\"\u003e\u003ccode\u003eField.type() - for usage examples\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/ClassNotLoadedException.html\" title\u003d\"class in com.sun.jdi\"\u003eClassNotLoadedException\u003c/a\u003e\u003c/code\u003e - if the type has not yet been created or loaded through the appropriate class loader."
        ],
        "return": [
          "the return \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Type.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eType\u003c/code\u003e\u003c/a\u003e of this method."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "argumentTypeNames",
      "comment": "Returns a list containing a text representation of the type of each formal parameter of this method. This list is always available even if the types have not yet been created or loaded.",
      "tagMap": {
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eList\u003c/code\u003e\u003c/a\u003e of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eString\u003c/code\u003e\u003c/a\u003e, one List element for each parameter of this method. Each element represents the type of a formal parameter as specified at compile-time. If the formal parameter was declared with an ellipsis, then it is represented as an array of the type before the ellipsis."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.jdi.Type",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "com.sun.jdi.ClassNotLoadedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "argumentTypes",
      "comment": "Returns a list containing the type of each formal parameter of this method. Note: if there is any parameter whose type is a reference type (class, interface, or array) and it has not been created or loaded by the declaring type\u0027s class loader - that is, declaringType() .classLoader(), then ClassNotLoadedException will be thrown. Also, a reference type may have been loaded but not yet prepared, in which case the list will be returned but attempts to perform some operations on the type (e.g. fields()) will throw a ClassNotPreparedException. Use ReferenceType.isPrepared() to determine if a reference type is prepared.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Type.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eType\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/ClassNotLoadedException.html\" title\u003d\"class in com.sun.jdi\"\u003eClassNotLoadedException\u003c/a\u003e\u003c/code\u003e - if the type has not yet been loaded through the appropriate class loader."
        ],
        "return": [
          "return a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eList\u003c/code\u003e\u003c/a\u003e of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Type.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eType\u003c/code\u003e\u003c/a\u003e, one List element for each parameter of this method. Each element represents the type of a formal parameter as specified at compile-time. If the formal parameter was declared with an ellipsis, then it is represented as an array of the type before the ellipsis."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isAbstract",
      "comment": "Determine if this method is abstract.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the method is declared abstract; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDefault",
      "comment": "Determine if this method is a default method",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the method is declared default; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSynchronized",
      "comment": "Determine if this method is synchronized.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the method is declared synchronized; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isNative",
      "comment": "Determine if this method is native.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the method is declared native; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isVarArgs",
      "comment": "Determine if this method accepts a variable number of arguments.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the method accepts a variable number of arguments, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isBridge",
      "comment": "Determine if this method is a bridge method. Bridge methods are defined in The Java Language Specification.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the method is a bridge method, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isConstructor",
      "comment": "Determine if this method is a constructor.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the method is a constructor; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isStaticInitializer",
      "comment": "Determine if this method is a static initializer.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the method is a static initializer; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isObsolete",
      "comment": "Determine if this method is obsolete.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this method has been made obsolete by a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/VirtualMachine.html#redefineClasses(java.util.Map)\"\u003e\u003ccode\u003eVirtualMachine.redefineClasses(java.util.Map\u0026lt;? extends com.sun.jdi.ReferenceType, byte[]\u0026gt;)\u003c/code\u003e\u003c/a\u003e operation."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.jdi.Location",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "com.sun.jdi.AbsentInformationException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "allLineLocations",
      "comment": "Returns a list containing a Location object for each executable source line in this method. This method is equivalent to allLineLocations(vm.getDefaultStratum(),null) - see allLineLocations(String,String) for more information.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/AbsentInformationException.html\" title\u003d\"class in com.sun.jdi\"\u003eAbsentInformationException\u003c/a\u003e\u003c/code\u003e - if there is no line number information for this (non-native, non-abstract) method."
        ],
        "return": [
          "a List of all source line \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Location.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e objects."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.jdi.Location",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "com.sun.jdi.AbsentInformationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "stratum"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sourceName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "allLineLocations",
      "comment": "Returns a list containing a Location object for each executable source line in this method. Each location maps a source line to a range of code indices. The beginning of the range can be determined through Location.codeIndex(). The returned list is ordered by code index (from low to high). The returned list may contain multiple locations for a particular line number, if the compiler and/or VM has mapped that line to two or more disjoint code index ranges. If the method is native or abstract, an empty list is returned. Returned list is for the specified stratum (see Location for a description of strata).",
      "tagMap": {
        "param": [
          "\u003ccode\u003estratum\u003c/code\u003e - The stratum to retrieve information from or \n\u003ccode\u003enull\u003c/code\u003e for the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/ReferenceType.html#defaultStratum()\"\u003e\u003ccode\u003eReferenceType.defaultStratum()\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003esourceName\u003c/code\u003e - Return locations only within this source file or \n\u003ccode\u003enull\u003c/code\u003e to return locations."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/AbsentInformationException.html\" title\u003d\"class in com.sun.jdi\"\u003eAbsentInformationException\u003c/a\u003e\u003c/code\u003e - if there is no line number information for this (non-native, non-abstract) method. Or if \n\u003ci\u003esourceName\u003c/i\u003e is non-\n\u003ccode\u003enull\u003c/code\u003e and source name information is not present."
        ],
        "return": [
          "a List of all source line \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Location.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e objects."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.jdi.Location",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "com.sun.jdi.AbsentInformationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "lineNumber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "locationsOfLine",
      "comment": "Returns a List containing all Location objects that map to the given line number. This method is equivalent to locationsOfLine(vm.getDefaultStratum(), null, lineNumber) - see locationsOfLine(java.lang.String,java.lang.String,int) for more information.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elineNumber\u003c/code\u003e - the line number"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/AbsentInformationException.html\" title\u003d\"class in com.sun.jdi\"\u003eAbsentInformationException\u003c/a\u003e\u003c/code\u003e - if there is no line number information for this method."
        ],
        "return": [
          "a List of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Location.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e objects that map to the given line number."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.jdi.Location",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "com.sun.jdi.AbsentInformationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "stratum"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sourceName"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "lineNumber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "locationsOfLine",
      "comment": "Returns a List containing all Location objects that map to the given line number and source name. Returns a list containing each Location that maps to the given line. The returned list will contain a location for each disjoint range of code indices that have been assigned to the given line by the compiler and/or VM. Each returned location corresponds to the beginning of this range. An empty list will be returned if there is no executable code at the specified line number; specifically, native and abstract methods will always return an empty list. Returned list is for the specified stratum (see Location for a description of strata).",
      "tagMap": {
        "param": [
          "\u003ccode\u003estratum\u003c/code\u003e - the stratum to use for comparing line number and source name, or null to use the default stratum",
          "\u003ccode\u003esourceName\u003c/code\u003e - the source name containing the line number, or null to match all source names",
          "\u003ccode\u003elineNumber\u003c/code\u003e - the line number"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/AbsentInformationException.html\" title\u003d\"class in com.sun.jdi\"\u003eAbsentInformationException\u003c/a\u003e\u003c/code\u003e - if there is no line number information for this method. Or if \n\u003ci\u003esourceName\u003c/i\u003e is non-\n\u003ccode\u003enull\u003c/code\u003e and source name information is not present."
        ],
        "return": [
          "a List of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Location.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e objects that map to the given line number."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.jdi.Location",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "codeIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "locationOfCodeIndex",
      "comment": "Returns a Location for the given code index.",
      "tagMap": {
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Location.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e corresponding to the given code index or null if the specified code index is not a valid code index for this method (native and abstract methods will always return null)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.jdi.LocalVariable",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "com.sun.jdi.AbsentInformationException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "variables",
      "comment": "Returns a list containing each LocalVariable declared in this method. The list includes any variable declared in any scope within the method. It may contain multiple variables of the same name declared within disjoint scopes. Arguments are considered local variables and will be present in the returned list. If local variable information is not available, values of actual arguments to method invocations can be obtained by using the method StackFrame.getArgumentValues()",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/AbsentInformationException.html\" title\u003d\"class in com.sun.jdi\"\u003eAbsentInformationException\u003c/a\u003e\u003c/code\u003e - if there is no variable information for this method. Generally, local variable information is not available for native or abstract methods (that is, their argument name information is not available), thus they will throw this exception."
        ],
        "return": [
          "the list of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/LocalVariable.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eLocalVariable\u003c/code\u003e\u003c/a\u003e objects which mirror local variables declared in this method in the target VM. If there are no local variables, a zero-length list is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.jdi.LocalVariable",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "com.sun.jdi.AbsentInformationException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "variablesByName",
      "comment": "Returns a list containing each LocalVariable of a given name in this method. Multiple variables can be returned if the same variable name is used in disjoint scopes within the method.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/AbsentInformationException.html\" title\u003d\"class in com.sun.jdi\"\u003eAbsentInformationException\u003c/a\u003e\u003c/code\u003e - if there is no variable information for this method. Generally, local variable information is not available for native or abstract methods (that is, their argument name information is not available), thus they will throw this exception."
        ],
        "return": [
          "the list of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/LocalVariable.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eLocalVariable\u003c/code\u003e\u003c/a\u003e objects of the given name. If there are no matching local variables, a zero-length list is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.jdi.LocalVariable",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "com.sun.jdi.AbsentInformationException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "arguments",
      "comment": "Returns a list containing each LocalVariable that is declared as an argument of this method. If local variable information is not available, values of actual arguments to method invocations can be obtained by using the method StackFrame.getArgumentValues()",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/AbsentInformationException.html\" title\u003d\"class in com.sun.jdi\"\u003eAbsentInformationException\u003c/a\u003e\u003c/code\u003e - if there is no variable information for this method. Generally, local variable information is not available for native or abstract methods (that is, their argument name information is not available), thus they will throw this exception."
        ],
        "return": [
          "the list of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/LocalVariable.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eLocalVariable\u003c/code\u003e\u003c/a\u003e arguments. If there are no arguments, a zero-length list is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "bytecodes",
      "comment": "Returns an array containing the bytecodes for this method. Not all target virtual machines support this operation. Use VirtualMachine.canGetBytecodes() to determine if the operation is supported.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the target virtual machine does not support the retrieval of bytecodes."
        ],
        "return": [
          "the array of bytecodes; abstract and native methods will return a zero-length array."
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.jdi.Location",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "location",
      "comment": "Returns the Location of this method, if there is executable code associated with it.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Locatable.html#location()\"\u003elocation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Locatable.html\" title\u003d\"interface in com.sun.jdi\"\u003eLocatable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Location.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eLocation\u003c/code\u003e\u003c/a\u003e of this mirror, or null if this is an abstract method; native methods will return a Location object whose codeIndex is -1."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Compares the specified Object with this method for equality.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "true if the Object is a method and if both mirror the same method (declared in the same class or interface, in the same VM)."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hashCode",
      "comment": "Returns the hash code value for this Method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the integer hash code."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "com.sun.jdi.Method",
  "comment": "A static or instance method in the target VM. See \n\u003ca href\u003d\"TypeComponent.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eTypeComponent\u003c/code\u003e\u003c/a\u003e for general information about Field and Method mirrors.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/ObjectReference.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eObjectReference\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/ReferenceType.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eReferenceType\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}