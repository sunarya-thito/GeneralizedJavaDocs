{
  "packageName": "com.sun.jdi",
  "simpleName": "InterfaceType",
  "moduleName": "jdk.jdi",
  "type": "INTERFACE",
  "superClass": {
    "name": "com.sun.jdi.ReferenceType",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.jdi.InterfaceType",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "superinterfaces",
      "comment": "Gets the interfaces directly extended by this interface. The returned list contains only those interfaces this interface has declared to be extended.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/ClassNotPreparedException.html\" title\u003d\"class in com.sun.jdi\"\u003eClassNotPreparedException\u003c/a\u003e\u003c/code\u003e - if this class not yet been prepared."
        ],
        "return": [
          "a List of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/InterfaceType.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eInterfaceType\u003c/code\u003e\u003c/a\u003e objects each mirroring an interface extended by this interface. If none exist, returns a zero length List."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.jdi.InterfaceType",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subinterfaces",
      "comment": "Gets the currently prepared interfaces which directly extend this interface. The returned list contains only those interfaces that declared this interface in their \"extends\" clause.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a List of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/InterfaceType.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eInterfaceType\u003c/code\u003e\u003c/a\u003e objects each mirroring an interface extending this interface. If none exist, returns a zero length List."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "com.sun.jdi.ClassType",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "implementors",
      "comment": "Gets the currently prepared classes which directly implement this interface. The returned list contains only those classes that declared this interface in their \"implements\" clause.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a List of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/ClassType.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eClassType\u003c/code\u003e\u003c/a\u003e objects each mirroring a class implementing this interface. If none exist, returns a zero length List."
        ]
      }
    },
    {
      "returnType": {
        "name": "com.sun.jdi.Value",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "invokeMethod",
      "comment": "Invokes the specified static Method in the target VM. The specified method must be defined in this interface. The method must be a static method but not a static initializer. The method invocation will occur in the specified thread. Method invocation can occur only if the specified thread has been suspended by an event which occurred in that thread. Method invocation is not supported when the target VM has been suspended through VirtualMachine.suspend() or when the specified thread is suspended through ThreadReference.suspend(). The specified method is invoked with the arguments in the specified argument list. The method invocation is synchronous; this method does not return until the invoked method returns in the target VM. If the invoked method throws an exception, this method will throw an InvocationException which contains a mirror to the exception object thrown. Object arguments must be assignment compatible with the argument type (This implies that the argument type must be loaded through the enclosing class\u0027 class loader). Primitive arguments must be either assignment compatible with the argument type or must be convertible to the argument type without loss of information. If the method being called accepts a variable number of arguments, then the last argument type is an array of some component type. The argument in the matching position can be omitted, or can be null, an array of the same component type, or an argument of the component type followed by any number of other arguments of the same type. If the argument is omitted, then a 0 length array of the component type is passed. The component type can be a primitive type. Autoboxing is not supported. See Section 5.2 of The Java Language Specification for more information on assignment compatibility. By default, all threads in the target VM are resumed while the method is being invoked if they were previously suspended by an event or by VirtualMachine.suspend() or ThreadReference.suspend(). This is done to prevent the deadlocks that will occur if any of the threads own monitors that will be needed by the invoked method. Note, however, that this implicit resume acts exactly like ThreadReference.resume(), so if the thread\u0027s suspend count is greater than 1, it will remain in a suspended state during the invocation and thus a deadlock could still occur. By default, when the invocation completes, all threads in the target VM are suspended, regardless their state before the invocation. It is possible that breakpoints or other events might occur during the invocation. This can cause deadlocks as described above. It can also cause a deadlock if invokeMethod is called from the client\u0027s event handler thread. In this case, this thread will be waiting for the invokeMethod to complete and won\u0027t read the EventSet that comes in for the new event. If this new EventSet is SUSPEND_ALL, then a deadlock will occur because no one will resume the EventSet. To avoid this, all EventRequests should be disabled before doing the invokeMethod, or the invokeMethod should not be done from the client\u0027s event handler thread. The resumption of other threads during the invocation can be prevented by specifying the ClassType.INVOKE_SINGLE_THREADED bit flag in the options argument; however, there is no protection against or recovery from the deadlocks described above, so this option should be used with great caution. Only the specified thread will be resumed (as described for all threads above). Upon completion of a single threaded invoke, the invoking thread will be suspended once again. Note that any threads started during the single threaded invocation will not be suspended when the invocation completes. If the target VM is disconnected during the invoke (for example, through VirtualMachine.dispose()) the method invocation continues.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ethread\u003c/code\u003e - the thread in which to invoke.",
          "\u003ccode\u003emethod\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Method.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eMethod\u003c/code\u003e\u003c/a\u003e to invoke.",
          "\u003ccode\u003earguments\u003c/code\u003e - the list of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Value.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eValue\u003c/code\u003e\u003c/a\u003e arguments bound to the invoked method. Values from the list are assigned to arguments in the order they appear in the method signature.",
          "\u003ccode\u003eoptions\u003c/code\u003e - the integer bit flag options."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the method is not a member of this interface, if the size of the argument list does not match the number of declared arguments for the method, or if the method is not static or is a static initializer.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/ClassNotLoadedException.html\" title\u003d\"class in com.sun.jdi\"\u003eClassNotLoadedException\u003c/a\u003e\u003c/code\u003e - if any argument type has not yet been loaded through the appropriate class loader.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/IncompatibleThreadStateException.html\" title\u003d\"class in com.sun.jdi\"\u003eIncompatibleThreadStateException\u003c/a\u003e\u003c/code\u003e - if the specified thread has not been suspended by an event.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/InvocationException.html\" title\u003d\"class in com.sun.jdi\"\u003eInvocationException\u003c/a\u003e\u003c/code\u003e - if the method invocation resulted in an exception in the target VM.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/InvalidTypeException.html\" title\u003d\"class in com.sun.jdi\"\u003eInvalidTypeException\u003c/a\u003e\u003c/code\u003e - If the arguments do not meet this requirement -- Object arguments must be assignment compatible with the argument type. This implies that the argument type must be loaded through the enclosing class\u0027 class loader. Primitive arguments must be either assignment compatible with the argument type or must be convertible to the argument type without loss of information. See JLS section 5.2 for more information on assignment compatibility.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/VMCannotBeModifiedException.html\" title\u003d\"class in com.sun.jdi\"\u003eVMCannotBeModifiedException\u003c/a\u003e\u003c/code\u003e - if the VirtualMachine is read-only - see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/VirtualMachine.html#canBeModified()\"\u003e\u003ccode\u003eVirtualMachine.canBeModified()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/Value.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eValue\u003c/code\u003e\u003c/a\u003e mirror of the invoked method\u0027s return value."
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "com.sun.jdi.InterfaceType",
  "comment": "A mirror of an interface in the target VM. An InterfaceType is a refinement of \n\u003ca href\u003d\"ReferenceType.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eReferenceType\u003c/code\u003e\u003c/a\u003e that applies to true interfaces in the JLS sense of the definition (not a class, not an array type). An interface type will never be returned by \n\u003ca href\u003d\"ObjectReference.html#referenceType()\"\u003e\u003ccode\u003eObjectReference.referenceType()\u003c/code\u003e\u003c/a\u003e, but it may be in the list of implemented interfaces for a \n\u003ca href\u003d\"ClassType.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eClassType\u003c/code\u003e\u003c/a\u003e that is returned by that method.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jdi/com/sun/jdi/ObjectReference.html\" title\u003d\"interface in com.sun.jdi\"\u003e\u003ccode\u003eObjectReference\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.3"
    ]
  }
}