{
  "packageName": "jdk.security.jarsigner",
  "simpleName": "Builder",
  "moduleName": "jdk.jartool",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "jdk.security.jarsigner.JarSigner$Builder",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "algorithm",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "digestAlgorithm",
      "comment": "Sets the digest algorithm. If no digest algorithm is specified, the default algorithm returned by getDefaultDigestAlgorithm() will be used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard name of the algorithm. See the \n\u003ccode\u003eMessageDigest\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#messagedigest-algorithms\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is not available."
        ],
        "return": [
          "the \n\u003ccode\u003eJarSigner.Builder\u003c/code\u003e itself."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.security.jarsigner.JarSigner$Builder",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "algorithm",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "name": "provider",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "digestAlgorithm",
      "comment": "Sets the digest algorithm from the specified provider. If no digest algorithm is specified, the default algorithm returned by getDefaultDigestAlgorithm() will be used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard name of the algorithm. See the \n\u003ccode\u003eMessageDigest\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#messagedigest-algorithms\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is not available in the specified provider."
        ],
        "return": [
          "the \n\u003ccode\u003eJarSigner.Builder\u003c/code\u003e itself."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.security.jarsigner.JarSigner$Builder",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "algorithm",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "signatureAlgorithm",
      "comment": "Sets the signature algorithm. If no signature algorithm is specified, the default signature algorithm returned by getDefaultSignatureAlgorithm(java.security.PrivateKey) for the private key will be used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard name of the algorithm. See the \n\u003ccode\u003eSignature\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#signature-algorithms\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is not available.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is not compatible with the algorithm of the signer\u0027s private key."
        ],
        "return": [
          "the \n\u003ccode\u003eJarSigner.Builder\u003c/code\u003e itself."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.security.jarsigner.JarSigner$Builder",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "algorithm",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "name": "provider",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "signatureAlgorithm",
      "comment": "Sets the signature algorithm from the specified provider. If no signature algorithm is specified, the default signature algorithm returned by getDefaultSignatureAlgorithm(java.security.PrivateKey) for the private key will be used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard name of the algorithm. See the \n\u003ccode\u003eSignature\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#signature-algorithms\"\u003e Java Cryptography Architecture Standard Algorithm Name Documentation\u003c/a\u003e for information about standard algorithm names.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is not available in the specified provider.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is not compatible with the algorithm of the signer\u0027s private key."
        ],
        "return": [
          "the \n\u003ccode\u003eJarSigner.Builder\u003c/code\u003e itself."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.security.jarsigner.JarSigner$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.URI",
            "type": "Class"
          },
          "name": "uri",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tsa",
      "comment": "Sets the URI of the Time Stamping Authority (TSA).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - the URI."
        ],
        "return": [
          "the \n\u003ccode\u003eJarSigner.Builder\u003c/code\u003e itself."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.security.jarsigner.JarSigner$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "signerName",
      "comment": "Sets the signer name. The name will be used as the base name for the signature files. All lowercase characters will be converted to uppercase for signature file names. If a signer name is not specified, the string \"SIGNER\" will be used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the signer name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is empty or has a size bigger than 8, or it contains characters not from the set \"a-zA-Z0-9_-\"."
        ],
        "return": [
          "the \n\u003ccode\u003eJarSigner.Builder\u003c/code\u003e itself."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.security.jarsigner.JarSigner$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiConsumer",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "handler",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "eventHandler",
      "comment": "Sets en event handler that will be triggered when a JarEntry is to be added, signed, or updated during the signing process. The handler can be used to display signing progress. The first argument of the handler can be \"adding\", \"signing\", or \"updating\", and the second argument is the name of the JarEntry being processed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehandler\u003c/code\u003e - the event handler."
        ],
        "return": [
          "the \n\u003ccode\u003eJarSigner.Builder\u003c/code\u003e itself."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.security.jarsigner.JarSigner$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setProperty",
      "comment": "Sets an additional implementation-specific property indicated by the specified key.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the name of the property.",
          "\u003ccode\u003evalue\u003c/code\u003e - the value of the property."
        ],
        "implNote": [
          "This implementation supports the following properties: \n\u003cul\u003e \n \u003cli\u003e\"tsaDigestAlg\": algorithm of digest data in the timestamping request. The default value is the same as the result of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jartool/jdk/security/jarsigner/JarSigner.Builder.html#getDefaultDigestAlgorithm()\"\u003e\u003ccode\u003egetDefaultDigestAlgorithm()\u003c/code\u003e\u003c/a\u003e. \u003c/li\u003e\n \u003cli\u003e\"tsaPolicyId\": TSAPolicyID for Timestamping Authority. No default value. \u003c/li\u003e\n \u003cli\u003e\"internalsf\": \"true\" if the .SF file is included inside the signature block, \"false\" otherwise. Default \"false\". \u003c/li\u003e\n \u003cli\u003e\"sectionsonly\": \"true\" if the .SF file only contains the hash value for each section of the manifest and not for the whole manifest, \"false\" otherwise. Default \"false\". \u003c/li\u003e\n\u003c/ul\u003e All property names are case-insensitive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the key is not supported by this implementation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value is not accepted as a legal value for this key."
        ],
        "return": [
          "the \n\u003ccode\u003eJarSigner.Builder\u003c/code\u003e itself."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaultDigestAlgorithm",
      "comment": "Gets the default digest algorithm.",
      "annotations": [],
      "tagMap": {
        "implNote": [
          "This implementation returns \"SHA-256\". The value may change in the future."
        ],
        "return": [
          "the default digest algorithm."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.security.PrivateKey",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaultSignatureAlgorithm",
      "comment": "Gets the default signature algorithm for a private key. For example, SHA256withRSA for a 2048-bit RSA key, and SHA384withECDSA for a 384-bit EC key.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the private key."
        ],
        "implNote": [
          "This implementation makes use of comparable strengths as defined in Tables 2 and 3 of NIST SP 800-57 Part 1-Rev.4. Specifically, if a DSA or RSA key with a key size greater than 7680 bits, or an EC key with a key size greater than or equal to 512 bits, SHA-512 will be used as the hash function for the signature. If a DSA or RSA key has a key size greater than 3072 bits, or an EC key has a key size greater than or equal to 384 bits, SHA-384 will be used. Otherwise, SHA-256 will be used. The value may change in the future."
        ],
        "return": [
          "the default signature algorithm. Returns null if a default signature algorithm cannot be found. In this case, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jartool/jdk/security/jarsigner/JarSigner.Builder.html#signatureAlgorithm(java.lang.String)\"\u003e\u003ccode\u003esignatureAlgorithm(java.lang.String)\u003c/code\u003e\u003c/a\u003e must be called to specify a signature algorithm. Otherwise, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jartool/jdk/security/jarsigner/JarSigner.Builder.html#build()\"\u003e\u003ccode\u003ebuild()\u003c/code\u003e\u003c/a\u003e method will throw an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eIllegalArgumentException\u003c/code\u003e\u003c/a\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "jdk.security.jarsigner.JarSigner",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "build",
      "comment": "Builds a JarSigner object from the parameters set by the setter methods. This method does not modify internal state of this Builder object and can be called multiple times to generate multiple JarSigner objects. After this method is called, calling any method on this Builder will have no effect on the newly built JarSigner object.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if a signature algorithm is not set and cannot be derived from the private key using the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/jdk.jartool/jdk/security/jarsigner/JarSigner.Builder.html#getDefaultSignatureAlgorithm(java.security.PrivateKey)\"\u003e\u003ccode\u003egetDefaultSignatureAlgorithm(java.security.PrivateKey)\u003c/code\u003e\u003c/a\u003e method."
        ],
        "return": [
          "the \n\u003ccode\u003eJarSigner\u003c/code\u003e object."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.security.KeyStore$PrivateKeyEntry",
            "type": "Class"
          },
          "name": "entry",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JarSigner.Builder object with a KeyStore.PrivateKeyEntry object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eentry\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStore.PrivateKeyEntry.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eKeyStore.PrivateKeyEntry\u003c/code\u003e\u003c/a\u003e of the signer."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.security.PrivateKey",
            "type": "Class"
          },
          "name": "privateKey",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.cert.CertPath",
            "type": "Class"
          },
          "name": "certPath",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a JarSigner.Builder object with a private key and a certification path.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eprivateKey\u003c/code\u003e - the private key of the signer.",
          "\u003ccode\u003ecertPath\u003c/code\u003e - the certification path of the signer."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecertPath\u003c/code\u003e is empty, or the \n\u003ccode\u003eprivateKey\u003c/code\u003e algorithm does not match the algorithm of the \n\u003ccode\u003ePublicKey\u003c/code\u003e in the end entity certificate (the first certificate in \n\u003ccode\u003ecertPath\u003c/code\u003e)."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "jdk.security.jarsigner.JarSigner$Builder",
  "comment": "A mutable builder class that can create an immutable \n\u003ccode\u003eJarSigner\u003c/code\u003e from various signing-related parameters.",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}