{
  "packageName": "javax.sql",
  "simpleName": "StatementEventListener",
  "moduleName": "java.sql",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.EventListener",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sql.StatementEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "statementClosed",
      "comment": "The driver calls this method on all StatementEventListeners registered on the connection when it detects that a PreparedStatement is closed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - an event object describing the source of the event and that the \n\u003ccode\u003ePreparedStatement\u003c/code\u003e was closed."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sql.StatementEvent",
            "type": "Class"
          },
          "field": {
            "name": "event"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "statementErrorOccurred",
      "comment": "The driver calls this method on all StatementEventListeners registered on the connection when it detects that a PreparedStatement is invalid. The driver calls this method just before it throws the SQLException, contained in the given event, to the application.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eevent\u003c/code\u003e - an event object describing the source of the event, the statement that is invalid and the exception the driver is about to throw. The source of the event is the \n\u003ccode\u003ePooledConnection\u003c/code\u003e which the invalid \n\u003ccode\u003ePreparedStatement\u003c/code\u003e is associated with."
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.sql.StatementEventListener",
  "comment": "An object that registers to be notified of events that occur on PreparedStatements that are in the Statement pool. \n\u003cp\u003e The JDBC 3.0 specification added the maxStatements \u003ccode\u003eConnectionPooledDataSource\u003c/code\u003e property to provide a standard mechanism for enabling the pooling of \u003ccode\u003ePreparedStatements\u003c/code\u003e and to specify the size of the statement pool. However, there was no way for a driver to notify an external statement pool when a \u003ccode\u003ePreparedStatement\u003c/code\u003e becomes invalid. For some databases, a statement becomes invalid if a DDL operation is performed that affects the table. For example an application may create a temporary table to do some work on the table and then destroy it. It may later recreate the same table when it is needed again. Some databases will invalidate any prepared statements that reference the temporary table when the table is dropped. \u003c/p\u003e\n\u003cp\u003e Similar to the methods defined in the \u003ccode\u003eConnectionEventListener\u003c/code\u003e interface, the driver will call the \u003ccode\u003eStatementEventListener.statementErrorOccurred\u003c/code\u003e method prior to throwing any exceptions when it detects a statement is invalid. The driver will also call the \u003ccode\u003eStatementEventListener.statementClosed\u003c/code\u003e method when a \u003ccode\u003ePreparedStatement\u003c/code\u003e is closed. \u003c/p\u003e\n\u003cp\u003e Methods which allow a component to register a StatementEventListener with a \u003ccode\u003ePooledConnection\u003c/code\u003e have been added to the \u003ccode\u003ePooledConnection\u003c/code\u003e interface.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}