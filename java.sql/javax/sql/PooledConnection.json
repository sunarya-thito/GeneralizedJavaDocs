{
  "packageName": "javax.sql",
  "simpleName": "PooledConnection",
  "moduleName": "java.sql",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.sql.Connection",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getConnection",
      "comment": "Creates and returns a Connection object that is a handle for the physical connection that this PooledConnection object represents. The connection pool manager calls this method when an application has called the method DataSource.getConnection and there are no PooledConnection objects available. See the interface description for more information.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003eConnection\u003c/code\u003e object that is a handle to this \n\u003ccode\u003ePooledConnection\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "close",
      "comment": "Closes the physical connection that this PooledConnection object represents. An application never calls this method directly; it is called by the connection pool module, or manager. See the interface description for more information.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sql.ConnectionEventListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addConnectionEventListener",
      "comment": "Registers the given event listener so that it will be notified when an event occurs on this PooledConnection object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/PooledConnection.html#removeConnectionEventListener(javax.sql.ConnectionEventListener)\"\u003e\u003ccode\u003eremoveConnectionEventListener(javax.sql.ConnectionEventListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - a component, usually the connection pool manager, that has implemented the \n\u003ccode\u003eConnectionEventListener\u003c/code\u003e interface and wants to be notified when the connection is closed or has an error"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sql.ConnectionEventListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeConnectionEventListener",
      "comment": "Removes the given event listener from the list of components that will be notified when an event occurs on this PooledConnection object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/PooledConnection.html#addConnectionEventListener(javax.sql.ConnectionEventListener)\"\u003e\u003ccode\u003eaddConnectionEventListener(javax.sql.ConnectionEventListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - a component, usually the connection pool manager, that has implemented the \n\u003ccode\u003eConnectionEventListener\u003c/code\u003e interface and been registered with this \n\u003ccode\u003ePooledConnection\u003c/code\u003e object as a listener"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sql.StatementEventListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addStatementEventListener",
      "comment": "Registers a StatementEventListener with this PooledConnection object. Components that wish to be notified when PreparedStatements created by the connection are closed or are detected to be invalid may use this method to register a StatementEventListener with this PooledConnection object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - an component which implements the \n\u003ccode\u003eStatementEventListener\u003c/code\u003e interface that is to be registered with this \n\u003ccode\u003ePooledConnection\u003c/code\u003e object"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sql.StatementEventListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeStatementEventListener",
      "comment": "Removes the specified StatementEventListener from the list of components that will be notified when the driver detects that a PreparedStatement has been closed or is invalid.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - the component which implements the \n\u003ccode\u003eStatementEventListener\u003c/code\u003e interface that was previously registered with this \n\u003ccode\u003ePooledConnection\u003c/code\u003e object"
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.sql.PooledConnection",
  "comment": "An object that provides hooks for connection pool management. A \n\u003ccode\u003ePooledConnection\u003c/code\u003e object represents a physical connection to a data source. The connection can be recycled rather than being closed when an application is finished with it, thus reducing the number of connections that need to be made. \n\u003cp\u003e An application programmer does not use the \u003ccode\u003ePooledConnection\u003c/code\u003e interface directly; rather, it is used by a middle tier infrastructure that manages the pooling of connections. \u003c/p\u003e\n\u003cp\u003e When an application calls the method \u003ccode\u003eDataSource.getConnection\u003c/code\u003e, it gets back a \u003ccode\u003eConnection\u003c/code\u003e object. If connection pooling is being done, that \u003ccode\u003eConnection\u003c/code\u003e object is actually a handle to a \u003ccode\u003ePooledConnection\u003c/code\u003e object, which is a physical connection. \u003c/p\u003e\n\u003cp\u003e The connection pool manager, typically the application server, maintains a pool of \u003ccode\u003ePooledConnection\u003c/code\u003e objects. If there is a \u003ccode\u003ePooledConnection\u003c/code\u003e object available in the pool, the connection pool manager returns a \u003ccode\u003eConnection\u003c/code\u003e object that is a handle to that physical connection. If no \u003ccode\u003ePooledConnection\u003c/code\u003e object is available, the connection pool manager calls the \u003ccode\u003eConnectionPoolDataSource\u003c/code\u003e method \u003ccode\u003egetPoolConnection\u003c/code\u003e to create a new physical connection. The JDBC driver implementing \u003ccode\u003eConnectionPoolDataSource\u003c/code\u003e creates a new \u003ccode\u003ePooledConnection\u003c/code\u003e object and returns a handle to it. \u003c/p\u003e\n\u003cp\u003e When an application closes a connection, it calls the \u003ccode\u003eConnection\u003c/code\u003e method \u003ccode\u003eclose\u003c/code\u003e. When connection pooling is being done, the connection pool manager is notified because it has registered itself as a \u003ccode\u003eConnectionEventListener\u003c/code\u003e object using the \u003ccode\u003eConnectionPool\u003c/code\u003e method \u003ccode\u003eaddConnectionEventListener\u003c/code\u003e. The connection pool manager deactivates the handle to the \u003ccode\u003ePooledConnection\u003c/code\u003e object and returns the \u003ccode\u003ePooledConnection\u003c/code\u003e object to the pool of connections so that it can be used again. Thus, when an application closes its connection, the underlying physical connection is recycled rather than being closed. \u003c/p\u003e\n\u003cp\u003e If the connection pool manager wraps or provides a proxy to the logical handle returned from a call to \u003ccode\u003ePoolConnection.getConnection\u003c/code\u003e, the pool manager must do one of the following when the connection pool manager closes or returns the \u003ccode\u003ePooledConnection\u003c/code\u003e to the pool in response to the application calling \u003ccode\u003eConnection.close\u003c/code\u003e: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003ecall \u003ccode\u003eendRequest\u003c/code\u003e on the logical \u003ccode\u003eConnection\u003c/code\u003e handle \u003c/li\u003e\n \u003cli\u003ecall \u003ccode\u003eclose\u003c/code\u003e on the logical \u003ccode\u003eConnection\u003c/code\u003e handle \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The physical connection is not closed until the connection pool manager calls the \u003ccode\u003ePooledConnection\u003c/code\u003e method \u003ccode\u003eclose\u003c/code\u003e. This method is generally called to have an orderly shutdown of the server or if a fatal error has made the connection unusable. \u003c/p\u003e\n\u003cp\u003e A connection pool manager is often also a statement pool manager, maintaining a pool of \u003ccode\u003ePreparedStatement\u003c/code\u003e objects. When an application closes a prepared statement, it calls the \u003ccode\u003ePreparedStatement\u003c/code\u003e method \u003ccode\u003eclose\u003c/code\u003e. When \u003ccode\u003eStatement\u003c/code\u003e pooling is being done, the pool manager is notified because it has registered itself as a \u003ccode\u003eStatementEventListener\u003c/code\u003e object using the \u003ccode\u003eConnectionPool\u003c/code\u003e method \u003ccode\u003eaddStatementEventListener\u003c/code\u003e. Thus, when an application closes its \u003ccode\u003ePreparedStatement\u003c/code\u003e, the underlying prepared statement is recycled rather than being closed.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}