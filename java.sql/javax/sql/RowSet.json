{
  "packageName": "javax.sql",
  "simpleName": "RowSet",
  "moduleName": "java.sql",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.sql.ResultSet",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUrl",
      "comment": "Retrieves the url property this RowSet object will use to create a connection if it uses the DriverManager instead of a DataSource object to establish the connection. The default value is null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setUrl(java.lang.String)\"\u003e\u003ccode\u003esetUrl(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "a string url"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setUrl",
      "comment": "Sets the URL this RowSet object will use when it uses the DriverManager to create a connection. Setting this property is optional. If a URL is used, a JDBC driver that accepts the URL must be loaded before the rowset is used to connect to a database. The rowset will use the URL internally to create a database connection when reading or writing data. Either a URL or a data source name is used to create a connection, whichever was set to non null value most recently.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#getUrl()\"\u003e\u003ccode\u003egetUrl()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - a string value; may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDataSourceName",
      "comment": "Retrieves the logical name that identifies the data source for this RowSet object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setDataSourceName(java.lang.String)\"\u003e\u003ccode\u003esetDataSourceName(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setUrl(java.lang.String)\"\u003e\u003ccode\u003esetUrl(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a data source name"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDataSourceName",
      "comment": "Sets the data source name property for this RowSet object to the given String. The value of the data source name property can be used to do a lookup of a DataSource object that has been registered with a naming service. After being retrieved, the DataSource object can be used to create a connection to the data source that it represents.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#getDataSourceName()\"\u003e\u003ccode\u003egetDataSourceName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the logical name of the data source for this \n\u003ccode\u003eRowSet\u003c/code\u003e object; may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUsername",
      "comment": "Retrieves the username used to create a database connection for this RowSet object. The username property is set at run time before calling the method execute. It is not usually part of the serialized state of a RowSet object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setUsername(java.lang.String)\"\u003e\u003ccode\u003esetUsername(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the username property"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setUsername",
      "comment": "Sets the username property for this RowSet object to the given String.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#getUsername()\"\u003e\u003ccode\u003egetUsername()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - a user name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getPassword",
      "comment": "Retrieves the password used to create a database connection. The password property is set at run time before calling the method execute. It is not usually part of the serialized state of a RowSet object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setPassword(java.lang.String)\"\u003e\u003ccode\u003esetPassword(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the password for making a database connection"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "password"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPassword",
      "comment": "Sets the database password for this RowSet object to the given String.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#getPassword()\"\u003e\u003ccode\u003egetPassword()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epassword\u003c/code\u003e - the password string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTransactionIsolation",
      "comment": "Retrieves the transaction isolation level set for this RowSet object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setTransactionIsolation(int)\"\u003e\u003ccode\u003esetTransactionIsolation(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the transaction isolation level; one of \n\u003ccode\u003eConnection.TRANSACTION_READ_UNCOMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_READ_COMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_REPEATABLE_READ\u003c/code\u003e, or \n\u003ccode\u003eConnection.TRANSACTION_SERIALIZABLE\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "level"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTransactionIsolation",
      "comment": "Sets the transaction isolation level for this RowSet object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#getTransactionIsolation()\"\u003e\u003ccode\u003egetTransactionIsolation()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - the transaction isolation level; one of \n\u003ccode\u003eConnection.TRANSACTION_READ_UNCOMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_READ_COMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_REPEATABLE_READ\u003c/code\u003e, or \n\u003ccode\u003eConnection.TRANSACTION_SERIALIZABLE\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTypeMap",
      "comment": "Retrieves the Map object associated with this RowSet object, which specifies the custom mapping of SQL user-defined types, if any. The default is for the type map to be empty.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setTypeMap(java.util.Map)\"\u003e\u003ccode\u003esetTypeMap(java.util.Map\u0026lt;java.lang.String, java.lang.Class\u0026lt;?\u0026gt;\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object containing the names of SQL user-defined types and the Java classes to which they are to be mapped"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "map"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTypeMap",
      "comment": "Installs the given java.util.Map object as the default type map for this RowSet object. This type map will be used unless another type map is supplied as a method parameter.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#getTypeMap()\"\u003e\u003ccode\u003egetTypeMap()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emap\u003c/code\u003e - a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object containing the names of SQL user-defined types and the Java classes to which they are to be mapped"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCommand",
      "comment": "Retrieves this RowSet object\u0027s command property. The command property contains a command string, which must be an SQL query, that can be executed to fill the rowset with data. The default value is null.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setCommand(java.lang.String)\"\u003e\u003ccode\u003esetCommand(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the command string; may be \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "cmd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCommand",
      "comment": "Sets this RowSet object\u0027s command property to the given SQL query. This property is optional when a rowset gets its data from a data source that does not support commands, such as a spreadsheet.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#getCommand()\"\u003e\u003ccode\u003egetCommand()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecmd\u003c/code\u003e - the SQL query that will be used to get the data for this \n\u003ccode\u003eRowSet\u003c/code\u003e object; may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isReadOnly",
      "comment": "Retrieves whether this RowSet object is read-only. If updates are possible, the default is for a rowset to be updatable. Attempts to update a read-only rowset will result in an SQLException being thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setReadOnly(boolean)\"\u003e\u003ccode\u003esetReadOnly(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eRowSet\u003c/code\u003e object is read-only; \n\u003ccode\u003efalse\u003c/code\u003e if it is updatable"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setReadOnly",
      "comment": "Sets whether this RowSet object is read-only to the given boolean.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#isReadOnly()\"\u003e\u003ccode\u003eisReadOnly()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if read-only; \n\u003ccode\u003efalse\u003c/code\u003e if updatable"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxFieldSize",
      "comment": "Retrieves the maximum number of bytes that may be returned for certain column values. This limit applies only to BINARY, VARBINARY, LONGVARBINARYBINARY, CHAR, VARCHAR, LONGVARCHAR, NCHAR and NVARCHAR columns. If the limit is exceeded, the excess data is silently discarded.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setMaxFieldSize(int)\"\u003e\u003ccode\u003esetMaxFieldSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "the current maximum column size limit; zero means that there is no limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "max"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMaxFieldSize",
      "comment": "Sets the maximum number of bytes that can be returned for a column value to the given number of bytes. This limit applies only to BINARY, VARBINARY, LONGVARBINARYBINARY, CHAR, VARCHAR, LONGVARCHAR, NCHAR and NVARCHAR columns. If the limit is exceeded, the excess data is silently discarded. For maximum portability, use values greater than 256.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#getMaxFieldSize()\"\u003e\u003ccode\u003egetMaxFieldSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emax\u003c/code\u003e - the new max column size limit in bytes; zero means unlimited"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxRows",
      "comment": "Retrieves the maximum number of rows that this RowSet object can contain. If the limit is exceeded, the excess rows are silently dropped.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setMaxRows(int)\"\u003e\u003ccode\u003esetMaxRows(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "the current maximum number of rows that this \n\u003ccode\u003eRowSet\u003c/code\u003e object can contain; zero means unlimited"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "max"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMaxRows",
      "comment": "Sets the maximum number of rows that this RowSet object can contain to the specified number. If the limit is exceeded, the excess rows are silently dropped.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#getMaxRows()\"\u003e\u003ccode\u003egetMaxRows()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emax\u003c/code\u003e - the new maximum number of rows; zero means unlimited"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEscapeProcessing",
      "comment": "Retrieves whether escape processing is enabled for this RowSet object. If escape scanning is enabled, which is the default, the driver will do escape substitution before sending an SQL statement to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setEscapeProcessing(boolean)\"\u003e\u003ccode\u003esetEscapeProcessing(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if escape processing is enabled; \n\u003ccode\u003efalse\u003c/code\u003e if it is disabled"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "enable"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setEscapeProcessing",
      "comment": "Sets escape processing for this RowSet object on or off. If escape scanning is on (the default), the driver will do escape substitution before sending an SQL statement to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#getEscapeProcessing()\"\u003e\u003ccode\u003egetEscapeProcessing()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eenable\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to enable escape processing; \n\u003ccode\u003efalse\u003c/code\u003e to disable it"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getQueryTimeout",
      "comment": "Retrieves the maximum number of seconds the driver will wait for a statement to execute. If this limit is exceeded, an SQLException is thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#setQueryTimeout(int)\"\u003e\u003ccode\u003esetQueryTimeout(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "the current query timeout limit in seconds; zero means unlimited"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "seconds"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setQueryTimeout",
      "comment": "Sets the maximum time the driver will wait for a statement to execute to the given number of seconds. If this limit is exceeded, an SQLException is thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#getQueryTimeout()\"\u003e\u003ccode\u003egetQueryTimeout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eseconds\u003c/code\u003e - the new query timeout limit in seconds; zero means that there is no limit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setType",
      "comment": "Sets the type of this RowSet object to the given type. This method is used to change the type of a rowset, which is by default read-only and non-scrollable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getType()\"\u003e\u003ccode\u003eResultSet.getType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - one of the \n\u003ccode\u003eResultSet\u003c/code\u003e constants specifying a type: \n\u003ccode\u003eResultSet.TYPE_FORWARD_ONLY\u003c/code\u003e, \n\u003ccode\u003eResultSet.TYPE_SCROLL_INSENSITIVE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.TYPE_SCROLL_SENSITIVE\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "concurrency"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setConcurrency",
      "comment": "Sets the concurrency of this RowSet object to the given concurrency level. This method is used to change the concurrency level of a rowset, which is by default ResultSet.CONCUR_READ_ONLY",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getConcurrency()\"\u003e\u003ccode\u003eResultSet.getConcurrency()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003econcurrency\u003c/code\u003e - one of the \n\u003ccode\u003eResultSet\u003c/code\u003e constants specifying a concurrency level: \n\u003ccode\u003eResultSet.CONCUR_READ_ONLY\u003c/code\u003e or \n\u003ccode\u003eResultSet.CONCUR_UPDATABLE\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sqlType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNull",
      "comment": "Sets the designated parameter in this RowSet object\u0027s SQL command to SQL NULL. Note: You must specify the parameter\u0027s SQL type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003esqlType\u003c/code\u003e - a SQL type code defined by \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sqlType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNull",
      "comment": "Sets the designated parameter to SQL NULL. Note: You must specify the parameter\u0027s SQL type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - the SQL type code defined in \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "paramIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sqlType"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "typeName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNull",
      "comment": "Sets the designated parameter in this RowSet object\u0027s SQL command to SQL NULL. This version of the method setNull should be used for SQL user-defined types (UDTs) and REF type parameters. Examples of UDTs include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. Note: To be portable, applications must give the SQL type code and the fully qualified SQL type name when specifying a NULL UDT or REF parameter. In the case of a UDT, the name is the type name of the parameter itself. For a REF parameter, the name is the type name of the referenced type. If a JDBC driver does not need the type code or type name information, it may ignore it. Although it is intended for UDT and REF parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the typeName parameter is ignored.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparamIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003esqlType\u003c/code\u003e - a value from \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e",
          "\u003ccode\u003etypeName\u003c/code\u003e - the fully qualified name of an SQL UDT or the type name of the SQL structured type being referenced by a \n\u003ccode\u003eREF\u003c/code\u003e type; ignored if the parameter is not a UDT or \n\u003ccode\u003eREF\u003c/code\u003e type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sqlType"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "typeName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNull",
      "comment": "Sets the designated parameter to SQL NULL. This version of the method setNull should be used for user-defined types and REF type parameters. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. Note: To be portable, applications must give the SQL type code and the fully-qualified SQL type name when specifying a NULL user-defined or REF parameter. In the case of a user-defined type the name is the type name of the parameter itself. For a REF parameter, the name is the type name of the referenced type. If a JDBC driver does not need the type code or type name information, it may ignore it. Although it is intended for user-defined and Ref parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the given typeName is ignored.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - a value from \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e",
          "\u003ccode\u003etypeName\u003c/code\u003e - the fully-qualified name of an SQL user-defined type; ignored if the parameter is not a user-defined type or SQL \n\u003ccode\u003eREF\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBoolean",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given Java boolean value. The driver converts this to an SQL BIT value before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBoolean",
      "comment": "Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT or BOOLEAN value when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getBoolean(int)\"\u003e\u003ccode\u003eResultSet.getBoolean(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setByte",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given Java byte value. The driver converts this to an SQL TINYINT value before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setByte",
      "comment": "Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getByte(int)\"\u003e\u003ccode\u003eResultSet.getByte(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShort",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given Java short value. The driver converts this to an SQL SMALLINT value before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShort",
      "comment": "Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getShort(int)\"\u003e\u003ccode\u003eResultSet.getShort(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setInt",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given Java int value. The driver converts this to an SQL INTEGER value before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setInt",
      "comment": "Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getInt(int)\"\u003e\u003ccode\u003eResultSet.getInt(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLong",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given Java long value. The driver converts this to an SQL BIGINT value before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLong",
      "comment": "Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getLong(int)\"\u003e\u003ccode\u003eResultSet.getLong(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFloat",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given Java float value. The driver converts this to an SQL REAL value before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFloat",
      "comment": "Sets the designated parameter to the given Java float value. The driver converts this to an SQL FLOAT value when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getFloat(int)\"\u003e\u003ccode\u003eResultSet.getFloat(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDouble",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given Java double value. The driver converts this to an SQL DOUBLE value before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDouble",
      "comment": "Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getDouble(int)\"\u003e\u003ccode\u003eResultSet.getDouble(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBigDecimal",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBigDecimal",
      "comment": "Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getBigDecimal(int,int)\"\u003e\u003ccode\u003eResultSet.getBigDecimal(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setString",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given Java String value. Before sending it to the database, the driver converts this to an SQL VARCHAR or LONGVARCHAR value, depending on the argument\u0027s size relative to the driver\u0027s limits on VARCHAR values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setString",
      "comment": "Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument\u0027s size relative to the driver\u0027s limits on VARCHAR values) when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getString(int)\"\u003e\u003ccode\u003eResultSet.getString(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBytes",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given Java array of byte values. Before sending it to the database, the driver converts this to an SQL VARBINARY or LONGVARBINARY value, depending on the argument\u0027s size relative to the driver\u0027s limits on VARBINARY values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBytes",
      "comment": "Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument\u0027s size relative to the driver\u0027s limits on VARBINARY values) when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getBytes(int)\"\u003e\u003ccode\u003eResultSet.getBytes(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Date",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDate",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given java.sql.Date value. The driver converts this to an SQL DATE value before sending it to the database, using the default java.util.Calendar to calculate the date.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Time",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTime",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given java.sql.Time value. The driver converts this to an SQL TIME value before sending it to the database, using the default java.util.Calendar to calculate it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Timestamp",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value before sending it to the database, using the default java.util.Calendar to calculate it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.sql.Timestamp",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getTimestamp(int)\"\u003e\u003ccode\u003eResultSet.getTimestamp(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given java.io.InputStream value. It may be more practical to send a very large ASCII value via a java.io.InputStream rather than as a LONGVARCHAR parameter. The driver will read the data from the stream as needed until it reaches end-of-file. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given java.io.InputStream value. It may be more practical to send a very large binary value via a java.io.InputStream rather than as a LONGVARBINARY parameter. The driver will read the data from the stream as needed until it reaches end-of-file. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given java.io.Reader value. It may be more practical to send a very large UNICODE value via a java.io.Reader rather than as a LONGVARCHAR parameter. The driver will read the data from the stream as needed until it reaches end-of-file. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003eReader\u003c/code\u003e object that contains the UNICODE data to be set",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the UNICODE data used as the designated parameter",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setAsciiStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setAsciiStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBinaryStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBinaryStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setCharacterStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the Unicode data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setCharacterStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the Unicode data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNCharacterStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; if a database access error occurs; or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "targetSqlType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scaleOrLength"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command with the given Java Object. For integral values, the java.lang equivalent objects should be used (for example, an instance of the class Integer for an int). If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength. If the second argument is a Reader then the Reader must contain the number of characters specified by scaleOrLength. If these conditions are not true the driver will generate a SQLException when the prepared statement is executed. The given Java object will be converted to the targetSqlType before being sent to the database. If the object is of a class implementing SQLData, the rowset should call the method SQLData.writeSQL to write the object to an SQLOutput data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass database-specific abstract data types.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e) to be sent to the database. The scale argument may further qualify this type.",
          "\u003ccode\u003escaleOrLength\u003c/code\u003e - for \n\u003ccode\u003ejava.sql.Types.DECIMAL\u003c/code\u003e or \n\u003ccode\u003ejava.sql.Types.NUMERIC types\u003c/code\u003e, this is the number of digits after the decimal point. For Java Object types \n\u003ccode\u003eInputStream\u003c/code\u003e and \n\u003ccode\u003eReader\u003c/code\u003e, this is the length of the data in the stream or \n\u003ccode\u003eReader\u003c/code\u003e. For all other types, this value will be ignored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "targetSqlType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. The second argument must be an object type; for integral values, the java.lang equivalent objects should be used. The given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass database- specific abstract data types.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getObject(int)\"\u003e\u003ccode\u003eResultSet.getObject(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type.",
          "\u003ccode\u003escale\u003c/code\u003e - for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For all other types, this value will be ignored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etargetSqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "targetSqlType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command with a Java Object. For integral values, the java.lang equivalent objects should be used. This method is like setObject above, but the scale used is the scale of the second parameter. Scalar values have a scale of zero. Literal values have the scale present in the literal. Even though it is supported, it is not recommended that this method be called with floating point input values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e) to be sent to the database"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "targetSqlType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. This method is like the method setObject above, except that it assumes a scale of zero.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getObject(int)\"\u003e\u003ccode\u003eResultSet.getObject(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in java.sql.Types) to be sent to the database"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etargetSqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. The second parameter must be of type Object; therefore, the java.lang equivalent objects should be used for built-in types. The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database. Note that this method may be used to pass database- specific abstract data types, by using a driver-specific Java type. If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of the interfaces named above.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getObject(int)\"\u003e\u003ccode\u003eResultSet.getObject(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e or if the given \n\u003ccode\u003eObject\u003c/code\u003e parameter is ambiguous",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command with a Java Object. For integral values, the java.lang equivalent objects should be used. The JDBC specification provides a standard mapping from Java Object types to SQL types. The driver will convert the given Java object to its standard SQL mapping before sending it to the database. Note that this method may be used to pass database-specific abstract data types by using a driver-specific Java type. If the object is of a class implementing SQLData, the rowset should call the method SQLData.writeSQL to write the object to an SQLOutput data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. An exception is thrown if there is an ambiguity, for example, if the object is of a class implementing more than one of these interfaces.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - The first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - The object containing the input parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        },
        {
          "type": {
            "name": "java.sql.Ref",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRef",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command with the given Ref value. The driver will convert this to the appropriate REF(\u003cstructured-type\u003e) value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - an object representing data of an SQL \n\u003ccode\u003eREF\u003c/code\u003e type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        },
        {
          "type": {
            "name": "java.sql.Blob",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command with the given Blob value. The driver will convert this to the BLOB value that the Blob object represents before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - an object representing a BLOB"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "inputStream"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter to a InputStream object. The InputStream must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e, if parameterIndex does not correspond to a parameter marker in the SQL statement, if the length specified is less than zero or if the number of bytes in the \n\u003ccode\u003eInputStream\u003c/code\u003e does not match the specified length.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "inputStream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBlob which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or if parameterIndex does not correspond to a parameter marker in the SQL statement,",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "inputStream"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter to a InputStream object. The InputStream must contain the number of characters specified by length, otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set the second is 2, ...",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement, or if the length specified is less than zero; if the number of bytes in the \n\u003ccode\u003eInputStream\u003c/code\u003e does not match the specified length; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.sql.Blob",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter to the given java.sql.Blob object. The driver converts this to an SQL BLOB value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003eBlob\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eBLOB\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "inputStream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARBINARY or a BLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBlob which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        },
        {
          "type": {
            "name": "java.sql.Clob",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command with the given Clob value. The driver will convert this to the CLOB value that the Clob object represents before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - an object representing a CLOB"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. The Reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e, if parameterIndex does not correspond to a parameter marker in the SQL statement, or if the length specified is less than zero.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setClob which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003eor if parameterIndex does not correspond to a parameter marker in the SQL statement",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. The Reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.sql.Clob",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter to the given java.sql.Clob object. The driver converts this to an SQL CLOB value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003eClob\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eCLOB\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setClob which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        },
        {
          "type": {
            "name": "java.sql.Array",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setArray",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command with the given Array value. The driver will convert this to the ARRAY value that the Array object represents before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - an object representing an SQL array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Date",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "cal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDate",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command with the given java.sql.Date value. The driver will convert this to an SQL DATE value, using the given java.util.Calendar object to calculate the date.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003ejava.util.Calendar\u003c/code\u003e object to use for calculating the date"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.sql.Date",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDate",
      "comment": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application. The driver converts this to an SQL DATE value when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getDate(int)\"\u003e\u003ccode\u003eResultSet.getDate(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.sql.Date",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "cal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDate",
      "comment": "Sets the designated parameter to the given java.sql.Date value, using the given Calendar object. The driver uses the Calendar object to construct an SQL DATE value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the date taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getDate(int)\"\u003e\u003ccode\u003eResultSet.getDate(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the date"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Time",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "cal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTime",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command with the given java.sql.Time value. The driver will convert this to an SQL TIME value, using the given java.util.Calendar object to calculate it, before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003ejava.util.Calendar\u003c/code\u003e object to use for calculating the time"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.sql.Time",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTime",
      "comment": "Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getTime(int)\"\u003e\u003ccode\u003eResultSet.getTime(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.sql.Time",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "cal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTime",
      "comment": "Sets the designated parameter to the given java.sql.Time value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIME value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the time taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getTime(int)\"\u003e\u003ccode\u003eResultSet.getTime(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the time"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Timestamp",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "cal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter in this RowSet object\u0027s command with the given java.sql.Timestamp value. The driver will convert this to an SQL TIMESTAMP value, using the given java.util.Calendar object to calculate it, before sending it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003ejava.util.Calendar\u003c/code\u003e object to use for calculating the timestamp"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.sql.Timestamp",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "cal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIMESTAMP value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the timestamp taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html#getTimestamp(int)\"\u003e\u003ccode\u003eResultSet.getTimestamp(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the timestamp"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clearParameters",
      "comment": "Clears the parameters set for this RowSet object\u0027s command. In general, parameter values remain in force for repeated use of a RowSet object. Setting a parameter value automatically clears its previous value. However, in some cases it is useful to immediately release the resources used by the current parameter values, which can be done by calling the method clearParameters.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "execute",
      "comment": "Fills this RowSet object with data. The execute method may use the following properties to create a connection for reading data: url, data source name, user name, password, transaction isolation, and type map. The execute method may use the following properties to create a statement to execute a command: command, read only, maximum field size, maximum rows, escape processing, and query timeout. If the required properties have not been set, an exception is thrown. If this method is successful, the current contents of the rowset are discarded and the rowset\u0027s metadata is also (re)set. If there are outstanding updates, they are ignored. If this RowSet object does not maintain a continuous connection with its source of data, it may use a Reader (a RowSetReader object) to fill itself with data. In this case, a Reader will have been registered with this RowSet object, and the method execute will call on the Reader\u0027s readData method as part of its implementation.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or any of the properties necessary for making a connection and creating a statement have not been set"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sql.RowSetListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addRowSetListener",
      "comment": "Registers the given listener so that it will be notified of events that occur on this RowSet object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#removeRowSetListener(javax.sql.RowSetListener)\"\u003e\u003ccode\u003eremoveRowSetListener(javax.sql.RowSetListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - a component that has implemented the \n\u003ccode\u003eRowSetListener\u003c/code\u003e interface and wants to be notified when events occur on this \n\u003ccode\u003eRowSet\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.sql.RowSetListener",
            "type": "Class"
          },
          "field": {
            "name": "listener"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeRowSetListener",
      "comment": "Removes the specified listener from the list of components that will be notified when an event occurs on this RowSet object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/RowSet.html#addRowSetListener(javax.sql.RowSetListener)\"\u003e\u003ccode\u003eaddRowSetListener(javax.sql.RowSetListener)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elistener\u003c/code\u003e - a component that has been registered as a listener for this \n\u003ccode\u003eRowSet\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.SQLXML",
            "type": "Class"
          },
          "field": {
            "name": "xmlObject"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSQLXML",
      "comment": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003exmlObject\u003c/code\u003e - a \n\u003ccode\u003eSQLXML\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eXML\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed result set, the \n\u003ccode\u003ejava.xml.transform.Result\u003c/code\u003e, \n\u003ccode\u003eWriter\u003c/code\u003e or \n\u003ccode\u003eOutputStream\u003c/code\u003e has not been closed for the \n\u003ccode\u003eSQLXML\u003c/code\u003e object or if there is an error processing the XML value. The \n\u003ccode\u003egetCause\u003c/code\u003e method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.sql.SQLXML",
            "type": "Class"
          },
          "field": {
            "name": "xmlObject"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSQLXML",
      "comment": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003exmlObject\u003c/code\u003e - a \n\u003ccode\u003eSQLXML\u003c/code\u003e object that maps an \n\u003ccode\u003eSQL XML\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed result set, the \n\u003ccode\u003ejava.xml.transform.Result\u003c/code\u003e, \n\u003ccode\u003eWriter\u003c/code\u003e or \n\u003ccode\u003eOutputStream\u003c/code\u003e has not been closed for the \n\u003ccode\u003eSQLXML\u003c/code\u003e object or if there is an error processing the XML value. The \n\u003ccode\u003egetCause\u003c/code\u003e method of the exception may provide a more detailed exception, for example, if the stream does not contain valid XML."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.RowId",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRowId",
      "comment": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID value when it sends it to the database",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.sql.RowId",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRowId",
      "comment": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNString",
      "comment": "Sets the designated parameter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR value (depending on the argument\u0027s size relative to the driver\u0027s limits on NVARCHAR values) when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNString",
      "comment": "Sets the designated parameter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the column to be set",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the column to be set",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNCharacterStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; if a database access error occurs; or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.sql.NClob",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a java.sql.NClob object. The object implements the java.sql.NClob interface. This NClob object maps to a SQL NCLOB.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the column to be set",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; or if a database access error occurs"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. The Reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "parameterName"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNClob which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. The Reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.NClob",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a java.sql.NClob object. The driver converts this to a SQL NCLOB value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the driver does not support national character sets; if the driver can detect that a data conversion error could occur ; or if a database access error occurs"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNClob which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setURL",
      "comment": "Sets the designated parameter to the given java.net.URL value. The driver converts this to an SQL DATALINK value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003ejava.net.URL\u003c/code\u003e object to be set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "javax.sql.RowSet",
  "comment": "The interface that adds support to the JDBC API for the JavaBeans component model. A rowset, which can be used as a JavaBeans component in a visual Bean development environment, can be created and configured at design time and executed at run time. \n\u003cp\u003e The \u003ccode\u003eRowSet\u003c/code\u003e interface provides a set of JavaBeans properties that allow a \u003ccode\u003eRowSet\u003c/code\u003e instance to be configured to connect to a JDBC data source and read some data from the data source. A group of setter methods (\u003ccode\u003esetInt\u003c/code\u003e, \u003ccode\u003esetBytes\u003c/code\u003e, \u003ccode\u003esetString\u003c/code\u003e, and so on) provide a way to pass input parameters to a rowset\u0027s command property. This command is the SQL query the rowset uses when it gets its data from a relational database, which is generally the case. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eRowSet\u003c/code\u003e interface supports JavaBeans events, allowing other components in an application to be notified when an event occurs on a rowset, such as a change in its value. \u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eRowSet\u003c/code\u003e interface is unique in that it is intended to be implemented using the rest of the JDBC API. In other words, a \u003ccode\u003eRowSet\u003c/code\u003e implementation is a layer of software that executes \"on top\" of a JDBC driver. Implementations of the \u003ccode\u003eRowSet\u003c/code\u003e interface can be provided by anyone, including JDBC driver vendors who want to provide a \u003ccode\u003eRowSet\u003c/code\u003e implementation as part of their JDBC products. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eRowSet\u003c/code\u003e object may make a connection with a data source and maintain that connection throughout its life cycle, in which case it is called a \u003ci\u003econnected\u003c/i\u003e rowset. A rowset may also make a connection with a data source, get data from it, and then close the connection. Such a rowset is called a \u003ci\u003edisconnected\u003c/i\u003e rowset. A disconnected rowset may make changes to its data while it is disconnected and then send the changes back to the original source of the data, but it must reestablish a connection to do so. \u003c/p\u003e\n\u003cp\u003e A disconnected rowset may have a \u003ccode\u003eReader\u003c/code\u003e (a \u003ccode\u003eRowSetReader\u003c/code\u003e object) and a writer (a \u003ccode\u003eRowSetWriter\u003c/code\u003e object) associated with it. The \u003ccode\u003eReader\u003c/code\u003e may be implemented in many different ways to populate a rowset with data, including getting data from a non-relational data source. The writer can also be implemented in many different ways to propagate changes made to the rowset\u0027s data back to the underlying data source. \u003c/p\u003e\n\u003cp\u003e Rowsets are easy to use. The \u003ccode\u003eRowSet\u003c/code\u003e interface extends the standard \u003ccode\u003ejava.sql.ResultSet\u003c/code\u003e interface. The \u003ccode\u003eRowSetMetaData\u003c/code\u003e interface extends the \u003ccode\u003ejava.sql.ResultSetMetaData\u003c/code\u003e interface. Thus, developers familiar with the JDBC API will have to learn a minimal number of new APIs to use rowsets. In addition, third-party software tools that work with JDBC \u003ccode\u003eResultSet\u003c/code\u003e objects will also easily be made to work with rowsets.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}