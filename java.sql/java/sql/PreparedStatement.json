{
  "packageName": "java.sql",
  "simpleName": "PreparedStatement",
  "moduleName": "java.sql",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.sql.Statement",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.sql.ResultSet",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeQuery",
      "comment": "Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs; this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or the SQL statement does not return a \n\u003ccode\u003eResultSet\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eResultSet\u003c/code\u003e object that contains the data produced by the query; never \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeUpdate",
      "comment": "Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs; this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or the SQL statement returns a \n\u003ccode\u003eResultSet\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sqlType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNull",
      "comment": "Sets the designated parameter to SQL NULL. Note: You must specify the parameter\u0027s SQL type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003esqlType\u003c/code\u003e - the SQL type code defined in \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBoolean",
      "comment": "Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT or BOOLEAN value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setByte",
      "comment": "Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShort",
      "comment": "Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setInt",
      "comment": "Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLong",
      "comment": "Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFloat",
      "comment": "Sets the designated parameter to the given Java float value. The driver converts this to an SQL REAL value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDouble",
      "comment": "Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBigDecimal",
      "comment": "Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setString",
      "comment": "Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument\u0027s size relative to the driver\u0027s limits on VARCHAR values) when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBytes",
      "comment": "Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument\u0027s size relative to the driver\u0027s limits on VARBINARY values) when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Date",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDate",
      "comment": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application. The driver converts this to an SQL DATE value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Time",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTime",
      "comment": "Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Timestamp",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setUnicodeStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large Unicode value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from Unicode to the database char format. The byte format of the Unicode stream must be a Java UTF-8, as defined in the Java Virtual Machine Specification. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "1.2"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003ejava.io.InputStream\u003c/code\u003e object that contains the Unicode parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clearParameters",
      "comment": "Clears the current parameter values immediately. In general, parameter values remain in force for repeated use of a statement. Setting a parameter value automatically clears its previous value. However, in some cases it is useful to immediately release the resources used by the current parameter values; this can be done by calling the method clearParameters.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "targetSqlType"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. This method is similar to setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength), except that it assumes a scale of zero.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in java.sql.Types) to be sent to the database"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed PreparedStatement",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified targetSqlType"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter using the given object. The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database. Note that this method may be used to pass database- specific abstract data types, by using a driver-specific Java type. If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, RowId, SQLXML or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note: Not all databases allow for a non-typed Null to be sent to the backend. For maximum portability, the setNull or the setObject(int parameterIndex, Object x, int sqlType) method should be used instead of setObject(int parameterIndex, Object x). Note: This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of the interfaces named above.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or the type of the given object is ambiguous"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "execute",
      "comment": "Executes the SQL statement in this PreparedStatement object, which may be any kind of SQL statement. Some prepared statements return multiple results; the execute method handles these complex statements as well as the simpler form of statements handled by the methods executeQuery and executeUpdate. The execute method returns a boolean to indicate the form of the first result. You must call either the method getResultSet or getUpdateCount to retrieve the result; you must call getMoreResults to move to any subsequent result(s).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#execute(java.lang.String)\"\u003e\u003ccode\u003eStatement.execute(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getResultSet()\"\u003e\u003ccode\u003eStatement.getResultSet()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getUpdateCount()\"\u003e\u003ccode\u003eStatement.getUpdateCount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getMoreResults()\"\u003e\u003ccode\u003eStatement.getMoreResults()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs; this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or an argument is supplied to this method",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the first result is a \n\u003ccode\u003eResultSet\u003c/code\u003e object; \n\u003ccode\u003efalse\u003c/code\u003e if the first result is an update count or there is no result"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addBatch",
      "comment": "Adds a set of parameters to this PreparedStatement object\u0027s batch of commands.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#addBatch(java.lang.String)\"\u003e\u003ccode\u003eStatement.addBatch(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the Unicode data",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Ref",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRef",
      "comment": "Sets the designated parameter to the given REF(\u003cstructured-type\u003e) value. The driver converts this to an SQL REF value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - an SQL \n\u003ccode\u003eREF\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Blob",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter to the given java.sql.Blob object. The driver converts this to an SQL BLOB value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003eBlob\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eBLOB\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Clob",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter to the given java.sql.Clob object. The driver converts this to an SQL CLOB value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003eClob\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eCLOB\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Array",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setArray",
      "comment": "Sets the designated parameter to the given java.sql.Array object. The driver converts this to an SQL ARRAY value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - an \n\u003ccode\u003eArray\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eARRAY\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.ResultSetMetaData",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMetaData",
      "comment": "Retrieves a ResultSetMetaData object that contains information about the columns of the ResultSet object that will be returned when this PreparedStatement object is executed. Because a PreparedStatement object is precompiled, it is possible to know about the ResultSet object that it will return without having to execute it. Consequently, it is possible to invoke the method getMetaData on a PreparedStatement object rather than waiting to execute it and then invoking the ResultSet.getMetaData method on the ResultSet object that is returned. NOTE: Using this method may be expensive for some drivers due to the lack of underlying DBMS support.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the description of a \n\u003ccode\u003eResultSet\u003c/code\u003e object\u0027s columns or \n\u003ccode\u003enull\u003c/code\u003e if the driver cannot return a \n\u003ccode\u003eResultSetMetaData\u003c/code\u003e object"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Date",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "cal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDate",
      "comment": "Sets the designated parameter to the given java.sql.Date value, using the given Calendar object. The driver uses the Calendar object to construct an SQL DATE value, which the driver then sends to the database. With a Calendar object, the driver can calculate the date taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the date"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Time",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "cal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTime",
      "comment": "Sets the designated parameter to the given java.sql.Time value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIME value, which the driver then sends to the database. With a Calendar object, the driver can calculate the time taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the time"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.Timestamp",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "field": {
            "name": "cal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIMESTAMP value, which the driver then sends to the database. With a Calendar object, the driver can calculate the timestamp taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the timestamp"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sqlType"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "typeName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNull",
      "comment": "Sets the designated parameter to SQL NULL. This version of the method setNull should be used for user-defined types and REF type parameters. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. Note: To be portable, applications must give the SQL type code and the fully-qualified SQL type name when specifying a NULL user-defined or REF parameter. In the case of a user-defined type the name is the type name of the parameter itself. For a REF parameter, the name is the type name of the referenced type. If a JDBC driver does not need the type code or type name information, it may ignore it. Although it is intended for user-defined and Ref parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the given typeName is ignored.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003esqlType\u003c/code\u003e - a value from \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e",
          "\u003ccode\u003etypeName\u003c/code\u003e - the fully-qualified name of an SQL user-defined type; ignored if the parameter is not a user-defined type or REF"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setURL",
      "comment": "Sets the designated parameter to the given java.net.URL value. The driver converts this to an SQL DATALINK value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003ejava.net.URL\u003c/code\u003e object to be set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.ParameterMetaData",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getParameterMetaData",
      "comment": "Retrieves the number, types and properties of this PreparedStatement object\u0027s parameters.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ParameterMetaData.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eParameterMetaData\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eParameterMetaData\u003c/code\u003e object that contains information about the number, types and properties for each parameter marker of this \n\u003ccode\u003ePreparedStatement\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.RowId",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRowId",
      "comment": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID value when it sends it to the database",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNString",
      "comment": "Sets the designated parameter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR value (depending on the argument\u0027s size relative to the driver\u0027s limits on NVARCHAR values) when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.NClob",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a java.sql.NClob object. The driver converts this to a SQL NCLOB value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or if the length specified is less than zero.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "inputStream"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter to a InputStream object. The Inputstream must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e; if the length specified is less than zero or if the number of bytes in the \n\u003ccode\u003eInputStream\u003c/code\u003e does not match the specified length.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the PreparedStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.sql.SQLXML",
            "type": "Class"
          },
          "field": {
            "name": "xmlObject"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSQLXML",
      "comment": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003exmlObject\u003c/code\u003e - a \n\u003ccode\u003eSQLXML\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eXML\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or the \n\u003ccode\u003ejava.xml.transform.Result\u003c/code\u003e, \n\u003ccode\u003eWriter\u003c/code\u003e or \n\u003ccode\u003eOutputStream\u003c/code\u003e has not been closed for the \n\u003ccode\u003eSQLXML\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "targetSqlType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scaleOrLength"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength. If the second argument is a Reader then the reader must contain the number of characters specified by scaleOrLength. If these conditions are not true the driver will generate a SQLException when the prepared statement is executed. The given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass database-specific abstract data types.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type.",
          "\u003ccode\u003escaleOrLength\u003c/code\u003e - for \n\u003ccode\u003ejava.sql.Types.DECIMAL\u003c/code\u003e or \n\u003ccode\u003ejava.sql.Types.NUMERIC types\u003c/code\u003e, this is the number of digits after the decimal point. For Java Object types \n\u003ccode\u003eInputStream\u003c/code\u003e and \n\u003ccode\u003eReader\u003c/code\u003e, this is the length of the data in the stream or reader. For all other types, this value will be ignored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or if the Java Object specified by x is an InputStream or Reader object and the value of the scale parameter is less than zero",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified targetSqlType"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the Unicode data",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setAsciiStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBinaryStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setCharacterStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the Unicode data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNCharacterStream which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARCHAR or a CLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setClob which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003eor if parameterIndex does not correspond to a parameter marker in the SQL statement",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "inputStream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBlob which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs; this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or if parameterIndex does not correspond to a parameter marker in the SQL statement,",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "reader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGNVARCHAR or a NCLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNClob which takes a length parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "java.sql.SQLType",
            "type": "Class"
          },
          "field": {
            "name": "targetSqlType"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scaleOrLength"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength. If the second argument is a Reader then the reader must contain the number of characters specified by scaleOrLength. If these conditions are not true the driver will generate a SQLException when the prepared statement is executed. The given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass database-specific abstract data types. The default implementation will throw SQLFeatureNotSupportedException",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/JDBCType.html\" title\u003d\"enum class in java.sql\"\u003e\u003ccode\u003eJDBCType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLType.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSQLType\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type to be sent to the database. The scale argument may further qualify this type.",
          "\u003ccode\u003escaleOrLength\u003c/code\u003e - for \n\u003ccode\u003ejava.sql.JDBCType.DECIMAL\u003c/code\u003e or \n\u003ccode\u003ejava.sql.JDBCType.NUMERIC types\u003c/code\u003e, this is the number of digits after the decimal point. For Java Object types \n\u003ccode\u003eInputStream\u003c/code\u003e and \n\u003ccode\u003eReader\u003c/code\u003e, this is the length of the data in the stream or reader. For all other types, this value will be ignored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or if the Java Object specified by x is an InputStream or Reader object and the value of the scale parameter is less than zero",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified targetSqlType"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "parameterIndex"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "java.sql.SQLType",
            "type": "Class"
          },
          "field": {
            "name": "targetSqlType"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. This method is similar to setObject(int parameterIndex, Object x, SQLType targetSqlType, int scaleOrLength), except that it assumes a scale of zero. The default implementation will throw SQLFeatureNotSupportedException",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/JDBCType.html\" title\u003d\"enum class in java.sql\"\u003e\u003ccode\u003eJDBCType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLType.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSQLType\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ...",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type to be sent to the database"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterIndex does not correspond to a parameter marker in the SQL statement; if a database access error occurs or this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified targetSqlType"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeLargeUpdate",
      "comment": "Executes the SQL statement in this PreparedStatement object, which must be an SQL Data Manipulation Language (DML) statement, such as INSERT, UPDATE or DELETE; or an SQL statement that returns nothing, such as a DDL statement. This method should be used when the returned row count may exceed Integer.MAX_VALUE. The default implementation will throw UnsupportedOperationException",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs; this method is called on a closed \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or the SQL statement returns a \n\u003ccode\u003eResultSet\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.sql.PreparedStatement",
  "comment": "An object that represents a precompiled SQL statement. \n\u003cp\u003eA SQL statement is precompiled and stored in a \u003ccode\u003ePreparedStatement\u003c/code\u003e object. This object can then be used to efficiently execute this statement multiple times. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e The setter methods (\u003ccode\u003esetShort\u003c/code\u003e, \u003ccode\u003esetString\u003c/code\u003e, and so on) for setting IN parameter values must specify types that are compatible with the defined SQL type of the input parameter. For instance, if the IN parameter has SQL type \u003ccode\u003eINTEGER\u003c/code\u003e, then the method \u003ccode\u003esetInt\u003c/code\u003e should be used. \u003c/p\u003e\n\u003cp\u003eIf arbitrary parameter type conversions are required, the method \u003ccode\u003esetObject\u003c/code\u003e should be used with a target SQL type. \u003c/p\u003e\n\u003cp\u003e In the following example of setting a parameter, \u003ccode\u003econ\u003c/code\u003e represents an active connection: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n   BigDecimal sal \u003d new BigDecimal(\"153833.00\");\n   PreparedStatement pstmt \u003d con.prepareStatement(\"UPDATE EMPLOYEES\n                                     SET SALARY \u003d ? WHERE ID \u003d ?\");\n   pstmt.setBigDecimal(1, sal);\n   pstmt.setInt(2, 110592);\n \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#prepareStatement(java.lang.String)\"\u003e\u003ccode\u003eConnection.prepareStatement(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eResultSet\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}