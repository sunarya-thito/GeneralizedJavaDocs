{
  "packageName": "java.sql",
  "simpleName": "Statement",
  "moduleName": "java.sql",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.sql.Wrapper",
      "type": "Class"
    },
    {
      "name": "java.lang.AutoCloseable",
      "type": "Class"
    }
  ],
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CLOSE_CURRENT_RESULT",
      "comment": "The constant indicating that the current ResultSet object should be closed when calling getMoreResults.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Statement.CLOSE_CURRENT_RESULT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "KEEP_CURRENT_RESULT",
      "comment": "The constant indicating that the current ResultSet object should not be closed when calling getMoreResults.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Statement.KEEP_CURRENT_RESULT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CLOSE_ALL_RESULTS",
      "comment": "The constant indicating that all ResultSet objects that have previously been kept open should be closed when calling getMoreResults.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Statement.CLOSE_ALL_RESULTS\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "SUCCESS_NO_INFO",
      "comment": "The constant indicating that a batch statement executed successfully but that no count of the number of rows it affected is available.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Statement.SUCCESS_NO_INFO\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "EXECUTE_FAILED",
      "comment": "The constant indicating that an error occurred while executing a batch statement.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Statement.EXECUTE_FAILED\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "RETURN_GENERATED_KEYS",
      "comment": "The constant indicating that generated keys should be made available for retrieval.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Statement.RETURN_GENERATED_KEYS\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "NO_GENERATED_KEYS",
      "comment": "The constant indicating that generated keys should not be made available for retrieval.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Statement.NO_GENERATED_KEYS\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.ResultSet",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeQuery",
      "comment": "Executes the given SQL statement, which returns a single ResultSet object. Note:This method cannot be called on a PreparedStatement or CallableStatement.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL statement to be sent to the database, typically a static SQL \n\u003ccode\u003eSELECT\u003c/code\u003e statement"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the given SQL statement produces anything other than a single \n\u003ccode\u003eResultSet\u003c/code\u003e object, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eResultSet\u003c/code\u003e object that contains the data produced by the given query; never \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeUpdate",
      "comment": "Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement. Note:This method cannot be called on a PreparedStatement or CallableStatement.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL Data Manipulation Language (DML) statement, such as \n\u003ccode\u003eINSERT\u003c/code\u003e, \n\u003ccode\u003eUPDATE\u003c/code\u003e or \n\u003ccode\u003eDELETE\u003c/code\u003e; or an SQL statement that returns nothing, such as a DDL statement."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the given SQL statement produces a \n\u003ccode\u003eResultSet\u003c/code\u003e object, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "close",
      "comment": "Releases this Statement object\u0027s database and JDBC resources immediately instead of waiting for this to happen when it is automatically closed. It is generally good practice to release resources as soon as you are finished with them to avoid tying up database resources. Calling the method close on a Statement object that is already closed has no effect. Note:When a Statement object is closed, its current ResultSet object, if one exists, is also closed.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxFieldSize",
      "comment": "Retrieves the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object. This limit applies only to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, NCHAR, NVARCHAR, LONGNVARCHAR and LONGVARCHAR columns. If the limit is exceeded, the excess data is silently discarded.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#setMaxFieldSize(int)\"\u003e\u003ccode\u003esetMaxFieldSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "the current column size limit for columns storing character and binary values; zero means there is no limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "max"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMaxFieldSize",
      "comment": "Sets the limit for the maximum number of bytes that can be returned for character and binary column values in a ResultSet object produced by this Statement object. This limit applies only to BINARY, VARBINARY, LONGVARBINARY, CHAR, VARCHAR, NCHAR, NVARCHAR, LONGNVARCHAR and LONGVARCHAR fields. If the limit is exceeded, the excess data is silently discarded. For maximum portability, use values greater than 256.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getMaxFieldSize()\"\u003e\u003ccode\u003egetMaxFieldSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emax\u003c/code\u003e - the new column size limit in bytes; zero means there is no limit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e or the condition \n\u003ccode\u003emax \u0026gt;\u003d 0\u003c/code\u003e is not satisfied"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMaxRows",
      "comment": "Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain. If this limit is exceeded, the excess rows are silently dropped.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#setMaxRows(int)\"\u003e\u003ccode\u003esetMaxRows(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "the current maximum number of rows for a \n\u003ccode\u003eResultSet\u003c/code\u003e object produced by this \n\u003ccode\u003eStatement\u003c/code\u003e object; zero means there is no limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "max"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setMaxRows",
      "comment": "Sets the limit for the maximum number of rows that any ResultSet object generated by this Statement object can contain to the given number. If the limit is exceeded, the excess rows are silently dropped.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getMaxRows()\"\u003e\u003ccode\u003egetMaxRows()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emax\u003c/code\u003e - the new max rows limit; zero means there is no limit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e or the condition \n\u003ccode\u003emax \u0026gt;\u003d 0\u003c/code\u003e is not satisfied"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "enable"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setEscapeProcessing",
      "comment": "Sets escape processing on or off. If escape scanning is on (the default), the driver will do escape substitution before sending the SQL statement to the database. The Connection and DataSource property escapeProcessing may be used to change the default escape processing behavior. A value of true (the default) enables escape Processing for all Statement objects. A value of false disables escape processing for all Statement objects. The setEscapeProcessing method may be used to specify the escape processing behavior for an individual Statement object. Note: Since prepared statements have usually been parsed prior to making this call, disabling escape processing for PreparedStatements objects will have no effect.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eenable\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to enable escape processing; \n\u003ccode\u003efalse\u003c/code\u003e to disable it"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getQueryTimeout",
      "comment": "Retrieves the number of seconds the driver will wait for a Statement object to execute. If the limit is exceeded, a SQLException is thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#setQueryTimeout(int)\"\u003e\u003ccode\u003esetQueryTimeout(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "the current query timeout limit in seconds; zero means there is no limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "seconds"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setQueryTimeout",
      "comment": "Sets the number of seconds the driver will wait for a Statement object to execute to the given number of seconds. By default there is no limit on the amount of time allowed for a running statement to complete. If the limit is exceeded, an SQLTimeoutException is thrown. A JDBC driver must apply this limit to the execute, executeQuery and executeUpdate methods. Note: JDBC driver implementations may also apply this limit to ResultSet methods (consult your driver vendor documentation for details). Note: In the case of Statement batching, it is implementation defined as to whether the time-out is applied to individual SQL commands added via the addBatch method or to the entire batch of SQL commands invoked by the executeBatch method (consult your driver vendor documentation for details).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getQueryTimeout()\"\u003e\u003ccode\u003egetQueryTimeout()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eseconds\u003c/code\u003e - the new query timeout limit in seconds; zero means there is no limit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e or the condition \n\u003ccode\u003eseconds \u0026gt;\u003d 0\u003c/code\u003e is not satisfied"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "cancel",
      "comment": "Cancels this Statement object if both the DBMS and driver support aborting an SQL statement. This method can be used by one thread to cancel a statement that is being executed by another thread.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.SQLWarning",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWarnings",
      "comment": "Retrieves the first warning reported by calls on this Statement object. Subsequent Statement object warnings will be chained to this SQLWarning object. The warning chain is automatically cleared each time a statement is (re)executed. This method may not be called on a closed Statement object; doing so will cause an SQLException to be thrown. Note: If you are processing a ResultSet object, any warnings associated with reads on that ResultSet object will be chained on it rather than on the Statement object that produced it.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "the first \n\u003ccode\u003eSQLWarning\u003c/code\u003e object or \n\u003ccode\u003enull\u003c/code\u003e if there are no warnings"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clearWarnings",
      "comment": "Clears all the warnings reported on this Statement object. After a call to this method, the method getWarnings will return null until a new warning is reported for this Statement object.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCursorName",
      "comment": "Sets the SQL cursor name to the given String, which will be used by subsequent Statement object execute methods. This name can then be used in SQL positioned update or delete statements to identify the current row in the ResultSet object generated by this statement. If the database does not support positioned update/delete, this method is a noop. To insure that a cursor has the proper isolation level to support updates, the cursor\u0027s SELECT statement should have the form SELECT FOR UPDATE. If FOR UPDATE is not present, positioned updates may fail. Note: By definition, the execution of positioned updates and deletes must be done by a different Statement object than the one that generated the ResultSet object being used for positioning. Also, cursor names must be unique within a connection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the new cursor name, which must be unique within a connection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "execute",
      "comment": "Executes the given SQL statement, which may return multiple results. In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s). Note:This method cannot be called on a PreparedStatement or CallableStatement.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getResultSet()\"\u003e\u003ccode\u003egetResultSet()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getUpdateCount()\"\u003e\u003ccode\u003egetUpdateCount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getMoreResults()\"\u003e\u003ccode\u003egetMoreResults()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - any SQL statement"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the first result is a \n\u003ccode\u003eResultSet\u003c/code\u003e object; \n\u003ccode\u003efalse\u003c/code\u003e if it is an update count or there are no results"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.ResultSet",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getResultSet",
      "comment": "Retrieves the current result as a ResultSet object. This method should be called only once per result.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#execute(java.lang.String)\"\u003e\u003ccode\u003eexecute(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "the current result as a \n\u003ccode\u003eResultSet\u003c/code\u003e object or \n\u003ccode\u003enull\u003c/code\u003e if the result is an update count or there are no more results"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUpdateCount",
      "comment": "Retrieves the current result as an update count; if the result is a ResultSet object or there are no more results, -1 is returned. This method should be called only once per result.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#execute(java.lang.String)\"\u003e\u003ccode\u003eexecute(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "the current result as an update count; -1 if the current result is a \n\u003ccode\u003eResultSet\u003c/code\u003e object or there are no more results"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMoreResults",
      "comment": "Moves to this Statement object\u0027s next result, returns true if it is a ResultSet object, and implicitly closes any current ResultSet object(s) obtained with the method getResultSet. There are no more results when the following is true: \n     // stmt is a Statement object\n     ((stmt.getMoreResults() \u003d\u003d false) \u0026\u0026 (stmt.getUpdateCount() \u003d\u003d -1))",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#execute(java.lang.String)\"\u003e\u003ccode\u003eexecute(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the next result is a \n\u003ccode\u003eResultSet\u003c/code\u003e object; \n\u003ccode\u003efalse\u003c/code\u003e if it is an update count or there are no more results"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "direction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFetchDirection",
      "comment": "Gives the driver a hint as to the direction in which rows will be processed in ResultSet objects created using this Statement object. The default value is ResultSet.FETCH_FORWARD. Note that this method sets the default fetch direction for result sets generated by this Statement object. Each result set has its own methods for getting and setting its own fetch direction.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getFetchDirection()\"\u003e\u003ccode\u003egetFetchDirection()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edirection\u003c/code\u003e - the initial direction for processing rows"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e or the given direction is not one of \n\u003ccode\u003eResultSet.FETCH_FORWARD\u003c/code\u003e, \n\u003ccode\u003eResultSet.FETCH_REVERSE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.FETCH_UNKNOWN\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFetchDirection",
      "comment": "Retrieves the direction for fetching rows from database tables that is the default for result sets generated from this Statement object. If this Statement object has not set a fetch direction by calling the method setFetchDirection, the return value is implementation-specific.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#setFetchDirection(int)\"\u003e\u003ccode\u003esetFetchDirection(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "the default fetch direction for result sets generated from this \n\u003ccode\u003eStatement\u003c/code\u003e object"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rows"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFetchSize",
      "comment": "Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for ResultSet objects generated by this Statement. If the value specified is zero, then the hint is ignored. The default value is zero.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getFetchSize()\"\u003e\u003ccode\u003egetFetchSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erows\u003c/code\u003e - the number of rows to fetch"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e or the condition \n\u003ccode\u003erows \u0026gt;\u003d 0\u003c/code\u003e is not satisfied."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFetchSize",
      "comment": "Retrieves the number of result set rows that is the default fetch size for ResultSet objects generated from this Statement object. If this Statement object has not set a fetch size by calling the method setFetchSize, the return value is implementation-specific.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#setFetchSize(int)\"\u003e\u003ccode\u003esetFetchSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "the default fetch size for result sets generated from this \n\u003ccode\u003eStatement\u003c/code\u003e object"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getResultSetConcurrency",
      "comment": "Retrieves the result set concurrency for ResultSet objects generated by this Statement object.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either \n\u003ccode\u003eResultSet.CONCUR_READ_ONLY\u003c/code\u003e or \n\u003ccode\u003eResultSet.CONCUR_UPDATABLE\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getResultSetType",
      "comment": "Retrieves the result set type for ResultSet objects generated by this Statement object.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "one of \n\u003ccode\u003eResultSet.TYPE_FORWARD_ONLY\u003c/code\u003e, \n\u003ccode\u003eResultSet.TYPE_SCROLL_INSENSITIVE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.TYPE_SCROLL_SENSITIVE\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addBatch",
      "comment": "Adds the given SQL command to the current list of commands for this Statement object. The commands in this list can be executed as a batch by calling the method executeBatch. Note:This method cannot be called on a PreparedStatement or CallableStatement.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#executeBatch()\"\u003e\u003ccode\u003eexecuteBatch()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/DatabaseMetaData.html#supportsBatchUpdates()\"\u003e\u003ccode\u003eDatabaseMetaData.supportsBatchUpdates()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - typically this is a SQL \n\u003ccode\u003eINSERT\u003c/code\u003e or \n\u003ccode\u003eUPDATE\u003c/code\u003e statement"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the driver does not support batch updates, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clearBatch",
      "comment": "Empties this Statement object\u0027s current list of SQL commands.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#addBatch(java.lang.String)\"\u003e\u003ccode\u003eaddBatch(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/DatabaseMetaData.html#supportsBatchUpdates()\"\u003e\u003ccode\u003eDatabaseMetaData.supportsBatchUpdates()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e or the driver does not support batch updates"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeBatch",
      "comment": "Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts. The int elements of the array that is returned are ordered to correspond to the commands in the batch, which are ordered according to the order in which they were added to the batch. The elements in the array returned by the method executeBatch may be one of the following: A number greater than or equal to zero -- indicates that the command was processed successfully and is an update count giving the number of rows in the database that were affected by the command\u0027s execution A value of SUCCESS_NO_INFO -- indicates that the command was processed successfully but that the number of rows affected is unknown If one of the commands in a batch update fails to execute properly, this method throws a BatchUpdateException, and a JDBC driver may or may not continue to process the remaining commands in the batch. However, the driver\u0027s behavior must be consistent with a particular DBMS, either always continuing to process commands or never continuing to process commands. If the driver continues processing after a failure, the array returned by the method BatchUpdateException.getUpdateCounts will contain as many elements as there are commands in the batch, and at least one of the elements will be the following: A value of EXECUTE_FAILED -- indicates that the command failed to execute successfully and occurs only if a driver continues to process commands after a command fails The possible implementations and return values have been modified in the Java 2 SDK, Standard Edition, version 1.3 to accommodate the option of continuing to process commands in a batch update after a BatchUpdateException object has been thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#addBatch(java.lang.String)\"\u003e\u003ccode\u003eaddBatch(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/DatabaseMetaData.html#supportsBatchUpdates()\"\u003e\u003ccode\u003eDatabaseMetaData.supportsBatchUpdates()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e or the driver does not support batch statements. Throws \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/BatchUpdateException.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eBatchUpdateException\u003c/code\u003e\u003c/a\u003e (a subclass of \n\u003ccode\u003eSQLException\u003c/code\u003e) if one of the commands sent to the database fails to execute properly or attempts to return a result set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "an array of update counts containing one element for each command in the batch. The elements of the array are ordered according to the order in which commands were added to the batch."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Connection",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getConnection",
      "comment": "Retrieves the Connection object that produced this Statement object.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "the connection that produced this statement"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "current"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMoreResults",
      "comment": "Moves to this Statement object\u0027s next result, deals with any current ResultSet object(s) according to the instructions specified by the given flag, and returns true if the next result is a ResultSet object. There are no more results when the following is true: \n     // stmt is a Statement object\n     ((stmt.getMoreResults(current) \u003d\u003d false) \u0026\u0026 (stmt.getUpdateCount() \u003d\u003d -1))",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#execute(java.lang.String)\"\u003e\u003ccode\u003eexecute(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecurrent\u003c/code\u003e - one of the following \n\u003ccode\u003eStatement\u003c/code\u003e constants indicating what should happen to current \n\u003ccode\u003eResultSet\u003c/code\u003e objects obtained using the method \n\u003ccode\u003egetResultSet\u003c/code\u003e: \n\u003ccode\u003eStatement.CLOSE_CURRENT_RESULT\u003c/code\u003e, \n\u003ccode\u003eStatement.KEEP_CURRENT_RESULT\u003c/code\u003e, or \n\u003ccode\u003eStatement.CLOSE_ALL_RESULTS\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e or the argument supplied is not one of the following: \n\u003ccode\u003eStatement.CLOSE_CURRENT_RESULT\u003c/code\u003e, \n\u003ccode\u003eStatement.KEEP_CURRENT_RESULT\u003c/code\u003e or \n\u003ccode\u003eStatement.CLOSE_ALL_RESULTS\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eDatabaseMetaData.supportsMultipleOpenResults\u003c/code\u003e returns \n\u003ccode\u003efalse\u003c/code\u003e and either \n\u003ccode\u003eStatement.KEEP_CURRENT_RESULT\u003c/code\u003e or \n\u003ccode\u003eStatement.CLOSE_ALL_RESULTS\u003c/code\u003e are supplied as the argument."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the next result is a \n\u003ccode\u003eResultSet\u003c/code\u003e object; \n\u003ccode\u003efalse\u003c/code\u003e if it is an update count or there are no more results"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.ResultSet",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGeneratedKeys",
      "comment": "Retrieves any auto-generated keys created as a result of executing this Statement object. If this Statement object did not generate any keys, an empty ResultSet object is returned. Note:If the columns which represent the auto-generated keys were not specified, the JDBC driver implementation will determine the columns which best represent the auto-generated keys.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003eResultSet\u003c/code\u003e object containing the auto-generated key(s) generated by the execution of this \n\u003ccode\u003eStatement\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "autoGeneratedKeys"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeUpdate",
      "comment": "Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval. The driver will ignore the flag if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). Note:This method cannot be called on a PreparedStatement or CallableStatement.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL Data Manipulation Language (DML) statement, such as \n\u003ccode\u003eINSERT\u003c/code\u003e, \n\u003ccode\u003eUPDATE\u003c/code\u003e or \n\u003ccode\u003eDELETE\u003c/code\u003e; or an SQL statement that returns nothing, such as a DDL statement.",
          "\u003ccode\u003eautoGeneratedKeys\u003c/code\u003e - a flag indicating whether auto-generated keys should be made available for retrieval; one of the following constants: \n\u003ccode\u003eStatement.RETURN_GENERATED_KEYS\u003c/code\u003e \n\u003ccode\u003eStatement.NO_GENERATED_KEYS\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the given SQL statement returns a \n\u003ccode\u003eResultSet\u003c/code\u003e object, the given constant is not one of those allowed, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method with a constant of Statement.RETURN_GENERATED_KEYS",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "columnIndexes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeUpdate",
      "comment": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). Note:This method cannot be called on a PreparedStatement or CallableStatement.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL Data Manipulation Language (DML) statement, such as \n\u003ccode\u003eINSERT\u003c/code\u003e, \n\u003ccode\u003eUPDATE\u003c/code\u003e or \n\u003ccode\u003eDELETE\u003c/code\u003e; or an SQL statement that returns nothing, such as a DDL statement.",
          "\u003ccode\u003ecolumnIndexes\u003c/code\u003e - an array of column indexes indicating the columns that should be returned from the inserted row"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the SQL statement returns a \n\u003ccode\u003eResultSet\u003c/code\u003e object,the second argument supplied to this method is not an \n\u003ccode\u003eint\u003c/code\u003e array whose elements are valid column indexes, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "columnNames"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeUpdate",
      "comment": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the names of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). Note:This method cannot be called on a PreparedStatement or CallableStatement.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL Data Manipulation Language (DML) statement, such as \n\u003ccode\u003eINSERT\u003c/code\u003e, \n\u003ccode\u003eUPDATE\u003c/code\u003e or \n\u003ccode\u003eDELETE\u003c/code\u003e; or an SQL statement that returns nothing, such as a DDL statement.",
          "\u003ccode\u003ecolumnNames\u003c/code\u003e - an array of the names of the columns that should be returned from the inserted row"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the SQL statement returns a \n\u003ccode\u003eResultSet\u003c/code\u003e object, the second argument supplied to this method is not a \n\u003ccode\u003eString\u003c/code\u003e array whose elements are valid column names, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either the row count for \n\u003ccode\u003eINSERT\u003c/code\u003e, \n\u003ccode\u003eUPDATE\u003c/code\u003e, or \n\u003ccode\u003eDELETE\u003c/code\u003e statements, or 0 for SQL statements that return nothing"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "autoGeneratedKeys"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "execute",
      "comment": "Executes the given SQL statement, which may return multiple results, and signals the driver that any auto-generated keys should be made available for retrieval. The driver will ignore this signal if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s). Note:This method cannot be called on a PreparedStatement or CallableStatement.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getResultSet()\"\u003e\u003ccode\u003egetResultSet()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getUpdateCount()\"\u003e\u003ccode\u003egetUpdateCount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getMoreResults()\"\u003e\u003ccode\u003egetMoreResults()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getGeneratedKeys()\"\u003e\u003ccode\u003egetGeneratedKeys()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - any SQL statement",
          "\u003ccode\u003eautoGeneratedKeys\u003c/code\u003e - a constant indicating whether auto-generated keys should be made available for retrieval using the method \n\u003ccode\u003egetGeneratedKeys\u003c/code\u003e; one of the following constants: \n\u003ccode\u003eStatement.RETURN_GENERATED_KEYS\u003c/code\u003e or \n\u003ccode\u003eStatement.NO_GENERATED_KEYS\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the second parameter supplied to this method is not \n\u003ccode\u003eStatement.RETURN_GENERATED_KEYS\u003c/code\u003e or \n\u003ccode\u003eStatement.NO_GENERATED_KEYS\u003c/code\u003e, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method with a constant of Statement.RETURN_GENERATED_KEYS",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the first result is a \n\u003ccode\u003eResultSet\u003c/code\u003e object; \n\u003ccode\u003efalse\u003c/code\u003e if it is an update count or there are no results"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "columnIndexes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "execute",
      "comment": "Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). Under some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s). Note:This method cannot be called on a PreparedStatement or CallableStatement.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getResultSet()\"\u003e\u003ccode\u003egetResultSet()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getUpdateCount()\"\u003e\u003ccode\u003egetUpdateCount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getMoreResults()\"\u003e\u003ccode\u003egetMoreResults()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - any SQL statement",
          "\u003ccode\u003ecolumnIndexes\u003c/code\u003e - an array of the indexes of the columns in the inserted row that should be made available for retrieval by a call to the method \n\u003ccode\u003egetGeneratedKeys\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the elements in the \n\u003ccode\u003eint\u003c/code\u003e array passed to this method are not valid column indexes, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the first result is a \n\u003ccode\u003eResultSet\u003c/code\u003e object; \n\u003ccode\u003efalse\u003c/code\u003e if it is an update count or there are no results"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "columnNames"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "execute",
      "comment": "Executes the given SQL statement, which may return multiple results, and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the names of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string. The execute method executes an SQL statement and indicates the form of the first result. You must then use the methods getResultSet or getUpdateCount to retrieve the result, and getMoreResults to move to any subsequent result(s). Note:This method cannot be called on a PreparedStatement or CallableStatement.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getResultSet()\"\u003e\u003ccode\u003egetResultSet()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getUpdateCount()\"\u003e\u003ccode\u003egetUpdateCount()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getMoreResults()\"\u003e\u003ccode\u003egetMoreResults()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getGeneratedKeys()\"\u003e\u003ccode\u003egetGeneratedKeys()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - any SQL statement",
          "\u003ccode\u003ecolumnNames\u003c/code\u003e - an array of the names of the columns in the inserted row that should be made available for retrieval by a call to the method \n\u003ccode\u003egetGeneratedKeys\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e,the elements of the \n\u003ccode\u003eString\u003c/code\u003e array passed to this method are not valid column names, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the next result is a \n\u003ccode\u003eResultSet\u003c/code\u003e object; \n\u003ccode\u003efalse\u003c/code\u003e if it is an update count or there are no more results"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getResultSetHoldability",
      "comment": "Retrieves the result set holdability for ResultSet objects generated by this Statement object.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either \n\u003ccode\u003eResultSet.HOLD_CURSORS_OVER_COMMIT\u003c/code\u003e or \n\u003ccode\u003eResultSet.CLOSE_CURSORS_AT_COMMIT\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isClosed",
      "comment": "Retrieves whether this Statement object has been closed. A Statement is closed if the method close has been called on it, or if it is automatically closed.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "true if this \n\u003ccode\u003eStatement\u003c/code\u003e object is closed; false if it is still open"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "poolable"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setPoolable",
      "comment": "Requests that a Statement be pooled or not pooled. The value specified is a hint to the statement pool implementation indicating whether the application wants the statement to be pooled. It is up to the statement pool manager as to whether the hint is used. The poolable value of a statement is applicable to both internal statement caches implemented by the driver and external statement caches implemented by application servers and other applications. By default, a Statement is not poolable when created, and a PreparedStatement and CallableStatement are poolable when created.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epoolable\u003c/code\u003e - requests that the statement be pooled if true and that the statement not be pooled if false"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isPoolable",
      "comment": "Returns a value indicating whether the Statement is poolable or not.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#setPoolable(boolean)\"\u003e\u003ccode\u003esetPoolable(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eStatement\u003c/code\u003e is poolable; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "closeOnCompletion",
      "comment": "Specifies that this Statement will be closed when all its dependent result sets are closed. If execution of the Statement does not produce any result sets, this method has no effect. Note: Multiple calls to closeOnCompletion do not toggle the effect on this Statement. However, a call to closeOnCompletion does effect both the subsequent execution of statements, and statements that currently have open, dependent, result sets.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isCloseOnCompletion",
      "comment": "Returns a value indicating whether this Statement will be closed when all its dependent result sets are closed.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eStatement\u003c/code\u003e will be closed when all of its dependent result sets are closed; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLargeUpdateCount",
      "comment": "Retrieves the current result as an update count; if the result is a ResultSet object or there are no more results, -1 is returned. This method should be called only once per result. This method should be used when the returned row count may exceed Integer.MAX_VALUE. The default implementation will throw UnsupportedOperationException",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#execute(java.lang.String)\"\u003e\u003ccode\u003eexecute(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "the current result as an update count; -1 if the current result is a \n\u003ccode\u003eResultSet\u003c/code\u003e object or there are no more results"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "max"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLargeMaxRows",
      "comment": "Sets the limit for the maximum number of rows that any ResultSet object generated by this Statement object can contain to the given number. If the limit is exceeded, the excess rows are silently dropped. This method should be used when the row limit may exceed Integer.MAX_VALUE. The default implementation will throw UnsupportedOperationException",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#getMaxRows()\"\u003e\u003ccode\u003egetMaxRows()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emax\u003c/code\u003e - the new max rows limit; zero means there is no limit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e or the condition \n\u003ccode\u003emax \u0026gt;\u003d 0\u003c/code\u003e is not satisfied"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLargeMaxRows",
      "comment": "Retrieves the maximum number of rows that a ResultSet object produced by this Statement object can contain. If this limit is exceeded, the excess rows are silently dropped. This method should be used when the returned row limit may exceed Integer.MAX_VALUE. The default implementation will return 0",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#setMaxRows(int)\"\u003e\u003ccode\u003esetMaxRows(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "the current maximum number of rows for a \n\u003ccode\u003eResultSet\u003c/code\u003e object produced by this \n\u003ccode\u003eStatement\u003c/code\u003e object; zero means there is no limit"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeLargeBatch",
      "comment": "Submits a batch of commands to the database for execution and if all commands execute successfully, returns an array of update counts. The long elements of the array that is returned are ordered to correspond to the commands in the batch, which are ordered according to the order in which they were added to the batch. The elements in the array returned by the method executeLargeBatch may be one of the following: A number greater than or equal to zero -- indicates that the command was processed successfully and is an update count giving the number of rows in the database that were affected by the command\u0027s execution A value of SUCCESS_NO_INFO -- indicates that the command was processed successfully but that the number of rows affected is unknown If one of the commands in a batch update fails to execute properly, this method throws a BatchUpdateException, and a JDBC driver may or may not continue to process the remaining commands in the batch. However, the driver\u0027s behavior must be consistent with a particular DBMS, either always continuing to process commands or never continuing to process commands. If the driver continues processing after a failure, the array returned by the method BatchUpdateException.getLargeUpdateCounts will contain as many elements as there are commands in the batch, and at least one of the elements will be the following: A value of EXECUTE_FAILED -- indicates that the command failed to execute successfully and occurs only if a driver continues to process commands after a command fails This method should be used when the returned row count may exceed Integer.MAX_VALUE. The default implementation will throw UnsupportedOperationException",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#addBatch(java.lang.String)\"\u003e\u003ccode\u003eaddBatch(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/DatabaseMetaData.html#supportsBatchUpdates()\"\u003e\u003ccode\u003eDatabaseMetaData.supportsBatchUpdates()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e or the driver does not support batch statements. Throws \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/BatchUpdateException.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eBatchUpdateException\u003c/code\u003e\u003c/a\u003e (a subclass of \n\u003ccode\u003eSQLException\u003c/code\u003e) if one of the commands sent to the database fails to execute properly or attempts to return a result set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "an array of update counts containing one element for each command in the batch. The elements of the array are ordered according to the order in which commands were added to the batch."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeLargeUpdate",
      "comment": "Executes the given SQL statement, which may be an INSERT, UPDATE, or DELETE statement or an SQL statement that returns nothing, such as an SQL DDL statement. This method should be used when the returned row count may exceed Integer.MAX_VALUE. Note:This method cannot be called on a PreparedStatement or CallableStatement. The default implementation will throw UnsupportedOperationException",
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL Data Manipulation Language (DML) statement, such as \n\u003ccode\u003eINSERT\u003c/code\u003e, \n\u003ccode\u003eUPDATE\u003c/code\u003e or \n\u003ccode\u003eDELETE\u003c/code\u003e; or an SQL statement that returns nothing, such as a DDL statement."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the given SQL statement produces a \n\u003ccode\u003eResultSet\u003c/code\u003e object, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "autoGeneratedKeys"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeLargeUpdate",
      "comment": "Executes the given SQL statement and signals the driver with the given flag about whether the auto-generated keys produced by this Statement object should be made available for retrieval. The driver will ignore the flag if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). This method should be used when the returned row count may exceed Integer.MAX_VALUE. Note:This method cannot be called on a PreparedStatement or CallableStatement. The default implementation will throw SQLFeatureNotSupportedException",
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL Data Manipulation Language (DML) statement, such as \n\u003ccode\u003eINSERT\u003c/code\u003e, \n\u003ccode\u003eUPDATE\u003c/code\u003e or \n\u003ccode\u003eDELETE\u003c/code\u003e; or an SQL statement that returns nothing, such as a DDL statement.",
          "\u003ccode\u003eautoGeneratedKeys\u003c/code\u003e - a flag indicating whether auto-generated keys should be made available for retrieval; one of the following constants: \n\u003ccode\u003eStatement.RETURN_GENERATED_KEYS\u003c/code\u003e \n\u003ccode\u003eStatement.NO_GENERATED_KEYS\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the given SQL statement returns a \n\u003ccode\u003eResultSet\u003c/code\u003e object, the given constant is not one of those allowed, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method with a constant of Statement.RETURN_GENERATED_KEYS",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "columnIndexes"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeLargeUpdate",
      "comment": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). This method should be used when the returned row count may exceed Integer.MAX_VALUE. Note:This method cannot be called on a PreparedStatement or CallableStatement. The default implementation will throw SQLFeatureNotSupportedException",
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL Data Manipulation Language (DML) statement, such as \n\u003ccode\u003eINSERT\u003c/code\u003e, \n\u003ccode\u003eUPDATE\u003c/code\u003e or \n\u003ccode\u003eDELETE\u003c/code\u003e; or an SQL statement that returns nothing, such as a DDL statement.",
          "\u003ccode\u003ecolumnIndexes\u003c/code\u003e - an array of column indexes indicating the columns that should be returned from the inserted row"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the SQL statement returns a \n\u003ccode\u003eResultSet\u003c/code\u003e object,the second argument supplied to this method is not an \n\u003ccode\u003eint\u003c/code\u003e array whose elements are valid column indexes, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either (1) the row count for SQL Data Manipulation Language (DML) statements or (2) 0 for SQL statements that return nothing"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "sql"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "columnNames"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "executeLargeUpdate",
      "comment": "Executes the given SQL statement and signals the driver that the auto-generated keys indicated in the given array should be made available for retrieval. This array contains the names of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). This method should be used when the returned row count may exceed Integer.MAX_VALUE. Note:This method cannot be called on a PreparedStatement or CallableStatement. The default implementation will throw SQLFeatureNotSupportedException",
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL Data Manipulation Language (DML) statement, such as \n\u003ccode\u003eINSERT\u003c/code\u003e, \n\u003ccode\u003eUPDATE\u003c/code\u003e or \n\u003ccode\u003eDELETE\u003c/code\u003e; or an SQL statement that returns nothing, such as a DDL statement.",
          "\u003ccode\u003ecolumnNames\u003c/code\u003e - an array of the names of the columns that should be returned from the inserted row"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed \n\u003ccode\u003eStatement\u003c/code\u003e, the SQL statement returns a \n\u003ccode\u003eResultSet\u003c/code\u003e object, the second argument supplied to this method is not a \n\u003ccode\u003eString\u003c/code\u003e array whose elements are valid column names, the method is called on a \n\u003ccode\u003ePreparedStatement\u003c/code\u003e or \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLTimeoutException.html\" title\u003d\"class in java.sql\"\u003eSQLTimeoutException\u003c/a\u003e\u003c/code\u003e - when the driver has determined that the timeout value that was specified by the \n\u003ccode\u003esetQueryTimeout\u003c/code\u003e method has been exceeded and has at least attempted to cancel the currently running \n\u003ccode\u003eStatement\u003c/code\u003e"
        ],
        "return": [
          "either the row count for \n\u003ccode\u003eINSERT\u003c/code\u003e, \n\u003ccode\u003eUPDATE\u003c/code\u003e, or \n\u003ccode\u003eDELETE\u003c/code\u003e statements, or 0 for SQL statements that return nothing"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "enquoteLiteral",
      "comment": "Returns a String enclosed in single quotes. Any occurrence of a single quote within the string will be replaced by two single quotes. Examples of the conversion: Value Result Hello \u0027Hello\u0027 G\u0027Day \u0027G\u0027\u0027Day\u0027 \u0027G\u0027\u0027Day\u0027 \u0027\u0027\u0027G\u0027\u0027\u0027\u0027Day\u0027\u0027\u0027 I\u0027\u0027\u0027M \u0027I\u0027\u0027\u0027\u0027\u0027\u0027M\u0027",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - a character string"
        ],
        "implNote": [
          "JDBC driver implementations may need to provide their own implementation of this method in order to meet the requirements of the underlying datasource."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if val is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "A string enclosed by single quotes with every single quote converted to two single quotes"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "identifier"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "alwaysQuote"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "enquoteIdentifier",
      "comment": "Returns a SQL identifier. If identifier is a simple SQL identifier: Return the original value if alwaysQuote is false Return a delimited identifier if alwaysQuote is true If identifier is not a simple SQL identifier, identifier will be enclosed in double quotes if not already present. If the datasource does not support double quotes for delimited identifiers, the identifier should be enclosed by the string returned from DatabaseMetaData.getIdentifierQuoteString(). If the datasource does not support delimited identifiers, a SQLFeatureNotSupportedException should be thrown. A SQLException will be thrown if identifier contains any characters invalid in a delimited identifier or the identifier length is invalid for the datasource.",
      "tagMap": {
        "implSpec": [
          "The default implementation uses the following criteria to determine a valid simple SQL identifier: \n\u003cul\u003e \n \u003cli\u003eThe string is not enclosed in double quotes\u003c/li\u003e \n \u003cli\u003eThe first character is an alphabetic character from a through z, or from A through Z\u003c/li\u003e \n \u003cli\u003eThe name only contains alphanumeric characters or the character \"_\"\u003c/li\u003e \n\u003c/ul\u003e The default implementation will throw a \n\u003ccode\u003eSQLException\u003c/code\u003e if: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eidentifier\u003c/code\u003e contains a \u003ccode\u003enull\u003c/code\u003e character or double quote and is not a simple SQL identifier.\u003c/li\u003e \n \u003cli\u003eThe length of \u003ccode\u003eidentifier\u003c/code\u003e is less than 1 or greater than 128 characters \u003c/li\u003e\n\u003c/ul\u003e \n\u003cblockquote\u003e \n \u003ctable class\u003d\"striped\"\u003e \n  \u003ccaption\u003e\n   Examples of the conversion:\n  \u003c/caption\u003e \n  \u003cthead\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"col\"\u003eidentifier\u003c/th\u003e \n    \u003cth scope\u003d\"col\"\u003ealwaysQuote\u003c/th\u003e \n    \u003cth scope\u003d\"col\"\u003eResult\u003c/th\u003e\n   \u003c/tr\u003e \n  \u003c/thead\u003e \n  \u003ctbody\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003eHello\u003c/th\u003e \n    \u003ctd\u003efalse\u003c/td\u003e \n    \u003ctd\u003eHello\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003eHello\u003c/th\u003e \n    \u003ctd\u003etrue\u003c/td\u003e \n    \u003ctd\u003e\"Hello\"\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003eG\u0027Day\u003c/th\u003e \n    \u003ctd\u003efalse\u003c/td\u003e \n    \u003ctd\u003e\"G\u0027Day\"\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\"Bruce Wayne\"\u003c/th\u003e \n    \u003ctd\u003efalse\u003c/td\u003e \n    \u003ctd\u003e\"Bruce Wayne\"\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\"Bruce Wayne\"\u003c/th\u003e \n    \u003ctd\u003etrue\u003c/td\u003e \n    \u003ctd\u003e\"Bruce Wayne\"\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003eGoodDay$\u003c/th\u003e \n    \u003ctd\u003efalse\u003c/td\u003e \n    \u003ctd\u003e\"GoodDay$\"\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003eHello\"World\u003c/th\u003e \n    \u003ctd\u003efalse\u003c/td\u003e \n    \u003ctd\u003eSQLException\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\"Hello\"World\"\u003c/th\u003e \n    \u003ctd\u003efalse\u003c/td\u003e \n    \u003ctd\u003eSQLException\u003c/td\u003e \n   \u003c/tr\u003e \n  \u003c/tbody\u003e \n \u003c/table\u003e \n\u003c/blockquote\u003e"
        ],
        "param": [
          "\u003ccode\u003eidentifier\u003c/code\u003e - a SQL identifier",
          "\u003ccode\u003ealwaysQuote\u003c/code\u003e - indicates if a simple SQL identifier should be returned as a quoted identifier"
        ],
        "implNote": [
          "JDBC driver implementations may need to provide their own implementation of this method in order to meet the requirements of the underlying datasource."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if identifier is not a valid identifier",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the datasource does not support delimited identifiers",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if identifier is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A simple SQL identifier or a delimited identifier"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "identifier"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSimpleIdentifier",
      "comment": "Retrieves whether identifier is a simple SQL identifier.",
      "tagMap": {
        "implSpec": [
          "The default implementation uses the following criteria to determine a valid simple SQL identifier: \n\u003cul\u003e \n \u003cli\u003eThe string is not enclosed in double quotes\u003c/li\u003e \n \u003cli\u003eThe first character is an alphabetic character from a through z, or from A through Z\u003c/li\u003e \n \u003cli\u003eThe string only contains alphanumeric characters or the character \"_\"\u003c/li\u003e \n \u003cli\u003eThe string is between 1 and 128 characters in length inclusive\u003c/li\u003e \n\u003c/ul\u003e \n\u003cblockquote\u003e \n \u003ctable class\u003d\"striped\"\u003e \n  \u003ccaption\u003e\n   Examples of the conversion:\n  \u003c/caption\u003e \n  \u003cthead\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"col\"\u003eidentifier\u003c/th\u003e \n    \u003cth scope\u003d\"col\"\u003eSimple Identifier\u003c/th\u003e \n   \u003c/tr\u003e\n  \u003c/thead\u003e \n  \u003ctbody\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003eHello\u003c/th\u003e \n    \u003ctd\u003etrue\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003eG\u0027Day\u003c/th\u003e \n    \u003ctd\u003efalse\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\"Bruce Wayne\"\u003c/th\u003e \n    \u003ctd\u003efalse\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003eGoodDay$\u003c/th\u003e \n    \u003ctd\u003efalse\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003eHello\"World\u003c/th\u003e \n    \u003ctd\u003efalse\u003c/td\u003e \n   \u003c/tr\u003e \n   \u003ctr\u003e \n    \u003cth scope\u003d\"row\"\u003e\"Hello\"World\"\u003c/th\u003e \n    \u003ctd\u003efalse\u003c/td\u003e \n   \u003c/tr\u003e \n  \u003c/tbody\u003e \n \u003c/table\u003e \n\u003c/blockquote\u003e"
        ],
        "param": [
          "\u003ccode\u003eidentifier\u003c/code\u003e - a SQL identifier"
        ],
        "implNote": [
          "JDBC driver implementations may need to provide their own implementation of this method in order to meet the requirements of the underlying datasource."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if identifier is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "true if a simple SQL identifier, false otherwise"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "enquoteNCharLiteral",
      "comment": "Returns a String representing a National Character Set Literal enclosed in single quotes and prefixed with a upper case letter N. Any occurrence of a single quote within the string will be replaced by two single quotes. Examples of the conversion: Value Result Hello N\u0027Hello\u0027 G\u0027Day N\u0027G\u0027\u0027Day\u0027 \u0027G\u0027\u0027Day\u0027 N\u0027\u0027\u0027G\u0027\u0027\u0027\u0027Day\u0027\u0027\u0027 I\u0027\u0027\u0027M N\u0027I\u0027\u0027\u0027\u0027\u0027\u0027M\u0027 N\u0027Hello\u0027 N\u0027N\u0027\u0027Hello\u0027\u0027\u0027",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - a character string"
        ],
        "implNote": [
          "JDBC driver implementations may need to provide their own implementation of this method in order to meet the requirements of the underlying datasource. An implementation of enquoteNCharLiteral may accept a different set of characters than that accepted by the same drivers implementation of enquoteLiteral."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if val is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "the result of replacing every single quote character in the argument by two single quote characters where this entire result is then prefixed with \u0027N\u0027."
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.sql.Statement",
  "comment": "\u003cp\u003eThe object used for executing a static SQL statement and returning the results it produces. \u003c/p\u003e\n\u003cp\u003e By default, only one \u003ccode\u003eResultSet\u003c/code\u003e object per \u003ccode\u003eStatement\u003c/code\u003e object can be open at the same time. Therefore, if the reading of one \u003ccode\u003eResultSet\u003c/code\u003e object is interleaved with the reading of another, each must have been generated by different \u003ccode\u003eStatement\u003c/code\u003e objects. All execution methods in the \u003ccode\u003eStatement\u003c/code\u003e interface implicitly close a current \u003ccode\u003eResultSet\u003c/code\u003e object of the statement if an open one exists.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#createStatement()\"\u003e\u003ccode\u003eConnection.createStatement()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eResultSet\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}