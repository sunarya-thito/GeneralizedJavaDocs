{
  "packageName": "java.sql",
  "simpleName": "Connection",
  "moduleName": "java.sql",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.sql.Wrapper",
      "type": "Class"
    },
    {
      "name": "java.lang.AutoCloseable",
      "type": "Class"
    }
  ],
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "TRANSACTION_NONE",
      "comment": "A constant indicating that transactions are not supported.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Connection.TRANSACTION_NONE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "TRANSACTION_READ_UNCOMMITTED",
      "comment": "A constant indicating that dirty reads, non-repeatable reads and phantom reads can occur. This level allows a row changed by one transaction to be read by another transaction before any changes in that row have been committed (a \"dirty read\"). If any of the changes are rolled back, the second transaction will have retrieved an invalid row.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Connection.TRANSACTION_READ_UNCOMMITTED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "TRANSACTION_READ_COMMITTED",
      "comment": "A constant indicating that dirty reads are prevented; non-repeatable reads and phantom reads can occur. This level only prohibits a transaction from reading a row with uncommitted changes in it.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Connection.TRANSACTION_READ_COMMITTED\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "TRANSACTION_REPEATABLE_READ",
      "comment": "A constant indicating that dirty reads and non-repeatable reads are prevented; phantom reads can occur. This level prohibits a transaction from reading a row with uncommitted changes in it, and it also prohibits the situation where one transaction reads a row, a second transaction alters the row, and the first transaction rereads the row, getting different values the second time (a \"non-repeatable read\").",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Connection.TRANSACTION_REPEATABLE_READ\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "TRANSACTION_SERIALIZABLE",
      "comment": "A constant indicating that dirty reads, non-repeatable reads and phantom reads are prevented. This level includes the prohibitions in TRANSACTION_REPEATABLE_READ and further prohibits the situation where one transaction reads all rows that satisfy a WHERE condition, a second transaction inserts a row that satisfies that WHERE condition, and the first transaction rereads for the same condition, retrieving the additional \"phantom\" row in the second read.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.sql.Connection.TRANSACTION_SERIALIZABLE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Statement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createStatement",
      "comment": "Creates a Statement object for sending SQL statements to the database. SQL statements without parameters are normally executed using Statement objects. If the same SQL statement is executed many times, it may be more efficient to use a PreparedStatement object. Result sets created using the returned Statement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling getHoldability().",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "a new default \n\u003ccode\u003eStatement\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.PreparedStatement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sql",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "prepareStatement",
      "comment": "Creates a PreparedStatement object for sending parameterized SQL statements to the database. A SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times. Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLException objects. Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling getHoldability().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL statement that may contain one or more \u0027?\u0027 IN parameter placeholders"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "a new default \n\u003ccode\u003ePreparedStatement\u003c/code\u003e object containing the pre-compiled SQL statement"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.CallableStatement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sql",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "prepareCall",
      "comment": "Creates a CallableStatement object for calling database stored procedures. The CallableStatement object provides methods for setting up its IN and OUT parameters, and methods for executing the call to a stored procedure. Note: This method is optimized for handling stored procedure call statements. Some drivers may send the call statement to the database when the method prepareCall is done; others may wait until the CallableStatement object is executed. This has no direct effect on users; however, it does affect which method throws certain SQLExceptions. Result sets created using the returned CallableStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling getHoldability().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL statement that may contain one or more \u0027?\u0027 parameter placeholders. Typically this statement is specified using JDBC call escape syntax."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "a new default \n\u003ccode\u003eCallableStatement\u003c/code\u003e object containing the pre-compiled SQL statement"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sql",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "nativeSQL",
      "comment": "Converts the given SQL statement into the system\u0027s native SQL grammar. A driver may convert the JDBC SQL grammar into its system\u0027s native SQL grammar prior to sending it. This method returns the native form of the statement that the driver would have sent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL statement that may contain one or more \u0027?\u0027 parameter placeholders"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "the native form of this statement"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "autoCommit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAutoCommit",
      "comment": "Sets this connection\u0027s auto-commit mode to the given state. If a connection is in auto-commit mode, then all its SQL statements will be executed and committed as individual transactions. Otherwise, its SQL statements are grouped into transactions that are terminated by a call to either the method commit or the method rollback. By default, new connections are in auto-commit mode. The commit occurs when the statement completes. The time when the statement completes depends on the type of SQL Statement: For DML statements, such as Insert, Update or Delete, and DDL statements, the statement is complete as soon as it has finished executing. For Select statements, the statement is complete when the associated result set is closed. For CallableStatement objects or for statements that return multiple results, the statement is complete when all of the associated result sets have been closed, and all update counts and output parameters have been retrieved. NOTE: If this method is called during a transaction and the auto-commit mode is changed, the transaction is committed. If setAutoCommit is called and the auto-commit mode is not changed, the call is a no-op.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#getAutoCommit()\"\u003e\u003ccode\u003egetAutoCommit()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eautoCommit\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to enable auto-commit mode; \n\u003ccode\u003efalse\u003c/code\u003e to disable it"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, setAutoCommit(true) is called while participating in a distributed transaction, or this method is called on a closed connection"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAutoCommit",
      "comment": "Retrieves the current auto-commit mode for this Connection object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setAutoCommit(boolean)\"\u003e\u003ccode\u003esetAutoCommit(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "the current state of this \n\u003ccode\u003eConnection\u003c/code\u003e object\u0027s auto-commit mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "commit",
      "comment": "Makes all changes made since the previous commit/rollback permanent and releases any database locks currently held by this Connection object. This method should be used only when auto-commit mode has been disabled.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setAutoCommit(boolean)\"\u003e\u003ccode\u003esetAutoCommit(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called while participating in a distributed transaction, if this method is called on a closed connection or this \n\u003ccode\u003eConnection\u003c/code\u003e object is in auto-commit mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rollback",
      "comment": "Undoes all changes made in the current transaction and releases any database locks currently held by this Connection object. This method should be used only when auto-commit mode has been disabled.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setAutoCommit(boolean)\"\u003e\u003ccode\u003esetAutoCommit(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection or this \n\u003ccode\u003eConnection\u003c/code\u003e object is in auto-commit mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "close",
      "comment": "Releases this Connection object\u0027s database and JDBC resources immediately instead of waiting for them to be automatically released. Calling the method close on a Connection object that is already closed is a no-op. It is strongly recommended that an application explicitly commits or rolls back an active transaction prior to calling the close method. If the close method is called and there is an active transaction, the results are implementation-defined.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isClosed",
      "comment": "Retrieves whether this Connection object has been closed. A connection is closed if the method close has been called on it or if certain fatal errors have occurred. This method is guaranteed to return true only when it is called after the method Connection.close has been called. This method generally cannot be called to determine whether a connection to a database is valid or invalid. A typical client can determine that a connection is invalid by catching any exceptions that might be thrown when an operation is attempted.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eConnection\u003c/code\u003e object is closed; \n\u003ccode\u003efalse\u003c/code\u003e if it is still open"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.DatabaseMetaData",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getMetaData",
      "comment": "Retrieves a DatabaseMetaData object that contains metadata about the database to which this Connection object represents a connection. The metadata includes information about the database\u0027s tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "a \n\u003ccode\u003eDatabaseMetaData\u003c/code\u003e object for this \n\u003ccode\u003eConnection\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "readOnly",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setReadOnly",
      "comment": "Puts this connection in read-only mode as a hint to the driver to enable database optimizations. Note: This method cannot be called during a transaction.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereadOnly\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e enables read-only mode; \n\u003ccode\u003efalse\u003c/code\u003e disables it"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection or this method is called during a transaction"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isReadOnly",
      "comment": "Retrieves whether this Connection object is in read-only mode.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eConnection\u003c/code\u003e object is read-only; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "catalog",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCatalog",
      "comment": "Sets the given catalog name in order to select a subspace of this Connection object\u0027s database in which to work. If the driver does not support catalogs, it will silently ignore this request. Calling setCatalog has no effect on previously created or prepared Statement objects. It is implementation defined whether a DBMS prepare operation takes place immediately when the Connection method prepareStatement or prepareCall is invoked. For maximum portability, setCatalog should be called before a Statement is created or prepared.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#getCatalog()\"\u003e\u003ccode\u003egetCatalog()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecatalog\u003c/code\u003e - the name of a catalog (subspace in this \n\u003ccode\u003eConnection\u003c/code\u003e object\u0027s database) in which to work"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCatalog",
      "comment": "Retrieves this Connection object\u0027s current catalog name.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setCatalog(java.lang.String)\"\u003e\u003ccode\u003esetCatalog(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "the current catalog name or \n\u003ccode\u003enull\u003c/code\u003e if there is none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "level",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTransactionIsolation",
      "comment": "Attempts to change the transaction isolation level for this Connection object to the one given. The constants defined in the interface Connection are the possible transaction isolation levels. Note: If this method is called during a transaction, the result is implementation-defined.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/DatabaseMetaData.html#supportsTransactionIsolationLevel(int)\"\u003e\u003ccode\u003eDatabaseMetaData.supportsTransactionIsolationLevel(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#getTransactionIsolation()\"\u003e\u003ccode\u003egetTransactionIsolation()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elevel\u003c/code\u003e - one of the following \n\u003ccode\u003eConnection\u003c/code\u003e constants: \n\u003ccode\u003eConnection.TRANSACTION_READ_UNCOMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_READ_COMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_REPEATABLE_READ\u003c/code\u003e, or \n\u003ccode\u003eConnection.TRANSACTION_SERIALIZABLE\u003c/code\u003e. (Note that \n\u003ccode\u003eConnection.TRANSACTION_NONE\u003c/code\u003e cannot be used because it specifies that transactions are not supported.)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection or the given parameter is not one of the \n\u003ccode\u003eConnection\u003c/code\u003e constants"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTransactionIsolation",
      "comment": "Retrieves this Connection object\u0027s current transaction isolation level.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setTransactionIsolation(int)\"\u003e\u003ccode\u003esetTransactionIsolation(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "the current transaction isolation level, which will be one of the following constants: \n\u003ccode\u003eConnection.TRANSACTION_READ_UNCOMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_READ_COMMITTED\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_REPEATABLE_READ\u003c/code\u003e, \n\u003ccode\u003eConnection.TRANSACTION_SERIALIZABLE\u003c/code\u003e, or \n\u003ccode\u003eConnection.TRANSACTION_NONE\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.SQLWarning",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getWarnings",
      "comment": "Retrieves the first warning reported by calls on this Connection object. If there is more than one warning, subsequent warnings will be chained to the first one and can be retrieved by calling the method SQLWarning.getNextWarning on the warning that was retrieved previously. This method may not be called on a closed connection; doing so will cause an SQLException to be thrown. Note: Subsequent warnings will be chained to this SQLWarning.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLWarning.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eSQLWarning\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "the first \n\u003ccode\u003eSQLWarning\u003c/code\u003e object or \n\u003ccode\u003enull\u003c/code\u003e if there are none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clearWarnings",
      "comment": "Clears all warnings reported for this Connection object. After a call to this method, the method getWarnings returns null until a new warning is reported for this Connection object.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Statement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetConcurrency",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createStatement",
      "comment": "Creates a Statement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the createStatement method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling getHoldability().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eresultSetType\u003c/code\u003e - a result set type; one of \n\u003ccode\u003eResultSet.TYPE_FORWARD_ONLY\u003c/code\u003e, \n\u003ccode\u003eResultSet.TYPE_SCROLL_INSENSITIVE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.TYPE_SCROLL_SENSITIVE\u003c/code\u003e",
          "\u003ccode\u003eresultSetConcurrency\u003c/code\u003e - a concurrency type; one of \n\u003ccode\u003eResultSet.CONCUR_READ_ONLY\u003c/code\u003e or \n\u003ccode\u003eResultSet.CONCUR_UPDATABLE\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection or the given parameters are not \n\u003ccode\u003eResultSet\u003c/code\u003e constants indicating type and concurrency",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency."
        ],
        "return": [
          "a new \n\u003ccode\u003eStatement\u003c/code\u003e object that will generate \n\u003ccode\u003eResultSet\u003c/code\u003e objects with the given type and concurrency"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.PreparedStatement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sql",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetConcurrency",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "prepareStatement",
      "comment": "Creates a PreparedStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareStatement method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling getHoldability().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e object that is the SQL statement to be sent to the database; may contain one or more \u0027?\u0027 IN parameters",
          "\u003ccode\u003eresultSetType\u003c/code\u003e - a result set type; one of \n\u003ccode\u003eResultSet.TYPE_FORWARD_ONLY\u003c/code\u003e, \n\u003ccode\u003eResultSet.TYPE_SCROLL_INSENSITIVE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.TYPE_SCROLL_SENSITIVE\u003c/code\u003e",
          "\u003ccode\u003eresultSetConcurrency\u003c/code\u003e - a concurrency type; one of \n\u003ccode\u003eResultSet.CONCUR_READ_ONLY\u003c/code\u003e or \n\u003ccode\u003eResultSet.CONCUR_UPDATABLE\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection or the given parameters are not \n\u003ccode\u003eResultSet\u003c/code\u003e constants indicating type and concurrency",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency."
        ],
        "return": [
          "a new PreparedStatement object containing the pre-compiled SQL statement that will produce \n\u003ccode\u003eResultSet\u003c/code\u003e objects with the given type and concurrency"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.CallableStatement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sql",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetConcurrency",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "prepareCall",
      "comment": "Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareCall method above, but it allows the default result set type and concurrency to be overridden. The holdability of the created result sets can be determined by calling getHoldability().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e object that is the SQL statement to be sent to the database; may contain on or more \u0027?\u0027 parameters",
          "\u003ccode\u003eresultSetType\u003c/code\u003e - a result set type; one of \n\u003ccode\u003eResultSet.TYPE_FORWARD_ONLY\u003c/code\u003e, \n\u003ccode\u003eResultSet.TYPE_SCROLL_INSENSITIVE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.TYPE_SCROLL_SENSITIVE\u003c/code\u003e",
          "\u003ccode\u003eresultSetConcurrency\u003c/code\u003e - a concurrency type; one of \n\u003ccode\u003eResultSet.CONCUR_READ_ONLY\u003c/code\u003e or \n\u003ccode\u003eResultSet.CONCUR_UPDATABLE\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection or the given parameters are not \n\u003ccode\u003eResultSet\u003c/code\u003e constants indicating type and concurrency",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method or this method is not supported for the specified result set type and result set concurrency."
        ],
        "return": [
          "a new \n\u003ccode\u003eCallableStatement\u003c/code\u003e object containing the pre-compiled SQL statement that will produce \n\u003ccode\u003eResultSet\u003c/code\u003e objects with the given type and concurrency"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTypeMap",
      "comment": "Retrieves the Map object associated with this Connection object. Unless the application has added an entry, the type map returned will be empty. You must invoke setTypeMap after making changes to the Map object returned from getTypeMap as a JDBC driver may create an internal copy of the Map object passed to setTypeMap:       Map\u003cString,Class\u003c?\u003e\u003e myMap \u003d con.getTypeMap();\n      myMap.put(\"mySchemaName.ATHLETES\", Athletes.class);\n      con.setTypeMap(myMap);",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setTypeMap(java.util.Map)\"\u003e\u003ccode\u003esetTypeMap(java.util.Map\u0026lt;java.lang.String, java.lang.Class\u0026lt;?\u0026gt;\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object associated with this \n\u003ccode\u003eConnection\u003c/code\u003e object"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "map",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTypeMap",
      "comment": "Installs the given TypeMap object as the type map for this Connection object. The type map will be used for the custom mapping of SQL structured types and distinct types. You must set the values for the TypeMap prior to callng setMap as a JDBC driver may create an internal copy of the TypeMap:       Map myMap\u003cString,Class\u003c?\u003e\u003e \u003d new HashMap\u003cString,Class\u003c?\u003e\u003e();\n      myMap.put(\"mySchemaName.ATHLETES\", Athletes.class);\n      con.setTypeMap(myMap);",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#getTypeMap()\"\u003e\u003ccode\u003egetTypeMap()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emap\u003c/code\u003e - the \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object to install as the replacement for this \n\u003ccode\u003eConnection\u003c/code\u003e object\u0027s default type map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection or the given parameter is not a \n\u003ccode\u003ejava.util.Map\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "holdability",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setHoldability",
      "comment": "Changes the default holdability of ResultSet objects created using this Connection object to the given holdability. The default holdability of ResultSet objects can be determined by invoking DatabaseMetaData.getResultSetHoldability().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#getHoldability()\"\u003e\u003ccode\u003egetHoldability()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/DatabaseMetaData.html#getResultSetHoldability()\"\u003e\u003ccode\u003eDatabaseMetaData.getResultSetHoldability()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eResultSet\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eholdability\u003c/code\u003e - a \n\u003ccode\u003eResultSet\u003c/code\u003e holdability constant; one of \n\u003ccode\u003eResultSet.HOLD_CURSORS_OVER_COMMIT\u003c/code\u003e or \n\u003ccode\u003eResultSet.CLOSE_CURSORS_AT_COMMIT\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access occurs, this method is called on a closed connection, or the given parameter is not a \n\u003ccode\u003eResultSet\u003c/code\u003e constant indicating holdability",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the given holdability is not supported"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getHoldability",
      "comment": "Retrieves the current holdability of ResultSet objects created using this Connection object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setHoldability(int)\"\u003e\u003ccode\u003esetHoldability(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/DatabaseMetaData.html#getResultSetHoldability()\"\u003e\u003ccode\u003eDatabaseMetaData.getResultSetHoldability()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eResultSet\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "the holdability, one of \n\u003ccode\u003eResultSet.HOLD_CURSORS_OVER_COMMIT\u003c/code\u003e or \n\u003ccode\u003eResultSet.CLOSE_CURSORS_AT_COMMIT\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Savepoint",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSavepoint",
      "comment": "Creates an unnamed savepoint in the current transaction and returns the new Savepoint object that represents it. if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created savepoint.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Savepoint.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSavepoint\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection or this \n\u003ccode\u003eConnection\u003c/code\u003e object is currently in auto-commit mode",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the new \n\u003ccode\u003eSavepoint\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Savepoint",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSavepoint",
      "comment": "Creates a savepoint with the given name in the current transaction and returns the new Savepoint object that represents it. if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created savepoint.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Savepoint.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSavepoint\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e containing the name of the savepoint"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection or this \n\u003ccode\u003eConnection\u003c/code\u003e object is currently in auto-commit mode",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the new \n\u003ccode\u003eSavepoint\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.sql.Savepoint",
            "type": "Class"
          },
          "name": "savepoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rollback",
      "comment": "Undoes all changes made after the given Savepoint object was set. This method should be used only when auto-commit has been disabled.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Savepoint.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSavepoint\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#rollback()\"\u003e\u003ccode\u003erollback()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esavepoint\u003c/code\u003e - the \n\u003ccode\u003eSavepoint\u003c/code\u003e object to roll back to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called while participating in a distributed transaction, this method is called on a closed connection, the \n\u003ccode\u003eSavepoint\u003c/code\u003e object is no longer valid, or this \n\u003ccode\u003eConnection\u003c/code\u003e object is currently in auto-commit mode",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.sql.Savepoint",
            "type": "Class"
          },
          "name": "savepoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "releaseSavepoint",
      "comment": "Removes the specified Savepoint and subsequent Savepoint objects from the current transaction. Any reference to the savepoint after it have been removed will cause an SQLException to be thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esavepoint\u003c/code\u003e - the \n\u003ccode\u003eSavepoint\u003c/code\u003e object to be removed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection or the given \n\u003ccode\u003eSavepoint\u003c/code\u003e object is not a valid savepoint in the current transaction",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Statement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetConcurrency",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetHoldability",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createStatement",
      "comment": "Creates a Statement object that will generate ResultSet objects with the given type, concurrency, and holdability. This method is the same as the createStatement method above, but it allows the default result set type, concurrency, and holdability to be overridden.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eResultSet\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eresultSetType\u003c/code\u003e - one of the following \n\u003ccode\u003eResultSet\u003c/code\u003e constants: \n\u003ccode\u003eResultSet.TYPE_FORWARD_ONLY\u003c/code\u003e, \n\u003ccode\u003eResultSet.TYPE_SCROLL_INSENSITIVE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.TYPE_SCROLL_SENSITIVE\u003c/code\u003e",
          "\u003ccode\u003eresultSetConcurrency\u003c/code\u003e - one of the following \n\u003ccode\u003eResultSet\u003c/code\u003e constants: \n\u003ccode\u003eResultSet.CONCUR_READ_ONLY\u003c/code\u003e or \n\u003ccode\u003eResultSet.CONCUR_UPDATABLE\u003c/code\u003e",
          "\u003ccode\u003eresultSetHoldability\u003c/code\u003e - one of the following \n\u003ccode\u003eResultSet\u003c/code\u003e constants: \n\u003ccode\u003eResultSet.HOLD_CURSORS_OVER_COMMIT\u003c/code\u003e or \n\u003ccode\u003eResultSet.CLOSE_CURSORS_AT_COMMIT\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection or the given parameters are not \n\u003ccode\u003eResultSet\u003c/code\u003e constants indicating type, concurrency, and holdability",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency."
        ],
        "return": [
          "a new \n\u003ccode\u003eStatement\u003c/code\u003e object that will generate \n\u003ccode\u003eResultSet\u003c/code\u003e objects with the given type, concurrency, and holdability"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.PreparedStatement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sql",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetConcurrency",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetHoldability",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "prepareStatement",
      "comment": "Creates a PreparedStatement object that will generate ResultSet objects with the given type, concurrency, and holdability. This method is the same as the prepareStatement method above, but it allows the default result set type, concurrency, and holdability to be overridden.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eResultSet\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e object that is the SQL statement to be sent to the database; may contain one or more \u0027?\u0027 IN parameters",
          "\u003ccode\u003eresultSetType\u003c/code\u003e - one of the following \n\u003ccode\u003eResultSet\u003c/code\u003e constants: \n\u003ccode\u003eResultSet.TYPE_FORWARD_ONLY\u003c/code\u003e, \n\u003ccode\u003eResultSet.TYPE_SCROLL_INSENSITIVE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.TYPE_SCROLL_SENSITIVE\u003c/code\u003e",
          "\u003ccode\u003eresultSetConcurrency\u003c/code\u003e - one of the following \n\u003ccode\u003eResultSet\u003c/code\u003e constants: \n\u003ccode\u003eResultSet.CONCUR_READ_ONLY\u003c/code\u003e or \n\u003ccode\u003eResultSet.CONCUR_UPDATABLE\u003c/code\u003e",
          "\u003ccode\u003eresultSetHoldability\u003c/code\u003e - one of the following \n\u003ccode\u003eResultSet\u003c/code\u003e constants: \n\u003ccode\u003eResultSet.HOLD_CURSORS_OVER_COMMIT\u003c/code\u003e or \n\u003ccode\u003eResultSet.CLOSE_CURSORS_AT_COMMIT\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection or the given parameters are not \n\u003ccode\u003eResultSet\u003c/code\u003e constants indicating type, concurrency, and holdability",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency."
        ],
        "return": [
          "a new \n\u003ccode\u003ePreparedStatement\u003c/code\u003e object, containing the pre-compiled SQL statement, that will generate \n\u003ccode\u003eResultSet\u003c/code\u003e objects with the given type, concurrency, and holdability"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.CallableStatement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sql",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetConcurrency",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "resultSetHoldability",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "prepareCall",
      "comment": "Creates a CallableStatement object that will generate ResultSet objects with the given type and concurrency. This method is the same as the prepareCall method above, but it allows the default result set type, result set concurrency type and holdability to be overridden.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eResultSet\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e object that is the SQL statement to be sent to the database; may contain on or more \u0027?\u0027 parameters",
          "\u003ccode\u003eresultSetType\u003c/code\u003e - one of the following \n\u003ccode\u003eResultSet\u003c/code\u003e constants: \n\u003ccode\u003eResultSet.TYPE_FORWARD_ONLY\u003c/code\u003e, \n\u003ccode\u003eResultSet.TYPE_SCROLL_INSENSITIVE\u003c/code\u003e, or \n\u003ccode\u003eResultSet.TYPE_SCROLL_SENSITIVE\u003c/code\u003e",
          "\u003ccode\u003eresultSetConcurrency\u003c/code\u003e - one of the following \n\u003ccode\u003eResultSet\u003c/code\u003e constants: \n\u003ccode\u003eResultSet.CONCUR_READ_ONLY\u003c/code\u003e or \n\u003ccode\u003eResultSet.CONCUR_UPDATABLE\u003c/code\u003e",
          "\u003ccode\u003eresultSetHoldability\u003c/code\u003e - one of the following \n\u003ccode\u003eResultSet\u003c/code\u003e constants: \n\u003ccode\u003eResultSet.HOLD_CURSORS_OVER_COMMIT\u003c/code\u003e or \n\u003ccode\u003eResultSet.CLOSE_CURSORS_AT_COMMIT\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection or the given parameters are not \n\u003ccode\u003eResultSet\u003c/code\u003e constants indicating type, concurrency, and holdability",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method or this method is not supported for the specified result set type, result set holdability and result set concurrency."
        ],
        "return": [
          "a new \n\u003ccode\u003eCallableStatement\u003c/code\u003e object, containing the pre-compiled SQL statement, that will generate \n\u003ccode\u003eResultSet\u003c/code\u003e objects with the given type, concurrency, and holdability"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.PreparedStatement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sql",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "autoGeneratedKeys",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "prepareStatement",
      "comment": "Creates a default PreparedStatement object that has the capability to retrieve auto-generated keys. The given constant tells the driver whether it should make auto-generated keys available for retrieval. This parameter is ignored if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling getHoldability().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL statement that may contain one or more \u0027?\u0027 IN parameter placeholders",
          "\u003ccode\u003eautoGeneratedKeys\u003c/code\u003e - a flag indicating whether auto-generated keys should be returned; one of \n\u003ccode\u003eStatement.RETURN_GENERATED_KEYS\u003c/code\u003e or \n\u003ccode\u003eStatement.NO_GENERATED_KEYS\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection or the given parameter is not a \n\u003ccode\u003eStatement\u003c/code\u003e constant indicating whether auto-generated keys should be returned",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method with a constant of Statement.RETURN_GENERATED_KEYS"
        ],
        "return": [
          "a new \n\u003ccode\u003ePreparedStatement\u003c/code\u003e object, containing the pre-compiled SQL statement, that will have the capability of returning auto-generated keys"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.PreparedStatement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sql",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "columnIndexes",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "prepareStatement",
      "comment": "Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array. This array contains the indexes of the columns in the target table that contain the auto-generated keys that should be made available. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). An SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times. Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling getHoldability().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL statement that may contain one or more \u0027?\u0027 IN parameter placeholders",
          "\u003ccode\u003ecolumnIndexes\u003c/code\u003e - an array of column indexes indicating the columns that should be returned from the inserted row or rows"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a new \n\u003ccode\u003ePreparedStatement\u003c/code\u003e object, containing the pre-compiled statement, that is capable of returning the auto-generated keys designated by the given array of column indexes"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.PreparedStatement",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "sql",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "columnNames",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "prepareStatement",
      "comment": "Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array. This array contains the names of the columns in the target table that contain the auto-generated keys that should be returned. The driver will ignore the array if the SQL statement is not an INSERT statement, or an SQL statement able to return auto-generated keys (the list of such statements is vendor-specific). An SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times. Note: This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the PreparedStatement object is executed. This has no direct effect on users; however, it does affect which methods throw certain SQLExceptions. Result sets created using the returned PreparedStatement object will by default be type TYPE_FORWARD_ONLY and have a concurrency level of CONCUR_READ_ONLY. The holdability of the created result sets can be determined by calling getHoldability().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esql\u003c/code\u003e - an SQL statement that may contain one or more \u0027?\u0027 IN parameter placeholders",
          "\u003ccode\u003ecolumnNames\u003c/code\u003e - an array of column names indicating the columns that should be returned from the inserted row or rows"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a new \n\u003ccode\u003ePreparedStatement\u003c/code\u003e object, containing the pre-compiled statement, that is capable of returning the auto-generated keys designated by the given array of column names"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Clob",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createClob",
      "comment": "Constructs an object that implements the Clob interface. The object returned initially contains no data. The setAsciiStream, setCharacterStream and setString methods of the Clob interface may be used to add data to the Clob.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an object that implements the \n\u003ccode\u003eClob\u003c/code\u003e interface can not be constructed, this method is called on a closed connection or a database access error occurs.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this data type"
        ],
        "return": [
          "An object that implements the \n\u003ccode\u003eClob\u003c/code\u003e interface"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Blob",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createBlob",
      "comment": "Constructs an object that implements the Blob interface. The object returned initially contains no data. The setBinaryStream and setBytes methods of the Blob interface may be used to add data to the Blob.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an object that implements the \n\u003ccode\u003eBlob\u003c/code\u003e interface can not be constructed, this method is called on a closed connection or a database access error occurs.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this data type"
        ],
        "return": [
          "An object that implements the \n\u003ccode\u003eBlob\u003c/code\u003e interface"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.NClob",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createNClob",
      "comment": "Constructs an object that implements the NClob interface. The object returned initially contains no data. The setAsciiStream, setCharacterStream and setString methods of the NClob interface may be used to add data to the NClob.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an object that implements the \n\u003ccode\u003eNClob\u003c/code\u003e interface can not be constructed, this method is called on a closed connection or a database access error occurs.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this data type"
        ],
        "return": [
          "An object that implements the \n\u003ccode\u003eNClob\u003c/code\u003e interface"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.SQLXML",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createSQLXML",
      "comment": "Constructs an object that implements the SQLXML interface. The object returned initially contains no data. The createXmlStreamWriter object and setString method of the SQLXML interface may be used to add data to the SQLXML object.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an object that implements the \n\u003ccode\u003eSQLXML\u003c/code\u003e interface can not be constructed, this method is called on a closed connection or a database access error occurs.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this data type"
        ],
        "return": [
          "An object that implements the \n\u003ccode\u003eSQLXML\u003c/code\u003e interface"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "timeout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isValid",
      "comment": "Returns true if the connection has not been closed and is still valid. The driver shall submit a query on the connection or use some other mechanism that positively verifies the connection is still valid when this method is called. The query submitted by the driver to validate the connection shall be executed in the context of the current transaction.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/DatabaseMetaData.html#getClientInfoProperties()\"\u003e\u003ccode\u003eDatabaseMetaData.getClientInfoProperties()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - - The time in seconds to wait for the database operation used to validate the connection to complete. If the timeout period expires before the operation completes, this method returns false. A value of 0 indicates a timeout is not applied to the database operation."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the value supplied for \n\u003ccode\u003etimeout\u003c/code\u003e is less than 0"
        ],
        "return": [
          "true if the connection is valid, false otherwise"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLClientInfoException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClientInfo",
      "comment": "Sets the value of the client info property specified by name to the value specified by value. Applications may use the DatabaseMetaData.getClientInfoProperties method to determine the client info properties supported by the driver and the maximum length that may be specified for each property. The driver stores the value specified in a suitable location in the database. For example in a special register, session parameter, or system table column. For efficiency the driver may defer setting the value in the database until the next time a statement is executed or prepared. Other than storing the client information in the appropriate place in the database, these methods shall not alter the behavior of the connection in anyway. The values supplied to these methods are used for accounting, diagnostics and debugging purposes only. The driver shall generate a warning if the client info name specified is not recognized by the driver. If the value specified to this method is greater than the maximum length for the property the driver may either truncate the value and generate a warning or generate a SQLClientInfoException. If the driver generates a SQLClientInfoException, the value specified was not set on the connection. The following are standard client info properties. Drivers are not required to support these properties however if the driver supports a client info property that can be described by one of the standard properties, the standard property name should be used. ApplicationName - The name of the application currently utilizing the connection ClientUser - The name of the user that the application using the connection is performing work for. This may not be the same as the user name that was used in establishing the connection. ClientHostname - The hostname of the computer the application using the connection is running on.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the client info property to set",
          "\u003ccode\u003evalue\u003c/code\u003e - The value to set the client info property to. If the value is null, the current value of the specified property is cleared."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLClientInfoException.html\" title\u003d\"class in java.sql\"\u003eSQLClientInfoException\u003c/a\u003e\u003c/code\u003e - if the database server returns an error while setting the client info value on the database server or this method is called on a closed connection"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLClientInfoException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Properties",
            "type": "Class"
          },
          "name": "properties",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClientInfo",
      "comment": "Sets the value of the connection\u0027s client info properties. The Properties object contains the names and values of the client info properties to be set. The set of client info properties contained in the properties list replaces the current set of client info properties on the connection. If a property that is currently set on the connection is not present in the properties list, that property is cleared. Specifying an empty properties list will clear all of the properties on the connection. See setClientInfo (String, String) for more information. If an error occurs in setting any of the client info properties, a SQLClientInfoException is thrown. The SQLClientInfoException contains information indicating which client info properties were not set. The state of the client information is unknown because some databases do not allow multiple client info properties to be set atomically. For those databases, one or more properties may have been set before the error occurred.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setClientInfo(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003esetClientInfo(String, String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eproperties\u003c/code\u003e - the list of client info properties to set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLClientInfoException.html\" title\u003d\"class in java.sql\"\u003eSQLClientInfoException\u003c/a\u003e\u003c/code\u003e - if the database server returns an error while setting the clientInfo values on the database server or this method is called on a closed connection"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getClientInfo",
      "comment": "Returns the value of the client info property specified by name. This method may return null if the specified client info property has not been set and does not have a default value. This method will also return null if the specified client info property name is not supported by the driver. Applications may use the DatabaseMetaData.getClientInfoProperties method to determine the client info properties supported by the driver.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/DatabaseMetaData.html#getClientInfoProperties()\"\u003e\u003ccode\u003eDatabaseMetaData.getClientInfoProperties()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The name of the client info property to retrieve"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the database server returns an error when fetching the client info value from the database or this method is called on a closed connection"
        ],
        "return": [
          "The value of the client info property specified"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Properties",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getClientInfo",
      "comment": "Returns a list containing the name and current value of each client info property supported by the driver. The value of a client info property may be null if the property has not been set and does not have a default value.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the database server returns an error when fetching the client info values from the database or this method is called on a closed connection"
        ],
        "return": [
          "A \n\u003ccode\u003eProperties\u003c/code\u003e object that contains the name and current value of each of the client info properties supported by the driver."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Array",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "typeName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "elements",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createArrayOf",
      "comment": "Factory method for creating Array objects. Note: When createArrayOf is used to create an array object that maps to a primitive data type, then it is implementation-defined whether the Array object is an array of that primitive data type or an array of Object. Note: The JDBC driver is responsible for mapping the elements Object array to the default JDBC SQL type defined in java.sql.Types for the given class of Object. The default mapping is specified in Appendix B of the JDBC specification. If the resulting JDBC type is not the appropriate type for the given typeName then it is implementation defined whether an SQLException is thrown or the driver supports the resulting conversion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etypeName\u003c/code\u003e - the SQL name of the type the elements of the array map to. The typeName is a database-specific name which may be the name of a built-in type, a user-defined type or a standard SQL type supported by this database. This is the value returned by \n\u003ccode\u003eArray.getBaseTypeName\u003c/code\u003e",
          "\u003ccode\u003eelements\u003c/code\u003e - the elements that populate the returned object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database error occurs, the JDBC type is not appropriate for the typeName and the conversion is not supported, the typeName is null or this method is called on a closed connection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this data type"
        ],
        "return": [
          "an Array object whose elements map to the specified SQL type"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Struct",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "typeName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "attributes",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "createStruct",
      "comment": "Factory method for creating Struct objects.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etypeName\u003c/code\u003e - the SQL type name of the SQL structured type that this \n\u003ccode\u003eStruct\u003c/code\u003e object maps to. The typeName is the name of a user-defined type that has been defined for this database. It is the value returned by \n\u003ccode\u003eStruct.getSQLTypeName\u003c/code\u003e.",
          "\u003ccode\u003eattributes\u003c/code\u003e - the attributes that populate the returned object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database error occurs, the typeName is null or this method is called on a closed connection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this data type"
        ],
        "return": [
          "a Struct object that maps to the given SQL type and is populated with the given attributes"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "schema",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSchema",
      "comment": "Sets the given schema name to access. If the driver does not support schemas, it will silently ignore this request. Calling setSchema has no effect on previously created or prepared Statement objects. It is implementation defined whether a DBMS prepare operation takes place immediately when the Connection method prepareStatement or prepareCall is invoked. For maximum portability, setSchema should be called before a Statement is created or prepared.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#getSchema()\"\u003e\u003ccode\u003egetSchema()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eschema\u003c/code\u003e - the name of a schema in which to work"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSchema",
      "comment": "Retrieves this Connection object\u0027s current schema name.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setSchema(java.lang.String)\"\u003e\u003ccode\u003esetSchema(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed connection"
        ],
        "return": [
          "the current schema name or \n\u003ccode\u003enull\u003c/code\u003e if there is none"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "abort",
      "comment": "Terminates an open connection. Calling abort results in: The connection marked as closed Closes any physical connection to the database Releases resources used by the connection Insures that any thread that is currently accessing the connection will either progress to completion or throw an SQLException. Calling abort marks the connection closed and releases any resources. Calling abort on a closed connection is a no-op. It is possible that the aborting and releasing of the resources that are held by the connection can take an extended period of time. When the abort method returns, the connection will have been marked as closed and the Executor that was passed as a parameter to abort may still be executing tasks to release resources. This method checks to see that there is an SQLPermission object before allowing the method to proceed. If a SecurityManager exists and its checkPermission method denies calling abort, this method throws a java.lang.SecurityException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Executor.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eExecutor\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eexecutor\u003c/code\u003e - The \n\u003ccode\u003eExecutor\u003c/code\u003e implementation which will be used by \n\u003ccode\u003eabort\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or the \n\u003ccode\u003eexecutor\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e,",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method denies calling \n\u003ccode\u003eabort\u003c/code\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "milliseconds",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNetworkTimeout",
      "comment": "Sets the maximum period a Connection or objects created from the Connection will wait for the database to reply to any one request. If any request remains unanswered, the waiting method will return with a SQLException, and the Connection or objects created from the Connection will be marked as closed. Any subsequent use of the objects, with the exception of the close, isClosed or Connection.isValid methods, will result in a SQLException. Note: This method is intended to address a rare but serious condition where network partitions can cause threads issuing JDBC calls to hang uninterruptedly in socket reads, until the OS TCP-TIMEOUT (typically 10 minutes). This method is related to the abort() method which provides an administrator thread a means to free any such threads in cases where the JDBC connection is accessible to the administrator thread. The setNetworkTimeout method will cover cases where there is no administrator thread, or it has no access to the connection. This method is severe in it\u0027s effects, and should be given a high enough value so it is never triggered before any more normal timeouts, such as transaction timeouts. JDBC driver implementations may also choose to support the setNetworkTimeout method to impose a limit on database response time, in environments where no network is present. Drivers may internally implement some or all of their API calls with multiple internal driver-database transmissions, and it is left to the driver implementation to determine whether the limit will be applied always to the response to the API call, or to any single request made during the API call. This method can be invoked more than once, such as to set a limit for an area of JDBC code, and to reset to the default on exit from this area. Invocation of this method has no impact on already outstanding requests. The Statement.setQueryTimeout() timeout value is independent of the timeout value specified in setNetworkTimeout. If the query timeout expires before the network timeout then the statement execution will be canceled. If the network is still active the result will be that both the statement and connection are still usable. However if the network timeout expires before the query timeout or if the statement timeout fails due to network problems, the connection will be marked as closed, any resources held by the connection will be released and both the connection and statement will be unusable. When the driver determines that the setNetworkTimeout timeout value has expired, the JDBC driver marks the connection closed and releases any resources held by the connection. This method checks to see that there is an SQLPermission object before allowing the method to proceed. If a SecurityManager exists and its checkPermission method denies calling setNetworkTimeout, this method throws a java.lang.SecurityException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html#setQueryTimeout(int)\"\u003e\u003ccode\u003eStatement.setQueryTimeout(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#getNetworkTimeout()\"\u003e\u003ccode\u003egetNetworkTimeout()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#abort(java.util.concurrent.Executor)\"\u003e\u003ccode\u003eabort(java.util.concurrent.Executor)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Executor.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eExecutor\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eexecutor\u003c/code\u003e - The \n\u003ccode\u003eExecutor\u003c/code\u003e implementation which will be used by \n\u003ccode\u003esetNetworkTimeout\u003c/code\u003e.",
          "\u003ccode\u003emilliseconds\u003c/code\u003e - The time in milliseconds to wait for the database operation to complete. If the JDBC driver does not support milliseconds, the JDBC driver will round the value up to the nearest second. If the timeout period expires before the operation completes, a SQLException will be thrown. A value of 0 indicates that there is not timeout for database operations."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs, this method is called on a closed connection, the \n\u003ccode\u003eexecutor\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or the value specified for \n\u003ccode\u003eseconds\u003c/code\u003e is less than 0.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method denies calling \n\u003ccode\u003esetNetworkTimeout\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNetworkTimeout",
      "comment": "Retrieves the number of milliseconds the driver will wait for a database request to complete. If the limit is exceeded, a SQLException is thrown.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#setNetworkTimeout(java.util.concurrent.Executor,int)\"\u003e\u003ccode\u003esetNetworkTimeout(java.util.concurrent.Executor, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eConnection\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the current timeout limit in milliseconds; zero means there is no limit"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "beginRequest",
      "comment": "Hints to the driver that a request, an independent unit of work, is beginning on this connection. Each request is independent of all other requests with regard to state local to the connection either on the client or the server. Work done between beginRequest, endRequest pairs does not depend on any other work done on the connection either as part of another request or outside of any request. A request may include multiple transactions. There may be dependencies on committed database state as that is not local to the connection. Local state is defined as any state associated with a Connection that is local to the current Connection either in the client or the database that is not transparently reproducible. Calls to beginRequest and endRequest are not nested. Multiple calls to beginRequest without an intervening call to endRequest is not an error. The first beginRequest call marks the start of the request and subsequent calls are treated as a no-op Use of beginRequest and endRequest is optional, vendor specific and should largely be transparent. In particular implementations may detect conditions that indicate dependence on other work such as an open transaction. It is recommended though not required that implementations throw a SQLException if there is an active transaction and beginRequest is called. Using these methods may improve performance or provide other benefits. Consult your vendors documentation for additional information. It is recommended to enclose each unit of work in beginRequest, endRequest pairs such that there is no open transaction at the beginning or end of the request and no dependency on local state that crosses request boundaries. Committed database state is not local.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is a no-op."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#endRequest()\"\u003e\u003ccode\u003eendRequest()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/PooledConnection.html\" title\u003d\"interface in javax.sql\"\u003e\u003ccode\u003ePooledConnection\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method is to be used by Connection pooling managers. \n\u003cp\u003e The pooling manager should call \u003ccode\u003ebeginRequest\u003c/code\u003e on the underlying connection prior to returning a connection to the caller. \u003c/p\u003e\n\u003cp\u003e The pooling manager does not need to call \u003ccode\u003ebeginRequest\u003c/code\u003e if: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe connection pool caches \u003ccode\u003ePooledConnection\u003c/code\u003e objects\u003c/li\u003e \n \u003cli\u003eReturns a logical connection handle when \u003ccode\u003egetConnection\u003c/code\u003e is called by the application\u003c/li\u003e \n \u003cli\u003eThe logical \u003ccode\u003eConnection\u003c/code\u003e is closed by calling \u003ccode\u003eConnection.close\u003c/code\u003e prior to returning the \u003ccode\u003ePooledConnection\u003c/code\u003e to the cache.\u003c/li\u003e \n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "endRequest",
      "comment": "Hints to the driver that a request, an independent unit of work, has completed. Calls to beginRequest and endRequest are not nested. Multiple calls to endRequest without an intervening call to beginRequest is not an error. The first endRequest call marks the request completed and subsequent calls are treated as a no-op. If endRequest is called without an initial call to beginRequest is a no-op. The exact behavior of this method is vendor specific. In particular implementations may detect conditions that indicate dependence on other work such as an open transaction. It is recommended though not required that implementations throw a SQLException if there is an active transaction and endRequest is called.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is a no-op."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#beginRequest()\"\u003e\u003ccode\u003ebeginRequest()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/javax/sql/PooledConnection.html\" title\u003d\"interface in javax.sql\"\u003e\u003ccode\u003ePooledConnection\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method is to be used by Connection pooling managers. \n\u003cp\u003e The pooling manager should call \u003ccode\u003eendRequest\u003c/code\u003e on the underlying connection when the applications returns the connection back to the connection pool. \u003c/p\u003e\n\u003cp\u003e The pooling manager does not need to call \u003ccode\u003eendRequest\u003c/code\u003e if: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe connection pool caches \u003ccode\u003ePooledConnection\u003c/code\u003e objects\u003c/li\u003e \n \u003cli\u003eReturns a logical connection handle when \u003ccode\u003egetConnection\u003c/code\u003e is called by the application\u003c/li\u003e \n \u003cli\u003eThe logical \u003ccode\u003eConnection\u003c/code\u003e is closed by calling \u003ccode\u003eConnection.close\u003c/code\u003e prior to returning the \u003ccode\u003ePooledConnection\u003c/code\u003e to the cache.\u003c/li\u003e \n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.sql.ShardingKey",
            "type": "Class"
          },
          "name": "shardingKey",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.sql.ShardingKey",
            "type": "Class"
          },
          "name": "superShardingKey",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "timeout",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShardingKeyIfValid",
      "comment": "Sets and validates the sharding keys for this connection. A null value may be specified for the sharding Key. The validity of a null sharding key is vendor-specific. Consult your vendor\u0027s documentation for additional information.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation will throw a \n\u003ccode\u003eSQLFeatureNotSupportedException\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ShardingKey.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eShardingKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ShardingKeyBuilder.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eShardingKeyBuilder\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method validates that the sharding keys are valid for the \n\u003ccode\u003eConnection\u003c/code\u003e. The timeout value indicates how long the driver should wait for the \n\u003ccode\u003eConnection\u003c/code\u003e to verify that the sharding key is valid before \n\u003ccode\u003esetShardingKeyIfValid\u003c/code\u003e returns false."
        ],
        "param": [
          "\u003ccode\u003eshardingKey\u003c/code\u003e - the sharding key to be validated against this connection. The sharding key may be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003esuperShardingKey\u003c/code\u003e - the super sharding key to be validated against this connection. The super sharding key may be \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003etimeout\u003c/code\u003e - time in seconds before which the validation process is expected to be completed, otherwise the validation process is aborted. A value of 0 indicates the validation process will not time out."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs while performing this validation; a \n\u003ccode\u003esuperSharedingKey\u003c/code\u003e is specified without a \n\u003ccode\u003eshardingKey\u003c/code\u003e; this method is called on a closed \n\u003ccode\u003econnection\u003c/code\u003e; or the \n\u003ccode\u003etimeout\u003c/code\u003e value is negative.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the driver does not support sharding"
        ],
        "return": [
          "true if the connection is valid and the sharding keys are valid and set on this connection; false if the sharding keys are not valid or the timeout period expires before the operation completes."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.sql.ShardingKey",
            "type": "Class"
          },
          "name": "shardingKey",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "timeout",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShardingKeyIfValid",
      "comment": "Sets and validates the sharding key for this connection. A null value may be specified for the sharding Key. The validity of a null sharding key is vendor-specific. Consult your vendor\u0027s documentation for additional information.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation will throw a \n\u003ccode\u003eSQLFeatureNotSupportedException\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ShardingKey.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eShardingKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ShardingKeyBuilder.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eShardingKeyBuilder\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method validates that the sharding key is valid for the \n\u003ccode\u003eConnection\u003c/code\u003e. The timeout value indicates how long the driver should wait for the \n\u003ccode\u003eConnection\u003c/code\u003e to verify that the sharding key is valid before \n\u003ccode\u003esetShardingKeyIfValid\u003c/code\u003e returns false."
        ],
        "param": [
          "\u003ccode\u003eshardingKey\u003c/code\u003e - the sharding key to be validated against this connection. The sharding key may be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003etimeout\u003c/code\u003e - time in seconds before which the validation process is expected to be completed,else the validation process is aborted. A value of 0 indicates the validation process will not time out."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if there is an error while performing this validation; this method is called on a closed \n\u003ccode\u003econnection\u003c/code\u003e; or the \n\u003ccode\u003etimeout\u003c/code\u003e value is negative.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the driver does not support sharding"
        ],
        "return": [
          "true if the connection is valid and the sharding key is valid to be set on this connection; false if the sharding key is not valid or the timeout period expires before the operation completes."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.sql.ShardingKey",
            "type": "Class"
          },
          "name": "shardingKey",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.sql.ShardingKey",
            "type": "Class"
          },
          "name": "superShardingKey",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShardingKey",
      "comment": "Specifies a shardingKey and superShardingKey to use with this Connection",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation will throw a \n\u003ccode\u003eSQLFeatureNotSupportedException\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ShardingKey.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eShardingKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ShardingKeyBuilder.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eShardingKeyBuilder\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method sets the specified sharding keys but does not require a round trip to the database to validate that the sharding keys are valid for the \n\u003ccode\u003eConnection\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003eshardingKey\u003c/code\u003e - the sharding key to set on this connection. The sharding key may be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003esuperShardingKey\u003c/code\u003e - the super sharding key to set on this connection. The super sharding key may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs setting the sharding keys; this method is called on a closed \n\u003ccode\u003econnection\u003c/code\u003e; or a \n\u003ccode\u003esuperSharedingKey\u003c/code\u003e is specified without a \n\u003ccode\u003eshardingKey\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the driver does not support sharding"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.sql.ShardingKey",
            "type": "Class"
          },
          "name": "shardingKey",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShardingKey",
      "comment": "Specifies a shardingKey to use with this Connection",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation will throw a \n\u003ccode\u003eSQLFeatureNotSupportedException\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ShardingKey.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eShardingKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ShardingKeyBuilder.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eShardingKeyBuilder\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method sets the specified sharding key but does not require a round trip to the database to validate that the sharding key is valid for the \n\u003ccode\u003eConnection\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003eshardingKey\u003c/code\u003e - the sharding key to set on this connection. The sharding key may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if an error occurs setting the sharding key; or this method is called on a closed \n\u003ccode\u003econnection\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the driver does not support sharding"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.sql.Connection",
  "comment": "\u003cp\u003eA connection (session) with a specific database. SQL statements are executed and results are returned within the context of a connection. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eConnection\u003c/code\u003e object\u0027s database is able to provide information describing its tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on. This information is obtained with the \u003ccode\u003egetMetaData\u003c/code\u003e method. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eNote:\u003c/b\u003e When configuring a \u003ccode\u003eConnection\u003c/code\u003e, JDBC applications should use the appropriate \u003ccode\u003eConnection\u003c/code\u003e method such as \u003ccode\u003esetAutoCommit\u003c/code\u003e or \u003ccode\u003esetTransactionIsolation\u003c/code\u003e. Applications should not invoke SQL commands directly to change the connection\u0027s configuration when there is a JDBC method available. By default a \u003ccode\u003eConnection\u003c/code\u003e object is in auto-commit mode, which means that it automatically commits changes after executing each statement. If auto-commit mode has been disabled, the method \u003ccode\u003ecommit\u003c/code\u003e must be called explicitly in order to commit changes; otherwise, database changes will not be saved. \u003c/p\u003e\n\u003cp\u003e A new \u003ccode\u003eConnection\u003c/code\u003e object created using the JDBC 2.1 core API has an initially empty type map associated with it. A user may enter a custom mapping for a UDT in this type map. When a UDT is retrieved from a data source with the method \u003ccode\u003eResultSet.getObject\u003c/code\u003e, the \u003ccode\u003egetObject\u003c/code\u003e method will check the connection\u0027s type map to see if there is an entry for that UDT. If so, the \u003ccode\u003egetObject\u003c/code\u003e method will map the UDT to the class indicated. If there is no entry, the UDT will be mapped using the standard mapping. \u003c/p\u003e\n\u003cp\u003e A user may create a new type map, which is a \u003ccode\u003ejava.util.Map\u003c/code\u003e object, make an entry in it, and pass it to the \u003ccode\u003ejava.sql\u003c/code\u003e methods that can perform custom mapping. In this case, the method will use the given type map instead of the one associated with the connection. \u003c/p\u003e\n\u003cp\u003e For example, the following code fragment specifies that the SQL type \u003ccode\u003eATHLETES\u003c/code\u003e will be mapped to the class \u003ccode\u003eAthletes\u003c/code\u003e in the Java programming language. The code fragment retrieves the type map for the \u003ccode\u003eConnection \u003c/code\u003e object \u003ccode\u003econ\u003c/code\u003e, inserts the entry into it, and then sets the type map with the new entry as the connection\u0027s type map. \u003c/p\u003e\n\u003cpre\u003e      java.util.Map map \u003d con.getTypeMap();\n      map.put(\"mySchemaName.ATHLETES\", Class.forName(\"Athletes\"));\n      con.setTypeMap(map);\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/DriverManager.html#getConnection(java.lang.String,java.util.Properties)\"\u003e\u003ccode\u003eDriverManager.getConnection(java.lang.String, java.util.Properties)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Statement.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eStatement\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eResultSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/DatabaseMetaData.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eDatabaseMetaData\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}