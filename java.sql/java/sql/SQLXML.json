{
  "packageName": "java.sql",
  "simpleName": "SQLXML",
  "moduleName": "java.sql",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "free",
      "comment": "This method closes this object and releases the resources that it held. The SQL XML object becomes invalid and neither readable or writable when this method is called. After free has been called, any attempt to invoke a method other than free will result in a SQLException being thrown. If free is called multiple times, the subsequent calls to free are treated as a no-op.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if there is an error freeing the XML value.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBinaryStream",
      "comment": "Retrieves the XML value designated by this SQLXML instance as a stream. The bytes of the input stream are interpreted according to appendix F of the XML 1.0 specification. The behavior of this method is the same as ResultSet.getBinaryStream() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if there is an error processing the XML value. An exception is thrown if the state is not readable.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a stream containing the XML data."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.OutputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBinaryStream",
      "comment": "Retrieves a stream that can be used to write the XML value that this SQLXML instance represents. The stream begins at position 0. The bytes of the stream are interpreted according to appendix F of the XML 1.0 specification The behavior of this method is the same as ResultSet.updateBinaryStream() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not writable when this method is called and may also become not readable depending on implementation.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if there is an error processing the XML value. An exception is thrown if the state is not writable.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a stream to which data can be written."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCharacterStream",
      "comment": "Retrieves the XML value designated by this SQLXML instance as a java.io.Reader object. The format of this stream is defined by org.xml.sax.InputSource, where the characters in the stream represent the unicode code points for XML according to section 2 and appendix B of the XML 1.0 specification. Although an encoding declaration other than unicode may be present, the encoding of the stream is unicode. The behavior of this method is the same as ResultSet.getCharacterStream() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if there is an error processing the XML value. The getCause() method of the exception may provide a more detailed exception, for example, if the stream does not contain valid characters. An exception is thrown if the state is not readable.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a stream containing the XML data."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Writer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterStream",
      "comment": "Retrieves a stream to be used to write the XML value that this SQLXML instance represents. The format of this stream is defined by org.xml.sax.InputSource, where the characters in the stream represent the unicode code points for XML according to section 2 and appendix B of the XML 1.0 specification. Although an encoding declaration other than unicode may be present, the encoding of the stream is unicode. The behavior of this method is the same as ResultSet.updateCharacterStream() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not writable when this method is called and may also become not readable depending on implementation.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if there is an error processing the XML value. The getCause() method of the exception may provide a more detailed exception, for example, if the stream does not contain valid characters. An exception is thrown if the state is not writable.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a stream to which data can be written."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getString",
      "comment": "Returns a string representation of the XML value designated by this SQLXML instance. The format of this String is defined by org.xml.sax.InputSource, where the characters in the stream represent the unicode code points for XML according to section 2 and appendix B of the XML 1.0 specification. Although an encoding declaration other than unicode may be present, the encoding of the String is unicode. The behavior of this method is the same as ResultSet.getString() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if there is an error processing the XML value. The getCause() method of the exception may provide a more detailed exception, for example, if the stream does not contain valid characters. An exception is thrown if the state is not readable.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a string representation of the XML value designated by this SQLXML instance."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setString",
      "comment": "Sets the XML value designated by this SQLXML instance to the given String representation. The format of this String is defined by org.xml.sax.InputSource, where the characters in the stream represent the unicode code points for XML according to section 2 and appendix B of the XML 1.0 specification. Although an encoding declaration other than unicode may be present, the encoding of the String is unicode. The behavior of this method is the same as ResultSet.updateString() when the designated column of the ResultSet has a type java.sql.Types of SQLXML. The SQL XML object becomes not writable when this method is called and may also become not readable depending on implementation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the XML value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if there is an error processing the XML value. The getCause() method of the exception may provide a more detailed exception, for example, if the stream does not contain valid characters. An exception is thrown if the state is not writable.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "sourceClass"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "javax.xml.transform.Source",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSource",
      "comment": "Returns a Source for reading the XML value designated by this SQLXML instance. Sources are used as inputs to XML parsers and XSLT transformers. Sources for XML parsers will have namespace processing on by default. The systemID of the Source is implementation dependent. The SQL XML object becomes not readable when this method is called and may also become not writable depending on implementation. Note that SAX is a callback architecture, so a returned SAXSource should then be set with a content handler that will receive the SAX events from parsing. The content handler will receive callbacks based on the contents of the XML.    SAXSource saxSource \u003d sqlxml.getSource(SAXSource.class);\n   XMLReader xmlReader \u003d saxSource.getXMLReader();\n   xmlReader.setContentHandler(myHandler);\n   xmlReader.parse(saxSource.getInputSource());",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the class modeled by this Class object"
        ],
        "param": [
          "\u003ccode\u003esourceClass\u003c/code\u003e - The class of the source, or null. If the class is null, a vendor specific Source implementation will be returned. The following classes are supported at a minimum: \n\u003cpre\u003e   javax.xml.transform.dom.DOMSource - returns a DOMSource\n   javax.xml.transform.sax.SAXSource - returns a SAXSource\n   javax.xml.transform.stax.StAXSource - returns a StAXSource\n   javax.xml.transform.stream.StreamSource - returns a StreamSource\n \u003c/pre\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if there is an error processing the XML value or if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not readable.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a Source for reading the XML value."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.sql.SQLException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "resultClass"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "javax.xml.transform.Result",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setResult",
      "comment": "Returns a Result for setting the XML value designated by this SQLXML instance. The systemID of the Result is implementation dependent. The SQL XML object becomes not writable when this method is called and may also become not readable depending on implementation. Note that SAX is a callback architecture and the returned SAXResult has a content handler assigned that will receive the SAX events based on the contents of the XML. Call the content handler with the contents of the XML document to assign the values.    SAXResult saxResult \u003d sqlxml.setResult(SAXResult.class);\n   ContentHandler contentHandler \u003d saxResult.getXMLReader().getContentHandler();\n   contentHandler.startDocument();\n   // set the XML elements and attributes into the result\n   contentHandler.endDocument();",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the class modeled by this Class object"
        ],
        "param": [
          "\u003ccode\u003eresultClass\u003c/code\u003e - The class of the result, or null. If resultClass is null, a vendor specific Result implementation will be returned. The following classes are supported at a minimum: \n\u003cpre\u003e   javax.xml.transform.dom.DOMResult - returns a DOMResult\n   javax.xml.transform.sax.SAXResult - returns a SAXResult\n   javax.xml.transform.stax.StAXResult - returns a StAXResult\n   javax.xml.transform.stream.StreamResult - returns a StreamResult\n \u003c/pre\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if there is an error processing the XML value or if this feature is not supported. The getCause() method of the exception may provide a more detailed exception, for example, if an XML parser exception occurs. An exception is thrown if the state is not writable.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "Returns a Result for setting the XML value."
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.sql.SQLXML",
  "comment": "The mapping in the JavaTM programming language for the SQL XML type. XML is a built-in type that stores an XML value as a column value in a row of a database table. By default drivers implement an SQLXML object as a logical pointer to the XML data rather than the data itself. An SQLXML object is valid for the duration of the transaction in which it was created. \n\u003cp\u003e The SQLXML interface provides methods for accessing the XML value as a String, a Reader or Writer, or as a Stream. The XML value may also be accessed through a Source or set as a Result, which are used with XML Parser APIs such as DOM, SAX, and StAX, as well as with XSLT transforms and XPath evaluations. \u003c/p\u003e\n\u003cp\u003e Methods in the interfaces ResultSet, CallableStatement, and PreparedStatement, such as getSQLXML allow a programmer to access an XML value. In addition, this interface has methods for updating an XML value. \u003c/p\u003e\n\u003cp\u003e The XML value of the SQLXML instance may be obtained as a BinaryStream using \u003c/p\u003e\n\u003cpre\u003e   SQLXML sqlxml \u003d resultSet.getSQLXML(column);\n   InputStream binaryStream \u003d sqlxml.getBinaryStream();\n \u003c/pre\u003e For example, to parse an XML value with a DOM parser: \n\u003cpre\u003e   DocumentBuilder parser \u003d DocumentBuilderFactory.newInstance().newDocumentBuilder();\n   Document result \u003d parser.parse(binaryStream);\n \u003c/pre\u003e or to parse an XML value with a SAX parser to your handler: \n\u003cpre\u003e   SAXParser parser \u003d SAXParserFactory.newInstance().newSAXParser();\n   parser.parse(binaryStream, myHandler);\n \u003c/pre\u003e or to parse an XML value with a StAX parser: \n\u003cpre\u003e   XMLInputFactory factory \u003d XMLInputFactory.newInstance();\n   XMLStreamReader streamReader \u003d factory.createXMLStreamReader(binaryStream);\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Because databases may use an optimized representation for the XML, accessing the value through getSource() and setResult() can lead to improved processing performance without serializing to a stream representation and parsing the XML. \u003c/p\u003e\n\u003cp\u003e For example, to obtain a DOM Document Node: \u003c/p\u003e\n\u003cpre\u003e   DOMSource domSource \u003d sqlxml.getSource(DOMSource.class);\n   Document document \u003d (Document) domSource.getNode();\n \u003c/pre\u003e or to set the value to a DOM Document Node to myNode: \n\u003cpre\u003e   DOMResult domResult \u003d sqlxml.setResult(DOMResult.class);\n   domResult.setNode(myNode);\n \u003c/pre\u003e or, to send SAX events to your handler: \n\u003cpre\u003e   SAXSource saxSource \u003d sqlxml.getSource(SAXSource.class);\n   XMLReader xmlReader \u003d saxSource.getXMLReader();\n   xmlReader.setContentHandler(myHandler);\n   xmlReader.parse(saxSource.getInputSource());\n \u003c/pre\u003e or, to set the result value from SAX events: \n\u003cpre\u003e   SAXResult saxResult \u003d sqlxml.setResult(SAXResult.class);\n   ContentHandler contentHandler \u003d saxResult.getHandler();\n   contentHandler.startDocument();\n   // set the XML elements and attributes into the result\n   contentHandler.endDocument();\n \u003c/pre\u003e or, to obtain StAX events: \n\u003cpre\u003e   StAXSource staxSource \u003d sqlxml.getSource(StAXSource.class);\n   XMLStreamReader streamReader \u003d staxSource.getXMLStreamReader();\n \u003c/pre\u003e or, to set the result value from StAX events: \n\u003cpre\u003e   StAXResult staxResult \u003d sqlxml.setResult(StAXResult.class);\n   XMLStreamWriter streamWriter \u003d staxResult.getXMLStreamWriter();\n \u003c/pre\u003e or, to perform XSLT transformations on the XML value using the XSLT in xsltFile output to file resultFile: \n\u003cpre\u003e   File xsltFile \u003d new File(\"a.xslt\");\n   File myFile \u003d new File(\"result.xml\");\n   Transformer xslt \u003d TransformerFactory.newInstance().newTransformer(new StreamSource(xsltFile));\n   Source source \u003d sqlxml.getSource(null);\n   Result result \u003d new StreamResult(myFile);\n   xslt.transform(source, result);\n \u003c/pre\u003e or, to evaluate an XPath expression on the XML value: \n\u003cpre\u003e   XPath xpath \u003d XPathFactory.newInstance().newXPath();\n   DOMSource domSource \u003d sqlxml.getSource(DOMSource.class);\n   Document document \u003d (Document) domSource.getNode();\n   String expression \u003d \"/foo/@bar\";\n   String barValue \u003d xpath.evaluate(expression, document);\n \u003c/pre\u003e To set the XML value to be the result of an XSLT transform: \n\u003cpre\u003e   File sourceFile \u003d new File(\"source.xml\");\n   Transformer xslt \u003d TransformerFactory.newInstance().newTransformer(new StreamSource(xsltFile));\n   Source streamSource \u003d new StreamSource(sourceFile);\n   Result result \u003d sqlxml.setResult(null);\n   xslt.transform(streamSource, result);\n \u003c/pre\u003e Any Source can be transformed to a Result using the identity transform specified by calling newTransformer(): \n\u003cpre\u003e   Transformer identity \u003d TransformerFactory.newInstance().newTransformer();\n   Source source \u003d sqlxml.getSource(null);\n   File myFile \u003d new File(\"result.xml\");\n   Result result \u003d new StreamResult(myFile);\n   identity.transform(source, result);\n \u003c/pre\u003e To write the contents of a Source to standard output: \n\u003cpre\u003e   Transformer identity \u003d TransformerFactory.newInstance().newTransformer();\n   Source source \u003d sqlxml.getSource(null);\n   Result result \u003d new StreamResult(System.out);\n   identity.transform(source, result);\n \u003c/pre\u003e To create a DOMSource from a DOMResult: \n\u003cpre\u003e    DOMSource domSource \u003d new DOMSource(domResult.getNode());\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Incomplete or invalid XML values may cause an SQLException when set or the exception may occur when execute() occurs. All streams must be closed before execute() occurs or an SQLException will be thrown. \u003c/p\u003e\n\u003cp\u003e Reading and writing XML values to or from an SQLXML object can happen at most once. The conceptual states of readable and not readable determine if one of the reading APIs will return a value or throw an exception. The conceptual states of writable and not writable determine if one of the writing APIs will set a value or throw an exception. \u003c/p\u003e\n\u003cp\u003e The state moves from readable to not readable once free() or any of the reading APIs are called: getBinaryStream(), getCharacterStream(), getSource(), and getString(). Implementations may also change the state to not writable when this occurs. \u003c/p\u003e\n\u003cp\u003e The state moves from writable to not writable once free() or any of the writing APIs are called: setBinaryStream(), setCharacterStream(), setResult(), and setString(). Implementations may also change the state to not readable when this occurs. \u003c/p\u003e\n\u003cp\u003e All methods on the \u003ccode\u003eSQLXML\u003c/code\u003e interface must be fully implemented if the JDBC driver supports the data type.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/parsers/package-summary.html\"\u003e\u003ccode\u003ejavax.xml.parsers\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/stream/package-summary.html\"\u003e\u003ccode\u003ejavax.xml.stream\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/transform/package-summary.html\"\u003e\u003ccode\u003ejavax.xml.transform\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.xml/javax/xml/xpath/package-summary.html\"\u003e\u003ccode\u003ejavax.xml.xpath\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.6"
    ]
  }
}