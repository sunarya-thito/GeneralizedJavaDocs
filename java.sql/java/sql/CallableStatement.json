{
  "packageName": "java.sql",
  "simpleName": "CallableStatement",
  "moduleName": "java.sql",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.sql.PreparedStatement",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the OUT parameter in ordinal position parameterIndex to the JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. If the JDBC type expected to be returned to this output parameter is specific to this particular database, sqlType should be java.sql.Types.OTHER. The method getObject(int) retrieves the value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on",
          "\u003ccode\u003esqlType\u003c/code\u003e - the JDBC type code defined by \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e. If the parameter is of JDBC type \n\u003ccode\u003eNUMERIC\u003c/code\u003e or \n\u003ccode\u003eDECIMAL\u003c/code\u003e, the version of \n\u003ccode\u003eregisterOutParameter\u003c/code\u003e that accepts a scale value should be used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the parameter in ordinal position parameterIndex to be of JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. This version of registerOutParameter should be used when the parameter is of JDBC type NUMERIC or DECIMAL.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on",
          "\u003ccode\u003esqlType\u003c/code\u003e - the SQL type code defined by \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e.",
          "\u003ccode\u003escale\u003c/code\u003e - the desired number of digits to the right of the decimal point. It must be greater than or equal to zero."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "wasNull",
      "comment": "Retrieves whether the last OUT parameter read had the value of SQL NULL. Note that this method should be called only after calling a getter method; otherwise, there is no value to use in determining whether it is null or not.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the last parameter read was SQL \n\u003ccode\u003eNULL\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getString",
      "comment": "Retrieves the value of the designated JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as a String in the Java programming language. For the fixed-length type JDBC CHAR, the String object returned has exactly the same value the SQL CHAR value had in the database, including any padding added by the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setString(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003esetString(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBoolean",
      "comment": "Retrieves the value of the designated JDBC BIT or BOOLEAN parameter as a boolean in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setBoolean(java.lang.String,boolean)\"\u003e\u003ccode\u003esetBoolean(java.lang.String, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003efalse\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getByte",
      "comment": "Retrieves the value of the designated JDBC TINYINT parameter as a byte in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setByte(java.lang.String,byte)\"\u003e\u003ccode\u003esetByte(java.lang.String, byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getShort",
      "comment": "Retrieves the value of the designated JDBC SMALLINT parameter as a short in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setShort(java.lang.String,short)\"\u003e\u003ccode\u003esetShort(java.lang.String, short)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getInt",
      "comment": "Retrieves the value of the designated JDBC INTEGER parameter as an int in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setInt(java.lang.String,int)\"\u003e\u003ccode\u003esetInt(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLong",
      "comment": "Retrieves the value of the designated JDBC BIGINT parameter as a long in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setLong(java.lang.String,long)\"\u003e\u003ccode\u003esetLong(java.lang.String, long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFloat",
      "comment": "Retrieves the value of the designated JDBC FLOAT parameter as a float in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setFloat(java.lang.String,float)\"\u003e\u003ccode\u003esetFloat(java.lang.String, float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDouble",
      "comment": "Retrieves the value of the designated JDBC DOUBLE parameter as a double in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setDouble(java.lang.String,double)\"\u003e\u003ccode\u003esetDouble(java.lang.String, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBigDecimal",
      "comment": "Retrieves the value of the designated JDBC NUMERIC parameter as a java.math.BigDecimal object with scale digits to the right of the decimal point.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "1.2"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setBigDecimal(java.lang.String,java.math.BigDecimal)\"\u003e\u003ccode\u003esetBigDecimal(java.lang.String, java.math.BigDecimal)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on",
          "\u003ccode\u003escale\u003c/code\u003e - the number of digits to the right of the decimal point"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBytes",
      "comment": "Retrieves the value of the designated JDBC BINARY or VARBINARY parameter as an array of byte values in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setBytes(java.lang.String,byte%5B%5D)\"\u003e\u003ccode\u003esetBytes(java.lang.String, byte[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Date",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDate",
      "comment": "Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setDate(java.lang.String,java.sql.Date)\"\u003e\u003ccode\u003esetDate(java.lang.String, java.sql.Date)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Time",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTime",
      "comment": "Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setTime(java.lang.String,java.sql.Time)\"\u003e\u003ccode\u003esetTime(java.lang.String, java.sql.Time)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Timestamp",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTimestamp",
      "comment": "Retrieves the value of the designated JDBC TIMESTAMP parameter as a java.sql.Timestamp object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setTimestamp(java.lang.String,java.sql.Timestamp)\"\u003e\u003ccode\u003esetTimestamp(java.lang.String, java.sql.Timestamp)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObject",
      "comment": "Retrieves the value of the designated parameter as an Object in the Java programming language. If the value is an SQL NULL, the driver returns a Java null. This method returns a Java object whose type corresponds to the JDBC type that was registered for this parameter using the method registerOutParameter. By registering the target JDBC type as java.sql.Types.OTHER, this method can be used to read database-specific abstract data types.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setObject(java.lang.String,java.lang.Object,int,int)\"\u003e\u003ccode\u003esetObject(java.lang.String, java.lang.Object, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "A \n\u003ccode\u003ejava.lang.Object\u003c/code\u003e holding the OUT parameter value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBigDecimal",
      "comment": "Retrieves the value of the designated JDBC NUMERIC parameter as a java.math.BigDecimal object with as many digits to the right of the decimal point as the value contains.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setBigDecimal(java.lang.String,java.math.BigDecimal)\"\u003e\u003ccode\u003esetBigDecimal(java.lang.String, java.math.BigDecimal)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value in full precision. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObject",
      "comment": "Returns an object representing the value of OUT parameter parameterIndex and uses map for the custom mapping of the parameter value. This method returns a Java object whose type corresponds to the JDBC type that was registered for this parameter using the method registerOutParameter. By registering the target JDBC type as java.sql.Types.OTHER, this method can be used to read database-specific abstract data types.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setObject(java.lang.String,java.lang.Object,int,int)\"\u003e\u003ccode\u003esetObject(java.lang.String, java.lang.Object, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on",
          "\u003ccode\u003emap\u003c/code\u003e - the mapping from SQL type names to Java classes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003ejava.lang.Object\u003c/code\u003e holding the OUT parameter value"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Ref",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRef",
      "comment": "Retrieves the value of the designated JDBC REF(\u003cstructured-type\u003e) parameter as a Ref object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value as a \n\u003ccode\u003eRef\u003c/code\u003e object in the Java programming language. If the value was SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Blob",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlob",
      "comment": "Retrieves the value of the designated JDBC BLOB parameter as a Blob object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value as a \n\u003ccode\u003eBlob\u003c/code\u003e object in the Java programming language. If the value was SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Clob",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getClob",
      "comment": "Retrieves the value of the designated JDBC CLOB parameter as a java.sql.Clob object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value as a \n\u003ccode\u003eClob\u003c/code\u003e object in the Java programming language. If the value was SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Array",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getArray",
      "comment": "Retrieves the value of the designated JDBC ARRAY parameter as an Array object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value as an \n\u003ccode\u003eArray\u003c/code\u003e object in the Java programming language. If the value was SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Date",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDate",
      "comment": "Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date. With a Calendar object, the driver can calculate the date taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setDate(java.lang.String,java.sql.Date)\"\u003e\u003ccode\u003esetDate(java.lang.String, java.sql.Date)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the date"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Time",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTime",
      "comment": "Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time. With a Calendar object, the driver can calculate the time taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setTime(java.lang.String,java.sql.Time)\"\u003e\u003ccode\u003esetTime(java.lang.String, java.sql.Time)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the time"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value; if the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Timestamp",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTimestamp",
      "comment": "Retrieves the value of the designated JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object. With a Calendar object, the driver can calculate the timestamp taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setTimestamp(java.lang.String,java.sql.Timestamp)\"\u003e\u003ccode\u003esetTimestamp(java.lang.String, java.sql.Timestamp)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the timestamp"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the designated output parameter. This version of the method registerOutParameter should be used for a user-defined or REF output parameter. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. All OUT parameters must be registered before a stored procedure is executed. For a user-defined parameter, the fully-qualified SQL type name of the parameter should also be given, while a REF parameter requires that the fully-qualified type name of the referenced type be given. A JDBC driver that does not need the type code and type name information may ignore it. To be portable, however, applications should always provide these values for user-defined and REF parameters. Although it is intended for user-defined and REF parameters, this method may be used to register a parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the typeName parameter is ignored. Note: When reading the value of an out parameter, you must use the getter method whose Java type corresponds to the parameter\u0027s registered SQL type.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2,...",
          "\u003ccode\u003esqlType\u003c/code\u003e - a value from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003etypeName\u003c/code\u003e - the fully-qualified name of an SQL structured type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the OUT parameter named parameterName to the JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. If the JDBC type expected to be returned to this output parameter is specific to this particular database, sqlType should be java.sql.Types.OTHER. The method getObject(int) retrieves the value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - the JDBC type code defined by \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e. If the parameter is of JDBC type \n\u003ccode\u003eNUMERIC\u003c/code\u003e or \n\u003ccode\u003eDECIMAL\u003c/code\u003e, the version of \n\u003ccode\u003eregisterOutParameter\u003c/code\u003e that accepts a scale value should be used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the parameter named parameterName to be of JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. This version of registerOutParameter should be used when the parameter is of JDBC type NUMERIC or DECIMAL.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - SQL type code defined by \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e.",
          "\u003ccode\u003escale\u003c/code\u003e - the desired number of digits to the right of the decimal point. It must be greater than or equal to zero."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the designated output parameter. This version of the method registerOutParameter should be used for a user-named or REF output parameter. Examples of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. All OUT parameters must be registered before a stored procedure is executed. For a user-named parameter the fully-qualified SQL type name of the parameter should also be given, while a REF parameter requires that the fully-qualified type name of the referenced type be given. A JDBC driver that does not need the type code and type name information may ignore it. To be portable, however, applications should always provide these values for user-named and REF parameters. Although it is intended for user-named and REF parameters, this method may be used to register a parameter of any JDBC type. If the parameter does not have a user-named or REF type, the typeName parameter is ignored. Note: When reading the value of an out parameter, you must use the getXXX method whose Java type XXX corresponds to the parameter\u0027s registered SQL type.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - a value from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003etypeName\u003c/code\u003e - the fully-qualified name of an SQL structured type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esqlType\u003c/code\u003e is a \n\u003ccode\u003eARRAY\u003c/code\u003e, \n\u003ccode\u003eBLOB\u003c/code\u003e, \n\u003ccode\u003eCLOB\u003c/code\u003e, \n\u003ccode\u003eDATALINK\u003c/code\u003e, \n\u003ccode\u003eJAVA_OBJECT\u003c/code\u003e, \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNCLOB\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e, \n\u003ccode\u003eREF\u003c/code\u003e, \n\u003ccode\u003eROWID\u003c/code\u003e, \n\u003ccode\u003eSQLXML\u003c/code\u003e or \n\u003ccode\u003eSTRUCT\u003c/code\u003e data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URL",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getURL",
      "comment": "Retrieves the value of the designated JDBC DATALINK parameter as a java.net.URL object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setURL(java.lang.String,java.net.URL)\"\u003e\u003ccode\u003esetURL(java.lang.String, java.net.URL)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2,..."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs, this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e, or if the URL being returned is not a valid URL on the Java platform",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003ejava.net.URL\u003c/code\u003e object that represents the JDBC \n\u003ccode\u003eDATALINK\u003c/code\u003e value used as the designated parameter"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setURL",
      "comment": "Sets the designated parameter to the given java.net.URL object. The driver converts this to an SQL DATALINK value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getURL(int)\"\u003e\u003ccode\u003egetURL(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003eval\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs; this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e or if a URL is malformed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNull",
      "comment": "Sets the designated parameter to SQL NULL. Note: You must specify the parameter\u0027s SQL type.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - the SQL type code defined in \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBoolean",
      "comment": "Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT or BOOLEAN value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getBoolean(int)\"\u003e\u003ccode\u003egetBoolean(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setByte",
      "comment": "Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getByte(int)\"\u003e\u003ccode\u003egetByte(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setShort",
      "comment": "Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getShort(int)\"\u003e\u003ccode\u003egetShort(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setInt",
      "comment": "Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getInt(int)\"\u003e\u003ccode\u003egetInt(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setLong",
      "comment": "Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getLong(int)\"\u003e\u003ccode\u003egetLong(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setFloat",
      "comment": "Sets the designated parameter to the given Java float value. The driver converts this to an SQL FLOAT value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getFloat(int)\"\u003e\u003ccode\u003egetFloat(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDouble",
      "comment": "Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getDouble(int)\"\u003e\u003ccode\u003egetDouble(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBigDecimal",
      "comment": "Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getBigDecimal(int,int)\"\u003e\u003ccode\u003egetBigDecimal(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setString",
      "comment": "Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument\u0027s size relative to the driver\u0027s limits on VARCHAR values) when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getString(int)\"\u003e\u003ccode\u003egetString(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBytes",
      "comment": "Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument\u0027s size relative to the driver\u0027s limits on VARBINARY values) when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getBytes(int)\"\u003e\u003ccode\u003egetBytes(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDate",
      "comment": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application. The driver converts this to an SQL DATE value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getDate(int)\"\u003e\u003ccode\u003egetDate(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTime",
      "comment": "Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getTime(int)\"\u003e\u003ccode\u003egetTime(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getTimestamp(int)\"\u003e\u003ccode\u003egetTimestamp(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. The given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass datatabase- specific abstract data types.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getObject(int)\"\u003e\u003ccode\u003egetObject(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type.",
          "\u003ccode\u003escale\u003c/code\u003e - for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For all other types, this value will be ignored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified targetSqlType"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. This method is similar to setObject(String parameterName, Object x, int targetSqlType, int scaleOrLength), except that it assumes a scale of zero.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getObject(int)\"\u003e\u003ccode\u003egetObject(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type (as defined in java.sql.Types) to be sent to the database"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified targetSqlType"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database. Note that this method may be used to pass database- specific abstract data types, by using a driver-specific Java type. If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of the interfaces named above. Note: Not all databases allow for a non-typed Null to be sent to the backend. For maximum portability, the setNull or the setObject(String parameterName, Object x, int sqlType) method should be used instead of setObject(String parameterName, Object x).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getObject(int)\"\u003e\u003ccode\u003egetObject(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs, this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e or if the given \n\u003ccode\u003eObject\u003c/code\u003e parameter is ambiguous",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the UNICODE data used as the designated parameter",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setDate",
      "comment": "Sets the designated parameter to the given java.sql.Date value, using the given Calendar object. The driver uses the Calendar object to construct an SQL DATE value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the date taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getDate(int)\"\u003e\u003ccode\u003egetDate(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the date"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTime",
      "comment": "Sets the designated parameter to the given java.sql.Time value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIME value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the time taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getTime(int)\"\u003e\u003ccode\u003egetTime(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the time"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTimestamp",
      "comment": "Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIMESTAMP value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the timestamp taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#getTimestamp(int)\"\u003e\u003ccode\u003egetTimestamp(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the timestamp"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNull",
      "comment": "Sets the designated parameter to SQL NULL. This version of the method setNull should be used for user-defined types and REF type parameters. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. Note: To be portable, applications must give the SQL type code and the fully-qualified SQL type name when specifying a NULL user-defined or REF parameter. In the case of a user-defined type the name is the type name of the parameter itself. For a REF parameter, the name is the type name of the referenced type. Although it is intended for user-defined and Ref parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the given typeName is ignored.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - a value from \n\u003ccode\u003ejava.sql.Types\u003c/code\u003e",
          "\u003ccode\u003etypeName\u003c/code\u003e - the fully-qualified name of an SQL user-defined type; ignored if the parameter is not a user-defined type or SQL \n\u003ccode\u003eREF\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getString",
      "comment": "Retrieves the value of a JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as a String in the Java programming language. For the fixed-length type JDBC CHAR, the String object returned has exactly the same value the SQL CHAR value had in the database, including any padding added by the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setString(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003esetString(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBoolean",
      "comment": "Retrieves the value of a JDBC BIT or BOOLEAN parameter as a boolean in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setBoolean(java.lang.String,boolean)\"\u003e\u003ccode\u003esetBoolean(java.lang.String, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003efalse\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getByte",
      "comment": "Retrieves the value of a JDBC TINYINT parameter as a byte in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setByte(java.lang.String,byte)\"\u003e\u003ccode\u003esetByte(java.lang.String, byte)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getShort",
      "comment": "Retrieves the value of a JDBC SMALLINT parameter as a short in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setShort(java.lang.String,short)\"\u003e\u003ccode\u003esetShort(java.lang.String, short)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getInt",
      "comment": "Retrieves the value of a JDBC INTEGER parameter as an int in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setInt(java.lang.String,int)\"\u003e\u003ccode\u003esetInt(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLong",
      "comment": "Retrieves the value of a JDBC BIGINT parameter as a long in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setLong(java.lang.String,long)\"\u003e\u003ccode\u003esetLong(java.lang.String, long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFloat",
      "comment": "Retrieves the value of a JDBC FLOAT parameter as a float in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setFloat(java.lang.String,float)\"\u003e\u003ccode\u003esetFloat(java.lang.String, float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDouble",
      "comment": "Retrieves the value of a JDBC DOUBLE parameter as a double in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setDouble(java.lang.String,double)\"\u003e\u003ccode\u003esetDouble(java.lang.String, double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003e0\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBytes",
      "comment": "Retrieves the value of a JDBC BINARY or VARBINARY parameter as an array of byte values in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setBytes(java.lang.String,byte%5B%5D)\"\u003e\u003ccode\u003esetBytes(java.lang.String, byte[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Date",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDate",
      "comment": "Retrieves the value of a JDBC DATE parameter as a java.sql.Date object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setDate(java.lang.String,java.sql.Date)\"\u003e\u003ccode\u003esetDate(java.lang.String, java.sql.Date)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Time",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTime",
      "comment": "Retrieves the value of a JDBC TIME parameter as a java.sql.Time object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setTime(java.lang.String,java.sql.Time)\"\u003e\u003ccode\u003esetTime(java.lang.String, java.sql.Time)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Timestamp",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTimestamp",
      "comment": "Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setTimestamp(java.lang.String,java.sql.Timestamp)\"\u003e\u003ccode\u003esetTimestamp(java.lang.String, java.sql.Timestamp)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObject",
      "comment": "Retrieves the value of a parameter as an Object in the Java programming language. If the value is an SQL NULL, the driver returns a Java null. This method returns a Java object whose type corresponds to the JDBC type that was registered for this parameter using the method registerOutParameter. By registering the target JDBC type as java.sql.Types.OTHER, this method can be used to read database-specific abstract data types.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Types.html\" title\u003d\"class in java.sql\"\u003e\u003ccode\u003eTypes\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setObject(java.lang.String,java.lang.Object,int,int)\"\u003e\u003ccode\u003esetObject(java.lang.String, java.lang.Object, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "A \n\u003ccode\u003ejava.lang.Object\u003c/code\u003e holding the OUT parameter value."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBigDecimal",
      "comment": "Retrieves the value of a JDBC NUMERIC parameter as a java.math.BigDecimal object with as many digits to the right of the decimal point as the value contains.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setBigDecimal(java.lang.String,java.math.BigDecimal)\"\u003e\u003ccode\u003esetBigDecimal(java.lang.String, java.math.BigDecimal)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value in full precision. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObject",
      "comment": "Returns an object representing the value of OUT parameter parameterName and uses map for the custom mapping of the parameter value. This method returns a Java object whose type corresponds to the JDBC type that was registered for this parameter using the method registerOutParameter. By registering the target JDBC type as java.sql.Types.OTHER, this method can be used to read database-specific abstract data types.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setObject(java.lang.String,java.lang.Object,int,int)\"\u003e\u003ccode\u003esetObject(java.lang.String, java.lang.Object, int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003emap\u003c/code\u003e - the mapping from SQL type names to Java classes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003ejava.lang.Object\u003c/code\u003e holding the OUT parameter value"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Ref",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRef",
      "comment": "Retrieves the value of a JDBC REF(\u003cstructured-type\u003e) parameter as a Ref object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value as a \n\u003ccode\u003eRef\u003c/code\u003e object in the Java programming language. If the value was SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Blob",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBlob",
      "comment": "Retrieves the value of a JDBC BLOB parameter as a Blob object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value as a \n\u003ccode\u003eBlob\u003c/code\u003e object in the Java programming language. If the value was SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Clob",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getClob",
      "comment": "Retrieves the value of a JDBC CLOB parameter as a java.sql.Clob object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value as a \n\u003ccode\u003eClob\u003c/code\u003e object in the Java programming language. If the value was SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Array",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getArray",
      "comment": "Retrieves the value of a JDBC ARRAY parameter as an Array object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value as an \n\u003ccode\u003eArray\u003c/code\u003e object in Java programming language. If the value was SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Date",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDate",
      "comment": "Retrieves the value of a JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date. With a Calendar object, the driver can calculate the date taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setDate(java.lang.String,java.sql.Date)\"\u003e\u003ccode\u003esetDate(java.lang.String, java.sql.Date)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the date"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Time",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTime",
      "comment": "Retrieves the value of a JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time. With a Calendar object, the driver can calculate the time taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setTime(java.lang.String,java.sql.Time)\"\u003e\u003ccode\u003esetTime(java.lang.String, java.sql.Time)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the time"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value; if the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.Timestamp",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getTimestamp",
      "comment": "Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object. With a Calendar object, the driver can calculate the timestamp taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setTimestamp(java.lang.String,java.sql.Timestamp)\"\u003e\u003ccode\u003esetTimestamp(java.lang.String, java.sql.Timestamp)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ecal\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e object the driver will use to construct the timestamp"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value. If the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the result is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URL",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getURL",
      "comment": "Retrieves the value of a JDBC DATALINK parameter as a java.net.URL object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setURL(java.lang.String,java.net.URL)\"\u003e\u003ccode\u003esetURL(java.lang.String, java.net.URL)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs, this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e, or if there is a problem with the URL",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value as a \n\u003ccode\u003ejava.net.URL\u003c/code\u003e object in the Java programming language. If the value was SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.RowId",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRowId",
      "comment": "Retrieves the value of the designated JDBC ROWID parameter as a java.sql.RowId object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2,..."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003eRowId\u003c/code\u003e object that represents the JDBC \n\u003ccode\u003eROWID\u003c/code\u003e value is used as the designated parameter. If the parameter contains a SQL \n\u003ccode\u003eNULL\u003c/code\u003e, then a \n\u003ccode\u003enull\u003c/code\u003e value is returned."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.RowId",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRowId",
      "comment": "Retrieves the value of the designated JDBC ROWID parameter as a java.sql.RowId object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003eRowId\u003c/code\u003e object that represents the JDBC \n\u003ccode\u003eROWID\u003c/code\u003e value is used as the designated parameter. If the parameter contains a SQL \n\u003ccode\u003eNULL\u003c/code\u003e, then a \n\u003ccode\u003enull\u003c/code\u003e value is returned."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setRowId",
      "comment": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNString",
      "comment": "Sets the designated parameter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a java.sql.NClob object. The object implements the java.sql.NClob interface. This NClob object maps to a SQL NCLOB.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if the length specified is less than zero; a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter to an InputStream object. The Inputstream must contain the number of characters specified by length, otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set the second is 2, ...",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if the length specified is less than zero; if the number of bytes in the \n\u003ccode\u003eInputStream\u003c/code\u003e does not match the specified length; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter to be set",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the parameter data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.NClob",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNClob",
      "comment": "Retrieves the value of the designated JDBC NCLOB parameter as a java.sql.NClob object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value as a \n\u003ccode\u003eNClob\u003c/code\u003e object in the Java programming language. If the value was SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.NClob",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNClob",
      "comment": "Retrieves the value of a JDBC NCLOB parameter as a java.sql.NClob object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "the parameter value as a \n\u003ccode\u003eNClob\u003c/code\u003e object in the Java programming language. If the value was SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setSQLXML",
      "comment": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003exmlObject\u003c/code\u003e - a \n\u003ccode\u003eSQLXML\u003c/code\u003e object that maps an \n\u003ccode\u003eSQL XML\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs; this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e or the \n\u003ccode\u003ejava.xml.transform.Result\u003c/code\u003e, \n\u003ccode\u003eWriter\u003c/code\u003e or \n\u003ccode\u003eOutputStream\u003c/code\u003e has not been closed for the \n\u003ccode\u003eSQLXML\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.SQLXML",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSQLXML",
      "comment": "Retrieves the value of the designated SQL XML parameter as a java.sql.SQLXML object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ..."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003eSQLXML\u003c/code\u003e object that maps an \n\u003ccode\u003eSQL XML\u003c/code\u003e value"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.sql.SQLXML",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSQLXML",
      "comment": "Retrieves the value of the designated SQL XML parameter as a java.sql.SQLXML object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003eSQLXML\u003c/code\u003e object that maps an \n\u003ccode\u003eSQL XML\u003c/code\u003e value"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNString",
      "comment": "Retrieves the value of the designated NCHAR, NVARCHAR or LONGNVARCHAR parameter as a String in the Java programming language. For the fixed-length type JDBC NCHAR, the String object returned has exactly the same value the SQL NCHAR value had in the database, including any padding added by the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setNString(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003esetNString(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - index of the first parameter is 1, the second is 2, ..."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e object that maps an \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e or \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e value"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNString",
      "comment": "Retrieves the value of the designated NCHAR, NVARCHAR or LONGNVARCHAR parameter as a String in the Java programming language. For the fixed-length type JDBC NCHAR, the String object returned has exactly the same value the SQL NCHAR value had in the database, including any padding added by the database.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/CallableStatement.html#setNString(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003esetNString(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e object that maps an \n\u003ccode\u003eNCHAR\u003c/code\u003e, \n\u003ccode\u003eNVARCHAR\u003c/code\u003e or \n\u003ccode\u003eLONGNVARCHAR\u003c/code\u003e value"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNCharacterStream",
      "comment": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language. It is intended for use when accessing NCHAR,NVARCHAR and LONGNVARCHAR parameters.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ..."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the parameter value; if the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value returned is \n\u003ccode\u003enull\u003c/code\u003e in the Java programming language."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNCharacterStream",
      "comment": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language. It is intended for use when accessing NCHAR,NVARCHAR and LONGNVARCHAR parameters.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the parameter value; if the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value returned is \n\u003ccode\u003enull\u003c/code\u003e in the Java programming language"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCharacterStream",
      "comment": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, ..."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the parameter value; if the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value returned is \n\u003ccode\u003enull\u003c/code\u003e in the Java programming language."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCharacterStream",
      "comment": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "a \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the parameter value; if the value is SQL \n\u003ccode\u003eNULL\u003c/code\u003e, the value returned is \n\u003ccode\u003enull\u003c/code\u003e in the Java programming language"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter to the given java.sql.Blob object. The driver converts this to an SQL BLOB value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003eBlob\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eBLOB\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter to the given java.sql.Clob object. The driver converts this to an SQL CLOB value when it sends it to the database.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - a \n\u003ccode\u003eClob\u003c/code\u003e object that maps an SQL \n\u003ccode\u003eCLOB\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the UNICODE data used as the designated parameter",
          "\u003ccode\u003elength\u003c/code\u003e - the number of characters in the stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setAsciiStream",
      "comment": "Sets the designated parameter to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setAsciiStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the Java input stream that contains the ASCII parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBinaryStream",
      "comment": "Sets the designated parameter to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBinaryStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the java input stream which contains the binary parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setCharacterStream",
      "comment": "Sets the designated parameter to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setCharacterStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - the \n\u003ccode\u003ejava.io.Reader\u003c/code\u003e object that contains the Unicode data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNCharacterStream",
      "comment": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. Note: This stream object can either be a standard Java stream object or your own subclass that implements the standard interface. Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNCharacterStream which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setClob which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setBlob",
      "comment": "Sets the designated parameter to an InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARBINARY or a BLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setBlob which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003einputStream\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setNClob",
      "comment": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB Note: Consult your JDBC driver documentation to determine if it might be more efficient to use a version of setNClob which takes a length parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ereader\u003c/code\u003e - An object that contains the data to set the parameter value to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObject",
      "comment": "Returns an object representing the value of OUT parameter parameterIndex and will convert from the SQL type of the parameter to the requested Java data type, if the conversion is supported. If the conversion is not supported or null is specified for the type, a SQLException is thrown. At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements SQLData, or Struct. Additional conversions may be supported and are vendor defined.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the class modeled by this Class object"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on",
          "\u003ccode\u003etype\u003c/code\u003e - Class representing the Java data type to convert the designated parameter to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if conversion is not supported, type is null or another error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "an instance of \n\u003ccode\u003etype\u003c/code\u003e holding the OUT parameter value"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getObject",
      "comment": "Returns an object representing the value of OUT parameter parameterName and will convert from the SQL type of the parameter to the requested Java data type, if the conversion is supported. If the conversion is not supported or null is specified for the type, a SQLException is thrown. At a minimum, an implementation must support the conversions defined in Appendix B, Table B-3 and conversion of appropriate user defined SQL types to a Java type which implements SQLData, or Struct. Additional conversions may be supported and are vendor defined.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the class modeled by this Class object"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003etype\u003c/code\u003e - Class representing the Java data type to convert the designated parameter to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if conversion is not supported, type is null or another error occurs. The getCause() method of the exception may provide a more detailed exception, for example, if a conversion error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support this method"
        ],
        "return": [
          "an instance of \n\u003ccode\u003etype\u003c/code\u003e holding the OUT parameter value"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. If the second argument is an InputStream then the stream must contain the number of bytes specified by scaleOrLength. If the second argument is a Reader then the reader must contain the number of characters specified by scaleOrLength. If these conditions are not true the driver will generate a SQLException when the prepared statement is executed. The given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass database-specific abstract data types. The default implementation will throw SQLFeatureNotSupportedException",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/JDBCType.html\" title\u003d\"enum class in java.sql\"\u003e\u003ccode\u003eJDBCType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLType.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSQLType\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type to be sent to the database. The scale argument may further qualify this type.",
          "\u003ccode\u003escaleOrLength\u003c/code\u003e - for \n\u003ccode\u003ejava.sql.JDBCType.DECIMAL\u003c/code\u003e or \n\u003ccode\u003ejava.sql.JDBCType.NUMERIC types\u003c/code\u003e, this is the number of digits after the decimal point. For Java Object types \n\u003ccode\u003eInputStream\u003c/code\u003e and \n\u003ccode\u003eReader\u003c/code\u003e, this is the length of the data in the stream or reader. For all other types, this value will be ignored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e or if the Java Object specified by x is an InputStream or Reader object and the value of the scale parameter is less than zero",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified targetSqlType"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setObject",
      "comment": "Sets the value of the designated parameter with the given object. This method is similar to setObject(String parameterName, Object x, SQLType targetSqlType, int scaleOrLength), except that it assumes a scale of zero. The default implementation will throw SQLFeatureNotSupportedException",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/JDBCType.html\" title\u003d\"enum class in java.sql\"\u003e\u003ccode\u003eJDBCType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLType.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSQLType\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003ex\u003c/code\u003e - the object containing the input parameter value",
          "\u003ccode\u003etargetSqlType\u003c/code\u003e - the SQL type to be sent to the database"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified targetSqlType"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the OUT parameter in ordinal position parameterIndex to the JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. If the JDBC type expected to be returned to this output parameter is specific to this particular database, sqlType may be JDBCType.OTHER or a SQLType that is supported by the JDBC driver. The method getObject(int) retrieves the value. The default implementation will throw SQLFeatureNotSupportedException",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/JDBCType.html\" title\u003d\"enum class in java.sql\"\u003e\u003ccode\u003eJDBCType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLType.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSQLType\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on",
          "\u003ccode\u003esqlType\u003c/code\u003e - the JDBC type code defined by \n\u003ccode\u003eSQLType\u003c/code\u003e to use to register the OUT Parameter. If the parameter is of JDBC type \n\u003ccode\u003eJDBCType.NUMERIC\u003c/code\u003e or \n\u003ccode\u003eJDBCType.DECIMAL\u003c/code\u003e, the version of \n\u003ccode\u003eregisterOutParameter\u003c/code\u003e that accepts a scale value should be used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified sqlType"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the parameter in ordinal position parameterIndex to be of JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. This version of registerOutParameter should be used when the parameter is of JDBC type JDBCType.NUMERIC or JDBCType.DECIMAL. The default implementation will throw SQLFeatureNotSupportedException",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/JDBCType.html\" title\u003d\"enum class in java.sql\"\u003e\u003ccode\u003eJDBCType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLType.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSQLType\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2, and so on",
          "\u003ccode\u003esqlType\u003c/code\u003e - the JDBC type code defined by \n\u003ccode\u003eSQLType\u003c/code\u003e to use to register the OUT Parameter.",
          "\u003ccode\u003escale\u003c/code\u003e - the desired number of digits to the right of the decimal point. It must be greater than or equal to zero."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified sqlType"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the designated output parameter. This version of the method registerOutParameter should be used for a user-defined or REF output parameter. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. All OUT parameters must be registered before a stored procedure is executed. For a user-defined parameter, the fully-qualified SQL type name of the parameter should also be given, while a REF parameter requires that the fully-qualified type name of the referenced type be given. A JDBC driver that does not need the type code and type name information may ignore it. To be portable, however, applications should always provide these values for user-defined and REF parameters. Although it is intended for user-defined and REF parameters, this method may be used to register a parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the typeName parameter is ignored. Note: When reading the value of an out parameter, you must use the getter method whose Java type corresponds to the parameter\u0027s registered SQL type. The default implementation will throw SQLFeatureNotSupportedException",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/JDBCType.html\" title\u003d\"enum class in java.sql\"\u003e\u003ccode\u003eJDBCType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLType.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSQLType\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterIndex\u003c/code\u003e - the first parameter is 1, the second is 2,...",
          "\u003ccode\u003esqlType\u003c/code\u003e - the JDBC type code defined by \n\u003ccode\u003eSQLType\u003c/code\u003e to use to register the OUT Parameter.",
          "\u003ccode\u003etypeName\u003c/code\u003e - the fully-qualified name of an SQL structured type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified sqlType"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the OUT parameter named parameterName to the JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. If the JDBC type expected to be returned to this output parameter is specific to this particular database, sqlType should be JDBCType.OTHER or a SQLType that is supported by the JDBC driver.. The method getObject(int) retrieves the value. The default implementation will throw SQLFeatureNotSupportedException",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/JDBCType.html\" title\u003d\"enum class in java.sql\"\u003e\u003ccode\u003eJDBCType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLType.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSQLType\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - the JDBC type code defined by \n\u003ccode\u003eSQLType\u003c/code\u003e to use to register the OUT Parameter. If the parameter is of JDBC type \n\u003ccode\u003eJDBCType.NUMERIC\u003c/code\u003e or \n\u003ccode\u003eJDBCType.DECIMAL\u003c/code\u003e, the version of \n\u003ccode\u003e registerOutParameter\u003c/code\u003e that accepts a scale value should be used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified sqlType or if the JDBC driver does not support this method"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the parameter named parameterName to be of JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. This version of registerOutParameter should be used when the parameter is of JDBC type JDBCType.NUMERIC or JDBCType.DECIMAL. The default implementation will throw SQLFeatureNotSupportedException",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/JDBCType.html\" title\u003d\"enum class in java.sql\"\u003e\u003ccode\u003eJDBCType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLType.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSQLType\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - the JDBC type code defined by \n\u003ccode\u003eSQLType\u003c/code\u003e to use to register the OUT Parameter.",
          "\u003ccode\u003escale\u003c/code\u003e - the desired number of digits to the right of the decimal point. It must be greater than or equal to zero."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified sqlType or if the JDBC driver does not support this method"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "registerOutParameter",
      "comment": "Registers the designated output parameter. This version of the method registerOutParameter should be used for a user-named or REF output parameter. Examples of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. All OUT parameters must be registered before a stored procedure is executed. For a user-named parameter the fully-qualified SQL type name of the parameter should also be given, while a REF parameter requires that the fully-qualified type name of the referenced type be given. A JDBC driver that does not need the type code and type name information may ignore it. To be portable, however, applications should always provide these values for user-named and REF parameters. Although it is intended for user-named and REF parameters, this method may be used to register a parameter of any JDBC type. If the parameter does not have a user-named or REF type, the typeName parameter is ignored. Note: When reading the value of an out parameter, you must use the getXXX method whose Java type XXX corresponds to the parameter\u0027s registered SQL type. The default implementation will throw SQLFeatureNotSupportedException",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/JDBCType.html\" title\u003d\"enum class in java.sql\"\u003e\u003ccode\u003eJDBCType\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLType.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eSQLType\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eparameterName\u003c/code\u003e - the name of the parameter",
          "\u003ccode\u003esqlType\u003c/code\u003e - the JDBC type code defined by \n\u003ccode\u003eSQLType\u003c/code\u003e to use to register the OUT Parameter.",
          "\u003ccode\u003etypeName\u003c/code\u003e - the fully-qualified name of an SQL structured type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLException.html\" title\u003d\"class in java.sql\"\u003eSQLException\u003c/a\u003e\u003c/code\u003e - if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed \n\u003ccode\u003eCallableStatement\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/SQLFeatureNotSupportedException.html\" title\u003d\"class in java.sql\"\u003eSQLFeatureNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the JDBC driver does not support the specified sqlType or if the JDBC driver does not support this method"
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.sql.CallableStatement",
  "comment": "The interface used to execute SQL stored procedures. The JDBC API provides a stored procedure SQL escape syntax that allows stored procedures to be called in a standard way for all RDBMSs. This escape syntax has one form that includes a result parameter and one that does not. If used, the result parameter must be registered as an OUT parameter. The other parameters can be used for input, output or both. Parameters are referred to sequentially, by number, with the first parameter being 1. \n\u003cpre\u003e   {?\u003d call \u0026lt;procedure-name\u0026gt;[(\u0026lt;arg1\u0026gt;,\u0026lt;arg2\u0026gt;, ...)]}\n   {call \u0026lt;procedure-name\u0026gt;[(\u0026lt;arg1\u0026gt;,\u0026lt;arg2\u0026gt;, ...)]}\n \u003c/pre\u003e \n\u003cp\u003e IN parameter values are set using the \u003ccode\u003eset\u003c/code\u003e methods inherited from \u003ca href\u003d\"PreparedStatement.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003ePreparedStatement\u003c/code\u003e\u003c/a\u003e. The type of all OUT parameters must be registered prior to executing the stored procedure; their values are retrieved after execution via the \u003ccode\u003eget\u003c/code\u003e methods provided here. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eCallableStatement\u003c/code\u003e can return one \u003ca href\u003d\"ResultSet.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eResultSet\u003c/code\u003e\u003c/a\u003e object or multiple \u003ccode\u003eResultSet\u003c/code\u003e objects. Multiple \u003ccode\u003eResultSet\u003c/code\u003e objects are handled using operations inherited from \u003ca href\u003d\"Statement.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eStatement\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e For maximum portability, a call\u0027s \u003ccode\u003eResultSet\u003c/code\u003e objects and update counts should be processed prior to getting the values of output parameters.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/Connection.html#prepareCall(java.lang.String)\"\u003e\u003ccode\u003eConnection.prepareCall(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.sql/java/sql/ResultSet.html\" title\u003d\"interface in java.sql\"\u003e\u003ccode\u003eResultSet\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}