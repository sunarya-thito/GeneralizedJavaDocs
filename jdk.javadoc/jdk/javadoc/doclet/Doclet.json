{
  "packageName": "jdk.javadoc.doclet",
  "simpleName": "Doclet",
  "moduleName": "jdk.javadoc",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "init",
      "comment": "Initializes this doclet with the given locale and error reporter. This locale will be used by the reporter and the doclet components.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the locale to be used",
          "\u003ccode\u003ereporter\u003c/code\u003e - the reporter to be used"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Returns a name identifying the doclet. A name is a simple identifier without white spaces, as defined in The Java Language Specification, section 6.2 \"Names and Identifiers\".",
      "annotations": [],
      "tagMap": {
        "return": [
          "name of the Doclet"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "jdk.javadoc.doclet.Doclet$Option",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSupportedOptions",
      "comment": "Returns all the supported options.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a set containing all the supported options, an empty set if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.lang.model.SourceVersion",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getSupportedSourceVersion",
      "comment": "Returns the version of the Java Programming Language supported by this doclet.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the language version supported by this doclet, usually the latest version"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "run",
      "comment": "The entry point of the doclet. Further processing will commence as instructed by this method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eenvironment\u003c/code\u003e - from which essential information can be extracted"
        ],
        "return": [
          "true on success"
        ]
      }
    }
  ],
  "innerClasses": [
    "jdk.javadoc.doclet.Doclet$Option"
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "jdk.javadoc.doclet.Doclet",
  "comment": "The user doclet must implement this interface, as described in the \n\u003ca href\u003d\"package-summary.html#package.description\"\u003epackage description\u003c/a\u003e. Each implementation of a Doclet must provide a public no-argument constructor to be used by tools to instantiate the doclet. The tool infrastructure will interact with classes implementing this interface as follows: \n\u003col\u003e \n \u003cli\u003e The tool will create an instance of a doclet using the no-arg constructor of the doclet class. \u003c/li\u003e\n \u003cli\u003e Next, the tool calls the \u003ca href\u003d\"#init(java.util.Locale,jdk.javadoc.doclet.Reporter)\"\u003e\u003ccode\u003einit\u003c/code\u003e\u003c/a\u003e method with an appropriate locale and reporter. \u003c/li\u003e\n \u003cli\u003e Afterwards, the tool calls \u003ca href\u003d\"#getSupportedOptions()\"\u003e\u003ccode\u003egetSupportedOptions\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#getSupportedSourceVersion()\"\u003e\u003ccode\u003egetSupportedSourceVersion\u003c/code\u003e\u003c/a\u003e. These methods are only called once. \u003c/li\u003e\n \u003cli\u003e As appropriate, the tool calls the \u003ca href\u003d\"#run(jdk.javadoc.doclet.DocletEnvironment)\"\u003e\u003ccode\u003erun\u003c/code\u003e\u003c/a\u003e method on the doclet object, giving it a DocletEnvironment object, from which the doclet can determine the elements to be included in the documentation. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e If a doclet object is created and used without the above protocol being followed, then the doclet\u0027s behavior is not defined by this interface specification. \u003c/p\u003e\n\u003cp\u003e To start the doclet, pass \u003ccode\u003e-doclet\u003c/code\u003e followed by the fully-qualified name of the entry point class (i.e. the implementation of this interface) on the javadoc tool command line.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}