{
  "packageName": "java.time",
  "simpleName": "LocalDate",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN",
      "comment": "The minimum supported LocalDate, \u0027-999999999-01-01\u0027. This could be used by an application as a \"far past\" date.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX",
      "comment": "The maximum supported LocalDate, \u0027+999999999-12-31\u0027. This could be used by an application as a \"far future\" date.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EPOCH",
      "comment": "The epoch year LocalDate, \u00271970-01-01\u0027.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "now",
      "comment": "Obtains the current date from the system clock in the default time-zone. This will query the system clock in the default time-zone to obtain the current date. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current date using the system clock and default time-zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "now",
      "comment": "Obtains the current date from the system clock in the specified time-zone. This will query the system clock to obtain the current date. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the zone ID to use, not null"
        ],
        "return": [
          "the current date using the system clock, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.Clock",
            "type": "Class"
          },
          "name": "clock",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "now",
      "comment": "Obtains the current date from the specified clock. This will query the specified clock to obtain the current date - today. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using dependency injection.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eclock\u003c/code\u003e - the clock to use, not null"
        ],
        "return": [
          "the current date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "year",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.Month",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfMonth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Obtains an instance of LocalDate from a year, month and day. This returns a LocalDate with the specified year, month and day-of-month. The day must be valid for the year and month, otherwise an exception will be thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the year to represent, from MIN_YEAR to MAX_YEAR",
          "\u003ccode\u003emonth\u003c/code\u003e - the month-of-year to represent, not null",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the day-of-month to represent, from 1 to 31"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the value of any field is out of range, or if the day-of-month is invalid for the month-year"
        ],
        "return": [
          "the local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "year",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfMonth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Obtains an instance of LocalDate from a year, month and day. This returns a LocalDate with the specified year, month and day-of-month. The day must be valid for the year and month, otherwise an exception will be thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the year to represent, from MIN_YEAR to MAX_YEAR",
          "\u003ccode\u003emonth\u003c/code\u003e - the month-of-year to represent, from 1 (January) to 12 (December)",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the day-of-month to represent, from 1 to 31"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the value of any field is out of range, or if the day-of-month is invalid for the month-year"
        ],
        "return": [
          "the local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "year",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfYear",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofYearDay",
      "comment": "Obtains an instance of LocalDate from a year and day-of-year. This returns a LocalDate with the specified year and day-of-year. The day-of-year must be valid for the year, otherwise an exception will be thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the year to represent, from MIN_YEAR to MAX_YEAR",
          "\u003ccode\u003edayOfYear\u003c/code\u003e - the day-of-year to represent, from 1 to 366"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the value of any field is out of range, or if the day-of-year is invalid for the year"
        ],
        "return": [
          "the local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.Instant",
            "type": "Class"
          },
          "name": "instant",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofInstant",
      "comment": "Obtains an instance of LocalDate from an Instant and zone ID. This creates a local date based on the specified instant. First, the offset from UTC/Greenwich is obtained using the zone ID and instant, which is simple as there is only one valid offset for each instant. Then, the instant and offset are used to calculate the local date.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einstant\u003c/code\u003e - the instant to create the date from, not null",
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone, which may be an offset, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported range"
        ],
        "return": [
          "the local date, not null"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "epochDay",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofEpochDay",
      "comment": "Obtains an instance of LocalDate from the epoch day count. This returns a LocalDate with the specified epoch-day. The EPOCH_DAY is a simple incrementing count of days where day 0 is 1970-01-01. Negative numbers represent earlier days.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eepochDay\u003c/code\u003e - the Epoch Day to convert, based on the epoch 1970-01-01"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the epoch day exceeds the supported date range"
        ],
        "return": [
          "the local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Obtains an instance of LocalDate from a temporal object. This obtains a local date based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of LocalDate. The conversion uses the TemporalQueries.localDate() query, which relies on extracting the EPOCH_DAY field. This method matches the signature of the functional interface TemporalQuery allowing it to be used as a query via method reference, LocalDate::from.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#date(java.time.temporal.TemporalAccessor)\"\u003e\u003ccode\u003eChronology.date(TemporalAccessor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to convert to a \n\u003ccode\u003eLocalDate\u003c/code\u003e"
        ],
        "return": [
          "the local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parse",
      "comment": "Obtains an instance of LocalDate from a text string such as 2007-12-03. The string must represent a valid date and is parsed using DateTimeFormatter.ISO_LOCAL_DATE.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text to parse such as \"2007-12-03\", not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeParseException.html\" title\u003d\"class in java.time.format\"\u003eDateTimeParseException\u003c/a\u003e\u003c/code\u003e - if the text cannot be parsed"
        ],
        "return": [
          "the parsed local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "name": "text",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.format.DateTimeFormatter",
            "type": "Class"
          },
          "name": "formatter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parse",
      "comment": "Obtains an instance of LocalDate from a text string using a specific formatter. The text is parsed using the formatter, returning a date.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text to parse, not null",
          "\u003ccode\u003eformatter\u003c/code\u003e - the formatter to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeParseException.html\" title\u003d\"class in java.time.format\"\u003eDateTimeParseException\u003c/a\u003e\u003c/code\u003e - if the text cannot be parsed"
        ],
        "return": [
          "the parsed local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSupported",
      "comment": "Checks if the specified field is supported. This checks if this date can be queried for the specified field. If false, then calling the range, get and with(TemporalField, long) methods will throw an exception. If the field is a ChronoField then the query is implemented here. The supported fields are: DAY_OF_WEEK ALIGNED_DAY_OF_WEEK_IN_MONTH ALIGNED_DAY_OF_WEEK_IN_YEAR DAY_OF_MONTH DAY_OF_YEAR EPOCH_DAY ALIGNED_WEEK_OF_MONTH ALIGNED_WEEK_OF_YEAR MONTH_OF_YEAR PROLEPTIC_MONTH YEAR_OF_ERA YEAR ERA All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#isSupported(java.time.temporal.TemporalField)\"\u003eisSupported\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#isSupported(java.time.temporal.TemporalField)\"\u003eisSupported\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to check, null returns false"
        ],
        "return": [
          "true if the field is supported on this date, false if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSupported",
      "comment": "Checks if the specified unit is supported. This checks if the specified unit can be added to, or subtracted from, this date. If false, then calling the plus(long, TemporalUnit) and minus methods will throw an exception. If the unit is a ChronoUnit then the query is implemented here. The supported units are: DAYS WEEKS MONTHS YEARS DECADES CENTURIES MILLENNIA ERAS All other ChronoUnit instances will return false. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#isSupported(java.time.temporal.TemporalUnit)\"\u003eisSupported\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#isSupported(java.time.temporal.TemporalUnit)\"\u003eisSupported\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the unit to check, null returns false"
        ],
        "return": [
          "true if the unit can be added/subtracted, false if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.ValueRange",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "range",
      "comment": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This date is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a ChronoField then the query is implemented here. The supported fields will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#range(java.time.temporal.TemporalField)\"\u003erange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to query the range for, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the range for the field cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported"
        ],
        "return": [
          "the range of valid values for the field, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Gets the value of the specified field from this date as an int. This queries this date for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a ChronoField then the query is implemented here. The supported fields will return valid values based on this date, except EPOCH_DAY and PROLEPTIC_MONTH which are too large to fit in an int and throw an UnsupportedTemporalTypeException. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#get(java.time.temporal.TemporalField)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to get, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if a value for the field cannot be obtained or the value is outside the range of valid values for the field",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported or the range of values exceeds an \n\u003ccode\u003eint\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the value for the field"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLong",
      "comment": "Gets the value of the specified field from this date as a long. This queries this date for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a ChronoField then the query is implemented here. The supported fields will return valid values based on this date. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#getLong(java.time.temporal.TemporalField)\"\u003egetLong\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to get, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if a value for the field cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the value for the field"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.IsoChronology",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChronology",
      "comment": "Gets the chronology of this date, which is the ISO calendar system. The Chronology represents the calendar system in use. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today\u0027s rules for leap years are applied for all time.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#getChronology()\"\u003egetChronology\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the ISO chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.IsoEra",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEra",
      "comment": "Gets the era applicable at this date. The official ISO-8601 standard does not define eras, however IsoChronology does. It defines two eras, \u0027CE\u0027 from year one onwards and \u0027BCE\u0027 from year zero backwards. Since dates before the Julian-Gregorian cutover are not in line with history, the cutover between \u0027BCE\u0027 and \u0027CE\u0027 is also not aligned with the commonly used eras, often referred to using \u0027BC\u0027 and \u0027AD\u0027. Users of this class should typically ignore this method as it exists primarily to fulfill the ChronoLocalDate contract where it is necessary to support the Japanese calendar system.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#getEra()\"\u003egetEra\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the IsoEra applicable at this date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getYear",
      "comment": "Gets the year field. This method returns the primitive int value for the year. The year returned by this method is proleptic as per get(YEAR). To obtain the year-of-era, use get(YEAR_OF_ERA).",
      "annotations": [],
      "tagMap": {
        "return": [
          "the year, from MIN_YEAR to MAX_YEAR"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMonthValue",
      "comment": "Gets the month-of-year field from 1 to 12. This method returns the month as an int from 1 to 12. Application code is frequently clearer if the enum Month is used by calling getMonth().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/LocalDate.html#getMonth()\"\u003e\u003ccode\u003egetMonth()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the month-of-year, from 1 to 12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Month",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMonth",
      "comment": "Gets the month-of-year field using the Month enum. This method returns the enum Month for the month. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the int value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/LocalDate.html#getMonthValue()\"\u003e\u003ccode\u003egetMonthValue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the month-of-year, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDayOfMonth",
      "comment": "Gets the day-of-month field. This method returns the primitive int value for the day-of-month.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the day-of-month, from 1 to 31"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDayOfYear",
      "comment": "Gets the day-of-year field. This method returns the primitive int value for the day-of-year.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the day-of-year, from 1 to 365, or 366 in a leap year"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.DayOfWeek",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDayOfWeek",
      "comment": "Gets the day-of-week field, which is an enum DayOfWeek. This method returns the enum DayOfWeek for the day-of-week. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the int value. Additional information can be obtained from the DayOfWeek. This includes textual names of the values.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the day-of-week, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLeapYear",
      "comment": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules. This method applies the current rules for leap years across the whole time-line. In general, a year is a leap year if it is divisible by four without remainder. However, years divisible by 100, are not leap years, with the exception of years divisible by 400 which are. For example, 1904 is a leap year it is divisible by 4. 1900 was not a leap year as it is divisible by 100, however 2000 was a leap year as it is divisible by 400. The calculation is proleptic - applying the same rules into the far future and far past. This is historically inaccurate, but is correct for the ISO-8601 standard.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#isLeapYear()\"\u003eisLeapYear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if the year is leap, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lengthOfMonth",
      "comment": "Returns the length of the month represented by this date. This returns the length of the month in days. For example, a date in January would return 31.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#lengthOfMonth()\"\u003elengthOfMonth\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the length of the month in days"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lengthOfYear",
      "comment": "Returns the length of the year represented by this date. This returns the length of the year in days, either 365 or 366.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#lengthOfYear()\"\u003elengthOfYear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "366 if the year is leap, 365 otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAdjuster",
            "type": "Class"
          },
          "name": "adjuster",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "with",
      "comment": "Returns an adjusted copy of this date. This returns a LocalDate, based on this one, with the date adjusted. The adjustment takes place using the specified adjuster strategy object. Read the documentation of the adjuster to understand what adjustment will be made. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in TemporalAdjusters. These include finding the \"last day of the month\" and \"next Wednesday\". Key date-time classes also implement the TemporalAdjuster interface, such as Month and MonthDay. The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years. For example this code returns a date on the last day of July:   import static java.time.Month.*;\n  import static java.time.temporal.TemporalAdjusters.*;\n\n  result \u003d localDate.with(JULY).with(lastDayOfMonth());\n The result of this method is obtained by invoking the TemporalAdjuster.adjustInto(Temporal) method on the specified adjuster passing this as the argument. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#with(java.time.temporal.TemporalAdjuster)\"\u003ewith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#with(java.time.temporal.TemporalAdjuster)\"\u003ewith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eadjuster\u003c/code\u003e - the adjuster to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the adjustment cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on \n\u003ccode\u003ethis\u003c/code\u003e with the adjustment made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "with",
      "comment": "Returns a copy of this date with the specified field set to a new value. This returns a LocalDate, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the year, month or day-of-month. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. In some cases, changing the specified field can cause the resulting date to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a ChronoField then the adjustment is implemented here. The supported fields behave as follows: DAY_OF_WEEK - Returns a LocalDate with the specified day-of-week. The date is adjusted up to 6 days forward or backward within the boundary of a Monday to Sunday week. ALIGNED_DAY_OF_WEEK_IN_MONTH - Returns a LocalDate with the specified aligned-day-of-week. The date is adjusted to the specified month-based aligned-day-of-week. Aligned weeks are counted such that the first week of a given month starts on the first day of that month. This may cause the date to be moved up to 6 days into the following month. ALIGNED_DAY_OF_WEEK_IN_YEAR - Returns a LocalDate with the specified aligned-day-of-week. The date is adjusted to the specified year-based aligned-day-of-week. Aligned weeks are counted such that the first week of a given year starts on the first day of that year. This may cause the date to be moved up to 6 days into the following year. DAY_OF_MONTH - Returns a LocalDate with the specified day-of-month. The month and year will be unchanged. If the day-of-month is invalid for the year and month, then a DateTimeException is thrown. DAY_OF_YEAR - Returns a LocalDate with the specified day-of-year. The year will be unchanged. If the day-of-year is invalid for the year, then a DateTimeException is thrown. EPOCH_DAY - Returns a LocalDate with the specified epoch-day. This completely replaces the date and is equivalent to ofEpochDay(long). ALIGNED_WEEK_OF_MONTH - Returns a LocalDate with the specified aligned-week-of-month. Aligned weeks are counted such that the first week of a given month starts on the first day of that month. This adjustment moves the date in whole week chunks to match the specified week. The result will have the same day-of-week as this date. This may cause the date to be moved into the following month. ALIGNED_WEEK_OF_YEAR - Returns a LocalDate with the specified aligned-week-of-year. Aligned weeks are counted such that the first week of a given year starts on the first day of that year. This adjustment moves the date in whole week chunks to match the specified week. The result will have the same day-of-week as this date. This may cause the date to be moved into the following year. MONTH_OF_YEAR - Returns a LocalDate with the specified month-of-year. The year will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. PROLEPTIC_MONTH - Returns a LocalDate with the specified proleptic-month. The day-of-month will be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. YEAR_OF_ERA - Returns a LocalDate with the specified year-of-era. The era and month will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. YEAR - Returns a LocalDate with the specified year. The month will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. ERA - Returns a LocalDate with the specified era. The year-of-era and month will be unchanged. The day-of-month will also be unchanged, unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. In all cases, if the new value is outside the valid range of values for the field then a DateTimeException will be thrown. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#with(java.time.temporal.TemporalField,long)\"\u003ewith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#with(java.time.temporal.TemporalField,long)\"\u003ewith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to set in the result, not null",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the field in the result"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the field cannot be set",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on \n\u003ccode\u003ethis\u003c/code\u003e with the specified field set, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "year",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withYear",
      "comment": "Returns a copy of this LocalDate with the year altered. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the year to set in the result, from MIN_YEAR to MAX_YEAR"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the year value is invalid"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the requested year, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withMonth",
      "comment": "Returns a copy of this LocalDate with the month-of-year altered. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emonth\u003c/code\u003e - the month-of-year to set in the result, from 1 (January) to 12 (December)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the month-of-year value is invalid"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the requested month, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfMonth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withDayOfMonth",
      "comment": "Returns a copy of this LocalDate with the day-of-month altered. If the resulting date is invalid, an exception is thrown. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the day-of-month to set in the result, from 1 to 28-31"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the day-of-month value is invalid, or if the day-of-month is invalid for the month-year"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the requested day, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfYear",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withDayOfYear",
      "comment": "Returns a copy of this LocalDate with the day-of-year altered. If the resulting date is invalid, an exception is thrown. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edayOfYear\u003c/code\u003e - the day-of-year to set in the result, from 1 to 365-366"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the day-of-year value is invalid, or if the day-of-year is invalid for the year"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the requested day, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "name": "amountToAdd",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plus",
      "comment": "Returns a copy of this date with the specified amount added. This returns a LocalDate, based on this one, with the specified amount added. The amount is typically Period but may be any other type implementing the TemporalAmount interface. The calculation is delegated to the amount object by calling TemporalAmount.addTo(Temporal). The amount implementation is free to implement the addition in any way it wishes, however it typically calls back to plus(long, TemporalUnit). Consult the documentation of the amount implementation to determine if it can be successfully added. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#plus(java.time.temporal.TemporalAmount)\"\u003eplus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#plus(java.time.temporal.TemporalAmount)\"\u003eplus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToAdd\u003c/code\u003e - the amount to add, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the addition cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the addition made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "amountToAdd",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plus",
      "comment": "Returns a copy of this date with the specified amount added. This returns a LocalDate, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. In some cases, adding the amount can cause the resulting date to become invalid. For example, adding one month to 31st January would result in 31st February. In cases like this, the unit is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a ChronoUnit then the addition is implemented here. The supported fields behave as follows: DAYS - Returns a LocalDate with the specified number of days added. This is equivalent to plusDays(long). WEEKS - Returns a LocalDate with the specified number of weeks added. This is equivalent to plusWeeks(long) and uses a 7 day week. MONTHS - Returns a LocalDate with the specified number of months added. This is equivalent to plusMonths(long). The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. YEARS - Returns a LocalDate with the specified number of years added. This is equivalent to plusYears(long). The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. DECADES - Returns a LocalDate with the specified number of decades added. This is equivalent to calling plusYears(long) with the amount multiplied by 10. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. CENTURIES - Returns a LocalDate with the specified number of centuries added. This is equivalent to calling plusYears(long) with the amount multiplied by 100. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. MILLENNIA - Returns a LocalDate with the specified number of millennia added. This is equivalent to calling plusYears(long) with the amount multiplied by 1,000. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. ERAS - Returns a LocalDate with the specified number of eras added. Only two eras are supported so the amount must be one, zero or minus one. If the amount is non-zero then the year is changed such that the year-of-era is unchanged. The day-of-month will be unchanged unless it would be invalid for the new month and year. In that case, the day-of-month is adjusted to the maximum valid value for the new month and year. All other ChronoUnit instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#plus(long,java.time.temporal.TemporalUnit)\"\u003eplus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#plus(long,java.time.temporal.TemporalUnit)\"\u003eplus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToAdd\u003c/code\u003e - the amount of the unit to add to the result, may be negative",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit of the amount to add, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the addition cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the specified amount added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "yearsToAdd",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusYears",
      "comment": "Returns a copy of this LocalDate with the specified number of years added. This method adds the specified amount to the years field in three steps: Add the input years to the year field Check if the resulting date would be invalid Adjust the day-of-month to the last valid day if necessary For example, 2008-02-29 (leap year) plus one year would result in the invalid date 2009-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2009-02-28, is selected instead. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eyearsToAdd\u003c/code\u003e - the years to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the years added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "monthsToAdd",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusMonths",
      "comment": "Returns a copy of this LocalDate with the specified number of months added. This method adds the specified amount to the months field in three steps: Add the input months to the month-of-year field Check if the resulting date would be invalid Adjust the day-of-month to the last valid day if necessary For example, 2007-03-31 plus one month would result in the invalid date 2007-04-31. Instead of returning an invalid result, the last valid day of the month, 2007-04-30, is selected instead. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emonthsToAdd\u003c/code\u003e - the months to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the months added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "weeksToAdd",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusWeeks",
      "comment": "Returns a copy of this LocalDate with the specified number of weeks added. This method adds the specified amount in weeks to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 plus one week would result in 2009-01-07. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eweeksToAdd\u003c/code\u003e - the weeks to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the weeks added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "daysToAdd",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusDays",
      "comment": "Returns a copy of this LocalDate with the specified number of days added. This method adds the specified amount to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 plus one day would result in 2009-01-01. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edaysToAdd\u003c/code\u003e - the days to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the days added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "name": "amountToSubtract",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minus",
      "comment": "Returns a copy of this date with the specified amount subtracted. This returns a LocalDate, based on this one, with the specified amount subtracted. The amount is typically Period but may be any other type implementing the TemporalAmount interface. The calculation is delegated to the amount object by calling TemporalAmount.subtractFrom(Temporal). The amount implementation is free to implement the subtraction in any way it wishes, however it typically calls back to minus(long, TemporalUnit). Consult the documentation of the amount implementation to determine if it can be successfully subtracted. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#minus(java.time.temporal.TemporalAmount)\"\u003eminus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#minus(java.time.temporal.TemporalAmount)\"\u003eminus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToSubtract\u003c/code\u003e - the amount to subtract, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the subtraction cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the subtraction made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "amountToSubtract",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minus",
      "comment": "Returns a copy of this date with the specified amount subtracted. This returns a LocalDate, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to plus(long, TemporalUnit) with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#minus(long,java.time.temporal.TemporalUnit)\"\u003eminus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#minus(long,java.time.temporal.TemporalUnit)\"\u003eminus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToSubtract\u003c/code\u003e - the amount of the unit to subtract from the result, may be negative",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit of the amount to subtract, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the subtraction cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the specified amount subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "yearsToSubtract",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusYears",
      "comment": "Returns a copy of this LocalDate with the specified number of years subtracted. This method subtracts the specified amount from the years field in three steps: Subtract the input years from the year field Check if the resulting date would be invalid Adjust the day-of-month to the last valid day if necessary For example, 2008-02-29 (leap year) minus one year would result in the invalid date 2007-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eyearsToSubtract\u003c/code\u003e - the years to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the years subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "monthsToSubtract",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusMonths",
      "comment": "Returns a copy of this LocalDate with the specified number of months subtracted. This method subtracts the specified amount from the months field in three steps: Subtract the input months from the month-of-year field Check if the resulting date would be invalid Adjust the day-of-month to the last valid day if necessary For example, 2007-03-31 minus one month would result in the invalid date 2007-02-31. Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emonthsToSubtract\u003c/code\u003e - the months to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the months subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "weeksToSubtract",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusWeeks",
      "comment": "Returns a copy of this LocalDate with the specified number of weeks subtracted. This method subtracts the specified amount in weeks from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2009-01-07 minus one week would result in 2008-12-31. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eweeksToSubtract\u003c/code\u003e - the weeks to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the weeks subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "daysToSubtract",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusDays",
      "comment": "Returns a copy of this LocalDate with the specified number of days subtracted. This method subtracts the specified amount from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2009-01-01 minus one day would result in 2008-12-31. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edaysToSubtract\u003c/code\u003e - the days to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "a \n\u003ccode\u003eLocalDate\u003c/code\u003e based on this date with the days subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "R",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalQuery",
            "parameters": [
              {
                "name": "R",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "query",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "R",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "query",
      "comment": "Queries this date using the specified query. This queries this date using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the TemporalQuery.queryFrom(TemporalAccessor) method on the specified query passing this as the argument.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eR\u003c/code\u003e - the type of the result"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#query(java.time.temporal.TemporalQuery)\"\u003equery\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#query(java.time.temporal.TemporalQuery)\"\u003equery\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003equery\u003c/code\u003e - the query to invoke, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to query (defined by the query)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs (defined by the query)"
        ],
        "return": [
          "the query result, null may be returned (defined by the query)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "adjustInto",
      "comment": "Adjusts the specified temporal object to have the same date as this object. This returns a temporal object of the same observable type as the input with the date changed to be the same as this. The adjustment is equivalent to using Temporal.with(TemporalField, long) passing ChronoField.EPOCH_DAY as the field. In most cases, it is clearer to reverse the calling pattern by using Temporal.with(TemporalAdjuster):    // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisLocalDate.adjustInto(temporal);\n   temporal \u003d temporal.with(thisLocalDate);\n This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#adjustInto(java.time.temporal.Temporal)\"\u003eadjustInto\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAdjuster.html#adjustInto(java.time.temporal.Temporal)\"\u003eadjustInto\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAdjuster.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAdjuster\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the target object to be adjusted, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to make the adjustment",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the adjusted object, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "name": "endExclusive",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "until",
      "comment": "Calculates the amount of time until another date in terms of the specified unit. This calculates the amount of time between two LocalDate objects in terms of a single TemporalUnit. The start and end points are this and the specified date. The result will be negative if the end is before the start. The Temporal passed to this method is converted to a LocalDate using from(TemporalAccessor). For example, the amount in days between two dates can be calculated using startDate.until(endDate, DAYS). The calculation returns a whole number, representing the number of complete units between the two dates. For example, the amount in months between 2012-06-15 and 2012-08-14 will only be one month as it is one day short of two months. There are two equivalent ways of using this method. The first is to invoke this method. The second is to use TemporalUnit.between(Temporal, Temporal):    // these two lines are equivalent\n   amount \u003d start.until(end, MONTHS);\n   amount \u003d MONTHS.between(start, end);\n The choice should be made based on which makes the code more readable. The calculation is implemented in this method for ChronoUnit. The units DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA and ERAS are supported. Other ChronoUnit values will throw an exception. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)\"\u003euntil\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)\"\u003euntil\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eendExclusive\u003c/code\u003e - the end date, exclusive, which is converted to a \n\u003ccode\u003eLocalDate\u003c/code\u003e, not null",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit to measure the amount in, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the amount cannot be calculated, or the end temporal cannot be converted to a \n\u003ccode\u003eLocalDate\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the amount of time between this date and the end date"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.ChronoLocalDate",
            "type": "Class"
          },
          "name": "endDateExclusive",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "until",
      "comment": "Calculates the period between this date and another date as a Period. This calculates the period between two dates in terms of years, months and days. The start and end points are this and the specified date. The result will be negative if the end is before the start. The negative sign will be the same in each of year, month and day. The calculation is performed using the ISO calendar system. If necessary, the input date will be converted to ISO. The start date is included, but the end date is not. The period is calculated by removing complete months, then calculating the remaining number of days, adjusting to ensure that both have the same sign. The number of months is then normalized into years and months based on a 12 month year. A month is considered to be complete if the end day-of-month is greater than or equal to the start day-of-month. For example, from 2010-01-15 to 2011-03-18 is \"1 year, 2 months and 3 days\". There are two equivalent ways of using this method. The first is to invoke this method. The second is to use Period.between(LocalDate, LocalDate):    // these two lines are equivalent\n   period \u003d start.until(end);\n   period \u003d Period.between(start, end);\n The choice should be made based on which makes the code more readable.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#until(java.time.chrono.ChronoLocalDate)\"\u003euntil\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eendDateExclusive\u003c/code\u003e - the end date, exclusive, which may be in any chronology, not null"
        ],
        "return": [
          "the period between this date and the end date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.time.LocalDate",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.LocalDate",
            "type": "Class"
          },
          "name": "endExclusive",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "datesUntil",
      "comment": "Returns a sequential ordered stream of dates. The returned stream starts from this date (inclusive) and goes to endExclusive (exclusive) by an incremental step of 1 day. This method is equivalent to datesUntil(endExclusive, Period.ofDays(1)).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eendExclusive\u003c/code\u003e - the end date, exclusive, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if end date is before this date"
        ],
        "return": [
          "a sequential \n\u003ccode\u003eStream\u003c/code\u003e for the range of \n\u003ccode\u003eLocalDate\u003c/code\u003e values"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.time.LocalDate",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.LocalDate",
            "type": "Class"
          },
          "name": "endExclusive",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.Period",
            "type": "Class"
          },
          "name": "step",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "datesUntil",
      "comment": "Returns a sequential ordered stream of dates by given incremental step. The returned stream starts from this date (inclusive) and goes to endExclusive (exclusive). The n-th date which appears in the stream is equal to this.plus(step.multipliedBy(n)) (but the result of step multiplication never overflows). For example, if this date is 2015-01-31, the end date is 2015-05-01 and the step is 1 month, then the stream contains 2015-01-31, 2015-02-28, 2015-03-31, and 2015-04-30.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eendExclusive\u003c/code\u003e - the end date, exclusive, not null",
          "\u003ccode\u003estep\u003c/code\u003e - the non-zero, non-negative \n\u003ccode\u003ePeriod\u003c/code\u003e which represents the step."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if step is zero, or \n\u003ccode\u003estep.getDays()\u003c/code\u003e and \n\u003ccode\u003estep.toTotalMonths()\u003c/code\u003e have opposite sign, or end date is before this date and step is positive, or end date is after this date and step is negative"
        ],
        "return": [
          "a sequential \n\u003ccode\u003eStream\u003c/code\u003e for the range of \n\u003ccode\u003eLocalDate\u003c/code\u003e values"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.format.DateTimeFormatter",
            "type": "Class"
          },
          "name": "formatter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Formats this date using the specified formatter. This date will be passed to the formatter to produce a string.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#format(java.time.format.DateTimeFormatter)\"\u003eformat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eformatter\u003c/code\u003e - the formatter to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if an error occurs during printing"
        ],
        "return": [
          "the formatted date string, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.LocalTime",
            "type": "Class"
          },
          "name": "time",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "atTime",
      "comment": "Combines this date with a time to create a LocalDateTime. This returns a LocalDateTime formed from this date at the specified time. All possible combinations of date and time are valid.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#atTime(java.time.LocalTime)\"\u003eatTime\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - the time to combine with, not null"
        ],
        "return": [
          "the local date-time formed from this date and the specified time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "hour",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "minute",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "atTime",
      "comment": "Combines this date with a time to create a LocalDateTime. This returns a LocalDateTime formed from this date at the specified hour and minute. The seconds and nanosecond fields will be set to zero. The individual time fields must be within their valid range. All possible combinations of date and time are valid.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehour\u003c/code\u003e - the hour-of-day to use, from 0 to 23",
          "\u003ccode\u003eminute\u003c/code\u003e - the minute-of-hour to use, from 0 to 59"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the value of any field is out of range"
        ],
        "return": [
          "the local date-time formed from this date and the specified time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "hour",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "minute",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "second",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "atTime",
      "comment": "Combines this date with a time to create a LocalDateTime. This returns a LocalDateTime formed from this date at the specified hour, minute and second. The nanosecond field will be set to zero. The individual time fields must be within their valid range. All possible combinations of date and time are valid.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehour\u003c/code\u003e - the hour-of-day to use, from 0 to 23",
          "\u003ccode\u003eminute\u003c/code\u003e - the minute-of-hour to use, from 0 to 59",
          "\u003ccode\u003esecond\u003c/code\u003e - the second-of-minute to represent, from 0 to 59"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the value of any field is out of range"
        ],
        "return": [
          "the local date-time formed from this date and the specified time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "hour",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "minute",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "second",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "nanoOfSecond",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "atTime",
      "comment": "Combines this date with a time to create a LocalDateTime. This returns a LocalDateTime formed from this date at the specified hour, minute, second and nanosecond. The individual time fields must be within their valid range. All possible combinations of date and time are valid.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehour\u003c/code\u003e - the hour-of-day to use, from 0 to 23",
          "\u003ccode\u003eminute\u003c/code\u003e - the minute-of-hour to use, from 0 to 59",
          "\u003ccode\u003esecond\u003c/code\u003e - the second-of-minute to represent, from 0 to 59",
          "\u003ccode\u003enanoOfSecond\u003c/code\u003e - the nano-of-second to represent, from 0 to 999,999,999"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the value of any field is out of range"
        ],
        "return": [
          "the local date-time formed from this date and the specified time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.OffsetTime",
            "type": "Class"
          },
          "name": "time",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "atTime",
      "comment": "Combines this date with an offset time to create an OffsetDateTime. This returns an OffsetDateTime formed from this date at the specified time. All possible combinations of date and time are valid.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - the time to combine with, not null"
        ],
        "return": [
          "the offset date-time formed from this date and the specified time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDateTime",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "atStartOfDay",
      "comment": "Combines this date with the time of midnight to create a LocalDateTime at the start of this date. This returns a LocalDateTime formed from this date at the time of midnight, 00:00, at the start of this date.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the local date-time of midnight at the start of this date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.ZonedDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "atStartOfDay",
      "comment": "Returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone. Time-zone rules, such as daylight savings, mean that not every local date-time is valid for the specified zone, thus the local date-time may not be midnight. In most cases, there is only one valid offset for a local date-time. In the case of an overlap, there are two valid offsets, and the earlier one is used, corresponding to the first occurrence of midnight on the date. In the case of a gap, the zoned date-time will represent the instant just after the gap. If the zone ID is a ZoneOffset, then the result always has a time of midnight. To convert to a specific time in a given time-zone call atTime(LocalTime) followed by LocalDateTime.atZone(ZoneId).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the zone ID to use, not null"
        ],
        "return": [
          "the zoned date-time formed from this date and the earliest valid time for the zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.LocalTime",
            "type": "Class"
          },
          "name": "time",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toEpochSecond",
      "comment": "Converts this LocalDate to the number of seconds since the epoch of 1970-01-01T00:00:00Z. This combines this local date with the specified time and offset to calculate the epoch-second value, which is the number of elapsed seconds from 1970-01-01T00:00:00Z. Instants on the time-line after the epoch are positive, earlier are negative.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - the local time, not null",
          "\u003ccode\u003eoffset\u003c/code\u003e - the zone offset, not null"
        ],
        "return": [
          "the number of seconds since the epoch of 1970-01-01T00:00:00Z, may be negative"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.ChronoLocalDate",
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this date to another date. The comparison is primarily based on the date, from earliest to latest. It is \"consistent with equals\", as defined by Comparable. If all the dates being compared are instances of LocalDate, then the comparison will be entirely based on the date. If some dates being compared are in different chronologies, then the chronology is also considered, see ChronoLocalDate.compareTo(java.time.chrono.ChronoLocalDate).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#compareTo(java.time.chrono.ChronoLocalDate)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date to compare to, not null"
        ],
        "return": [
          "the comparator value, negative if less, positive if greater"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.ChronoLocalDate",
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAfter",
      "comment": "Checks if this date is after the specified date. This checks to see if this date represents a point on the local time-line after the other date.    LocalDate a \u003d LocalDate.of(2012, 6, 30);\n   LocalDate b \u003d LocalDate.of(2012, 7, 1);\n   a.isAfter(b) \u003d\u003d false\n   a.isAfter(a) \u003d\u003d false\n   b.isAfter(a) \u003d\u003d true\n This method only considers the position of the two dates on the local time-line. It does not take into account the chronology, or calendar system. This is different from the comparison in compareTo(ChronoLocalDate), but is the same approach as ChronoLocalDate.timeLineOrder().",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#isAfter(java.time.chrono.ChronoLocalDate)\"\u003eisAfter\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date to compare to, not null"
        ],
        "return": [
          "true if this date is after the specified date"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.ChronoLocalDate",
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBefore",
      "comment": "Checks if this date is before the specified date. This checks to see if this date represents a point on the local time-line before the other date.    LocalDate a \u003d LocalDate.of(2012, 6, 30);\n   LocalDate b \u003d LocalDate.of(2012, 7, 1);\n   a.isBefore(b) \u003d\u003d true\n   a.isBefore(a) \u003d\u003d false\n   b.isBefore(a) \u003d\u003d false\n This method only considers the position of the two dates on the local time-line. It does not take into account the chronology, or calendar system. This is different from the comparison in compareTo(ChronoLocalDate), but is the same approach as ChronoLocalDate.timeLineOrder().",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#isBefore(java.time.chrono.ChronoLocalDate)\"\u003eisBefore\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date to compare to, not null"
        ],
        "return": [
          "true if this date is before the specified date"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.ChronoLocalDate",
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEqual",
      "comment": "Checks if this date is equal to the specified date. This checks to see if this date represents the same point on the local time-line as the other date.    LocalDate a \u003d LocalDate.of(2012, 6, 30);\n   LocalDate b \u003d LocalDate.of(2012, 7, 1);\n   a.isEqual(b) \u003d\u003d false\n   a.isEqual(a) \u003d\u003d true\n   b.isEqual(a) \u003d\u003d false\n This method only considers the position of the two dates on the local time-line. It does not take into account the chronology, or calendar system. This is different from the comparison in compareTo(ChronoLocalDate) but is the same approach as ChronoLocalDate.timeLineOrder().",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#isEqual(java.time.chrono.ChronoLocalDate)\"\u003eisEqual\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date to compare to, not null"
        ],
        "return": [
          "true if this date is equal to the specified date"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Checks if this date is equal to another date. Compares this LocalDate with another ensuring that the date is the same. Only objects of type LocalDate are compared, other types return false. To compare the dates of two TemporalAccessor instances, including dates in two different chronologies, use ChronoField.EPOCH_DAY as a comparator.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to check, null returns false"
        ],
        "return": [
          "true if this is equal to the other date"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "A hash code for this date.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a suitable hash code"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Outputs this date as a String, such as 2007-12-03. The output will be in the ISO-8601 format uuuu-MM-dd.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this date, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.time.LocalDate",
  "annotations": [],
  "tagMap": {
    "implSpec": [
      "This class is immutable and thread-safe."
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.time.LocalDate\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}