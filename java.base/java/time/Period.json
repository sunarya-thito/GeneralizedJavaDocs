{
  "packageName": "java.time",
  "simpleName": "Period",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZERO",
      "comment": "A constant for a period of zero.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "years"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofYears",
      "comment": "Obtains a Period representing a number of years. The resulting period will have the specified years. The months and days units will be zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyears\u003c/code\u003e - the number of years, positive or negative"
        ],
        "return": [
          "the period of years, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "months"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofMonths",
      "comment": "Obtains a Period representing a number of months. The resulting period will have the specified months. The years and days units will be zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emonths\u003c/code\u003e - the number of months, positive or negative"
        ],
        "return": [
          "the period of months, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "weeks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofWeeks",
      "comment": "Obtains a Period representing a number of weeks. The resulting period will be day-based, with the amount of days equal to the number of weeks multiplied by 7. The years and months units will be zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eweeks\u003c/code\u003e - the number of weeks, positive or negative"
        ],
        "return": [
          "the period, with the input weeks converted to days, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "days"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofDays",
      "comment": "Obtains a Period representing a number of days. The resulting period will have the specified days. The years and months units will be zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edays\u003c/code\u003e - the number of days, positive or negative"
        ],
        "return": [
          "the period of days, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "years"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "months"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "days"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Obtains a Period representing a number of years, months and days. This creates an instance based on years, months and days.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyears\u003c/code\u003e - the amount of years, may be negative",
          "\u003ccode\u003emonths\u003c/code\u003e - the amount of months, may be negative",
          "\u003ccode\u003edays\u003c/code\u003e - the amount of days, may be negative"
        ],
        "return": [
          "the period of years, months and days, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "field": {
            "name": "amount"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Obtains an instance of Period from a temporal amount. This obtains a period based on the specified amount. A TemporalAmount represents an amount of time, which may be date-based or time-based, which this factory extracts to a Period. The conversion loops around the set of units from the amount and uses the YEARS, MONTHS and DAYS units to create a period. If any other units are found then an exception is thrown. If the amount is a ChronoPeriod then it must use the ISO chronology.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eamount\u003c/code\u003e - the temporal amount to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to convert to a \n\u003ccode\u003ePeriod\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the amount of years, months or days exceeds an int"
        ],
        "return": [
          "the equivalent period, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parse",
      "comment": "Obtains a Period from a text string such as PnYnMnD. This will parse the string produced by toString() which is based on the ISO-8601 period formats PnYnMnD and PnW. The string starts with an optional sign, denoted by the ASCII negative or positive symbol. If negative, the whole period is negated. The ASCII letter \"P\" is next in upper or lower case. There are then four sections, each consisting of a number and a suffix. At least one of the four sections must be present. The sections have suffixes in ASCII of \"Y\", \"M\", \"W\" and \"D\" for years, months, weeks and days, accepted in upper or lower case. The suffixes must occur in order. The number part of each section must consist of ASCII digits. The number may be prefixed by the ASCII negative or positive symbol. The number must parse to an int. The leading plus/minus sign, and negative values for other units are not part of the ISO-8601 standard. In addition, ISO-8601 does not permit mixing between the PnYnMnD and PnW formats. Any week-based input is multiplied by 7 and treated as a number of days. For example, the following are valid inputs:    \"P2Y\"             -- Period.ofYears(2)\n   \"P3M\"             -- Period.ofMonths(3)\n   \"P4W\"             -- Period.ofWeeks(4)\n   \"P5D\"             -- Period.ofDays(5)\n   \"P1Y2M3D\"         -- Period.of(1, 2, 3)\n   \"P1Y2M3W4D\"       -- Period.of(1, 2, 25)\n   \"P-1Y2M\"          -- Period.of(-1, 2, 0)\n   \"-P1Y2M\"          -- Period.of(-1, -2, 0)",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text to parse, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeParseException.html\" title\u003d\"class in java.time.format\"\u003eDateTimeParseException\u003c/a\u003e\u003c/code\u003e - if the text cannot be parsed to a period"
        ],
        "return": [
          "the parsed period, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.LocalDate",
            "type": "Class"
          },
          "field": {
            "name": "startDateInclusive"
          }
        },
        {
          "type": {
            "name": "java.time.LocalDate",
            "type": "Class"
          },
          "field": {
            "name": "endDateExclusive"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "between",
      "comment": "Obtains a Period consisting of the number of years, months, and days between two dates. The start date is included, but the end date is not. The period is calculated by removing complete months, then calculating the remaining number of days, adjusting to ensure that both have the same sign. The number of months is then split into years and months based on a 12 month year. A month is considered if the end day-of-month is greater than or equal to the start day-of-month. For example, from 2010-01-15 to 2011-03-18 is one year, two months and three days. The result of this method can be a negative period if the end is before the start. The negative sign will be the same in each of year, month and day.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#until(java.time.chrono.ChronoLocalDate)\"\u003e\u003ccode\u003eChronoLocalDate.until(ChronoLocalDate)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estartDateInclusive\u003c/code\u003e - the start date, inclusive, not null",
          "\u003ccode\u003eendDateExclusive\u003c/code\u003e - the end date, exclusive, not null"
        ],
        "return": [
          "the period between this date and the end date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Gets the value of the requested unit. This returns a value for each of the three supported units, YEARS, MONTHS and DAYS. All other units throw an exception.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#get(java.time.temporal.TemporalUnit)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#get(java.time.temporal.TemporalUnit)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the \n\u003ccode\u003eTemporalUnit\u003c/code\u003e for which to return the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported"
        ],
        "return": [
          "the long value of the unit"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUnits",
      "comment": "Gets the set of units supported by this period. The supported units are YEARS, MONTHS and DAYS. They are returned in the order years, months, days. This set can be used in conjunction with get(TemporalUnit) to access the entire state of the period.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#getUnits()\"\u003egetUnits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#getUnits()\"\u003egetUnits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a list containing the years, months and days units, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.IsoChronology",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChronology",
      "comment": "Gets the chronology of this period, which is the ISO calendar system. The Chronology represents the calendar system in use. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today\u0027s rules for leap years are applied for all time.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#getChronology()\"\u003egetChronology\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the ISO chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isZero",
      "comment": "Checks if all three units of this period are zero. A zero period has the value zero for the years, months and days units.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#isZero()\"\u003eisZero\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if this period is zero-length"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNegative",
      "comment": "Checks if any of the three units of this period are negative. This checks whether the years, months or days units are less than zero.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#isNegative()\"\u003eisNegative\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if any unit of this period is negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getYears",
      "comment": "Gets the amount of years of this period. This returns the years unit. The months unit is not automatically normalized with the years unit. This means that a period of \"15 months\" is different to a period of \"1 year and 3 months\".",
      "tagMap": {
        "return": [
          "the amount of years of this period, may be negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMonths",
      "comment": "Gets the amount of months of this period. This returns the months unit. The months unit is not automatically normalized with the years unit. This means that a period of \"15 months\" is different to a period of \"1 year and 3 months\".",
      "tagMap": {
        "return": [
          "the amount of months of this period, may be negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDays",
      "comment": "Gets the amount of days of this period. This returns the days unit.",
      "tagMap": {
        "return": [
          "the amount of days of this period, may be negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "years"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withYears",
      "comment": "Returns a copy of this period with the specified amount of years. This sets the amount of the years unit in a copy of this period. The months and days units are unaffected. The months unit is not automatically normalized with the years unit. This means that a period of \"15 months\" is different to a period of \"1 year and 3 months\". This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyears\u003c/code\u003e - the years to represent, may be negative"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the requested years, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "months"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withMonths",
      "comment": "Returns a copy of this period with the specified amount of months. This sets the amount of the months unit in a copy of this period. The years and days units are unaffected. The months unit is not automatically normalized with the years unit. This means that a period of \"15 months\" is different to a period of \"1 year and 3 months\". This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emonths\u003c/code\u003e - the months to represent, may be negative"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the requested months, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "days"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withDays",
      "comment": "Returns a copy of this period with the specified amount of days. This sets the amount of the days unit in a copy of this period. The years and months units are unaffected. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edays\u003c/code\u003e - the days to represent, may be negative"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the requested days, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "field": {
            "name": "amountToAdd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plus",
      "comment": "Returns a copy of this period with the specified period added. This operates separately on the years, months and days. No normalization is performed. For example, \"1 year, 6 months and 3 days\" plus \"2 years, 2 months and 2 days\" returns \"3 years, 8 months and 5 days\". The specified amount is typically an instance of Period. Other types are interpreted using from(TemporalAmount). This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#plus(java.time.temporal.TemporalAmount)\"\u003eplus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToAdd\u003c/code\u003e - the amount to add, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the specified amount has a non-ISO chronology or contains an invalid unit",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the requested period added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "yearsToAdd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusYears",
      "comment": "Returns a copy of this period with the specified years added. This adds the amount to the years unit in a copy of this period. The months and days units are unaffected. For example, \"1 year, 6 months and 3 days\" plus 2 years returns \"3 years, 6 months and 3 days\". This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyearsToAdd\u003c/code\u003e - the years to add, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the specified years added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "monthsToAdd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusMonths",
      "comment": "Returns a copy of this period with the specified months added. This adds the amount to the months unit in a copy of this period. The years and days units are unaffected. For example, \"1 year, 6 months and 3 days\" plus 2 months returns \"1 year, 8 months and 3 days\". This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emonthsToAdd\u003c/code\u003e - the months to add, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the specified months added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "daysToAdd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusDays",
      "comment": "Returns a copy of this period with the specified days added. This adds the amount to the days unit in a copy of this period. The years and months units are unaffected. For example, \"1 year, 6 months and 3 days\" plus 2 days returns \"1 year, 6 months and 5 days\". This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edaysToAdd\u003c/code\u003e - the days to add, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the specified days added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "field": {
            "name": "amountToSubtract"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minus",
      "comment": "Returns a copy of this period with the specified period subtracted. This operates separately on the years, months and days. No normalization is performed. For example, \"1 year, 6 months and 3 days\" minus \"2 years, 2 months and 2 days\" returns \"-1 years, 4 months and 1 day\". The specified amount is typically an instance of Period. Other types are interpreted using from(TemporalAmount). This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#minus(java.time.temporal.TemporalAmount)\"\u003eminus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToSubtract\u003c/code\u003e - the amount to subtract, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the specified amount has a non-ISO chronology or contains an invalid unit",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the requested period subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "yearsToSubtract"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusYears",
      "comment": "Returns a copy of this period with the specified years subtracted. This subtracts the amount from the years unit in a copy of this period. The months and days units are unaffected. For example, \"1 year, 6 months and 3 days\" minus 2 years returns \"-1 years, 6 months and 3 days\". This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyearsToSubtract\u003c/code\u003e - the years to subtract, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the specified years subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "monthsToSubtract"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusMonths",
      "comment": "Returns a copy of this period with the specified months subtracted. This subtracts the amount from the months unit in a copy of this period. The years and days units are unaffected. For example, \"1 year, 6 months and 3 days\" minus 2 months returns \"1 year, 4 months and 3 days\". This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emonthsToSubtract\u003c/code\u003e - the years to subtract, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the specified months subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "daysToSubtract"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusDays",
      "comment": "Returns a copy of this period with the specified days subtracted. This subtracts the amount from the days unit in a copy of this period. The years and months units are unaffected. For example, \"1 year, 6 months and 3 days\" minus 2 days returns \"1 year, 6 months and 1 day\". This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edaysToSubtract\u003c/code\u003e - the months to subtract, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the specified days subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scalar"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "multipliedBy",
      "comment": "Returns a new instance with each element in this period multiplied by the specified scalar. This returns a period with each of the years, months and days units individually multiplied. For example, a period of \"2 years, -3 months and 4 days\" multiplied by 3 will return \"6 years, -9 months and 12 days\". No normalization is performed.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#multipliedBy(int)\"\u003emultipliedBy\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003escalar\u003c/code\u003e - the scalar to multiply by, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the amounts multiplied by the scalar, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "negated",
      "comment": "Returns a new instance with each amount in this period negated. This returns a period with each of the years, months and days units individually negated. For example, a period of \"2 years, -3 months and 4 days\" will be negated to \"-2 years, 3 months and -4 days\". No normalization is performed.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#negated()\"\u003enegated\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs, which only happens if one of the units has the value \n\u003ccode\u003eInteger.MIN_VALUE\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with the amounts negated, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "normalized",
      "comment": "Returns a copy of this period with the years and months normalized. This normalizes the years and months units, leaving the days unit unchanged. The months unit is adjusted to have an absolute value less than 12, with the years unit being adjusted to compensate. For example, a period of \"1 Year and 15 months\" will be normalized to \"2 years and 3 months\". The sign of the years and months units will be the same after normalization. For example, a period of \"1 year and -25 months\" will be normalized to \"-1 year and -1 month\". This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#normalized()\"\u003enormalized\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003ePeriod\u003c/code\u003e based on this period with excess months normalized to years, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toTotalMonths",
      "comment": "Gets the total number of months in this period. This returns the total number of months in the period by multiplying the number of years by 12 and adding the number of months. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "return": [
          "the total number of months in the period, may be negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addTo",
      "comment": "Adds this period to the specified temporal object. This returns a temporal object of the same observable type as the input with this period added. If the temporal has a chronology, it must be the ISO chronology. In most cases, it is clearer to reverse the calling pattern by using Temporal.plus(TemporalAmount).    // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisPeriod.addTo(dateTime);\n   dateTime \u003d dateTime.plus(thisPeriod);\n The calculation operates as follows. First, the chronology of the temporal is checked to ensure it is ISO chronology or null. Second, if the months are zero, the years are added if non-zero, otherwise the combination of years and months is added if non-zero. Finally, any days are added. This approach ensures that a partial period can be added to a partial date. For example, a period of years and/or months can be added to a YearMonth, but a period including days cannot. The approach also adds years and months together when necessary, which ensures correct behaviour at the end of the month. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#addTo(java.time.temporal.Temporal)\"\u003eaddTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#addTo(java.time.temporal.Temporal)\"\u003eaddTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to adjust, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to add",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the adjustment made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtractFrom",
      "comment": "Subtracts this period from the specified temporal object. This returns a temporal object of the same observable type as the input with this period subtracted. If the temporal has a chronology, it must be the ISO chronology. In most cases, it is clearer to reverse the calling pattern by using Temporal.minus(TemporalAmount).    // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisPeriod.subtractFrom(dateTime);\n   dateTime \u003d dateTime.minus(thisPeriod);\n The calculation operates as follows. First, the chronology of the temporal is checked to ensure it is ISO chronology or null. Second, if the months are zero, the years are subtracted if non-zero, otherwise the combination of years and months is subtracted if non-zero. Finally, any days are subtracted. This approach ensures that a partial period can be subtracted from a partial date. For example, a period of years and/or months can be subtracted from a YearMonth, but a period including days cannot. The approach also subtracts years and months together when necessary, which ensures correct behaviour at the end of the month. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#subtractFrom(java.time.temporal.Temporal)\"\u003esubtractFrom\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#subtractFrom(java.time.temporal.Temporal)\"\u003esubtractFrom\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to adjust, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to subtract",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the adjustment made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Checks if this period is equal to another period. The comparison is based on the type Period and each of the three amounts. To be equal, the years, months and days units must be individually equal. Note that this means that a period of \"15 Months\" is not equal to a period of \"1 Year and 3 Months\".",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to check, null returns false"
        ],
        "return": [
          "true if this is equal to the other period"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "A hash code for this period.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a suitable hash code"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Outputs this period as a String, such as P6Y3M1D. The output will be in the ISO-8601 period format. A zero period will be represented as zero days, \u0027P0D\u0027.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoPeriod.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoPeriod\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this period, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.time.Period",
  "comment": "A date-based amount of time in the ISO-8601 calendar system, such as \u00272 years, 3 months and 4 days\u0027. \n\u003cp\u003e This class models a quantity or amount of time in terms of years, months and days. See \u003ca href\u003d\"Duration.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003eDuration\u003c/code\u003e\u003c/a\u003e for the time-based equivalent to this class. \u003c/p\u003e\n\u003cp\u003e Durations and periods differ in their treatment of daylight savings time when added to \u003ca href\u003d\"ZonedDateTime.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003eZonedDateTime\u003c/code\u003e\u003c/a\u003e. A \u003ccode\u003eDuration\u003c/code\u003e will add an exact number of seconds, thus a duration of one day is always exactly 24 hours. By contrast, a \u003ccode\u003ePeriod\u003c/code\u003e will add a conceptual day, trying to maintain the local time. \u003c/p\u003e\n\u003cp\u003e For example, consider adding a period of one day and a duration of one day to 18:00 on the evening before a daylight savings gap. The \u003ccode\u003ePeriod\u003c/code\u003e will add the conceptual day and result in a \u003ccode\u003eZonedDateTime\u003c/code\u003e at 18:00 the following day. By contrast, the \u003ccode\u003eDuration\u003c/code\u003e will add exactly 24 hours, resulting in a \u003ccode\u003eZonedDateTime\u003c/code\u003e at 19:00 the following day (assuming a one hour DST gap). \u003c/p\u003e\n\u003cp\u003e The supported units of a period are \u003ca href\u003d\"temporal/ChronoUnit.html#YEARS\"\u003e\u003ccode\u003eYEARS\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"temporal/ChronoUnit.html#MONTHS\"\u003e\u003ccode\u003eMONTHS\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"temporal/ChronoUnit.html#DAYS\"\u003e\u003ccode\u003eDAYS\u003c/code\u003e\u003c/a\u003e. All three fields are always present, but may be set to zero. \u003c/p\u003e\n\u003cp\u003e The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today\u0027s rules for leap years are applied for all time. \u003c/p\u003e\n\u003cp\u003e The period is modeled as a directed amount of time, meaning that individual parts of the period may be negative. \u003c/p\u003e\n\u003cp\u003e This is a \u003ca href\u003d\"../../../java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e class; programmers should treat instances that are \u003ca href\u003d\"#equals(java.lang.Object)\"\u003eequal\u003c/a\u003e as interchangeable and should not use instances for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail. The \u003ccode\u003eequals\u003c/code\u003e method should be used for comparisons.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "This class is immutable and thread-safe."
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.time.Period\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}