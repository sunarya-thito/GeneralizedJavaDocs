{
  "packageName": "java.time.chrono",
  "simpleName": "ChronoLocalDateTime",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.time.temporal.Temporal",
      "type": "Class"
    },
    {
      "name": "java.time.temporal.TemporalAdjuster",
      "type": "Class"
    },
    {
      "name": "java.lang.Comparable",
      "parameters": [
        {
          "name": "java.time.chrono.ChronoLocalDateTime",
          "parameters": [
            {
              "type": "Wildcard"
            }
          ],
          "type": "Class"
        }
      ],
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "java.time.chrono.ChronoLocalDateTime",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "timeLineOrder",
      "comment": "Gets a comparator that compares ChronoLocalDateTime in time-line order ignoring the chronology. This comparator differs from the comparison in compareTo(java.time.chrono.ChronoLocalDateTime\u003c?\u003e) in that it only compares the underlying date-time and not the chronology. This allows dates in different calendar systems to be compared based on the position of the date-time on the local time-line. The underlying comparison is equivalent to comparing the epoch-day and nano-of-day.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDateTime.html#isAfter(java.time.chrono.ChronoLocalDateTime)\"\u003e\u003ccode\u003eisAfter(java.time.chrono.ChronoLocalDateTime\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDateTime.html#isBefore(java.time.chrono.ChronoLocalDateTime)\"\u003e\u003ccode\u003eisBefore(java.time.chrono.ChronoLocalDateTime\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDateTime.html#isEqual(java.time.chrono.ChronoLocalDateTime)\"\u003e\u003ccode\u003eisEqual(java.time.chrono.ChronoLocalDateTime\u0026lt;?\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a comparator that compares in time-line order ignoring the chronology"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDateTime",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "from",
      "comment": "Obtains an instance of ChronoLocalDateTime from a temporal object. This obtains a local date-time based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ChronoLocalDateTime. The conversion extracts and combines the chronology and the date-time from the temporal object. The behavior is equivalent to using Chronology.localDateTime(TemporalAccessor) with the extracted chronology. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. This method matches the signature of the functional interface TemporalQuery allowing it to be used as a query via method reference, ChronoLocalDateTime::from.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#localDateTime(java.time.temporal.TemporalAccessor)\"\u003e\u003ccode\u003eChronology.localDateTime(TemporalAccessor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to convert to a \n\u003ccode\u003eChronoLocalDateTime\u003c/code\u003e"
        ],
        "return": [
          "the date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.Chronology",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChronology",
      "comment": "Gets the chronology of this date-time. The Chronology represents the calendar system in use. The era and other fields in ChronoField are defined by the chronology.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.time.chrono.ChronoLocalDateTime",
        "name": "D",
        "type": "Variable"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toLocalDate",
      "comment": "Gets the local date part of this date-time. This returns a local date with the same year, month and day as this date-time.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the date part of this date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalTime",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toLocalTime",
      "comment": "Gets the local time part of this date-time. This returns a local time with the same hour, minute, second and nanosecond as this date-time.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the time part of this date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSupported",
      "comment": "Checks if the specified field is supported. This checks if the specified field can be queried on this date-time. If false, then calling the range, get and with(TemporalField, long) methods will throw an exception. The set of supported fields is defined by the chronology and normally includes all ChronoField date and time fields. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#isSupported(java.time.temporal.TemporalField)\"\u003eisSupported\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to check, null returns false"
        ],
        "return": [
          "true if the field can be queried, false if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSupported",
      "comment": "Checks if the specified unit is supported. This checks if the specified unit can be added to or subtracted from this date-time. If false, then calling the plus(long, TemporalUnit) and minus methods will throw an exception. The set of supported units is defined by the chronology and normally includes all ChronoUnit units except FOREVER. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#isSupported(java.time.temporal.TemporalUnit)\"\u003eisSupported\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the unit to check, null returns false"
        ],
        "return": [
          "true if the unit can be added/subtracted, false if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDateTime",
        "parameters": [
          {
            "owner": "java.time.chrono.ChronoLocalDateTime",
            "name": "D",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAdjuster",
            "type": "Class"
          },
          "name": "adjuster",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "with",
      "comment": "Returns an adjusted object of the same type as this object with the adjustment made. This adjusts this date-time according to the rules of the specified adjuster. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in TemporalAdjusters. These include finding the \"last day of the month\" and \"next Wednesday\". The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years. Some example code indicating how and why this method is used:   date \u003d date.with(Month.JULY);        // most key classes implement TemporalAdjuster\n  date \u003d date.with(lastDayOfMonth());  // static import from Adjusters\n  date \u003d date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#with(java.time.temporal.TemporalAdjuster)\"\u003ewith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eadjuster\u003c/code\u003e - the adjuster to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to make the adjustment",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the specified adjustment made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDateTime",
        "parameters": [
          {
            "owner": "java.time.chrono.ChronoLocalDateTime",
            "name": "D",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "with",
      "comment": "Returns an object of the same type as this object with the specified field altered. This returns a new object based on this one with the value for the specified field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#with(java.time.temporal.TemporalField,long)\"\u003ewith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to set in the result, not null",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the field in the result"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the field cannot be set",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the specified field set, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDateTime",
        "parameters": [
          {
            "owner": "java.time.chrono.ChronoLocalDateTime",
            "name": "D",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "name": "amount",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "plus",
      "comment": "Returns an object of the same type as this object with an amount added. This adjusts this temporal, adding according to the rules of the specified amount. The amount is typically a Period but may be any other type implementing the TemporalAmount interface, such as Duration. Some example code indicating how and why this method is used:   date \u003d date.plus(period);                // add a Period instance\n  date \u003d date.plus(duration);              // add a Duration instance\n  date \u003d date.plus(workingDays(6));        // example user-written workingDays method\n Note that calling plus followed by minus is not guaranteed to return the same date-time.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#plus(java.time.temporal.TemporalAmount)\"\u003eplus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamount\u003c/code\u003e - the amount to add, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the addition cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the specified adjustment made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDateTime",
        "parameters": [
          {
            "owner": "java.time.chrono.ChronoLocalDateTime",
            "name": "D",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "amountToAdd",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "plus",
      "comment": "Returns an object of the same type as this object with the specified period added. This method returns a new object based on this one with the specified period added. For example, on a LocalDate, this could be used to add a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#plus(long,java.time.temporal.TemporalUnit)\"\u003eplus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToAdd\u003c/code\u003e - the amount of the specified unit to add, may be negative",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit of the amount to add, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the unit cannot be added",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the specified period added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDateTime",
        "parameters": [
          {
            "owner": "java.time.chrono.ChronoLocalDateTime",
            "name": "D",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "name": "amount",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "minus",
      "comment": "Returns an object of the same type as this object with an amount subtracted. This adjusts this temporal, subtracting according to the rules of the specified amount. The amount is typically a Period but may be any other type implementing the TemporalAmount interface, such as Duration. Some example code indicating how and why this method is used:   date \u003d date.minus(period);               // subtract a Period instance\n  date \u003d date.minus(duration);             // subtract a Duration instance\n  date \u003d date.minus(workingDays(6));       // example user-written workingDays method\n Note that calling plus followed by minus is not guaranteed to return the same date-time.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#minus(java.time.temporal.TemporalAmount)\"\u003eminus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamount\u003c/code\u003e - the amount to subtract, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the subtraction cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the specified adjustment made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDateTime",
        "parameters": [
          {
            "owner": "java.time.chrono.ChronoLocalDateTime",
            "name": "D",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "amountToSubtract",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "minus",
      "comment": "Returns an object of the same type as this object with the specified period subtracted. This method returns a new object based on this one with the specified period subtracted. For example, on a LocalDate, this could be used to subtract a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#minus(long,java.time.temporal.TemporalUnit)\"\u003eminus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToSubtract\u003c/code\u003e - the amount of the specified unit to subtract, may be negative",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit of the amount to subtract, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the unit cannot be subtracted",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the specified period subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "R",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalQuery",
            "parameters": [
              {
                "name": "R",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "query",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "R",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "query",
      "comment": "Queries this date-time using the specified query. This queries this date-time using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the TemporalQuery.queryFrom(TemporalAccessor) method on the specified query passing this as the argument.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eR\u003c/code\u003e - the type of the result"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#query(java.time.temporal.TemporalQuery)\"\u003equery\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003equery\u003c/code\u003e - the query to invoke, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to query (defined by the query)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs (defined by the query)"
        ],
        "return": [
          "the query result, null may be returned (defined by the query)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "adjustInto",
      "comment": "Adjusts the specified temporal object to have the same date and time as this object. This returns a temporal object of the same observable type as the input with the date and time changed to be the same as this. The adjustment is equivalent to using Temporal.with(TemporalField, long) twice, passing ChronoField.EPOCH_DAY and ChronoField.NANO_OF_DAY as the fields. In most cases, it is clearer to reverse the calling pattern by using Temporal.with(TemporalAdjuster):    // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisLocalDateTime.adjustInto(temporal);\n   temporal \u003d temporal.with(thisLocalDateTime);\n This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAdjuster.html#adjustInto(java.time.temporal.Temporal)\"\u003eadjustInto\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAdjuster.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAdjuster\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the target object to be adjusted, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to make the adjustment",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the adjusted object, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.format.DateTimeFormatter",
            "type": "Class"
          },
          "name": "formatter",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "format",
      "comment": "Formats this date-time using the specified formatter. This date-time will be passed to the formatter to produce a string. The default implementation must behave as follows:   return formatter.format(this);",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eformatter\u003c/code\u003e - the formatter to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if an error occurs during printing"
        ],
        "return": [
          "the formatted date-time string, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoZonedDateTime",
        "parameters": [
          {
            "owner": "java.time.chrono.ChronoLocalDateTime",
            "name": "D",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "atZone",
      "comment": "Combines this time with a time-zone to create a ChronoZonedDateTime. This returns a ChronoZonedDateTime formed from this date-time at the specified time-zone. The result will match this date-time as closely as possible. Time-zone rules, such as daylight savings, mean that not every local date-time is valid for the specified zone, thus the local date-time may be adjusted. The local date-time is resolved to a single instant on the time-line. This is achieved by finding a valid offset from UTC/Greenwich for the local date-time as defined by the rules of the zone ID. In most cases, there is only one valid offset for a local date-time. In the case of an overlap, where clocks are set back, there are two valid offsets. This method uses the earlier offset typically corresponding to \"summer\". In the case of a gap, where clocks jump forward, there is no valid offset. Instead, the local date-time is adjusted to be later by the length of the gap. For a typical one hour daylight savings change, the local date-time will be moved one hour later into the offset typically corresponding to \"summer\". To obtain the later offset during an overlap, call ChronoZonedDateTime.withLaterOffsetAtOverlap() on the result of this method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone to use, not null"
        ],
        "return": [
          "the zoned date-time formed from this date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Instant",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toInstant",
      "comment": "Converts this date-time to an Instant. This combines this local date-time and the specified offset to form an Instant. This default implementation calculates from the epoch-day of the date and the second-of-day of the time.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset to use for the conversion, not null"
        ],
        "return": [
          "an \n\u003ccode\u003eInstant\u003c/code\u003e representing the same instant, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toEpochSecond",
      "comment": "Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z. This combines this local date-time and the specified offset to calculate the epoch-second value, which is the number of elapsed seconds from 1970-01-01T00:00:00Z. Instants on the time-line after the epoch are positive, earlier are negative. This default implementation calculates from the epoch-day of the date and the second-of-day of the time.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset to use for the conversion, not null"
        ],
        "return": [
          "the number of seconds from the epoch of 1970-01-01T00:00:00Z"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.ChronoLocalDateTime",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "compareTo",
      "comment": "Compares this date-time to another date-time, including the chronology. The comparison is based first on the underlying time-line date-time, then on the chronology. It is \"consistent with equals\", as defined by Comparable. For example, the following is the comparator order: 2012-12-03T12:00 (ISO) 2012-12-04T12:00 (ISO) 2555-12-04T12:00 (ThaiBuddhist) 2012-12-05T12:00 (ISO) Values #2 and #3 represent the same date-time on the time-line. When two values represent the same date-time, the chronology ID is compared to distinguish them. This step is needed to make the ordering \"consistent with equals\". If all the date-time objects being compared are in the same chronology, then the additional chronology stage is not required and only the local date-time is used. This default implementation performs the comparison defined above.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDateTime.html\" title\u003d\"type parameter in ChronoLocalDateTime\"\u003eD\u003c/a\u003e extends \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003eChronoLocalDate\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date-time to compare to, not null"
        ],
        "return": [
          "the comparator value, negative if less, positive if greater"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.ChronoLocalDateTime",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isAfter",
      "comment": "Checks if this date-time is after the specified date-time ignoring the chronology. This method differs from the comparison in compareTo(java.time.chrono.ChronoLocalDateTime\u003c?\u003e) in that it only compares the underlying date-time and not the chronology. This allows dates in different calendar systems to be compared based on the time-line position. This default implementation performs the comparison based on the epoch-day and nano-of-day.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date-time to compare to, not null"
        ],
        "return": [
          "true if this is after the specified date-time"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.ChronoLocalDateTime",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isBefore",
      "comment": "Checks if this date-time is before the specified date-time ignoring the chronology. This method differs from the comparison in compareTo(java.time.chrono.ChronoLocalDateTime\u003c?\u003e) in that it only compares the underlying date-time and not the chronology. This allows dates in different calendar systems to be compared based on the time-line position. This default implementation performs the comparison based on the epoch-day and nano-of-day.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date-time to compare to, not null"
        ],
        "return": [
          "true if this is before the specified date-time"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.ChronoLocalDateTime",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEqual",
      "comment": "Checks if this date-time is equal to the specified date-time ignoring the chronology. This method differs from the comparison in compareTo(java.time.chrono.ChronoLocalDateTime\u003c?\u003e) in that it only compares the underlying date and time and not the chronology. This allows date-times in different calendar systems to be compared based on the time-line position. This default implementation performs the comparison based on the epoch-day and nano-of-day.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date-time to compare to, not null"
        ],
        "return": [
          "true if the underlying date-time is equal to the specified date-time on the timeline"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Checks if this date-time is equal to another date-time, including the chronology. Compares this date-time with another ensuring that the date-time and chronology are the same.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to check, null returns false"
        ],
        "return": [
          "true if this is equal to the other date"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hashCode",
      "comment": "A hash code for this date-time.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a suitable hash code"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toString",
      "comment": "Outputs this date-time as a String. The output will include the full local date-time.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this date-time, not null"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "D",
      "upperBounds": [
        {
          "name": "java.time.chrono.ChronoLocalDate",
          "type": "Class"
        }
      ],
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.time.chrono.ChronoLocalDateTime",
  "comment": "A date-time without a time-zone in an arbitrary chronology, intended for advanced globalization use cases. \n\u003cp\u003e \u003cb\u003eMost applications should declare method signatures, fields and variables as \u003ca href\u003d\"../LocalDateTime.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003eLocalDateTime\u003c/code\u003e\u003c/a\u003e, not this interface.\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eChronoLocalDateTime\u003c/code\u003e is the abstract representation of a local date-time where the \u003ccode\u003eChronology chronology\u003c/code\u003e, or calendar system, is pluggable. The date-time is defined in terms of fields expressed by \u003ca href\u003d\"../temporal/TemporalField.html\" title\u003d\"interface in java.time.temporal\"\u003e\u003ccode\u003eTemporalField\u003c/code\u003e\u003c/a\u003e, where most common implementations are defined in \u003ca href\u003d\"../temporal/ChronoField.html\" title\u003d\"enum class in java.time.temporal\"\u003e\u003ccode\u003eChronoField\u003c/code\u003e\u003c/a\u003e. The chronology defines how the calendar system operates and the meaning of the standard fields. \u003c/p\u003e\n\u003ch2\u003eWhen to use this interface\u003c/h2\u003e The design of the API encourages the use of \n\u003ccode\u003eLocalDateTime\u003c/code\u003e rather than this interface, even in the case where the application needs to deal with multiple calendar systems. The rationale for this is explored in detail in \n\u003ca href\u003d\"ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003e\u003ccode\u003eChronoLocalDate\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003e Ensure that the discussion in \u003ccode\u003eChronoLocalDate\u003c/code\u003e has been read and understood before using this interface.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "This interface must be implemented with care to ensure other classes operate correctly. All implementations that can be instantiated must be final, immutable and thread-safe. Subclasses should be Serializable wherever possible."
    ],
    "since": [
      "1.8"
    ]
  }
}