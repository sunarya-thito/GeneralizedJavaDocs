{
  "packageName": "java.time.chrono",
  "simpleName": "ChronoPeriod",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.time.temporal.TemporalAmount",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.time.chrono.ChronoPeriod",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.ChronoLocalDate",
            "type": "Class"
          },
          "name": "startDateInclusive",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.ChronoLocalDate",
            "type": "Class"
          },
          "name": "endDateExclusive",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "between",
      "comment": "Obtains a ChronoPeriod consisting of amount of time between two dates. The start date is included, but the end date is not. The period is calculated using ChronoLocalDate.until(ChronoLocalDate). As such, the calculation is chronology specific. The chronology of the first date is used. The chronology of the second date is ignored, with the date being converted to the target chronology system before the calculation starts. The result of this method can be a negative period if the end is before the start. In most cases, the positive/negative sign will be the same in each of the supported fields.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#until(java.time.chrono.ChronoLocalDate)\"\u003e\u003ccode\u003eChronoLocalDate.until(ChronoLocalDate)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estartDateInclusive\u003c/code\u003e - the start date, inclusive, specifying the chronology of the calculation, not null",
          "\u003ccode\u003eendDateExclusive\u003c/code\u003e - the end date, exclusive, in any chronology, not null"
        ],
        "return": [
          "the period between this date and the end date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Gets the value of the requested unit. The supported units are chronology specific. They will typically be YEARS, MONTHS and DAYS. Requesting an unsupported unit will throw an exception.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#get(java.time.temporal.TemporalUnit)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the \n\u003ccode\u003eTemporalUnit\u003c/code\u003e for which to return the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported"
        ],
        "return": [
          "the long value of the unit"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUnits",
      "comment": "Gets the set of units supported by this period. The supported units are chronology specific. They will typically be YEARS, MONTHS and DAYS. They are returned in order from largest to smallest. This set can be used in conjunction with get(TemporalUnit) to access the entire state of the period.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#getUnits()\"\u003egetUnits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a list containing the supported units, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.Chronology",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getChronology",
      "comment": "Gets the chronology that defines the meaning of the supported units. The period is defined by the chronology. It controls the supported units and restricts addition/subtraction to ChronoLocalDate instances of the same chronology.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the chronology defining the period, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isZero",
      "comment": "Checks if all the supported units of this period are zero.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if this period is zero-length"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isNegative",
      "comment": "Checks if any of the supported units of this period are negative.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if any unit of this period is negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoPeriod",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "name": "amountToAdd",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "plus",
      "comment": "Returns a copy of this period with the specified period added. If the specified amount is a ChronoPeriod then it must have the same chronology as this period. Implementations may choose to accept or reject other TemporalAmount implementations. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eamountToAdd\u003c/code\u003e - the period to add, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eChronoPeriod\u003c/code\u003e based on this period with the requested period added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoPeriod",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "name": "amountToSubtract",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "minus",
      "comment": "Returns a copy of this period with the specified period subtracted. If the specified amount is a ChronoPeriod then it must have the same chronology as this period. Implementations may choose to accept or reject other TemporalAmount implementations. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eamountToSubtract\u003c/code\u003e - the period to subtract, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eChronoPeriod\u003c/code\u003e based on this period with the requested period subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoPeriod",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "scalar",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "multipliedBy",
      "comment": "Returns a new instance with each amount in this period in this period multiplied by the specified scalar. This returns a period with each supported unit individually multiplied. For example, a period of \"2 years, -3 months and 4 days\" multiplied by 3 will return \"6 years, -9 months and 12 days\". No normalization is performed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003escalar\u003c/code\u003e - the scalar to multiply by, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eChronoPeriod\u003c/code\u003e based on this period with the amounts multiplied by the scalar, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoPeriod",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "negated",
      "comment": "Returns a new instance with each amount in this period negated. This returns a period with each supported unit individually negated. For example, a period of \"2 years, -3 months and 4 days\" will be negated to \"-2 years, 3 months and -4 days\". No normalization is performed.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs, which only happens if one of the units has the value \n\u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eChronoPeriod\u003c/code\u003e based on this period with the amounts negated, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoPeriod",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "normalized",
      "comment": "Returns a copy of this period with the amounts of each unit normalized. The process of normalization is specific to each calendar system. For example, in the ISO calendar system, the years and months are normalized but the days are not, such that \"15 months\" would be normalized to \"1 year and 3 months\". This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eChronoPeriod\u003c/code\u003e based on this period with the amounts of each unit normalized, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addTo",
      "comment": "Adds this period to the specified temporal object. This returns a temporal object of the same observable type as the input with this period added. In most cases, it is clearer to reverse the calling pattern by using Temporal.plus(TemporalAmount).    // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisPeriod.addTo(dateTime);\n   dateTime \u003d dateTime.plus(thisPeriod);\n The specified temporal must have the same chronology as this period. This returns a temporal with the non-zero supported units added. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#addTo(java.time.temporal.Temporal)\"\u003eaddTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to adjust, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to add",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the adjustment made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subtractFrom",
      "comment": "Subtracts this period from the specified temporal object. This returns a temporal object of the same observable type as the input with this period subtracted. In most cases, it is clearer to reverse the calling pattern by using Temporal.minus(TemporalAmount).    // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisPeriod.subtractFrom(dateTime);\n   dateTime \u003d dateTime.minus(thisPeriod);\n The specified temporal must have the same chronology as this period. This returns a temporal with the non-zero supported units subtracted. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#subtractFrom(java.time.temporal.Temporal)\"\u003esubtractFrom\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to adjust, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to subtract",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the adjustment made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Checks if this period is equal to another period, including the chronology. Compares this period with another ensuring that the type, each amount and the chronology are the same. Note that this means that a period of \"15 Months\" is not equal to a period of \"1 Year and 3 Months\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to check, null returns false"
        ],
        "return": [
          "true if this is equal to the other period"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hashCode",
      "comment": "A hash code for this period.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a suitable hash code"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toString",
      "comment": "Outputs this period as a String. The output will include the period amounts and chronology.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this period, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.time.chrono.ChronoPeriod",
  "annotations": [],
  "tagMap": {
    "implSpec": [
      "This interface must be implemented with care to ensure other classes operate correctly. All implementations that can be instantiated must be final, immutable and thread-safe. Subclasses should be Serializable wherever possible."
    ],
    "since": [
      "1.8"
    ]
  }
}