{
  "packageName": "java.time.chrono",
  "simpleName": "Chronology",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Comparable",
    "parameters": [
      {
        "name": "java.time.chrono.Chronology",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.time.chrono.Chronology",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "from",
      "comment": "Obtains an instance of Chronology from a temporal object. This obtains a chronology based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of Chronology. The conversion will obtain the chronology using TemporalQueries.chronology(). If the specified temporal object does not have a chronology, IsoChronology is returned. This method matches the signature of the functional interface TemporalQuery allowing it to be used as a query via method reference, Chronology::from.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to convert to a \n\u003ccode\u003eChronology\u003c/code\u003e"
        ],
        "return": [
          "the chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.Chronology",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "ofLocale",
      "comment": "Obtains an instance of Chronology from a locale. This returns a Chronology based on the specified locale, typically returning IsoChronology. Other calendar systems are only returned if they are explicitly selected within the locale. The Locale class provide access to a range of information useful for localizing an application. This includes the language and region, such as \"en-GB\" for English as used in Great Britain. The Locale class also supports an extension mechanism that can be used to identify a calendar system. The mechanism is a form of key-value pairs, where the calendar system has the key \"ca\". For example, the locale \"en-JP-u-ca-japanese\" represents the English language as used in Japan with the Japanese calendar system. This method finds the desired calendar system in a manner equivalent to passing \"ca\" to Locale.getUnicodeLocaleType(String). If the \"ca\" key is not present, then IsoChronology is returned. Note that the behavior of this method differs from the older Calendar.getInstance(Locale) method. If that method receives a locale of \"th_TH\" it will return BuddhistCalendar. By contrast, this method will return IsoChronology. Passing the locale \"th-TH-u-ca-buddhist\" into either method will result in the Thai Buddhist calendar system and is therefore the recommended approach going forward for Thai calendar system localization. A similar, but simpler, situation occurs for the Japanese calendar system. The locale \"jp_JP_JP\" has previously been used to access the calendar. However, unlike the Thai locale, \"ja_JP_JP\" is automatically converted by Locale to the modern and recommended form of \"ja-JP-u-ca-japanese\". Thus, there is no difference in behavior between this method and Calendar#getInstance(Locale).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the locale to use to obtain the calendar system, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the locale-specified calendar cannot be found"
        ],
        "return": [
          "the calendar system associated with the locale, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.Chronology",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "id",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Obtains an instance of Chronology from a chronology ID or calendar system type. This returns a chronology based on either the ID or the type. The chronology ID uniquely identifies the chronology. The calendar system type is defined by the CLDR specification. The chronology may be a system chronology or a chronology provided by the application via ServiceLoader configuration. Since some calendars can be customized, the ID or type typically refers to the default customization. For example, the Gregorian calendar can have multiple cutover dates from the Julian, but the lookup only provides the default cutover date.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eid\u003c/code\u003e - the chronology ID or calendar system type, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the chronology cannot be found"
        ],
        "return": [
          "the chronology with the identifier requested, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.time.chrono.Chronology",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "getAvailableChronologies",
      "comment": "Returns the available chronologies. Each returned Chronology is available for use in the system. The set of chronologies includes the system chronologies and any chronologies provided by the application via ServiceLoader configuration.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the independent, modifiable set of the available chronology IDs, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getId",
      "comment": "Gets the ID of the chronology. The ID uniquely identifies the Chronology. It can be used to lookup the Chronology using of(String).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#getCalendarType()\"\u003e\u003ccode\u003egetCalendarType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the chronology ID, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCalendarType",
      "comment": "Gets the calendar type of the calendar system. The calendar type is an identifier defined by the CLDR and Unicode Locale Data Markup Language (LDML) specifications to uniquely identify a calendar. The getCalendarType is the concatenation of the CLDR calendar type and the variant, if applicable, is appended separated by \"-\". The calendar type is used to lookup the Chronology using of(String).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#getId()\"\u003e\u003ccode\u003egetId()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the calendar system type, null if the calendar is not defined by CLDR/LDML"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.Era",
            "type": "Class"
          },
          "name": "era",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "yearOfEra",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfMonth",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "date",
      "comment": "Obtains a local date in this chronology from the era, year-of-era, month-of-year and day-of-month fields.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation combines the era and year-of-era into a proleptic year before calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#date(int,int,int)\"\u003e\u003ccode\u003edate(int, int, int)\u003c/code\u003e\u003c/a\u003e."
        ],
        "param": [
          "\u003ccode\u003eera\u003c/code\u003e - the era of the correct type for the chronology, not null",
          "\u003ccode\u003eyearOfEra\u003c/code\u003e - the chronology year-of-era",
          "\u003ccode\u003emonth\u003c/code\u003e - the chronology month-of-year",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the chronology day-of-month"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eera\u003c/code\u003e is not of the correct type for the chronology"
        ],
        "return": [
          "the local date in this chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "prolepticYear",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfMonth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "date",
      "comment": "Obtains a local date in this chronology from the proleptic-year, month-of-year and day-of-month fields.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eprolepticYear\u003c/code\u003e - the chronology proleptic-year",
          "\u003ccode\u003emonth\u003c/code\u003e - the chronology month-of-year",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the chronology day-of-month"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the local date in this chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.Era",
            "type": "Class"
          },
          "name": "era",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "yearOfEra",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfYear",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dateYearDay",
      "comment": "Obtains a local date in this chronology from the era, year-of-era and day-of-year fields.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation combines the era and year-of-era into a proleptic year before calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#dateYearDay(int,int)\"\u003e\u003ccode\u003edateYearDay(int, int)\u003c/code\u003e\u003c/a\u003e."
        ],
        "param": [
          "\u003ccode\u003eera\u003c/code\u003e - the era of the correct type for the chronology, not null",
          "\u003ccode\u003eyearOfEra\u003c/code\u003e - the chronology year-of-era",
          "\u003ccode\u003edayOfYear\u003c/code\u003e - the chronology day-of-year"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eera\u003c/code\u003e is not of the correct type for the chronology"
        ],
        "return": [
          "the local date in this chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "prolepticYear",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfYear",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dateYearDay",
      "comment": "Obtains a local date in this chronology from the proleptic-year and day-of-year fields.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eprolepticYear\u003c/code\u003e - the chronology proleptic-year",
          "\u003ccode\u003edayOfYear\u003c/code\u003e - the chronology day-of-year"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the local date in this chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "epochDay",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dateEpochDay",
      "comment": "Obtains a local date in this chronology from the epoch-day. The definition of EPOCH_DAY is the same for all calendar systems, thus it can be used for conversion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eepochDay\u003c/code\u003e - the epoch day"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the local date in this chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDate",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dateNow",
      "comment": "Obtains the current local date in this chronology from the system clock in the default time-zone. This will query the system clock in the default time-zone to obtain the current date. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation invokes \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#dateNow(java.time.Clock)\"\u003e\u003ccode\u003edateNow(Clock)\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the current local date using the system clock and default time-zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dateNow",
      "comment": "Obtains the current local date in this chronology from the system clock in the specified time-zone. This will query the system clock to obtain the current date. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation invokes \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#dateNow(java.time.Clock)\"\u003e\u003ccode\u003edateNow(Clock)\u003c/code\u003e\u003c/a\u003e."
        ],
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the zone ID to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the current local date using the system clock, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.Clock",
            "type": "Class"
          },
          "name": "clock",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "dateNow",
      "comment": "Obtains the current local date in this chronology from the specified clock. This will query the specified clock to obtain the current date - today. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using dependency injection.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation invokes \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#date(java.time.temporal.TemporalAccessor)\"\u003e\u003ccode\u003edate(TemporalAccessor)\u003c/code\u003e\u003c/a\u003e."
        ],
        "param": [
          "\u003ccode\u003eclock\u003c/code\u003e - the clock to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the current local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "date",
      "comment": "Obtains a local date in this chronology from another temporal object. This obtains a date in this chronology based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ChronoLocalDate. The conversion typically uses the EPOCH_DAY field, which is standardized across calendar systems. This method matches the signature of the functional interface TemporalQuery allowing it to be used as a query via method reference, aChronology::date.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#from(java.time.temporal.TemporalAccessor)\"\u003e\u003ccode\u003eChronoLocalDate.from(TemporalAccessor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the local date in this chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDateTime",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "java.time.chrono.ChronoLocalDate",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "localDateTime",
      "comment": "Obtains a local date-time in this chronology from another temporal object. This obtains a date-time in this chronology based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ChronoLocalDateTime. The conversion extracts and combines the ChronoLocalDate and the LocalTime from the temporal object. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. The result uses this chronology. This method matches the signature of the functional interface TemporalQuery allowing it to be used as a query via method reference, aChronology::localDateTime.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDateTime.html#from(java.time.temporal.TemporalAccessor)\"\u003e\u003ccode\u003eChronoLocalDateTime.from(TemporalAccessor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date-time"
        ],
        "return": [
          "the local date-time in this chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoZonedDateTime",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "java.time.chrono.ChronoLocalDate",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "zonedDateTime",
      "comment": "Obtains a ChronoZonedDateTime in this chronology from another temporal object. This obtains a zoned date-time in this chronology based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ChronoZonedDateTime. The conversion will first obtain a ZoneId from the temporal object, falling back to a ZoneOffset if necessary. It will then try to obtain an Instant, falling back to a ChronoLocalDateTime if necessary. The result will be either the combination of ZoneId or ZoneOffset with Instant or ChronoLocalDateTime. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. The result uses this chronology. This method matches the signature of the functional interface TemporalQuery allowing it to be used as a query via method reference, aChronology::zonedDateTime.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoZonedDateTime.html#from(java.time.temporal.TemporalAccessor)\"\u003e\u003ccode\u003eChronoZonedDateTime.from(TemporalAccessor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date-time"
        ],
        "return": [
          "the zoned date-time in this chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoZonedDateTime",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "java.time.chrono.ChronoLocalDate",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.Instant",
            "type": "Class"
          },
          "name": "instant",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "zonedDateTime",
      "comment": "Obtains a ChronoZonedDateTime in this chronology from an Instant. This obtains a zoned date-time with the same instant as that specified.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einstant\u003c/code\u003e - the instant to create the date-time from, not null",
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported range"
        ],
        "return": [
          "the zoned date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "prolepticYear",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isLeapYear",
      "comment": "Checks if the specified year is a leap year. A leap-year is a year of a longer length than normal. The exact meaning is determined by the chronology according to the following constraints. a leap-year must imply a year-length longer than a non leap-year. a chronology that does not support the concept of a year must return false. the correct result must be returned for all years within the valid range of years for the chronology. Outside the range of valid years an implementation is free to return either a best guess or false. An implementation must not throw an exception, even if the year is outside the range of valid years.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eprolepticYear\u003c/code\u003e - the proleptic-year to check, not validated for range"
        ],
        "return": [
          "true if the year is a leap year"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.Era",
            "type": "Class"
          },
          "name": "era",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "yearOfEra",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "prolepticYear",
      "comment": "Calculates the proleptic-year given the era and year-of-era. This combines the era and year-of-era into the single proleptic-year field. If the chronology makes active use of eras, such as JapaneseChronology then the year-of-era will be validated against the era. For other chronologies, validation is optional.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eera\u003c/code\u003e - the era of the correct type for the chronology, not null",
          "\u003ccode\u003eyearOfEra\u003c/code\u003e - the chronology year-of-era"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to convert to a proleptic-year, such as if the year is invalid for the era",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eera\u003c/code\u003e is not of the correct type for the chronology"
        ],
        "return": [
          "the proleptic-year"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.Era",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "eraValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "eraOf",
      "comment": "Creates the chronology era object from the numeric value. The era is, conceptually, the largest division of the time-line. Most calendar systems have a single epoch dividing the time-line into two eras. However, some have multiple eras, such as one for the reign of each leader. The exact meaning is determined by the chronology according to the following constraints. The era in use at 1970-01-01 must have the value 1. Later eras must have sequentially higher values. Earlier eras must have sequentially lower values. Each chronology must refer to an enum or similar singleton to provide the era values. This method returns the singleton era of the correct type for the specified era value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eeraValue\u003c/code\u003e - the era value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the era"
        ],
        "return": [
          "the calendar system era, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.time.chrono.Era",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "eras",
      "comment": "Gets the list of eras for the chronology. Most calendar systems have an era, within which the year has meaning. If the calendar system does not support the concept of eras, an empty list must be returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the list of eras for the chronology, may be immutable, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.ValueRange",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.ChronoField",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "range",
      "comment": "Gets the range of valid values for the specified field. All fields can be expressed as a long integer. This method returns an object that describes the valid range for that value. Note that the result only describes the minimum and maximum valid values and it is important not to read too much into them. For example, there could be values within the range that are invalid for the field. This method will return a result whether or not the chronology supports the field.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to get the range for, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the range for the field cannot be obtained"
        ],
        "return": [
          "the range of valid values for the field, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.format.TextStyle",
            "type": "Class"
          },
          "name": "style",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDisplayName",
      "comment": "Gets the textual representation of this chronology. This returns the textual name used to identify the chronology, suitable for presentation to the user. The parameters control the style of the returned text and the locale.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation behaves as though the formatter was used to format the chronology textual name."
        ],
        "param": [
          "\u003ccode\u003estyle\u003c/code\u003e - the style of the text required, not null",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale to use, not null"
        ],
        "return": [
          "the text value of the chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoLocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.time.temporal.TemporalField",
                "type": "Class"
              },
              {
                "name": "java.lang.Long",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "fieldValues",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.format.ResolverStyle",
            "type": "Class"
          },
          "name": "resolverStyle",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "resolveDate",
      "comment": "Resolves parsed ChronoField values into a date during parsing. Most TemporalField implementations are resolved using the resolve method on the field. By contrast, the ChronoField class defines fields that only have meaning relative to the chronology. As such, ChronoField date fields are resolved here in the context of a specific chronology. The default implementation, which explains typical resolve behaviour, is provided in AbstractChronology.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efieldValues\u003c/code\u003e - the map of fields to values, which can be updated, not null",
          "\u003ccode\u003eresolverStyle\u003c/code\u003e - the requested type of resolve, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the date cannot be resolved, typically because of a conflict in the input data"
        ],
        "return": [
          "the resolved date, null if insufficient information to create a date"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.ChronoPeriod",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "years",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "months",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "days",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "period",
      "comment": "Obtains a period for this chronology based on years, months and days. This returns a period tied to this chronology using the specified years, months and days. All supplied chronologies use periods based on years, months and days, however the ChronoPeriod API allows the period to be represented using other units.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation returns an implementation class suitable for most calendar systems. It is based solely on the three units. Normalization, addition and subtraction derive the number of months in a year from the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#range(java.time.temporal.ChronoField)\"\u003e\u003ccode\u003erange(ChronoField)\u003c/code\u003e\u003c/a\u003e. If the number of months within a year is fixed, then the calculation approach for addition, subtraction and normalization is slightly different. \n\u003cp\u003e If implementing an unusual calendar system that is not based on years, months and days, or where you want direct control, then the \u003ccode\u003eChronoPeriod\u003c/code\u003e interface must be directly implemented. \u003c/p\u003e\n\u003cp\u003e The returned period is immutable and thread-safe.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003eyears\u003c/code\u003e - the number of years, may be negative",
          "\u003ccode\u003emonths\u003c/code\u003e - the number of years, may be negative",
          "\u003ccode\u003edays\u003c/code\u003e - the number of years, may be negative"
        ],
        "return": [
          "the period in terms of this chronology, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "prolepticYear",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfMonth",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "hour",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "minute",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "second",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          },
          "name": "zoneOffset",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "epochSecond",
      "comment": "Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z. The number of seconds is calculated using the proleptic-year, month, day-of-month, hour, minute, second, and zoneOffset.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eprolepticYear\u003c/code\u003e - the chronology proleptic-year",
          "\u003ccode\u003emonth\u003c/code\u003e - the chronology month-of-year",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the chronology day-of-month",
          "\u003ccode\u003ehour\u003c/code\u003e - the hour-of-day, from 0 to 23",
          "\u003ccode\u003eminute\u003c/code\u003e - the minute-of-hour, from 0 to 59",
          "\u003ccode\u003esecond\u003c/code\u003e - the second-of-minute, from 0 to 59",
          "\u003ccode\u003ezoneOffset\u003c/code\u003e - the zone offset, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if any of the values are out of range"
        ],
        "return": [
          "the number of seconds relative to 1970-01-01T00:00:00Z, may be negative"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.Era",
            "type": "Class"
          },
          "name": "era",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "yearOfEra",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfMonth",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "hour",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "minute",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "second",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          },
          "name": "zoneOffset",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "epochSecond",
      "comment": "Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z. The number of seconds is calculated using the era, year-of-era, month, day-of-month, hour, minute, second, and zoneOffset.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eera\u003c/code\u003e - the era of the correct type for the chronology, not null",
          "\u003ccode\u003eyearOfEra\u003c/code\u003e - the chronology year-of-era",
          "\u003ccode\u003emonth\u003c/code\u003e - the chronology month-of-year",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the chronology day-of-month",
          "\u003ccode\u003ehour\u003c/code\u003e - the hour-of-day, from 0 to 23",
          "\u003ccode\u003eminute\u003c/code\u003e - the minute-of-hour, from 0 to 59",
          "\u003ccode\u003esecond\u003c/code\u003e - the second-of-minute, from 0 to 59",
          "\u003ccode\u003ezoneOffset\u003c/code\u003e - the zone offset, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if any of the values are out of range"
        ],
        "return": [
          "the number of seconds relative to 1970-01-01T00:00:00Z, may be negative"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.Chronology",
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "compareTo",
      "comment": "Compares this chronology to another chronology. The comparison order first by the chronology ID string, then by any additional information specific to the subclass. It is \"consistent with equals\", as defined by Comparable.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other chronology to compare to, not null"
        ],
        "return": [
          "the comparator value, negative if less, positive if greater"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Checks if this chronology is equal to another chronology. The comparison is based on the entire state of the object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to check, null returns false"
        ],
        "return": [
          "true if this is equal to the other chronology"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hashCode",
      "comment": "A hash code for this chronology. The hash code should be based on the entire state of the object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a suitable hash code"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toString",
      "comment": "Outputs this chronology as a String. The format should include the entire state of the object.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this chronology, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.time.chrono.Chronology",
  "comment": "A calendar system, used to organize and identify dates. \n\u003cp\u003e The main date and time API is built on the ISO calendar system. The chronology operates behind the scenes to represent the general concept of a calendar system. For example, the Japanese, Minguo, Thai Buddhist and others. \u003c/p\u003e\n\u003cp\u003e Most other calendar systems also operate on the shared concepts of year, month and day, linked to the cycles of the Earth around the Sun, and the Moon around the Earth. These shared concepts are defined by \u003ca href\u003d\"../temporal/ChronoField.html\" title\u003d\"enum class in java.time.temporal\"\u003e\u003ccode\u003eChronoField\u003c/code\u003e\u003c/a\u003e and are available for use by any \u003ccode\u003eChronology\u003c/code\u003e implementation: \u003c/p\u003e\n\u003cpre\u003e   LocalDate isoDate \u003d ...\n   ThaiBuddhistDate thaiDate \u003d ...\n   int isoYear \u003d isoDate.get(ChronoField.YEAR);\n   int thaiYear \u003d thaiDate.get(ChronoField.YEAR);\n \u003c/pre\u003e As shown, although the date objects are in different calendar systems, represented by different \n\u003ccode\u003eChronology\u003c/code\u003e instances, both can be queried using the same constant on \n\u003ccode\u003eChronoField\u003c/code\u003e. For a full discussion of the implications of this, see \n\u003ca href\u003d\"ChronoLocalDate.html\" title\u003d\"interface in java.time.chrono\"\u003e\u003ccode\u003eChronoLocalDate\u003c/code\u003e\u003c/a\u003e. In general, the advice is to use the known ISO-based \n\u003ccode\u003eLocalDate\u003c/code\u003e, rather than \n\u003ccode\u003eChronoLocalDate\u003c/code\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e While a \u003ccode\u003eChronology\u003c/code\u003e object typically uses \u003ccode\u003eChronoField\u003c/code\u003e and is based on an era, year-of-era, month-of-year, day-of-month model of a date, this is not required. A \u003ccode\u003eChronology\u003c/code\u003e instance may represent a totally different kind of calendar system, such as the Mayan. \u003c/p\u003e\n\u003cp\u003e In practical terms, the \u003ccode\u003eChronology\u003c/code\u003e instance also acts as a factory. The \u003ca href\u003d\"#of(java.lang.String)\"\u003e\u003ccode\u003eof(String)\u003c/code\u003e\u003c/a\u003e method allows an instance to be looked up by identifier, while the \u003ca href\u003d\"#ofLocale(java.util.Locale)\"\u003e\u003ccode\u003eofLocale(Locale)\u003c/code\u003e\u003c/a\u003e method allows lookup by locale. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eChronology\u003c/code\u003e instance provides a set of methods to create \u003ccode\u003eChronoLocalDate\u003c/code\u003e instances. The date classes are used to manipulate specific dates. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e \u003ca href\u003d\"#dateNow()\"\u003e\u003ccode\u003edateNow()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"#dateNow(java.time.Clock)\"\u003e\u003ccode\u003edateNow(clock)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"#dateNow(java.time.ZoneId)\"\u003e\u003ccode\u003edateNow(zone)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"#date(int,int,int)\"\u003e\u003ccode\u003edate(yearProleptic, month, day)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"#date(java.time.chrono.Era,int,int,int)\"\u003e\u003ccode\u003edate(era, yearOfEra, month, day)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"#dateYearDay(int,int)\"\u003e\u003ccode\u003edateYearDay(yearProleptic, dayOfYear)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"#dateYearDay(java.time.chrono.Era,int,int)\"\u003e\u003ccode\u003edateYearDay(era, yearOfEra, dayOfYear)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"#date(java.time.temporal.TemporalAccessor)\"\u003e\u003ccode\u003edate(TemporalAccessor)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2 id\u003d\"addcalendars\"\u003eAdding New Calendars\u003c/h2\u003e The set of available chronologies can be extended by applications. Adding a new calendar system requires the writing of an implementation of \n\u003ccode\u003eChronology\u003c/code\u003e, \n\u003ccode\u003eChronoLocalDate\u003c/code\u003e and \n\u003ccode\u003eEra\u003c/code\u003e. The majority of the logic specific to the calendar system will be in the \n\u003ccode\u003eChronoLocalDate\u003c/code\u003e implementation. The \n\u003ccode\u003eChronology\u003c/code\u003e implementation acts as a factory. \n\u003cp\u003e To permit the discovery of additional chronologies, the \u003ca href\u003d\"../../util/ServiceLoader.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eServiceLoader\u003c/code\u003e\u003c/a\u003e is used. A file must be added to the \u003ccode\u003eMETA-INF/services\u003c/code\u003e directory with the name \u0027java.time.chrono.Chronology\u0027 listing the implementation classes. See the ServiceLoader for more details on service loading. For lookup by id or calendarType, the system provided calendars are found first followed by application provided calendars. \u003c/p\u003e\n\u003cp\u003e Each chronology must define a chronology ID that is unique within the system. If the chronology represents a calendar system defined by the CLDR specification then the calendar type is the concatenation of the CLDR type and, if applicable, the CLDR variant.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "This interface must be implemented with care to ensure other classes operate correctly. All implementations that can be instantiated must be final, immutable and thread-safe. Subclasses should be Serializable wherever possible."
    ],
    "since": [
      "1.8"
    ]
  }
}