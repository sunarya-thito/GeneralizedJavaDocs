{
  "packageName": "java.time.chrono",
  "simpleName": "IsoChronology",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.time.chrono.AbstractChronology",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.time.chrono.IsoChronology",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INSTANCE",
      "comment": "Singleton instance of the ISO chronology.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getId",
      "comment": "Gets the ID of the chronology - \u0027ISO\u0027. The ID uniquely identifies the Chronology. It can be used to lookup the Chronology using Chronology.of(String).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/IsoChronology.html#getCalendarType()\"\u003e\u003ccode\u003egetCalendarType()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#getId()\"\u003egetId\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the chronology ID - \u0027ISO\u0027"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCalendarType",
      "comment": "Gets the calendar type of the underlying calendar system - \u0027iso8601\u0027. The calendar type is an identifier defined by the Unicode Locale Data Markup Language (LDML) specification. It can be used to lookup the Chronology using Chronology.of(String). It can also be used as part of a locale, accessible via Locale.getUnicodeLocaleType(String) with the key \u0027ca\u0027.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/IsoChronology.html#getId()\"\u003e\u003ccode\u003egetId()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#getCalendarType()\"\u003egetCalendarType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the calendar system type - \u0027iso8601\u0027"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.Era",
            "type": "Class"
          },
          "name": "era",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "yearOfEra",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfMonth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "date",
      "comment": "Obtains an ISO local date from the era, year-of-era, month-of-year and day-of-month fields.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#date(java.time.chrono.Era,int,int,int)\"\u003edate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eera\u003c/code\u003e - the ISO era, not null",
          "\u003ccode\u003eyearOfEra\u003c/code\u003e - the ISO year-of-era",
          "\u003ccode\u003emonth\u003c/code\u003e - the ISO month-of-year",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the ISO day-of-month"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the type of \n\u003ccode\u003eera\u003c/code\u003e is not \n\u003ccode\u003eIsoEra\u003c/code\u003e"
        ],
        "return": [
          "the ISO local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "prolepticYear",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfMonth",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "date",
      "comment": "Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields. This is equivalent to LocalDate.of(int, int, int).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#date(int,int,int)\"\u003edate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eprolepticYear\u003c/code\u003e - the ISO proleptic-year",
          "\u003ccode\u003emonth\u003c/code\u003e - the ISO month-of-year",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the ISO day-of-month"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the ISO local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.Era",
            "type": "Class"
          },
          "name": "era",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "yearOfEra",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfYear",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dateYearDay",
      "comment": "Obtains an ISO local date from the era, year-of-era and day-of-year fields.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#dateYearDay(java.time.chrono.Era,int,int)\"\u003edateYearDay\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eera\u003c/code\u003e - the ISO era, not null",
          "\u003ccode\u003eyearOfEra\u003c/code\u003e - the ISO year-of-era",
          "\u003ccode\u003edayOfYear\u003c/code\u003e - the ISO day-of-year"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the ISO local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "prolepticYear",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfYear",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dateYearDay",
      "comment": "Obtains an ISO local date from the proleptic-year and day-of-year fields. This is equivalent to LocalDate.ofYearDay(int, int).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#dateYearDay(int,int)\"\u003edateYearDay\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eprolepticYear\u003c/code\u003e - the ISO proleptic-year",
          "\u003ccode\u003edayOfYear\u003c/code\u003e - the ISO day-of-year"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the ISO local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "epochDay",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dateEpochDay",
      "comment": "Obtains an ISO local date from the epoch-day. This is equivalent to LocalDate.ofEpochDay(long).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#dateEpochDay(long)\"\u003edateEpochDay\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eepochDay\u003c/code\u003e - the epoch day"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the ISO local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "date",
      "comment": "Obtains an ISO local date from another date-time object. This is equivalent to LocalDate.from(TemporalAccessor).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDate.html#from(java.time.temporal.TemporalAccessor)\"\u003e\u003ccode\u003eChronoLocalDate.from(TemporalAccessor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#date(java.time.temporal.TemporalAccessor)\"\u003edate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the date-time object to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the ISO local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "prolepticYear",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfMonth",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "hour",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "minute",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "second",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          },
          "name": "zoneOffset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "epochSecond",
      "comment": "Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z. The number of seconds is calculated using the year, month, day-of-month, hour, minute, second, and zoneOffset.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#epochSecond(int,int,int,int,int,int,java.time.ZoneOffset)\"\u003eepochSecond\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eprolepticYear\u003c/code\u003e - the year, from MIN_YEAR to MAX_YEAR",
          "\u003ccode\u003emonth\u003c/code\u003e - the month-of-year, from 1 to 12",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the day-of-month, from 1 to 31",
          "\u003ccode\u003ehour\u003c/code\u003e - the hour-of-day, from 0 to 23",
          "\u003ccode\u003eminute\u003c/code\u003e - the minute-of-hour, from 0 to 59",
          "\u003ccode\u003esecond\u003c/code\u003e - the second-of-minute, from 0 to 59",
          "\u003ccode\u003ezoneOffset\u003c/code\u003e - the zone offset, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the value of any argument is out of range, or if the day-of-month is invalid for the month-of-year"
        ],
        "return": [
          "the number of seconds relative to 1970-01-01T00:00:00Z, may be negative"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "localDateTime",
      "comment": "Obtains an ISO local date-time from another date-time object. This is equivalent to LocalDateTime.from(TemporalAccessor).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoLocalDateTime.html#from(java.time.temporal.TemporalAccessor)\"\u003e\u003ccode\u003eChronoLocalDateTime.from(TemporalAccessor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#localDateTime(java.time.temporal.TemporalAccessor)\"\u003elocalDateTime\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the date-time object to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date-time"
        ],
        "return": [
          "the ISO local date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.ZonedDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "name": "temporal",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "zonedDateTime",
      "comment": "Obtains an ISO zoned date-time from another date-time object. This is equivalent to ZonedDateTime.from(TemporalAccessor).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/ChronoZonedDateTime.html#from(java.time.temporal.TemporalAccessor)\"\u003e\u003ccode\u003eChronoZonedDateTime.from(TemporalAccessor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#zonedDateTime(java.time.temporal.TemporalAccessor)\"\u003ezonedDateTime\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the date-time object to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date-time"
        ],
        "return": [
          "the ISO zoned date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.ZonedDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.Instant",
            "type": "Class"
          },
          "name": "instant",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "zonedDateTime",
      "comment": "Obtains an ISO zoned date-time in this chronology from an Instant. This is equivalent to ZonedDateTime.ofInstant(Instant, ZoneId).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#zonedDateTime(java.time.Instant,java.time.ZoneId)\"\u003ezonedDateTime\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003einstant\u003c/code\u003e - the instant to create the date-time from, not null",
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported range"
        ],
        "return": [
          "the zoned date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dateNow",
      "comment": "Obtains the current ISO local date from the system clock in the default time-zone. This will query the system clock in the default time-zone to obtain the current date. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#dateNow()\"\u003edateNow\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the current ISO local date using the system clock and default time-zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dateNow",
      "comment": "Obtains the current ISO local date from the system clock in the specified time-zone. This will query the system clock to obtain the current date. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#dateNow(java.time.ZoneId)\"\u003edateNow\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the zone ID to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the current ISO local date using the system clock, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.Clock",
            "type": "Class"
          },
          "name": "clock",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dateNow",
      "comment": "Obtains the current ISO local date from the specified clock. This will query the specified clock to obtain the current date - today. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using dependency injection.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#dateNow(java.time.Clock)\"\u003edateNow\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eclock\u003c/code\u003e - the clock to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to create the date"
        ],
        "return": [
          "the current ISO local date, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "prolepticYear",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLeapYear",
      "comment": "Checks if the year is a leap year, according to the ISO proleptic calendar system rules. This method applies the current rules for leap years across the whole time-line. In general, a year is a leap year if it is divisible by four without remainder. However, years divisible by 100, are not leap years, with the exception of years divisible by 400 which are. For example, 1904 is a leap year it is divisible by 4. 1900 was not a leap year as it is divisible by 100, however 2000 was a leap year as it is divisible by 400. The calculation is proleptic - applying the same rules into the far future and far past. This is historically inaccurate, but is correct for the ISO-8601 standard.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#isLeapYear(long)\"\u003eisLeapYear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eprolepticYear\u003c/code\u003e - the ISO proleptic year to check"
        ],
        "return": [
          "true if the year is leap, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.chrono.Era",
            "type": "Class"
          },
          "name": "era",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "yearOfEra",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "prolepticYear",
      "comment": "Description copied from interface: Chronology",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#prolepticYear(java.time.chrono.Era,int)\"\u003eprolepticYear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eera\u003c/code\u003e - the era of the correct type for the chronology, not null",
          "\u003ccode\u003eyearOfEra\u003c/code\u003e - the chronology year-of-era"
        ],
        "return": [
          "the proleptic-year"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.chrono.IsoEra",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "eraValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "eraOf",
      "comment": "Description copied from interface: Chronology",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#eraOf(int)\"\u003eeraOf\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eeraValue\u003c/code\u003e - the era value"
        ],
        "return": [
          "the calendar system era, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.time.chrono.Era",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "eras",
      "comment": "Description copied from interface: Chronology",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#eras()\"\u003eeras\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the list of eras for the chronology, may be immutable, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.time.temporal.TemporalField",
                "type": "Class"
              },
              {
                "name": "java.lang.Long",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "fieldValues",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.format.ResolverStyle",
            "type": "Class"
          },
          "name": "resolverStyle",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "resolveDate",
      "comment": "Resolves parsed ChronoField values into a date during parsing. Most TemporalField implementations are resolved using the resolve method on the field. By contrast, the ChronoField class defines fields that only have meaning relative to the chronology. As such, ChronoField date fields are resolved here in the context of a specific chronology. ChronoField instances on the ISO calendar system are resolved as follows. EPOCH_DAY - If present, this is converted to a LocalDate and all other date fields are then cross-checked against the date. PROLEPTIC_MONTH - If present, then it is split into the YEAR and MONTH_OF_YEAR. If the mode is strict or smart then the field is validated. YEAR_OF_ERA and ERA - If both are present, then they are combined to form a YEAR. In lenient mode, the YEAR_OF_ERA range is not validated, in smart and strict mode it is. The ERA is validated for range in all three modes. If only the YEAR_OF_ERA is present, and the mode is smart or lenient, then the current era (CE/AD) is assumed. In strict mode, no era is assumed and the YEAR_OF_ERA is left untouched. If only the ERA is present, then it is left untouched. YEAR, MONTH_OF_YEAR and DAY_OF_MONTH - If all three are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is smart or strict, then the month and day are validated, with the day validated from 1 to 31. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in months, then the difference in days. If the mode is smart, and the day-of-month is greater than the maximum for the year-month, then the day-of-month is adjusted to the last day-of-month. If the mode is strict, then the three fields must form a valid date. YEAR and DAY_OF_YEAR - If both are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in days. If the mode is smart or strict, then the two fields must form a valid date. YEAR, MONTH_OF_YEAR, ALIGNED_WEEK_OF_MONTH and ALIGNED_DAY_OF_WEEK_IN_MONTH - If all four are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in months, then the difference in weeks, then in days. If the mode is smart or strict, then the all four fields are validated to their outer ranges. The date is then combined in a manner equivalent to creating a date on the first day of the requested year and month, then adding the amount in weeks and days to reach their values. If the mode is strict, the date is additionally validated to check that the day and week adjustment did not change the month. YEAR, MONTH_OF_YEAR, ALIGNED_WEEK_OF_MONTH and DAY_OF_WEEK - If all four are present, then they are combined to form a LocalDate. The approach is the same as described above for years, months and weeks in ALIGNED_DAY_OF_WEEK_IN_MONTH. The day-of-week is adjusted as the next or same matching day-of-week once the years, months and weeks have been handled. YEAR, ALIGNED_WEEK_OF_YEAR and ALIGNED_DAY_OF_WEEK_IN_YEAR - If all three are present, then they are combined to form a LocalDate. In all three modes, the YEAR is validated. If the mode is lenient, then the date is combined in a manner equivalent to creating a date on the first of January in the requested year, then adding the difference in weeks, then in days. If the mode is smart or strict, then the all three fields are validated to their outer ranges. The date is then combined in a manner equivalent to creating a date on the first day of the requested year, then adding the amount in weeks and days to reach their values. If the mode is strict, the date is additionally validated to check that the day and week adjustment did not change the year. YEAR, ALIGNED_WEEK_OF_YEAR and DAY_OF_WEEK - If all three are present, then they are combined to form a LocalDate. The approach is the same as described above for years and weeks in ALIGNED_DAY_OF_WEEK_IN_YEAR. The day-of-week is adjusted as the next or same matching day-of-week once the years and weeks have been handled.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/AbstractChronology.html#resolveDate(java.util.Map,java.time.format.ResolverStyle)\"\u003eresolveDate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/AbstractChronology.html\" title\u003d\"class in java.time.chrono\"\u003eAbstractChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#resolveDate(java.util.Map,java.time.format.ResolverStyle)\"\u003eresolveDate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efieldValues\u003c/code\u003e - the map of fields to values, which can be updated, not null",
          "\u003ccode\u003eresolverStyle\u003c/code\u003e - the requested type of resolve, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the date cannot be resolved, typically because of a conflict in the input data"
        ],
        "return": [
          "the resolved date, null if insufficient information to create a date"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.ValueRange",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.temporal.ChronoField",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "range",
      "comment": "Description copied from interface: Chronology",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#range(java.time.temporal.ChronoField)\"\u003erange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to get the range for, not null"
        ],
        "return": [
          "the range of valid values for the field, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Period",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "years",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "months",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "days",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "period",
      "comment": "Obtains a period for this chronology based on years, months and days. This returns a period tied to the ISO chronology using the specified years, months and days. See Period for further details.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html#period(int,int,int)\"\u003eperiod\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/chrono/Chronology.html\" title\u003d\"interface in java.time.chrono\"\u003eChronology\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eyears\u003c/code\u003e - the number of years, may be negative",
          "\u003ccode\u003emonths\u003c/code\u003e - the number of years, may be negative",
          "\u003ccode\u003edays\u003c/code\u003e - the number of years, may be negative"
        ],
        "return": [
          "the ISO period, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.time.chrono.IsoChronology",
  "annotations": [],
  "tagMap": {
    "implSpec": [
      "This class is immutable and thread-safe."
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.time.chrono.IsoChronology\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}