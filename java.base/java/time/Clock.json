{
  "packageName": "java.time",
  "simpleName": "Clock",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.time.Clock",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "systemUTC",
      "comment": "Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the UTC time-zone. This clock, rather than systemDefaultZone(), should be used when you need the current instant without the date or time. This clock is based on the best available system clock. This may use System.currentTimeMillis(), or a higher resolution clock if one is available. Conversion from instant to date or time uses the UTC time-zone. The returned implementation is immutable, thread-safe and Serializable. It is equivalent to system(ZoneOffset.UTC).",
      "annotations": [],
      "tagMap": {
        "return": [
          "a clock that uses the best available system clock in the UTC zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Clock",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "systemDefaultZone",
      "comment": "Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the default time-zone. This clock is based on the best available system clock. This may use System.currentTimeMillis(), or a higher resolution clock if one is available. Using this method hard codes a dependency to the default time-zone into your application. It is recommended to avoid this and use a specific time-zone whenever possible. The UTC clock should be used when you need the current instant without the date or time. The returned implementation is immutable, thread-safe and Serializable. It is equivalent to system(ZoneId.systemDefault()).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/ZoneId.html#systemDefault()\"\u003e\u003ccode\u003eZoneId.systemDefault()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a clock that uses the best available system clock in the default zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Clock",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "system",
      "comment": "Obtains a clock that returns the current instant using the best available system clock. This clock is based on the best available system clock. This may use System.currentTimeMillis(), or a higher resolution clock if one is available. Conversion from instant to date or time uses the specified time-zone. The returned implementation is immutable, thread-safe and Serializable.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone to use to convert the instant to date-time, not null"
        ],
        "return": [
          "a clock that uses the best available system clock in the specified zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Clock",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "tickMillis",
      "comment": "Obtains a clock that returns the current instant ticking in whole milliseconds using the best available system clock. This clock will always have the nano-of-second field truncated to milliseconds. This ensures that the visible time ticks in whole milliseconds. The underlying clock is the best available system clock, equivalent to using system(ZoneId). Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the millisecond observed via this clock will be later than that observed directly via the underlying clock. The returned implementation is immutable, thread-safe and Serializable. It is equivalent to tick(system(zone), Duration.ofMillis(1)).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone to use to convert the instant to date-time, not null"
        ],
        "return": [
          "a clock that ticks in whole milliseconds using the specified zone, not null"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Clock",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "tickSeconds",
      "comment": "Obtains a clock that returns the current instant ticking in whole seconds using the best available system clock. This clock will always have the nano-of-second field set to zero. This ensures that the visible time ticks in whole seconds. The underlying clock is the best available system clock, equivalent to using system(ZoneId). Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the second observed via this clock will be later than that observed directly via the underlying clock. The returned implementation is immutable, thread-safe and Serializable. It is equivalent to tick(system(zone), Duration.ofSeconds(1)).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone to use to convert the instant to date-time, not null"
        ],
        "return": [
          "a clock that ticks in whole seconds using the specified zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Clock",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "tickMinutes",
      "comment": "Obtains a clock that returns the current instant ticking in whole minutes using the best available system clock. This clock will always have the nano-of-second and second-of-minute fields set to zero. This ensures that the visible time ticks in whole minutes. The underlying clock is the best available system clock, equivalent to using system(ZoneId). Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the minute observed via this clock will be later than that observed directly via the underlying clock. The returned implementation is immutable, thread-safe and Serializable. It is equivalent to tick(system(zone), Duration.ofMinutes(1)).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone to use to convert the instant to date-time, not null"
        ],
        "return": [
          "a clock that ticks in whole minutes using the specified zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Clock",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.Clock",
            "type": "Class"
          },
          "name": "baseClock",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.Duration",
            "type": "Class"
          },
          "name": "tickDuration",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "tick",
      "comment": "Obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration. This clock will only tick as per the specified duration. Thus, if the duration is half a second, the clock will return instants truncated to the half second. The tick duration must be positive. If it has a part smaller than a whole millisecond, then the whole duration must divide into one second without leaving a remainder. All normal tick durations will match these criteria, including any multiple of hours, minutes, seconds and milliseconds, and sensible nanosecond durations, such as 20ns, 250,000ns and 500,000ns. A duration of zero or one nanosecond would have no truncation effect. Passing one of these will return the underlying clock. Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the requested duration observed via this clock will be later than that observed directly via the underlying clock. The returned implementation is immutable, thread-safe and Serializable providing that the base clock is.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebaseClock\u003c/code\u003e - the base clock to base the ticking clock on, not null",
          "\u003ccode\u003etickDuration\u003c/code\u003e - the duration of each visible tick, not negative, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the duration is negative, or has a part smaller than a whole millisecond such that the whole duration is not divisible into one second",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the duration is too large to be represented as nanos"
        ],
        "return": [
          "a clock that ticks in whole units of the duration, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Clock",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.Instant",
            "type": "Class"
          },
          "name": "fixedInstant",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fixed",
      "comment": "Obtains a clock that always returns the same instant. This clock simply returns the specified instant. As such, it is not a clock in the conventional sense. The main use case for this is in testing, where the fixed clock ensures tests are not dependent on the current clock. The returned implementation is immutable, thread-safe and Serializable.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efixedInstant\u003c/code\u003e - the instant to use as the clock, not null",
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone to use to convert the instant to date-time, not null"
        ],
        "return": [
          "a clock that always returns the same instant, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Clock",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.Clock",
            "type": "Class"
          },
          "name": "baseClock",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.time.Duration",
            "type": "Class"
          },
          "name": "offsetDuration",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "offset",
      "comment": "Obtains a clock that returns instants from the specified clock with the specified duration added This clock wraps another clock, returning instants that are later by the specified duration. If the duration is negative, the instants will be earlier than the current date and time. The main use case for this is to simulate running in the future or in the past. A duration of zero would have no offsetting effect. Passing zero will return the underlying clock. The returned implementation is immutable, thread-safe and Serializable providing that the base clock is.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebaseClock\u003c/code\u003e - the base clock to add the duration to, not null",
          "\u003ccode\u003eoffsetDuration\u003c/code\u003e - the duration to add, not null"
        ],
        "return": [
          "a clock based on the base clock with the duration added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.ZoneId",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getZone",
      "comment": "Gets the time-zone being used to create dates and times. A clock will typically obtain the current instant and then convert that to a date or time using a time-zone. This method returns the time-zone used.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the time-zone being used to interpret instants, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Clock",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "withZone",
      "comment": "Returns a copy of this clock with a different time-zone. A clock will typically obtain the current instant and then convert that to a date or time using a time-zone. This method returns a clock with similar properties but using a different time-zone.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone to change to, not null"
        ],
        "return": [
          "a clock based on this clock with the specified time-zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "millis",
      "comment": "Gets the current millisecond instant of the clock. This returns the millisecond-based instant, measured from 1970-01-01T00:00Z (UTC). This is equivalent to the definition of System.currentTimeMillis(). Most applications should avoid this method and use Instant to represent an instant on the time-line rather than a raw millisecond value. This method is provided to allow the use of the clock in high performance use cases where the creation of an object would be unacceptable. The default implementation currently calls instant().",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the instant cannot be obtained, not thrown by most implementations"
        ],
        "return": [
          "the current millisecond instant from this clock, measured from the Java epoch of 1970-01-01T00:00Z (UTC), not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Instant",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "instant",
      "comment": "Gets the current instant of the clock. This returns an instant representing the current instant as defined by the clock.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the instant cannot be obtained, not thrown by most implementations"
        ],
        "return": [
          "the current instant from this clock, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Checks if this clock is equal to another clock. Clocks should override this method to compare equals based on their state and to meet the contract of Object.equals(java.lang.Object). If not overridden, the behavior is defined by Object.equals(java.lang.Object)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to check, null returns false"
        ],
        "return": [
          "true if this is equal to the other clock"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "A hash code for this clock. Clocks should override this method based on their state and to meet the contract of Object.hashCode(). If not overridden, the behavior is defined by Object.hashCode()",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a suitable hash code"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor accessible by subclasses.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.time.Clock",
  "annotations": [],
  "tagMap": {
    "implSpec": [
      "This abstract class must be implemented with care to ensure other classes operate correctly. All implementations that can be instantiated must be final, immutable and thread-safe. \n\u003cp\u003e The principal methods are defined to allow the throwing of an exception. In normal use, no exceptions will be thrown, however one possible implementation would be to obtain the time from a central time server across the network. Obviously, in this case the lookup could fail, and so the method is permitted to throw an exception. \u003c/p\u003e\n\u003cp\u003e The returned instants from \u003ccode\u003eClock\u003c/code\u003e work on a time-scale that ignores leap seconds, as described in \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/Instant.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003eInstant\u003c/code\u003e\u003c/a\u003e. If the implementation wraps a source that provides leap second information, then a mechanism should be used to \"smooth\" the leap second. The Java Time-Scale mandates the use of UTC-SLS, however clock implementations may choose how accurate they are with the time-scale so long as they document how they work. Implementations are therefore not required to actually perform the UTC-SLS slew or to otherwise be aware of leap seconds. \u003c/p\u003e\n\u003cp\u003e Implementations should implement \u003ccode\u003eSerializable\u003c/code\u003e wherever possible and must document whether or not they do support serialization.\u003c/p\u003e"
    ],
    "implNote": [
      "The clock implementation provided here is based on the same underlying clock as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#currentTimeMillis()\"\u003e\u003ccode\u003eSystem.currentTimeMillis()\u003c/code\u003e\u003c/a\u003e, but may have a precision finer than milliseconds if available. However, little to no guarantee is provided about the accuracy of the underlying clock. Applications requiring a more accurate clock must implement this abstract class themselves using a different external clock, such as an NTP server."
    ],
    "since": [
      "1.8"
    ]
  }
}