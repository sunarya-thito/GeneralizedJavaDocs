{
  "packageName": "java.time",
  "simpleName": "OffsetDateTime",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN",
      "comment": "The minimum supported OffsetDateTime, \u0027-999999999-01-01T00:00:00+18:00\u0027. This is the local date-time of midnight at the start of the minimum date in the maximum offset (larger offsets are earlier on the time-line). This combines LocalDateTime.MIN and ZoneOffset.MAX. This could be used by an application as a \"far past\" date-time.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX",
      "comment": "The maximum supported OffsetDateTime, \u0027+999999999-12-31T23:59:59.999999999-18:00\u0027. This is the local date-time just before midnight at the end of the maximum date in the minimum offset (larger negative offsets are later on the time-line). This combines LocalDateTime.MAX and ZoneOffset.MIN. This could be used by an application as a \"far future\" date-time.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "java.time.OffsetDateTime",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "timeLineOrder",
      "comment": "Gets a comparator that compares two OffsetDateTime instances based solely on the instant. This method differs from the comparison in compareTo(java.time.OffsetDateTime) in that it only compares the underlying instant.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/OffsetDateTime.html#isAfter(java.time.OffsetDateTime)\"\u003e\u003ccode\u003eisAfter(java.time.OffsetDateTime)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/OffsetDateTime.html#isBefore(java.time.OffsetDateTime)\"\u003e\u003ccode\u003eisBefore(java.time.OffsetDateTime)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/OffsetDateTime.html#isEqual(java.time.OffsetDateTime)\"\u003e\u003ccode\u003eisEqual(java.time.OffsetDateTime)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a comparator that compares in time-line order"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "now",
      "comment": "Obtains the current date-time from the system clock in the default time-zone. This will query the system clock in the default time-zone to obtain the current date-time. The offset will be calculated from the time-zone in the clock. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "tagMap": {
        "return": [
          "the current date-time using the system clock, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "field": {
            "name": "zone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "now",
      "comment": "Obtains the current date-time from the system clock in the specified time-zone. This will query the system clock to obtain the current date-time. Specifying the time-zone avoids dependence on the default time-zone. The offset will be calculated from the specified time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the zone ID to use, not null"
        ],
        "return": [
          "the current date-time using the system clock, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Clock",
            "type": "Class"
          },
          "field": {
            "name": "clock"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "now",
      "comment": "Obtains the current date-time from the specified clock. This will query the specified clock to obtain the current date-time. The offset will be calculated from the time-zone in the clock. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using dependency injection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eclock\u003c/code\u003e - the clock to use, not null"
        ],
        "return": [
          "the current date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.LocalDate",
            "type": "Class"
          },
          "field": {
            "name": "date"
          }
        },
        {
          "type": {
            "name": "java.time.LocalTime",
            "type": "Class"
          },
          "field": {
            "name": "time"
          }
        },
        {
          "type": {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Obtains an instance of OffsetDateTime from a date, time and offset. This creates an offset date-time with the specified local date, time and offset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edate\u003c/code\u003e - the local date, not null",
          "\u003ccode\u003etime\u003c/code\u003e - the local time, not null",
          "\u003ccode\u003eoffset\u003c/code\u003e - the zone offset, not null"
        ],
        "return": [
          "the offset date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.LocalDateTime",
            "type": "Class"
          },
          "field": {
            "name": "dateTime"
          }
        },
        {
          "type": {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Obtains an instance of OffsetDateTime from a date-time and offset. This creates an offset date-time with the specified local date-time and offset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edateTime\u003c/code\u003e - the local date-time, not null",
          "\u003ccode\u003eoffset\u003c/code\u003e - the zone offset, not null"
        ],
        "return": [
          "the offset date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "year"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "month"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dayOfMonth"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hour"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "minute"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "second"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "nanoOfSecond"
          }
        },
        {
          "type": {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Obtains an instance of OffsetDateTime from a year, month, day, hour, minute, second, nanosecond and offset. This creates an offset date-time with the seven specified fields. This method exists primarily for writing test cases. Non test-code will typically use other methods to create an offset time. LocalDateTime has five additional convenience variants of the equivalent factory method taking fewer arguments. They are not provided here to reduce the footprint of the API.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the year to represent, from MIN_YEAR to MAX_YEAR",
          "\u003ccode\u003emonth\u003c/code\u003e - the month-of-year to represent, from 1 (January) to 12 (December)",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the day-of-month to represent, from 1 to 31",
          "\u003ccode\u003ehour\u003c/code\u003e - the hour-of-day to represent, from 0 to 23",
          "\u003ccode\u003eminute\u003c/code\u003e - the minute-of-hour to represent, from 0 to 59",
          "\u003ccode\u003esecond\u003c/code\u003e - the second-of-minute to represent, from 0 to 59",
          "\u003ccode\u003enanoOfSecond\u003c/code\u003e - the nano-of-second to represent, from 0 to 999,999,999",
          "\u003ccode\u003eoffset\u003c/code\u003e - the zone offset, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the value of any field is out of range, or if the day-of-month is invalid for the month-year"
        ],
        "return": [
          "the offset date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Instant",
            "type": "Class"
          },
          "field": {
            "name": "instant"
          }
        },
        {
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "field": {
            "name": "zone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofInstant",
      "comment": "Obtains an instance of OffsetDateTime from an Instant and zone ID. This creates an offset date-time with the same instant as that specified. Finding the offset from UTC/Greenwich is simple as there is only one valid offset for each instant.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einstant\u003c/code\u003e - the instant to create the date-time from, not null",
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone, which may be an offset, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported range"
        ],
        "return": [
          "the offset date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Obtains an instance of OffsetDateTime from a temporal object. This obtains an offset date-time based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of OffsetDateTime. The conversion will first obtain a ZoneOffset from the temporal object. It will then try to obtain a LocalDateTime, falling back to an Instant if necessary. The result will be the combination of ZoneOffset with either with LocalDateTime or Instant. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. This method matches the signature of the functional interface TemporalQuery allowing it to be used as a query via method reference, OffsetDateTime::from.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to convert to an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e"
        ],
        "return": [
          "the offset date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parse",
      "comment": "Obtains an instance of OffsetDateTime from a text string such as 2007-12-03T10:15:30+01:00. The string must represent a valid date-time and is parsed using DateTimeFormatter.ISO_OFFSET_DATE_TIME.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text to parse such as \"2007-12-03T10:15:30+01:00\", not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeParseException.html\" title\u003d\"class in java.time.format\"\u003eDateTimeParseException\u003c/a\u003e\u003c/code\u003e - if the text cannot be parsed"
        ],
        "return": [
          "the parsed offset date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "java.time.format.DateTimeFormatter",
            "type": "Class"
          },
          "field": {
            "name": "formatter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parse",
      "comment": "Obtains an instance of OffsetDateTime from a text string using a specific formatter. The text is parsed using the formatter, returning a date-time.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text to parse, not null",
          "\u003ccode\u003eformatter\u003c/code\u003e - the formatter to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeParseException.html\" title\u003d\"class in java.time.format\"\u003eDateTimeParseException\u003c/a\u003e\u003c/code\u003e - if the text cannot be parsed"
        ],
        "return": [
          "the parsed offset date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSupported",
      "comment": "Checks if the specified field is supported. This checks if this date-time can be queried for the specified field. If false, then calling the range, get and with(TemporalField, long) methods will throw an exception. If the field is a ChronoField then the query is implemented here. The supported fields are: NANO_OF_SECOND NANO_OF_DAY MICRO_OF_SECOND MICRO_OF_DAY MILLI_OF_SECOND MILLI_OF_DAY SECOND_OF_MINUTE SECOND_OF_DAY MINUTE_OF_HOUR MINUTE_OF_DAY HOUR_OF_AMPM CLOCK_HOUR_OF_AMPM HOUR_OF_DAY CLOCK_HOUR_OF_DAY AMPM_OF_DAY DAY_OF_WEEK ALIGNED_DAY_OF_WEEK_IN_MONTH ALIGNED_DAY_OF_WEEK_IN_YEAR DAY_OF_MONTH DAY_OF_YEAR EPOCH_DAY ALIGNED_WEEK_OF_MONTH ALIGNED_WEEK_OF_YEAR MONTH_OF_YEAR PROLEPTIC_MONTH YEAR_OF_ERA YEAR ERA INSTANT_SECONDS OFFSET_SECONDS All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#isSupported(java.time.temporal.TemporalField)\"\u003eisSupported\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to check, null returns false"
        ],
        "return": [
          "true if the field is supported on this date-time, false if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSupported",
      "comment": "Checks if the specified unit is supported. This checks if the specified unit can be added to, or subtracted from, this date-time. If false, then calling the plus(long, TemporalUnit) and minus methods will throw an exception. If the unit is a ChronoUnit then the query is implemented here. The supported units are: NANOS MICROS MILLIS SECONDS MINUTES HOURS HALF_DAYS DAYS WEEKS MONTHS YEARS DECADES CENTURIES MILLENNIA ERAS All other ChronoUnit instances will return false. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#isSupported(java.time.temporal.TemporalUnit)\"\u003eisSupported\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the unit to check, null returns false"
        ],
        "return": [
          "true if the unit can be added/subtracted, false if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.ValueRange",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "range",
      "comment": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This date-time is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a ChronoField then the query is implemented here. The supported fields will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#range(java.time.temporal.TemporalField)\"\u003erange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to query the range for, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the range for the field cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported"
        ],
        "return": [
          "the range of valid values for the field, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Gets the value of the specified field from this date-time as an int. This queries this date-time for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a ChronoField then the query is implemented here. The supported fields will return valid values based on this date-time, except NANO_OF_DAY, MICRO_OF_DAY, EPOCH_DAY, PROLEPTIC_MONTH and INSTANT_SECONDS which are too large to fit in an int and throw an UnsupportedTemporalTypeException. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#get(java.time.temporal.TemporalField)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to get, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if a value for the field cannot be obtained or the value is outside the range of valid values for the field",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported or the range of values exceeds an \n\u003ccode\u003eint\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the value for the field"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLong",
      "comment": "Gets the value of the specified field from this date-time as a long. This queries this date-time for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a ChronoField then the query is implemented here. The supported fields will return valid values based on this date-time. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#getLong(java.time.temporal.TemporalField)\"\u003egetLong\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to get, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if a value for the field cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the value for the field"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.ZoneOffset",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOffset",
      "comment": "Gets the zone offset, such as \u0027+01:00\u0027. This is the offset of the local date-time from UTC/Greenwich.",
      "tagMap": {
        "return": [
          "the zone offset, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withOffsetSameLocal",
      "comment": "Returns a copy of this OffsetDateTime with the specified offset ensuring that the result has the same local date-time. This method returns an object with the same LocalDateTime and the specified ZoneOffset. No calculation is needed or performed. For example, if this time represents 2007-12-03T10:30+02:00 and the offset specified is +03:00, then this method will return 2007-12-03T10:30+03:00. To take into account the difference between the offsets, and adjust the time fields, use withOffsetSameInstant(java.time.ZoneOffset). This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the zone offset to change to, not null"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the requested offset, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withOffsetSameInstant",
      "comment": "Returns a copy of this OffsetDateTime with the specified offset ensuring that the result is at the same instant. This method returns an object with the specified ZoneOffset and a LocalDateTime adjusted by the difference between the two offsets. This will result in the old and new objects representing the same instant. This is useful for finding the local time in a different offset. For example, if this time represents 2007-12-03T10:30+02:00 and the offset specified is +03:00, then this method will return 2007-12-03T11:30+03:00. To change the offset without adjusting the local time use withOffsetSameLocal(java.time.ZoneOffset). This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the zone offset to change to, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the requested offset, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDateTime",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toLocalDateTime",
      "comment": "Gets the LocalDateTime part of this date-time. This returns a LocalDateTime with the same year, month, day and time as this date-time.",
      "tagMap": {
        "return": [
          "the local date-time part of this date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toLocalDate",
      "comment": "Gets the LocalDate part of this date-time. This returns a LocalDate with the same year, month and day as this date-time.",
      "tagMap": {
        "return": [
          "the date part of this date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getYear",
      "comment": "Gets the year field. This method returns the primitive int value for the year. The year returned by this method is proleptic as per get(YEAR). To obtain the year-of-era, use get(YEAR_OF_ERA).",
      "tagMap": {
        "return": [
          "the year, from MIN_YEAR to MAX_YEAR"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMonthValue",
      "comment": "Gets the month-of-year field from 1 to 12. This method returns the month as an int from 1 to 12. Application code is frequently clearer if the enum Month is used by calling getMonth().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/OffsetDateTime.html#getMonth()\"\u003e\u003ccode\u003egetMonth()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the month-of-year, from 1 to 12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Month",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMonth",
      "comment": "Gets the month-of-year field using the Month enum. This method returns the enum Month for the month. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the int value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/OffsetDateTime.html#getMonthValue()\"\u003e\u003ccode\u003egetMonthValue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the month-of-year, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDayOfMonth",
      "comment": "Gets the day-of-month field. This method returns the primitive int value for the day-of-month.",
      "tagMap": {
        "return": [
          "the day-of-month, from 1 to 31"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDayOfYear",
      "comment": "Gets the day-of-year field. This method returns the primitive int value for the day-of-year.",
      "tagMap": {
        "return": [
          "the day-of-year, from 1 to 365, or 366 in a leap year"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.DayOfWeek",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDayOfWeek",
      "comment": "Gets the day-of-week field, which is an enum DayOfWeek. This method returns the enum DayOfWeek for the day-of-week. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the int value. Additional information can be obtained from the DayOfWeek. This includes textual names of the values.",
      "tagMap": {
        "return": [
          "the day-of-week, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalTime",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toLocalTime",
      "comment": "Gets the LocalTime part of this date-time. This returns a LocalTime with the same hour, minute, second and nanosecond as this date-time.",
      "tagMap": {
        "return": [
          "the time part of this date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getHour",
      "comment": "Gets the hour-of-day field.",
      "tagMap": {
        "return": [
          "the hour-of-day, from 0 to 23"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinute",
      "comment": "Gets the minute-of-hour field.",
      "tagMap": {
        "return": [
          "the minute-of-hour, from 0 to 59"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSecond",
      "comment": "Gets the second-of-minute field.",
      "tagMap": {
        "return": [
          "the second-of-minute, from 0 to 59"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNano",
      "comment": "Gets the nano-of-second field.",
      "tagMap": {
        "return": [
          "the nano-of-second, from 0 to 999,999,999"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAdjuster",
            "type": "Class"
          },
          "field": {
            "name": "adjuster"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "with",
      "comment": "Returns an adjusted copy of this date-time. This returns an OffsetDateTime, based on this one, with the date-time adjusted. The adjustment takes place using the specified adjuster strategy object. Read the documentation of the adjuster to understand what adjustment will be made. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in TemporalAdjusters. These include finding the \"last day of the month\" and \"next Wednesday\". Key date-time classes also implement the TemporalAdjuster interface, such as Month and MonthDay. The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years. For example this code returns a date on the last day of July:   import static java.time.Month.*;\n  import static java.time.temporal.TemporalAdjusters.*;\n\n  result \u003d offsetDateTime.with(JULY).with(lastDayOfMonth());\n The classes LocalDate, LocalTime and ZoneOffset implement TemporalAdjuster, thus this method can be used to change the date, time or offset:   result \u003d offsetDateTime.with(date);\n  result \u003d offsetDateTime.with(time);\n  result \u003d offsetDateTime.with(offset);\n The result of this method is obtained by invoking the TemporalAdjuster.adjustInto(Temporal) method on the specified adjuster passing this as the argument. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#with(java.time.temporal.TemporalAdjuster)\"\u003ewith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eadjuster\u003c/code\u003e - the adjuster to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the adjustment cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on \n\u003ccode\u003ethis\u003c/code\u003e with the adjustment made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "with",
      "comment": "Returns a copy of this date-time with the specified field set to a new value. This returns an OffsetDateTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the year, month or day-of-month. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. In some cases, changing the specified field can cause the resulting date-time to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a ChronoField then the adjustment is implemented here. The INSTANT_SECONDS field will return a date-time with the specified instant. The offset and nano-of-second are unchanged. If the new instant value is outside the valid range then a DateTimeException will be thrown. The OFFSET_SECONDS field will return a date-time with the specified offset. The local date-time is unaltered. If the new offset value is outside the valid range then a DateTimeException will be thrown. The other supported fields will behave as per the matching method on LocalDateTime. In this case, the offset is not part of the calculation and will be unchanged. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#with(java.time.temporal.TemporalField,long)\"\u003ewith\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to set in the result, not null",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the field in the result"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the field cannot be set",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on \n\u003ccode\u003ethis\u003c/code\u003e with the specified field set, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "year"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withYear",
      "comment": "Returns a copy of this OffsetDateTime with the year altered. The time and offset do not affect the calculation and will be the same in the result. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the year to set in the result, from MIN_YEAR to MAX_YEAR"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the year value is invalid"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the requested year, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "month"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withMonth",
      "comment": "Returns a copy of this OffsetDateTime with the month-of-year altered. The time and offset do not affect the calculation and will be the same in the result. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emonth\u003c/code\u003e - the month-of-year to set in the result, from 1 (January) to 12 (December)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the month-of-year value is invalid"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the requested month, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dayOfMonth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withDayOfMonth",
      "comment": "Returns a copy of this OffsetDateTime with the day-of-month altered. If the resulting OffsetDateTime is invalid, an exception is thrown. The time and offset do not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the day-of-month to set in the result, from 1 to 28-31"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the day-of-month value is invalid, or if the day-of-month is invalid for the month-year"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the requested day, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dayOfYear"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withDayOfYear",
      "comment": "Returns a copy of this OffsetDateTime with the day-of-year altered. The time and offset do not affect the calculation and will be the same in the result. If the resulting OffsetDateTime is invalid, an exception is thrown. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edayOfYear\u003c/code\u003e - the day-of-year to set in the result, from 1 to 365-366"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the day-of-year value is invalid, or if the day-of-year is invalid for the year"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date with the requested day, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hour"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withHour",
      "comment": "Returns a copy of this OffsetDateTime with the hour-of-day altered. The date and offset do not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehour\u003c/code\u003e - the hour-of-day to set in the result, from 0 to 23"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the hour value is invalid"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the requested hour, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "minute"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withMinute",
      "comment": "Returns a copy of this OffsetDateTime with the minute-of-hour altered. The date and offset do not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eminute\u003c/code\u003e - the minute-of-hour to set in the result, from 0 to 59"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the minute value is invalid"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the requested minute, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "second"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withSecond",
      "comment": "Returns a copy of this OffsetDateTime with the second-of-minute altered. The date and offset do not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esecond\u003c/code\u003e - the second-of-minute to set in the result, from 0 to 59"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the second value is invalid"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the requested second, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "nanoOfSecond"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withNano",
      "comment": "Returns a copy of this OffsetDateTime with the nano-of-second altered. The date and offset do not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enanoOfSecond\u003c/code\u003e - the nano-of-second to set in the result, from 0 to 999,999,999"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the nano value is invalid"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the requested nanosecond, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "truncatedTo",
      "comment": "Returns a copy of this OffsetDateTime with the time truncated. Truncation returns a copy of the original date-time with fields smaller than the specified unit set to zero. For example, truncating with the minutes unit will set the second-of-minute and nano-of-second field to zero. The unit must have a duration that divides into the length of a standard day without remainder. This includes all supplied time units on ChronoUnit and DAYS. Other units throw an exception. The offset does not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the unit to truncate to, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to truncate",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the time truncated, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "field": {
            "name": "amountToAdd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plus",
      "comment": "Returns a copy of this date-time with the specified amount added. This returns an OffsetDateTime, based on this one, with the specified amount added. The amount is typically Period or Duration but may be any other type implementing the TemporalAmount interface. The calculation is delegated to the amount object by calling TemporalAmount.addTo(Temporal). The amount implementation is free to implement the addition in any way it wishes, however it typically calls back to plus(long, TemporalUnit). Consult the documentation of the amount implementation to determine if it can be successfully added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#plus(java.time.temporal.TemporalAmount)\"\u003eplus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToAdd\u003c/code\u003e - the amount to add, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the addition cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the addition made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "amountToAdd"
          }
        },
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plus",
      "comment": "Returns a copy of this date-time with the specified amount added. This returns an OffsetDateTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a ChronoUnit then the addition is implemented by LocalDateTime.plus(long, TemporalUnit). The offset is not part of the calculation and will be unchanged in the result. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#plus(long,java.time.temporal.TemporalUnit)\"\u003eplus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToAdd\u003c/code\u003e - the amount of the unit to add to the result, may be negative",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit of the amount to add, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the addition cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the specified amount added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "years"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusYears",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of years added. This method adds the specified amount to the years field in three steps: Add the input years to the year field Check if the resulting date would be invalid Adjust the day-of-month to the last valid day if necessary For example, 2008-02-29 (leap year) plus one year would result in the invalid date 2009-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2009-02-28, is selected instead. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyears\u003c/code\u003e - the years to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the years added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "months"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusMonths",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of months added. This method adds the specified amount to the months field in three steps: Add the input months to the month-of-year field Check if the resulting date would be invalid Adjust the day-of-month to the last valid day if necessary For example, 2007-03-31 plus one month would result in the invalid date 2007-04-31. Instead of returning an invalid result, the last valid day of the month, 2007-04-30, is selected instead. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emonths\u003c/code\u003e - the months to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the months added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "weeks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusWeeks",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of weeks added. This method adds the specified amount in weeks to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 plus one week would result in 2009-01-07. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eweeks\u003c/code\u003e - the weeks to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the weeks added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "days"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusDays",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of days added. This method adds the specified amount to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 plus one day would result in 2009-01-01. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edays\u003c/code\u003e - the days to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the days added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "hours"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusHours",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of hours added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehours\u003c/code\u003e - the hours to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the hours added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "minutes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusMinutes",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of minutes added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eminutes\u003c/code\u003e - the minutes to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the minutes added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "seconds"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusSeconds",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of seconds added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eseconds\u003c/code\u003e - the seconds to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the seconds added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "nanos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusNanos",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of nanoseconds added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enanos\u003c/code\u003e - the nanos to add, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the unit cannot be added to this type"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the nanoseconds added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "field": {
            "name": "amountToSubtract"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minus",
      "comment": "Returns a copy of this date-time with the specified amount subtracted. This returns an OffsetDateTime, based on this one, with the specified amount subtracted. The amount is typically Period or Duration but may be any other type implementing the TemporalAmount interface. The calculation is delegated to the amount object by calling TemporalAmount.subtractFrom(Temporal). The amount implementation is free to implement the subtraction in any way it wishes, however it typically calls back to minus(long, TemporalUnit). Consult the documentation of the amount implementation to determine if it can be successfully subtracted. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#minus(java.time.temporal.TemporalAmount)\"\u003eminus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToSubtract\u003c/code\u003e - the amount to subtract, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the subtraction cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the subtraction made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "amountToSubtract"
          }
        },
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minus",
      "comment": "Returns a copy of this date-time with the specified amount subtracted. This returns an OffsetDateTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to plus(long, TemporalUnit) with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#minus(long,java.time.temporal.TemporalUnit)\"\u003eminus\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eamountToSubtract\u003c/code\u003e - the amount of the unit to subtract from the result, may be negative",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit of the amount to subtract, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the subtraction cannot be made",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the specified amount subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "years"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusYears",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of years subtracted. This method subtracts the specified amount from the years field in three steps: Subtract the input years from the year field Check if the resulting date would be invalid Adjust the day-of-month to the last valid day if necessary For example, 2008-02-29 (leap year) minus one year would result in the invalid date 2007-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyears\u003c/code\u003e - the years to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the years subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "months"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusMonths",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of months subtracted. This method subtracts the specified amount from the months field in three steps: Subtract the input months from the month-of-year field Check if the resulting date would be invalid Adjust the day-of-month to the last valid day if necessary For example, 2007-03-31 minus one month would result in the invalid date 2007-02-31. Instead of returning an invalid result, the last valid day of the month, 2007-02-28, is selected instead. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emonths\u003c/code\u003e - the months to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the months subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "weeks"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusWeeks",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of weeks subtracted. This method subtracts the specified amount in weeks from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2009-01-07 minus one week would result in 2008-12-31. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eweeks\u003c/code\u003e - the weeks to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the weeks subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "days"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusDays",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of days subtracted. This method subtracts the specified amount from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2009-01-01 minus one day would result in 2008-12-31. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edays\u003c/code\u003e - the days to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the days subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "hours"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusHours",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of hours subtracted. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehours\u003c/code\u003e - the hours to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the hours subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "minutes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusMinutes",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of minutes subtracted. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eminutes\u003c/code\u003e - the minutes to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the minutes subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "seconds"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusSeconds",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of seconds subtracted. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eseconds\u003c/code\u003e - the seconds to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the seconds subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "nanos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusNanos",
      "comment": "Returns a copy of this OffsetDateTime with the specified number of nanoseconds subtracted. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enanos\u003c/code\u003e - the nanos to subtract, may be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the result exceeds the supported date range"
        ],
        "return": [
          "an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e based on this date-time with the nanoseconds subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "R",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalQuery",
            "parameters": [
              {
                "name": "R",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "query"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "R",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "query",
      "comment": "Queries this date-time using the specified query. This queries this date-time using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the TemporalQuery.queryFrom(TemporalAccessor) method on the specified query passing this as the argument.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eR\u003c/code\u003e - the type of the result"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#query(java.time.temporal.TemporalQuery)\"\u003equery\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003equery\u003c/code\u003e - the query to invoke, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to query (defined by the query)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs (defined by the query)"
        ],
        "return": [
          "the query result, null may be returned (defined by the query)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "adjustInto",
      "comment": "Adjusts the specified temporal object to have the same offset, date and time as this object. This returns a temporal object of the same observable type as the input with the offset, date and time changed to be the same as this. The adjustment is equivalent to using Temporal.with(TemporalField, long) three times, passing ChronoField.EPOCH_DAY, ChronoField.NANO_OF_DAY and ChronoField.OFFSET_SECONDS as the fields. In most cases, it is clearer to reverse the calling pattern by using Temporal.with(TemporalAdjuster):    // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisOffsetDateTime.adjustInto(temporal);\n   temporal \u003d temporal.with(thisOffsetDateTime);\n This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAdjuster.html#adjustInto(java.time.temporal.Temporal)\"\u003eadjustInto\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAdjuster.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAdjuster\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the target object to be adjusted, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to make the adjustment",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the adjusted object, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "field": {
            "name": "endExclusive"
          }
        },
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "until",
      "comment": "Calculates the amount of time until another date-time in terms of the specified unit. This calculates the amount of time between two OffsetDateTime objects in terms of a single TemporalUnit. The start and end points are this and the specified date-time. The result will be negative if the end is before the start. For example, the amount in days between two date-times can be calculated using startDateTime.until(endDateTime, DAYS). The Temporal passed to this method is converted to a OffsetDateTime using from(TemporalAccessor). If the offset differs between the two date-times, the specified end date-time is normalized to have the same offset as this date-time. The calculation returns a whole number, representing the number of complete units between the two date-times. For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z will only be one month as it is one minute short of two months. There are two equivalent ways of using this method. The first is to invoke this method. The second is to use TemporalUnit.between(Temporal, Temporal):    // these two lines are equivalent\n   amount \u003d start.until(end, MONTHS);\n   amount \u003d MONTHS.between(start, end);\n The choice should be made based on which makes the code more readable. The calculation is implemented in this method for ChronoUnit. The units NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS and HALF_DAYS, DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA and ERAS are supported. Other ChronoUnit values will throw an exception. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html#until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)\"\u003euntil\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporal\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eendExclusive\u003c/code\u003e - the end date, exclusive, which is converted to an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e, not null",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit to measure the amount in, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the amount cannot be calculated, or the end temporal cannot be converted to an \n\u003ccode\u003eOffsetDateTime\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the amount of time between this date-time and the end date-time"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.format.DateTimeFormatter",
            "type": "Class"
          },
          "field": {
            "name": "formatter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Formats this date-time using the specified formatter. This date-time will be passed to the formatter to produce a string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eformatter\u003c/code\u003e - the formatter to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if an error occurs during printing"
        ],
        "return": [
          "the formatted date-time string, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.ZonedDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "field": {
            "name": "zone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "atZoneSameInstant",
      "comment": "Combines this date-time with a time-zone to create a ZonedDateTime ensuring that the result has the same instant. This returns a ZonedDateTime formed from this date-time and the specified time-zone. This conversion will ignore the visible local date-time and use the underlying instant instead. This avoids any problems with local time-line gaps or overlaps. The result might have different values for fields such as hour, minute an even day. To attempt to retain the values of the fields, use atZoneSimilarLocal(ZoneId). To use the offset as the zone ID, use toZonedDateTime().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone to use, not null"
        ],
        "return": [
          "the zoned date-time formed from this date-time, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.ZonedDateTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "field": {
            "name": "zone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "atZoneSimilarLocal",
      "comment": "Combines this date-time with a time-zone to create a ZonedDateTime trying to keep the same local date and time. This returns a ZonedDateTime formed from this date-time and the specified time-zone. Where possible, the result will have the same local date-time as this object. Time-zone rules, such as daylight savings, mean that not every time on the local time-line exists. If the local date-time is in a gap or overlap according to the rules then a resolver is used to determine the resultant local time and offset. This method uses ZonedDateTime.ofLocal(LocalDateTime, ZoneId, ZoneOffset) to retain the offset from this instance if possible. Finer control over gaps and overlaps is available in two ways. If you simply want to use the later offset at overlaps then call ZonedDateTime.withLaterOffsetAtOverlap() immediately after this method. To create a zoned date-time at the same instant irrespective of the local time-line, use atZoneSameInstant(ZoneId). To use the offset as the zone ID, use toZonedDateTime().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the time-zone to use, not null"
        ],
        "return": [
          "the zoned date-time formed from this date and the earliest valid time for the zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.OffsetTime",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toOffsetTime",
      "comment": "Converts this date-time to an OffsetTime. This returns an offset time with the same local time and offset.",
      "tagMap": {
        "return": [
          "an OffsetTime representing the time and offset, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.ZonedDateTime",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toZonedDateTime",
      "comment": "Converts this date-time to a ZonedDateTime using the offset as the zone ID. This creates the simplest possible ZonedDateTime using the offset as the zone ID. To control the time-zone used, see atZoneSameInstant(ZoneId) and atZoneSimilarLocal(ZoneId).",
      "tagMap": {
        "return": [
          "a zoned date-time representing the same local date-time and offset, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Instant",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toInstant",
      "comment": "Converts this date-time to an Instant. This returns an Instant representing the same point on the time-line as this date-time.",
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eInstant\u003c/code\u003e representing the same instant, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toEpochSecond",
      "comment": "Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z. This allows this date-time to be converted to a value of the epoch-seconds field. This is primarily intended for low-level conversions rather than general application usage.",
      "tagMap": {
        "return": [
          "the number of seconds from the epoch of 1970-01-01T00:00:00Z"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.OffsetDateTime",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this date-time to another date-time. The comparison is based on the instant then on the local date-time. It is \"consistent with equals\", as defined by Comparable. For example, the following is the comparator order: 2008-12-03T10:30+01:00 2008-12-03T11:00+01:00 2008-12-03T12:00+02:00 2008-12-03T11:30+01:00 2008-12-03T12:00+01:00 2008-12-03T12:30+01:00 Values #2 and #3 represent the same instant on the time-line. When two values represent the same instant, the local date-time is compared to distinguish them. This step is needed to make the ordering consistent with equals().",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/OffsetDateTime.html\" title\u003d\"class in java.time\"\u003eOffsetDateTime\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date-time to compare to, not null"
        ],
        "return": [
          "the comparator value, negative if less, positive if greater"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.OffsetDateTime",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAfter",
      "comment": "Checks if the instant of this date-time is after that of the specified date-time. This method differs from the comparison in compareTo(java.time.OffsetDateTime) and equals(java.lang.Object) in that it only compares the instant of the date-time. This is equivalent to using dateTime1.toInstant().isAfter(dateTime2.toInstant());.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date-time to compare to, not null"
        ],
        "return": [
          "true if this is after the instant of the specified date-time"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.OffsetDateTime",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBefore",
      "comment": "Checks if the instant of this date-time is before that of the specified date-time. This method differs from the comparison in compareTo(java.time.OffsetDateTime) in that it only compares the instant of the date-time. This is equivalent to using dateTime1.toInstant().isBefore(dateTime2.toInstant());.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date-time to compare to, not null"
        ],
        "return": [
          "true if this is before the instant of the specified date-time"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.OffsetDateTime",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEqual",
      "comment": "Checks if the instant of this date-time is equal to that of the specified date-time. This method differs from the comparison in compareTo(java.time.OffsetDateTime) and equals(java.lang.Object) in that it only compares the instant of the date-time. This is equivalent to using dateTime1.toInstant().equals(dateTime2.toInstant());.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other date-time to compare to, not null"
        ],
        "return": [
          "true if the instant equals the instant of the specified date-time"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Checks if this date-time is equal to another date-time. The comparison is based on the local date-time and the offset. To compare for the same instant on the time-line, use isEqual(java.time.OffsetDateTime). Only objects of type OffsetDateTime are compared, other types return false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to check, null returns false"
        ],
        "return": [
          "true if this is equal to the other date-time"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "A hash code for this date-time.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a suitable hash code"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00. The output will be one of the following ISO-8601 formats: uuuu-MM-dd\u0027T\u0027HH:mmXXXXX uuuu-MM-dd\u0027T\u0027HH:mm:ssXXXXX uuuu-MM-dd\u0027T\u0027HH:mm:ss.SSSXXXXX uuuu-MM-dd\u0027T\u0027HH:mm:ss.SSSSSSXXXXX uuuu-MM-dd\u0027T\u0027HH:mm:ss.SSSSSSSSSXXXXX The format used will be the shortest that outputs the full value of the time where the omitted parts are implied to be zero.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this date-time, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.time.OffsetDateTime",
  "comment": "A date-time with an offset from UTC/Greenwich in the ISO-8601 calendar system, such as \n\u003ccode\u003e2007-12-03T10:15:30+01:00\u003c/code\u003e. \n\u003cp\u003e \u003ccode\u003eOffsetDateTime\u003c/code\u003e is an immutable representation of a date-time with an offset. This class stores all date and time fields, to a precision of nanoseconds, as well as the offset from UTC/Greenwich. For example, the value \"2nd October 2007 at 13:45:30.123456789 +02:00\" can be stored in an \u003ccode\u003eOffsetDateTime\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eOffsetDateTime\u003c/code\u003e, \u003ca href\u003d\"ZonedDateTime.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003eZonedDateTime\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"Instant.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003eInstant\u003c/code\u003e\u003c/a\u003e all store an instant on the time-line to nanosecond precision. \u003ccode\u003eInstant\u003c/code\u003e is the simplest, simply representing the instant. \u003ccode\u003eOffsetDateTime\u003c/code\u003e adds to the instant the offset from UTC/Greenwich, which allows the local date-time to be obtained. \u003ccode\u003eZonedDateTime\u003c/code\u003e adds full time-zone rules. \u003c/p\u003e\n\u003cp\u003e It is intended that \u003ccode\u003eZonedDateTime\u003c/code\u003e or \u003ccode\u003eInstant\u003c/code\u003e is used to model data in simpler applications. This class may be used when modeling date-time concepts in more detail, or when communicating to a database or in a network protocol. \u003c/p\u003e\n\u003cp\u003e This is a \u003ca href\u003d\"../../../java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e class; programmers should treat instances that are \u003ca href\u003d\"#equals(java.lang.Object)\"\u003eequal\u003c/a\u003e as interchangeable and should not use instances for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail. The \u003ccode\u003eequals\u003c/code\u003e method should be used for comparisons.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "This class is immutable and thread-safe."
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.time.OffsetDateTime\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}