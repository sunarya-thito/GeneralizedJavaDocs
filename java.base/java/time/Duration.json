{
  "packageName": "java.time",
  "simpleName": "Duration",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZERO",
      "comment": "Constant for a duration of zero.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "days"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofDays",
      "comment": "Obtains a Duration representing a number of standard 24 hour days. The seconds are calculated based on the standard definition of a day, where each day is 86400 seconds which implies a 24 hour day. The nanosecond in second field is set to zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edays\u003c/code\u003e - the number of days, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the input days exceeds the capacity of \n\u003ccode\u003eDuration\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "hours"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofHours",
      "comment": "Obtains a Duration representing a number of standard hours. The seconds are calculated based on the standard definition of an hour, where each hour is 3600 seconds. The nanosecond in second field is set to zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehours\u003c/code\u003e - the number of hours, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the input hours exceeds the capacity of \n\u003ccode\u003eDuration\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "minutes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofMinutes",
      "comment": "Obtains a Duration representing a number of standard minutes. The seconds are calculated based on the standard definition of a minute, where each minute is 60 seconds. The nanosecond in second field is set to zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eminutes\u003c/code\u003e - the number of minutes, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the input minutes exceeds the capacity of \n\u003ccode\u003eDuration\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "seconds"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofSeconds",
      "comment": "Obtains a Duration representing a number of seconds. The nanosecond in second field is set to zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eseconds\u003c/code\u003e - the number of seconds, positive or negative"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "seconds"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "nanoAdjustment"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofSeconds",
      "comment": "Obtains a Duration representing a number of seconds and an adjustment in nanoseconds. This method allows an arbitrary number of nanoseconds to be passed in. The factory will alter the values of the second and nanosecond in order to ensure that the stored nanosecond is in the range 0 to 999,999,999. For example, the following will result in exactly the same duration:   Duration.ofSeconds(3, 1);\n  Duration.ofSeconds(4, -999_999_999);\n  Duration.ofSeconds(2, 1000_000_001);",
      "tagMap": {
        "param": [
          "\u003ccode\u003eseconds\u003c/code\u003e - the number of seconds, positive or negative",
          "\u003ccode\u003enanoAdjustment\u003c/code\u003e - the nanosecond adjustment to the number of seconds, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the adjustment causes the seconds to exceed the capacity of \n\u003ccode\u003eDuration\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "millis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofMillis",
      "comment": "Obtains a Duration representing a number of milliseconds. The seconds and nanoseconds are extracted from the specified milliseconds.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emillis\u003c/code\u003e - the number of milliseconds, positive or negative"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "nanos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofNanos",
      "comment": "Obtains a Duration representing a number of nanoseconds. The seconds and nanoseconds are extracted from the specified nanoseconds.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enanos\u003c/code\u003e - the number of nanoseconds, positive or negative"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "amount"
          }
        },
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Obtains a Duration representing an amount in the specified unit. The parameters represent the two parts of a phrase like \u00276 Hours\u0027. For example:   Duration.of(3, SECONDS);\n  Duration.of(465, HOURS);\n Only a subset of units are accepted by this method. The unit must either have an exact duration or be ChronoUnit.DAYS which is treated as 24 hours. Other units throw an exception.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eamount\u003c/code\u003e - the amount of the duration, measured in terms of the unit, positive or negative",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit that the duration is measured in, must have an exact duration, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the period unit has an estimated duration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if a numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAmount",
            "type": "Class"
          },
          "field": {
            "name": "amount"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Obtains an instance of Duration from a temporal amount. This obtains a duration based on the specified amount. A TemporalAmount represents an amount of time, which may be date-based or time-based, which this factory extracts to a duration. The conversion loops around the set of units from the amount and uses the duration of the unit to calculate the total Duration. Only a subset of units are accepted by this method. The unit must either have an exact duration or be ChronoUnit.DAYS which is treated as 24 hours. If any other units are found then an exception is thrown.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eamount\u003c/code\u003e - the temporal amount to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to convert to a \n\u003ccode\u003eDuration\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the equivalent duration, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parse",
      "comment": "Obtains a Duration from a text string such as PnDTnHnMn.nS. This will parse a textual representation of a duration, including the string produced by toString(). The formats accepted are based on the ISO-8601 duration format PnDTnHnMn.nS with days considered to be exactly 24 hours. The string starts with an optional sign, denoted by the ASCII negative or positive symbol. If negative, the whole period is negated. The ASCII letter \"P\" is next in upper or lower case. There are then four sections, each consisting of a number and a suffix. The sections have suffixes in ASCII of \"D\", \"H\", \"M\" and \"S\" for days, hours, minutes and seconds, accepted in upper or lower case. The suffixes must occur in order. The ASCII letter \"T\" must occur before the first occurrence, if any, of an hour, minute or second section. At least one of the four sections must be present, and if \"T\" is present there must be at least one section after the \"T\". The number part of each section must consist of one or more ASCII digits. The number may be prefixed by the ASCII negative or positive symbol. The number of days, hours and minutes must parse to a long. The number of seconds must parse to a long with optional fraction. The decimal point may be either a dot or a comma. The fractional part may have from zero to 9 digits. The leading plus/minus sign, and negative values for other units are not part of the ISO-8601 standard. Examples:     \"PT20.345S\" -- parses as \"20.345 seconds\"\n    \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n    \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n    \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n    \"P2DT3H4M\"  -- parses as \"2 days, 3 hours and 4 minutes\"\n    \"PT-6H3M\"    -- parses as \"-6 hours and +3 minutes\"\n    \"-PT6H3M\"    -- parses as \"-6 hours and -3 minutes\"\n    \"-PT-6H+3M\"  -- parses as \"+6 hours and -3 minutes\"",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text to parse, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeParseException.html\" title\u003d\"class in java.time.format\"\u003eDateTimeParseException\u003c/a\u003e\u003c/code\u003e - if the text cannot be parsed to a duration"
        ],
        "return": [
          "the parsed duration, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "field": {
            "name": "startInclusive"
          }
        },
        {
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "field": {
            "name": "endExclusive"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "between",
      "comment": "Obtains a Duration representing the duration between two temporal objects. This calculates the duration between two temporal objects. If the objects are of different types, then the duration is calculated based on the type of the first object. For example, if the first argument is a LocalTime then the second argument is converted to a LocalTime. The specified temporal objects must support the SECONDS unit. For full accuracy, either the NANOS unit or the NANO_OF_SECOND field should be supported. The result of this method can be a negative period if the end is before the start. To guarantee to obtain a positive duration call abs() on the result.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estartInclusive\u003c/code\u003e - the start instant, inclusive, not null",
          "\u003ccode\u003eendExclusive\u003c/code\u003e - the end instant, exclusive, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the seconds between the temporals cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the calculation exceeds the capacity of \n\u003ccode\u003eDuration\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Gets the value of the requested unit. This returns a value for each of the two supported units, SECONDS and NANOS. All other units throw an exception.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#get(java.time.temporal.TemporalUnit)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the \n\u003ccode\u003eTemporalUnit\u003c/code\u003e for which to return the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported"
        ],
        "return": [
          "the long value of the unit"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUnits",
      "comment": "Gets the set of units supported by this duration. The supported units are SECONDS, and NANOS. They are returned in the order seconds, nanos. This set can be used in conjunction with get(TemporalUnit) to access the entire state of the duration.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#getUnits()\"\u003egetUnits\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a list containing the seconds and nanos units, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isZero",
      "comment": "Checks if this duration is zero length. A Duration represents a directed distance between two points on the time-line and can therefore be positive, zero or negative. This method checks whether the length is zero.",
      "tagMap": {
        "return": [
          "true if this duration has a total length equal to zero"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNegative",
      "comment": "Checks if this duration is negative, excluding zero. A Duration represents a directed distance between two points on the time-line and can therefore be positive, zero or negative. This method checks whether the length is less than zero.",
      "tagMap": {
        "return": [
          "true if this duration has a total length less than zero"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSeconds",
      "comment": "Gets the number of seconds in this duration. The length of the duration is stored using two fields - seconds and nanoseconds. The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to the length in seconds. The total duration is defined by calling this method and getNano(). A Duration represents a directed distance between two points on the time-line. A negative duration is expressed by the negative sign of the seconds part. A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.",
      "tagMap": {
        "return": [
          "the whole seconds part of the length of the duration, positive or negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNano",
      "comment": "Gets the number of nanoseconds within the second in this duration. The length of the duration is stored using two fields - seconds and nanoseconds. The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to the length in seconds. The total duration is defined by calling this method and getSeconds(). A Duration represents a directed distance between two points on the time-line. A negative duration is expressed by the negative sign of the seconds part. A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.",
      "tagMap": {
        "return": [
          "the nanoseconds within the second part of the length of the duration, from 0 to 999,999,999"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "seconds"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withSeconds",
      "comment": "Returns a copy of this duration with the specified amount of seconds. This returns a duration with the specified seconds, retaining the nano-of-second part of this duration. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eseconds\u003c/code\u003e - the seconds to represent, may be negative"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this period with the requested seconds, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "nanoOfSecond"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withNanos",
      "comment": "Returns a copy of this duration with the specified nano-of-second. This returns a duration with the specified nano-of-second, retaining the seconds part of this duration. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enanoOfSecond\u003c/code\u003e - the nano-of-second to represent, from 0 to 999,999,999"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the nano-of-second is invalid"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this period with the requested nano-of-second, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Duration",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plus",
      "comment": "Returns a copy of this duration with the specified duration added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - the duration to add, positive or negative, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified duration added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "amountToAdd"
          }
        },
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plus",
      "comment": "Returns a copy of this duration with the specified duration added. The duration amount is measured in terms of the specified unit. Only a subset of units are accepted by this method. The unit must either have an exact duration or be ChronoUnit.DAYS which is treated as 24 hours. Other units throw an exception. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eamountToAdd\u003c/code\u003e - the amount to add, measured in terms of the unit, positive or negative",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit that the amount is measured in, must have an exact duration, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified duration added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "daysToAdd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusDays",
      "comment": "Returns a copy of this duration with the specified duration in standard 24 hour days added. The number of days is multiplied by 86400 to obtain the number of seconds to add. This is based on the standard definition of a day as 24 hours. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edaysToAdd\u003c/code\u003e - the days to add, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified days added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "hoursToAdd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusHours",
      "comment": "Returns a copy of this duration with the specified duration in hours added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehoursToAdd\u003c/code\u003e - the hours to add, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified hours added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "minutesToAdd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusMinutes",
      "comment": "Returns a copy of this duration with the specified duration in minutes added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eminutesToAdd\u003c/code\u003e - the minutes to add, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified minutes added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "secondsToAdd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusSeconds",
      "comment": "Returns a copy of this duration with the specified duration in seconds added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esecondsToAdd\u003c/code\u003e - the seconds to add, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified seconds added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "millisToAdd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusMillis",
      "comment": "Returns a copy of this duration with the specified duration in milliseconds added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emillisToAdd\u003c/code\u003e - the milliseconds to add, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified milliseconds added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "nanosToAdd"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plusNanos",
      "comment": "Returns a copy of this duration with the specified duration in nanoseconds added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enanosToAdd\u003c/code\u003e - the nanoseconds to add, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified nanoseconds added, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Duration",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minus",
      "comment": "Returns a copy of this duration with the specified duration subtracted. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - the duration to subtract, positive or negative, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified duration subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "amountToSubtract"
          }
        },
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minus",
      "comment": "Returns a copy of this duration with the specified duration subtracted. The duration amount is measured in terms of the specified unit. Only a subset of units are accepted by this method. The unit must either have an exact duration or be ChronoUnit.DAYS which is treated as 24 hours. Other units throw an exception. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eamountToSubtract\u003c/code\u003e - the amount to subtract, measured in terms of the unit, positive or negative",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit that the amount is measured in, must have an exact duration, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified duration subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "daysToSubtract"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusDays",
      "comment": "Returns a copy of this duration with the specified duration in standard 24 hour days subtracted. The number of days is multiplied by 86400 to obtain the number of seconds to subtract. This is based on the standard definition of a day as 24 hours. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edaysToSubtract\u003c/code\u003e - the days to subtract, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified days subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "hoursToSubtract"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusHours",
      "comment": "Returns a copy of this duration with the specified duration in hours subtracted. The number of hours is multiplied by 3600 to obtain the number of seconds to subtract. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehoursToSubtract\u003c/code\u003e - the hours to subtract, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified hours subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "minutesToSubtract"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusMinutes",
      "comment": "Returns a copy of this duration with the specified duration in minutes subtracted. The number of hours is multiplied by 60 to obtain the number of seconds to subtract. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eminutesToSubtract\u003c/code\u003e - the minutes to subtract, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified minutes subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "secondsToSubtract"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusSeconds",
      "comment": "Returns a copy of this duration with the specified duration in seconds subtracted. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esecondsToSubtract\u003c/code\u003e - the seconds to subtract, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified seconds subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "millisToSubtract"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusMillis",
      "comment": "Returns a copy of this duration with the specified duration in milliseconds subtracted. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emillisToSubtract\u003c/code\u003e - the milliseconds to subtract, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified milliseconds subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "nanosToSubtract"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minusNanos",
      "comment": "Returns a copy of this duration with the specified duration in nanoseconds subtracted. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enanosToSubtract\u003c/code\u003e - the nanoseconds to subtract, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the specified nanoseconds subtracted, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "multiplicand"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "multipliedBy",
      "comment": "Returns a copy of this duration multiplied by the scalar. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emultiplicand\u003c/code\u003e - the value to multiply the duration by, positive or negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration multiplied by the specified scalar, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dividedBy",
      "comment": "Returns a copy of this duration divided by the specified value. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - the value to divide the duration by, positive or negative, not zero"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the divisor is zero or if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration divided by the specified divisor, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Duration",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dividedBy",
      "comment": "Returns number of whole times a specified Duration occurs within this Duration. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - the value to divide the duration by, positive or negative, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the divisor is zero, or if numeric overflow occurs"
        ],
        "return": [
          "number of whole times, rounded toward zero, a specified \n\u003ccode\u003eDuration\u003c/code\u003e occurs within this Duration, may be negative"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "negated",
      "comment": "Returns a copy of this duration with the length negated. This method swaps the sign of the total length of this duration. For example, PT1.3S will be returned as PT-1.3S. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the amount negated, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "abs",
      "comment": "Returns a copy of this duration with a positive length. This method returns a positive duration by effectively removing the sign from any negative total length. For example, PT-1.3S will be returned as PT1.3S. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with an absolute length, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addTo",
      "comment": "Adds this duration to the specified temporal object. This returns a temporal object of the same observable type as the input with this duration added. In most cases, it is clearer to reverse the calling pattern by using Temporal.plus(TemporalAmount).    // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisDuration.addTo(dateTime);\n   dateTime \u003d dateTime.plus(thisDuration);\n The calculation will add the seconds, then nanos. Only non-zero amounts will be added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#addTo(java.time.temporal.Temporal)\"\u003eaddTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to adjust, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to add",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the adjustment made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtractFrom",
      "comment": "Subtracts this duration from the specified temporal object. This returns a temporal object of the same observable type as the input with this duration subtracted. In most cases, it is clearer to reverse the calling pattern by using Temporal.minus(TemporalAmount).    // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d thisDuration.subtractFrom(dateTime);\n   dateTime \u003d dateTime.minus(thisDuration);\n The calculation will subtract the seconds, then nanos. Only non-zero amounts will be added. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#subtractFrom(java.time.temporal.Temporal)\"\u003esubtractFrom\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAmount\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to adjust, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to subtract",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same type with the adjustment made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toDays",
      "comment": "Gets the number of days in this duration. This returns the total number of days in the duration by dividing the number of seconds by 86400. This is based on the standard definition of a day as 24 hours. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "return": [
          "the number of days in the duration, may be negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toHours",
      "comment": "Gets the number of hours in this duration. This returns the total number of hours in the duration by dividing the number of seconds by 3600. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "return": [
          "the number of hours in the duration, may be negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toMinutes",
      "comment": "Gets the number of minutes in this duration. This returns the total number of minutes in the duration by dividing the number of seconds by 60. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "return": [
          "the number of minutes in the duration, may be negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toSeconds",
      "comment": "Gets the number of seconds in this duration. This returns the total number of whole seconds in the duration. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "return": [
          "the whole seconds part of the length of the duration, positive or negative"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toMillis",
      "comment": "Converts this duration to the total length in milliseconds. If this duration is too large to fit in a long milliseconds, then an exception is thrown. If this duration has greater than millisecond precision, then the conversion will drop any excess precision information as though the amount in nanoseconds was subject to integer division by one million.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the total length of the duration in milliseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toNanos",
      "comment": "Converts this duration to the total length in nanoseconds expressed as a long. If this duration is too large to fit in a long nanoseconds, then an exception is thrown.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the total length of the duration in nanoseconds"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toDaysPart",
      "comment": "Extracts the number of days in the duration. This returns the total number of days in the duration by dividing the number of seconds by 86400. This is based on the standard definition of a day as 24 hours. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "return": [
          "the number of days in the duration, may be negative"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toHoursPart",
      "comment": "Extracts the number of hours part in the duration. This returns the number of remaining hours when dividing toHours() by hours in a day. This is based on the standard definition of a day as 24 hours. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "return": [
          "the number of hours part in the duration, may be negative"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toMinutesPart",
      "comment": "Extracts the number of minutes part in the duration. This returns the number of remaining minutes when dividing toMinutes() by minutes in an hour. This is based on the standard definition of an hour as 60 minutes. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "return": [
          "the number of minutes parts in the duration, may be negative"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toSecondsPart",
      "comment": "Extracts the number of seconds part in the duration. This returns the remaining seconds when dividing toSeconds() by seconds in a minute. This is based on the standard definition of a minute as 60 seconds. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "return": [
          "the number of seconds parts in the duration, may be negative"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toMillisPart",
      "comment": "Extracts the number of milliseconds part of the duration. This returns the milliseconds part by dividing the number of nanoseconds by 1,000,000. The length of the duration is stored using two fields - seconds and nanoseconds. The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to the length in seconds. The total duration is defined by calling getNano() and getSeconds(). This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "return": [
          "the number of milliseconds part of the duration."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toNanosPart",
      "comment": "Get the nanoseconds part within seconds of the duration. The length of the duration is stored using two fields - seconds and nanoseconds. The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to the length in seconds. The total duration is defined by calling getNano() and getSeconds(). This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "return": [
          "the nanoseconds within the second part of the length of the duration, from 0 to 999,999,999"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Duration",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "truncatedTo",
      "comment": "Returns a copy of this Duration truncated to the specified unit. Truncating the duration returns a copy of the original with conceptual fields smaller than the specified unit set to zero. For example, truncating with the MINUTES unit will round down towards zero to the nearest minute, setting the seconds and nanoseconds to zero. The unit must have a duration that divides into the length of a standard day without remainder. This includes all time-based units on {@code ChronoUnit} and DAYS. Other ChronoUnits throw an exception. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the unit to truncate to, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the unit is invalid for truncation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the unit is not supported"
        ],
        "return": [
          "a \n\u003ccode\u003eDuration\u003c/code\u003e based on this duration with the time truncated, not null"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Duration",
            "type": "Class"
          },
          "field": {
            "name": "otherDuration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this duration to the specified Duration. The comparison is based on the total length of the durations. It is \"consistent with equals\", as defined by Comparable.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/Duration.html\" title\u003d\"class in java.time\"\u003eDuration\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eotherDuration\u003c/code\u003e - the other duration to compare to, not null"
        ],
        "return": [
          "the comparator value, negative if less, positive if greater"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "otherDuration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Checks if this duration is equal to the specified Duration. The comparison is based on the total length of the durations.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eotherDuration\u003c/code\u003e - the other duration, null returns false"
        ],
        "return": [
          "true if the other duration is equal to this one"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "A hash code for this duration.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a suitable hash code"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "A string representation of this duration using ISO-8601 seconds based representation, such as PT8H6M12.345S. The format of the returned string will be PTnHnMnS, where n is the relevant hours, minutes or seconds part of the duration. Any fractional seconds are placed after a decimal point in the seconds section. If a section has a zero value, it is omitted. The hours, minutes and seconds will all have the same sign. Examples:     \"20.345 seconds\"                 -- \"PT20.345S\n    \"15 minutes\" (15 * 60 seconds)   -- \"PT15M\"\n    \"10 hours\" (10 * 3600 seconds)   -- \"PT10H\"\n    \"2 days\" (2 * 86400 seconds)     -- \"PT48H\"\n Note that multiples of 24 hours are not output as days to avoid confusion with Period.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an ISO-8601 representation of this duration, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.time.Duration",
  "comment": "A time-based amount of time, such as \u002734.5 seconds\u0027. \n\u003cp\u003e This class models a quantity or amount of time in terms of seconds and nanoseconds. It can be accessed using other duration-based units, such as minutes and hours. In addition, the \u003ca href\u003d\"temporal/ChronoUnit.html#DAYS\"\u003e\u003ccode\u003eDAYS\u003c/code\u003e\u003c/a\u003e unit can be used and is treated as exactly equal to 24 hours, thus ignoring daylight savings effects. See \u003ca href\u003d\"Period.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003ePeriod\u003c/code\u003e\u003c/a\u003e for the date-based equivalent to this class. \u003c/p\u003e\n\u003cp\u003e A physical duration could be of infinite length. For practicality, the duration is stored with constraints similar to \u003ca href\u003d\"Instant.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003eInstant\u003c/code\u003e\u003c/a\u003e. The duration uses nanosecond resolution with a maximum value of the seconds that can be held in a \u003ccode\u003elong\u003c/code\u003e. This is greater than the current estimated age of the universe. \u003c/p\u003e\n\u003cp\u003e The range of a duration requires the storage of a number larger than a \u003ccode\u003elong\u003c/code\u003e. To achieve this, the class stores a \u003ccode\u003elong\u003c/code\u003e representing seconds and an \u003ccode\u003eint\u003c/code\u003e representing nanosecond-of-second, which will always be between 0 and 999,999,999. The model is of a directed duration, meaning that the duration may be negative. \u003c/p\u003e\n\u003cp\u003e The duration is measured in \"seconds\", but these are not necessarily identical to the scientific \"SI second\" definition based on atomic clocks. This difference only impacts durations measured near a leap-second and should not affect most applications. See \u003ca href\u003d\"Instant.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003eInstant\u003c/code\u003e\u003c/a\u003e for a discussion as to the meaning of the second and time-scales. \u003c/p\u003e\n\u003cp\u003e This is a \u003ca href\u003d\"../../../java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e class; programmers should treat instances that are \u003ca href\u003d\"#equals(java.lang.Object)\"\u003eequal\u003c/a\u003e as interchangeable and should not use instances for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail. The \u003ccode\u003eequals\u003c/code\u003e method should be used for comparisons.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "This class is immutable and thread-safe."
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.time.Duration\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}