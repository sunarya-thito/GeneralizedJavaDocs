{
  "packageName": "java.time",
  "simpleName": "DayOfWeek",
  "moduleName": "java.base",
  "type": "ENUM",
  "superClass": {
    "name": "java.lang.Enum",
    "parameters": [
      {
        "name": "java.time.DayOfWeek",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.time.DayOfWeek",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "values",
      "comment": "Returns an array containing the constants of this enum class, in the order they are declared.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array containing the constants of this enum class, in the order they are declared"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.DayOfWeek",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the enum constant of this class with the specified name. The string must match exactly an identifier used to declare an enum constant in this class. (Extraneous whitespace characters are not permitted.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the enum constant to be returned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this enum class has no constant with the specified name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null"
        ],
        "return": [
          "the enum constant with the specified name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.DayOfWeek",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Obtains an instance of DayOfWeek from an int value. DayOfWeek is an enum representing the 7 days of the week. This factory allows the enum to be obtained from the int value. The int value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edayOfWeek\u003c/code\u003e - the day-of-week to represent, from 1 (Monday) to 7 (Sunday)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the day-of-week is invalid"
        ],
        "return": [
          "the day-of-week singleton, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.DayOfWeek",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Obtains an instance of DayOfWeek from a temporal object. This obtains a day-of-week based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of DayOfWeek. The conversion extracts the DAY_OF_WEEK field. This method matches the signature of the functional interface TemporalQuery allowing it to be used as a query via method reference, DayOfWeek::from.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to convert to a \n\u003ccode\u003eDayOfWeek\u003c/code\u003e"
        ],
        "return": [
          "the day-of-week, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getValue",
      "comment": "Gets the day-of-week int value. The values are numbered following the ISO-8601 standard, from 1 (Monday) to 7 (Sunday). See WeekFields.dayOfWeek() for localized week-numbering.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the day-of-week, from 1 (Monday) to 7 (Sunday)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayName",
      "comment": "Gets the textual representation, such as \u0027Mon\u0027 or \u0027Friday\u0027. This returns the textual name used to identify the day-of-week, suitable for presentation to the user. The parameters control the style of the returned text and the locale. If no textual mapping is found then the numeric value is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estyle\u003c/code\u003e - the length of the text required, not null",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale to use, not null"
        ],
        "return": [
          "the text value of the day-of-week, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSupported",
      "comment": "Checks if the specified field is supported. This checks if this day-of-week can be queried for the specified field. If false, then calling the range and get methods will throw an exception. If the field is DAY_OF_WEEK then this method returns true. All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#isSupported(java.time.temporal.TemporalField)\"\u003eisSupported\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to check, null returns false"
        ],
        "return": [
          "true if the field is supported on this day-of-week, false if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.ValueRange",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "range",
      "comment": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This day-of-week is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is DAY_OF_WEEK then the range of the day-of-week, from 1 to 7, will be returned. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#range(java.time.temporal.TemporalField)\"\u003erange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to query the range for, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the range for the field cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported"
        ],
        "return": [
          "the range of valid values for the field, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Gets the value of the specified field from this day-of-week as an int. This queries this day-of-week for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is DAY_OF_WEEK then the value of the day-of-week, from 1 to 7, will be returned. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#get(java.time.temporal.TemporalField)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to get, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if a value for the field cannot be obtained or the value is outside the range of valid values for the field",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported or the range of values exceeds an \n\u003ccode\u003eint\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the value for the field, within the valid range of values"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLong",
      "comment": "Gets the value of the specified field from this day-of-week as a long. This queries this day-of-week for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is DAY_OF_WEEK then the value of the day-of-week, from 1 to 7, will be returned. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#getLong(java.time.temporal.TemporalField)\"\u003egetLong\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to get, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if a value for the field cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the value for the field"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.DayOfWeek",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plus",
      "comment": "Returns the day-of-week that is the specified number of days after this one. The calculation rolls around the end of the week from Sunday to Monday. The specified period may be negative. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edays\u003c/code\u003e - the days to add, positive or negative"
        ],
        "return": [
          "the resulting day-of-week, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.DayOfWeek",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minus",
      "comment": "Returns the day-of-week that is the specified number of days before this one. The calculation rolls around the start of the year from Monday to Sunday. The specified period may be negative. This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edays\u003c/code\u003e - the days to subtract, positive or negative"
        ],
        "return": [
          "the resulting day-of-week, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "R",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "R",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "query",
      "comment": "Queries this day-of-week using the specified query. This queries this day-of-week using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the TemporalQuery.queryFrom(TemporalAccessor) method on the specified query passing this as the argument.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eR\u003c/code\u003e - the type of the result"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#query(java.time.temporal.TemporalQuery)\"\u003equery\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003equery\u003c/code\u003e - the query to invoke, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to query (defined by the query)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs (defined by the query)"
        ],
        "return": [
          "the query result, null may be returned (defined by the query)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "adjustInto",
      "comment": "Adjusts the specified temporal object to have this day-of-week. This returns a temporal object of the same observable type as the input with the day-of-week changed to be the same as this. The adjustment is equivalent to using Temporal.with(TemporalField, long) passing ChronoField.DAY_OF_WEEK as the field. Note that this adjusts forwards or backwards within a Monday to Sunday week. See WeekFields.dayOfWeek() for localized week start days. See TemporalAdjuster for other adjusters with more control, such as next(MONDAY). In most cases, it is clearer to reverse the calling pattern by using Temporal.with(TemporalAdjuster):    // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisDayOfWeek.adjustInto(temporal);\n   temporal \u003d temporal.with(thisDayOfWeek);\n For example, given a date that is a Wednesday, the following are output:    dateOnWed.with(MONDAY);     // two days earlier\n   dateOnWed.with(TUESDAY);    // one day earlier\n   dateOnWed.with(WEDNESDAY);  // same date\n   dateOnWed.with(THURSDAY);   // one day later\n   dateOnWed.with(FRIDAY);     // two days later\n   dateOnWed.with(SATURDAY);   // three days later\n   dateOnWed.with(SUNDAY);     // four days later\n This instance is immutable and unaffected by this method call.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAdjuster.html#adjustInto(java.time.temporal.Temporal)\"\u003eadjustInto\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAdjuster.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAdjuster\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the target object to be adjusted, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to make the adjustment",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the adjusted object, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.time.DayOfWeek",
  "comment": "A day-of-week, such as \u0027Tuesday\u0027. \n\u003cp\u003e \u003ccode\u003eDayOfWeek\u003c/code\u003e is an enum representing the 7 days of the week - Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday. \u003c/p\u003e\n\u003cp\u003e In addition to the textual enum name, each day-of-week has an \u003ccode\u003eint\u003c/code\u003e value. The \u003ccode\u003eint\u003c/code\u003e value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday). It is recommended that applications use the enum rather than the \u003ccode\u003eint\u003c/code\u003e value to ensure code clarity. \u003c/p\u003e\n\u003cp\u003e This enum provides access to the localized textual form of the day-of-week. Some locales also assign different numeric values to the days, declaring Sunday to have the value 1, however this class provides no support for this. See \u003ca href\u003d\"temporal/WeekFields.html\" title\u003d\"class in java.time.temporal\"\u003e\u003ccode\u003eWeekFields\u003c/code\u003e\u003c/a\u003e for localized week-numbering. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eDo not use \u003ccode\u003eordinal()\u003c/code\u003e to obtain the numeric representation of \u003ccode\u003eDayOfWeek\u003c/code\u003e. Use \u003ccode\u003egetValue()\u003c/code\u003e instead.\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003e This enum represents a common concept that is found in many calendar systems. As such, this enum may be used by any calendar system that has the day-of-week concept defined exactly equivalent to the ISO calendar system.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "This is an immutable and thread-safe enum."
    ],
    "since": [
      "1.8"
    ]
  }
}