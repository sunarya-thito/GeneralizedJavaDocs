{
  "packageName": "java.time.temporal",
  "simpleName": "TemporalAmount",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Returns the value of the requested unit. The units returned from getUnits() uniquely define the value of the TemporalAmount. A value must be returned for each unit listed in getUnits.",
      "tagMap": {
        "implSpec": [
          "Implementations may declare support for units not listed by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAmount.html#getUnits()\"\u003e\u003ccode\u003egetUnits()\u003c/code\u003e\u003c/a\u003e. Typically, the implementation would define additional units as conversions for the convenience of developers."
        ],
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the \n\u003ccode\u003eTemporalUnit\u003c/code\u003e for which to return the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if a value for the unit cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eunit\u003c/code\u003e is not supported"
        ],
        "return": [
          "the long value of the unit"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUnits",
      "comment": "Returns the list of units uniquely defining the value of this TemporalAmount. The list of TemporalUnits is defined by the implementation class. The list is a snapshot of the units at the time getUnits is called and is not mutable. The units are ordered from longest duration to the shortest duration of the unit.",
      "tagMap": {
        "implSpec": [
          "The list of units completely and uniquely represents the state of the object without omissions, overlaps or duplication. The units are in order from longest duration to shortest."
        ],
        "return": [
          "the List of \n\u003ccode\u003eTemporalUnits\u003c/code\u003e; not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addTo",
      "comment": "Adds to the specified temporal object. Adds the amount to the specified temporal object using the logic encapsulated in the implementing class. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use Temporal.plus(TemporalAmount):    // These two lines are equivalent, but the second approach is recommended\n   dateTime \u003d amount.addTo(dateTime);\n   dateTime \u003d dateTime.plus(adder);\n It is recommended to use the second approach, plus(TemporalAmount), as it is a lot clearer to read in code.",
      "tagMap": {
        "implSpec": [
          "The implementation must take the input object and add to it. The implementation defines the logic of the addition and is responsible for documenting that logic. It may use any method on \n\u003ccode\u003eTemporal\u003c/code\u003e to query the temporal object and perform the addition. The returned object must have the same observable type as the input object \n\u003cp\u003e The input object must not be altered. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable temporal objects. \u003c/p\u003e\n\u003cp\u003e The input temporal object may be in a calendar system other than ISO. Implementations may choose to document compatibility with other calendar systems, or reject non-ISO temporal objects by \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalQueries.html#chronology()\"\u003e\u003ccode\u003equerying the chronology\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e This method may be called from multiple threads in parallel. It must be thread-safe when invoked.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to add the amount to, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to add",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same observable type with the addition made, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subtractFrom",
      "comment": "Subtracts this object from the specified temporal object. Subtracts the amount from the specified temporal object using the logic encapsulated in the implementing class. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use Temporal.minus(TemporalAmount):    // these two lines are equivalent, but the second approach is recommended\n   dateTime \u003d amount.subtractFrom(dateTime);\n   dateTime \u003d dateTime.minus(amount);\n It is recommended to use the second approach, minus(TemporalAmount), as it is a lot clearer to read in code.",
      "tagMap": {
        "implSpec": [
          "The implementation must take the input object and subtract from it. The implementation defines the logic of the subtraction and is responsible for documenting that logic. It may use any method on \n\u003ccode\u003eTemporal\u003c/code\u003e to query the temporal object and perform the subtraction. The returned object must have the same observable type as the input object \n\u003cp\u003e The input object must not be altered. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable temporal objects. \u003c/p\u003e\n\u003cp\u003e The input temporal object may be in a calendar system other than ISO. Implementations may choose to document compatibility with other calendar systems, or reject non-ISO temporal objects by \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalQueries.html#chronology()\"\u003e\u003ccode\u003equerying the chronology\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e This method may be called from multiple threads in parallel. It must be thread-safe when invoked.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to subtract the amount from, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to subtract",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "an object of the same observable type with the subtraction made, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.time.temporal.TemporalAmount",
  "comment": "Framework-level interface defining an amount of time, such as \"6 hours\", \"8 days\" or \"2 years and 3 months\". \n\u003cp\u003e This is the base interface type for amounts of time. An amount is distinct from a date or time-of-day in that it is not tied to any specific point on the time-line. \u003c/p\u003e\n\u003cp\u003e The amount can be thought of as a \u003ccode\u003eMap\u003c/code\u003e of \u003ca href\u003d\"TemporalUnit.html\" title\u003d\"interface in java.time.temporal\"\u003e\u003ccode\u003eTemporalUnit\u003c/code\u003e\u003c/a\u003e to \u003ccode\u003elong\u003c/code\u003e, exposed via \u003ca href\u003d\"#getUnits()\"\u003e\u003ccode\u003egetUnits()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#get(java.time.temporal.TemporalUnit)\"\u003e\u003ccode\u003eget(TemporalUnit)\u003c/code\u003e\u003c/a\u003e. A simple case might have a single unit-value pair, such as \"6 hours\". A more complex case may have multiple unit-value pairs, such as \"7 years, 3 months and 5 days\". \u003c/p\u003e\n\u003cp\u003e There are two common implementations. \u003ca href\u003d\"../Period.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003ePeriod\u003c/code\u003e\u003c/a\u003e is a date-based implementation, storing years, months and days. \u003ca href\u003d\"../Duration.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003eDuration\u003c/code\u003e\u003c/a\u003e is a time-based implementation, storing seconds and nanoseconds, but providing some access using other duration based units such as minutes, hours and fixed 24-hour days. \u003c/p\u003e\n\u003cp\u003e This interface is a framework-level interface that should not be widely used in application code. Instead, applications should create and pass around instances of concrete types, such as \u003ccode\u003ePeriod\u003c/code\u003e and \u003ccode\u003eDuration\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "This interface places no restrictions on the mutability of implementations, however immutability is strongly recommended."
    ],
    "since": [
      "1.8"
    ]
  }
}