{
  "packageName": "java.time.temporal",
  "simpleName": "TemporalQueries",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.time.temporal.TemporalQuery",
        "parameters": [
          {
            "name": "java.time.ZoneId",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "zoneId",
      "comment": "A strict query for the ZoneId. This queries a TemporalAccessor for the zone. The zone is only returned if the date-time conceptually contains a ZoneId. It will not be returned if the date-time only conceptually has an ZoneOffset. Thus a ZonedDateTime will return the result of getZone(), but an OffsetDateTime will return null. In most cases, applications should use zone() as this query is too strict. The result from JDK classes implementing TemporalAccessor is as follows: LocalDate returns null LocalTime returns null LocalDateTime returns null ZonedDateTime returns the associated zone OffsetTime returns null OffsetDateTime returns null ChronoLocalDate returns null ChronoLocalDateTime returns null ChronoZonedDateTime returns the associated zone Era returns null DayOfWeek returns null Month returns null Year returns null YearMonth returns null MonthDay returns null ZoneOffset returns null Instant returns null",
      "tagMap": {
        "return": [
          "a query that can obtain the zone ID of a temporal, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.TemporalQuery",
        "parameters": [
          {
            "name": "java.time.chrono.Chronology",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "chronology",
      "comment": "A query for the Chronology. This queries a TemporalAccessor for the chronology. If the target TemporalAccessor represents a date, or part of a date, then it should return the chronology that the date is expressed in. As a result of this definition, objects only representing time, such as LocalTime, will return null. The result from JDK classes implementing TemporalAccessor is as follows: LocalDate returns IsoChronology.INSTANCE LocalTime returns null (does not represent a date) LocalDateTime returns IsoChronology.INSTANCE ZonedDateTime returns IsoChronology.INSTANCE OffsetTime returns null (does not represent a date) OffsetDateTime returns IsoChronology.INSTANCE ChronoLocalDate returns the associated chronology ChronoLocalDateTime returns the associated chronology ChronoZonedDateTime returns the associated chronology Era returns the associated chronology DayOfWeek returns null (shared across chronologies) Month returns IsoChronology.INSTANCE Year returns IsoChronology.INSTANCE YearMonth returns IsoChronology.INSTANCE MonthDay returns null IsoChronology.INSTANCE ZoneOffset returns null (does not represent a date) Instant returns null (does not represent a date) The method Chronology.from(TemporalAccessor) can be used as a TemporalQuery via a method reference, Chronology::from. That method is equivalent to this query, except that it throws an exception if a chronology cannot be obtained.",
      "tagMap": {
        "return": [
          "a query that can obtain the chronology of a temporal, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.TemporalQuery",
        "parameters": [
          {
            "name": "java.time.temporal.TemporalUnit",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "precision",
      "comment": "A query for the smallest supported unit. This queries a TemporalAccessor for the time precision. If the target TemporalAccessor represents a consistent or complete date-time, date or time then this must return the smallest precision actually supported. Note that fields such as NANO_OF_DAY and NANO_OF_SECOND are defined to always return ignoring the precision, thus this is the only way to find the actual smallest supported unit. For example, were GregorianCalendar to implement TemporalAccessor it would return a precision of MILLIS. The result from JDK classes implementing TemporalAccessor is as follows: LocalDate returns DAYS LocalTime returns NANOS LocalDateTime returns NANOS ZonedDateTime returns NANOS OffsetTime returns NANOS OffsetDateTime returns NANOS ChronoLocalDate returns DAYS ChronoLocalDateTime returns NANOS ChronoZonedDateTime returns NANOS Era returns ERAS DayOfWeek returns DAYS Month returns MONTHS Year returns YEARS YearMonth returns MONTHS MonthDay returns null (does not represent a complete date or time) ZoneOffset returns null (does not represent a date or time) Instant returns NANOS",
      "tagMap": {
        "return": [
          "a query that can obtain the precision of a temporal, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.TemporalQuery",
        "parameters": [
          {
            "name": "java.time.ZoneId",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "zone",
      "comment": "A lenient query for the ZoneId, falling back to the ZoneOffset. This queries a TemporalAccessor for the zone. It first tries to obtain the zone, using zoneId(). If that is not found it tries to obtain the offset(). Thus a ZonedDateTime will return the result of getZone(), while an OffsetDateTime will return the result of getOffset(). In most cases, applications should use this query rather than #zoneId(). The method ZoneId.from(TemporalAccessor) can be used as a TemporalQuery via a method reference, ZoneId::from. That method is equivalent to this query, except that it throws an exception if a zone cannot be obtained.",
      "tagMap": {
        "return": [
          "a query that can obtain the zone ID or offset of a temporal, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.TemporalQuery",
        "parameters": [
          {
            "name": "java.time.ZoneOffset",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "offset",
      "comment": "A query for ZoneOffset returning null if not found. This returns a TemporalQuery that can be used to query a temporal object for the offset. The query will return null if the temporal object cannot supply an offset. The query implementation examines the OFFSET_SECONDS field and uses it to create a ZoneOffset. The method ZoneOffset.from(TemporalAccessor) can be used as a TemporalQuery via a method reference, ZoneOffset::from. This query and ZoneOffset::from will return the same result if the temporal object contains an offset. If the temporal object does not contain an offset, then the method reference will throw an exception, whereas this query will return null.",
      "tagMap": {
        "return": [
          "a query that can obtain the offset of a temporal, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.TemporalQuery",
        "parameters": [
          {
            "name": "java.time.LocalDate",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "localDate",
      "comment": "A query for LocalDate returning null if not found. This returns a TemporalQuery that can be used to query a temporal object for the local date. The query will return null if the temporal object cannot supply a local date. The query implementation examines the EPOCH_DAY field and uses it to create a LocalDate. The method ZoneOffset.from(TemporalAccessor) can be used as a TemporalQuery via a method reference, LocalDate::from. This query and LocalDate::from will return the same result if the temporal object contains a date. If the temporal object does not contain a date, then the method reference will throw an exception, whereas this query will return null.",
      "tagMap": {
        "return": [
          "a query that can obtain the date of a temporal, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.TemporalQuery",
        "parameters": [
          {
            "name": "java.time.LocalTime",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "localTime",
      "comment": "A query for LocalTime returning null if not found. This returns a TemporalQuery that can be used to query a temporal object for the local time. The query will return null if the temporal object cannot supply a local time. The query implementation examines the NANO_OF_DAY field and uses it to create a LocalTime. The method ZoneOffset.from(TemporalAccessor) can be used as a TemporalQuery via a method reference, LocalTime::from. This query and LocalTime::from will return the same result if the temporal object contains a time. If the temporal object does not contain a time, then the method reference will throw an exception, whereas this query will return null.",
      "tagMap": {
        "return": [
          "a query that can obtain the time of a temporal, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.time.temporal.TemporalQueries",
  "comment": "Common implementations of \n\u003ccode\u003eTemporalQuery\u003c/code\u003e. \n\u003cp\u003e This class provides common implementations of \u003ca href\u003d\"TemporalQuery.html\" title\u003d\"interface in java.time.temporal\"\u003e\u003ccode\u003eTemporalQuery\u003c/code\u003e\u003c/a\u003e. These are defined here as they must be constants, and the definition of lambdas does not guarantee that. By assigning them once here, they become \u0027normal\u0027 Java constants. \u003c/p\u003e\n\u003cp\u003e Queries are a key tool for extracting information from temporal objects. They exist to externalize the process of querying, permitting different approaches, as per the strategy design pattern. Examples might be a query that checks if the date is the day before February 29th in a leap year, or calculates the number of days to your next birthday. \u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"TemporalField.html\" title\u003d\"interface in java.time.temporal\"\u003e\u003ccode\u003eTemporalField\u003c/code\u003e\u003c/a\u003e interface provides another mechanism for querying temporal objects. That interface is limited to returning a \u003ccode\u003elong\u003c/code\u003e. By contrast, queries can return any type. \u003c/p\u003e\n\u003cp\u003e There are two equivalent ways of using a \u003ccode\u003eTemporalQuery\u003c/code\u003e. The first is to invoke the method on this interface directly. The second is to use \u003ca href\u003d\"TemporalAccessor.html#query(java.time.temporal.TemporalQuery)\"\u003e\u003ccode\u003eTemporalAccessor.query(TemporalQuery)\u003c/code\u003e\u003c/a\u003e: \u003c/p\u003e\n\u003cpre\u003e   // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisQuery.queryFrom(temporal);\n   temporal \u003d temporal.query(thisQuery);\n \u003c/pre\u003e It is recommended to use the second approach, \n\u003ccode\u003equery(TemporalQuery)\u003c/code\u003e, as it is a lot clearer to read in code. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The most common implementations are method references, such as \u003ccode\u003eLocalDate::from\u003c/code\u003e and \u003ccode\u003eZoneId::from\u003c/code\u003e. Additional common queries are provided to return: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e a Chronology, \u003c/li\u003e\n \u003cli\u003e a LocalDate, \u003c/li\u003e\n \u003cli\u003e a LocalTime, \u003c/li\u003e\n \u003cli\u003e a ZoneOffset, \u003c/li\u003e\n \u003cli\u003e a precision, \u003c/li\u003e\n \u003cli\u003e a zone, or \u003c/li\u003e\n \u003cli\u003e a zoneId. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.8"
    ]
  }
}