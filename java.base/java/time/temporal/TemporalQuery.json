{
  "packageName": "java.time.temporal",
  "simpleName": "TemporalQuery",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "java.time.temporal.TemporalQuery",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "queryFrom",
      "comment": "Queries the specified temporal object. This queries the specified temporal object to return an object using the logic encapsulated in the implementing class. Examples might be a query that checks if the date is the day before February 29th in a leap year, or calculates the number of days to your next birthday. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use TemporalAccessor.query(TemporalQuery):    // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisQuery.queryFrom(temporal);\n   temporal \u003d temporal.query(thisQuery);\n It is recommended to use the second approach, query(TemporalQuery), as it is a lot clearer to read in code.",
      "tagMap": {
        "implSpec": [
          "The implementation must take the input object and query it. The implementation defines the logic of the query and is responsible for documenting that logic. It may use any method on \n\u003ccode\u003eTemporalAccessor\u003c/code\u003e to determine the result. The input object must not be altered. \n\u003cp\u003e The input temporal object may be in a calendar system other than ISO. Implementations may choose to document compatibility with other calendar systems, or reject non-ISO temporal objects by \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalQueries.html#chronology()\"\u003e\u003ccode\u003equerying the chronology\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e This method may be called from multiple threads in parallel. It must be thread-safe when invoked.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to query, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to query",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the queried value, may return null to indicate not found"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "R",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.time.temporal.TemporalQuery",
  "comment": "Strategy for querying a temporal object. \n\u003cp\u003e Queries are a key tool for extracting information from temporal objects. They exist to externalize the process of querying, permitting different approaches, as per the strategy design pattern. Examples might be a query that checks if the date is the day before February 29th in a leap year, or calculates the number of days to your next birthday. \u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"TemporalField.html\" title\u003d\"interface in java.time.temporal\"\u003e\u003ccode\u003eTemporalField\u003c/code\u003e\u003c/a\u003e interface provides another mechanism for querying temporal objects. That interface is limited to returning a \u003ccode\u003elong\u003c/code\u003e. By contrast, queries can return any type. \u003c/p\u003e\n\u003cp\u003e There are two equivalent ways of using a \u003ccode\u003eTemporalQuery\u003c/code\u003e. The first is to invoke the method on this interface directly. The second is to use \u003ca href\u003d\"TemporalAccessor.html#query(java.time.temporal.TemporalQuery)\"\u003e\u003ccode\u003eTemporalAccessor.query(TemporalQuery)\u003c/code\u003e\u003c/a\u003e: \u003c/p\u003e\n\u003cpre\u003e   // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisQuery.queryFrom(temporal);\n   temporal \u003d temporal.query(thisQuery);\n \u003c/pre\u003e It is recommended to use the second approach, \n\u003ccode\u003equery(TemporalQuery)\u003c/code\u003e, as it is a lot clearer to read in code. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The most common implementations are method references, such as \u003ccode\u003eLocalDate::from\u003c/code\u003e and \u003ccode\u003eZoneId::from\u003c/code\u003e. Additional common queries are provided as static methods in \u003ca href\u003d\"TemporalQueries.html\" title\u003d\"class in java.time.temporal\"\u003e\u003ccode\u003eTemporalQueries\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "This interface places no restrictions on the mutability of implementations, however immutability is strongly recommended."
    ],
    "since": [
      "1.8"
    ]
  }
}