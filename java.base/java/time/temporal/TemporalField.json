{
  "packageName": "java.time.temporal",
  "simpleName": "TemporalField",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDisplayName",
      "comment": "Gets the display name for the field in the requested locale. If there is no display name for the locale then a suitable default must be returned. The default implementation must check the locale is not null and return toString().",
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the locale to use, not null"
        ],
        "return": [
          "the display name for the locale or a suitable default, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.TemporalUnit",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBaseUnit",
      "comment": "Gets the unit that the field is measured in. The unit of the field is the period that varies within the range. For example, in the field \u0027MonthOfYear\u0027, the unit is \u0027Months\u0027. See also getRangeUnit().",
      "tagMap": {
        "return": [
          "the unit defining the base unit of the field, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.TemporalUnit",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRangeUnit",
      "comment": "Gets the range that the field is bound by. The range of the field is the period that the field varies within. For example, in the field \u0027MonthOfYear\u0027, the range is \u0027Years\u0027. See also getBaseUnit(). The range is never null. For example, the \u0027Year\u0027 field is shorthand for \u0027YearOfForever\u0027. It therefore has a unit of \u0027Years\u0027 and a range of \u0027Forever\u0027.",
      "tagMap": {
        "return": [
          "the unit defining the range of the field, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.ValueRange",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "range",
      "comment": "Gets the range of valid values for the field. All fields can be expressed as a long integer. This method returns an object that describes the valid range for that value. This method is generally only applicable to the ISO-8601 calendar system. Note that the result only describes the minimum and maximum valid values and it is important not to read too much into them. For example, there could be values within the range that are invalid for the field.",
      "tagMap": {
        "return": [
          "the range of valid values for the field, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDateBased",
      "comment": "Checks if this field represents a component of a date. A field is date-based if it can be derived from EPOCH_DAY. Note that it is valid for both isDateBased() and isTimeBased() to return false, such as when representing a field like minute-of-week.",
      "tagMap": {
        "return": [
          "true if this field is a component of a date"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isTimeBased",
      "comment": "Checks if this field represents a component of a time. A field is time-based if it can be derived from NANO_OF_DAY. Note that it is valid for both isDateBased() and isTimeBased() to return false, such as when representing a field like minute-of-week.",
      "tagMap": {
        "return": [
          "true if this field is a component of a time"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSupportedBy",
      "comment": "Checks if this field is supported by the temporal object. This determines whether the temporal accessor supports this field. If this returns false, then the temporal cannot be queried for this field. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use TemporalAccessor.isSupported(TemporalField):    // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisField.isSupportedBy(temporal);\n   temporal \u003d temporal.isSupported(thisField);\n It is recommended to use the second approach, isSupported(TemporalField), as it is a lot clearer to read in code. Implementations should determine whether they are supported using the fields available in ChronoField.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to query, not null"
        ],
        "return": [
          "true if the date-time can be queried for this field, false if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.ValueRange",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "rangeRefinedBy",
      "comment": "Get the range of valid values for this field using the temporal object to refine the result. This uses the temporal object to find the range of valid values for the field. This is similar to range(), however this method refines the result using the temporal. For example, if the field is DAY_OF_MONTH the range method is not accurate as there are four possible month lengths, 28, 29, 30 and 31 days. Using this method with a date allows the range to be accurate, returning just one of those four options. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use TemporalAccessor.range(TemporalField):    // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisField.rangeRefinedBy(temporal);\n   temporal \u003d temporal.range(thisField);\n It is recommended to use the second approach, range(TemporalField), as it is a lot clearer to read in code. Implementations should perform any queries or calculations using the fields available in ChronoField. If the field is not supported an UnsupportedTemporalTypeException must be thrown.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object used to refine the result, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the range for the field cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported by the temporal"
        ],
        "return": [
          "the range of valid values for this field, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFrom",
      "comment": "Gets the value of this field from the specified temporal object. This queries the temporal object for the value of this field. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use TemporalAccessor.getLong(TemporalField) (or TemporalAccessor.get(TemporalField)):    // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisField.getFrom(temporal);\n   temporal \u003d temporal.getLong(thisField);\n It is recommended to use the second approach, getLong(TemporalField), as it is a lot clearer to read in code. Implementations should perform any queries or calculations using the fields available in ChronoField. If the field is not supported an UnsupportedTemporalTypeException must be thrown.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to query, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if a value for the field cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported by the temporal",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the value of this field, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "R",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "R",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "newValue"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "R",
          "upperBounds": [
            {
              "name": "java.time.temporal.Temporal",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "adjustInto",
      "comment": "Returns a copy of the specified temporal object with the value of this field set. This returns a new temporal object based on the specified one with the value for this field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object has the same observable type as the specified object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the implementation is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use Temporal.with(TemporalField, long):    // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisField.adjustInto(temporal);\n   temporal \u003d temporal.with(thisField);\n It is recommended to use the second approach, with(TemporalField), as it is a lot clearer to read in code. Implementations should perform any queries or calculations using the fields available in ChronoField. If the field is not supported an UnsupportedTemporalTypeException must be thrown. Implementations must not alter the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eR\u003c/code\u003e - the type of the Temporal object"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to adjust, not null",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value of the field"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the field cannot be set",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported by the temporal",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the adjusted temporal object, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.TemporalAccessor",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.time.temporal.TemporalField",
                "type": "Class"
              },
              {
                "name": "java.lang.Long",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "fieldValues"
          }
        },
        {
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "field": {
            "name": "partialTemporal"
          }
        },
        {
          "type": {
            "name": "java.time.format.ResolverStyle",
            "type": "Class"
          },
          "field": {
            "name": "resolverStyle"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "resolve",
      "comment": "Resolves this field to provide a simpler alternative or a date. This method is invoked during the resolve phase of parsing. It is designed to allow application defined fields to be simplified into more standard fields, such as those on ChronoField, or into a date. Applications should not normally invoke this method directly.",
      "tagMap": {
        "implSpec": [
          "If an implementation represents a field that can be simplified, or combined with others, then this method must be implemented. \n\u003cp\u003e The specified map contains the current state of the parse. The map is mutable and must be mutated to resolve the field and any related fields. This method will only be invoked during parsing if the map contains this field, and implementations should therefore assume this field is present. \u003c/p\u003e\n\u003cp\u003e Resolving a field will consist of looking at the value of this field, and potentially other fields, and either updating the map with a simpler value, such as a \u003ccode\u003eChronoField\u003c/code\u003e, or returning a complete \u003ccode\u003eChronoLocalDate\u003c/code\u003e. If a resolve is successful, the code must remove all the fields that were resolved from the map, including this field. \u003c/p\u003e\n\u003cp\u003e For example, the \u003ccode\u003eIsoFields\u003c/code\u003e class contains the quarter-of-year and day-of-quarter fields. The implementation of this method in that class resolves the two fields plus the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/ChronoField.html#YEAR\"\u003e\u003ccode\u003eYEAR\u003c/code\u003e\u003c/a\u003e into a complete \u003ccode\u003eLocalDate\u003c/code\u003e. The resolve method will remove all three fields from the map before returning the \u003ccode\u003eLocalDate\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e A partially complete temporal is used to allow the chronology and zone to be queried. In general, only the chronology will be needed. Querying items other than the zone or chronology is undefined and must not be relied on. The behavior of other methods such as \u003ccode\u003eget\u003c/code\u003e, \u003ccode\u003egetLong\u003c/code\u003e, \u003ccode\u003erange\u003c/code\u003e and \u003ccode\u003eisSupported\u003c/code\u003e is unpredictable and the results undefined. \u003c/p\u003e\n\u003cp\u003e If resolution should be possible, but the data is invalid, the resolver style should be used to determine an appropriate level of leniency, which may require throwing a \u003ccode\u003eDateTimeException\u003c/code\u003e or \u003ccode\u003eArithmeticException\u003c/code\u003e. If no resolution is possible, the resolve method must return null. \u003c/p\u003e\n\u003cp\u003e When resolving time fields, the map will be altered and null returned. When resolving date fields, the date is normally returned from the method, with the map altered to remove the resolved fields. However, it would also be acceptable for the date fields to be resolved into other \u003ccode\u003eChronoField\u003c/code\u003e instances that can produce a date, such as \u003ccode\u003eEPOCH_DAY\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Not all \u003ccode\u003eTemporalAccessor\u003c/code\u003e implementations are accepted as return values. Implementations that call this method must accept \u003ccode\u003eChronoLocalDate\u003c/code\u003e, \u003ccode\u003eChronoLocalDateTime\u003c/code\u003e, \u003ccode\u003eChronoZonedDateTime\u003c/code\u003e and \u003ccode\u003eLocalTime\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The default implementation must return null.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003efieldValues\u003c/code\u003e - the map of fields to values, which can be updated, not null",
          "\u003ccode\u003epartialTemporal\u003c/code\u003e - the partially complete temporal to query for zone and chronology; querying for other things is undefined and not recommended, not null",
          "\u003ccode\u003eresolverStyle\u003c/code\u003e - the requested type of resolve, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if resolving results in an error. This must not be thrown by querying a field on the temporal without first checking if it is supported"
        ],
        "return": [
          "the resolved temporal object; null if resolving only changed the map, or no resolve occurred"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toString",
      "comment": "Gets a descriptive name for the field. The should be of the format \u0027BaseOfRange\u0027, such as \u0027MonthOfYear\u0027, unless the field has a range of FOREVER, when only the base unit is mentioned, such as \u0027Year\u0027 or \u0027Era\u0027.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the name of the field, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.time.temporal.TemporalField",
  "comment": "A field of date-time, such as month-of-year or minute-of-hour. \n\u003cp\u003e Date and time is expressed using fields which partition the time-line into something meaningful for humans. Implementations of this interface represent those fields. \u003c/p\u003e\n\u003cp\u003e The most commonly used units are defined in \u003ca href\u003d\"ChronoField.html\" title\u003d\"enum class in java.time.temporal\"\u003e\u003ccode\u003eChronoField\u003c/code\u003e\u003c/a\u003e. Further fields are supplied in \u003ca href\u003d\"IsoFields.html\" title\u003d\"class in java.time.temporal\"\u003e\u003ccode\u003eIsoFields\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"WeekFields.html\" title\u003d\"class in java.time.temporal\"\u003e\u003ccode\u003eWeekFields\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"JulianFields.html\" title\u003d\"class in java.time.temporal\"\u003e\u003ccode\u003eJulianFields\u003c/code\u003e\u003c/a\u003e. Fields can also be written by application code by implementing this interface. \u003c/p\u003e\n\u003cp\u003e The field works using double dispatch. Client code calls methods on a date-time like \u003ccode\u003eLocalDateTime\u003c/code\u003e which check if the field is a \u003ccode\u003eChronoField\u003c/code\u003e. If it is, then the date-time must handle it. Otherwise, the method call is re-dispatched to the matching method in this interface.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "This interface must be implemented with care to ensure other classes operate correctly. All implementations that can be instantiated must be final, immutable and thread-safe. Implementations should be \n\u003ccode\u003eSerializable\u003c/code\u003e where possible. An enum is as effective implementation choice."
    ],
    "since": [
      "1.8"
    ]
  }
}