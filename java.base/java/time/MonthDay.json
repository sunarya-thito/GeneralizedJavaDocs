{
  "packageName": "java.time",
  "simpleName": "MonthDay",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.time.MonthDay",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "now",
      "comment": "Obtains the current month-day from the system clock in the default time-zone. This will query the system clock in the default time-zone to obtain the current month-day. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "tagMap": {
        "return": [
          "the current month-day using the system clock and default time-zone, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.MonthDay",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "field": {
            "name": "zone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "now",
      "comment": "Obtains the current month-day from the system clock in the specified time-zone. This will query the system clock to obtain the current month-day. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the zone ID to use, not null"
        ],
        "return": [
          "the current month-day using the system clock, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.MonthDay",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Clock",
            "type": "Class"
          },
          "field": {
            "name": "clock"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "now",
      "comment": "Obtains the current month-day from the specified clock. This will query the specified clock to obtain the current month-day. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using dependency injection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eclock\u003c/code\u003e - the clock to use, not null"
        ],
        "return": [
          "the current month-day, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.MonthDay",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Month",
            "type": "Class"
          },
          "field": {
            "name": "month"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dayOfMonth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Obtains an instance of MonthDay. The day-of-month must be valid for the month within a leap year. Hence, for February, day 29 is valid. For example, passing in April and day 31 will throw an exception, as there can never be April 31st in any year. By contrast, passing in February 29th is permitted, as that month-day can sometimes be valid.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emonth\u003c/code\u003e - the month-of-year to represent, not null",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the day-of-month to represent, from 1 to 31"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the value of any field is out of range, or if the day-of-month is invalid for the month"
        ],
        "return": [
          "the month-day, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.MonthDay",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "month"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dayOfMonth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Obtains an instance of MonthDay. The day-of-month must be valid for the month within a leap year. Hence, for month 2 (February), day 29 is valid. For example, passing in month 4 (April) and day 31 will throw an exception, as there can never be April 31st in any year. By contrast, passing in February 29th is permitted, as that month-day can sometimes be valid.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emonth\u003c/code\u003e - the month-of-year to represent, from 1 (January) to 12 (December)",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the day-of-month to represent, from 1 to 31"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the value of any field is out of range, or if the day-of-month is invalid for the month"
        ],
        "return": [
          "the month-day, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.MonthDay",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalAccessor",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Obtains an instance of MonthDay from a temporal object. This obtains a month-day based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of MonthDay. The conversion extracts the MONTH_OF_YEAR and DAY_OF_MONTH fields. The extraction is only permitted if the temporal object has an ISO chronology, or can be converted to a LocalDate. This method matches the signature of the functional interface TemporalQuery allowing it to be used as a query via method reference, MonthDay::from.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the temporal object to convert, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to convert to a \n\u003ccode\u003eMonthDay\u003c/code\u003e"
        ],
        "return": [
          "the month-day, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.MonthDay",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parse",
      "comment": "Obtains an instance of MonthDay from a text string such as --12-03. The string must represent a valid month-day. The format is --MM-dd.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text to parse such as \"--12-03\", not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeParseException.html\" title\u003d\"class in java.time.format\"\u003eDateTimeParseException\u003c/a\u003e\u003c/code\u003e - if the text cannot be parsed"
        ],
        "return": [
          "the parsed month-day, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.MonthDay",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "text"
          }
        },
        {
          "type": {
            "name": "java.time.format.DateTimeFormatter",
            "type": "Class"
          },
          "field": {
            "name": "formatter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parse",
      "comment": "Obtains an instance of MonthDay from a text string using a specific formatter. The text is parsed using the formatter, returning a month-day.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etext\u003c/code\u003e - the text to parse, not null",
          "\u003ccode\u003eformatter\u003c/code\u003e - the formatter to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/format/DateTimeParseException.html\" title\u003d\"class in java.time.format\"\u003eDateTimeParseException\u003c/a\u003e\u003c/code\u003e - if the text cannot be parsed"
        ],
        "return": [
          "the parsed month-day, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSupported",
      "comment": "Checks if the specified field is supported. This checks if this month-day can be queried for the specified field. If false, then calling the range and get methods will throw an exception. If the field is a ChronoField then the query is implemented here. The supported fields are: MONTH_OF_YEAR YEAR All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#isSupported(java.time.temporal.TemporalField)\"\u003eisSupported\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to check, null returns false"
        ],
        "return": [
          "true if the field is supported on this month-day, false if not"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.ValueRange",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "range",
      "comment": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This month-day is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a ChronoField then the query is implemented here. The supported fields will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#range(java.time.temporal.TemporalField)\"\u003erange\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to query the range for, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the range for the field cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported"
        ],
        "return": [
          "the range of valid values for the field, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Gets the value of the specified field from this month-day as an int. This queries this month-day for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a ChronoField then the query is implemented here. The supported fields will return valid values based on this month-day. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#get(java.time.temporal.TemporalField)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to get, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if a value for the field cannot be obtained or the value is outside the range of valid values for the field",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported or the range of values exceeds an \n\u003ccode\u003eint\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the value for the field"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalField",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLong",
      "comment": "Gets the value of the specified field from this month-day as a long. This queries this month-day for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a ChronoField then the query is implemented here. The supported fields will return valid values based on this month-day. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#getLong(java.time.temporal.TemporalField)\"\u003egetLong\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the field to get, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if a value for the field cannot be obtained",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/UnsupportedTemporalTypeException.html\" title\u003d\"class in java.time.temporal\"\u003eUnsupportedTemporalTypeException\u003c/a\u003e\u003c/code\u003e - if the field is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the value for the field"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMonthValue",
      "comment": "Gets the month-of-year field from 1 to 12. This method returns the month as an int from 1 to 12. Application code is frequently clearer if the enum Month is used by calling getMonth().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/MonthDay.html#getMonth()\"\u003e\u003ccode\u003egetMonth()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the month-of-year, from 1 to 12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Month",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMonth",
      "comment": "Gets the month-of-year field using the Month enum. This method returns the enum Month for the month. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the int value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/MonthDay.html#getMonthValue()\"\u003e\u003ccode\u003egetMonthValue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the month-of-year, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDayOfMonth",
      "comment": "Gets the day-of-month field. This method returns the primitive int value for the day-of-month.",
      "tagMap": {
        "return": [
          "the day-of-month, from 1 to 31"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "year"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isValidYear",
      "comment": "Checks if the year is valid for this month-day. This method checks whether this month and day and the input year form a valid date. This can only return false for February 29th.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/Year.html#isValidMonthDay(java.time.MonthDay)\"\u003e\u003ccode\u003eYear.isValidMonthDay(MonthDay)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the year to validate"
        ],
        "return": [
          "true if the year is valid for this month-day"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.MonthDay",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "month"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withMonth",
      "comment": "Returns a copy of this MonthDay with the month-of-year altered. This returns a month-day with the specified month. If the day-of-month is invalid for the specified month, the day will be adjusted to the last valid day-of-month. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emonth\u003c/code\u003e - the month-of-year to set in the returned month-day, from 1 (January) to 12 (December)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the month-of-year value is invalid"
        ],
        "return": [
          "a \n\u003ccode\u003eMonthDay\u003c/code\u003e based on this month-day with the requested month, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.MonthDay",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Month",
            "type": "Class"
          },
          "field": {
            "name": "month"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "with",
      "comment": "Returns a copy of this MonthDay with the month-of-year altered. This returns a month-day with the specified month. If the day-of-month is invalid for the specified month, the day will be adjusted to the last valid day-of-month. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emonth\u003c/code\u003e - the month-of-year to set in the returned month-day, not null"
        ],
        "return": [
          "a \n\u003ccode\u003eMonthDay\u003c/code\u003e based on this month-day with the requested month, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.MonthDay",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dayOfMonth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withDayOfMonth",
      "comment": "Returns a copy of this MonthDay with the day-of-month altered. This returns a month-day with the specified day-of-month. If the day-of-month is invalid for the month, an exception is thrown. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the day-of-month to set in the return month-day, from 1 to 31"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the day-of-month value is invalid, or if the day-of-month is invalid for the month"
        ],
        "return": [
          "a \n\u003ccode\u003eMonthDay\u003c/code\u003e based on this month-day with the requested day, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "R",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.TemporalQuery",
            "parameters": [
              {
                "name": "R",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "query"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "R",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "query",
      "comment": "Queries this month-day using the specified query. This queries this month-day using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the TemporalQuery.queryFrom(TemporalAccessor) method on the specified query passing this as the argument.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eR\u003c/code\u003e - the type of the result"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html#query(java.time.temporal.TemporalQuery)\"\u003equery\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAccessor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003equery\u003c/code\u003e - the query to invoke, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to query (defined by the query)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs (defined by the query)"
        ],
        "return": [
          "the query result, null may be returned (defined by the query)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.Temporal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.Temporal",
            "type": "Class"
          },
          "field": {
            "name": "temporal"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "adjustInto",
      "comment": "Adjusts the specified temporal object to have this month-day. This returns a temporal object of the same observable type as the input with the month and day-of-month changed to be the same as this. The adjustment is equivalent to using Temporal.with(TemporalField, long) twice, passing ChronoField.MONTH_OF_YEAR and ChronoField.DAY_OF_MONTH as the fields. If the specified temporal object does not use the ISO calendar system then a DateTimeException is thrown. In most cases, it is clearer to reverse the calling pattern by using Temporal.with(TemporalAdjuster):    // these two lines are equivalent, but the second approach is recommended\n   temporal \u003d thisMonthDay.adjustInto(temporal);\n   temporal \u003d temporal.with(thisMonthDay);\n This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAdjuster.html#adjustInto(java.time.temporal.Temporal)\"\u003eadjustInto\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/temporal/TemporalAdjuster.html\" title\u003d\"interface in java.time.temporal\"\u003eTemporalAdjuster\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etemporal\u003c/code\u003e - the target object to be adjusted, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if unable to make the adjustment",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if numeric overflow occurs"
        ],
        "return": [
          "the adjusted object, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.format.DateTimeFormatter",
            "type": "Class"
          },
          "field": {
            "name": "formatter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Formats this month-day using the specified formatter. This month-day will be passed to the formatter to produce a string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eformatter\u003c/code\u003e - the formatter to use, not null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if an error occurs during printing"
        ],
        "return": [
          "the formatted month-day string, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.LocalDate",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "year"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "atYear",
      "comment": "Combines this month-day with a year to create a LocalDate. This returns a LocalDate formed from this month-day and the specified year. A month-day of February 29th will be adjusted to February 28th in the resulting date if the year is not a leap year. This instance is immutable and unaffected by this method call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the year to use, from MIN_YEAR to MAX_YEAR"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/DateTimeException.html\" title\u003d\"class in java.time\"\u003eDateTimeException\u003c/a\u003e\u003c/code\u003e - if the year is outside the valid range of years"
        ],
        "return": [
          "the local date formed from this month-day and the specified year, not null"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.MonthDay",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this month-day to another month-day. The comparison is based first on value of the month, then on the value of the day. It is \"consistent with equals\", as defined by Comparable.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/MonthDay.html\" title\u003d\"class in java.time\"\u003eMonthDay\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other month-day to compare to, not null"
        ],
        "return": [
          "the comparator value, negative if less, positive if greater"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.MonthDay",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAfter",
      "comment": "Checks if this month-day is after the specified month-day.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other month-day to compare to, not null"
        ],
        "return": [
          "true if this is after the specified month-day"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.MonthDay",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBefore",
      "comment": "Checks if this month-day is before the specified month-day.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other month-day to compare to, not null"
        ],
        "return": [
          "true if this point is before the specified month-day"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Checks if this month-day is equal to another month-day. The comparison is based on the time-line position of the month-day within a year.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to check, null returns false"
        ],
        "return": [
          "true if this is equal to the other month-day"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "A hash code for this month-day.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a suitable hash code"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Outputs this month-day as a String, such as --12-03. The output will be in the format --MM-dd:",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this month-day, not null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.time.MonthDay",
  "comment": "A month-day in the ISO-8601 calendar system, such as \n\u003ccode\u003e--12-03\u003c/code\u003e. \n\u003cp\u003e \u003ccode\u003eMonthDay\u003c/code\u003e is an immutable date-time object that represents the combination of a month and day-of-month. Any field that can be derived from a month and day, such as quarter-of-year, can be obtained. \u003c/p\u003e\n\u003cp\u003e This class does not store or represent a year, time or time-zone. For example, the value \"December 3rd\" can be stored in a \u003ccode\u003eMonthDay\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Since a \u003ccode\u003eMonthDay\u003c/code\u003e does not possess a year, the leap day of February 29th is considered valid. \u003c/p\u003e\n\u003cp\u003e This class implements \u003ca href\u003d\"temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003e\u003ccode\u003eTemporalAccessor\u003c/code\u003e\u003c/a\u003e rather than \u003ca href\u003d\"temporal/Temporal.html\" title\u003d\"interface in java.time.temporal\"\u003e\u003ccode\u003eTemporal\u003c/code\u003e\u003c/a\u003e. This is because it is not possible to define whether February 29th is valid or not without external information, preventing the implementation of plus/minus. Related to this, \u003ccode\u003eMonthDay\u003c/code\u003e only provides access to query and set the fields \u003ccode\u003eMONTH_OF_YEAR\u003c/code\u003e and \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today\u0027s rules for leap years are applied for all time. For most applications written today, the ISO-8601 rules are entirely suitable. However, any application that makes use of historical dates, and requires them to be accurate will find the ISO-8601 approach unsuitable. \u003c/p\u003e\n\u003cp\u003e This is a \u003ca href\u003d\"../../../java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e class; programmers should treat instances that are \u003ca href\u003d\"#equals(java.lang.Object)\"\u003eequal\u003c/a\u003e as interchangeable and should not use instances for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail. The \u003ccode\u003eequals\u003c/code\u003e method should be used for comparisons.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "This class is immutable and thread-safe."
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.time.MonthDay\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}