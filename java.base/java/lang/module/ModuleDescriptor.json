{
  "packageName": "java.lang.module",
  "simpleName": "ModuleDescriptor",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "name",
      "comment": "Returns the module name.",
      "tagMap": {
        "return": [
          "The module name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.module.ModuleDescriptor$Modifier",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modifiers",
      "comment": "Returns the set of module modifiers.",
      "tagMap": {
        "return": [
          "A possibly-empty unmodifiable set of modifiers"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isOpen",
      "comment": "Returns true if this is an open module. This method is equivalent to testing if the set of modifiers contains the OPEN modifier.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is an open module"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAutomatic",
      "comment": "Returns true if this is an automatic module. This method is equivalent to testing if the set of modifiers contains the AUTOMATIC modifier.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this is an automatic module"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.module.ModuleDescriptor$Requires",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "requires",
      "comment": "Returns the set of Requires objects representing the module dependences. The set includes a dependency on \"java.base\" when this module is not named \"java.base\". If this module is an automatic module then it does not have a dependency on any module other than \"java.base\".",
      "tagMap": {
        "return": [
          "A possibly-empty unmodifiable set of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/ModuleDescriptor.Requires.html\" title\u003d\"class in java.lang.module\"\u003e\u003ccode\u003eModuleDescriptor.Requires\u003c/code\u003e\u003c/a\u003e objects"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.module.ModuleDescriptor$Exports",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "exports",
      "comment": "Returns the set of Exports objects representing the exported packages. If this module is an automatic module then the set of exports is empty.",
      "tagMap": {
        "return": [
          "A possibly-empty unmodifiable set of exported packages"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.module.ModuleDescriptor$Opens",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "opens",
      "comment": "Returns the set of Opens objects representing the open packages. If this module is an open module or an automatic module then the set of open packages is empty.",
      "tagMap": {
        "return": [
          "A possibly-empty unmodifiable set of open packages"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "uses",
      "comment": "Returns the set of service dependences. If this module is an automatic module then the set of service dependences is empty.",
      "tagMap": {
        "return": [
          "A possibly-empty unmodifiable set of the fully qualified class names of the service types used"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.module.ModuleDescriptor$Provides",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "provides",
      "comment": "Returns the set of Provides objects representing the services that the module provides.",
      "tagMap": {
        "return": [
          "The possibly-empty unmodifiable set of the services that this module provides"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.module.ModuleDescriptor$Version",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "version",
      "comment": "Returns the module version.",
      "tagMap": {
        "return": [
          "This module\u0027s version, or an empty \n\u003ccode\u003eOptional\u003c/code\u003e if the module does not have a version or the version is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/ModuleDescriptor.Version.html#parse(java.lang.String)\"\u003eunparseable\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rawVersion",
      "comment": "Returns the string with the possibly-unparseable version of the module.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/ModuleDescriptor.html#version()\"\u003e\u003ccode\u003eversion()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The string containing the version of the module or an empty \n\u003ccode\u003eOptional\u003c/code\u003e if the module does not have a version"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toNameAndVersion",
      "comment": "Returns a string containing the module name and, if present, its version.",
      "tagMap": {
        "return": [
          "A string containing the module name and, if present, its version"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mainClass",
      "comment": "Returns the module main class.",
      "tagMap": {
        "return": [
          "The fully qualified class name of the module\u0027s main class"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "packages",
      "comment": "Returns the set of packages in the module. The set of packages includes all exported and open packages, as well as the packages of any service providers, and the package for the main class.",
      "tagMap": {
        "return": [
          "A possibly-empty unmodifiable set of the packages in the module"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.module.ModuleDescriptor",
            "type": "Class"
          },
          "field": {
            "name": "that"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this module descriptor to another. Two ModuleDescriptor objects are compared by comparing their module names lexicographically. Where the module names are equal then the module versions are compared. When comparing the module versions then a module descriptor with a version is considered to succeed a module descriptor that does not have a version. If both versions are unparseable then the raw version strings are compared lexicographically. Where the module names are equal and the versions are equal (or not present in both), then the set of modifiers are compared. Sets of modifiers are compared by comparing a binary value computed for each set. If a modifier is present in the set then the bit at the position of its ordinal is 1 in the binary value, otherwise 0. If the two set of modifiers are also equal then the other components of the module descriptors are compared in a manner that is consistent with equals.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/ModuleDescriptor.html\" title\u003d\"class in java.lang.module\"\u003eModuleDescriptor\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ethat\u003c/code\u003e - The module descriptor to compare"
        ],
        "return": [
          "A negative integer, zero, or a positive integer if this module descriptor is less than, equal to, or greater than the given module descriptor"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "ob"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Tests this module descriptor for equality with the given object. If the given object is not a ModuleDescriptor then this method returns false. Two module descriptors are equal if each of their corresponding components is equal. This method satisfies the general contract of the Object.equals method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eob\u003c/code\u003e - the object to which this object is to be compared"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, the given object is a module descriptor that is equal to this module descriptor"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Computes a hash code for this module descriptor. The hash code is based upon the components of the module descriptor, and satisfies the general contract of the Object.hashCode method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The hash-code value for this module descriptor"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string describing the module.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A string describing the module"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.module.ModuleDescriptor$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "java.lang.module.ModuleDescriptor$Modifier",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ms"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newModule",
      "comment": "Instantiates a builder to build a module descriptor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The module name",
          "\u003ccode\u003ems\u003c/code\u003e - The set of module modifiers"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the module name is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal module name, or the set of modifiers contains \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/ModuleDescriptor.Modifier.html#AUTOMATIC\"\u003e\u003ccode\u003eAUTOMATIC\u003c/code\u003e\u003c/a\u003e with other modifiers"
        ],
        "return": [
          "A new builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.module.ModuleDescriptor$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newModule",
      "comment": "Instantiates a builder to build a module descriptor for a normal module. This method is equivalent to invoking newModule with an empty set of modifiers.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The module name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the module name is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal module name"
        ],
        "return": [
          "A new builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.module.ModuleDescriptor$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newOpenModule",
      "comment": "Instantiates a builder to build a module descriptor for an open module. This method is equivalent to invoking newModule with the OPEN modifier. The builder for an open module cannot be used to declare any open packages.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The module name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the module name is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal module name"
        ],
        "return": [
          "A new builder that builds an open module"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.module.ModuleDescriptor$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newAutomaticModule",
      "comment": "Instantiates a builder to build a module descriptor for an automatic module. This method is equivalent to invoking newModule with the AUTOMATIC modifier. The builder for an automatic module cannot be used to declare module or service dependences. It also cannot be used to declare any exported or open packages.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/ModuleFinder.html#of(java.nio.file.Path...)\"\u003e\u003ccode\u003eModuleFinder.of(Path[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - The module name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the module name is \n\u003ccode\u003enull\u003c/code\u003e or is not a legal module name"
        ],
        "return": [
          "A new builder that builds an automatic module"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.module.ModuleDescriptor",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.util.Set",
                "parameters": [
                  {
                    "name": "java.lang.String",
                    "type": "Class"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "packageFinder"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "read",
      "comment": "Reads the binary form of a module declaration from an input stream as a module descriptor. If the descriptor encoded in the input stream does not indicate a set of packages in the module then the packageFinder will be invoked. The set of packages that the packageFinder returns must include all the packages that the module exports, opens, as well as the packages of the service implementations that the module provides, and the package of the main class (if the module has a main class). If the packageFinder throws an UncheckedIOException then IOException cause will be re-thrown. If there are bytes following the module descriptor then it is implementation specific as to whether those bytes are read, ignored, or reported as an InvalidModuleDescriptorException. If this method fails with an InvalidModuleDescriptorException or IOException then it may do so after some, but not all, bytes have been read from the input stream. It is strongly recommended that the stream be promptly closed and discarded if an exception occurs.",
      "tagMap": {
        "apiNote": [
          "The \n\u003ccode\u003epackageFinder\u003c/code\u003e parameter is for use when reading module descriptors from legacy module-artifact formats that do not record the set of packages in the descriptor itself."
        ],
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - The input stream",
          "\u003ccode\u003epackageFinder\u003c/code\u003e - A supplier that can produce the set of packages"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/InvalidModuleDescriptorException.html\" title\u003d\"class in java.lang.module\"\u003eInvalidModuleDescriptorException\u003c/a\u003e\u003c/code\u003e - If an invalid module descriptor is detected or the set of packages returned by the \n\u003ccode\u003epackageFinder\u003c/code\u003e does not include all of the packages obtained from the module descriptor",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs reading from the input stream or \n\u003ccode\u003e UncheckedIOException\u003c/code\u003e is thrown by the package finder"
        ],
        "return": [
          "The module descriptor"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.module.ModuleDescriptor",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "read",
      "comment": "Reads the binary form of a module declaration from an input stream as a module descriptor. This method works exactly as specified by the 2-arg read method with the exception that a packager finder is not used to find additional packages when the module descriptor read from the stream does not indicate the set of packages.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - The input stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/InvalidModuleDescriptorException.html\" title\u003d\"class in java.lang.module\"\u003eInvalidModuleDescriptorException\u003c/a\u003e\u003c/code\u003e - If an invalid module descriptor is detected",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs reading from the input stream"
        ],
        "return": [
          "The module descriptor"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.module.ModuleDescriptor",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "bb"
          }
        },
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.util.Set",
                "parameters": [
                  {
                    "name": "java.lang.String",
                    "type": "Class"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "packageFinder"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "read",
      "comment": "Reads the binary form of a module declaration from a byte buffer as a module descriptor. If the descriptor encoded in the byte buffer does not indicate a set of packages in the module then the packageFinder will be invoked. The set of packages that the packageFinder returns must include all the packages that the module exports, opens, as well as the packages of the service implementations that the module provides, and the package of the main class (if the module has a main class). If the packageFinder throws an UncheckedIOException then IOException cause will be re-thrown. The module descriptor is read from the buffer starting at index p, where p is the buffer\u0027s position when this method is invoked. Upon return the buffer\u0027s position will be equal to p + n where n is the number of bytes read from the buffer. If there are bytes following the module descriptor then it is implementation specific as to whether those bytes are read, ignored, or reported as an InvalidModuleDescriptorException. If this method fails with an InvalidModuleDescriptorException then it may do so after some, but not all, bytes have been read.",
      "tagMap": {
        "apiNote": [
          "The \n\u003ccode\u003epackageFinder\u003c/code\u003e parameter is for use when reading module descriptors from legacy module-artifact formats that do not record the set of packages in the descriptor itself."
        ],
        "param": [
          "\u003ccode\u003ebb\u003c/code\u003e - The byte buffer",
          "\u003ccode\u003epackageFinder\u003c/code\u003e - A supplier that can produce the set of packages"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/InvalidModuleDescriptorException.html\" title\u003d\"class in java.lang.module\"\u003eInvalidModuleDescriptorException\u003c/a\u003e\u003c/code\u003e - If an invalid module descriptor is detected or the set of packages returned by the \n\u003ccode\u003epackageFinder\u003c/code\u003e does not include all of the packages obtained from the module descriptor"
        ],
        "return": [
          "The module descriptor"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.module.ModuleDescriptor",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "bb"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "read",
      "comment": "Reads the binary form of a module declaration from a byte buffer as a module descriptor. This method works exactly as specified by the 2-arg read method with the exception that a packager finder is not used to find additional packages when the module descriptor encoded in the buffer does not indicate the set of packages.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebb\u003c/code\u003e - The byte buffer"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/InvalidModuleDescriptorException.html\" title\u003d\"class in java.lang.module\"\u003eInvalidModuleDescriptorException\u003c/a\u003e\u003c/code\u003e - If an invalid module descriptor is detected"
        ],
        "return": [
          "The module descriptor"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.lang.module.ModuleDescriptor$Provides",
    "java.lang.module.ModuleDescriptor$Modifier",
    "java.lang.module.ModuleDescriptor$Version",
    "java.lang.module.ModuleDescriptor$Builder",
    "java.lang.module.ModuleDescriptor$Exports",
    "java.lang.module.ModuleDescriptor$Requires",
    "java.lang.module.ModuleDescriptor$Opens"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.module.ModuleDescriptor",
  "comment": "A module descriptor. \n\u003cp\u003e A module descriptor describes a named module and defines methods to obtain each of its components. The module descriptor for a named module in the Java virtual machine is obtained by invoking the \u003ca href\u003d\"../Module.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eModule\u003c/code\u003e\u003c/a\u003e\u0027s \u003ca href\u003d\"../Module.html#getDescriptor()\"\u003e\u003ccode\u003egetDescriptor\u003c/code\u003e\u003c/a\u003e method. Module descriptors can also be created using the \u003ca href\u003d\"ModuleDescriptor.Builder.html\" title\u003d\"class in java.lang.module\"\u003e\u003ccode\u003eModuleDescriptor.Builder\u003c/code\u003e\u003c/a\u003e class or by reading the binary form of a module declaration (\u003ccode\u003emodule-info.class\u003c/code\u003e) using the \u003ca href\u003d\"#read(java.io.InputStream,java.util.function.Supplier)\"\u003e\u003ccode\u003eread\u003c/code\u003e\u003c/a\u003e methods defined here. \u003c/p\u003e \n\u003cp\u003e A module descriptor describes a \u003cem\u003enormal\u003c/em\u003e, open, or automatic module. \u003cem\u003eNormal\u003c/em\u003e modules and open modules describe their \u003ca href\u003d\"#requires()\"\u003edependences\u003c/a\u003e, \u003ca href\u003d\"#exports()\"\u003e\u003ccode\u003eexported-packages\u003c/code\u003e\u003c/a\u003e, the services that they \u003ca href\u003d\"#uses()\"\u003euse\u003c/a\u003e or \u003ca href\u003d\"#provides()\"\u003eprovide\u003c/a\u003e, and other components. \u003cem\u003eNormal\u003c/em\u003e modules may \u003ca href\u003d\"#opens()\"\u003eopen\u003c/a\u003e specific packages. The module descriptor for an open module does not declare any open packages (its \u003ccode\u003eopens\u003c/code\u003e method returns an empty set) but when instantiated in the Java virtual machine then it is treated as if all packages are open. The module descriptor for an automatic module does not declare any dependences (except for the mandatory dependency on \u003ccode\u003e java.base\u003c/code\u003e), and does not declare any exported or open packages. Automatic modules receive special treatment during resolution so that they read all other modules in the configuration. When an automatic module is instantiated in the Java virtual machine then it reads every unnamed module and is treated as if all packages are exported and open. \u003c/p\u003e \n\u003cp\u003e \u003ccode\u003eModuleDescriptor\u003c/code\u003e objects are immutable and safe for use by multiple concurrent threads.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Module.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eModule\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "9"
    ]
  }
}