{
  "packageName": "java.lang",
  "simpleName": "Deprecated",
  "moduleName": "java.base",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.Deprecated",
  "comment": "A program element annotated \n\u003ccode\u003e@Deprecated\u003c/code\u003e is one that programmers are discouraged from using. An element may be deprecated for any of several reasons, for example, its usage is likely to lead to errors; it may be changed incompatibly or removed in a future version; it has been superseded by a newer, usually preferable alternative; or it is obsolete. \n\u003cp\u003eCompilers issue warnings when a deprecated program element is used or overridden in non-deprecated code. Use of the \u003ccode\u003e@Deprecated\u003c/code\u003e annotation on a local variable declaration or on a parameter declaration or a package declaration has no effect on the warnings issued by a compiler. \u003c/p\u003e\n\u003cp\u003eWhen a module is deprecated, the use of that module in \u003ccode\u003e requires\u003c/code\u003e, but not in \u003ccode\u003eexports\u003c/code\u003e or \u003ccode\u003eopens\u003c/code\u003e clauses causes a warning to be issued. A module being deprecated does \u003cem\u003enot\u003c/em\u003e cause warnings to be issued for uses of types within the module. \u003c/p\u003e\n\u003cp\u003eThis annotation type has a string-valued element \u003ccode\u003esince\u003c/code\u003e. The value of this element indicates the version in which the annotated program element was first deprecated. \u003c/p\u003e\n\u003cp\u003eThis annotation type has a boolean-valued element \u003ccode\u003eforRemoval\u003c/code\u003e. A value of \u003ccode\u003etrue\u003c/code\u003e indicates intent to remove the annotated program element in a future version. A value of \u003ccode\u003efalse\u003c/code\u003e indicates that use of the annotated program element is discouraged, but at the time the program element was annotated, there was no specific intent to remove it.\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.4.6\"\u003e9.6.4.6 @Deprecated\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "apiNote": [
      "It is strongly recommended that the reason for deprecating a program element be explained in the documentation, using the \n\u003ccode\u003e@deprecated\u003c/code\u003e javadoc tag. The documentation should also suggest and link to a recommended replacement API, if applicable. A replacement API often has subtly different semantics, so such issues should be discussed as well. \n\u003cp\u003eIt is recommended that a \u003ccode\u003esince\u003c/code\u003e value be provided with all newly annotated program elements. Note that \u003ccode\u003esince\u003c/code\u003e cannot be mandatory, as there are many existing annotations that lack this element value. \u003c/p\u003e\n\u003cp\u003eThere is no defined order among annotation elements. As a matter of style, the \u003ccode\u003esince\u003c/code\u003e element should be placed first. \u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e@Deprecated\u003c/code\u003e annotation should always be present if the \u003ccode\u003e@deprecated\u003c/code\u003e javadoc tag is present, and vice-versa.\u003c/p\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}