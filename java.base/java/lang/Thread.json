{
  "packageName": "java.lang",
  "simpleName": "Thread",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_PRIORITY",
      "comment": "The minimum priority that a thread can have.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Thread.MIN_PRIORITY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NORM_PRIORITY",
      "comment": "The default priority that is assigned to a thread.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Thread.NORM_PRIORITY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_PRIORITY",
      "comment": "The maximum priority that a thread can have.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Thread.MAX_PRIORITY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Thread",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "currentThread",
      "comment": "Returns a reference to the currently executing thread object.",
      "tagMap": {
        "return": [
          "the currently executing thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "yield",
      "comment": "A hint to the scheduler that the current thread is willing to yield its current use of a processor. The scheduler is free to ignore this hint. Yield is a heuristic attempt to improve relative progression between threads that would otherwise over-utilise a CPU. Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect. It is rarely appropriate to use this method. It may be useful for debugging or testing purposes, where it may help to reproduce bugs due to race conditions. It may also be useful when designing concurrency control constructs such as the ones in the java.util.concurrent.locks package.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "millis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "sleep",
      "comment": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emillis\u003c/code\u003e - the length of time to sleep in milliseconds"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value of \n\u003ccode\u003emillis\u003c/code\u003e is negative",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if any thread has interrupted the current thread. The \n\u003ci\u003einterrupted status\u003c/i\u003e of the current thread is cleared when this exception is thrown."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "millis"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "nanos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "sleep",
      "comment": "Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds plus the specified number of nanoseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emillis\u003c/code\u003e - the length of time to sleep in milliseconds",
          "\u003ccode\u003enanos\u003c/code\u003e - \n\u003ccode\u003e0-999999\u003c/code\u003e additional nanoseconds to sleep"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value of \n\u003ccode\u003emillis\u003c/code\u003e is negative, or the value of \n\u003ccode\u003enanos\u003c/code\u003e is not in the range \n\u003ccode\u003e0-999999\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if any thread has interrupted the current thread. The \n\u003ci\u003einterrupted status\u003c/i\u003e of the current thread is cleared when this exception is thrown."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "onSpinWait",
      "comment": "Indicates that the caller is momentarily unable to progress, until the occurrence of one or more actions on the part of other activities. By invoking this method within each iteration of a spin-wait loop construct, the calling thread indicates to the runtime that it is busy-waiting. The runtime may take action to improve the performance of invoking spin-wait loop constructions.",
      "tagMap": {
        "apiNote": [
          "As an example consider a method in a class that spins in a loop until some flag is set outside of that method. A call to the \n\u003ccode\u003eonSpinWait\u003c/code\u003e method should be placed inside the spin loop. \n\u003cpre\u003e\u003ccode\u003e\n     class EventHandler {\n         volatile boolean eventNotificationNotReceived;\n         void waitForEventAndHandleIt() {\n             while ( eventNotificationNotReceived ) {\n                 java.lang.Thread.onSpinWait();\n             }\n             readAndProcessEvent();\n         }\n\n         void readAndProcessEvent() {\n             // Read event from some source and process it\n              . . .\n         }\n     }\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e The code above would remain correct even if the \u003ccode\u003eonSpinWait\u003c/code\u003e method was not called at all. However on some architectures the Java Virtual Machine may issue the processor instructions to address such code patterns in a more beneficial way.\u003c/p\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.CloneNotSupportedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "clone",
      "comment": "Throws CloneNotSupportedException as a Thread can not be meaningfully cloned. Construct a new Thread instead.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CloneNotSupportedException.html\" title\u003d\"class in java.lang\"\u003eCloneNotSupportedException\u003c/a\u003e\u003c/code\u003e - always"
        ],
        "return": [
          "a clone of this instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "start",
      "comment": "Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread. The result is that two threads are running concurrently: the current thread (which returns from the call to the start method) and the other thread (which executes its run method). It is never legal to start a thread more than once. In particular, a thread may not be restarted once it has completed execution.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#run()\"\u003e\u003ccode\u003erun()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#stop()\"\u003e\u003ccode\u003estop()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalThreadStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalThreadStateException\u003c/a\u003e\u003c/code\u003e - if the thread was already started."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "run",
      "comment": "If this thread was constructed using a separate Runnable run object, then that Runnable object\u0027s run method is called; otherwise, this method does nothing and returns. Subclasses of Thread should override this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#stop()\"\u003e\u003ccode\u003estop()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#%3Cinit%3E(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)\"\u003e\u003ccode\u003eThread(ThreadGroup, Runnable, String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runnable.html#run()\"\u003erun\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runnable.html\" title\u003d\"interface in java.lang\"\u003eRunnable\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "stop",
      "comment": "Forces the thread to stop executing. If there is a security manager installed, its checkAccess method is called with this as its argument. This may result in a SecurityException being raised (in the current thread). If this thread is different from the current thread (that is, the current thread is trying to stop a thread other than itself), the security manager\u0027s checkPermission method (with a RuntimePermission(\"stopThread\") argument) is called in addition. Again, this may result in throwing a SecurityException (in the current thread). The thread represented by this thread is forced to stop whatever it is doing abnormally and to throw a newly created ThreadDeath object as an exception. It is permitted to stop a thread that has not yet been started. If the thread is eventually started, it immediately terminates. An application should not normally try to catch ThreadDeath unless it must do some extraordinary cleanup operation (note that the throwing of ThreadDeath causes finally clauses of try statements to be executed before the thread officially dies). If a catch clause catches a ThreadDeath object, it is important to rethrow the object so that the thread actually dies. The top-level error handler that reacts to otherwise uncaught exceptions does not print out a message or otherwise notify the application if the uncaught exception is an instance of ThreadDeath.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "1.2"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#interrupt()\"\u003e\u003ccode\u003einterrupt()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#checkAccess()\"\u003e\u003ccode\u003echeckAccess()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#run()\"\u003e\u003ccode\u003erun()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ThreadDeath.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eThreadDeath\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ThreadGroup.html#uncaughtException(java.lang.Thread,java.lang.Throwable)\"\u003e\u003ccode\u003eThreadGroup.uncaughtException(Thread,Throwable)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkAccess(java.lang.Thread)\"\u003e\u003ccode\u003eSecurityManager.checkAccess(Thread)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot modify this thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "interrupt",
      "comment": "Interrupts this thread. Unless the current thread is interrupting itself, which is always permitted, the checkAccess method of this thread is invoked, which may cause a SecurityException to be thrown. If this thread is blocked in an invocation of the wait(), wait(long), or wait(long, int) methods of the Object class, or of the join(), join(long), join(long, int), sleep(long), or sleep(long, int) methods of this class, then its interrupt status will be cleared and it will receive an InterruptedException. If this thread is blocked in an I/O operation upon an InterruptibleChannel then the channel will be closed, the thread\u0027s interrupt status will be set, and the thread will receive a ClosedByInterruptException. If this thread is blocked in a Selector then the thread\u0027s interrupt status will be set and it will return immediately from the selection operation, possibly with a non-zero value, just as if the selector\u0027s wakeup method were invoked. If none of the previous conditions hold then this thread\u0027s interrupt status will be set. Interrupting a thread that is not alive need not have any effect.",
      "tagMap": {
        "implNote": [
          "In the JDK Reference Implementation, interruption of a thread that is not alive still records that the interrupt request was made and will report it via \n\u003ccode\u003einterrupted\u003c/code\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#isInterrupted()\"\u003e\u003ccode\u003eisInterrupted()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot modify this thread"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "interrupted",
      "comment": "Tests whether the current thread has been interrupted. The interrupted status of the thread is cleared by this method. In other words, if this method were to be called twice in succession, the second call would return false (unless the current thread were interrupted again, after the first call had cleared its interrupted status and before the second call had examined it).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#isInterrupted()\"\u003e\u003ccode\u003eisInterrupted()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the current thread has been interrupted; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isInterrupted",
      "comment": "Tests whether this thread has been interrupted. The interrupted status of the thread is unaffected by this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#interrupted()\"\u003e\u003ccode\u003einterrupted()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this thread has been interrupted; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isAlive",
      "comment": "Tests if this thread is alive. A thread is alive if it has been started and has not yet died.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this thread is alive; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "suspend",
      "comment": "Suspends this thread. First, the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException (in the current thread). If the thread is alive, it is suspended and makes no further progress unless and until it is resumed.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "1.2"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#checkAccess()\"\u003e\u003ccode\u003echeckAccess()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot modify this thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "resume",
      "comment": "Resumes a suspended thread. First, the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException (in the current thread). If the thread is alive but suspended, it is resumed and is permitted to make progress in its execution.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "1.2"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#checkAccess()\"\u003e\u003ccode\u003echeckAccess()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#suspend()\"\u003e\u003ccode\u003esuspend()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot modify this thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newPriority"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setPriority",
      "comment": "Changes the priority of this thread. First the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException. Otherwise, the priority of this thread is set to the smaller of the specified newPriority and the maximum permitted priority of the thread\u0027s thread group.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#getPriority()\"\u003e\u003ccode\u003egetPriority()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#checkAccess()\"\u003e\u003ccode\u003echeckAccess()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#getThreadGroup()\"\u003e\u003ccode\u003egetThreadGroup()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#MAX_PRIORITY\"\u003e\u003ccode\u003eMAX_PRIORITY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#MIN_PRIORITY\"\u003e\u003ccode\u003eMIN_PRIORITY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ThreadGroup.html#getMaxPriority()\"\u003e\u003ccode\u003eThreadGroup.getMaxPriority()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewPriority\u003c/code\u003e - priority to set this thread to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the priority is not in the range \n\u003ccode\u003eMIN_PRIORITY\u003c/code\u003e to \n\u003ccode\u003eMAX_PRIORITY\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot modify this thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getPriority",
      "comment": "Returns this thread\u0027s priority.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#setPriority(int)\"\u003e\u003ccode\u003esetPriority(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "this thread\u0027s priority."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setName",
      "comment": "Changes the name of this thread to be equal to the argument name. First the checkAccess method of this thread is called with no arguments. This may result in throwing a SecurityException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#getName()\"\u003e\u003ccode\u003egetName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#checkAccess()\"\u003e\u003ccode\u003echeckAccess()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the new name for this thread."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot modify this thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getName",
      "comment": "Returns this thread\u0027s name.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#setName(java.lang.String)\"\u003e\u003ccode\u003esetName(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "this thread\u0027s name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ThreadGroup",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getThreadGroup",
      "comment": "Returns the thread group to which this thread belongs. This method returns null if this thread has died (been stopped).",
      "tagMap": {
        "return": [
          "this thread\u0027s thread group."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "activeCount",
      "comment": "Returns an estimate of the number of active threads in the current thread\u0027s thread group and its subgroups. Recursively iterates over all subgroups in the current thread\u0027s thread group. The value returned is only an estimate because the number of threads may change dynamically while this method traverses internal data structures, and might be affected by the presence of certain system threads. This method is intended primarily for debugging and monitoring purposes.",
      "tagMap": {
        "return": [
          "an estimate of the number of active threads in the current thread\u0027s thread group and in any other thread group that has the current thread\u0027s thread group as an ancestor"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Thread",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "tarray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "enumerate",
      "comment": "Copies into the specified array every active thread in the current thread\u0027s thread group and its subgroups. This method simply invokes the ThreadGroup.enumerate(Thread[]) method of the current thread\u0027s thread group. An application might use the activeCount method to get an estimate of how big the array should be, however if the array is too short to hold all the threads, the extra threads are silently ignored. If it is critical to obtain every active thread in the current thread\u0027s thread group and its subgroups, the invoker should verify that the returned int value is strictly less than the length of tarray. Due to the inherent race condition in this method, it is recommended that the method only be used for debugging and monitoring purposes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etarray\u003c/code\u003e - an array into which to put the list of threads"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ThreadGroup.html#checkAccess()\"\u003e\u003ccode\u003eThreadGroup.checkAccess()\u003c/code\u003e\u003c/a\u003e determines that the current thread cannot access its thread group"
        ],
        "return": [
          "the number of threads put into the array"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "countStackFrames",
      "comment": "Throws UnsupportedOperationException.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "1.2"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eStackWalker\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "nothing"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "millis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "join",
      "comment": "Waits at most millis milliseconds for this thread to die. A timeout of 0 means to wait forever. This implementation uses a loop of this.wait calls conditioned on this.isAlive. As a thread terminates the this.notifyAll method is invoked. It is recommended that applications not use wait, notify, or notifyAll on Thread instances.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emillis\u003c/code\u003e - the time to wait in milliseconds"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value of \n\u003ccode\u003emillis\u003c/code\u003e is negative",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if any thread has interrupted the current thread. The \n\u003ci\u003einterrupted status\u003c/i\u003e of the current thread is cleared when this exception is thrown."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "millis"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "nanos"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "join",
      "comment": "Waits at most millis milliseconds plus nanos nanoseconds for this thread to die. If both arguments are 0, it means to wait forever. This implementation uses a loop of this.wait calls conditioned on this.isAlive. As a thread terminates the this.notifyAll method is invoked. It is recommended that applications not use wait, notify, or notifyAll on Thread instances.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emillis\u003c/code\u003e - the time to wait in milliseconds",
          "\u003ccode\u003enanos\u003c/code\u003e - \n\u003ccode\u003e0-999999\u003c/code\u003e additional nanoseconds to wait"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value of \n\u003ccode\u003emillis\u003c/code\u003e is negative, or the value of \n\u003ccode\u003enanos\u003c/code\u003e is not in the range \n\u003ccode\u003e0-999999\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if any thread has interrupted the current thread. The \n\u003ci\u003einterrupted status\u003c/i\u003e of the current thread is cleared when this exception is thrown."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "join",
      "comment": "Waits for this thread to die. An invocation of this method behaves in exactly the same way as the invocation join(0)",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if any thread has interrupted the current thread. The \n\u003ci\u003einterrupted status\u003c/i\u003e of the current thread is cleared when this exception is thrown."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "dumpStack",
      "comment": "Prints a stack trace of the current thread to the standard error stream. This method is used only for debugging.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "on"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setDaemon",
      "comment": "Marks this thread as either a daemon thread or a user thread. The Java Virtual Machine exits when the only threads running are all daemon threads. This method must be invoked before the thread is started.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eon\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, marks this thread as a daemon thread"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalThreadStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalThreadStateException\u003c/a\u003e\u003c/code\u003e - if this thread is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#isAlive()\"\u003ealive\u003c/a\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#checkAccess()\"\u003e\u003ccode\u003echeckAccess()\u003c/code\u003e\u003c/a\u003e determines that the current thread cannot modify this thread"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isDaemon",
      "comment": "Tests if this thread is a daemon thread.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#setDaemon(boolean)\"\u003e\u003ccode\u003esetDaemon(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this thread is a daemon thread; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "checkAccess",
      "comment": "Determines if the currently running thread has permission to modify this thread. If there is a security manager, its checkAccess method is called with this thread as its argument. This may result in throwing a SecurityException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkAccess(java.lang.Thread)\"\u003e\u003ccode\u003eSecurityManager.checkAccess(Thread)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread is not allowed to access this thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this thread, including the thread\u0027s name, priority, and thread group.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this thread."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ClassLoader",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getContextClassLoader",
      "comment": "Returns the context ClassLoader for this thread. The context ClassLoader is provided by the creator of the thread for use by code running in this thread when loading classes and resources. If not set, the default is the ClassLoader context of the parent thread. The context ClassLoader of the primordial thread is typically set to the class loader used to load the application.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is present, and the caller\u0027s class loader is not \n\u003ccode\u003enull\u003c/code\u003e and is not the same as or an ancestor of the context class loader, and the caller does not have the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"getClassLoader\")\u003c/code\u003e"
        ],
        "return": [
          "the context \n\u003ccode\u003eClassLoader\u003c/code\u003e for this thread, or \n\u003ccode\u003enull\u003c/code\u003e indicating the system class loader (or, failing that, the bootstrap class loader)"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "cl"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setContextClassLoader",
      "comment": "Sets the context ClassLoader for this Thread. The context ClassLoader can be set when a thread is created, and allows the creator of the thread to provide the appropriate class loader, through getContextClassLoader, to code running in the thread when loading classes and resources. If a security manager is present, its checkPermission method is invoked with a RuntimePermission (\"setContextClassLoader\") permission to see if setting the context ClassLoader is permitted.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecl\u003c/code\u003e - the context ClassLoader for this Thread, or null indicating the system class loader (or, failing that, the bootstrap class loader)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot set the context ClassLoader"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "holdsLock",
      "comment": "Returns true if and only if the current thread holds the monitor lock on the specified object. This method is designed to allow a program to assert that the current thread already holds a specified lock:      assert Thread.holdsLock(obj);",
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object on which to test lock ownership"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if obj is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the current thread holds the monitor lock on the specified object."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StackTraceElement",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStackTrace",
      "comment": "Returns an array of stack trace elements representing the stack dump of this thread. This method will return a zero-length array if this thread has not started, has started but has not yet been scheduled to run by the system, or has terminated. If the returned array is of non-zero length then the first element of the array represents the top of the stack, which is the most recent method invocation in the sequence. The last element of the array represents the bottom of the stack, which is the least recent method invocation in the sequence. If there is a security manager, and this thread is not the current thread, then the security manager\u0027s checkPermission method is called with a RuntimePermission(\"getStackTrace\") permission to see if it\u0027s ok to get the stack trace. Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning this thread is permitted to return a zero-length array from this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getStackTrace()\"\u003e\u003ccode\u003eThrowable.getStackTrace()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow getting the stack trace of thread."
        ],
        "return": [
          "an array of \n\u003ccode\u003eStackTraceElement\u003c/code\u003e, each represents one stack frame."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.Thread",
            "type": "Class"
          },
          {
            "name": "java.lang.StackTraceElement",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAllStackTraces",
      "comment": "Returns a map of stack traces for all live threads. The map keys are threads and each map value is an array of StackTraceElement that represents the stack dump of the corresponding Thread. The returned stack traces are in the format specified for the getStackTrace method. The threads may be executing while this method is called. The stack trace of each thread only represents a snapshot and each stack trace may be obtained at different time. A zero-length array will be returned in the map value if the virtual machine has no stack trace information about a thread. If there is a security manager, then the security manager\u0027s checkPermission method is called with a RuntimePermission(\"getStackTrace\") permission as well as RuntimePermission(\"modifyThreadGroup\") permission to see if it is ok to get the stack trace of all threads.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#getStackTrace()\"\u003e\u003ccode\u003egetStackTrace()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getStackTrace()\"\u003e\u003ccode\u003eThrowable.getStackTrace()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow getting the stack trace of thread."
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e from \n\u003ccode\u003eThread\u003c/code\u003e to an array of \n\u003ccode\u003eStackTraceElement\u003c/code\u003e that represents the stack trace of the corresponding thread."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getId",
      "comment": "Returns the identifier of this Thread. The thread ID is a positive long number generated when this thread was created. The thread ID is unique and remains unchanged during its lifetime. When a thread is terminated, this thread ID may be reused.",
      "tagMap": {
        "return": [
          "this thread\u0027s ID."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Thread$State",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getState",
      "comment": "Returns the state of this thread. This method is designed for use in monitoring of the system state, not for synchronization control.",
      "tagMap": {
        "return": [
          "this thread\u0027s state."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Thread$UncaughtExceptionHandler",
            "type": "Class"
          },
          "field": {
            "name": "eh"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDefaultUncaughtExceptionHandler",
      "comment": "Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread. Uncaught exception handling is controlled first by the thread, then by the thread\u0027s ThreadGroup object and finally by the default uncaught exception handler. If the thread does not have an explicit uncaught exception handler set, and the thread\u0027s thread group (including parent thread groups) does not specialize its uncaughtException method, then the default handler\u0027s uncaughtException method will be invoked. By setting the default uncaught exception handler, an application can change the way in which uncaught exceptions are handled (such as logging to a specific device, or file) for those threads that would already accept whatever \"default\" behavior the system provided. Note that the default uncaught exception handler should not usually defer to the thread\u0027s ThreadGroup object, as that could cause infinite recursion.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)\"\u003e\u003ccode\u003esetUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#getUncaughtExceptionHandler()\"\u003e\u003ccode\u003egetUncaughtExceptionHandler()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ThreadGroup.html#uncaughtException(java.lang.Thread,java.lang.Throwable)\"\u003e\u003ccode\u003eThreadGroup.uncaughtException(java.lang.Thread, java.lang.Throwable)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eeh\u003c/code\u003e - the object to use as the default uncaught exception handler. If \n\u003ccode\u003enull\u003c/code\u003e then there is no default handler."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is present and it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"setDefaultUncaughtExceptionHandler\")\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Thread$UncaughtExceptionHandler",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefaultUncaughtExceptionHandler",
      "comment": "Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception. If the returned value is null, there is no default.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)\"\u003e\u003ccode\u003esetDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default uncaught exception handler for all threads"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Thread$UncaughtExceptionHandler",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUncaughtExceptionHandler",
      "comment": "Returns the handler invoked when this thread abruptly terminates due to an uncaught exception. If this thread has not had an uncaught exception handler explicitly set then this thread\u0027s ThreadGroup object is returned, unless this thread has terminated, in which case null is returned.",
      "tagMap": {
        "return": [
          "the uncaught exception handler for this thread"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Thread$UncaughtExceptionHandler",
            "type": "Class"
          },
          "field": {
            "name": "eh"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setUncaughtExceptionHandler",
      "comment": "Set the handler invoked when this thread abruptly terminates due to an uncaught exception. A thread can take full control of how it responds to uncaught exceptions by having its uncaught exception handler explicitly set. If no such handler is set then the thread\u0027s ThreadGroup object acts as its handler.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)\"\u003e\u003ccode\u003esetDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ThreadGroup.html#uncaughtException(java.lang.Thread,java.lang.Throwable)\"\u003e\u003ccode\u003eThreadGroup.uncaughtException(java.lang.Thread, java.lang.Throwable)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eeh\u003c/code\u003e - the object to use as this thread\u0027s uncaught exception handler. If \n\u003ccode\u003enull\u003c/code\u003e then this thread has no explicit handler."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread is not allowed to modify this thread."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new Thread object. This constructor has the same effect as Thread (null, null, gname), where gname is a newly generated name. Automatically generated names are of the form \"Thread-\"+n, where n is an integer.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new Thread object. This constructor has the same effect as Thread (null, target, gname), where gname is a newly generated name. Automatically generated names are of the form \"Thread-\"+n, where n is an integer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the object whose \n\u003ccode\u003erun\u003c/code\u003e method is invoked when this thread is started. If \n\u003ccode\u003enull\u003c/code\u003e, this classes \n\u003ccode\u003erun\u003c/code\u003e method does nothing."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.ThreadGroup",
            "type": "Class"
          },
          "field": {
            "name": "group"
          }
        },
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new Thread object. This constructor has the same effect as Thread (group, target, gname) ,where gname is a newly generated name. Automatically generated names are of the form \"Thread-\"+n, where n is an integer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003egroup\u003c/code\u003e - the thread group. If \n\u003ccode\u003enull\u003c/code\u003e and there is a security manager, the group is determined by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#getThreadGroup()\"\u003eSecurityManager.getThreadGroup()\u003c/a\u003e. If there is not a security manager or \n\u003ccode\u003e SecurityManager.getThreadGroup()\u003c/code\u003e returns \n\u003ccode\u003enull\u003c/code\u003e, the group is set to the current thread\u0027s thread group.",
          "\u003ccode\u003etarget\u003c/code\u003e - the object whose \n\u003ccode\u003erun\u003c/code\u003e method is invoked when this thread is started. If \n\u003ccode\u003enull\u003c/code\u003e, this thread\u0027s run method is invoked."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot create a thread in the specified thread group"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new Thread object. This constructor has the same effect as Thread (null, null, name).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the new thread"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.ThreadGroup",
            "type": "Class"
          },
          "field": {
            "name": "group"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new Thread object. This constructor has the same effect as Thread (group, null, name).",
      "tagMap": {
        "param": [
          "\u003ccode\u003egroup\u003c/code\u003e - the thread group. If \n\u003ccode\u003enull\u003c/code\u003e and there is a security manager, the group is determined by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#getThreadGroup()\"\u003eSecurityManager.getThreadGroup()\u003c/a\u003e. If there is not a security manager or \n\u003ccode\u003e SecurityManager.getThreadGroup()\u003c/code\u003e returns \n\u003ccode\u003enull\u003c/code\u003e, the group is set to the current thread\u0027s thread group.",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the new thread"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot create a thread in the specified thread group"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new Thread object. This constructor has the same effect as Thread (null, target, name).",
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the object whose \n\u003ccode\u003erun\u003c/code\u003e method is invoked when this thread is started. If \n\u003ccode\u003enull\u003c/code\u003e, this thread\u0027s run method is invoked.",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the new thread"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.ThreadGroup",
            "type": "Class"
          },
          "field": {
            "name": "group"
          }
        },
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group. If there is a security manager, its checkAccess method is invoked with the ThreadGroup as its argument. In addition, its checkPermission method is invoked with the RuntimePermission(\"enableContextClassLoaderOverride\") permission when invoked directly or indirectly by the constructor of a subclass which overrides the getContextClassLoader or setContextClassLoader methods. The priority of the newly created thread is set equal to the priority of the thread creating it, that is, the currently running thread. The method setPriority may be used to change the priority to a new value. The newly created thread is initially marked as being a daemon thread if and only if the thread creating it is currently marked as a daemon thread. The method setDaemon may be used to change whether or not a thread is a daemon.",
      "tagMap": {
        "param": [
          "\u003ccode\u003egroup\u003c/code\u003e - the thread group. If \n\u003ccode\u003enull\u003c/code\u003e and there is a security manager, the group is determined by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#getThreadGroup()\"\u003eSecurityManager.getThreadGroup()\u003c/a\u003e. If there is not a security manager or \n\u003ccode\u003e SecurityManager.getThreadGroup()\u003c/code\u003e returns \n\u003ccode\u003enull\u003c/code\u003e, the group is set to the current thread\u0027s thread group.",
          "\u003ccode\u003etarget\u003c/code\u003e - the object whose \n\u003ccode\u003erun\u003c/code\u003e method is invoked when this thread is started. If \n\u003ccode\u003enull\u003c/code\u003e, this thread\u0027s run method is invoked.",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the new thread"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot create a thread in the specified thread group or cannot override the context class loader methods."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.ThreadGroup",
            "type": "Class"
          },
          "field": {
            "name": "group"
          }
        },
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stackSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group, and has the specified stack size. This constructor is identical to Thread(ThreadGroup,Runnable,String) with the exception of the fact that it allows the thread stack size to be specified. The stack size is the approximate number of bytes of address space that the virtual machine is to allocate for this thread\u0027s stack. The effect of the stackSize parameter, if any, is highly platform dependent. On some platforms, specifying a higher value for the stackSize parameter may allow a thread to achieve greater recursion depth before throwing a StackOverflowError. Similarly, specifying a lower value may allow a greater number of threads to exist concurrently without throwing an OutOfMemoryError (or other internal error). The details of the relationship between the value of the stackSize parameter and the maximum recursion depth and concurrency level are platform-dependent. On some platforms, the value of the stackSize parameter may have no effect whatsoever. The virtual machine is free to treat the stackSize parameter as a suggestion. If the specified value is unreasonably low for the platform, the virtual machine may instead use some platform-specific minimum value; if the specified value is unreasonably high, the virtual machine may instead use some platform-specific maximum. Likewise, the virtual machine is free to round the specified value up or down as it sees fit (or to ignore it completely). Specifying a value of zero for the stackSize parameter will cause this constructor to behave exactly like the Thread(ThreadGroup, Runnable, String) constructor. Due to the platform-dependent nature of the behavior of this constructor, extreme care should be exercised in its use. The thread stack size necessary to perform a given computation will likely vary from one JRE implementation to another. In light of this variation, careful tuning of the stack size parameter may be required, and the tuning may need to be repeated for each JRE implementation on which an application is to run. Implementation note: Java platform implementers are encouraged to document their implementation\u0027s behavior with respect to the stackSize parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003egroup\u003c/code\u003e - the thread group. If \n\u003ccode\u003enull\u003c/code\u003e and there is a security manager, the group is determined by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#getThreadGroup()\"\u003eSecurityManager.getThreadGroup()\u003c/a\u003e. If there is not a security manager or \n\u003ccode\u003e SecurityManager.getThreadGroup()\u003c/code\u003e returns \n\u003ccode\u003enull\u003c/code\u003e, the group is set to the current thread\u0027s thread group.",
          "\u003ccode\u003etarget\u003c/code\u003e - the object whose \n\u003ccode\u003erun\u003c/code\u003e method is invoked when this thread is started. If \n\u003ccode\u003enull\u003c/code\u003e, this thread\u0027s run method is invoked.",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the new thread",
          "\u003ccode\u003estackSize\u003c/code\u003e - the desired stack size for the new thread, or zero to indicate that this parameter is to be ignored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot create a thread in the specified thread group"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.ThreadGroup",
            "type": "Class"
          },
          "field": {
            "name": "group"
          }
        },
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stackSize"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "inheritThreadLocals"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new Thread object so that it has target as its run object, has the specified name as its name, belongs to the thread group referred to by group, has the specified stackSize, and inherits initial values for inheritable thread-local variables if inheritThreadLocals is true. This constructor is identical to Thread(ThreadGroup,Runnable,String,long) with the added ability to suppress, or not, the inheriting of initial values for inheritable thread-local variables from the constructing thread. This allows for finer grain control over inheritable thread-locals. Care must be taken when passing a value of false for inheritThreadLocals, as it may lead to unexpected behavior if the new thread executes code that expects a specific thread-local value to be inherited. Specifying a value of true for the inheritThreadLocals parameter will cause this constructor to behave exactly like the Thread(ThreadGroup, Runnable, String, long) constructor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003egroup\u003c/code\u003e - the thread group. If \n\u003ccode\u003enull\u003c/code\u003e and there is a security manager, the group is determined by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#getThreadGroup()\"\u003eSecurityManager.getThreadGroup()\u003c/a\u003e. If there is not a security manager or \n\u003ccode\u003e SecurityManager.getThreadGroup()\u003c/code\u003e returns \n\u003ccode\u003enull\u003c/code\u003e, the group is set to the current thread\u0027s thread group.",
          "\u003ccode\u003etarget\u003c/code\u003e - the object whose \n\u003ccode\u003erun\u003c/code\u003e method is invoked when this thread is started. If \n\u003ccode\u003enull\u003c/code\u003e, this thread\u0027s run method is invoked.",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the new thread",
          "\u003ccode\u003estackSize\u003c/code\u003e - the desired stack size for the new thread, or zero to indicate that this parameter is to be ignored",
          "\u003ccode\u003einheritThreadLocals\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, inherit initial values for inheritable thread-locals from the constructing thread, otherwise no initial values are inherited"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the current thread cannot create a thread in the specified thread group"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.lang.Thread$UncaughtExceptionHandler",
    "java.lang.Thread$State"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.Thread",
  "comment": "A \n\u003ci\u003ethread\u003c/i\u003e is a thread of execution in a program. The Java Virtual Machine allows an application to have multiple threads of execution running concurrently. \n\u003cp\u003e Every thread has a priority. Threads with higher priority are executed in preference to threads with lower priority. Each thread may or may not also be marked as a daemon. When code running in some thread creates a new \u003ccode\u003eThread\u003c/code\u003e object, the new thread has its priority initially set equal to the priority of the creating thread, and is a daemon thread if and only if the creating thread is a daemon. \u003c/p\u003e\n\u003cp\u003e When a Java Virtual Machine starts up, there is usually a single non-daemon thread (which typically calls the method named \u003ccode\u003emain\u003c/code\u003e of some designated class). The Java Virtual Machine continues to execute threads until either of the following occurs: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe \u003ccode\u003eexit\u003c/code\u003e method of class \u003ccode\u003eRuntime\u003c/code\u003e has been called and the security manager has permitted the exit operation to take place. \u003c/li\u003e\n \u003cli\u003eAll threads that are not daemon threads have died, either by returning from the call to the \u003ccode\u003erun\u003c/code\u003e method or by throwing an exception that propagates beyond the \u003ccode\u003erun\u003c/code\u003e method. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e There are two ways to create a new thread of execution. One is to declare a class to be a subclass of \u003ccode\u003eThread\u003c/code\u003e. This subclass should override the \u003ccode\u003erun\u003c/code\u003e method of class \u003ccode\u003eThread\u003c/code\u003e. An instance of the subclass can then be allocated and started. For example, a thread that computes primes larger than a stated value could be written as follows: \u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     class PrimeThread extends Thread {\n         long minPrime;\n         PrimeThread(long minPrime) {\n             this.minPrime \u003d minPrime;\n         }\n\n         public void run() {\n             // compute primes larger than minPrime\n             \u0026nbsp;.\u0026nbsp;.\u0026nbsp;.\n         }\n     }\n \u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following code would then create a thread and start it running: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     PrimeThread p \u003d new PrimeThread(143);\n     p.start();\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The other way to create a thread is to declare a class that implements the \u003ccode\u003eRunnable\u003c/code\u003e interface. That class then implements the \u003ccode\u003erun\u003c/code\u003e method. An instance of the class can then be allocated, passed as an argument when creating \u003ccode\u003eThread\u003c/code\u003e, and started. The same example in this other style looks like the following: \u003c/p\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     class PrimeRun implements Runnable {\n         long minPrime;\n         PrimeRun(long minPrime) {\n             this.minPrime \u003d minPrime;\n         }\n\n         public void run() {\n             // compute primes larger than minPrime\n             \u0026nbsp;.\u0026nbsp;.\u0026nbsp;.\n         }\n     }\n \u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following code would then create a thread and start it running: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     PrimeRun p \u003d new PrimeRun(143);\n     new Thread(p).start();\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Every thread has a name for identification purposes. More than one thread may have the same name. If a name is not specified when a thread is created, a new name is generated for it. \u003c/p\u003e\n\u003cp\u003e Unless otherwise noted, passing a \u003ccode\u003enull\u003c/code\u003e argument to a constructor or method in this class will cause a \u003ca href\u003d\"NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runnable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eRunnable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runtime.html#exit(int)\"\u003e\u003ccode\u003eRuntime.exit(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#run()\"\u003e\u003ccode\u003erun()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#stop()\"\u003e\u003ccode\u003estop()\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}