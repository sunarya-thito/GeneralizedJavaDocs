{
  "packageName": "java.lang",
  "simpleName": "Version",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Runtime$Version",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parse",
      "comment": "Parses the given string as a valid version string containing a version number followed by pre-release and build information.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - A string to interpret as a version"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the given string cannot be interpreted as a valid version",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the given string is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - If an element of the version number or the build number cannot be represented as an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eInteger\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The Version of the given string"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "feature",
      "comment": "Returns the value of the feature element of the version number.",
      "tagMap": {
        "return": [
          "The value of the feature element"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "interim",
      "comment": "Returns the value of the interim element of the version number, or zero if it is absent.",
      "tagMap": {
        "return": [
          "The value of the interim element, or zero"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "update",
      "comment": "Returns the value of the update element of the version number, or zero if it is absent.",
      "tagMap": {
        "return": [
          "The value of the update element, or zero"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "patch",
      "comment": "Returns the value of the patch element of the version number, or zero if it is absent.",
      "tagMap": {
        "return": [
          "The value of the patch element, or zero"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "major",
      "comment": "Returns the value of the major element of the version number.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "10"
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "The value of the feature element"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "minor",
      "comment": "Returns the value of the minor element of the version number, or zero if it is absent.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "10"
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "The value of the interim element, or zero"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "security",
      "comment": "Returns the value of the security element of the version number, or zero if it is absent.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "10"
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "The value of the update element, or zero"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "version",
      "comment": "Returns an unmodifiable List of the integers represented in the version number. The List always contains at least one element corresponding to the feature version number.",
      "tagMap": {
        "return": [
          "An unmodifiable list of the integers represented in the version number"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "pre",
      "comment": "Returns the optional pre-release information.",
      "tagMap": {
        "return": [
          "The optional pre-release information as a String"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "build",
      "comment": "Returns the build number.",
      "tagMap": {
        "return": [
          "The optional build number."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "optional",
      "comment": "Returns optional additional identifying build information.",
      "tagMap": {
        "return": [
          "Additional build information as a String"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runtime$Version",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this version to another. Each of the components in the version is compared in the following order of precedence: version numbers, pre-release identifiers, build numbers, optional build information. Comparison begins by examining the sequence of version numbers. If one sequence is shorter than another, then the missing elements of the shorter sequence are considered to be less than the corresponding elements of the longer sequence. A version with a pre-release identifier is always considered to be less than a version without one. Pre-release identifiers are compared numerically when they consist only of digits, and lexicographically otherwise. Numeric identifiers are considered to be less than non-numeric identifiers. A version without a build number is always less than one with a build number; otherwise build numbers are compared numerically. The optional build information is compared lexicographically. During this comparison, a version with optional build information is considered to be greater than a version without one.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runtime.Version.html\" title\u003d\"class in java.lang\"\u003eRuntime.Version\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The object to be compared"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the given object is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A negative integer, zero, or a positive integer if this \n\u003ccode\u003eVersion\u003c/code\u003e is less than, equal to, or greater than the given \n\u003ccode\u003eVersion\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runtime$Version",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareToIgnoreOptional",
      "comment": "Compares this version to another disregarding optional build information. Two versions are compared by examining the version string as described in compareTo(Version) with the exception that the optional build information is always ignored. This method provides ordering which is consistent with equalsIgnoreOptional().",
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The object to be compared"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the given object is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A negative integer, zero, or a positive integer if this \n\u003ccode\u003eVersion\u003c/code\u003e is less than, equal to, or greater than the given \n\u003ccode\u003eVersion\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this version.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The version string"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Determines whether this Version is equal to another object. Two Versions are equal if and only if they represent the same version string.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The object to which this \n\u003ccode\u003eVersion\u003c/code\u003e is to be compared"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, the given object is a \n\u003ccode\u003e Version\u003c/code\u003e that is identical to this \n\u003ccode\u003eVersion\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equalsIgnoreOptional",
      "comment": "Determines whether this Version is equal to another disregarding optional build information. Two Versions are equal if and only if they represent the same version string disregarding the optional build information.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The object to which this \n\u003ccode\u003eVersion\u003c/code\u003e is to be compared"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, the given object is a \n\u003ccode\u003e Version\u003c/code\u003e that is identical to this \n\u003ccode\u003eVersion\u003c/code\u003e ignoring the optional build information"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code of this version.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The hashcode of this version"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 25,
  "name": "java.lang.Runtime$Version",
  "comment": "A representation of a version string for an implementation of the Java\u0026nbsp;SE Platform. A version string consists of a version number optionally followed by pre-release and build information. \n\u003ch2\u003e\u003ca id\u003d\"verNum\"\u003eVersion numbers\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e A \u003cem\u003eversion number\u003c/em\u003e, \u003ccode\u003e$VNUM\u003c/code\u003e, is a non-empty sequence of elements separated by period characters (U+002E). An element is either zero, or an unsigned integer numeral without leading zeros. The final element in a version number must not be zero. When an element is incremented, all subsequent elements are removed. The format is: \u003c/p\u003e \n\u003cblockquote\u003e\n \u003cpre\u003e [1-9][0-9]*((\\.0)*\\.[1-9][0-9]*)*\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e The sequence may be of arbitrary length but the first four elements are assigned specific meanings, as follows:\u003c/p\u003e \n\u003cblockquote\u003e\n \u003cpre\u003e $FEATURE.$INTERIM.$UPDATE.$PATCH\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e \u003ca id\u003d\"FEATURE\"\u003e\u003ccode\u003e$FEATURE\u003c/code\u003e\u003c/a\u003e — The feature-release counter, incremented for every feature release regardless of release content. Features may be added in a feature release; they may also be removed, if advance notice was given at least one feature release ahead of time. Incompatible changes may be made when justified. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e \u003ca id\u003d\"INTERIM\"\u003e\u003ccode\u003e$INTERIM\u003c/code\u003e\u003c/a\u003e — The interim-release counter, incremented for non-feature releases that contain compatible bug fixes and enhancements but no incompatible changes, no feature removals, and no changes to standard APIs. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e \u003ca id\u003d\"UPDATE\"\u003e\u003ccode\u003e$UPDATE\u003c/code\u003e\u003c/a\u003e — The update-release counter, incremented for compatible update releases that fix security issues, regressions, and bugs in newer features. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e \u003ca id\u003d\"PATCH\"\u003e\u003ccode\u003e$PATCH\u003c/code\u003e\u003c/a\u003e — The emergency patch-release counter, incremented only when it\u0027s necessary to produce an emergency release to fix a critical issue. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e The fifth and later elements of a version number are free for use by platform implementors, to identify implementor-specific patch releases. \u003c/p\u003e \n\u003cp\u003e A version number never has trailing zero elements. If an element and all those that follow it logically have the value zero then all of them are omitted. \u003c/p\u003e \n\u003cp\u003e The sequence of numerals in a version number is compared to another such sequence in numerical, pointwise fashion; \u003cem\u003ee.g.\u003c/em\u003e, \u003ccode\u003e 10.0.4\u003c/code\u003e is less than \u003ccode\u003e10.1.2\u003c/code\u003e. If one sequence is shorter than another then the missing elements of the shorter sequence are considered to be less than the corresponding elements of the longer sequence; \u003cem\u003ee.g.\u003c/em\u003e, \u003ccode\u003e10.0.2\u003c/code\u003e is less than \u003ccode\u003e10.0.2.1\u003c/code\u003e. \u003c/p\u003e \n\u003ch2\u003e\u003ca id\u003d\"verStr\"\u003eVersion strings\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e A \u003cem\u003eversion string\u003c/em\u003e, \u003ccode\u003e$VSTR\u003c/code\u003e, is a version number \u003ccode\u003e $VNUM\u003c/code\u003e, as described above, optionally followed by pre-release and build information, in one of the following formats: \u003c/p\u003e \n\u003cblockquote\u003e\n \u003cpre\u003e     $VNUM(-$PRE)?\\+$BUILD(-$OPT)?\n     $VNUM-$PRE(-$OPT)?\n     $VNUM(\\+-$OPT)?\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e where: \u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e \u003ca id\u003d\"pre\"\u003e\u003ccode\u003e$PRE\u003c/code\u003e\u003c/a\u003e, matching \u003ccode\u003e([a-zA-Z0-9]+)\u003c/code\u003e — A pre-release identifier. Typically \u003ccode\u003eea\u003c/code\u003e, for a potentially unstable early-access release under active development, or \u003ccode\u003einternal\u003c/code\u003e, for an internal developer build. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e \u003ca id\u003d\"build\"\u003e\u003ccode\u003e$BUILD\u003c/code\u003e\u003c/a\u003e, matching \u003ccode\u003e (0|[1-9][0-9]*)\u003c/code\u003e — The build number, incremented for each promoted build. \u003ccode\u003e$BUILD\u003c/code\u003e is reset to \u003ccode\u003e1\u003c/code\u003e when any portion of \u003ccode\u003e $VNUM\u003c/code\u003e is incremented. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e \u003ca id\u003d\"opt\"\u003e\u003ccode\u003e$OPT\u003c/code\u003e\u003c/a\u003e, matching \u003ccode\u003e([-a-zA-Z0-9.]+)\u003c/code\u003e — Additional build information, if desired. In the case of an \u003ccode\u003einternal\u003c/code\u003e build this will often contain the date and time of the build. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e A version string \u003ccode\u003e10-ea\u003c/code\u003e matches \u003ccode\u003e$VNUM \u003d \"10\"\u003c/code\u003e and \u003ccode\u003e$PRE \u003d \"ea\"\u003c/code\u003e. The version string \u003ccode\u003e10+-ea\u003c/code\u003e matches \u003ccode\u003e$VNUM \u003d \"10\"\u003c/code\u003e and \u003ccode\u003e$OPT \u003d \"ea\"\u003c/code\u003e. \u003c/p\u003e \n\u003cp\u003e When comparing two version strings, the value of \u003ccode\u003e$OPT\u003c/code\u003e, if present, may or may not be significant depending on the chosen comparison method. The comparison methods \u003ca href\u003d\"#compareTo(java.lang.Runtime.Version)\"\u003e\u003ccode\u003ecompareTo()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#compareToIgnoreOptional(java.lang.Runtime.Version)\"\u003e\u003ccode\u003ecompareToIgnoreOptional()\u003c/code\u003e\u003c/a\u003e should be used consistently with the corresponding methods \u003ca href\u003d\"#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#equalsIgnoreOptional(java.lang.Object)\"\u003e\u003ccode\u003eequalsIgnoreOptional()\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e \n\u003cp\u003e A \u003cem\u003eshort version string\u003c/em\u003e, \u003ccode\u003e$SVSTR\u003c/code\u003e, often useful in less formal contexts, is a version number optionally followed by a pre-release identifier:\u003c/p\u003e \n\u003cblockquote\u003e\n \u003cpre\u003e     $VNUM(-$PRE)?\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003eThis is a \u003ca href\u003d\"../../../java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e class; programmers should treat instances that are \u003ca href\u003d\"#equals(java.lang.Object)\"\u003eequal\u003c/a\u003e as interchangeable and should not use instances for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}