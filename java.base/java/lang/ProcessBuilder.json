{
  "packageName": "java.lang",
  "simpleName": "ProcessBuilder",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "command",
      "comment": "Sets this process builder\u0027s operating system program and arguments. This method does not make a copy of the command list. Subsequent updates to the list will be reflected in the state of the process builder. It is not checked whether command corresponds to a valid operating system command.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the list containing the program and its arguments"
        ],
        "return": [
          "this process builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "command"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "command",
      "comment": "Sets this process builder\u0027s operating system program and arguments. This is a convenience method that sets the command to a string list containing the same strings as the command array, in the same order. It is not checked whether command corresponds to a valid operating system command.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - a string array containing the program and its arguments"
        ],
        "return": [
          "this process builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "command",
      "comment": "Returns this process builder\u0027s operating system program and arguments. The returned list is not a copy. Subsequent updates to the list will be reflected in the state of this process builder.",
      "tagMap": {
        "return": [
          "this process builder\u0027s program and its arguments"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "environment",
      "comment": "Returns a string map view of this process builder\u0027s environment. Whenever a process builder is created, the environment is initialized to a copy of the current process environment (see System.getenv()). Subprocesses subsequently started by this object\u0027s start() method will use this map as their environment. The returned object may be modified using ordinary Map operations. These modifications will be visible to subprocesses started via the start() method. Two ProcessBuilder instances always contain independent process environments, so changes to the returned map will never be reflected in any other ProcessBuilder instance or the values returned by System.getenv. If the system does not support environment variables, an empty map is returned. The returned map does not permit null keys or values. Attempting to insert or query the presence of a null key or value will throw a NullPointerException. Attempting to query the presence of a key or value which is not of type String will throw a ClassCastException. The behavior of the returned map is system-dependent. A system may not allow modifications to environment variables or may forbid certain variable names or values. For this reason, attempts to modify the map may fail with UnsupportedOperationException or IllegalArgumentException if the modification is not permitted by the operating system. Since the external format of environment variable names and values is system-dependent, there may not be a one-to-one mapping between them and Java\u0027s Unicode strings. Nevertheless, the map is implemented in such a way that environment variables which are not modified by Java code will have an unmodified native representation in the subprocess. The returned map and its collection views may not obey the general contract of the Object.equals(java.lang.Object) and Object.hashCode() methods. The returned map is typically case-sensitive on all platforms. If a security manager exists, its checkPermission method is called with a RuntimePermission(\"getenv.*\") permission. This may result in a SecurityException being thrown. When passing information to a Java subprocess, system properties are generally preferred over environment variables.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runtime.html#exec(java.lang.String%5B%5D,java.lang.String%5B%5D,java.io.File)\"\u003e\u003ccode\u003eRuntime.exec(String[],String[],java.io.File)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getenv()\"\u003e\u003ccode\u003eSystem.getenv()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003echeckPermission\u003c/code\u003e\u003c/a\u003e method doesn\u0027t allow access to the process environment"
        ],
        "return": [
          "this process builder\u0027s environment"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "directory",
      "comment": "Returns this process builder\u0027s working directory. Subprocesses subsequently started by this object\u0027s start() method will use this as their working directory. The returned value may be null -- this means to use the working directory of the current Java process, usually the directory named by the system property user.dir, as the working directory of the child process.",
      "tagMap": {
        "return": [
          "this process builder\u0027s working directory"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "directory"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "directory",
      "comment": "Sets this process builder\u0027s working directory. Subprocesses subsequently started by this object\u0027s start() method will use this as their working directory. The argument may be null -- this means to use the working directory of the current Java process, usually the directory named by the system property user.dir, as the working directory of the child process.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edirectory\u003c/code\u003e - the new working directory"
        ],
        "return": [
          "this process builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.ProcessBuilder$Redirect",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "redirectInput",
      "comment": "Sets this process builder\u0027s standard input source. Subprocesses subsequently started by this object\u0027s start() method obtain their standard input from this source. If the source is Redirect.PIPE (the initial value), then the standard input of a subprocess can be written to using the output stream returned by Process.getOutputStream(). If the source is set to any other value, then Process.getOutputStream() will return a null output stream.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the new standard input source"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the redirect does not correspond to a valid source of data, that is, has type \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ProcessBuilder.Redirect.Type.html#WRITE\"\u003e\u003ccode\u003eWRITE\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ProcessBuilder.Redirect.Type.html#APPEND\"\u003e\u003ccode\u003eAPPEND\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "this process builder"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.ProcessBuilder$Redirect",
            "type": "Class"
          },
          "field": {
            "name": "destination"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "redirectOutput",
      "comment": "Sets this process builder\u0027s standard output destination. Subprocesses subsequently started by this object\u0027s start() method send their standard output to this destination. If the destination is Redirect.PIPE (the initial value), then the standard output of a subprocess can be read using the input stream returned by Process.getInputStream(). If the destination is set to any other value, then Process.getInputStream() will return a null input stream.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edestination\u003c/code\u003e - the new standard output destination"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the redirect does not correspond to a valid destination of data, that is, has type \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ProcessBuilder.Redirect.Type.html#READ\"\u003e\u003ccode\u003eREAD\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "this process builder"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.ProcessBuilder$Redirect",
            "type": "Class"
          },
          "field": {
            "name": "destination"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "redirectError",
      "comment": "Sets this process builder\u0027s standard error destination. Subprocesses subsequently started by this object\u0027s start() method send their standard error to this destination. If the destination is Redirect.PIPE (the initial value), then the error output of a subprocess can be read using the input stream returned by Process.getErrorStream(). If the destination is set to any other value, then Process.getErrorStream() will return a null input stream. If the redirectErrorStream attribute has been set true, then the redirection set by this method has no effect.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edestination\u003c/code\u003e - the new standard error destination"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the redirect does not correspond to a valid destination of data, that is, has type \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ProcessBuilder.Redirect.Type.html#READ\"\u003e\u003ccode\u003eREAD\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "this process builder"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "redirectInput",
      "comment": "Sets this process builder\u0027s standard input source to a file. This is a convenience method. An invocation of the form redirectInput(file) behaves in exactly the same way as the invocation redirectInput (Redirect.from(file)).",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the new standard input source"
        ],
        "return": [
          "this process builder"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "redirectOutput",
      "comment": "Sets this process builder\u0027s standard output destination to a file. This is a convenience method. An invocation of the form redirectOutput(file) behaves in exactly the same way as the invocation redirectOutput (Redirect.to(file)).",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the new standard output destination"
        ],
        "return": [
          "this process builder"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "redirectError",
      "comment": "Sets this process builder\u0027s standard error destination to a file. This is a convenience method. An invocation of the form redirectError(file) behaves in exactly the same way as the invocation redirectError (Redirect.to(file)).",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the new standard error destination"
        ],
        "return": [
          "this process builder"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder$Redirect",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "redirectInput",
      "comment": "Returns this process builder\u0027s standard input source. Subprocesses subsequently started by this object\u0027s start() method obtain their standard input from this source. The initial value is Redirect.PIPE.",
      "tagMap": {
        "return": [
          "this process builder\u0027s standard input source"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder$Redirect",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "redirectOutput",
      "comment": "Returns this process builder\u0027s standard output destination. Subprocesses subsequently started by this object\u0027s start() method redirect their standard output to this destination. The initial value is Redirect.PIPE.",
      "tagMap": {
        "return": [
          "this process builder\u0027s standard output destination"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder$Redirect",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "redirectError",
      "comment": "Returns this process builder\u0027s standard error destination. Subprocesses subsequently started by this object\u0027s start() method redirect their standard error to this destination. The initial value is Redirect.PIPE.",
      "tagMap": {
        "return": [
          "this process builder\u0027s standard error destination"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "inheritIO",
      "comment": "Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process. This is a convenience method. An invocation of the form  \n pb.inheritIO()\n behaves in exactly the same way as the invocation  \n pb.redirectInput(Redirect.INHERIT)\n   .redirectOutput(Redirect.INHERIT)\n   .redirectError(Redirect.INHERIT)\n This gives behavior equivalent to most operating system command interpreters, or the standard C library function system().",
      "tagMap": {
        "return": [
          "this process builder"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "redirectErrorStream",
      "comment": "Tells whether this process builder merges standard error and standard output. If this property is true, then any error output generated by subprocesses subsequently started by this object\u0027s start() method will be merged with the standard output, so that both can be read using the Process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false.",
      "tagMap": {
        "return": [
          "this process builder\u0027s \n\u003ccode\u003eredirectErrorStream\u003c/code\u003e property"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "redirectErrorStream"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "redirectErrorStream",
      "comment": "Sets this process builder\u0027s redirectErrorStream property. If this property is true, then any error output generated by subprocesses subsequently started by this object\u0027s start() method will be merged with the standard output, so that both can be read using the Process.getInputStream() method. This makes it easier to correlate error messages with the corresponding output. The initial value is false.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eredirectErrorStream\u003c/code\u003e - the new property value"
        ],
        "return": [
          "this process builder"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Process",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "start",
      "comment": "Starts a new process using the attributes of this process builder. The new process will invoke the command and arguments given by command(), in a working directory as given by directory(), with a process environment as given by environment(). This method checks that the command is a valid operating system command. Which commands are valid is system-dependent, but at the very least the command must be a non-empty list of non-null strings. A minimal set of system dependent environment variables may be required to start a process on some operating systems. As a result, the subprocess may inherit additional environment variable settings beyond those in the process builder\u0027s environment(). If there is a security manager, its checkExec method is called with the first component of this object\u0027s command array as its argument. This may result in a SecurityException being thrown. Starting an operating system process is highly system-dependent. Among the many things that can go wrong are: The operating system program file was not found. Access to the program file was denied. The working directory does not exist. Invalid character in command argument, such as NUL. In such cases an exception will be thrown. The exact nature of the exception is system-dependent, but it will always be a subclass of IOException. If the operating system does not support the creation of processes, an UnsupportedOperationException will be thrown. Subsequent modifications to this process builder will not affect the returned Process.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runtime.html#exec(java.lang.String%5B%5D,java.lang.String%5B%5D,java.io.File)\"\u003e\u003ccode\u003eRuntime.exec(String[], String[], java.io.File)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element of the command list is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the command is an empty list (has size \n\u003ccode\u003e0\u003c/code\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and \n\u003cul\u003e \n \u003cli\u003eits \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkExec(java.lang.String)\"\u003e\u003ccode\u003echeckExec\u003c/code\u003e\u003c/a\u003e method doesn\u0027t allow creation of the subprocess, or \u003c/li\u003e\n \u003cli\u003ethe standard input to the subprocess was \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ProcessBuilder.html#redirectInput(java.lang.ProcessBuilder.Redirect)\"\u003eredirected from a file\u003c/a\u003e and the security manager\u0027s \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method denies read access to the file, or \u003c/li\u003e\n \u003cli\u003ethe standard output or standard error of the subprocess was \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ProcessBuilder.html#redirectOutput(java.lang.ProcessBuilder.Redirect)\"\u003eredirected to a file\u003c/a\u003e and the security manager\u0027s \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method denies write access to the file \u003c/li\u003e\n\u003c/ul\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If the operating system does not support the creation of processes.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "a new \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Process.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eProcess\u003c/code\u003e\u003c/a\u003e object for managing the subprocess"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.Process",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.ProcessBuilder",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "builders"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "startPipeline",
      "comment": "Starts a Process for each ProcessBuilder, creating a pipeline of processes linked by their standard output and standard input streams. The attributes of each ProcessBuilder are used to start the respective process except that as each process is started, its standard output is directed to the standard input of the next. The redirects for standard input of the first process and standard output of the last process are initialized using the redirect settings of the respective ProcessBuilder. All other ProcessBuilder redirects should be Redirect.PIPE. All input and output streams between the intermediate processes are not accessible. The standard input of all processes except the first process are null output streams The standard output of all processes except the last process are null input streams. The redirectErrorStream() of each ProcessBuilder applies to the respective process. If set to true, the error stream is written to the same stream as standard output. If starting any of the processes throws an Exception, all processes are forcibly destroyed. The startPipeline method performs the same checks on each ProcessBuilder as does the start() method. Each new process invokes the command and arguments given by the respective process builder\u0027s command(), in a working directory as given by its directory(), with a process environment as given by its environment(). Each process builder\u0027s command is checked to be a valid operating system command. Which commands are valid is system-dependent, but at the very least the command must be a non-empty list of non-null strings. A minimal set of system dependent environment variables may be required to start a process on some operating systems. As a result, the subprocess may inherit additional environment variable settings beyond those in the process builder\u0027s environment(). If there is a security manager, its checkExec method is called with the first component of each process builder\u0027s command array as its argument. This may result in a SecurityException being thrown. Starting an operating system process is highly system-dependent. Among the many things that can go wrong are: The operating system program file was not found. Access to the program file was denied. The working directory does not exist. Invalid character in command argument, such as NUL. In such cases an exception will be thrown. The exact nature of the exception is system-dependent, but it will always be a subclass of IOException. If the operating system does not support the creation of processes, an UnsupportedOperationException will be thrown. Subsequent modifications to any of the specified builders will not affect the returned Process.",
      "tagMap": {
        "apiNote": [
          "For example to count the unique imports for all the files in a file hierarchy on a Unix compatible platform: \n\u003cpre\u003e\u003ccode\u003e\n String directory \u003d \"/home/duke/src\";\n ProcessBuilder[] builders \u003d {\n              new ProcessBuilder(\"find\", directory, \"-type\", \"f\"),\n              new ProcessBuilder(\"xargs\", \"grep\", \"-h\", \"^import \"),\n              new ProcessBuilder(\"awk\", \"{print $2;}\"),\n              new ProcessBuilder(\"sort\", \"-u\")};\n List\u0026lt;Process\u0026gt; processes \u003d ProcessBuilder.startPipeline(\n         Arrays.asList(builders));\n Process last \u003d processes.get(processes.size()-1);\n try (InputStream is \u003d last.getInputStream();\n         Reader isr \u003d new InputStreamReader(is);\n         BufferedReader r \u003d new BufferedReader(isr)) {\n     long count \u003d r.lines().count();\n }\n \u003c/code\u003e\u003c/pre\u003e"
        ],
        "param": [
          "\u003ccode\u003ebuilders\u003c/code\u003e - a List of ProcessBuilders"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - any of the redirects except the standard input of the first builder and the standard output of the last builder are not \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ProcessBuilder.Redirect.html#PIPE\"\u003e\u003ccode\u003eProcessBuilder.Redirect.PIPE\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element of the command list is null or if an element of the ProcessBuilder list is null or the builders argument is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the command is an empty list (has size \n\u003ccode\u003e0\u003c/code\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and \n\u003cul\u003e \n \u003cli\u003eits \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkExec(java.lang.String)\"\u003e\u003ccode\u003echeckExec\u003c/code\u003e\u003c/a\u003e method doesn\u0027t allow creation of the subprocess, or \u003c/li\u003e\n \u003cli\u003ethe standard input to the subprocess was \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ProcessBuilder.html#redirectInput(java.lang.ProcessBuilder.Redirect)\"\u003eredirected from a file\u003c/a\u003e and the security manager\u0027s \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method denies read access to the file, or \u003c/li\u003e\n \u003cli\u003ethe standard output or standard error of the subprocess was \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ProcessBuilder.html#redirectOutput(java.lang.ProcessBuilder.Redirect)\"\u003eredirected to a file\u003c/a\u003e and the security manager\u0027s \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method denies write access to the file \u003c/li\u003e\n\u003c/ul\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If the operating system does not support the creation of processes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u0026lt;Process\u0026gt;\u003c/code\u003ees started from the corresponding ProcessBuilder"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a process builder with the specified operating system program and arguments. This constructor does not make a copy of the command list. Subsequent updates to the list will be reflected in the state of the process builder. It is not checked whether command corresponds to a valid operating system command.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the list containing the program and its arguments"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "command"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a process builder with the specified operating system program and arguments. This is a convenience constructor that sets the process builder\u0027s command to a string list containing the same strings as the command array, in the same order. It is not checked whether command corresponds to a valid operating system command.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - a string array containing the program and its arguments"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.lang.ProcessBuilder$Redirect"
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.ProcessBuilder",
  "comment": "This class is used to create operating system processes. \n\u003cp\u003eEach \u003ccode\u003eProcessBuilder\u003c/code\u003e instance manages a collection of process attributes. The \u003ca href\u003d\"#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e method creates a new \u003ca href\u003d\"Process.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eProcess\u003c/code\u003e\u003c/a\u003e instance with those attributes. The \u003ca href\u003d\"#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e method can be invoked repeatedly from the same instance to create new subprocesses with identical or related attributes. \u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"#startPipeline(java.util.List)\"\u003e\u003ccode\u003estartPipeline\u003c/code\u003e\u003c/a\u003e method can be invoked to create a pipeline of new processes that send the output of each process directly to the next process. Each process has the attributes of its respective ProcessBuilder. \u003c/p\u003e\n\u003cp\u003eEach process builder manages these process attributes: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003ea \u003ci\u003ecommand\u003c/i\u003e, a list of strings which signifies the external program file to be invoked and its arguments, if any. Which string lists represent a valid operating system command is system-dependent. For example, it is common for each conceptual argument to be an element in this list, but there are operating systems where programs are expected to tokenize command line strings themselves - on such a system a Java implementation might require commands to contain exactly two elements. \u003c/li\u003e\n \u003cli\u003ean \u003ci\u003eenvironment\u003c/i\u003e, which is a system-dependent mapping from \u003ci\u003evariables\u003c/i\u003e to \u003ci\u003evalues\u003c/i\u003e. The initial value is a copy of the environment of the current process (see \u003ca href\u003d\"System.html#getenv()\"\u003e\u003ccode\u003eSystem.getenv()\u003c/code\u003e\u003c/a\u003e). \u003c/li\u003e\n \u003cli\u003ea \u003ci\u003eworking directory\u003c/i\u003e. The default value is the current working directory of the current process, usually the directory named by the system property \u003ccode\u003euser.dir\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003e\u003ca id\u003d\"redirect-input\"\u003ea source of \u003ci\u003estandard input\u003c/i\u003e\u003c/a\u003e. By default, the subprocess reads input from a pipe. Java code can access this pipe via the output stream returned by \u003ca href\u003d\"Process.html#getOutputStream()\"\u003e\u003ccode\u003eProcess.getOutputStream()\u003c/code\u003e\u003c/a\u003e. However, standard input may be redirected to another source using \u003ca href\u003d\"#redirectInput(java.lang.ProcessBuilder.Redirect)\"\u003e\u003ccode\u003eredirectInput\u003c/code\u003e\u003c/a\u003e. In this case, \u003ca href\u003d\"Process.html#getOutputStream()\"\u003e\u003ccode\u003eProcess.getOutputStream()\u003c/code\u003e\u003c/a\u003e will return a \u003ci\u003enull output stream\u003c/i\u003e, for which: \n  \u003cul\u003e \n   \u003cli\u003ethe \u003ca href\u003d\"../io/OutputStream.html#write(int)\"\u003e\u003ccode\u003ewrite\u003c/code\u003e\u003c/a\u003e methods always throw \u003ccode\u003eIOException\u003c/code\u003e \u003c/li\u003e\n   \u003cli\u003ethe \u003ca href\u003d\"../io/OutputStream.html#close()\"\u003e\u003ccode\u003eclose\u003c/code\u003e\u003c/a\u003e method does nothing \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca id\u003d\"redirect-output\"\u003ea destination for \u003ci\u003estandard output\u003c/i\u003e and \u003ci\u003estandard error\u003c/i\u003e\u003c/a\u003e. By default, the subprocess writes standard output and standard error to pipes. Java code can access these pipes via the input streams returned by \u003ca href\u003d\"Process.html#getInputStream()\"\u003e\u003ccode\u003eProcess.getInputStream()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"Process.html#getErrorStream()\"\u003e\u003ccode\u003eProcess.getErrorStream()\u003c/code\u003e\u003c/a\u003e. However, standard output and standard error may be redirected to other destinations using \u003ca href\u003d\"#redirectOutput(java.lang.ProcessBuilder.Redirect)\"\u003e\u003ccode\u003eredirectOutput\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#redirectError(java.lang.ProcessBuilder.Redirect)\"\u003e\u003ccode\u003eredirectError\u003c/code\u003e\u003c/a\u003e. In this case, \u003ca href\u003d\"Process.html#getInputStream()\"\u003e\u003ccode\u003eProcess.getInputStream()\u003c/code\u003e\u003c/a\u003e and/or \u003ca href\u003d\"Process.html#getErrorStream()\"\u003e\u003ccode\u003eProcess.getErrorStream()\u003c/code\u003e\u003c/a\u003e will return a \u003ci\u003enull input stream\u003c/i\u003e, for which: \n  \u003cul\u003e \n   \u003cli\u003ethe \u003ca href\u003d\"../io/InputStream.html#read()\"\u003e\u003ccode\u003eread\u003c/code\u003e\u003c/a\u003e methods always return \u003ccode\u003e-1\u003c/code\u003e \u003c/li\u003e\n   \u003cli\u003ethe \u003ca href\u003d\"../io/InputStream.html#available()\"\u003e\u003ccode\u003eavailable\u003c/code\u003e\u003c/a\u003e method always returns \u003ccode\u003e0\u003c/code\u003e \u003c/li\u003e\n   \u003cli\u003ethe \u003ca href\u003d\"../io/InputStream.html#close()\"\u003e\u003ccode\u003eclose\u003c/code\u003e\u003c/a\u003e method does nothing \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n \u003cli\u003ea \u003ci\u003eredirectErrorStream\u003c/i\u003e property. Initially, this property is \u003ccode\u003efalse\u003c/code\u003e, meaning that the standard output and error output of a subprocess are sent to two separate streams, which can be accessed using the \u003ca href\u003d\"Process.html#getInputStream()\"\u003e\u003ccode\u003eProcess.getInputStream()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"Process.html#getErrorStream()\"\u003e\u003ccode\u003eProcess.getErrorStream()\u003c/code\u003e\u003c/a\u003e methods. \u003cp\u003eIf the value is set to \u003ccode\u003etrue\u003c/code\u003e, then: \u003c/p\u003e\n  \u003cul\u003e \n   \u003cli\u003estandard error is merged with the standard output and always sent to the same destination (this makes it easier to correlate error messages with the corresponding output) \u003c/li\u003e\n   \u003cli\u003ethe common destination of standard error and standard output can be redirected using \u003ca href\u003d\"#redirectOutput(java.lang.ProcessBuilder.Redirect)\"\u003e\u003ccode\u003eredirectOutput\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n   \u003cli\u003eany redirection set by the \u003ca href\u003d\"#redirectError(java.lang.ProcessBuilder.Redirect)\"\u003e\u003ccode\u003eredirectError\u003c/code\u003e\u003c/a\u003e method is ignored when creating a subprocess \u003c/li\u003e\n   \u003cli\u003ethe stream returned from \u003ca href\u003d\"Process.html#getErrorStream()\"\u003e\u003ccode\u003eProcess.getErrorStream()\u003c/code\u003e\u003c/a\u003e will always be a \u003ca href\u003d\"#redirect-output\"\u003enull input stream\u003c/a\u003e \u003c/li\u003e\n  \u003c/ul\u003e \u003cp\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eModifying a process builder\u0027s attributes will affect processes subsequently started by that object\u0027s \u003ca href\u003d\"#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e method, but will never affect previously started processes or the Java process itself. \u003c/p\u003e\n\u003cp\u003eMost error checking is performed by the \u003ca href\u003d\"#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e method. It is possible to modify the state of an object so that \u003ca href\u003d\"#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e will fail. For example, setting the command attribute to an empty list will not throw an exception unless \u003ca href\u003d\"#start()\"\u003e\u003ccode\u003estart()\u003c/code\u003e\u003c/a\u003e is invoked. \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote that this class is not synchronized.\u003c/strong\u003e If multiple threads access a \u003ccode\u003eProcessBuilder\u003c/code\u003e instance concurrently, and at least one of the threads modifies one of the attributes structurally, it \u003ci\u003emust\u003c/i\u003e be synchronized externally. \u003c/p\u003e\n\u003cp\u003eStarting a new process which uses the default working directory and environment is easy: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n Process p \u003d new ProcessBuilder(\"myCommand\", \"myArg\").start();\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eHere is an example that starts a process with a modified working directory and environment, and redirects standard output and error to be appended to a log file: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n ProcessBuilder pb \u003d\n   new ProcessBuilder(\"myCommand\", \"myArg1\", \"myArg2\");\n Map\u0026lt;String, String\u0026gt; env \u003d pb.environment();\n env.put(\"VAR1\", \"myValue\");\n env.remove(\"OTHERVAR\");\n env.put(\"VAR2\", env.get(\"VAR1\") + \"suffix\");\n pb.directory(new File(\"myDir\"));\n File log \u003d new File(\"log\");\n pb.redirectErrorStream(true);\n pb.redirectOutput(Redirect.appendTo(log));\n Process p \u003d pb.start();\n assert pb.redirectInput() \u003d\u003d Redirect.PIPE;\n assert pb.redirectOutput().file() \u003d\u003d log;\n assert p.getInputStream().read() \u003d\u003d -1;\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eTo start a process with an explicit set of environment variables, first call \u003ca href\u003d\"../util/Map.html#clear()\"\u003e\u003ccode\u003eMap.clear()\u003c/code\u003e\u003c/a\u003e before adding environment variables. \u003c/p\u003e\n\u003cp\u003e Unless otherwise noted, passing a \u003ccode\u003enull\u003c/code\u003e argument to a constructor or method in this class will cause a \u003ca href\u003d\"NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}