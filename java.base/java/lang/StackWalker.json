{
  "packageName": "java.lang",
  "simpleName": "StackWalker",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.StackWalker",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a StackWalker instance. This StackWalker is configured to skip all hidden frames and no class reference is retained.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eStackWalker\u003c/code\u003e configured to skip all \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.Option.html#SHOW_HIDDEN_FRAMES\"\u003ehidden frames\u003c/a\u003e and no \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.Option.html#RETAIN_CLASS_REFERENCE\"\u003eclass reference\u003c/a\u003e is retained."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StackWalker",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.StackWalker$Option",
            "type": "Class"
          },
          "field": {
            "name": "option"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a StackWalker instance with the given option specifying the stack frame information it can access. If a security manager is present and the given option is Option.RETAIN_CLASS_REFERENCE, it calls its checkPermission method for RuntimePermission(\"getStackWalkerWithClassReference\").",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoption\u003c/code\u003e - \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.Option.html\" title\u003d\"enum class in java.lang\"\u003e\u003ccode\u003estack walking option\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method denies access."
        ],
        "return": [
          "a \n\u003ccode\u003eStackWalker\u003c/code\u003e configured with the given option"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StackWalker",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "java.lang.StackWalker$Option",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "options"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a StackWalker instance with the given options specifying the stack frame information it can access. If the given options is empty, this StackWalker is configured to skip all hidden frames and no class reference is retained. If a security manager is present and the given options contains Option.RETAIN_CLASS_REFERENCE, it calls its checkPermission method for RuntimePermission(\"getStackWalkerWithClassReference\").",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoptions\u003c/code\u003e - \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.Option.html\" title\u003d\"enum class in java.lang\"\u003e\u003ccode\u003estack walking option\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method denies access."
        ],
        "return": [
          "a \n\u003ccode\u003eStackWalker\u003c/code\u003e configured with the given options"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StackWalker",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "java.lang.StackWalker$Option",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "options"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "estimateDepth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a StackWalker instance with the given options specifying the stack frame information it can access. If the given options is empty, this StackWalker is configured to skip all hidden frames and no class reference is retained. If a security manager is present and the given options contains Option.RETAIN_CLASS_REFERENCE, it calls its checkPermission method for RuntimePermission(\"getStackWalkerWithClassReference\"). The estimateDepth specifies the estimate number of stack frames this StackWalker will traverse that the StackWalker could use as a hint for the buffer size.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoptions\u003c/code\u003e - \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.Option.html\" title\u003d\"enum class in java.lang\"\u003e\u003ccode\u003estack walking options\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003eestimateDepth\u003c/code\u003e - Estimate number of stack frames to be traversed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eestimateDepth \u0026lt;\u003d 0\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method denies access."
        ],
        "return": [
          "a \n\u003ccode\u003eStackWalker\u003c/code\u003e configured with the given options"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "java.util.stream.Stream",
                    "parameters": [
                      {
                        "name": "java.lang.StackWalker$StackFrame",
                        "type": "Class"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "function"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "walk",
      "comment": "Applies the given function to the stream of StackFrames for the current thread, traversing from the top frame of the stack, which is the method calling this walk method. The StackFrame stream will be closed when this method returns. When a closed Stream\u003cStackFrame\u003e object is reused, IllegalStateException will be thrown.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of the result of applying the function to the stream of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.StackFrame.html\" title\u003d\"interface in java.lang\"\u003estack frame\u003c/a\u003e."
        ],
        "apiNote": [
          "For example, to find the first 10 calling frames, first skipping those frames whose declaring class is in package \n\u003ccode\u003ecom.foo\u003c/code\u003e: \n\u003cblockquote\u003e \n \u003cpre\u003e\u003ccode\u003e\n List\u0026lt;StackFrame\u0026gt; frames \u003d StackWalker.getInstance().walk(s -\u0026gt;\n     s.dropWhile(f -\u0026gt; f.getClassName().startsWith(\"com.foo.\"))\n      .limit(10)\n      .collect(Collectors.toList()));\n \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003eThis method takes a \u003ccode\u003eFunction\u003c/code\u003e accepting a \u003ccode\u003eStream\u0026lt;StackFrame\u0026gt;\u003c/code\u003e, rather than returning a \u003ccode\u003eStream\u0026lt;StackFrame\u0026gt;\u003c/code\u003e and allowing the caller to directly manipulate the stream. The Java virtual machine is free to reorganize a thread\u0027s control stack, for example, via deoptimization. By taking a \u003ccode\u003eFunction\u003c/code\u003e parameter, this method allows access to stack frames through a stable view of a thread\u0027s control stack. \u003c/p\u003e\n\u003cp\u003eParallel execution is effectively disabled and stream pipeline execution will only occur on the current thread.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003efunction\u003c/code\u003e - a function that takes a stream of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.StackFrame.html\" title\u003d\"interface in java.lang\"\u003estack frames\u003c/a\u003e and returns a result."
        ],
        "implNote": [
          "The implementation stabilizes the stack by anchoring a frame specific to the stack walking and ensures that the stack walking is performed above the anchored frame. When the stream object is closed or being reused, \n\u003ccode\u003eIllegalStateException\u003c/code\u003e will be thrown."
        ],
        "return": [
          "the result of applying the function to the stream of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.StackFrame.html\" title\u003d\"interface in java.lang\"\u003estack frame\u003c/a\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "java.lang.StackWalker$StackFrame",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "forEach",
      "comment": "Performs the given action on each element of StackFrame stream of the current thread, traversing from the top frame of the stack, which is the method calling this forEach method. This method is equivalent to calling walk(s -\u003e { s.forEach(action); return null; });",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - an action to be performed on each \n\u003ccode\u003eStackFrame\u003c/code\u003e of the stack of the current thread"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCallerClass",
      "comment": "Gets the Class object of the caller who invoked the method that invoked getCallerClass. This method filters reflection frames, MethodHandle, and hidden frames regardless of the SHOW_REFLECT_FRAMES and SHOW_HIDDEN_FRAMES options this StackWalker has been configured with. This method should be called when a caller frame is present. If it is called from the bottom most frame on the stack, IllegalCallerException will be thrown. This method throws UnsupportedOperationException if this StackWalker is not configured with the RETAIN_CLASS_REFERENCE option.",
      "tagMap": {
        "apiNote": [
          "For example, \n\u003ccode\u003eUtil::getResourceBundle\u003c/code\u003e loads a resource bundle on behalf of the caller. It invokes \n\u003ccode\u003egetCallerClass\u003c/code\u003e to identify the class whose method called \n\u003ccode\u003eUtil::getResourceBundle\u003c/code\u003e. Then, it obtains the class loader of that class, and uses the class loader to load the resource bundle. The caller class in this example is \n\u003ccode\u003eMyTool\u003c/code\u003e. \n\u003cpre\u003e\u003ccode\u003e\n class Util {\n     private final StackWalker walker \u003d StackWalker.getInstance(Option.RETAIN_CLASS_REFERENCE);\n     public ResourceBundle getResourceBundle(String bundleName) {\n         Class\u0026lt;?\u0026gt; caller \u003d walker.getCallerClass();\n         return ResourceBundle.getBundle(bundleName, Locale.getDefault(), caller.getClassLoader());\n     }\n }\n\n class MyTool {\n     private final Util util \u003d new Util();\n     private void init() {\n         ResourceBundle rb \u003d util.getResourceBundle(\"mybundle\");\n     }\n }\n \u003c/code\u003e\u003c/pre\u003e An equivalent way to find the caller class using the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.html#walk(java.util.function.Function)\"\u003e\u003ccode\u003ewalk\u003c/code\u003e\u003c/a\u003e method is as follows (filtering the reflection frames, \n\u003ccode\u003eMethodHandle\u003c/code\u003e and hidden frames not shown below): \n\u003cpre\u003e\u003ccode\u003e\n     Optional\u0026lt;Class\u0026lt;?\u0026gt;\u0026gt; caller \u003d walker.walk(s -\u0026gt;\n         s.map(StackFrame::getDeclaringClass)\n          .skip(2)\n          .findFirst());\n \u003c/code\u003e\u003c/pre\u003e When the \n\u003ccode\u003egetCallerClass\u003c/code\u003e method is called from a method that is the bottom most frame on the stack, for example, \n\u003ccode\u003estatic public void main\u003c/code\u003e method launched by the \n\u003ccode\u003ejava\u003c/code\u003e launcher, or a method invoked from a JNI attached thread, \n\u003ccode\u003eIllegalCallerException\u003c/code\u003e is thrown."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eStackWalker\u003c/code\u003e is not configured with \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.Option.html#RETAIN_CLASS_REFERENCE\"\u003e\u003ccode\u003eOption.RETAIN_CLASS_REFERENCE\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalCallerException.html\" title\u003d\"class in java.lang\"\u003eIllegalCallerException\u003c/a\u003e\u003c/code\u003e - if there is no caller frame, i.e. when this \n\u003ccode\u003egetCallerClass\u003c/code\u003e method is called from a method which is the last frame on the stack."
        ],
        "return": [
          "\u003ccode\u003eClass\u003c/code\u003e object of the caller\u0027s caller invoking this method."
        ]
      }
    }
  ],
  "innerClasses": [
    "java.lang.StackWalker$StackFrame",
    "java.lang.StackWalker$Option"
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.StackWalker",
  "comment": "A stack walker. \n\u003cp\u003e The \u003ca href\u003d\"#walk(java.util.function.Function)\"\u003e\u003ccode\u003ewalk\u003c/code\u003e\u003c/a\u003e method opens a sequential stream of \u003ca href\u003d\"StackWalker.StackFrame.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eStackFrame\u003c/code\u003e\u003c/a\u003es for the current thread and then applies the given function to walk the \u003ccode\u003eStackFrame\u003c/code\u003e stream. The stream reports stack frame elements in order, from the top most frame that represents the execution point at which the stack was generated to the bottom most frame. The \u003ccode\u003eStackFrame\u003c/code\u003e stream is closed when the \u003ccode\u003ewalk\u003c/code\u003e method returns. If an attempt is made to reuse the closed stream, \u003ccode\u003eIllegalStateException\u003c/code\u003e will be thrown. \u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"StackWalker.Option.html\" title\u003d\"enum class in java.lang\"\u003e\u003cem\u003estack walking options\u003c/em\u003e\u003c/a\u003e of a \u003ccode\u003eStackWalker\u003c/code\u003e determines the information of \u003ca href\u003d\"StackWalker.StackFrame.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eStackFrame\u003c/code\u003e\u003c/a\u003e objects to be returned. By default, stack frames of the reflection API and implementation classes are \u003ca href\u003d\"StackWalker.Option.html#SHOW_HIDDEN_FRAMES\"\u003ehidden\u003c/a\u003e and \u003ccode\u003eStackFrame\u003c/code\u003es have the class name and method name available but not the \u003ca href\u003d\"StackWalker.StackFrame.html#getDeclaringClass()\"\u003e\u003ccode\u003eClass reference\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eStackWalker\u003c/code\u003e is thread-safe. Multiple threads can share a single \u003ccode\u003eStackWalker\u003c/code\u003e object to traverse its own stack. A permission check is performed when a \u003ccode\u003eStackWalker\u003c/code\u003e is created, according to the options it requests. No further permission check is done at stack walking time.\u003c/p\u003e",
  "tagMap": {
    "apiNote": [
      "Examples \n\u003cp\u003e1. To find the first caller filtering a known list of implementation class: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n     StackWalker walker \u003d StackWalker.getInstance(Option.RETAIN_CLASS_REFERENCE);\n     Optional\u0026lt;Class\u0026lt;?\u0026gt;\u0026gt; callerClass \u003d walker.walk(s -\u0026gt;\n         s.map(StackFrame::getDeclaringClass)\n          .filter(interestingClasses::contains)\n          .findFirst());\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e2. To snapshot the top 10 stack frames of the current thread, \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n     List\u0026lt;StackFrame\u0026gt; stack \u003d StackWalker.getInstance().walk(s -\u0026gt;\n         s.limit(10).collect(Collectors.toList()));\n \u003c/code\u003e\u003c/pre\u003e Unless otherwise noted, passing a \n\u003ccode\u003enull\u003c/code\u003e argument to a constructor or method in this \n\u003ccode\u003eStackWalker\u003c/code\u003e class will cause a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown.\n\u003cp\u003e\u003c/p\u003e"
    ],
    "since": [
      "9"
    ]
  }
}