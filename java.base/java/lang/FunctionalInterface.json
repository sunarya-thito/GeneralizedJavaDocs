{
  "packageName": "java.lang",
  "simpleName": "FunctionalInterface",
  "moduleName": "java.base",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.FunctionalInterface",
  "comment": "An informative annotation type used to indicate that an interface type declaration is intended to be a \n\u003ci\u003efunctional interface\u003c/i\u003e as defined by the Java Language Specification. Conceptually, a functional interface has exactly one abstract method. Since \n\u003ca href\u003d\"reflect/Method.html#isDefault()\"\u003edefault methods\u003c/a\u003e have an implementation, they are not abstract. If an interface declares an abstract method overriding one of the public methods of \n\u003ccode\u003ejava.lang.Object\u003c/code\u003e, that also does \n\u003cem\u003enot\u003c/em\u003e count toward the interface\u0027s abstract method count since any implementation of the interface will have an implementation from \n\u003ccode\u003ejava.lang.Object\u003c/code\u003e or elsewhere. \n\u003cp\u003eNote that instances of functional interfaces can be created with lambda expressions, method references, or constructor references. \u003c/p\u003e\n\u003cp\u003eIf a type is annotated with this annotation type, compilers are required to generate an error message unless: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e The type is an interface type and not an annotation type, enum, or class. \u003c/li\u003e\n \u003cli\u003e The annotated type satisfies the requirements of a functional interface. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eHowever, the compiler will treat any interface meeting the definition of a functional interface as a functional interface regardless of whether or not a \u003ccode\u003eFunctionalInterface\u003c/code\u003e annotation is present on the interface declaration.\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.3.2\"\u003e4.3.2 The Class Object\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.8\"\u003e9.8 Functional Interfaces\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.4.3\"\u003e9.4.3 Interface Method Body\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.4.9\"\u003e9.6.4.9 @FunctionalInterface\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}