{
  "packageName": "java.lang.invoke",
  "simpleName": "MethodType",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rtype"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "ptypes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "methodType",
      "comment": "Finds or creates an instance of the given method type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ertype\u003c/code\u003e - the return type",
          "\u003ccode\u003eptypes\u003c/code\u003e - the parameter types"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ertype\u003c/code\u003e or \n\u003ccode\u003eptypes\u003c/code\u003e or any element of \n\u003ccode\u003eptypes\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any element of \n\u003ccode\u003eptypes\u003c/code\u003e is \n\u003ccode\u003evoid.class\u003c/code\u003e"
        ],
        "return": [
          "a method type with the given components"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rtype"
          }
        },
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptypes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "methodType",
      "comment": "Finds or creates a method type with the given components. Convenience method for methodType.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ertype\u003c/code\u003e - the return type",
          "\u003ccode\u003eptypes\u003c/code\u003e - the parameter types"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ertype\u003c/code\u003e or \n\u003ccode\u003eptypes\u003c/code\u003e or any element of \n\u003ccode\u003eptypes\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any element of \n\u003ccode\u003eptypes\u003c/code\u003e is \n\u003ccode\u003evoid.class\u003c/code\u003e"
        ],
        "return": [
          "a method type with the given components"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rtype"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptype0"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptypes"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "methodType",
      "comment": "Finds or creates a method type with the given components. Convenience method for methodType. The leading parameter type is prepended to the remaining array.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ertype\u003c/code\u003e - the return type",
          "\u003ccode\u003eptype0\u003c/code\u003e - the first parameter type",
          "\u003ccode\u003eptypes\u003c/code\u003e - the remaining parameter types"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ertype\u003c/code\u003e or \n\u003ccode\u003eptype0\u003c/code\u003e or \n\u003ccode\u003eptypes\u003c/code\u003e or any element of \n\u003ccode\u003eptypes\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eptype0\u003c/code\u003e or \n\u003ccode\u003eptypes\u003c/code\u003e or any element of \n\u003ccode\u003eptypes\u003c/code\u003e is \n\u003ccode\u003evoid.class\u003c/code\u003e"
        ],
        "return": [
          "a method type with the given components"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rtype"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "methodType",
      "comment": "Finds or creates a method type with the given components. Convenience method for methodType. The resulting method has no parameter types.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ertype\u003c/code\u003e - the return type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ertype\u003c/code\u003e is null"
        ],
        "return": [
          "a method type with the given return value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rtype"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptype0"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "methodType",
      "comment": "Finds or creates a method type with the given components. Convenience method for methodType. The resulting method has the single given parameter type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ertype\u003c/code\u003e - the return type",
          "\u003ccode\u003eptype0\u003c/code\u003e - the parameter type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ertype\u003c/code\u003e or \n\u003ccode\u003eptype0\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eptype0\u003c/code\u003e is \n\u003ccode\u003evoid.class\u003c/code\u003e"
        ],
        "return": [
          "a method type with the given return value and parameter type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "rtype"
          }
        },
        {
          "type": {
            "name": "java.lang.invoke.MethodType",
            "type": "Class"
          },
          "field": {
            "name": "ptypes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "methodType",
      "comment": "Finds or creates a method type with the given components. Convenience method for methodType. The resulting method has the same parameter types as ptypes, and the specified return type.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ertype\u003c/code\u003e - the return type",
          "\u003ccode\u003eptypes\u003c/code\u003e - the method type which supplies the parameter types"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ertype\u003c/code\u003e or \n\u003ccode\u003eptypes\u003c/code\u003e is null"
        ],
        "return": [
          "a method type with the given components"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "objectArgCount"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "finalArray"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "genericMethodType",
      "comment": "Finds or creates a method type whose components are Object with an optional trailing Object[] array. Convenience method for methodType. All parameters and the return type will be Object, except the final array parameter if any, which will be Object[].",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html#genericMethodType(int)\"\u003e\u003ccode\u003egenericMethodType(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eobjectArgCount\u003c/code\u003e - number of parameters (excluding the final array parameter if any)",
          "\u003ccode\u003efinalArray\u003c/code\u003e - whether there will be a trailing array parameter, of type \n\u003ccode\u003eObject[]\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eobjectArgCount\u003c/code\u003e is negative or greater than 255 (or 254, if \n\u003ccode\u003efinalArray\u003c/code\u003e is true)"
        ],
        "return": [
          "a generally applicable method type, for all calls of the given fixed argument count and a collected array of further arguments"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "objectArgCount"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "genericMethodType",
      "comment": "Finds or creates a method type whose components are all Object. Convenience method for methodType. All parameters and the return type will be Object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html#genericMethodType(int,boolean)\"\u003e\u003ccode\u003egenericMethodType(int, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eobjectArgCount\u003c/code\u003e - number of parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eobjectArgCount\u003c/code\u003e is negative or greater than 255"
        ],
        "return": [
          "a generally applicable method type, for all calls of the given argument count"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "num"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "nptype"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "changeParameterType",
      "comment": "Finds or creates a method type with a single different parameter type. Convenience method for methodType.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html#changeParameterType(int,F)\"\u003echangeParameterType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfMethod\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003eClass\u003c/a\u003e\u0026lt;?\u0026gt;,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html\" title\u003d\"class in java.lang.invoke\"\u003eMethodType\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enum\u003c/code\u003e - the index (zero-based) of the parameter type to change",
          "\u003ccode\u003enptype\u003c/code\u003e - a new parameter type to replace the old one with"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enum\u003c/code\u003e is not a valid index into \n\u003ccode\u003eparameterArray()\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enptype\u003c/code\u003e is \n\u003ccode\u003evoid.class\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enptype\u003c/code\u003e is null"
        ],
        "return": [
          "the same type, except with the selected parameter changed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "num"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptypesToInsert"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertParameterTypes",
      "comment": "Finds or creates a method type with additional parameter types. Convenience method for methodType.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html#insertParameterTypes(int,F...)\"\u003einsertParameterTypes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfMethod\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003eClass\u003c/a\u003e\u0026lt;?\u0026gt;,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html\" title\u003d\"class in java.lang.invoke\"\u003eMethodType\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enum\u003c/code\u003e - the position (zero-based) of the inserted parameter type(s)",
          "\u003ccode\u003eptypesToInsert\u003c/code\u003e - zero or more new parameter types to insert into the parameter list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enum\u003c/code\u003e is negative or greater than \n\u003ccode\u003eparameterCount()\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any element of \n\u003ccode\u003eptypesToInsert\u003c/code\u003e is \n\u003ccode\u003evoid.class\u003c/code\u003e or if the resulting method type would have more than 255 parameter slots",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eptypesToInsert\u003c/code\u003e or any of its elements is null"
        ],
        "return": [
          "the same type, except with the selected parameter(s) inserted"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptypesToInsert"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "appendParameterTypes",
      "comment": "Finds or creates a method type with additional parameter types. Convenience method for methodType.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eptypesToInsert\u003c/code\u003e - zero or more new parameter types to insert after the end of the parameter list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any element of \n\u003ccode\u003eptypesToInsert\u003c/code\u003e is \n\u003ccode\u003evoid.class\u003c/code\u003e or if the resulting method type would have more than 255 parameter slots",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eptypesToInsert\u003c/code\u003e or any of its elements is null"
        ],
        "return": [
          "the same type, except with the selected parameter(s) appended"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "num"
          }
        },
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptypesToInsert"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insertParameterTypes",
      "comment": "Finds or creates a method type with additional parameter types. Convenience method for methodType.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enum\u003c/code\u003e - the position (zero-based) of the inserted parameter type(s)",
          "\u003ccode\u003eptypesToInsert\u003c/code\u003e - zero or more new parameter types to insert into the parameter list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enum\u003c/code\u003e is negative or greater than \n\u003ccode\u003eparameterCount()\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any element of \n\u003ccode\u003eptypesToInsert\u003c/code\u003e is \n\u003ccode\u003evoid.class\u003c/code\u003e or if the resulting method type would have more than 255 parameter slots",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eptypesToInsert\u003c/code\u003e or any of its elements is null"
        ],
        "return": [
          "the same type, except with the selected parameter(s) inserted"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.Class",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "ptypesToInsert"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "appendParameterTypes",
      "comment": "Finds or creates a method type with additional parameter types. Convenience method for methodType.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eptypesToInsert\u003c/code\u003e - zero or more new parameter types to insert after the end of the parameter list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any element of \n\u003ccode\u003eptypesToInsert\u003c/code\u003e is \n\u003ccode\u003evoid.class\u003c/code\u003e or if the resulting method type would have more than 255 parameter slots",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eptypesToInsert\u003c/code\u003e or any of its elements is null"
        ],
        "return": [
          "the same type, except with the selected parameter(s) appended"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "end"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "dropParameterTypes",
      "comment": "Finds or creates a method type with some parameter types omitted. Convenience method for methodType.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html#dropParameterTypes(int,int)\"\u003edropParameterTypes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfMethod\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003eClass\u003c/a\u003e\u0026lt;?\u0026gt;,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html\" title\u003d\"class in java.lang.invoke\"\u003eMethodType\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the index (zero-based) of the first parameter type to remove",
          "\u003ccode\u003eend\u003c/code\u003e - the index (greater than \n\u003ccode\u003estart\u003c/code\u003e) of the first parameter type after not to remove"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e is negative or greater than \n\u003ccode\u003eparameterCount()\u003c/code\u003e or if \n\u003ccode\u003eend\u003c/code\u003e is negative or greater than \n\u003ccode\u003eparameterCount()\u003c/code\u003e or if \n\u003ccode\u003estart\u003c/code\u003e is greater than \n\u003ccode\u003eend\u003c/code\u003e"
        ],
        "return": [
          "the same type, except with the selected parameter(s) removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "nrtype"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "changeReturnType",
      "comment": "Finds or creates a method type with a different return type. Convenience method for methodType.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html#changeReturnType(F)\"\u003echangeReturnType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfMethod\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003eClass\u003c/a\u003e\u0026lt;?\u0026gt;,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html\" title\u003d\"class in java.lang.invoke\"\u003eMethodType\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enrtype\u003c/code\u003e - a return parameter type to replace the old one with"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enrtype\u003c/code\u003e is null"
        ],
        "return": [
          "the same type, except with the return type change"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasPrimitives",
      "comment": "Reports if this type contains a primitive argument or return value. The return type void counts as a primitive.",
      "tagMap": {
        "return": [
          "true if any of the types are primitives"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasWrappers",
      "comment": "Reports if this type contains a wrapper argument or return value. Wrappers are types which box primitive values, such as Integer. The reference type java.lang.Void counts as a wrapper, if it occurs as a return type.",
      "tagMap": {
        "return": [
          "true if any of the types are wrappers"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "erase",
      "comment": "Erases all reference types to Object. Convenience method for methodType. All primitive types (including void) will remain unchanged.",
      "tagMap": {
        "return": [
          "a version of the original type with all reference types replaced"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "generic",
      "comment": "Converts all types, both reference and primitive, to Object. Convenience method for genericMethodType. The expression type.wrap().erase() produces the same value as type.generic().",
      "tagMap": {
        "return": [
          "a version of the original type with all types replaced"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "wrap",
      "comment": "Converts all primitive types to their corresponding wrapper types. Convenience method for methodType. All reference types (including wrapper types) will remain unchanged. A void return type is changed to the type java.lang.Void. The expression type.wrap().erase() produces the same value as type.generic().",
      "tagMap": {
        "return": [
          "a version of the original type with all primitive types replaced"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unwrap",
      "comment": "Converts all wrapper types to their corresponding primitive types. Convenience method for methodType. All primitive types (including void) will remain unchanged. A return type of java.lang.Void is changed to void.",
      "tagMap": {
        "return": [
          "a version of the original type with all wrapper types replaced"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "num"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parameterType",
      "comment": "Returns the parameter type at the specified index, within this method type.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html#parameterType(int)\"\u003eparameterType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfMethod\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003eClass\u003c/a\u003e\u0026lt;?\u0026gt;,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html\" title\u003d\"class in java.lang.invoke\"\u003eMethodType\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enum\u003c/code\u003e - the index (zero-based) of the desired parameter type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enum\u003c/code\u003e is not a valid index into \n\u003ccode\u003eparameterArray()\u003c/code\u003e"
        ],
        "return": [
          "the selected parameter type"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parameterCount",
      "comment": "Returns the number of parameter types in this method type.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html#parameterCount()\"\u003eparameterCount\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfMethod\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003eClass\u003c/a\u003e\u0026lt;?\u0026gt;,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html\" title\u003d\"class in java.lang.invoke\"\u003eMethodType\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the number of parameter types"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "returnType",
      "comment": "Returns the return type of this method type.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html#returnType()\"\u003ereturnType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfMethod\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003eClass\u003c/a\u003e\u0026lt;?\u0026gt;,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html\" title\u003d\"class in java.lang.invoke\"\u003eMethodType\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the return type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parameterList",
      "comment": "Presents the parameter types as a list (a convenience method). The list will be immutable.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html#parameterList()\"\u003eparameterList\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfMethod\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003eClass\u003c/a\u003e\u0026lt;?\u0026gt;,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html\" title\u003d\"class in java.lang.invoke\"\u003eMethodType\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the parameter types (as an immutable list)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lastParameterType",
      "comment": "Returns the last parameter type of this method type. If this type has no parameters, the sentinel value void.class is returned instead.",
      "tagMap": {
        "apiNote": [
          "\u003cp\u003e The sentinel value is chosen so that reflective queries can be made directly against the result value. The sentinel value cannot be confused with a real parameter, since \u003ccode\u003evoid\u003c/code\u003e is never acceptable as a parameter type. For variable arity invocation modes, the expression \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#getComponentType()\"\u003e\u003ccode\u003elastParameterType().getComponentType()\u003c/code\u003e\u003c/a\u003e is useful to query the type of the \"varargs\" parameter.\u003c/p\u003e"
        ],
        "return": [
          "the last parameter type if any, else \n\u003ccode\u003evoid.class\u003c/code\u003e"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "parameterArray",
      "comment": "Presents the parameter types as an array (a convenience method). Changes to the array will not result in changes to the type.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html#parameterArray()\"\u003eparameterArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfMethod.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfMethod\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003eClass\u003c/a\u003e\u0026lt;?\u0026gt;,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html\" title\u003d\"class in java.lang.invoke\"\u003eMethodType\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the parameter types (as a fresh copy if necessary)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares the specified object with this type for equality. That is, it returns true if and only if the specified object is also a method type with exactly the same parameters and return type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - object to compare"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is the same as the obj argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code value for this method type. It is defined to be the same as the hashcode of a List whose elements are the return type followed by the parameter types.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#hashCode()\"\u003e\u003ccode\u003eList.hashCode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the hash code value for this method type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of the method type, of the form \"(PT0,PT1...)RT\". The string representation of a method type is a parenthesis enclosed, comma separated list of type names, followed immediately by the return type. Each type is represented by its simple name.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.MethodType",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "java.lang.TypeNotPresentException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "descriptor"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "loader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromMethodDescriptorString",
      "comment": "Finds or creates an instance of a method type, given the spelling of its bytecode descriptor. Convenience method for methodType. Any class or interface name embedded in the descriptor string will be resolved by the given loader (or if it is null, on the system class loader). Note that it is possible to encounter method types which cannot be constructed by this method, because their component types are not all reachable from a common class loader. This method is included for the benefit of applications that must generate bytecodes that process method handles and invokedynamic.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edescriptor\u003c/code\u003e - a bytecode-level type descriptor string \"(T...)T\"",
          "\u003ccode\u003eloader\u003c/code\u003e - the class loader in which to look up the types"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the string is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the string is not well-formed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if a named type cannot be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the security manager is present and \n\u003ccode\u003eloader\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e and the caller does not have the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"getClassLoader\")\u003c/code\u003e"
        ],
        "return": [
          "a method type matching the bytecode-level type descriptor"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toMethodDescriptorString",
      "comment": "Returns a descriptor string for the method type. This method is equivalent to calling MethodType::descriptorString. Note that this is not a strict inverse of fromMethodDescriptorString. Two distinct classes which share a common name but have different class loaders will appear identical when viewed within descriptor strings. This method is included for the benefit of applications that must generate bytecodes that process method handles and invokedynamic. fromMethodDescriptorString, because the latter requires a suitable class loader argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html#descriptor\"\u003eNominal Descriptor for \u003ccode\u003eMethodType\u003c/code\u003e\u003c/a\u003e"
        ],
        "See Java Virtual Machine Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.3.3\"\u003e4.3.3 Method Descriptors\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "the descriptor string for this method type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "descriptorString",
      "comment": "Returns a descriptor string for this method type. If this method type can be described nominally, then the result is a method type descriptor (JVMS 4.3.3). MethodTypeDesc for this method type can be produced by calling MethodTypeDesc::ofDescriptor with the result descriptor string. If this method type cannot be described nominally and the result is a string of the form: \"(\u003cparameter-descriptors\u003e)\u003creturn-descriptor\u003e\" where \u003cparameter-descriptors\u003e is the concatenation of the descriptor string of all of the parameter types and the descriptor string of the return type. No MethodTypeDesc can be produced from the result string.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html#descriptor\"\u003eNominal Descriptor for \u003ccode\u003eMethodType\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.html#descriptorString()\"\u003edescriptorString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor\u003c/a\u003e\u003c/code\u003e"
        ],
        "See Java Virtual Machine Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.3.3\"\u003e4.3.3 Method Descriptors\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "the descriptor string for this method type"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.constant.MethodTypeDesc",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "describeConstable",
      "comment": "Returns a nominal descriptor for this instance, if one can be constructed, or an empty Optional if one cannot be.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodType.html#descriptor\"\u003eNominal Descriptor for \u003ccode\u003eMethodType\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html#describeConstable()\"\u003edescribeConstable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html\" title\u003d\"interface in java.lang.constant\"\u003eConstable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "An \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e containing the resulting nominal descriptor, or an empty \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e if one cannot be constructed."
        ],
        "since": [
          "12"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.invoke.MethodType",
  "comment": "A method type represents the arguments and return type accepted and returned by a method handle, or the arguments and return type passed and expected by a method handle caller. Method types must be properly matched between a method handle and all its callers, and the JVM\u0027s operations enforce this matching at, specifically during calls to \n\u003ca href\u003d\"MethodHandle.html#invokeExact(java.lang.Object...)\"\u003e\u003ccode\u003eMethodHandle.invokeExact\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"MethodHandle.html#invoke(java.lang.Object...)\"\u003e\u003ccode\u003eMethodHandle.invoke\u003c/code\u003e\u003c/a\u003e, and during execution of \n\u003ccode\u003einvokedynamic\u003c/code\u003e instructions. \n\u003cp\u003e The structure is a return type accompanied by any number of parameter types. The types (primitive, \u003ccode\u003evoid\u003c/code\u003e, and reference) are represented by \u003ca href\u003d\"../Class.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClass\u003c/code\u003e\u003c/a\u003e objects. (For ease of exposition, we treat \u003ccode\u003evoid\u003c/code\u003e as if it were a type. In fact, it denotes the absence of a return type.) \u003c/p\u003e\n\u003cp\u003e All instances of \u003ccode\u003eMethodType\u003c/code\u003e are immutable. Two instances are completely interchangeable if they compare equal. Equality depends on pairwise correspondence of the return and parameter types and on nothing else. \u003c/p\u003e\n\u003cp\u003e This type can be created only by factory methods. All factory methods may cache values, though caching is not guaranteed. Some factory methods are static, while others are virtual methods which modify precursor method types, e.g., by changing a selected parameter. \u003c/p\u003e\n\u003cp\u003e Factory methods which operate on groups of parameter types are systematically presented in two versions, so that both Java arrays and Java lists can be used to work with groups of parameter types. The query methods \u003ccode\u003eparameterArray\u003c/code\u003e and \u003ccode\u003eparameterList\u003c/code\u003e also provide a choice between arrays and lists. \u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eMethodType\u003c/code\u003e objects are sometimes derived from bytecode instructions such as \u003ccode\u003einvokedynamic\u003c/code\u003e, specifically from the type descriptor strings associated with the instructions in a class file\u0027s constant pool. \u003c/p\u003e\n\u003cp\u003e Like classes and strings, method types can also be represented directly in a class file\u0027s constant pool as constants. A method type may be loaded by an \u003ccode\u003eldc\u003c/code\u003e instruction which refers to a suitable \u003ccode\u003eCONSTANT_MethodType\u003c/code\u003e constant pool entry. The entry refers to a \u003ccode\u003eCONSTANT_Utf8\u003c/code\u003e spelling for the descriptor string. (For full details on method type constants, see sections \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.4.8\"\u003e4.4.8\u003c/a\u003e and \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-5.html#jls-5.4.3.5\"\u003e5.4.3.5\u003c/a\u003e of the Java Virtual Machine Specification.) \u003c/p\u003e\n\u003cp\u003e When the JVM materializes a \u003ccode\u003eMethodType\u003c/code\u003e from a descriptor string, all classes named in the descriptor must be accessible, and will be loaded. (But the classes need not be initialized, as is the case with a \u003ccode\u003eCONSTANT_Class\u003c/code\u003e.) This loading may occur at any time before the \u003ccode\u003eMethodType\u003c/code\u003e object is first derived. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003e\u003ca id\u003d\"descriptor\"\u003eNominal Descriptors\u003c/a\u003e\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eMethodType\u003c/code\u003e can be described in \u003ca href\u003d\"../constant/MethodTypeDesc.html\" title\u003d\"interface in java.lang.constant\"\u003enominal form\u003c/a\u003e if and only if all of the parameter types and return type can be described with a \u003ca href\u003d\"../Class.html#describeConstable()\"\u003e\u003ccode\u003enominal descriptor\u003c/code\u003e\u003c/a\u003e represented by \u003ca href\u003d\"../constant/ClassDesc.html\" title\u003d\"interface in java.lang.constant\"\u003e\u003ccode\u003eClassDesc\u003c/code\u003e\u003c/a\u003e. If a method type can be described nominally, then: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe method type has a \u003ca href\u003d\"../constant/MethodTypeDesc.html\" title\u003d\"interface in java.lang.constant\"\u003e\u003ccode\u003enominal descriptor\u003c/code\u003e\u003c/a\u003e returned by \u003ca href\u003d\"#describeConstable()\"\u003e\u003ccode\u003eMethodType::describeConstable\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e \n \u003cli\u003eThe descriptor string returned by \u003ca href\u003d\"#descriptorString()\"\u003e\u003ccode\u003eMethodType::descriptorString\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"#toMethodDescriptorString()\"\u003e\u003ccode\u003eMethodType::toMethodDescriptorString\u003c/code\u003e\u003c/a\u003e for the method type is a method descriptor (JVMS \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.3.3\"\u003e4.3.3\u003c/a\u003e).\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If any of the parameter types or return type cannot be described nominally, i.e. \u003ca href\u003d\"../Class.html#describeConstable()\"\u003e\u003ccode\u003eClass::describeConstable\u003c/code\u003e\u003c/a\u003e returns an empty optional for that type, then the method type cannot be described nominally: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe method type has no \u003ca href\u003d\"../constant/MethodTypeDesc.html\" title\u003d\"interface in java.lang.constant\"\u003e\u003ccode\u003enominal descriptor\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#describeConstable()\"\u003e\u003ccode\u003eMethodType::describeConstable\u003c/code\u003e\u003c/a\u003e returns an empty optional.\u003c/li\u003e \n \u003cli\u003eThe descriptor string returned by \u003ca href\u003d\"#descriptorString()\"\u003e\u003ccode\u003eMethodType::descriptorString\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"#toMethodDescriptorString()\"\u003e\u003ccode\u003eMethodType::toMethodDescriptorString\u003c/code\u003e\u003c/a\u003e for the method type is not a type descriptor.\u003c/li\u003e \n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.invoke.MethodType\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.7"
    ]
  }
}