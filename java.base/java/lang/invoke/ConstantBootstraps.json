{
  "packageName": "java.lang.invoke",
  "simpleName": "ConstantBootstraps",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "nullConstant",
      "comment": "Returns a null object reference for the reference type specified by type.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - unused",
          "\u003ccode\u003ename\u003c/code\u003e - unused",
          "\u003ccode\u003etype\u003c/code\u003e - a reference type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is not a reference type"
        ],
        "return": [
          "a \n\u003ccode\u003enull\u003c/code\u003e value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "primitiveClass",
      "comment": "Returns a Class mirror for the primitive type whose type descriptor is specified by name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - unused",
          "\u003ccode\u003ename\u003c/code\u003e - the descriptor (JVMS 4.3) of the desired primitive type",
          "\u003ccode\u003etype\u003c/code\u003e - the required result type (must be \n\u003ccode\u003eClass.class\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the name is not a descriptor for a primitive type or the type is not \n\u003ccode\u003eClass.class\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClass\u003c/code\u003e\u003c/a\u003e mirror"
        ]
      }
    },
    {
      "returnType": {
        "name": "E",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "upperBounds": [
            {
              "name": "java.lang.Enum",
              "parameters": [
                {
                  "name": "E",
                  "type": "Class"
                }
              ],
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "enumConstant",
      "comment": "Returns an enum constant of the type specified by type with the name specified by name.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - The enum type for which a constant value is to be returned"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Enum.html#valueOf(java.lang.Class,java.lang.String)\"\u003e\u003ccode\u003eEnum.valueOf(Class, String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - the lookup context describing the class performing the operation (normally stacked by the JVM)",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the constant to return, which must exactly match an enum constant in the specified type.",
          "\u003ccode\u003etype\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object describing the enum type for which a constant is to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the declaring class or the field is not accessible to the class performing the operation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified enum type has no constant with the specified name, or the specified class object does not represent an enum type"
        ],
        "return": [
          "the enum constant of the specified enum type with the specified name"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "declaringClass",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getStaticFinal",
      "comment": "Returns the value of a static final field.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - the lookup context describing the class performing the operation (normally stacked by the JVM)",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the field",
          "\u003ccode\u003etype\u003c/code\u003e - the type of the field",
          "\u003ccode\u003edeclaringClass\u003c/code\u003e - the class in which the field is declared"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the declaring class or the field is not accessible to the class performing the operation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchFieldError.html\" title\u003d\"class in java.lang\"\u003eNoSuchFieldError\u003c/a\u003e\u003c/code\u003e - if the specified field does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IncompatibleClassChangeError.html\" title\u003d\"class in java.lang\"\u003eIncompatibleClassChangeError\u003c/a\u003e\u003c/code\u003e - if the specified field is not \n\u003ccode\u003efinal\u003c/code\u003e"
        ],
        "return": [
          "the value of the field"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getStaticFinal",
      "comment": "Returns the value of a static final field declared in the class which is the same as the field\u0027s type (or, for primitive-valued fields, declared in the wrapper class.) This is a simplified form of getStaticFinal(MethodHandles.Lookup, String, Class, Class) for the case where a class declares distinguished constant instances of itself.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/ConstantBootstraps.html#getStaticFinal(java.lang.invoke.MethodHandles.Lookup,java.lang.String,java.lang.Class,java.lang.Class)\"\u003e\u003ccode\u003egetStaticFinal(MethodHandles.Lookup, String, Class, Class)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - the lookup context describing the class performing the operation (normally stacked by the JVM)",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the field",
          "\u003ccode\u003etype\u003c/code\u003e - the type of the field"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the declaring class or the field is not accessible to the class performing the operation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchFieldError.html\" title\u003d\"class in java.lang\"\u003eNoSuchFieldError\u003c/a\u003e\u003c/code\u003e - if the specified field does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IncompatibleClassChangeError.html\" title\u003d\"class in java.lang\"\u003eIncompatibleClassChangeError\u003c/a\u003e\u003c/code\u003e - if the specified field is not \n\u003ccode\u003efinal\u003c/code\u003e"
        ],
        "return": [
          "the value of the field"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.Throwable",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandle",
            "type": "Class"
          },
          "name": "handle",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "args",
          "varargs": true
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "invoke",
      "comment": "Returns the result of invoking a method handle with the provided arguments. This method behaves as if the method handle to be invoked is the result of adapting the given method handle, via MethodHandle.asType(java.lang.invoke.MethodType), to adjust the return type to the desired type.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - unused",
          "\u003ccode\u003ename\u003c/code\u003e - unused",
          "\u003ccode\u003etype\u003c/code\u003e - the desired type of the value to be returned, which must be compatible with the return type of the method handle",
          "\u003ccode\u003ehandle\u003c/code\u003e - the method handle to be invoked",
          "\u003ccode\u003eargs\u003c/code\u003e - the arguments to pass to the method handle, as if with \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodHandle.html#invokeWithArguments(java.lang.Object...)\"\u003e\u003ccode\u003eMethodHandle.invokeWithArguments(java.lang.Object...)\u003c/code\u003e\u003c/a\u003e. Each argument may be \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/WrongMethodTypeException.html\" title\u003d\"class in java.lang.invoke\"\u003eWrongMethodTypeException\u003c/a\u003e\u003c/code\u003e - if the handle\u0027s method type cannot be adjusted to take the given number of arguments, or if the handle\u0027s return type cannot be adjusted to the desired type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if an argument or the result produced by invoking the handle cannot be converted by reference casting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html\" title\u003d\"class in java.lang\"\u003eThrowable\u003c/a\u003e\u003c/code\u003e - anything thrown by the method handle invocation"
        ],
        "return": [
          "the result of invoking the method handle"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.VarHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "java.lang.invoke.VarHandle",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "declaringClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fieldType",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fieldVarHandle",
      "comment": "Finds a VarHandle for an instance field.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - the lookup context describing the class performing the operation (normally stacked by the JVM)",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the field",
          "\u003ccode\u003etype\u003c/code\u003e - the required result type (must be \n\u003ccode\u003eClass\u0026lt;VarHandle\u0026gt;\u003c/code\u003e)",
          "\u003ccode\u003edeclaringClass\u003c/code\u003e - the class in which the field is declared",
          "\u003ccode\u003efieldType\u003c/code\u003e - the type of the field"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the declaring class or the field is not accessible to the class performing the operation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchFieldError.html\" title\u003d\"class in java.lang\"\u003eNoSuchFieldError\u003c/a\u003e\u003c/code\u003e - if the specified field does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the type is not \n\u003ccode\u003eVarHandle\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/VarHandle.html\" title\u003d\"class in java.lang.invoke\"\u003e\u003ccode\u003eVarHandle\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.VarHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "java.lang.invoke.VarHandle",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "declaringClass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fieldType",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "staticFieldVarHandle",
      "comment": "Finds a VarHandle for a static field.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - the lookup context describing the class performing the operation (normally stacked by the JVM)",
          "\u003ccode\u003ename\u003c/code\u003e - the name of the field",
          "\u003ccode\u003etype\u003c/code\u003e - the required result type (must be \n\u003ccode\u003eClass\u0026lt;VarHandle\u0026gt;\u003c/code\u003e)",
          "\u003ccode\u003edeclaringClass\u003c/code\u003e - the class in which the field is declared",
          "\u003ccode\u003efieldType\u003c/code\u003e - the type of the field"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the declaring class or the field is not accessible to the class performing the operation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchFieldError.html\" title\u003d\"class in java.lang\"\u003eNoSuchFieldError\u003c/a\u003e\u003c/code\u003e - if the specified field does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the type is not \n\u003ccode\u003eVarHandle\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/VarHandle.html\" title\u003d\"class in java.lang.invoke\"\u003e\u003ccode\u003eVarHandle\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.invoke.VarHandle",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "java.lang.invoke.VarHandle",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "arrayClass",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "arrayVarHandle",
      "comment": "Finds a VarHandle for an array type.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - the lookup context describing the class performing the operation (normally stacked by the JVM)",
          "\u003ccode\u003ename\u003c/code\u003e - unused",
          "\u003ccode\u003etype\u003c/code\u003e - the required result type (must be \n\u003ccode\u003eClass\u0026lt;VarHandle\u0026gt;\u003c/code\u003e)",
          "\u003ccode\u003earrayClass\u003c/code\u003e - the type of the array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessError.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessError\u003c/a\u003e\u003c/code\u003e - if the component type of the array is not accessible to the class performing the operation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the type is not \n\u003ccode\u003eVarHandle\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/VarHandle.html\" title\u003d\"class in java.lang.invoke\"\u003e\u003ccode\u003eVarHandle\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.ClassCastException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "dstType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "explicitCast",
      "comment": "Applies a conversion from a source type to a destination type. Given a destination type dstType and an input value value, one of the following will happen: If dstType is void.class, a ClassCastException is thrown. If dstType is Object.class, value is returned as is. Otherwise one of the following conversions is applied to value: If dstType is a reference type, a reference cast is applied to value as if by calling dstType.cast(value). If dstType is a primitive type, then, if the runtime type of value is a primitive wrapper type (such as Integer), a Java unboxing conversion is applied 5.1.8 followed by a Java casting conversion 5.5 converting either directly to dstType, or, if dstType is boolean, to int, which is then converted to either true or false depending on whether the least-significant-bit is 1 or 0 respectively. If the runtime type of value is not a primitive wrapper type a ClassCastException is thrown. The result is the same as when using the following code: \n MethodHandle id \u003d MethodHandles.identity(dstType);\n MethodType mt \u003d MethodType.methodType(dstType, Object.class);\n MethodHandle conv \u003d MethodHandles.explicitCastArguments(id, mt);\n return conv.invoke(value);",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - unused",
          "\u003ccode\u003ename\u003c/code\u003e - unused",
          "\u003ccode\u003edstType\u003c/code\u003e - the destination type of the conversion",
          "\u003ccode\u003evalue\u003c/code\u003e - the value to be converted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - when \n\u003ccode\u003edstType\u003c/code\u003e is \n\u003ccode\u003evoid\u003c/code\u003e, when a cast per (1) fails, or when \n\u003ccode\u003edstType\u003c/code\u003e is a primitive type and the runtime type of \n\u003ccode\u003evalue\u003c/code\u003e is not a primitive wrapper type (such as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eInteger\u003c/code\u003e\u003c/a\u003e)"
        ],
        "return": [
          "the converted value"
        ],
        "since": [
          "15"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.invoke.ConstantBootstraps",
  "comment": "Bootstrap methods for dynamically-computed constants. \n\u003cp\u003eThe bootstrap methods in this class will throw a \u003ccode\u003eNullPointerException\u003c/code\u003e for any reference argument that is \u003ccode\u003enull\u003c/code\u003e, unless the argument is specified to be unused or specified to accept a \u003ccode\u003enull\u003c/code\u003e value.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "11"
    ]
  }
}