{
  "packageName": "java.lang",
  "simpleName": "StringBuffer",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "field": {
            "name": "another"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares two StringBuffer instances lexicographically. This method follows the same rules for lexicographical comparison as defined in the CharSequence.compare(this, another) method. For finer-grained, locale-sensitive String comparison, refer to Collator.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringBuffer.html\" title\u003d\"class in java.lang\"\u003eStringBuffer\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eanother\u003c/code\u003e - the \n\u003ccode\u003eStringBuffer\u003c/code\u003e to be compared with"
        ],
        "implNote": [
          "This method synchronizes on \n\u003ccode\u003ethis\u003c/code\u003e, the current object, but not \n\u003ccode\u003eStringBuffer another\u003c/code\u003e with which \n\u003ccode\u003ethis StringBuffer\u003c/code\u003e is compared."
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eStringBuffer\u003c/code\u003e contains the same character sequence as that of the argument \n\u003ccode\u003eStringBuffer\u003c/code\u003e; a negative integer if this \n\u003ccode\u003eStringBuffer\u003c/code\u003e is lexicographically less than the \n\u003ccode\u003eStringBuffer\u003c/code\u003e argument; or a positive integer if this \n\u003ccode\u003eStringBuffer\u003c/code\u003e is lexicographically greater than the \n\u003ccode\u003eStringBuffer\u003c/code\u003e argument."
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "length",
      "comment": "Returns the length (character count).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#length()\"\u003elength\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the length of the sequence of characters currently represented by this object"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "capacity",
      "comment": "Returns the current capacity. The capacity is the number of characters that can be stored (including already written characters), beyond which an allocation will occur.",
      "tagMap": {
        "return": [
          "the current capacity"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "minimumCapacity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ensureCapacity",
      "comment": "Ensures that the capacity is at least equal to the specified minimum. If the current capacity is less than the argument, then a new internal array is allocated with greater capacity. The new capacity is the larger of: The minimumCapacity argument. Twice the old capacity, plus 2. If the minimumCapacity argument is nonpositive, this method takes no action and simply returns. Note that subsequent operations on this object can reduce the actual capacity below that requested here.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eminimumCapacity\u003c/code\u003e - the minimum desired capacity."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "trimToSize",
      "comment": "Attempts to reduce storage used for the character sequence. If the buffer is larger than necessary to hold its current sequence of characters, then it may be resized to become more space efficient. Calling this method may, but is not required to, affect the value returned by a subsequent call to the capacity() method.",
      "tagMap": {
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newLength"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLength",
      "comment": "Sets the length of the character sequence. The sequence is changed to a new character sequence whose length is specified by the argument. For every nonnegative index k less than newLength, the character at index k in the new character sequence is the same as the character at index k in the old sequence if k is less than the length of the old character sequence; otherwise, it is the null character \u0027\\u0000\u0027. In other words, if the newLength argument is less than the current length, the length is changed to the specified length. If the newLength argument is greater than or equal to the current length, sufficient null characters (\u0027\\u0000\u0027) are appended so that length becomes the newLength argument. The newLength argument must be greater than or equal to 0.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringBuffer.html#length()\"\u003e\u003ccode\u003elength()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewLength\u003c/code\u003e - the new length"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003enewLength\u003c/code\u003e argument is negative."
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "charAt",
      "comment": "Returns the char value in this sequence at the specified index. The first char value is at index 0, the next at index 1, and so on, as in array indexing. The index argument must be greater than or equal to 0, and less than the length of this sequence. If the char value specified by the index is a surrogate, the surrogate value is returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringBuffer.html#length()\"\u003e\u003ccode\u003elength()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#charAt(int)\"\u003echarAt\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the desired \n\u003ccode\u003echar\u003c/code\u003e value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is negative or greater than or equal to \n\u003ccode\u003elength()\u003c/code\u003e."
        ],
        "return": [
          "the \n\u003ccode\u003echar\u003c/code\u003e value at the specified index."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "codePointAt",
      "comment": "Returns the character (Unicode code point) at the specified index. The index refers to char values (Unicode code units) and ranges from 0 to CharSequence.length() - 1. If the char value specified at the given index is in the high-surrogate range, the following index is less than the length of this sequence, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index to the \n\u003ccode\u003echar\u003c/code\u003e values"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e argument is negative or not less than the length of this sequence."
        ],
        "return": [
          "the code point value of the character at the \n\u003ccode\u003eindex\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "codePointBefore",
      "comment": "Returns the character (Unicode code point) before the specified index. The index refers to char values (Unicode code units) and ranges from 1 to CharSequence.length(). If the char value at (index - 1) is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the char value at index - 1 is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index following the code point that should be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e argument is less than 1 or greater than the length of this sequence."
        ],
        "return": [
          "the Unicode code point value before the given index."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "beginIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "endIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "codePointCount",
      "comment": "Returns the number of Unicode code points in the specified text range of this sequence. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within this sequence count as one code point each.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the index to the first \n\u003ccode\u003echar\u003c/code\u003e of the text range.",
          "\u003ccode\u003eendIndex\u003c/code\u003e - the index after the last \n\u003ccode\u003echar\u003c/code\u003e of the text range."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ebeginIndex\u003c/code\u003e is negative, or \n\u003ccode\u003eendIndex\u003c/code\u003e is larger than the length of this sequence, or \n\u003ccode\u003ebeginIndex\u003c/code\u003e is larger than \n\u003ccode\u003eendIndex\u003c/code\u003e."
        ],
        "return": [
          "the number of Unicode code points in the specified text range"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "codePointOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "offsetByCodePoints",
      "comment": "Returns the index within this sequence that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index to be offset",
          "\u003ccode\u003ecodePointOffset\u003c/code\u003e - the offset in code points"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is negative or larger then the length of this sequence, or if \n\u003ccode\u003ecodePointOffset\u003c/code\u003e is positive and the subsequence starting with \n\u003ccode\u003eindex\u003c/code\u003e has fewer than \n\u003ccode\u003ecodePointOffset\u003c/code\u003e code points, or if \n\u003ccode\u003ecodePointOffset\u003c/code\u003e is negative and the subsequence before \n\u003ccode\u003eindex\u003c/code\u003e has fewer than the absolute value of \n\u003ccode\u003ecodePointOffset\u003c/code\u003e code points."
        ],
        "return": [
          "the index within this sequence"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "srcBegin"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "srcEnd"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "dst"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dstBegin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChars",
      "comment": "Characters are copied from this sequence into the destination character array dst. The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1. The total number of characters to be copied is srcEnd-srcBegin. The characters are copied into the subarray of dst starting at index dstBegin and ending at index: \n dstbegin + (srcEnd-srcBegin) - 1",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrcBegin\u003c/code\u003e - start copying at this offset.",
          "\u003ccode\u003esrcEnd\u003c/code\u003e - stop copying at this offset.",
          "\u003ccode\u003edst\u003c/code\u003e - the array to copy the data into.",
          "\u003ccode\u003edstBegin\u003c/code\u003e - offset into \n\u003ccode\u003edst\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if any of the following is true: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003esrcBegin\u003c/code\u003e is negative \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003edstBegin\u003c/code\u003e is negative \u003c/li\u003e\n \u003cli\u003ethe \u003ccode\u003esrcBegin\u003c/code\u003e argument is greater than the \u003ccode\u003esrcEnd\u003c/code\u003e argument. \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003esrcEnd\u003c/code\u003e is greater than \u003ccode\u003ethis.length()\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003edstBegin+srcEnd-srcBegin\u003c/code\u003e is greater than \u003ccode\u003edst.length\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "ch"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCharAt",
      "comment": "The character at the specified index is set to ch. This sequence is altered to represent a new character sequence that is identical to the old character sequence, except that it contains the character ch at position index. The index argument must be greater than or equal to 0, and less than the length of this sequence.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringBuffer.html#length()\"\u003e\u003ccode\u003elength()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the character to modify.",
          "\u003ccode\u003ech\u003c/code\u003e - the new character."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is negative or greater than or equal to \n\u003ccode\u003elength()\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the string representation of the Object argument. The overall effect is exactly as if the argument were converted to a string by the method String.valueOf(Object), and the characters of that string were then appended to this character sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the specified string to this character sequence. The characters of the String argument are appended, in order, increasing the length of this sequence by the length of the argument. If str is null, then the four characters \"null\" are appended. Let n be the length of this character sequence just prior to execution of the append method. Then the character at index k in the new character sequence is equal to the character at index k in the old character sequence, if k is less than n; otherwise, it is equal to the character at index k-n in the argument str.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - a string."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "field": {
            "name": "sb"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the specified StringBuffer to this sequence. The characters of the StringBuffer argument are appended, in order, to the contents of this StringBuffer, increasing the length of this StringBuffer by the length of the argument. If sb is null, then the four characters \"null\" are appended to this StringBuffer. Let n be the length of the old character sequence, the one contained in the StringBuffer just prior to execution of the append method. Then the character at index k in the new character sequence is equal to the character at index k in the old character sequence, if k is less than n; otherwise, it is equal to the character at index k-n in the argument sb. This method synchronizes on this, the destination object, but does not synchronize on the source (sb).",
      "tagMap": {
        "param": [
          "\u003ccode\u003esb\u003c/code\u003e - the \n\u003ccode\u003eStringBuffer\u003c/code\u003e to append."
        ],
        "return": [
          "a reference to this object."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the specified CharSequence to this sequence. The characters of the CharSequence argument are appended, in order, increasing the length of this sequence by the length of the argument. The result of this method is exactly the same as if it were an invocation of this.append(s, 0, s.length()); This method synchronizes on this, the destination object, but does not synchronize on the source (s). If s is null, then the four characters \"null\" are appended.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html#append(java.lang.CharSequence)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html\" title\u003d\"interface in java.lang\"\u003eAppendable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eCharSequence\u003c/code\u003e to append."
        ],
        "return": [
          "a reference to this object."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "end"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends a subsequence of the specified CharSequence to this sequence. Characters of the argument s, starting at index start, are appended, in order, to the contents of this sequence up to the (exclusive) index end. The length of this sequence is increased by the value of end - start. Let n be the length of this character sequence just prior to execution of the append method. Then the character at index k in this character sequence becomes equal to the character at index k in this sequence, if k is less than n; otherwise, it is equal to the character at index k+start-n in the argument s. If s is null, then this method appends characters as if the s parameter was a sequence containing the four characters \"null\".",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html#append(java.lang.CharSequence,int,int)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html\" title\u003d\"interface in java.lang\"\u003eAppendable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the sequence to append.",
          "\u003ccode\u003estart\u003c/code\u003e - the starting index of the subsequence to be appended.",
          "\u003ccode\u003eend\u003c/code\u003e - the end index of the subsequence to be appended."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e is negative, or \n\u003ccode\u003estart\u003c/code\u003e is greater than \n\u003ccode\u003eend\u003c/code\u003e or \n\u003ccode\u003eend\u003c/code\u003e is greater than \n\u003ccode\u003es.length()\u003c/code\u003e"
        ],
        "return": [
          "a reference to this object."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the string representation of the char array argument to this sequence. The characters of the array argument are appended, in order, to the contents of this sequence. The length of this sequence increases by the length of the argument. The overall effect is exactly as if the argument were converted to a string by the method String.valueOf(char[]), and the characters of that string were then appended to this character sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the characters to be appended."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the string representation of a subarray of the char array argument to this sequence. Characters of the char array str, starting at index offset, are appended, in order, to the contents of this sequence. The length of this sequence increases by the value of len. The overall effect is exactly as if the arguments were converted to a string by the method String.valueOf(char[],int,int), and the characters of that string were then appended to this character sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the characters to be appended.",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index of the first \n\u003ccode\u003echar\u003c/code\u003e to append.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of \n\u003ccode\u003echar\u003c/code\u003es to append."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003elen \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003eoffset+len \u0026gt; str.length\u003c/code\u003e"
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the string representation of the boolean argument to the sequence. The overall effect is exactly as if the argument were converted to a string by the method String.valueOf(boolean), and the characters of that string were then appended to this character sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - a \n\u003ccode\u003eboolean\u003c/code\u003e."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the string representation of the char argument to this sequence. The argument is appended to the contents of this sequence. The length of this sequence increases by 1. The overall effect is exactly as if the argument were converted to a string by the method String.valueOf(char), and the character in that string were then appended to this character sequence.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html#append(char)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html\" title\u003d\"interface in java.lang\"\u003eAppendable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a \n\u003ccode\u003echar\u003c/code\u003e."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the string representation of the int argument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method String.valueOf(int), and the characters of that string were then appended to this character sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "codePoint"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "appendCodePoint",
      "comment": "Appends the string representation of the codePoint argument to this sequence. The argument is appended to the contents of this sequence. The length of this sequence increases by Character.charCount(codePoint). The overall effect is exactly as if the argument were converted to a char array by the method Character.toChars(int) and the character in that array were then appended to this character sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - a Unicode code point"
        ],
        "return": [
          "a reference to this object."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "lng"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the string representation of the long argument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method String.valueOf(long), and the characters of that string were then appended to this character sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elng\u003c/code\u003e - a \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the string representation of the float argument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method String.valueOf(float), and the characters of that string were then appended to this character sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a \n\u003ccode\u003efloat\u003c/code\u003e."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the string representation of the double argument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method String.valueOf(double), and the characters of that string were then appended to this character sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - a \n\u003ccode\u003edouble\u003c/code\u003e."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "end"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "delete",
      "comment": "Removes the characters in a substring of this sequence. The substring begins at the specified start and extends to the character at index end - 1 or to the end of the sequence if no such character exists. If start is equal to end, no changes are made.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - The beginning index, inclusive.",
          "\u003ccode\u003eend\u003c/code\u003e - The ending index, exclusive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e is negative, greater than \n\u003ccode\u003elength()\u003c/code\u003e, or greater than \n\u003ccode\u003eend\u003c/code\u003e."
        ],
        "return": [
          "This object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deleteCharAt",
      "comment": "Removes the char at the specified position in this sequence. This sequence is shortened by one char. Note: If the character at the given index is a supplementary character, this method does not remove the entire character. If correct handling of supplementary characters is required, determine the number of chars to remove by calling Character.charCount(thisSequence.codePointAt(index)), where thisSequence is this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - Index of \n\u003ccode\u003echar\u003c/code\u003e to remove"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e is negative or greater than or equal to \n\u003ccode\u003elength()\u003c/code\u003e."
        ],
        "return": [
          "This object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "end"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Replaces the characters in a substring of this sequence with characters in the specified String. The substring begins at the specified start and extends to the character at index end - 1 or to the end of the sequence if no such character exists. First the characters in the substring are removed and then the specified String is inserted at start. (This sequence will be lengthened to accommodate the specified String if necessary.)",
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - The beginning index, inclusive.",
          "\u003ccode\u003eend\u003c/code\u003e - The ending index, exclusive.",
          "\u003ccode\u003estr\u003c/code\u003e - String that will replace previous contents."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e is negative, greater than \n\u003ccode\u003elength()\u003c/code\u003e, or greater than \n\u003ccode\u003eend\u003c/code\u003e."
        ],
        "return": [
          "This object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "substring",
      "comment": "Returns a new String that contains a subsequence of characters currently contained in this character sequence. The substring begins at the specified index and extends to the end of this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - The beginning index, inclusive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e is less than zero, or greater than the length of this object."
        ],
        "return": [
          "The new string."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.CharSequence",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "end"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subSequence",
      "comment": "Returns a new character sequence that is a subsequence of this sequence. An invocation of this method of the form \n sb.subSequence(begin, end) behaves in exactly the same way as the invocation \n sb.substring(begin, end) This method is provided so that this class can implement the CharSequence interface.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#subSequence(int,int)\"\u003esubSequence\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start index, inclusive.",
          "\u003ccode\u003eend\u003c/code\u003e - the end index, exclusive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e or \n\u003ccode\u003eend\u003c/code\u003e are negative, if \n\u003ccode\u003eend\u003c/code\u003e is greater than \n\u003ccode\u003elength()\u003c/code\u003e, or if \n\u003ccode\u003estart\u003c/code\u003e is greater than \n\u003ccode\u003eend\u003c/code\u003e"
        ],
        "return": [
          "the specified subsequence."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "end"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "substring",
      "comment": "Returns a new String that contains a subsequence of characters currently contained in this sequence. The substring begins at the specified start and extends to the character at index end - 1.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - The beginning index, inclusive.",
          "\u003ccode\u003eend\u003c/code\u003e - The ending index, exclusive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e or \n\u003ccode\u003eend\u003c/code\u003e are negative or greater than \n\u003ccode\u003elength()\u003c/code\u003e, or \n\u003ccode\u003estart\u003c/code\u003e is greater than \n\u003ccode\u003eend\u003c/code\u003e."
        ],
        "return": [
          "The new string."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts the string representation of a subarray of the str array argument into this sequence. The subarray begins at the specified offset and extends len chars. The characters of the subarray are inserted into this sequence at the position indicated by index. The length of this sequence increases by len chars.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - position at which to insert subarray.",
          "\u003ccode\u003estr\u003c/code\u003e - A \n\u003ccode\u003echar\u003c/code\u003e array.",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index of the first \n\u003ccode\u003echar\u003c/code\u003e in subarray to be inserted.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of \n\u003ccode\u003echar\u003c/code\u003es in the subarray to be inserted."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is negative or greater than \n\u003ccode\u003elength()\u003c/code\u003e, or \n\u003ccode\u003eoffset\u003c/code\u003e or \n\u003ccode\u003elen\u003c/code\u003e are negative, or \n\u003ccode\u003e(offset+len)\u003c/code\u003e is greater than \n\u003ccode\u003estr.length\u003c/code\u003e."
        ],
        "return": [
          "This object"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts the string representation of the Object argument into this character sequence. The overall effect is exactly as if the second argument were converted to a string by the method String.valueOf(Object), and the characters of that string were then inserted into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset.",
          "\u003ccode\u003eobj\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the offset is invalid."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts the string into this character sequence. The characters of the String argument are inserted, in order, into this sequence at the indicated offset, moving up any characters originally above that position and increasing the length of this sequence by the length of the argument. If str is null, then the four characters \"null\" are inserted into this sequence. The character at index k in the new character sequence is equal to: the character at index k in the old character sequence, if k is less than offset the character at index k-offset in the argument str, if k is not less than offset but is less than offset+str.length() the character at index k-str.length() in the old character sequence, if k is not less than offset+str.length() The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset.",
          "\u003ccode\u003estr\u003c/code\u003e - a string."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the offset is invalid."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts the string representation of the char array argument into this sequence. The characters of the array argument are inserted into the contents of this sequence at the position indicated by offset. The length of this sequence increases by the length of the argument. The overall effect is exactly as if the second argument were converted to a string by the method String.valueOf(char[]), and the characters of that string were then inserted into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset.",
          "\u003ccode\u003estr\u003c/code\u003e - a character array."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the offset is invalid."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dstOffset"
          }
        },
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts the specified CharSequence into this sequence. The characters of the CharSequence argument are inserted, in order, into this sequence at the indicated offset, moving up any characters originally above that position and increasing the length of this sequence by the length of the argument s. The result of this method is exactly the same as if it were an invocation of this object\u0027s insert(dstOffset, s, 0, s.length()) method. If s is null, then the four characters \"null\" are inserted into this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edstOffset\u003c/code\u003e - the offset.",
          "\u003ccode\u003es\u003c/code\u003e - the sequence to be inserted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the offset is invalid."
        ],
        "return": [
          "a reference to this object."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dstOffset"
          }
        },
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "end"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts a subsequence of the specified CharSequence into this sequence. The subsequence of the argument s specified by start and end are inserted, in order, into this sequence at the specified destination offset, moving up any characters originally above that position. The length of this sequence is increased by end - start. The character at index k in this sequence becomes equal to: the character at index k in this sequence, if k is less than dstOffset the character at index k+start-dstOffset in the argument s, if k is greater than or equal to dstOffset but is less than dstOffset+end-start the character at index k-(end-start) in this sequence, if k is greater than or equal to dstOffset+end-start The dstOffset argument must be greater than or equal to 0, and less than or equal to the length of this sequence. The start argument must be nonnegative, and not greater than end. The end argument must be greater than or equal to start, and less than or equal to the length of s. If s is null, then this method inserts characters as if the s parameter was a sequence containing the four characters \"null\".",
      "tagMap": {
        "param": [
          "\u003ccode\u003edstOffset\u003c/code\u003e - the offset in this sequence.",
          "\u003ccode\u003es\u003c/code\u003e - the sequence to be inserted.",
          "\u003ccode\u003estart\u003c/code\u003e - the starting index of the subsequence to be inserted.",
          "\u003ccode\u003eend\u003c/code\u003e - the end index of the subsequence to be inserted."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edstOffset\u003c/code\u003e is negative or greater than \n\u003ccode\u003ethis.length()\u003c/code\u003e, or \n\u003ccode\u003estart\u003c/code\u003e or \n\u003ccode\u003eend\u003c/code\u003e are negative, or \n\u003ccode\u003estart\u003c/code\u003e is greater than \n\u003ccode\u003eend\u003c/code\u003e or \n\u003ccode\u003eend\u003c/code\u003e is greater than \n\u003ccode\u003es.length()\u003c/code\u003e"
        ],
        "return": [
          "a reference to this object."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts the string representation of the boolean argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method String.valueOf(boolean), and the characters of that string were then inserted into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset.",
          "\u003ccode\u003eb\u003c/code\u003e - a \n\u003ccode\u003eboolean\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the offset is invalid."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts the string representation of the char argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method String.valueOf(char), and the character in that string were then inserted into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset.",
          "\u003ccode\u003ec\u003c/code\u003e - a \n\u003ccode\u003echar\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the offset is invalid."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts the string representation of the second int argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method String.valueOf(int), and the characters of that string were then inserted into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset.",
          "\u003ccode\u003ei\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the offset is invalid."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts the string representation of the long argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method String.valueOf(long), and the characters of that string were then inserted into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset.",
          "\u003ccode\u003el\u003c/code\u003e - a \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the offset is invalid."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts the string representation of the float argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method String.valueOf(float), and the characters of that string were then inserted into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset.",
          "\u003ccode\u003ef\u003c/code\u003e - a \n\u003ccode\u003efloat\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the offset is invalid."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "insert",
      "comment": "Inserts the string representation of the double argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method String.valueOf(double), and the characters of that string were then inserted into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset.",
          "\u003ccode\u003ed\u003c/code\u003e - a \n\u003ccode\u003edouble\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eStringIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the offset is invalid."
        ],
        "return": [
          "a reference to this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "indexOf",
      "comment": "Returns the index within this string of the first occurrence of the specified substring. The returned index is the smallest value k for which: \n this.toString().startsWith(str, k)\n If no such value of k exists, then -1 is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the substring to search for."
        ],
        "return": [
          "the index of the first occurrence of the specified substring, or \n\u003ccode\u003e-1\u003c/code\u003e if there is no such occurrence."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "indexOf",
      "comment": "Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The returned index is the smallest value k for which: \n     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n                   this.toString().startsWith(str, k)\n If no such value of k exists, then -1 is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the substring to search for.",
          "\u003ccode\u003efromIndex\u003c/code\u003e - the index from which to start the search."
        ],
        "return": [
          "the index of the first occurrence of the specified substring, starting at the specified index, or \n\u003ccode\u003e-1\u003c/code\u003e if there is no such occurrence."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lastIndexOf",
      "comment": "Returns the index within this string of the last occurrence of the specified substring. The last occurrence of the empty string \"\" is considered to occur at the index value this.length(). The returned index is the largest value k for which: \n this.toString().startsWith(str, k)\n If no such value of k exists, then -1 is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the substring to search for."
        ],
        "return": [
          "the index of the last occurrence of the specified substring, or \n\u003ccode\u003e-1\u003c/code\u003e if there is no such occurrence."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lastIndexOf",
      "comment": "Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index. The returned index is the largest value k for which: \n     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n                   this.toString().startsWith(str, k)\n If no such value of k exists, then -1 is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the substring to search for.",
          "\u003ccode\u003efromIndex\u003c/code\u003e - the index to start the search from."
        ],
        "return": [
          "the index of the last occurrence of the specified substring, searching backward from the specified index, or \n\u003ccode\u003e-1\u003c/code\u003e if there is no such occurrence."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StringBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reverse",
      "comment": "Causes this character sequence to be replaced by the reverse of the sequence. If there are any surrogate pairs included in the sequence, these are treated as single characters for the reverse operation. Thus, the order of the high-low surrogates is never reversed. Let n be the character length of this character sequence (not the length in char values) just prior to execution of the reverse method. Then the character at index k in the new character sequence is equal to the character at index n-k-1 in the old character sequence. Note that the reverse operation may result in producing surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation. For example, reversing \"\\uDC00\\uD800\" produces \"\\uD800\\uDC00\" which is a valid surrogate pair.",
      "tagMap": {
        "return": [
          "a reference to this object."
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representing the data in this sequence. A new String object is allocated and initialized to contain the character sequence currently represented by this object. This String is then returned. Subsequent changes to this sequence do not affect the contents of the String.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this sequence of characters."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "chars",
      "comment": "Returns a stream of int zero-extending the char values from this sequence. Any char which maps to a surrogate code point is passed through uninterpreted. The stream binds to this sequence when the terminal stream operation commences (specifically, for mutable sequences the spliterator for the stream is late-binding). If the sequence is modified during that operation then the result is undefined.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#chars()\"\u003echars\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an IntStream of char values from this sequence"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "codePoints",
      "comment": "Returns a stream of code point values from this sequence. Any surrogate pairs encountered in the sequence are combined as if by Character.toCodePoint and the result is passed to the stream. Any other code units, including ordinary BMP characters, unpaired surrogates, and undefined code units, are zero-extended to int values which are then passed to the stream. The stream binds to this sequence when the terminal stream operation commences (specifically, for mutable sequences the spliterator for the stream is late-binding). If the sequence is modified during that operation then the result is undefined.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#codePoints()\"\u003ecodePoints\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an IntStream of Unicode code points from this sequence"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a string buffer with no characters in it and an initial capacity of 16 characters.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "capacity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a string buffer with no characters in it and the specified initial capacity.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecapacity\u003c/code\u003e - the initial capacity."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NegativeArraySizeException.html\" title\u003d\"class in java.lang\"\u003eNegativeArraySizeException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ecapacity\u003c/code\u003e argument is less than \n\u003ccode\u003e0\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a string buffer initialized to the contents of the specified string. The initial capacity of the string buffer is 16 plus the length of the string argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the initial contents of the buffer."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "seq"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a string buffer that contains the same characters as the specified CharSequence. The initial capacity of the string buffer is 16 plus the length of the CharSequence argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eseq\u003c/code\u003e - the sequence to copy."
        ],
        "since": [
          "1.5"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.StringBuffer",
  "comment": "A thread-safe, mutable sequence of characters. A string buffer is like a \n\u003ca href\u003d\"String.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eString\u003c/code\u003e\u003c/a\u003e, but can be modified. At any point in time it contains some particular sequence of characters, but the length and content of the sequence can be changed through certain method calls. \n\u003cp\u003e String buffers are safe for use by multiple threads. The methods are synchronized where necessary so that all the operations on any particular instance behave as if they occur in some serial order that is consistent with the order of the method calls made by each of the individual threads involved. \u003c/p\u003e\n\u003cp\u003e The principal operations on a \u003ccode\u003eStringBuffer\u003c/code\u003e are the \u003ccode\u003eappend\u003c/code\u003e and \u003ccode\u003einsert\u003c/code\u003e methods, which are overloaded so as to accept data of any type. Each effectively converts a given datum to a string and then appends or inserts the characters of that string to the string buffer. The \u003ccode\u003eappend\u003c/code\u003e method always adds these characters at the end of the buffer; the \u003ccode\u003einsert\u003c/code\u003e method adds the characters at a specified point. \u003c/p\u003e\n\u003cp\u003e For example, if \u003ccode\u003ez\u003c/code\u003e refers to a string buffer object whose current contents are \u003ccode\u003e\"start\"\u003c/code\u003e, then the method call \u003ccode\u003ez.append(\"le\")\u003c/code\u003e would cause the string buffer to contain \u003ccode\u003e\"startle\"\u003c/code\u003e, whereas \u003ccode\u003ez.insert(4, \"le\")\u003c/code\u003e would alter the string buffer to contain \u003ccode\u003e\"starlet\"\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e In general, if sb refers to an instance of a \u003ccode\u003eStringBuffer\u003c/code\u003e, then \u003ccode\u003esb.append(x)\u003c/code\u003e has the same effect as \u003ccode\u003esb.insert(sb.length(), x)\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence), this class synchronizes only on the string buffer performing the operation, not on the source. Note that while \u003ccode\u003eStringBuffer\u003c/code\u003e is designed to be safe to use concurrently from multiple threads, if the constructor or the \u003ccode\u003eappend\u003c/code\u003e or \u003ccode\u003einsert\u003c/code\u003e operation is passed a source sequence that is shared across threads, the calling code must ensure that the operation has a consistent and unchanging view of the source sequence for the duration of the operation. This could be satisfied by the caller holding a lock during the operation\u0027s call, by using an immutable source sequence, or by not sharing the source sequence across threads. \u003c/p\u003e\n\u003cp\u003e Every string buffer has a capacity. As long as the length of the character sequence contained in the string buffer does not exceed the capacity, it is not necessary to allocate a new internal buffer array. If the internal buffer overflows, it is automatically made larger. \u003c/p\u003e\n\u003cp\u003e Unless otherwise noted, passing a \u003ccode\u003enull\u003c/code\u003e argument to a constructor or method in this class will cause a \u003ca href\u003d\"NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown. \u003c/p\u003e\n\u003cp\u003e As of release JDK 5, this class has been supplemented with an equivalent class designed for use by a single thread, \u003ca href\u003d\"StringBuilder.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e\u003c/a\u003e. The \u003ccode\u003eStringBuilder\u003c/code\u003e class should generally be used in preference to this one, as it supports all of the same operations but it is faster, as it performs no synchronization.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringBuilder.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eString\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.StringBuffer\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "apiNote": [
      "\u003ccode\u003eStringBuffer\u003c/code\u003e implements \n\u003ccode\u003eComparable\u003c/code\u003e but does not override \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals\u003c/code\u003e\u003c/a\u003e. Thus, the natural ordering of \n\u003ccode\u003eStringBuffer\u003c/code\u003e is inconsistent with equals. Care should be exercised if \n\u003ccode\u003eStringBuffer\u003c/code\u003e objects are used as keys in a \n\u003ccode\u003eSortedMap\u003c/code\u003e or elements in a \n\u003ccode\u003eSortedSet\u003c/code\u003e. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedMap\u003c/code\u003e\u003c/a\u003e, or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedSet\u003c/code\u003e\u003c/a\u003e for more information."
    ],
    "since": [
      "1.0"
    ]
  }
}