{
  "packageName": "java.lang",
  "simpleName": "CharSequence",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "length",
      "comment": "Returns the length of this character sequence. The length is the number of 16-bit chars in the sequence.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of \n\u003ccode\u003echar\u003c/code\u003es in this sequence"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "charAt",
      "comment": "Returns the char value at the specified index. An index ranges from zero to length() - 1. The first char value of the sequence is at index zero, the next at index one, and so on, as for array indexing. If the char value specified by the index is a surrogate, the surrogate value is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the \n\u003ccode\u003echar\u003c/code\u003e value to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e argument is negative or not less than \n\u003ccode\u003elength()\u003c/code\u003e"
        ],
        "return": [
          "the specified \n\u003ccode\u003echar\u003c/code\u003e value"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEmpty",
      "comment": "Returns true if this character sequence is empty.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation returns the result of calling \n\u003ccode\u003elength() \u003d\u003d 0\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#length()\"\u003e\u003ccode\u003elength()\u003c/code\u003e\u003c/a\u003e is \n\u003ccode\u003e0\u003c/code\u003e, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.CharSequence",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subSequence",
      "comment": "Returns a CharSequence that is a subsequence of this sequence. The subsequence starts with the char value at the specified index and ends with the char value at index end - 1. The length (in chars) of the returned sequence is end - start, so if start \u003d\u003d end then an empty sequence is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the start index, inclusive",
          "\u003ccode\u003eend\u003c/code\u003e - the end index, exclusive"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e or \n\u003ccode\u003eend\u003c/code\u003e are negative, if \n\u003ccode\u003eend\u003c/code\u003e is greater than \n\u003ccode\u003elength()\u003c/code\u003e, or if \n\u003ccode\u003estart\u003c/code\u003e is greater than \n\u003ccode\u003eend\u003c/code\u003e"
        ],
        "return": [
          "the specified subsequence"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toString",
      "comment": "Returns a string containing the characters in this sequence in the same order as this sequence. The length of the string will be the length of this sequence.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string consisting of exactly this sequence of characters"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "chars",
      "comment": "Returns a stream of int zero-extending the char values from this sequence. Any char which maps to a surrogate code point is passed through uninterpreted. The stream binds to this sequence when the terminal stream operation commences (specifically, for mutable sequences the spliterator for the stream is late-binding). If the sequence is modified during that operation then the result is undefined.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an IntStream of char values from this sequence"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "codePoints",
      "comment": "Returns a stream of code point values from this sequence. Any surrogate pairs encountered in the sequence are combined as if by Character.toCodePoint and the result is passed to the stream. Any other code units, including ordinary BMP characters, unpaired surrogates, and undefined code units, are zero-extended to int values which are then passed to the stream. The stream binds to this sequence when the terminal stream operation commences (specifically, for mutable sequences the spliterator for the stream is late-binding). If the sequence is modified during that operation then the result is undefined.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an IntStream of Unicode code points from this sequence"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "compare",
      "comment": "Compares two CharSequence instances lexicographically. Returns a negative value, zero, or a positive value if the first sequence is lexicographically less than, equal to, or greater than the second, respectively. The lexicographical ordering of CharSequence is defined as follows. Consider a CharSequence cs of length len to be a sequence of char values, cs[0] to cs[len-1]. Suppose k is the lowest index at which the corresponding char values from each sequence differ. The lexicographic ordering of the sequences is determined by a numeric comparison of the char values cs1[k] with cs2[k]. If there is no such index k, the shorter sequence is considered lexicographically less than the other. If the sequences have the same length, the sequences are considered lexicographically equal.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecs1\u003c/code\u003e - the first \n\u003ccode\u003eCharSequence\u003c/code\u003e",
          "\u003ccode\u003ecs2\u003c/code\u003e - the second \n\u003ccode\u003eCharSequence\u003c/code\u003e"
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if the two \n\u003ccode\u003eCharSequence\u003c/code\u003e are equal; a negative integer if the first \n\u003ccode\u003eCharSequence\u003c/code\u003e is lexicographically less than the second; or a positive integer if the first \n\u003ccode\u003eCharSequence\u003c/code\u003e is lexicographically greater than the second."
        ],
        "since": [
          "11"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.lang.CharSequence",
  "comment": "A \n\u003ccode\u003eCharSequence\u003c/code\u003e is a readable sequence of \n\u003ccode\u003echar\u003c/code\u003e values. This interface provides uniform, read-only access to many different kinds of \n\u003ccode\u003echar\u003c/code\u003e sequences. A \n\u003ccode\u003echar\u003c/code\u003e value represents a character in the \n\u003ci\u003eBasic Multilingual Plane (BMP)\u003c/i\u003e or a surrogate. Refer to \n\u003ca href\u003d\"Character.html#unicode\"\u003eUnicode Character Representation\u003c/a\u003e for details. \n\u003cp\u003e This interface does not refine the general contracts of the \u003ca href\u003d\"Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"Object.html#hashCode()\"\u003e\u003ccode\u003ehashCode\u003c/code\u003e\u003c/a\u003e methods. The result of testing two objects that implement \u003ccode\u003eCharSequence\u003c/code\u003e for equality is therefore, in general, undefined. Each object may be implemented by a different class, and there is no guarantee that each class will be capable of testing its instances for equality with those of the other. It is therefore inappropriate to use arbitrary \u003ccode\u003eCharSequence\u003c/code\u003e instances as elements in a set or as keys in a map. \u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}