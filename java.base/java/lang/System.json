{
  "packageName": "java.lang",
  "simpleName": "System",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "in",
      "comment": "The \"standard\" input stream. This stream is already open and ready to supply input data. Typically this stream corresponds to keyboard input or another input source specified by the host environment or user.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.io.PrintStream",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "out",
      "comment": "The \"standard\" output stream. This stream is already open and ready to accept output data. Typically this stream corresponds to display output or another output destination specified by the host environment or user. For simple stand-alone Java applications, a typical way to write a line of output data is:      System.out.println(data)\n See the println methods in class PrintStream.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#println()\"\u003e\u003ccode\u003ePrintStream.println()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#println(boolean)\"\u003e\u003ccode\u003ePrintStream.println(boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#println(double)\"\u003e\u003ccode\u003ePrintStream.println(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#println(java.lang.Object)\"\u003e\u003ccode\u003ePrintStream.println(char[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#println(double)\"\u003e\u003ccode\u003ePrintStream.println(double)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#println(double)\"\u003e\u003ccode\u003ePrintStream.println(float)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#println(double)\"\u003e\u003ccode\u003ePrintStream.println(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#println(double)\"\u003e\u003ccode\u003ePrintStream.println(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#println(java.lang.Object)\"\u003e\u003ccode\u003ePrintStream.println(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintStream.html#println(java.lang.Object)\"\u003e\u003ccode\u003ePrintStream.println(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.io.PrintStream",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "err",
      "comment": "The \"standard\" error output stream. This stream is already open and ready to accept output data. Typically this stream corresponds to display output or another output destination specified by the host environment or user. By convention, this output stream is used to display error messages or other information that should come to the immediate attention of a user even if the principal output stream, the value of the variable out, has been redirected to a file or other destination that is typically not continuously monitored.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setIn",
      "comment": "Reassigns the \"standard\" input stream. First, if there is a security manager, its checkPermission method is called with a RuntimePermission(\"setIO\") permission to see if it\u0027s ok to reassign the \"standard\" input stream.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - the new standard input stream."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow reassigning of the standard input stream."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.PrintStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setOut",
      "comment": "Reassigns the \"standard\" output stream. First, if there is a security manager, its checkPermission method is called with a RuntimePermission(\"setIO\") permission to see if it\u0027s ok to reassign the \"standard\" output stream.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - the new standard output stream"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow reassigning of the standard output stream."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.PrintStream",
            "type": "Class"
          },
          "field": {
            "name": "err"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setErr",
      "comment": "Reassigns the \"standard\" error output stream. First, if there is a security manager, its checkPermission method is called with a RuntimePermission(\"setIO\") permission to see if it\u0027s ok to reassign the \"standard\" error output stream.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eerr\u003c/code\u003e - the new standard error output stream."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow reassigning of the standard error output stream."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Console",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "console",
      "comment": "Returns the unique Console object associated with the current Java virtual machine, if any.",
      "tagMap": {
        "return": [
          "The system console, if any, otherwise \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.Channel",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "inheritedChannel",
      "comment": "Returns the channel inherited from the entity that created this Java virtual machine. This method returns the channel obtained by invoking the inheritedChannel method of the system-wide default SelectorProvider object. In addition to the network-oriented channels described in inheritedChannel, this method may return other kinds of channels in the future.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and it does not permit access to the channel."
        ],
        "return": [
          "The inherited channel, if any, otherwise \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.SecurityManager",
            "type": "Class"
          },
          "field": {
            "name": "sm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setSecurityManager",
      "comment": "Sets the system-wide security manager. If there is a security manager already installed, this method first calls the security manager\u0027s checkPermission method with a RuntimePermission(\"setSecurityManager\") permission to ensure it\u0027s ok to replace the existing security manager. This may result in throwing a SecurityException. Otherwise, the argument is established as the current security manager. If the argument is null and no security manager has been established, then no action is taken and the method simply returns.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getSecurityManager()\"\u003e\u003ccode\u003egetSecurityManager()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esm\u003c/code\u003e - the security manager or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "implNote": [
          "In the JDK implementation, if the Java virtual machine is started with the system property \n\u003ccode\u003ejava.security.manager\u003c/code\u003e set to the special token \"\n\u003ccode\u003edisallow\u003c/code\u003e\" then the \n\u003ccode\u003esetSecurityManager\u003c/code\u003e method cannot be used to set a security manager."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the security manager has already been set and its \n\u003ccode\u003e checkPermission\u003c/code\u003e method doesn\u0027t allow it to be replaced",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003esm\u003c/code\u003e is non-null and a security manager is not allowed to be set dynamically"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.SecurityManager",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getSecurityManager",
      "comment": "Gets the system-wide security manager.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#setSecurityManager(java.lang.SecurityManager)\"\u003e\u003ccode\u003esetSecurityManager(java.lang.SecurityManager)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "if a security manager has already been established for the current application, then that security manager is returned; otherwise, \n\u003ccode\u003enull\u003c/code\u003e is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "currentTimeMillis",
      "comment": "Returns the current time in milliseconds. Note that while the unit of time of the return value is a millisecond, the granularity of the value depends on the underlying operating system and may be larger. For example, many operating systems measure time in units of tens of milliseconds. See the description of the class Date for a discussion of slight discrepancies that may arise between \"computer time\" and coordinated universal time (UTC).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Date.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "nanoTime",
      "comment": "Returns the current value of the running Java Virtual Machine\u0027s high-resolution time source, in nanoseconds. This method can only be used to measure elapsed time and is not related to any other notion of system or wall-clock time. The value returned represents nanoseconds since some fixed but arbitrary origin time (perhaps in the future, so values may be negative). The same origin is used by all invocations of this method in an instance of a Java virtual machine; other virtual machine instances are likely to use a different origin. This method provides nanosecond precision, but not necessarily nanosecond resolution (that is, how frequently the value changes) - no guarantees are made except that the resolution is at least as good as that of currentTimeMillis(). Differences in successive calls that span greater than approximately 292 years (263 nanoseconds) will not correctly compute elapsed time due to numerical overflow. The values returned by this method become meaningful only when the difference between two such values, obtained within the same instance of a Java virtual machine, is computed. For example, to measure how long some code takes to execute:  \n long startTime \u003d System.nanoTime();\n // ... the code being measured ...\n long elapsedNanos \u003d System.nanoTime() - startTime; To compare elapsed time against a timeout, use  \n if (System.nanoTime() - startTime \u003e\u003d timeoutNanos) ... instead of  \n if (System.nanoTime() \u003e\u003d startTime + timeoutNanos) ... because of the possibility of numerical overflow.",
      "tagMap": {
        "return": [
          "the current value of the running Java Virtual Machine\u0027s high-resolution time source, in nanoseconds"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "srcPos"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "dest"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "destPos"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "arraycopy",
      "comment": "Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array. A subsequence of array components are copied from the source array referenced by src to the destination array referenced by dest. The number of components copied is equal to the length argument. The components at positions srcPos through srcPos+length-1 in the source array are copied into positions destPos through destPos+length-1, respectively, of the destination array. If the src and dest arguments refer to the same array object, then the copying is performed as if the components at positions srcPos through srcPos+length-1 were first copied to a temporary array with length components and then the contents of the temporary array were copied into positions destPos through destPos+length-1 of the destination array. If dest is null, then a NullPointerException is thrown. If src is null, then a NullPointerException is thrown and the destination array is not modified. Otherwise, if any of the following is true, an ArrayStoreException is thrown and the destination is not modified: The src argument refers to an object that is not an array. The dest argument refers to an object that is not an array. The src argument and dest argument refer to arrays whose component types are different primitive types. The src argument refers to an array with a primitive component type and the dest argument refers to an array with a reference component type. The src argument refers to an array with a reference component type and the dest argument refers to an array with a primitive component type. Otherwise, if any of the following is true, an IndexOutOfBoundsException is thrown and the destination is not modified: The srcPos argument is negative. The destPos argument is negative. The length argument is negative. srcPos+length is greater than src.length, the length of the source array. destPos+length is greater than dest.length, the length of the destination array. Otherwise, if any actual component of the source array from position srcPos through srcPos+length-1 cannot be converted to the component type of the destination array by assignment conversion, an ArrayStoreException is thrown. In this case, let k be the smallest nonnegative integer less than length such that src[srcPos+k] cannot be converted to the component type of the destination array; when the exception is thrown, source array components from positions srcPos through srcPos+k-1 will already have been copied to destination array positions destPos through destPos+k-1 and no other positions of the destination array will have been modified. (Because of the restrictions already itemized, this paragraph effectively applies only to the situation where both arrays have component types that are reference types.)",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the source array.",
          "\u003ccode\u003esrcPos\u003c/code\u003e - starting position in the source array.",
          "\u003ccode\u003edest\u003c/code\u003e - the destination array.",
          "\u003ccode\u003edestPos\u003c/code\u003e - starting position in the destination data.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of array elements to be copied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if copying would cause access of data outside array bounds.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayStoreException.html\" title\u003d\"class in java.lang\"\u003eArrayStoreException\u003c/a\u003e\u003c/code\u003e - if an element in the \n\u003ccode\u003esrc\u003c/code\u003e array could not be stored into the \n\u003ccode\u003edest\u003c/code\u003e array because of a type mismatch.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either \n\u003ccode\u003esrc\u003c/code\u003e or \n\u003ccode\u003edest\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "identityHashCode",
      "comment": "Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object\u0027s class overrides hashCode(). The hash code for the null reference is zero.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Objects.html#hashCode(java.lang.Object)\"\u003e\u003ccode\u003eObjects.hashCode(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - object for which the hashCode is to be calculated"
        ],
        "return": [
          "the hashCode"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Properties",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getProperties",
      "comment": "Determines the current system properties. First, if there is a security manager, its checkPropertiesAccess method is called with no arguments. This may result in a security exception. The current set of system properties for use by the getProperty(String) method is returned as a Properties object. If there is no current set of system properties, a set of system properties is first created and initialized. This set of system properties includes a value for each of the following keys unless the description of the associated value indicates that the value is optional. Shows property keys and associated values Key Description of Associated Value java.version Java Runtime Environment version, which may be interpreted as a Runtime.Version java.version.date Java Runtime Environment version date, in ISO-8601 YYYY-MM-DD format, which may be interpreted as a LocalDate java.vendor Java Runtime Environment vendor java.vendor.url Java vendor URL java.vendor.version Java vendor version (optional) java.home Java installation directory java.vm.specification.version Java Virtual Machine specification version, whose value is the feature element of the runtime version java.vm.specification.vendor Java Virtual Machine specification vendor java.vm.specification.name Java Virtual Machine specification name java.vm.version Java Virtual Machine implementation version which may be interpreted as a Runtime.Version java.vm.vendor Java Virtual Machine implementation vendor java.vm.name Java Virtual Machine implementation name java.specification.version Java Runtime Environment specification version, whose value is the feature element of the runtime version java.specification.vendor Java Runtime Environment specification vendor java.specification.name Java Runtime Environment specification name java.class.version Java class format version number java.class.path Java class path (refer to ClassLoader.getSystemClassLoader() for details) java.library.path List of paths to search when loading libraries java.io.tmpdir Default temp file path java.compiler Name of JIT compiler to use os.name Operating system name os.arch Operating system architecture os.version Operating system version file.separator File separator (\"/\" on UNIX) path.separator Path separator (\":\" on UNIX) line.separator Line separator (\"\\n\" on UNIX) user.name User\u0027s account name user.home User\u0027s home directory user.dir User\u0027s current working directory Multiple paths in a system property value are separated by the path separator character of the platform. Note that even if the security manager does not permit the getProperties operation, it may choose to permit the getProperty(String) operation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#setProperties(java.util.Properties)\"\u003e\u003ccode\u003esetProperties(java.util.Properties)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPropertiesAccess()\"\u003e\u003ccode\u003eSecurityManager.checkPropertiesAccess()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Properties.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eProperties\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "\u003cstrong\u003eChanging a standard system property may have unpredictable results unless otherwise specified.\u003c/strong\u003e Property values may be cached during initialization or on first use. Setting a standard property after initialization using \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperties()\"\u003e\u003ccode\u003egetProperties()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#setProperties(java.util.Properties)\"\u003e\u003ccode\u003esetProperties(Properties)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#setProperty(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003esetProperty(String, String)\u003c/code\u003e\u003c/a\u003e, or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#clearProperty(java.lang.String)\"\u003e\u003ccode\u003eclearProperty(String)\u003c/code\u003e\u003c/a\u003e may not have the desired effect."
        ],
        "implNote": [
          "In addition to the standard system properties, the system properties may include the following keys: \n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  Shows property keys and associated values\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"col\"\u003eKey\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eDescription of Associated Value\u003c/th\u003e\n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\u003cspan id\u003d\"jdk.module.path\" class\u003d\"search-tag-result\"\u003ejdk.module.path\u003c/span\u003e\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eThe application module path\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\u003cspan id\u003d\"jdk.module.upgrade.path\" class\u003d\"search-tag-result\"\u003ejdk.module.upgrade.path\u003c/span\u003e\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eThe upgrade module path\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\u003cspan id\u003d\"jdk.module.main\" class\u003d\"search-tag-result\"\u003ejdk.module.main\u003c/span\u003e\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eThe module name of the initial/main module\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\u003cspan id\u003d\"jdk.module.main.class\" class\u003d\"search-tag-result\"\u003ejdk.module.main.class\u003c/span\u003e\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eThe main class name of the initial module\u003c/td\u003e\n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPropertiesAccess\u003c/code\u003e method doesn\u0027t allow access to the system properties."
        ],
        "return": [
          "the system properties"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "lineSeparator",
      "comment": "Returns the system-dependent line separator string. It always returns the same value - the initial value of the system property line.separator. On UNIX systems, it returns \"\\n\"; on Microsoft Windows systems it returns \"\\r\\n\".",
      "tagMap": {
        "return": [
          "the system-dependent line separator string"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Properties",
            "type": "Class"
          },
          "field": {
            "name": "props"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setProperties",
      "comment": "Sets the system properties to the Properties argument. First, if there is a security manager, its checkPropertiesAccess method is called with no arguments. This may result in a security exception. The argument becomes the current set of system properties for use by the getProperty(String) method. If the argument is null, then the current set of system properties is forgotten.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperties()\"\u003e\u003ccode\u003egetProperties()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Properties.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eProperties\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPropertiesAccess()\"\u003e\u003ccode\u003eSecurityManager.checkPropertiesAccess()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "\u003cstrong\u003eChanging a standard system property may have unpredictable results unless otherwise specified\u003c/strong\u003e. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperties()\"\u003egetProperties\u003c/a\u003e for details."
        ],
        "param": [
          "\u003ccode\u003eprops\u003c/code\u003e - the new system properties."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPropertiesAccess\u003c/code\u003e method doesn\u0027t allow access to the system properties."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getProperty",
      "comment": "Gets the system property indicated by the specified key. First, if there is a security manager, its checkPropertyAccess method is called with the key as its argument. This may result in a SecurityException. If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the getProperties method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#setProperty(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003esetProperty(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPropertyAccess(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkPropertyAccess(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperties()\"\u003e\u003ccode\u003egetProperties()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "\u003cstrong\u003eChanging a standard system property may have unpredictable results unless otherwise specified\u003c/strong\u003e. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperties()\"\u003egetProperties\u003c/a\u003e for details."
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the name of the system property."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPropertyAccess\u003c/code\u003e method doesn\u0027t allow access to the specified system property.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is empty."
        ],
        "return": [
          "the string value of the system property, or \n\u003ccode\u003enull\u003c/code\u003e if there is no property with that key."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "def"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getProperty",
      "comment": "Gets the system property indicated by the specified key. First, if there is a security manager, its checkPropertyAccess method is called with the key as its argument. If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the getProperties method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#setProperty(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003esetProperty(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPropertyAccess(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkPropertyAccess(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperties()\"\u003e\u003ccode\u003egetProperties()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the name of the system property.",
          "\u003ccode\u003edef\u003c/code\u003e - a default value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPropertyAccess\u003c/code\u003e method doesn\u0027t allow access to the specified system property.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is empty."
        ],
        "return": [
          "the string value of the system property, or the default value if there is no property with that key."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setProperty",
      "comment": "Sets the system property indicated by the specified key. First, if a security manager exists, its SecurityManager.checkPermission method is called with a PropertyPermission(key, \"write\") permission. This may result in a SecurityException being thrown. If no exception is thrown, the specified property is set to the given value.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003egetProperty(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003egetProperty(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003egetProperty(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/PropertyPermission.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003ePropertyPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "\u003cstrong\u003eChanging a standard system property may have unpredictable results unless otherwise specified\u003c/strong\u003e. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperties()\"\u003egetProperties\u003c/a\u003e for details."
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the name of the system property.",
          "\u003ccode\u003evalue\u003c/code\u003e - the value of the system property."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow setting of the specified property.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e or \n\u003ccode\u003evalue\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is empty."
        ],
        "return": [
          "the previous value of the system property, or \n\u003ccode\u003enull\u003c/code\u003e if it did not have one."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "clearProperty",
      "comment": "Removes the system property indicated by the specified key. First, if a security manager exists, its SecurityManager.checkPermission method is called with a PropertyPermission(key, \"write\") permission. This may result in a SecurityException being thrown. If no exception is thrown, the specified property is removed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003egetProperty(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#setProperty(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003esetProperty(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Properties.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eProperties\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPropertiesAccess()\"\u003e\u003ccode\u003eSecurityManager.checkPropertiesAccess()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "\u003cstrong\u003eChanging a standard system property may have unpredictable results unless otherwise specified\u003c/strong\u003e. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperties()\"\u003egetProperties\u003c/a\u003e method for details."
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the name of the system property to be removed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPropertyAccess\u003c/code\u003e method doesn\u0027t allow access to the specified system property.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is empty."
        ],
        "return": [
          "the previous string value of the system property, or \n\u003ccode\u003enull\u003c/code\u003e if there was no property with that key."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getenv",
      "comment": "Gets the value of the specified environment variable. An environment variable is a system-dependent external named value. If a security manager exists, its checkPermission method is called with a RuntimePermission(\"getenv.\"+name) permission. This may result in a SecurityException being thrown. If no exception is thrown the value of the variable name is returned. System properties and environment variables are both conceptually mappings between names and values. Both mechanisms can be used to pass user-defined information to a Java process. Environment variables have a more global effect, because they are visible to all descendants of the process which defines them, not just the immediate Java subprocess. They can have subtly different semantics, such as case insensitivity, on different operating systems. For these reasons, environment variables are more likely to have unintended side effects. It is best to use system properties where possible. Environment variables should be used when a global effect is desired, or when an external system interface requires an environment variable (such as PATH). On UNIX systems the alphabetic case of name is typically significant, while on Microsoft Windows systems it is typically not. For example, the expression System.getenv(\"FOO\").equals(System.getenv(\"foo\")) is likely to be true on Microsoft Windows.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getenv()\"\u003e\u003ccode\u003egetenv()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ProcessBuilder.html#environment()\"\u003e\u003ccode\u003eProcessBuilder.environment()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the environment variable"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003echeckPermission\u003c/code\u003e\u003c/a\u003e method doesn\u0027t allow access to the environment variable \n\u003ccode\u003ename\u003c/code\u003e"
        ],
        "return": [
          "the string value of the variable, or \n\u003ccode\u003enull\u003c/code\u003e if the variable is not defined in the system environment"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getenv",
      "comment": "Returns an unmodifiable string map view of the current system environment. The environment is a system-dependent mapping from names to values which is passed from parent to child processes. If the system does not support environment variables, an empty map is returned. The returned map will never contain null keys or values. Attempting to query the presence of a null key or value will throw a NullPointerException. Attempting to query the presence of a key or value which is not of type String will throw a ClassCastException. The returned map and its collection views may not obey the general contract of the Object.equals(java.lang.Object) and Object.hashCode() methods. The returned map is typically case-sensitive on all platforms. If a security manager exists, its checkPermission method is called with a RuntimePermission(\"getenv.*\") permission. This may result in a SecurityException being thrown. When passing information to a Java subprocess, system properties are generally preferred over environment variables.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getenv(java.lang.String)\"\u003e\u003ccode\u003egetenv(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ProcessBuilder.html#environment()\"\u003e\u003ccode\u003eProcessBuilder.environment()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003echeckPermission\u003c/code\u003e\u003c/a\u003e method doesn\u0027t allow access to the process environment"
        ],
        "return": [
          "the environment as a map of variable names to values"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.System$Logger",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLogger",
      "comment": "Returns an instance of Logger for the caller\u0027s use.",
      "tagMap": {
        "implSpec": [
          "Instances returned by this method route messages to loggers obtained by calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.LoggerFinder.html#getLogger(java.lang.String,java.lang.Module)\"\u003e\u003ccode\u003eLoggerFinder.getLogger(name, module)\u003c/code\u003e\u003c/a\u003e, where \n\u003ccode\u003emodule\u003c/code\u003e is the caller\u0027s module. In cases where \n\u003ccode\u003eSystem.getLogger\u003c/code\u003e is called from a context where there is no caller frame on the stack (e.g when called directly from a JNI attached thread), \n\u003ccode\u003eIllegalCallerException\u003c/code\u003e is thrown. To obtain a logger in such a context, use an auxiliary class that will implicitly be identified as the caller, or use the system \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.LoggerFinder.html#getLoggerFinder()\"\u003e\u003ccode\u003eLoggerFinder\u003c/code\u003e\u003c/a\u003e to obtain a logger instead. Note that doing the latter may eagerly initialize the underlying logging system."
        ],
        "apiNote": [
          "This method may defer calling the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.LoggerFinder.html#getLogger(java.lang.String,java.lang.Module)\"\u003e\u003ccode\u003eLoggerFinder.getLogger\u003c/code\u003e\u003c/a\u003e method to create an actual logger supplied by the logging backend, for instance, to allow loggers to be obtained during the system initialization time."
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the logger."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalCallerException.html\" title\u003d\"class in java.lang\"\u003eIllegalCallerException\u003c/a\u003e\u003c/code\u003e - if there is no Java caller frame on the stack."
        ],
        "return": [
          "an instance of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.Logger.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eSystem.Logger\u003c/code\u003e\u003c/a\u003e that can be used by the calling class."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.System$Logger",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.util.ResourceBundle",
            "type": "Class"
          },
          "field": {
            "name": "bundle"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLogger",
      "comment": "Returns a localizable instance of Logger for the caller\u0027s use. The returned logger will use the provided resource bundle for message localization.",
      "tagMap": {
        "implSpec": [
          "The returned logger will perform message localization as specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.LoggerFinder.html#getLocalizedLogger(java.lang.String,java.util.ResourceBundle,java.lang.Module)\"\u003e\u003ccode\u003eLoggerFinder.getLocalizedLogger(name, bundle, module)\u003c/code\u003e\u003c/a\u003e, where \n\u003ccode\u003emodule\u003c/code\u003e is the caller\u0027s module. In cases where \n\u003ccode\u003eSystem.getLogger\u003c/code\u003e is called from a context where there is no caller frame on the stack (e.g when called directly from a JNI attached thread), \n\u003ccode\u003eIllegalCallerException\u003c/code\u003e is thrown. To obtain a logger in such a context, use an auxiliary class that will implicitly be identified as the caller, or use the system \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.LoggerFinder.html#getLoggerFinder()\"\u003e\u003ccode\u003eLoggerFinder\u003c/code\u003e\u003c/a\u003e to obtain a logger instead. Note that doing the latter may eagerly initialize the underlying logging system."
        ],
        "apiNote": [
          "This method is intended to be used after the system is fully initialized. This method may trigger the immediate loading and initialization of the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.LoggerFinder.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSystem.LoggerFinder\u003c/code\u003e\u003c/a\u003e service, which may cause issues if the Java Runtime is not ready to initialize the concrete service implementation yet. System classes which may be loaded early in the boot sequence and need to log localized messages should create a logger using \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getLogger(java.lang.String)\"\u003e\u003ccode\u003egetLogger(java.lang.String)\u003c/code\u003e\u003c/a\u003e and then use the log methods that take a resource bundle as parameter."
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the logger.",
          "\u003ccode\u003ebundle\u003c/code\u003e - a resource bundle."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or \n\u003ccode\u003ebundle\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalCallerException.html\" title\u003d\"class in java.lang\"\u003eIllegalCallerException\u003c/a\u003e\u003c/code\u003e - if there is no Java caller frame on the stack."
        ],
        "return": [
          "an instance of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.Logger.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eSystem.Logger\u003c/code\u003e\u003c/a\u003e which will use the provided resource bundle for message localization."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "status"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "exit",
      "comment": "Terminates the currently running Java Virtual Machine. The argument serves as a status code; by convention, a nonzero status code indicates abnormal termination. This method calls the exit method in class Runtime. This method never returns normally. The call System.exit(n) is effectively equivalent to the call:  Runtime.getRuntime().exit(n)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runtime.html#exit(int)\"\u003e\u003ccode\u003eRuntime.exit(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estatus\u003c/code\u003e - exit status."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckExit\u003c/code\u003e method doesn\u0027t allow exit with the specified status."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "gc",
      "comment": "Runs the garbage collector in the Java Virtual Machine. Calling the gc method suggests that the Java Virtual Machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for reuse by the Java Virtual Machine. When control returns from the method call, the Java Virtual Machine has made a best effort to reclaim space from all unused objects. There is no guarantee that this effort will recycle any particular number of unused objects, reclaim any particular amount of space, or complete at any particular time, if at all, before the method returns or ever. The call System.gc() is effectively equivalent to the call:  Runtime.getRuntime().gc()",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runtime.html#gc()\"\u003e\u003ccode\u003eRuntime.gc()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "runFinalization",
      "comment": "Runs the finalization methods of any objects pending finalization. Calling this method suggests that the Java Virtual Machine expend effort toward running the finalize methods of objects that have been found to be discarded but whose finalize methods have not yet been run. When control returns from the method call, the Java Virtual Machine has made a best effort to complete all outstanding finalizations. The call System.runFinalization() is effectively equivalent to the call:  Runtime.getRuntime().runFinalization()",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runtime.html#runFinalization()\"\u003e\u003ccode\u003eRuntime.runFinalization()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "filename"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "load",
      "comment": "Loads the native library specified by the filename argument. The filename argument must be an absolute path name. If the filename argument, when stripped of any platform-specific library prefix, path, and file extension, indicates a library whose name is, for example, L, and a native library called L is statically linked with the VM, then the JNI_OnLoad_L function exported by the library is invoked rather than attempting to load a dynamic library. A filename matching the argument does not have to exist in the file system. See the JNI Specification for more details. Otherwise, the filename argument is mapped to a native library image in an implementation-dependent manner. The call System.load(name) is effectively equivalent to the call:  Runtime.getRuntime().load(name)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runtime.html#load(java.lang.String)\"\u003e\u003ccode\u003eRuntime.load(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkLink(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkLink(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efilename\u003c/code\u003e - the file to load."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckLink\u003c/code\u003e method doesn\u0027t allow loading of the specified dynamic library",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsatisfiedLinkError.html\" title\u003d\"class in java.lang\"\u003eUnsatisfiedLinkError\u003c/a\u003e\u003c/code\u003e - if either the filename is not an absolute path name, the native library is not statically linked with the VM, or the library cannot be mapped to a native library image by the host system.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efilename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "libname"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "loadLibrary",
      "comment": "Loads the native library specified by the libname argument. The libname argument must not contain any platform specific prefix, file extension or path. If a native library called libname is statically linked with the VM, then the JNI_OnLoad_libname function exported by the library is invoked. See the JNI Specification for more details. Otherwise, the libname argument is loaded from a system library location and mapped to a native library image in an implementation-dependent manner. The call System.loadLibrary(name) is effectively equivalent to the call  Runtime.getRuntime().loadLibrary(name)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runtime.html#loadLibrary(java.lang.String)\"\u003e\u003ccode\u003eRuntime.loadLibrary(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkLink(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkLink(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elibname\u003c/code\u003e - the name of the library."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckLink\u003c/code\u003e method doesn\u0027t allow loading of the specified dynamic library",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsatisfiedLinkError.html\" title\u003d\"class in java.lang\"\u003eUnsatisfiedLinkError\u003c/a\u003e\u003c/code\u003e - if either the libname argument contains a file path, the native library is not statically linked with the VM, or the library cannot be mapped to a native library image by the host system.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elibname\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "libname"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "mapLibraryName",
      "comment": "Maps a library name into a platform-specific string representing a native library.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#loadLibrary(java.lang.String)\"\u003e\u003ccode\u003eloadLibrary(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#findLibrary(java.lang.String)\"\u003e\u003ccode\u003eClassLoader.findLibrary(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elibname\u003c/code\u003e - the name of the library."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elibname\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a platform-dependent native library name."
        ],
        "since": [
          "1.2"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.lang.System$Logger",
    "java.lang.System$LoggerFinder"
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.System",
  "comment": "The \n\u003ccode\u003eSystem\u003c/code\u003e class contains several useful class fields and methods. It cannot be instantiated. Among the facilities provided by the \n\u003ccode\u003eSystem\u003c/code\u003e class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array.",
  "tagMap": {
    "since": [
      "1.0"
    ]
  }
}