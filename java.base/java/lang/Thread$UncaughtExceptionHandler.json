{
  "packageName": "java.lang",
  "simpleName": "UncaughtExceptionHandler",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Thread",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "uncaughtException",
      "comment": "Method invoked when the given thread terminates due to the given uncaught exception. Any exception thrown by this method will be ignored by the Java Virtual Machine.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the thread",
          "\u003ccode\u003ee\u003c/code\u003e - the exception"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "java.lang.Thread$UncaughtExceptionHandler",
  "comment": "Interface for handlers invoked when a \n\u003ccode\u003eThread\u003c/code\u003e abruptly terminates due to an uncaught exception. \n\u003cp\u003eWhen a thread is about to terminate due to an uncaught exception the Java Virtual Machine will query the thread for its \u003ccode\u003eUncaughtExceptionHandler\u003c/code\u003e using \u003ca href\u003d\"Thread.html#getUncaughtExceptionHandler()\"\u003e\u003ccode\u003eThread.getUncaughtExceptionHandler()\u003c/code\u003e\u003c/a\u003e and will invoke the handler\u0027s \u003ccode\u003euncaughtException\u003c/code\u003e method, passing the thread and the exception as arguments. If a thread has not had its \u003ccode\u003eUncaughtExceptionHandler\u003c/code\u003e explicitly set, then its \u003ccode\u003eThreadGroup\u003c/code\u003e object acts as its \u003ccode\u003eUncaughtExceptionHandler\u003c/code\u003e. If the \u003ccode\u003eThreadGroup\u003c/code\u003e object has no special requirements for dealing with the exception, it can forward the invocation to the \u003ca href\u003d\"Thread.html#getDefaultUncaughtExceptionHandler()\"\u003edefault uncaught exception handler\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)\"\u003e\u003ccode\u003eThread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)\"\u003e\u003ccode\u003eThread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ThreadGroup.html#uncaughtException(java.lang.Thread,java.lang.Throwable)\"\u003e\u003ccode\u003eThreadGroup.uncaughtException(java.lang.Thread, java.lang.Throwable)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}