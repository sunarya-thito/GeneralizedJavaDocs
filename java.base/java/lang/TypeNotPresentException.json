{
  "packageName": "java.lang",
  "simpleName": "TypeNotPresentException",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.RuntimeException",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "typeName",
      "comment": "Returns the fully qualified name of the unavailable type.",
      "tagMap": {
        "return": [
          "the fully qualified name of the unavailable type"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "typeName"
          }
        },
        {
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "field": {
            "name": "cause"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a TypeNotPresentException for the named type with the specified cause.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etypeName\u003c/code\u003e - the fully qualified name of the unavailable type",
          "\u003ccode\u003ecause\u003c/code\u003e - the exception that was thrown when the system attempted to load the named type, or \n\u003ccode\u003enull\u003c/code\u003e if unavailable or inapplicable"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.TypeNotPresentException",
  "comment": "Thrown when an application tries to access a type using a string representing the type\u0027s name, but no definition for the type with the specified name can be found. This exception differs from \n\u003ca href\u003d\"ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClassNotFoundException\u003c/code\u003e\u003c/a\u003e in that \n\u003ccode\u003eClassNotFoundException\u003c/code\u003e is a checked exception, whereas this exception is unchecked. \n\u003cp\u003eNote that this exception may be used when undefined type variables are accessed as well as when types (e.g., classes, interfaces or annotation types) are loaded. In particular, this exception can be thrown by the \u003ca href\u003d\"reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAPI used to read annotations reflectively\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003e\u003ccode\u003eAnnotatedElement\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.TypeNotPresentException\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}