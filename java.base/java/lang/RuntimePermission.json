{
  "packageName": "java.lang",
  "simpleName": "RuntimePermission",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.security.BasicPermission",
    "type": "Class"
  },
  "members": [
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new RuntimePermission with the specified name. The name is the symbolic name of the RuntimePermission, such as \"exit\", \"setFactory\", etc. An asterisk may appear at the end of the name, following a \".\", or by itself, to signify a wildcard match.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the RuntimePermission."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is empty."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "actions"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new RuntimePermission object with the specified name. The name is the symbolic name of the RuntimePermission, and the actions String is currently unused and should be null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the RuntimePermission.",
          "\u003ccode\u003eactions\u003c/code\u003e - should be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is empty."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.RuntimePermission",
  "comment": "This class is for runtime permissions. A \n\u003ccode\u003eRuntimePermission\u003c/code\u003e contains a name (also referred to as a \"target name\") but no actions list; you either have the named permission or you don\u0027t. \n\u003cp\u003e The target name is the name of the runtime permission (see below). The naming convention follows the hierarchical property naming convention. Also, an asterisk may appear at the end of the name, following a \".\", or by itself, to signify a wildcard match. For example: \"loadLibrary.*\" and \"*\" signify a wildcard match, while \"*loadLibrary\" and \"a*b\" do not. \u003c/p\u003e\n\u003cp\u003e The following table lists the standard \u003ccode\u003eRuntimePermission\u003c/code\u003e target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  permission target name, what the target allows, and associated risks\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003ePermission Target Name\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eWhat the Permission Allows\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eRisks of Allowing this Permission\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ecreateClassLoader\u003c/th\u003e \n   \u003ctd\u003eCreation of a class loader\u003c/td\u003e \n   \u003ctd\u003eThis is an extremely dangerous permission to grant. Malicious applications that can instantiate their own class loaders could then load their own rogue classes into the system. These newly loaded classes could be placed into any protection domain by the class loader, thereby automatically granting the classes the permissions for that domain.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetClassLoader\u003c/th\u003e \n   \u003ctd\u003eRetrieval of a class loader (e.g., the class loader for the calling class)\u003c/td\u003e \n   \u003ctd\u003eThis would grant an attacker permission to get the class loader for a particular class. This is dangerous because having access to a class\u0027s class loader allows the attacker to load other classes available to that class loader. The attacker would typically otherwise not have access to those classes.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetContextClassLoader\u003c/th\u003e \n   \u003ctd\u003eSetting of the context class loader used by a thread\u003c/td\u003e \n   \u003ctd\u003eThe context class loader is used by system code and extensions when they need to lookup resources that might not exist in the system class loader. Granting setContextClassLoader permission would allow code to change which context class loader is used for a particular thread, including system threads.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eenableContextClassLoaderOverride\u003c/th\u003e \n   \u003ctd\u003eSubclass implementation of the thread context class loader methods\u003c/td\u003e \n   \u003ctd\u003eThe context class loader is used by system code and extensions when they need to lookup resources that might not exist in the system class loader. Granting enableContextClassLoaderOverride permission would allow a subclass of Thread to override the methods that are used to get or set the context class loader for a particular thread.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ecloseClassLoader\u003c/th\u003e \n   \u003ctd\u003eClosing of a ClassLoader\u003c/td\u003e \n   \u003ctd\u003eGranting this permission allows code to close any URLClassLoader that it has a reference to.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetSecurityManager\u003c/th\u003e \n   \u003ctd\u003eSetting of the security manager (possibly replacing an existing one) \u003c/td\u003e \n   \u003ctd\u003eThe security manager is a class that allows applications to implement a security policy. Granting the setSecurityManager permission would allow code to change which security manager is used by installing a different, possibly less restrictive security manager, thereby bypassing checks that would have been enforced by the original security manager.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ecreateSecurityManager\u003c/th\u003e \n   \u003ctd\u003eCreation of a new security manager\u003c/td\u003e \n   \u003ctd\u003eThis gives code access to protected, sensitive methods that may disclose information about other classes or the execution stack.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetenv.{variable name}\u003c/th\u003e \n   \u003ctd\u003eReading of the value of the specified environment variable\u003c/td\u003e \n   \u003ctd\u003eThis would allow code to read the value, or determine the existence, of a particular environment variable. This is dangerous if the variable contains confidential data.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eexitVM.{exit status}\u003c/th\u003e \n   \u003ctd\u003eHalting of the Java Virtual Machine with the specified exit status\u003c/td\u003e \n   \u003ctd\u003eThis allows an attacker to mount a denial-of-service attack by automatically forcing the virtual machine to halt. Note: The \"exitVM.*\" permission is automatically granted to all code loaded from the application class path, thus enabling applications to terminate themselves. Also, the \"exitVM\" permission is equivalent to \"exitVM.*\".\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eshutdownHooks\u003c/th\u003e \n   \u003ctd\u003eRegistration and cancellation of virtual-machine shutdown hooks\u003c/td\u003e \n   \u003ctd\u003eThis allows an attacker to register a malicious shutdown hook that interferes with the clean shutdown of the virtual machine.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetFactory\u003c/th\u003e \n   \u003ctd\u003eSetting of the socket factory used by ServerSocket or Socket, or of the stream handler factory used by URL\u003c/td\u003e \n   \u003ctd\u003eThis allows code to set the actual implementation for the socket, server socket, stream handler, or RMI socket factory. An attacker may set a faulty implementation which mangles the data stream.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetIO\u003c/th\u003e \n   \u003ctd\u003eSetting of System.out, System.in, and System.err\u003c/td\u003e \n   \u003ctd\u003eThis allows changing the value of the standard system streams. An attacker may change System.in to monitor and steal user input, or may set System.err to a \"null\" OutputStream, which would hide any error messages sent to System.err. \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003emodifyThread\u003c/th\u003e \n   \u003ctd\u003eModification of threads, e.g., via calls to Thread \u003ccode\u003einterrupt, stop, suspend, resume, setDaemon, setPriority, setName\u003c/code\u003e and \u003ccode\u003esetUncaughtExceptionHandler\u003c/code\u003e methods\u003c/td\u003e \n   \u003ctd\u003eThis allows an attacker to modify the behaviour of any thread in the system.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003estopThread\u003c/th\u003e \n   \u003ctd\u003eStopping of threads via calls to the Thread \u003ccode\u003estop\u003c/code\u003e method\u003c/td\u003e \n   \u003ctd\u003eThis allows code to stop any thread in the system provided that it is already granted permission to access that thread. This poses as a threat, because that code may corrupt the system by killing existing threads.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003emodifyThreadGroup\u003c/th\u003e \n   \u003ctd\u003emodification of thread groups, e.g., via calls to ThreadGroup \u003ccode\u003edestroy\u003c/code\u003e, \u003ccode\u003egetParent\u003c/code\u003e, \u003ccode\u003eresume\u003c/code\u003e, \u003ccode\u003esetDaemon\u003c/code\u003e, \u003ccode\u003esetMaxPriority\u003c/code\u003e, \u003ccode\u003estop\u003c/code\u003e, and \u003ccode\u003esuspend\u003c/code\u003e methods\u003c/td\u003e \n   \u003ctd\u003eThis allows an attacker to create thread groups and set their run priority.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetProtectionDomain\u003c/th\u003e \n   \u003ctd\u003eRetrieval of the ProtectionDomain for a class\u003c/td\u003e \n   \u003ctd\u003eThis allows code to obtain policy information for a particular code source. While obtaining policy information does not compromise the security of the system, it does give attackers additional information, such as local file names for example, to better aim an attack.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetFileSystemAttributes\u003c/th\u003e \n   \u003ctd\u003eRetrieval of file system attributes\u003c/td\u003e \n   \u003ctd\u003eThis allows code to obtain file system information such as disk usage or disk space available to the caller. This is potentially dangerous because it discloses information about the system hardware configuration and some information about the caller\u0027s privilege to write files.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ereadFileDescriptor\u003c/th\u003e \n   \u003ctd\u003eReading of file descriptors\u003c/td\u003e \n   \u003ctd\u003eThis would allow code to read the particular file associated with the file descriptor read. This is dangerous if the file contains confidential data.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ewriteFileDescriptor\u003c/th\u003e \n   \u003ctd\u003eWriting to file descriptors\u003c/td\u003e \n   \u003ctd\u003eThis allows code to write to a particular file associated with the descriptor. This is dangerous because it may allow malicious code to plant viruses or at the very least, fill up your entire disk.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eloadLibrary.{library name}\u003c/th\u003e \n   \u003ctd\u003eDynamic linking of the specified library\u003c/td\u003e \n   \u003ctd\u003eIt is dangerous to allow an applet permission to load native code libraries, because the Java security architecture is not designed to and does not prevent malicious behavior at the level of native code.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eaccessClassInPackage.{package name}\u003c/th\u003e \n   \u003ctd\u003eAccess to the specified package via a class loader\u0027s \u003ccode\u003eloadClass\u003c/code\u003e method when that class loader calls the SecurityManager \u003ccode\u003echeckPackageAccess\u003c/code\u003e method\u003c/td\u003e \n   \u003ctd\u003eThis gives code access to classes in packages to which it normally does not have access. Malicious code may use these classes to help in its attempt to compromise security in the system.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003edefineClassInPackage.{package name}\u003c/th\u003e \n   \u003ctd\u003eDefinition of classes in the specified package, via a class loader\u0027s \u003ccode\u003edefineClass\u003c/code\u003e method when that class loader calls the SecurityManager \u003ccode\u003echeckPackageDefinition\u003c/code\u003e method.\u003c/td\u003e \n   \u003ctd\u003eThis grants code permission to define a class in a particular package. This is dangerous because malicious code with this permission may define rogue classes in trusted packages like \u003ccode\u003ejava.security\u003c/code\u003e or \u003ccode\u003ejava.lang\u003c/code\u003e, for example.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003edefineClass\u003c/th\u003e \n   \u003ctd\u003eDefine a class with \u003ca href\u003d\"invoke/MethodHandles.Lookup.html#defineClass(byte%5B%5D)\"\u003e\u003ccode\u003eLookup.defineClass\u003c/code\u003e\u003c/a\u003e.\u003c/td\u003e \n   \u003ctd\u003eThis grants code with a suitably privileged \u003ccode\u003eLookup\u003c/code\u003e object permission to define classes in the same package as the \u003ccode\u003eLookup\u003c/code\u003e\u0027s lookup class. \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eaccessDeclaredMembers\u003c/th\u003e \n   \u003ctd\u003eAccess to the declared members of a class\u003c/td\u003e \n   \u003ctd\u003eThis grants code permission to query a class for its public, protected, default (package) access, and private fields and/or methods. Although the code would have access to the private and protected field and method names, it would not have access to the private/protected field data and would not be able to invoke any private methods. Nevertheless, malicious code may use this information to better aim an attack. Additionally, it may invoke any public methods and/or access public fields in the class. This could be dangerous if the code would normally not be able to invoke those methods and/or access the fields because it can\u0027t cast the object to the class/interface with those methods and fields.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003equeuePrintJob\u003c/th\u003e \n   \u003ctd\u003eInitiation of a print job request\u003c/td\u003e \n   \u003ctd\u003eThis could print sensitive information to a printer, or simply waste paper.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetStackTrace\u003c/th\u003e \n   \u003ctd\u003eRetrieval of the stack trace information of another thread.\u003c/td\u003e \n   \u003ctd\u003eThis allows retrieval of the stack trace information of another thread. This might allow malicious code to monitor the execution of threads and discover vulnerabilities in applications.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetStackWalkerWithClassReference\u003c/th\u003e \n   \u003ctd\u003eGet a stack walker that can retrieve stack frames with class reference.\u003c/td\u003e \n   \u003ctd\u003eThis allows retrieval of Class objects from stack walking. This might allow malicious code to access Class objects on the stack outside its own context.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetDefaultUncaughtExceptionHandler\u003c/th\u003e \n   \u003ctd\u003eSetting the default handler to be used when a thread terminates abruptly due to an uncaught exception\u003c/td\u003e \n   \u003ctd\u003eThis allows an attacker to register a malicious uncaught exception handler that could interfere with termination of a thread\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003epreferences\u003c/th\u003e \n   \u003ctd\u003eRepresents the permission required to get access to the java.util.prefs.Preferences implementations user or system root which in turn allows retrieval or update operations within the Preferences persistent backing store.) \u003c/td\u003e \n   \u003ctd\u003eThis permission allows the user to read from or write to the preferences backing store if the user running the code has sufficient OS privileges to read/write to that backing store. The actual backing store may reside within a traditional filesystem directory or within a registry depending on the platform OS\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003emanageProcess\u003c/th\u003e \n   \u003ctd\u003eNative process termination and information about processes \u003ca href\u003d\"ProcessHandle.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eProcessHandle\u003c/code\u003e\u003c/a\u003e.\u003c/td\u003e \n   \u003ctd\u003eAllows code to identify and terminate processes that it did not create.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003elocaleServiceProvider\u003c/th\u003e \n   \u003ctd\u003eThis \u003ccode\u003eRuntimePermission\u003c/code\u003e is required to be granted to classes which subclass and implement \u003ccode\u003ejava.util.spi.LocaleServiceProvider\u003c/code\u003e. The permission is checked during invocation of the abstract base class constructor. This permission ensures trust in classes which implement this security-sensitive provider mechanism. \u003c/td\u003e \n   \u003ctd\u003eSee \u003ca href\u003d\"../util/spi/LocaleServiceProvider.html\"\u003e \u003ccode\u003ejava.util.spi.LocaleServiceProvider\u003c/code\u003e\u003c/a\u003e for more information.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eloggerFinder\u003c/th\u003e \n   \u003ctd\u003eThis \u003ccode\u003eRuntimePermission\u003c/code\u003e is required to be granted to classes which subclass or call methods on \u003ccode\u003ejava.lang.System.LoggerFinder\u003c/code\u003e. The permission is checked during invocation of the abstract base class constructor, as well as on the invocation of its public methods. This permission ensures trust in classes which provide loggers to system classes.\u003c/td\u003e \n   \u003ctd\u003eSee \u003ca href\u003d\"System.LoggerFinder.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003ejava.lang.System.LoggerFinder\u003c/code\u003e\u003c/a\u003e for more information.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eaccessSystemModules\u003c/th\u003e \n   \u003ctd\u003eAccess system modules in the runtime image.\u003c/td\u003e \n   \u003ctd\u003eThis grants the permission to access resources in the \u003ca href\u003d\"module/ModuleFinder.html#ofSystem()\"\u003esystem modules\u003c/a\u003e in the runtime image.\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/BasicPermission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eBasicPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permissions.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissions\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PermissionCollection.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissionCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityManager\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.RuntimePermission\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "implNote": [
      "Implementations may define additional target names, but should use naming conventions such as reverse domain name notation to avoid name clashes."
    ],
    "since": [
      "1.2"
    ]
  }
}