{
  "packageName": "java.lang",
  "simpleName": "Runnable",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "run",
      "comment": "When an object implementing interface Runnable is used to create a thread, starting the thread causes the object\u0027s run method to be called in that separately executing thread. The general contract of the method run is that it may take any action whatsoever.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html#run()\"\u003e\u003ccode\u003eThread.run()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.lang.Runnable",
  "comment": "The \n\u003ccode\u003eRunnable\u003c/code\u003e interface should be implemented by any class whose instances are intended to be executed by a thread. The class must define a method of no arguments called \n\u003ccode\u003erun\u003c/code\u003e. \n\u003cp\u003e This interface is designed to provide a common protocol for objects that wish to execute code while they are active. For example, \u003ccode\u003eRunnable\u003c/code\u003e is implemented by class \u003ccode\u003eThread\u003c/code\u003e. Being active simply means that a thread has been started and has not yet been stopped. \u003c/p\u003e\n\u003cp\u003e In addition, \u003ccode\u003eRunnable\u003c/code\u003e provides the means for a class to be active while not subclassing \u003ccode\u003eThread\u003c/code\u003e. A class that implements \u003ccode\u003eRunnable\u003c/code\u003e can run without subclassing \u003ccode\u003eThread\u003c/code\u003e by instantiating a \u003ccode\u003eThread\u003c/code\u003e instance and passing itself in as the target. In most cases, the \u003ccode\u003eRunnable\u003c/code\u003e interface should be used if you are only planning to override the \u003ccode\u003erun()\u003c/code\u003e method and no other \u003ccode\u003eThread\u003c/code\u003e methods. This is important because classes should not be subclassed unless the programmer intends on modifying or enhancing the fundamental behavior of the class.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Thread.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eThread\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Callable.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eCallable\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}