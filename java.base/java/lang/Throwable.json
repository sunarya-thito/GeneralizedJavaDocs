{
  "packageName": "java.lang",
  "simpleName": "Throwable",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMessage",
      "comment": "Returns the detail message string of this throwable.",
      "tagMap": {
        "return": [
          "the detail message string of this \n\u003ccode\u003eThrowable\u003c/code\u003e instance (which may be \n\u003ccode\u003enull\u003c/code\u003e)."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocalizedMessage",
      "comment": "Creates a localized description of this throwable. Subclasses may override this method in order to produce a locale-specific message. For subclasses that do not override this method, the default implementation returns the same result as getMessage().",
      "tagMap": {
        "return": [
          "The localized description of this throwable."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Throwable",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCause",
      "comment": "Returns the cause of this throwable or null if the cause is nonexistent or unknown. (The cause is the throwable that caused this throwable to get thrown.) This implementation returns the cause that was supplied via one of the constructors requiring a Throwable, or that was set after creation with the initCause(Throwable) method. While it is typically unnecessary to override this method, a subclass can override it to return a cause set by some other means. This is appropriate for a \"legacy chained throwable\" that predates the addition of chained exceptions to Throwable. Note that it is not necessary to override any of the PrintStackTrace methods, all of which invoke the getCause method to determine the cause of a throwable.",
      "tagMap": {
        "return": [
          "the cause of this throwable or \n\u003ccode\u003enull\u003c/code\u003e if the cause is nonexistent or unknown."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Throwable",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "field": {
            "name": "cause"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "initCause",
      "comment": "Initializes the cause of this throwable to the specified value. (The cause is the throwable that caused this throwable to get thrown.) This method can be called at most once. It is generally called from within the constructor, or immediately after creating the throwable. If this throwable was created with Throwable(Throwable) or Throwable(String,Throwable), this method cannot be called even once. An example of using this method on a legacy throwable type without other support for setting the cause is:  try {\n     lowLevelOp();\n } catch (LowLevelException le) {\n     throw (HighLevelException)\n           new HighLevelException().initCause(le); // Legacy constructor\n }",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecause\u003c/code\u003e - the cause (which is saved for later retrieval by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getCause()\"\u003e\u003ccode\u003egetCause()\u003c/code\u003e\u003c/a\u003e method). (A \n\u003ccode\u003enull\u003c/code\u003e value is permitted, and indicates that the cause is nonexistent or unknown.)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecause\u003c/code\u003e is this throwable. (A throwable cannot be its own cause.)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this throwable was created with \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#%3Cinit%3E(java.lang.Throwable)\"\u003e\u003ccode\u003eThrowable(Throwable)\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#%3Cinit%3E(java.lang.String,java.lang.Throwable)\"\u003e\u003ccode\u003eThrowable(String,Throwable)\u003c/code\u003e\u003c/a\u003e, or this method has already been called on this throwable."
        ],
        "return": [
          "a reference to this \n\u003ccode\u003eThrowable\u003c/code\u003e instance."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a short description of this throwable. The result is the concatenation of: the name of the class of this object \": \" (a colon and a space) the result of invoking this object\u0027s getLocalizedMessage() method If getLocalizedMessage returns null, then just the class name is returned.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this throwable."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "printStackTrace",
      "comment": "Prints this throwable and its backtrace to the standard error stream. This method prints a stack trace for this Throwable object on the error output stream that is the value of the field System.err. The first line of output contains the result of the toString() method for this object. Remaining lines represent data previously recorded by the method fillInStackTrace(). The format of this information depends on the implementation, but the following example may be regarded as typical:  java.lang.NullPointerException\n         at MyClass.mash(MyClass.java:9)\n         at MyClass.crunch(MyClass.java:6)\n         at MyClass.main(MyClass.java:3)\n This example was produced by running the program:  class MyClass {\n     public static void main(String[] args) {\n         crunch(null);\n     }\n     static void crunch(int[] a) {\n         mash(a);\n     }\n     static void mash(int[] b) {\n         System.out.println(b[0]);\n     }\n }\n The backtrace for a throwable with an initialized, non-null cause should generally include the backtrace for the cause. The format of this information depends on the implementation, but the following example may be regarded as typical:  HighLevelException: MidLevelException: LowLevelException\n         at Junk.a(Junk.java:13)\n         at Junk.main(Junk.java:4)\n Caused by: MidLevelException: LowLevelException\n         at Junk.c(Junk.java:23)\n         at Junk.b(Junk.java:17)\n         at Junk.a(Junk.java:11)\n         ... 1 more\n Caused by: LowLevelException\n         at Junk.e(Junk.java:30)\n         at Junk.d(Junk.java:27)\n         at Junk.c(Junk.java:21)\n         ... 3 more\n Note the presence of lines containing the characters \"...\". These lines indicate that the remainder of the stack trace for this exception matches the indicated number of frames from the bottom of the stack trace of the exception that was caused by this exception (the \"enclosing\" exception). This shorthand can greatly reduce the length of the output in the common case where a wrapped exception is thrown from same method as the \"causative exception\" is caught. The above example was produced by running the program:  public class Junk {\n     public static void main(String args[]) {\n         try {\n             a();\n         } catch(HighLevelException e) {\n             e.printStackTrace();\n         }\n     }\n     static void a() throws HighLevelException {\n         try {\n             b();\n         } catch(MidLevelException e) {\n             throw new HighLevelException(e);\n         }\n     }\n     static void b() throws MidLevelException {\n         c();\n     }\n     static void c() throws MidLevelException {\n         try {\n             d();\n         } catch(LowLevelException e) {\n             throw new MidLevelException(e);\n         }\n     }\n     static void d() throws LowLevelException {\n        e();\n     }\n     static void e() throws LowLevelException {\n         throw new LowLevelException();\n     }\n }\n\n class HighLevelException extends Exception {\n     HighLevelException(Throwable cause) { super(cause); }\n }\n\n class MidLevelException extends Exception {\n     MidLevelException(Throwable cause)  { super(cause); }\n }\n\n class LowLevelException extends Exception {\n }\n As of release 7, the platform supports the notion of suppressed exceptions (in conjunction with the try-with-resources statement). Any exceptions that were suppressed in order to deliver an exception are printed out beneath the stack trace. The format of this information depends on the implementation, but the following example may be regarded as typical:  Exception in thread \"main\" java.lang.Exception: Something happened\n  at Foo.bar(Foo.java:10)\n  at Foo.main(Foo.java:5)\n  Suppressed: Resource$CloseFailException: Resource ID \u003d 0\n          at Resource.close(Resource.java:26)\n          at Foo.bar(Foo.java:9)\n          ... 1 more\n Note that the \"... n more\" notation is used on suppressed exceptions just as it is used on causes. Unlike causes, suppressed exceptions are indented beyond their \"containing exceptions.\" An exception can have both a cause and one or more suppressed exceptions:  Exception in thread \"main\" java.lang.Exception: Main block\n  at Foo3.main(Foo3.java:7)\n  Suppressed: Resource$CloseFailException: Resource ID \u003d 2\n          at Resource.close(Resource.java:26)\n          at Foo3.main(Foo3.java:5)\n  Suppressed: Resource$CloseFailException: Resource ID \u003d 1\n          at Resource.close(Resource.java:26)\n          at Foo3.main(Foo3.java:5)\n Caused by: java.lang.Exception: I did it\n  at Foo3.main(Foo3.java:8)\n Likewise, a suppressed exception can have a cause:  Exception in thread \"main\" java.lang.Exception: Main block\n  at Foo4.main(Foo4.java:6)\n  Suppressed: Resource2$CloseFailException: Resource ID \u003d 1\n          at Resource2.close(Resource2.java:20)\n          at Foo4.main(Foo4.java:5)\n  Caused by: java.lang.Exception: Rats, you caught me\n          at Resource2$CloseFailException.\u003cinit\u003e(Resource2.java:45)\n          ... 2 more",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.PrintStream",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "printStackTrace",
      "comment": "Prints this throwable and its backtrace to the specified print stream.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - \n\u003ccode\u003ePrintStream\u003c/code\u003e to use for output"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.PrintWriter",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "printStackTrace",
      "comment": "Prints this throwable and its backtrace to the specified print writer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - \n\u003ccode\u003ePrintWriter\u003c/code\u003e to use for output"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Throwable",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "fillInStackTrace",
      "comment": "Fills in the execution stack trace. This method records within this Throwable object information about the current state of the stack frames for the current thread. If the stack trace of this Throwable is not writable, calling this method has no effect.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#printStackTrace()\"\u003e\u003ccode\u003eprintStackTrace()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a reference to this \n\u003ccode\u003eThrowable\u003c/code\u003e instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.StackTraceElement",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStackTrace",
      "comment": "Provides programmatic access to the stack trace information printed by printStackTrace(). Returns an array of stack trace elements, each representing one stack frame. The zeroth element of the array (assuming the array\u0027s length is non-zero) represents the top of the stack, which is the last method invocation in the sequence. Typically, this is the point at which this throwable was created and thrown. The last element of the array (assuming the array\u0027s length is non-zero) represents the bottom of the stack, which is the first method invocation in the sequence. Some virtual machines may, under some circumstances, omit one or more stack frames from the stack trace. In the extreme case, a virtual machine that has no stack trace information concerning this throwable is permitted to return a zero-length array from this method. Generally speaking, the array returned by this method will contain one element for every frame that would be printed by printStackTrace. Writes to the returned array do not affect future calls to this method.",
      "tagMap": {
        "return": [
          "an array of stack trace elements representing the stack trace pertaining to this throwable."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.StackTraceElement",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "stackTrace"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setStackTrace",
      "comment": "Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods. This method, which is designed for use by RPC frameworks and other advanced systems, allows the client to override the default stack trace that is either generated by fillInStackTrace() when a throwable is constructed or deserialized when a throwable is read from a serialization stream. If the stack trace of this Throwable is not writable, calling this method has no effect other than validating its argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estackTrace\u003c/code\u003e - the stack trace elements to be associated with this \n\u003ccode\u003eThrowable\u003c/code\u003e. The specified array is copied by this call; changes in the specified array after the method invocation returns will have no affect on this \n\u003ccode\u003eThrowable\u003c/code\u003e\u0027s stack trace."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estackTrace\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or if any of the elements of \n\u003ccode\u003estackTrace\u003c/code\u003e are \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "field": {
            "name": "exception"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "addSuppressed",
      "comment": "Appends the specified exception to the exceptions that were suppressed in order to deliver this exception. This method is thread-safe and typically called (automatically and implicitly) by the try-with-resources statement. The suppression behavior is enabled unless disabled via a constructor. When suppression is disabled, this method does nothing other than to validate its argument. Note that when one exception causes another exception, the first exception is usually caught and then the second exception is thrown in response. In other words, there is a causal connection between the two exceptions. In contrast, there are situations where two independent exceptions can be thrown in sibling code blocks, in particular in the try block of a try-with-resources statement and the compiler-generated finally block which closes the resource. In these situations, only one of the thrown exceptions can be propagated. In the try-with-resources statement, when there are two such exceptions, the exception originating from the try block is propagated and the exception from the finally block is added to the list of exceptions suppressed by the exception from the try block. As an exception unwinds the stack, it can accumulate multiple suppressed exceptions. An exception may have suppressed exceptions while also being caused by another exception. Whether or not an exception has a cause is semantically known at the time of its creation, unlike whether or not an exception will suppress other exceptions which is typically only determined after an exception is thrown. Note that programmer written code is also able to take advantage of calling this method in situations where there are multiple sibling exceptions and only one can be propagated.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eexception\u003c/code\u003e - the exception to be added to the list of suppressed exceptions"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eexception\u003c/code\u003e is this throwable; a throwable cannot suppress itself.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eexception\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Throwable",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getSuppressed",
      "comment": "Returns an array containing all of the exceptions that were suppressed, typically by the try-with-resources statement, in order to deliver this exception. If no exceptions were suppressed or suppression is disabled, an empty array is returned. This method is thread-safe. Writes to the returned array do not affect future calls to this method.",
      "tagMap": {
        "return": [
          "an array containing all of the exceptions that were suppressed to deliver this exception."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new throwable with null as its detail message. The cause is not initialized, and may subsequently be initialized by a call to initCause(java.lang.Throwable). The fillInStackTrace() method is called to initialize the stack trace data in the newly created throwable.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "message"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new throwable with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to initCause(java.lang.Throwable). The fillInStackTrace() method is called to initialize the stack trace data in the newly created throwable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - the detail message. The detail message is saved for later retrieval by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getMessage()\"\u003e\u003ccode\u003egetMessage()\u003c/code\u003e\u003c/a\u003e method."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "message"
          }
        },
        {
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "field": {
            "name": "cause"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new throwable with the specified detail message and cause. Note that the detail message associated with cause is not automatically incorporated in this throwable\u0027s detail message. The fillInStackTrace() method is called to initialize the stack trace data in the newly created throwable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - the detail message (which is saved for later retrieval by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getMessage()\"\u003e\u003ccode\u003egetMessage()\u003c/code\u003e\u003c/a\u003e method).",
          "\u003ccode\u003ecause\u003c/code\u003e - the cause (which is saved for later retrieval by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getCause()\"\u003e\u003ccode\u003egetCause()\u003c/code\u003e\u003c/a\u003e method). (A \n\u003ccode\u003enull\u003c/code\u003e value is permitted, and indicates that the cause is nonexistent or unknown.)"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "field": {
            "name": "cause"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new throwable with the specified cause and a detail message of (cause\u003d\u003dnull ? null : cause.toString()) (which typically contains the class and detail message of cause). This constructor is useful for throwables that are little more than wrappers for other throwables (for example, PrivilegedActionException). The fillInStackTrace() method is called to initialize the stack trace data in the newly created throwable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecause\u003c/code\u003e - the cause (which is saved for later retrieval by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getCause()\"\u003e\u003ccode\u003egetCause()\u003c/code\u003e\u003c/a\u003e method). (A \n\u003ccode\u003enull\u003c/code\u003e value is permitted, and indicates that the cause is nonexistent or unknown.)"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "message"
          }
        },
        {
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "field": {
            "name": "cause"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "enableSuppression"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "writableStackTrace"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a new throwable with the specified detail message, cause, suppression enabled or disabled, and writable stack trace enabled or disabled. If suppression is disabled, getSuppressed() for this object will return a zero-length array and calls to addSuppressed(java.lang.Throwable) that would otherwise append an exception to the suppressed list will have no effect. If the writable stack trace is false, this constructor will not call fillInStackTrace(), a null will be written to the stackTrace field, and subsequent calls to fillInStackTrace and setStackTrace(StackTraceElement[]) will not set the stack trace. If the writable stack trace is false, getStackTrace() will return a zero length array. Note that the other constructors of Throwable treat suppression as being enabled and the stack trace as being writable. Subclasses of Throwable should document any conditions under which suppression is disabled and document conditions under which the stack trace is not writable. Disabling of suppression should only occur in exceptional circumstances where special requirements exist, such as a virtual machine reusing exception objects under low-memory situations. Circumstances where a given exception object is repeatedly caught and rethrown, such as to implement control flow between two sub-systems, is another situation where immutable throwable objects would be appropriate.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/OutOfMemoryError.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eArithmeticException\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emessage\u003c/code\u003e - the detail message.",
          "\u003ccode\u003ecause\u003c/code\u003e - the cause. (A \n\u003ccode\u003enull\u003c/code\u003e value is permitted, and indicates that the cause is nonexistent or unknown.)",
          "\u003ccode\u003eenableSuppression\u003c/code\u003e - whether or not suppression is enabled or disabled",
          "\u003ccode\u003ewritableStackTrace\u003c/code\u003e - whether or not the stack trace should be writable"
        ],
        "since": [
          "1.7"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.Throwable",
  "comment": "The \n\u003ccode\u003eThrowable\u003c/code\u003e class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java \n\u003ccode\u003ethrow\u003c/code\u003e statement. Similarly, only this class or one of its subclasses can be the argument type in a \n\u003ccode\u003ecatch\u003c/code\u003e clause. For the purposes of compile-time checking of exceptions, \n\u003ccode\u003e Throwable\u003c/code\u003e and any subclass of \n\u003ccode\u003eThrowable\u003c/code\u003e that is not also a subclass of either \n\u003ca href\u003d\"RuntimeException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimeException\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"Error.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eError\u003c/code\u003e\u003c/a\u003e are regarded as checked exceptions. \n\u003cp\u003eInstances of two subclasses, \u003ca href\u003d\"Error.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eError\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"Exception.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eException\u003c/code\u003e\u003c/a\u003e, are conventionally used to indicate that exceptional situations have occurred. Typically, these instances are freshly created in the context of the exceptional situation so as to include relevant information (such as stack trace data). \u003c/p\u003e\n\u003cp\u003eA throwable contains a snapshot of the execution stack of its thread at the time it was created. It can also contain a message string that gives more information about the error. Over time, a throwable can \u003ca href\u003d\"#addSuppressed(java.lang.Throwable)\"\u003esuppress\u003c/a\u003e other throwables from being propagated. Finally, the throwable can also contain a \u003ci\u003ecause\u003c/i\u003e: another throwable that caused this throwable to be constructed. The recording of this causal information is referred to as the \u003ci\u003echained exception\u003c/i\u003e facility, as the cause can, itself, have a cause, and so on, leading to a \"chain\" of exceptions, each caused by another. \u003c/p\u003e\n\u003cp\u003eOne reason that a throwable may have a cause is that the class that throws it is built atop a lower layered abstraction, and an operation on the upper layer fails due to a failure in the lower layer. It would be bad design to let the throwable thrown by the lower layer propagate outward, as it is generally unrelated to the abstraction provided by the upper layer. Further, doing so would tie the API of the upper layer to the details of its implementation, assuming the lower layer\u0027s exception was a checked exception. Throwing a \"wrapped exception\" (i.e., an exception containing a cause) allows the upper layer to communicate the details of the failure to its caller without incurring either of these shortcomings. It preserves the flexibility to change the implementation of the upper layer without changing its API (in particular, the set of exceptions thrown by its methods). \u003c/p\u003e\n\u003cp\u003eA second reason that a throwable may have a cause is that the method that throws it must conform to a general-purpose interface that does not permit the method to throw the cause directly. For example, suppose a persistent collection conforms to the \u003ca href\u003d\"../util/Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e interface, and that its persistence is implemented atop \u003ccode\u003ejava.io\u003c/code\u003e. Suppose the internals of the \u003ccode\u003eadd\u003c/code\u003e method can throw an \u003ca href\u003d\"../io/IOException.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eIOException\u003c/code\u003e\u003c/a\u003e. The implementation can communicate the details of the \u003ccode\u003eIOException\u003c/code\u003e to its caller while conforming to the \u003ccode\u003eCollection\u003c/code\u003e interface by wrapping the \u003ccode\u003eIOException\u003c/code\u003e in an appropriate unchecked exception. (The specification for the persistent collection should indicate that it is capable of throwing such exceptions.) \u003c/p\u003e\n\u003cp\u003eA cause can be associated with a throwable in two ways: via a constructor that takes the cause as an argument, or via the \u003ca href\u003d\"#initCause(java.lang.Throwable)\"\u003e\u003ccode\u003einitCause(Throwable)\u003c/code\u003e\u003c/a\u003e method. New throwable classes that wish to allow causes to be associated with them should provide constructors that take a cause and delegate (perhaps indirectly) to one of the \u003ccode\u003eThrowable\u003c/code\u003e constructors that takes a cause. Because the \u003ccode\u003einitCause\u003c/code\u003e method is public, it allows a cause to be associated with any throwable, even a \"legacy throwable\" whose implementation predates the addition of the exception chaining mechanism to \u003ccode\u003eThrowable\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eBy convention, class \u003ccode\u003eThrowable\u003c/code\u003e and its subclasses have two constructors, one that takes no arguments and one that takes a \u003ccode\u003eString\u003c/code\u003e argument that can be used to produce a detail message. Further, those subclasses that might likely have a cause associated with them should have two more constructors, one that takes a \u003ccode\u003eThrowable\u003c/code\u003e (the cause), and one that takes a \u003ccode\u003eString\u003c/code\u003e (the detail message) and a \u003ccode\u003eThrowable\u003c/code\u003e (the cause).\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-11.html#jls-11.2\"\u003e11.2 Compile-Time Checking of Exceptions\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.Throwable\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}