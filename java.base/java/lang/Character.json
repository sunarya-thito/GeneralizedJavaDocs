{
  "packageName": "java.lang",
  "simpleName": "Character",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_RADIX",
      "comment": "The minimum radix available for conversion to and from strings. The constant value of this field is the smallest value permitted for the radix argument in radix-conversion methods such as the digit method, the forDigit method, and the toString method of class Integer.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#digit(int,int)\"\u003e\u003ccode\u003edigit(char, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#forDigit(int,int)\"\u003e\u003ccode\u003eforDigit(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#toString(int,int)\"\u003e\u003ccode\u003eInteger.toString(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#valueOf(java.lang.String)\"\u003e\u003ccode\u003eInteger.valueOf(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MIN_RADIX\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_RADIX",
      "comment": "The maximum radix available for conversion to and from strings. The constant value of this field is the largest value permitted for the radix argument in radix-conversion methods such as the digit method, the forDigit method, and the toString method of class Integer.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#digit(int,int)\"\u003e\u003ccode\u003edigit(char, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#forDigit(int,int)\"\u003e\u003ccode\u003eforDigit(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#toString(int,int)\"\u003e\u003ccode\u003eInteger.toString(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#valueOf(java.lang.String)\"\u003e\u003ccode\u003eInteger.valueOf(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MAX_RADIX\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_VALUE",
      "comment": "The constant value of this field is the smallest value of type char, \u0027\\u0000\u0027.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MIN_VALUE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_VALUE",
      "comment": "The constant value of this field is the largest value of type char, \u0027\\uFFFF\u0027.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MAX_VALUE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "name": "java.lang.Character",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TYPE",
      "comment": "The Class instance representing the primitive type char.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNASSIGNED",
      "comment": "General category \"Cn\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.UNASSIGNED\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UPPERCASE_LETTER",
      "comment": "General category \"Lu\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.UPPERCASE_LETTER\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LOWERCASE_LETTER",
      "comment": "General category \"Ll\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.LOWERCASE_LETTER\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TITLECASE_LETTER",
      "comment": "General category \"Lt\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.TITLECASE_LETTER\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MODIFIER_LETTER",
      "comment": "General category \"Lm\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MODIFIER_LETTER\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OTHER_LETTER",
      "comment": "General category \"Lo\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.OTHER_LETTER\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NON_SPACING_MARK",
      "comment": "General category \"Mn\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.NON_SPACING_MARK\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ENCLOSING_MARK",
      "comment": "General category \"Me\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.ENCLOSING_MARK\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COMBINING_SPACING_MARK",
      "comment": "General category \"Mc\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.COMBINING_SPACING_MARK\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DECIMAL_DIGIT_NUMBER",
      "comment": "General category \"Nd\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DECIMAL_DIGIT_NUMBER\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LETTER_NUMBER",
      "comment": "General category \"Nl\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.LETTER_NUMBER\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OTHER_NUMBER",
      "comment": "General category \"No\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.OTHER_NUMBER\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SPACE_SEPARATOR",
      "comment": "General category \"Zs\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.SPACE_SEPARATOR\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LINE_SEPARATOR",
      "comment": "General category \"Zl\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.LINE_SEPARATOR\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PARAGRAPH_SEPARATOR",
      "comment": "General category \"Zp\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.PARAGRAPH_SEPARATOR\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CONTROL",
      "comment": "General category \"Cc\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.CONTROL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FORMAT",
      "comment": "General category \"Cf\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.FORMAT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PRIVATE_USE",
      "comment": "General category \"Co\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.PRIVATE_USE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SURROGATE",
      "comment": "General category \"Cs\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.SURROGATE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DASH_PUNCTUATION",
      "comment": "General category \"Pd\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DASH_PUNCTUATION\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "START_PUNCTUATION",
      "comment": "General category \"Ps\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.START_PUNCTUATION\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "END_PUNCTUATION",
      "comment": "General category \"Pe\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.END_PUNCTUATION\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CONNECTOR_PUNCTUATION",
      "comment": "General category \"Pc\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.CONNECTOR_PUNCTUATION\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OTHER_PUNCTUATION",
      "comment": "General category \"Po\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.OTHER_PUNCTUATION\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MATH_SYMBOL",
      "comment": "General category \"Sm\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MATH_SYMBOL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CURRENCY_SYMBOL",
      "comment": "General category \"Sc\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.CURRENCY_SYMBOL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MODIFIER_SYMBOL",
      "comment": "General category \"Sk\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MODIFIER_SYMBOL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OTHER_SYMBOL",
      "comment": "General category \"So\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.OTHER_SYMBOL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INITIAL_QUOTE_PUNCTUATION",
      "comment": "General category \"Pi\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.INITIAL_QUOTE_PUNCTUATION\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FINAL_QUOTE_PUNCTUATION",
      "comment": "General category \"Pf\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.FINAL_QUOTE_PUNCTUATION\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_UNDEFINED",
      "comment": "Undefined bidirectional character type. Undefined char values have undefined directionality in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_UNDEFINED\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_LEFT_TO_RIGHT",
      "comment": "Strong bidirectional character type \"L\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_RIGHT_TO_LEFT",
      "comment": "Strong bidirectional character type \"R\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC",
      "comment": "Strong bidirectional character type \"AL\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_EUROPEAN_NUMBER",
      "comment": "Weak bidirectional character type \"EN\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR",
      "comment": "Weak bidirectional character type \"ES\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR",
      "comment": "Weak bidirectional character type \"ET\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_ARABIC_NUMBER",
      "comment": "Weak bidirectional character type \"AN\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_ARABIC_NUMBER\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR",
      "comment": "Weak bidirectional character type \"CS\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_NONSPACING_MARK",
      "comment": "Weak bidirectional character type \"NSM\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_NONSPACING_MARK\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_BOUNDARY_NEUTRAL",
      "comment": "Weak bidirectional character type \"BN\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_BOUNDARY_NEUTRAL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_PARAGRAPH_SEPARATOR",
      "comment": "Neutral bidirectional character type \"B\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_SEGMENT_SEPARATOR",
      "comment": "Neutral bidirectional character type \"S\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_SEGMENT_SEPARATOR\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_WHITESPACE",
      "comment": "Neutral bidirectional character type \"WS\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_WHITESPACE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_OTHER_NEUTRALS",
      "comment": "Neutral bidirectional character type \"ON\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_OTHER_NEUTRALS\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING",
      "comment": "Strong bidirectional character type \"LRE\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE",
      "comment": "Strong bidirectional character type \"LRO\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING",
      "comment": "Strong bidirectional character type \"RLE\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE",
      "comment": "Strong bidirectional character type \"RLO\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT",
      "comment": "Weak bidirectional character type \"PDF\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE",
      "comment": "Weak bidirectional character type \"LRI\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE",
      "comment": "Weak bidirectional character type \"RLI\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_FIRST_STRONG_ISOLATE",
      "comment": "Weak bidirectional character type \"FSI\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_FIRST_STRONG_ISOLATE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "type": {
        "name": "byte",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE",
      "comment": "Weak bidirectional character type \"PDI\" in the Unicode specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_HIGH_SURROGATE",
      "comment": "The minimum value of a Unicode high-surrogate code unit in the UTF-16 encoding, constant \u0027\\uD800\u0027. A high-surrogate is also known as a leading-surrogate.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MIN_HIGH_SURROGATE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_HIGH_SURROGATE",
      "comment": "The maximum value of a Unicode high-surrogate code unit in the UTF-16 encoding, constant \u0027\\uDBFF\u0027. A high-surrogate is also known as a leading-surrogate.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MAX_HIGH_SURROGATE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_LOW_SURROGATE",
      "comment": "The minimum value of a Unicode low-surrogate code unit in the UTF-16 encoding, constant \u0027\\uDC00\u0027. A low-surrogate is also known as a trailing-surrogate.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MIN_LOW_SURROGATE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_LOW_SURROGATE",
      "comment": "The maximum value of a Unicode low-surrogate code unit in the UTF-16 encoding, constant \u0027\\uDFFF\u0027. A low-surrogate is also known as a trailing-surrogate.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MAX_LOW_SURROGATE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_SURROGATE",
      "comment": "The minimum value of a Unicode surrogate code unit in the UTF-16 encoding, constant \u0027\\uD800\u0027.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MIN_SURROGATE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_SURROGATE",
      "comment": "The maximum value of a Unicode surrogate code unit in the UTF-16 encoding, constant \u0027\\uDFFF\u0027.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MAX_SURROGATE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_SUPPLEMENTARY_CODE_POINT",
      "comment": "The minimum value of a Unicode supplementary code point, constant U+10000.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_CODE_POINT",
      "comment": "The minimum value of a Unicode code point, constant U+0000.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MIN_CODE_POINT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_CODE_POINT",
      "comment": "The maximum value of a Unicode code point, constant U+10FFFF.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.MAX_CODE_POINT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SIZE",
      "comment": "The number of bits used to represent a char value in unsigned binary form, constant 16.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.SIZE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BYTES",
      "comment": "The number of bytes used to represent a char value in unsigned binary form.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Character.BYTES\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.constant.DynamicConstantDesc",
            "parameters": [
              {
                "name": "java.lang.Character",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "describeConstable",
      "comment": "Returns an Optional containing the nominal descriptor for this instance.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html#describeConstable()\"\u003edescribeConstable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html\" title\u003d\"interface in java.lang.constant\"\u003eConstable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e describing the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html\" title\u003d\"class in java.lang\"\u003eCharacter\u003c/a\u003e instance"
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Character",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns a Character instance representing the specified char value. If a new Character instance is not required, this method should generally be used in preference to the constructor Character(char), as this method is likely to yield significantly better space and time performance by caching frequently requested values. This method will always cache values in the range \u0027\\u0000\u0027 to \u0027\\u007F\u0027, inclusive, and may cache other values outside of this range.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a char value."
        ],
        "return": [
          "a \n\u003ccode\u003eCharacter\u003c/code\u003e instance representing \n\u003ccode\u003ec\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "charValue",
      "comment": "Returns the value of this Character object.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the primitive \n\u003ccode\u003echar\u003c/code\u003e value represented by this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code for this Character; equal to the result of invoking charValue().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this \n\u003ccode\u003eCharacter\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "hashCode",
      "comment": "Returns a hash code for a char value; compatible with Character.hashCode().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The \n\u003ccode\u003echar\u003c/code\u003e for which to return a hash code."
        ],
        "return": [
          "a hash code value for a \n\u003ccode\u003echar\u003c/code\u003e value."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this object against the specified object. The result is true if and only if the argument is not null and is a Character object that represents the same char value as this object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to compare with."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the objects are the same; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a String object representing this Character\u0027s value. The result is a string of length 1 whose sole component is the primitive char value represented by this Character object.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toString",
      "comment": "Returns a String object representing the specified char. The result is a string of length 1 consisting solely of the specified char.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "This method cannot handle \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#supplementary\"\u003e supplementary characters\u003c/a\u003e. To support all Unicode characters, including supplementary characters, use the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#toString(int)\"\u003e\u003ccode\u003etoString(int)\u003c/code\u003e\u003c/a\u003e method."
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the \n\u003ccode\u003echar\u003c/code\u003e to be converted"
        ],
        "return": [
          "the string representation of the specified \n\u003ccode\u003echar\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toString",
      "comment": "Returns a String object representing the specified character (Unicode code point). The result is a string of length 1 or 2, consisting solely of the specified codePoint.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the \n\u003ccode\u003ecodePoint\u003c/code\u003e to be converted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003ecodePoint\u003c/code\u003e is not a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isValidCodePoint(int)\"\u003evalid Unicode code point\u003c/a\u003e."
        ],
        "return": [
          "the string representation of the specified \n\u003ccode\u003ecodePoint\u003c/code\u003e"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isValidCodePoint",
      "comment": "Determines whether the specified code point is a valid Unicode code point value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the Unicode code point to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified code point value is between \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MIN_CODE_POINT\"\u003e\u003ccode\u003eMIN_CODE_POINT\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MAX_CODE_POINT\"\u003e\u003ccode\u003eMAX_CODE_POINT\u003c/code\u003e\u003c/a\u003e inclusive; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isBmpCodePoint",
      "comment": "Determines whether the specified character (Unicode code point) is in the Basic Multilingual Plane (BMP). Such code points can be represented using a single char.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified code point is between \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MIN_VALUE\"\u003e\u003ccode\u003eMIN_VALUE\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MAX_VALUE\"\u003e\u003ccode\u003eMAX_VALUE\u003c/code\u003e\u003c/a\u003e inclusive; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isSupplementaryCodePoint",
      "comment": "Determines whether the specified character (Unicode code point) is in the supplementary character range.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified code point is between \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MIN_SUPPLEMENTARY_CODE_POINT\"\u003e\u003ccode\u003eMIN_SUPPLEMENTARY_CODE_POINT\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MAX_CODE_POINT\"\u003e\u003ccode\u003eMAX_CODE_POINT\u003c/code\u003e\u003c/a\u003e inclusive; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isHighSurrogate",
      "comment": "Determines if the given char value is a Unicode high-surrogate code unit (also known as leading-surrogate code unit). Such values do not represent characters by themselves, but are used in the representation of supplementary characters in the UTF-16 encoding.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowSurrogate(char)\"\u003e\u003ccode\u003eisLowSurrogate(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.UnicodeBlock.html#of(int)\"\u003e\u003ccode\u003eCharacter.UnicodeBlock.of(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the \n\u003ccode\u003echar\u003c/code\u003e value to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003echar\u003c/code\u003e value is between \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MIN_HIGH_SURROGATE\"\u003e\u003ccode\u003eMIN_HIGH_SURROGATE\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MAX_HIGH_SURROGATE\"\u003e\u003ccode\u003eMAX_HIGH_SURROGATE\u003c/code\u003e\u003c/a\u003e inclusive; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isLowSurrogate",
      "comment": "Determines if the given char value is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit). Such values do not represent characters by themselves, but are used in the representation of supplementary characters in the UTF-16 encoding.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isHighSurrogate(char)\"\u003e\u003ccode\u003eisHighSurrogate(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the \n\u003ccode\u003echar\u003c/code\u003e value to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003echar\u003c/code\u003e value is between \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MIN_LOW_SURROGATE\"\u003e\u003ccode\u003eMIN_LOW_SURROGATE\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MAX_LOW_SURROGATE\"\u003e\u003ccode\u003eMAX_LOW_SURROGATE\u003c/code\u003e\u003c/a\u003e inclusive; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isSurrogate",
      "comment": "Determines if the given char value is a Unicode surrogate code unit. Such values do not represent characters by themselves, but are used in the representation of supplementary characters in the UTF-16 encoding. A char value is a surrogate code unit if and only if it is either a low-surrogate code unit or a high-surrogate code unit.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the \n\u003ccode\u003echar\u003c/code\u003e value to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003echar\u003c/code\u003e value is between \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MIN_SURROGATE\"\u003e\u003ccode\u003eMIN_SURROGATE\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MAX_SURROGATE\"\u003e\u003ccode\u003eMAX_SURROGATE\u003c/code\u003e\u003c/a\u003e inclusive; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "high",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "low",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isSurrogatePair",
      "comment": "Determines whether the specified pair of char values is a valid Unicode surrogate pair. This method is equivalent to the expression: \n isHighSurrogate(high) \u0026\u0026 isLowSurrogate(low)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehigh\u003c/code\u003e - the high-surrogate code value to be tested",
          "\u003ccode\u003elow\u003c/code\u003e - the low-surrogate code value to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified high and low-surrogate code values represent a valid surrogate pair; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "charCount",
      "comment": "Determines the number of char values needed to represent the specified character (Unicode code point). If the specified character is equal to or greater than 0x10000, then the method returns 2. Otherwise, the method returns 1. This method doesn\u0027t validate the specified character to be a valid Unicode code point. The caller must validate the character value using isValidCodePoint if necessary.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isSupplementaryCodePoint(int)\"\u003e\u003ccode\u003eisSupplementaryCodePoint(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "2 if the character is a valid supplementary character; 1 otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "high",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "low",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toCodePoint",
      "comment": "Converts the specified surrogate pair to its supplementary code point value. This method does not validate the specified surrogate pair. The caller must validate it using isSurrogatePair if necessary.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ehigh\u003c/code\u003e - the high-surrogate code unit",
          "\u003ccode\u003elow\u003c/code\u003e - the low-surrogate code unit"
        ],
        "return": [
          "the supplementary code point composed from the specified surrogate pair."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "name": "seq",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "codePointAt",
      "comment": "Returns the code point at the given index of the CharSequence. If the char value at the given index in the CharSequence is in the high-surrogate range, the following index is less than the length of the CharSequence, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eseq\u003c/code\u003e - a sequence of \n\u003ccode\u003echar\u003c/code\u003e values (Unicode code units)",
          "\u003ccode\u003eindex\u003c/code\u003e - the index to the \n\u003ccode\u003echar\u003c/code\u003e values (Unicode code units) in \n\u003ccode\u003eseq\u003c/code\u003e to be converted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eseq\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the value \n\u003ccode\u003eindex\u003c/code\u003e is negative or not less than \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#length()\"\u003e\u003ccode\u003eseq.length()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the Unicode code point at the given index"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "codePointAt",
      "comment": "Returns the code point at the given index of the char array. If the char value at the given index in the char array is in the high-surrogate range, the following index is less than the length of the char array, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the \n\u003ccode\u003echar\u003c/code\u003e array",
          "\u003ccode\u003eindex\u003c/code\u003e - the index to the \n\u003ccode\u003echar\u003c/code\u003e values (Unicode code units) in the \n\u003ccode\u003echar\u003c/code\u003e array to be converted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ea\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the value \n\u003ccode\u003eindex\u003c/code\u003e is negative or not less than the length of the \n\u003ccode\u003echar\u003c/code\u003e array."
        ],
        "return": [
          "the Unicode code point at the given index"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "limit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "codePointAt",
      "comment": "Returns the code point at the given index of the char array, where only array elements with index less than limit can be used. If the char value at the given index in the char array is in the high-surrogate range, the following index is less than the limit, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the \n\u003ccode\u003echar\u003c/code\u003e array",
          "\u003ccode\u003eindex\u003c/code\u003e - the index to the \n\u003ccode\u003echar\u003c/code\u003e values (Unicode code units) in the \n\u003ccode\u003echar\u003c/code\u003e array to be converted",
          "\u003ccode\u003elimit\u003c/code\u003e - the index after the last array element that can be used in the \n\u003ccode\u003echar\u003c/code\u003e array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ea\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e argument is negative or not less than the \n\u003ccode\u003elimit\u003c/code\u003e argument, or if the \n\u003ccode\u003elimit\u003c/code\u003e argument is negative or greater than the length of the \n\u003ccode\u003echar\u003c/code\u003e array."
        ],
        "return": [
          "the Unicode code point at the given index"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "name": "seq",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "codePointBefore",
      "comment": "Returns the code point preceding the given index of the CharSequence. If the char value at (index - 1) in the CharSequence is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) in the CharSequence is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eseq\u003c/code\u003e - the \n\u003ccode\u003eCharSequence\u003c/code\u003e instance",
          "\u003ccode\u003eindex\u003c/code\u003e - the index following the code point that should be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eseq\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e argument is less than 1 or greater than \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#length()\"\u003e\u003ccode\u003eseq.length()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the Unicode code point value before the given index."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "codePointBefore",
      "comment": "Returns the code point preceding the given index of the char array. If the char value at (index - 1) in the char array is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) in the char array is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the \n\u003ccode\u003echar\u003c/code\u003e array",
          "\u003ccode\u003eindex\u003c/code\u003e - the index following the code point that should be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ea\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e argument is less than 1 or greater than the length of the \n\u003ccode\u003echar\u003c/code\u003e array"
        ],
        "return": [
          "the Unicode code point value before the given index."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "codePointBefore",
      "comment": "Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used. If the char value at (index - 1) in the char array is in the low-surrogate range, (index - 2) is not less than start, and the char value at (index - 2) in the char array is in the high-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at (index - 1) is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the \n\u003ccode\u003echar\u003c/code\u003e array",
          "\u003ccode\u003eindex\u003c/code\u003e - the index following the code point that should be returned",
          "\u003ccode\u003estart\u003c/code\u003e - the index of the first array element in the \n\u003ccode\u003echar\u003c/code\u003e array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ea\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e argument is not greater than the \n\u003ccode\u003estart\u003c/code\u003e argument or is greater than the length of the \n\u003ccode\u003echar\u003c/code\u003e array, or if the \n\u003ccode\u003estart\u003c/code\u003e argument is negative or not less than the length of the \n\u003ccode\u003echar\u003c/code\u003e array."
        ],
        "return": [
          "the Unicode code point value before the given index."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "highSurrogate",
      "comment": "Returns the leading surrogate (a high surrogate code unit) of the surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding. If the specified character is not a supplementary character, an unspecified char is returned. If isSupplementaryCodePoint(x) is true, then isHighSurrogate(highSurrogate(x)) and toCodePoint(highSurrogate(x), lowSurrogate(x)) \u003d\u003d x are also always true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - a supplementary character (Unicode code point)"
        ],
        "return": [
          "the leading surrogate code unit used to represent the character in the UTF-16 encoding"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "lowSurrogate",
      "comment": "Returns the trailing surrogate (a low surrogate code unit) of the surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding. If the specified character is not a supplementary character, an unspecified char is returned. If isSupplementaryCodePoint(x) is true, then isLowSurrogate(lowSurrogate(x)) and toCodePoint(highSurrogate(x), lowSurrogate(x)) \u003d\u003d x are also always true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - a supplementary character (Unicode code point)"
        ],
        "return": [
          "the trailing surrogate code unit used to represent the character in the UTF-16 encoding"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "dst",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dstIndex",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toChars",
      "comment": "Converts the specified character (Unicode code point) to its UTF-16 representation. If the specified code point is a BMP (Basic Multilingual Plane or Plane 0) value, the same value is stored in dst[dstIndex], and 1 is returned. If the specified code point is a supplementary character, its surrogate values are stored in dst[dstIndex] (high-surrogate) and dst[dstIndex+1] (low-surrogate), and 2 is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be converted.",
          "\u003ccode\u003edst\u003c/code\u003e - an array of \n\u003ccode\u003echar\u003c/code\u003e in which the \n\u003ccode\u003ecodePoint\u003c/code\u003e\u0027s UTF-16 value is stored.",
          "\u003ccode\u003edstIndex\u003c/code\u003e - the start index into the \n\u003ccode\u003edst\u003c/code\u003e array where the converted value is stored."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003ecodePoint\u003c/code\u003e is not a valid Unicode code point.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003edst\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edstIndex\u003c/code\u003e is negative or not less than \n\u003ccode\u003edst.length\u003c/code\u003e, or if \n\u003ccode\u003edst\u003c/code\u003e at \n\u003ccode\u003edstIndex\u003c/code\u003e doesn\u0027t have enough array element(s) to store the resulting \n\u003ccode\u003echar\u003c/code\u003e value(s). (If \n\u003ccode\u003edstIndex\u003c/code\u003e is equal to \n\u003ccode\u003edst.length-1\u003c/code\u003e and the specified \n\u003ccode\u003ecodePoint\u003c/code\u003e is a supplementary character, the high-surrogate value is not stored in \n\u003ccode\u003edst[dstIndex]\u003c/code\u003e.)"
        ],
        "return": [
          "1 if the code point is a BMP code point, 2 if the code point is a supplementary code point."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toChars",
      "comment": "Converts the specified character (Unicode code point) to its UTF-16 representation stored in a char array. If the specified code point is a BMP (Basic Multilingual Plane or Plane 0) value, the resulting char array has the same value as codePoint. If the specified code point is a supplementary code point, the resulting char array has the corresponding surrogate pair.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - a Unicode code point"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003ecodePoint\u003c/code\u003e is not a valid Unicode code point."
        ],
        "return": [
          "a \n\u003ccode\u003echar\u003c/code\u003e array having \n\u003ccode\u003ecodePoint\u003c/code\u003e\u0027s UTF-16 representation."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "name": "seq",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "endIndex",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "codePointCount",
      "comment": "Returns the number of Unicode code points in the text range of the specified char sequence. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eseq\u003c/code\u003e - the char sequence",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the index to the first \n\u003ccode\u003echar\u003c/code\u003e of the text range.",
          "\u003ccode\u003eendIndex\u003c/code\u003e - the index after the last \n\u003ccode\u003echar\u003c/code\u003e of the text range."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eseq\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ebeginIndex\u003c/code\u003e is negative, or \n\u003ccode\u003eendIndex\u003c/code\u003e is larger than the length of the given sequence, or \n\u003ccode\u003ebeginIndex\u003c/code\u003e is larger than \n\u003ccode\u003eendIndex\u003c/code\u003e."
        ],
        "return": [
          "the number of Unicode code points in the specified text range"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "offset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "codePointCount",
      "comment": "Returns the number of Unicode code points in a subarray of the char array argument. The offset argument is the index of the first char of the subarray and the count argument specifies the length of the subarray in chars. Unpaired surrogates within the subarray count as one code point each.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the \n\u003ccode\u003echar\u003c/code\u003e array",
          "\u003ccode\u003eoffset\u003c/code\u003e - the index of the first \n\u003ccode\u003echar\u003c/code\u003e in the given \n\u003ccode\u003echar\u003c/code\u003e array",
          "\u003ccode\u003ecount\u003c/code\u003e - the length of the subarray in \n\u003ccode\u003echar\u003c/code\u003es"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ea\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset\u003c/code\u003e or \n\u003ccode\u003ecount\u003c/code\u003e is negative, or if \n\u003ccode\u003eoffset + count\u003c/code\u003e is larger than the length of the given array."
        ],
        "return": [
          "the number of Unicode code points in the specified subarray"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "name": "seq",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePointOffset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "offsetByCodePoints",
      "comment": "Returns the index within the given char sequence that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eseq\u003c/code\u003e - the char sequence",
          "\u003ccode\u003eindex\u003c/code\u003e - the index to be offset",
          "\u003ccode\u003ecodePointOffset\u003c/code\u003e - the offset in code points"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eseq\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is negative or larger then the length of the char sequence, or if \n\u003ccode\u003ecodePointOffset\u003c/code\u003e is positive and the subsequence starting with \n\u003ccode\u003eindex\u003c/code\u003e has fewer than \n\u003ccode\u003ecodePointOffset\u003c/code\u003e code points, or if \n\u003ccode\u003ecodePointOffset\u003c/code\u003e is negative and the subsequence before \n\u003ccode\u003eindex\u003c/code\u003e has fewer than the absolute value of \n\u003ccode\u003ecodePointOffset\u003c/code\u003e code points."
        ],
        "return": [
          "the index within the char sequence"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "start",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePointOffset",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "offsetByCodePoints",
      "comment": "Returns the index within the given char subarray that is offset from the given index by codePointOffset code points. The start and count arguments specify a subarray of the char array. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the \n\u003ccode\u003echar\u003c/code\u003e array",
          "\u003ccode\u003estart\u003c/code\u003e - the index of the first \n\u003ccode\u003echar\u003c/code\u003e of the subarray",
          "\u003ccode\u003ecount\u003c/code\u003e - the length of the subarray in \n\u003ccode\u003echar\u003c/code\u003es",
          "\u003ccode\u003eindex\u003c/code\u003e - the index to be offset",
          "\u003ccode\u003ecodePointOffset\u003c/code\u003e - the offset in code points"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ea\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estart\u003c/code\u003e or \n\u003ccode\u003ecount\u003c/code\u003e is negative, or if \n\u003ccode\u003estart + count\u003c/code\u003e is larger than the length of the given array, or if \n\u003ccode\u003eindex\u003c/code\u003e is less than \n\u003ccode\u003estart\u003c/code\u003e or larger then \n\u003ccode\u003estart + count\u003c/code\u003e, or if \n\u003ccode\u003ecodePointOffset\u003c/code\u003e is positive and the text range starting with \n\u003ccode\u003eindex\u003c/code\u003e and ending with \n\u003ccode\u003estart + count - 1\u003c/code\u003e has fewer than \n\u003ccode\u003ecodePointOffset\u003c/code\u003e code points, or if \n\u003ccode\u003ecodePointOffset\u003c/code\u003e is negative and the text range starting with \n\u003ccode\u003estart\u003c/code\u003e and ending with \n\u003ccode\u003eindex - 1\u003c/code\u003e has fewer than the absolute value of \n\u003ccode\u003ecodePointOffset\u003c/code\u003e code points."
        ],
        "return": [
          "the index within the subarray"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isLowerCase",
      "comment": "Determines if the specified character is a lowercase character. A character is lowercase if its general category type, provided by Character.getType(ch), is LOWERCASE_LETTER, or it has contributory property Other_Lowercase as defined by the Unicode Standard. The following are examples of lowercase characters:  a b c d e f g h i j k l m n o p q r s t u v w x y z\n \u0027\\u00DF\u0027 \u0027\\u00E0\u0027 \u0027\\u00E1\u0027 \u0027\\u00E2\u0027 \u0027\\u00E3\u0027 \u0027\\u00E4\u0027 \u0027\\u00E5\u0027 \u0027\\u00E6\u0027\n \u0027\\u00E7\u0027 \u0027\\u00E8\u0027 \u0027\\u00E9\u0027 \u0027\\u00EA\u0027 \u0027\\u00EB\u0027 \u0027\\u00EC\u0027 \u0027\\u00ED\u0027 \u0027\\u00EE\u0027\n \u0027\\u00EF\u0027 \u0027\\u00F0\u0027 \u0027\\u00F1\u0027 \u0027\\u00F2\u0027 \u0027\\u00F3\u0027 \u0027\\u00F4\u0027 \u0027\\u00F5\u0027 \u0027\\u00F6\u0027\n \u0027\\u00F8\u0027 \u0027\\u00F9\u0027 \u0027\\u00FA\u0027 \u0027\\u00FB\u0027 \u0027\\u00FC\u0027 \u0027\\u00FD\u0027 \u0027\\u00FE\u0027 \u0027\\u00FF\u0027\n Many other Unicode characters are lowercase too. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isLowerCase(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isTitleCase(int)\"\u003e\u003ccode\u003eisTitleCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#toLowerCase(int)\"\u003e\u003ccode\u003etoLowerCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#getType(int)\"\u003e\u003ccode\u003egetType(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is lowercase; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isLowerCase",
      "comment": "Determines if the specified character (Unicode code point) is a lowercase character. A character is lowercase if its general category type, provided by getType(codePoint), is LOWERCASE_LETTER, or it has contributory property Other_Lowercase as defined by the Unicode Standard. The following are examples of lowercase characters:  a b c d e f g h i j k l m n o p q r s t u v w x y z\n \u0027\\u00DF\u0027 \u0027\\u00E0\u0027 \u0027\\u00E1\u0027 \u0027\\u00E2\u0027 \u0027\\u00E3\u0027 \u0027\\u00E4\u0027 \u0027\\u00E5\u0027 \u0027\\u00E6\u0027\n \u0027\\u00E7\u0027 \u0027\\u00E8\u0027 \u0027\\u00E9\u0027 \u0027\\u00EA\u0027 \u0027\\u00EB\u0027 \u0027\\u00EC\u0027 \u0027\\u00ED\u0027 \u0027\\u00EE\u0027\n \u0027\\u00EF\u0027 \u0027\\u00F0\u0027 \u0027\\u00F1\u0027 \u0027\\u00F2\u0027 \u0027\\u00F3\u0027 \u0027\\u00F4\u0027 \u0027\\u00F5\u0027 \u0027\\u00F6\u0027\n \u0027\\u00F8\u0027 \u0027\\u00F9\u0027 \u0027\\u00FA\u0027 \u0027\\u00FB\u0027 \u0027\\u00FC\u0027 \u0027\\u00FD\u0027 \u0027\\u00FE\u0027 \u0027\\u00FF\u0027\n Many other Unicode characters are lowercase too.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isTitleCase(int)\"\u003e\u003ccode\u003eisTitleCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#toLowerCase(int)\"\u003e\u003ccode\u003etoLowerCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#getType(int)\"\u003e\u003ccode\u003egetType(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is lowercase; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isUpperCase",
      "comment": "Determines if the specified character is an uppercase character. A character is uppercase if its general category type, provided by Character.getType(ch), is UPPERCASE_LETTER. or it has contributory property Other_Uppercase as defined by the Unicode Standard. The following are examples of uppercase characters:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n \u0027\\u00C0\u0027 \u0027\\u00C1\u0027 \u0027\\u00C2\u0027 \u0027\\u00C3\u0027 \u0027\\u00C4\u0027 \u0027\\u00C5\u0027 \u0027\\u00C6\u0027 \u0027\\u00C7\u0027\n \u0027\\u00C8\u0027 \u0027\\u00C9\u0027 \u0027\\u00CA\u0027 \u0027\\u00CB\u0027 \u0027\\u00CC\u0027 \u0027\\u00CD\u0027 \u0027\\u00CE\u0027 \u0027\\u00CF\u0027\n \u0027\\u00D0\u0027 \u0027\\u00D1\u0027 \u0027\\u00D2\u0027 \u0027\\u00D3\u0027 \u0027\\u00D4\u0027 \u0027\\u00D5\u0027 \u0027\\u00D6\u0027 \u0027\\u00D8\u0027\n \u0027\\u00D9\u0027 \u0027\\u00DA\u0027 \u0027\\u00DB\u0027 \u0027\\u00DC\u0027 \u0027\\u00DD\u0027 \u0027\\u00DE\u0027\n Many other Unicode characters are uppercase too. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isUpperCase(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isTitleCase(int)\"\u003e\u003ccode\u003eisTitleCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#toUpperCase(int)\"\u003e\u003ccode\u003etoUpperCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#getType(int)\"\u003e\u003ccode\u003egetType(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is uppercase; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isUpperCase",
      "comment": "Determines if the specified character (Unicode code point) is an uppercase character. A character is uppercase if its general category type, provided by getType(codePoint), is UPPERCASE_LETTER, or it has contributory property Other_Uppercase as defined by the Unicode Standard. The following are examples of uppercase characters:  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n \u0027\\u00C0\u0027 \u0027\\u00C1\u0027 \u0027\\u00C2\u0027 \u0027\\u00C3\u0027 \u0027\\u00C4\u0027 \u0027\\u00C5\u0027 \u0027\\u00C6\u0027 \u0027\\u00C7\u0027\n \u0027\\u00C8\u0027 \u0027\\u00C9\u0027 \u0027\\u00CA\u0027 \u0027\\u00CB\u0027 \u0027\\u00CC\u0027 \u0027\\u00CD\u0027 \u0027\\u00CE\u0027 \u0027\\u00CF\u0027\n \u0027\\u00D0\u0027 \u0027\\u00D1\u0027 \u0027\\u00D2\u0027 \u0027\\u00D3\u0027 \u0027\\u00D4\u0027 \u0027\\u00D5\u0027 \u0027\\u00D6\u0027 \u0027\\u00D8\u0027\n \u0027\\u00D9\u0027 \u0027\\u00DA\u0027 \u0027\\u00DB\u0027 \u0027\\u00DC\u0027 \u0027\\u00DD\u0027 \u0027\\u00DE\u0027\n Many other Unicode characters are uppercase too.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isTitleCase(int)\"\u003e\u003ccode\u003eisTitleCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#toUpperCase(int)\"\u003e\u003ccode\u003etoUpperCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#getType(int)\"\u003e\u003ccode\u003egetType(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is uppercase; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isTitleCase",
      "comment": "Determines if the specified character is a titlecase character. A character is a titlecase character if its general category type, provided by Character.getType(ch), is TITLECASE_LETTER. Some characters look like pairs of Latin letters. For example, there is an uppercase letter that looks like \"LJ\" and has a corresponding lowercase letter that looks like \"lj\". A third form, which looks like \"Lj\", is the appropriate form to use when rendering a word in lowercase with initial capitals, as for a book title. These are some of the Unicode characters for which this method returns true: LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON LATIN CAPITAL LETTER L WITH SMALL LETTER J LATIN CAPITAL LETTER N WITH SMALL LETTER J LATIN CAPITAL LETTER D WITH SMALL LETTER Z Many other Unicode characters are titlecase too. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isTitleCase(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUpperCase(int)\"\u003e\u003ccode\u003eisUpperCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#toTitleCase(int)\"\u003e\u003ccode\u003etoTitleCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#getType(int)\"\u003e\u003ccode\u003egetType(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is titlecase; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isTitleCase",
      "comment": "Determines if the specified character (Unicode code point) is a titlecase character. A character is a titlecase character if its general category type, provided by getType(codePoint), is TITLECASE_LETTER. Some characters look like pairs of Latin letters. For example, there is an uppercase letter that looks like \"LJ\" and has a corresponding lowercase letter that looks like \"lj\". A third form, which looks like \"Lj\", is the appropriate form to use when rendering a word in lowercase with initial capitals, as for a book title. These are some of the Unicode characters for which this method returns true: LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON LATIN CAPITAL LETTER L WITH SMALL LETTER J LATIN CAPITAL LETTER N WITH SMALL LETTER J LATIN CAPITAL LETTER D WITH SMALL LETTER Z Many other Unicode characters are titlecase too.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUpperCase(int)\"\u003e\u003ccode\u003eisUpperCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#toTitleCase(int)\"\u003e\u003ccode\u003etoTitleCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#getType(int)\"\u003e\u003ccode\u003egetType(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is titlecase; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isDigit",
      "comment": "Determines if the specified character is a digit. A character is a digit if its general category type, provided by Character.getType(ch), is DECIMAL_DIGIT_NUMBER. Some Unicode character ranges that contain digits: \u0027\\u0030\u0027 through \u0027\\u0039\u0027, ISO-LATIN-1 digits (\u00270\u0027 through \u00279\u0027) \u0027\\u0660\u0027 through \u0027\\u0669\u0027, Arabic-Indic digits \u0027\\u06F0\u0027 through \u0027\\u06F9\u0027, Extended Arabic-Indic digits \u0027\\u0966\u0027 through \u0027\\u096F\u0027, Devanagari digits \u0027\\uFF10\u0027 through \u0027\\uFF19\u0027, Fullwidth digits Many other character ranges contain digits as well. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isDigit(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#digit(int,int)\"\u003e\u003ccode\u003edigit(char, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#forDigit(int,int)\"\u003e\u003ccode\u003eforDigit(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#getType(int)\"\u003e\u003ccode\u003egetType(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a digit; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isDigit",
      "comment": "Determines if the specified character (Unicode code point) is a digit. A character is a digit if its general category type, provided by getType(codePoint), is DECIMAL_DIGIT_NUMBER. Some Unicode character ranges that contain digits: \u0027\\u0030\u0027 through \u0027\\u0039\u0027, ISO-LATIN-1 digits (\u00270\u0027 through \u00279\u0027) \u0027\\u0660\u0027 through \u0027\\u0669\u0027, Arabic-Indic digits \u0027\\u06F0\u0027 through \u0027\\u06F9\u0027, Extended Arabic-Indic digits \u0027\\u0966\u0027 through \u0027\\u096F\u0027, Devanagari digits \u0027\\uFF10\u0027 through \u0027\\uFF19\u0027, Fullwidth digits Many other character ranges contain digits as well.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#forDigit(int,int)\"\u003e\u003ccode\u003eforDigit(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#getType(int)\"\u003e\u003ccode\u003egetType(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a digit; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isDefined",
      "comment": "Determines if a character is defined in Unicode. A character is defined if at least one of the following is true: It has an entry in the UnicodeData file. It has a value in a range defined by the UnicodeData file. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isDefined(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isDigit(int)\"\u003e\u003ccode\u003eisDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetter(int)\"\u003e\u003ccode\u003eisLetter(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(int)\"\u003e\u003ccode\u003eisLetterOrDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isTitleCase(int)\"\u003e\u003ccode\u003eisTitleCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUpperCase(int)\"\u003e\u003ccode\u003eisUpperCase(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character has a defined meaning in Unicode; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isDefined",
      "comment": "Determines if a character (Unicode code point) is defined in Unicode. A character is defined if at least one of the following is true: It has an entry in the UnicodeData file. It has a value in a range defined by the UnicodeData file.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isDigit(int)\"\u003e\u003ccode\u003eisDigit(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetter(int)\"\u003e\u003ccode\u003eisLetter(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(int)\"\u003e\u003ccode\u003eisLetterOrDigit(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isTitleCase(int)\"\u003e\u003ccode\u003eisTitleCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUpperCase(int)\"\u003e\u003ccode\u003eisUpperCase(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character has a defined meaning in Unicode; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isLetter",
      "comment": "Determines if the specified character is a letter. A character is considered to be a letter if its general category type, provided by Character.getType(ch), is any of the following: UPPERCASE_LETTER LOWERCASE_LETTER TITLECASE_LETTER MODIFIER_LETTER OTHER_LETTER Not all letters have case. Many characters are letters but are neither uppercase nor lowercase nor titlecase. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isLetter(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isDigit(int)\"\u003e\u003ccode\u003eisDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierStart(int)\"\u003e\u003ccode\u003eisJavaIdentifierStart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaLetter(char)\"\u003e\u003ccode\u003eisJavaLetter(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaLetterOrDigit(char)\"\u003e\u003ccode\u003eisJavaLetterOrDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(int)\"\u003e\u003ccode\u003eisLetterOrDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isTitleCase(int)\"\u003e\u003ccode\u003eisTitleCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierStart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierStart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUpperCase(int)\"\u003e\u003ccode\u003eisUpperCase(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a letter; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isLetter",
      "comment": "Determines if the specified character (Unicode code point) is a letter. A character is considered to be a letter if its general category type, provided by getType(codePoint), is any of the following: UPPERCASE_LETTER LOWERCASE_LETTER TITLECASE_LETTER MODIFIER_LETTER OTHER_LETTER Not all letters have case. Many characters are letters but are neither uppercase nor lowercase nor titlecase.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isDigit(int)\"\u003e\u003ccode\u003eisDigit(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierStart(int)\"\u003e\u003ccode\u003eisJavaIdentifierStart(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(int)\"\u003e\u003ccode\u003eisLetterOrDigit(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isTitleCase(int)\"\u003e\u003ccode\u003eisTitleCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierStart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierStart(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUpperCase(int)\"\u003e\u003ccode\u003eisUpperCase(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a letter; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isLetterOrDigit",
      "comment": "Determines if the specified character is a letter or digit. A character is considered to be a letter or digit if either Character.isLetter(char ch) or Character.isDigit(char ch) returns true for the character. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isLetterOrDigit(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isDigit(int)\"\u003e\u003ccode\u003eisDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(int)\"\u003e\u003ccode\u003eisJavaIdentifierPart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaLetter(char)\"\u003e\u003ccode\u003eisJavaLetter(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaLetterOrDigit(char)\"\u003e\u003ccode\u003eisJavaLetterOrDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetter(int)\"\u003e\u003ccode\u003eisLetter(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierPart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierPart(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a letter or digit; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isLetterOrDigit",
      "comment": "Determines if the specified character (Unicode code point) is a letter or digit. A character is considered to be a letter or digit if either isLetter(codePoint) or isDigit(codePoint) returns true for the character.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isDigit(int)\"\u003e\u003ccode\u003eisDigit(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(int)\"\u003e\u003ccode\u003eisJavaIdentifierPart(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetter(int)\"\u003e\u003ccode\u003eisLetter(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierPart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierPart(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a letter or digit; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isJavaLetter",
      "comment": "Determines if the specified character is permissible as the first character in a Java identifier. A character may start a Java identifier if and only if one of the following conditions is true: isLetter(ch) returns true getType(ch) returns LETTER_NUMBER ch is a currency symbol (such as \u0027$\u0027) ch is a connecting punctuation character (such as \u0027_\u0027).",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "1.1"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaLetterOrDigit(char)\"\u003e\u003ccode\u003eisJavaLetterOrDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierStart(int)\"\u003e\u003ccode\u003eisJavaIdentifierStart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(int)\"\u003e\u003ccode\u003eisJavaIdentifierPart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetter(int)\"\u003e\u003ccode\u003eisLetter(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(int)\"\u003e\u003ccode\u003eisLetterOrDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierStart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierStart(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character may start a Java identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isJavaLetterOrDigit",
      "comment": "Determines if the specified character may be part of a Java identifier as other than the first character. A character may be part of a Java identifier if and only if one of the following conditions is true: it is a letter it is a currency symbol (such as \u0027$\u0027) it is a connecting punctuation character (such as \u0027_\u0027) it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for the character.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "1.1"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaLetter(char)\"\u003e\u003ccode\u003eisJavaLetter(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierStart(int)\"\u003e\u003ccode\u003eisJavaIdentifierStart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(int)\"\u003e\u003ccode\u003eisJavaIdentifierPart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetter(int)\"\u003e\u003ccode\u003eisLetter(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(int)\"\u003e\u003ccode\u003eisLetterOrDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierPart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierPart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isIdentifierIgnorable(int)\"\u003e\u003ccode\u003eisIdentifierIgnorable(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character may be part of a Java identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isAlphabetic",
      "comment": "Determines if the specified character (Unicode code point) is alphabetic. A character is considered to be alphabetic if its general category type, provided by getType(codePoint), is any of the following: UPPERCASE_LETTER LOWERCASE_LETTER TITLECASE_LETTER MODIFIER_LETTER OTHER_LETTER LETTER_NUMBER or it has contributory property Other_Alphabetic as defined by the Unicode Standard.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a Unicode alphabet character, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isIdeographic",
      "comment": "Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a Unicode ideograph character, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isJavaIdentifierStart",
      "comment": "Determines if the specified character is permissible as the first character in a Java identifier. A character may start a Java identifier if and only if one of the following conditions is true: isLetter(ch) returns true getType(ch) returns LETTER_NUMBER ch is a currency symbol (such as \u0027$\u0027) ch is a connecting punctuation character (such as \u0027_\u0027). Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isJavaIdentifierStart(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(int)\"\u003e\u003ccode\u003eisJavaIdentifierPart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetter(int)\"\u003e\u003ccode\u003eisLetter(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierStart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierStart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/SourceVersion.html#isIdentifier(java.lang.CharSequence)\"\u003e\u003ccode\u003eSourceVersion.isIdentifier(CharSequence)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character may start a Java identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isJavaIdentifierStart",
      "comment": "Determines if the character (Unicode code point) is permissible as the first character in a Java identifier. A character may start a Java identifier if and only if one of the following conditions is true: isLetter(codePoint) returns true getType(codePoint) returns LETTER_NUMBER the referenced character is a currency symbol (such as \u0027$\u0027) the referenced character is a connecting punctuation character (such as \u0027_\u0027).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(int)\"\u003e\u003ccode\u003eisJavaIdentifierPart(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetter(int)\"\u003e\u003ccode\u003eisLetter(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierStart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierStart(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/SourceVersion.html#isIdentifier(java.lang.CharSequence)\"\u003e\u003ccode\u003eSourceVersion.isIdentifier(CharSequence)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character may start a Java identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isJavaIdentifierPart",
      "comment": "Determines if the specified character may be part of a Java identifier as other than the first character. A character may be part of a Java identifier if any of the following conditions are true: it is a letter it is a currency symbol (such as \u0027$\u0027) it is a connecting punctuation character (such as \u0027_\u0027) it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for the character Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isJavaIdentifierPart(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isIdentifierIgnorable(int)\"\u003e\u003ccode\u003eisIdentifierIgnorable(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierStart(int)\"\u003e\u003ccode\u003eisJavaIdentifierStart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(int)\"\u003e\u003ccode\u003eisLetterOrDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierPart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierPart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/SourceVersion.html#isIdentifier(java.lang.CharSequence)\"\u003e\u003ccode\u003eSourceVersion.isIdentifier(CharSequence)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character may be part of a Java identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isJavaIdentifierPart",
      "comment": "Determines if the character (Unicode code point) may be part of a Java identifier as other than the first character. A character may be part of a Java identifier if any of the following conditions are true: it is a letter it is a currency symbol (such as \u0027$\u0027) it is a connecting punctuation character (such as \u0027_\u0027) it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable(codePoint) returns true for the code point",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isIdentifierIgnorable(int)\"\u003e\u003ccode\u003eisIdentifierIgnorable(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierStart(int)\"\u003e\u003ccode\u003eisJavaIdentifierStart(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(int)\"\u003e\u003ccode\u003eisLetterOrDigit(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierPart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierPart(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.compiler/javax/lang/model/SourceVersion.html#isIdentifier(java.lang.CharSequence)\"\u003e\u003ccode\u003eSourceVersion.isIdentifier(CharSequence)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character may be part of a Java identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isUnicodeIdentifierStart",
      "comment": "Determines if the specified character is permissible as the first character in a Unicode identifier. A character may start a Unicode identifier if and only if one of the following conditions is true: isLetter(ch) returns true getType(ch) returns LETTER_NUMBER. it is an Other_ID_Start character. This method conforms to UAX31-R1: Default Identifiers requirement of the Unicode Standard, with the following profile of UAX31:  Start :\u003d ID_Start + \u0027VERTICAL TILDE\u0027 (U+2E2F)\n \u0027VERTICAL TILDE\u0027 is added to Start for backward compatibility. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isUnicodeIdentifierStart(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierStart(int)\"\u003e\u003ccode\u003eisJavaIdentifierStart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetter(int)\"\u003e\u003ccode\u003eisLetter(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierPart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierPart(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character may start a Unicode identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isUnicodeIdentifierStart",
      "comment": "Determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier. A character may start a Unicode identifier if and only if one of the following conditions is true: isLetter(codePoint) returns true getType(codePoint) returns LETTER_NUMBER. it is an Other_ID_Start character. This method conforms to UAX31-R1: Default Identifiers requirement of the Unicode Standard, with the following profile of UAX31:  Start :\u003d ID_Start + \u0027VERTICAL TILDE\u0027 (U+2E2F)\n \u0027VERTICAL TILDE\u0027 is added to Start for backward compatibility.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierStart(int)\"\u003e\u003ccode\u003eisJavaIdentifierStart(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetter(int)\"\u003e\u003ccode\u003eisLetter(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierPart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierPart(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character may start a Unicode identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isUnicodeIdentifierPart",
      "comment": "Determines if the specified character may be part of a Unicode identifier as other than the first character. A character may be part of a Unicode identifier if and only if one of the following statements is true: it is a letter it is a connecting punctuation character (such as \u0027_\u0027) it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for this character. it is an Other_ID_Start character. it is an Other_ID_Continue character. This method conforms to UAX31-R1: Default Identifiers requirement of the Unicode Standard, with the following profile of UAX31:  Continue :\u003d Start + ID_Continue + ignorable\n Medial :\u003d empty\n ignorable :\u003d isIdentifierIgnorable(char) returns true for the character\n ignorable is added to Continue for backward compatibility. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isUnicodeIdentifierPart(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isIdentifierIgnorable(int)\"\u003e\u003ccode\u003eisIdentifierIgnorable(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(int)\"\u003e\u003ccode\u003eisJavaIdentifierPart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(int)\"\u003e\u003ccode\u003eisLetterOrDigit(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierStart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierStart(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character may be part of a Unicode identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isUnicodeIdentifierPart",
      "comment": "Determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character. A character may be part of a Unicode identifier if and only if one of the following statements is true: it is a letter it is a connecting punctuation character (such as \u0027_\u0027) it is a digit it is a numeric letter (such as a Roman numeral character) it is a combining mark it is a non-spacing mark isIdentifierIgnorable returns true for this character. it is an Other_ID_Start character. it is an Other_ID_Continue character. This method conforms to UAX31-R1: Default Identifiers requirement of the Unicode Standard, with the following profile of UAX31:  Continue :\u003d Start + ID_Continue + ignorable\n Medial :\u003d empty\n ignorable :\u003d isIdentifierIgnorable(int) returns true for the character\n ignorable is added to Continue for backward compatibility.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isIdentifierIgnorable(int)\"\u003e\u003ccode\u003eisIdentifierIgnorable(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(int)\"\u003e\u003ccode\u003eisJavaIdentifierPart(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLetterOrDigit(int)\"\u003e\u003ccode\u003eisLetterOrDigit(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierStart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierStart(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character may be part of a Unicode identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isIdentifierIgnorable",
      "comment": "Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier. The following Unicode characters are ignorable in a Java identifier or a Unicode identifier: ISO control characters that are not whitespace \u0027\\u0000\u0027 through \u0027\\u0008\u0027 \u0027\\u000E\u0027 through \u0027\\u001B\u0027 \u0027\\u007F\u0027 through \u0027\\u009F\u0027 all characters that have the FORMAT general category value Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isIdentifierIgnorable(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(int)\"\u003e\u003ccode\u003eisJavaIdentifierPart(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierPart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierPart(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is an ignorable control character that may be part of a Java or Unicode identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isIdentifierIgnorable",
      "comment": "Determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier. The following Unicode characters are ignorable in a Java identifier or a Unicode identifier: ISO control characters that are not whitespace \u0027\\u0000\u0027 through \u0027\\u0008\u0027 \u0027\\u000E\u0027 through \u0027\\u001B\u0027 \u0027\\u007F\u0027 through \u0027\\u009F\u0027 all characters that have the FORMAT general category value",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isJavaIdentifierPart(int)\"\u003e\u003ccode\u003eisJavaIdentifierPart(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUnicodeIdentifierPart(int)\"\u003e\u003ccode\u003eisUnicodeIdentifierPart(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is an ignorable control character that may be part of a Java or Unicode identifier; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toLowerCase",
      "comment": "Converts the character argument to lowercase using case mapping information from the UnicodeData file. Note that Character.isLowerCase(Character.toLowerCase(ch)) does not always return true for some ranges of characters, particularly those that are symbols or ideographs. In general, String.toLowerCase() should be used to map characters to lowercase. String case mapping methods have several benefits over Character case mapping methods. String case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the Character case mapping methods cannot. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the toLowerCase(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toLowerCase()\"\u003e\u003ccode\u003eString.toLowerCase()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be converted."
        ],
        "return": [
          "the lowercase equivalent of the character, if any; otherwise, the character itself."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toLowerCase",
      "comment": "Converts the character (Unicode code point) argument to lowercase using case mapping information from the UnicodeData file. Note that Character.isLowerCase(Character.toLowerCase(codePoint)) does not always return true for some ranges of characters, particularly those that are symbols or ideographs. In general, String.toLowerCase() should be used to map characters to lowercase. String case mapping methods have several benefits over Character case mapping methods. String case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the Character case mapping methods cannot.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isLowerCase(int)\"\u003e\u003ccode\u003eisLowerCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toLowerCase()\"\u003e\u003ccode\u003eString.toLowerCase()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be converted."
        ],
        "return": [
          "the lowercase equivalent of the character (Unicode code point), if any; otherwise, the character itself."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toUpperCase",
      "comment": "Converts the character argument to uppercase using case mapping information from the UnicodeData file. Note that Character.isUpperCase(Character.toUpperCase(ch)) does not always return true for some ranges of characters, particularly those that are symbols or ideographs. In general, String.toUpperCase() should be used to map characters to uppercase. String case mapping methods have several benefits over Character case mapping methods. String case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the Character case mapping methods cannot. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the toUpperCase(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUpperCase(int)\"\u003e\u003ccode\u003eisUpperCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toUpperCase()\"\u003e\u003ccode\u003eString.toUpperCase()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be converted."
        ],
        "return": [
          "the uppercase equivalent of the character, if any; otherwise, the character itself."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toUpperCase",
      "comment": "Converts the character (Unicode code point) argument to uppercase using case mapping information from the UnicodeData file. Note that Character.isUpperCase(Character.toUpperCase(codePoint)) does not always return true for some ranges of characters, particularly those that are symbols or ideographs. In general, String.toUpperCase() should be used to map characters to uppercase. String case mapping methods have several benefits over Character case mapping methods. String case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the Character case mapping methods cannot.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isUpperCase(int)\"\u003e\u003ccode\u003eisUpperCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toUpperCase()\"\u003e\u003ccode\u003eString.toUpperCase()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be converted."
        ],
        "return": [
          "the uppercase equivalent of the character, if any; otherwise, the character itself."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toTitleCase",
      "comment": "Converts the character argument to titlecase using case mapping information from the UnicodeData file. If a character has no explicit titlecase mapping and is not itself a titlecase char according to UnicodeData, then the uppercase mapping is returned as an equivalent titlecase mapping. If the char argument is already a titlecase char, the same char value will be returned. Note that Character.isTitleCase(Character.toTitleCase(ch)) does not always return true for some ranges of characters. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the toTitleCase(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isTitleCase(int)\"\u003e\u003ccode\u003eisTitleCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#toLowerCase(int)\"\u003e\u003ccode\u003etoLowerCase(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#toUpperCase(int)\"\u003e\u003ccode\u003etoUpperCase(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be converted."
        ],
        "return": [
          "the titlecase equivalent of the character, if any; otherwise, the character itself."
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toTitleCase",
      "comment": "Converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file. If a character has no explicit titlecase mapping and is not itself a titlecase char according to UnicodeData, then the uppercase mapping is returned as an equivalent titlecase mapping. If the character argument is already a titlecase character, the same character value will be returned. Note that Character.isTitleCase(Character.toTitleCase(codePoint)) does not always return true for some ranges of characters.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isTitleCase(int)\"\u003e\u003ccode\u003eisTitleCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#toLowerCase(int)\"\u003e\u003ccode\u003etoLowerCase(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#toUpperCase(int)\"\u003e\u003ccode\u003etoUpperCase(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be converted."
        ],
        "return": [
          "the titlecase equivalent of the character, if any; otherwise, the character itself."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "digit",
      "comment": "Returns the numeric value of the character ch in the specified radix. If the radix is not in the range MIN_RADIX ≤ radix ≤ MAX_RADIX or if the value of ch is not a valid digit in the specified radix, -1 is returned. A character is a valid digit if at least one of the following is true: The method isDigit is true of the character and the Unicode decimal digit value of the character (or its single-character decomposition) is less than the specified radix. In this case the decimal digit value is returned. The character is one of the uppercase Latin letters \u0027A\u0027 through \u0027Z\u0027 and its code is less than radix + \u0027A\u0027 - 10. In this case, ch - \u0027A\u0027 + 10 is returned. The character is one of the lowercase Latin letters \u0027a\u0027 through \u0027z\u0027 and its code is less than radix + \u0027a\u0027 - 10. In this case, ch - \u0027a\u0027 + 10 is returned. The character is one of the fullwidth uppercase Latin letters A (\u0027\\uFF21\u0027) through Z (\u0027\\uFF3A\u0027) and its code is less than radix + \u0027\\uFF21\u0027 - 10. In this case, ch - \u0027\\uFF21\u0027 + 10 is returned. The character is one of the fullwidth lowercase Latin letters a (\u0027\\uFF41\u0027) through z (\u0027\\uFF5A\u0027) and its code is less than radix + \u0027\\uFF41\u0027 - 10. In this case, ch - \u0027\\uFF41\u0027 + 10 is returned. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the digit(int, int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#forDigit(int,int)\"\u003e\u003ccode\u003eforDigit(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isDigit(int)\"\u003e\u003ccode\u003eisDigit(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be converted.",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix."
        ],
        "return": [
          "the numeric value represented by the character in the specified radix."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "digit",
      "comment": "Returns the numeric value of the specified character (Unicode code point) in the specified radix. If the radix is not in the range MIN_RADIX ≤ radix ≤ MAX_RADIX or if the character is not a valid digit in the specified radix, -1 is returned. A character is a valid digit if at least one of the following is true: The method isDigit(codePoint) is true of the character and the Unicode decimal digit value of the character (or its single-character decomposition) is less than the specified radix. In this case the decimal digit value is returned. The character is one of the uppercase Latin letters \u0027A\u0027 through \u0027Z\u0027 and its code is less than radix + \u0027A\u0027 - 10. In this case, codePoint - \u0027A\u0027 + 10 is returned. The character is one of the lowercase Latin letters \u0027a\u0027 through \u0027z\u0027 and its code is less than radix + \u0027a\u0027 - 10. In this case, codePoint - \u0027a\u0027 + 10 is returned. The character is one of the fullwidth uppercase Latin letters A (\u0027\\uFF21\u0027) through Z (\u0027\\uFF3A\u0027) and its code is less than radix + \u0027\\uFF21\u0027 - 10. In this case, codePoint - \u0027\\uFF21\u0027 + 10 is returned. The character is one of the fullwidth lowercase Latin letters a (\u0027\\uFF41\u0027) through z (\u0027\\uFF5A\u0027) and its code is less than radix + \u0027\\uFF41\u0027- 10. In this case, codePoint - \u0027\\uFF41\u0027 + 10 is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#forDigit(int,int)\"\u003e\u003ccode\u003eforDigit(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isDigit(int)\"\u003e\u003ccode\u003eisDigit(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be converted.",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix."
        ],
        "return": [
          "the numeric value represented by the character in the specified radix."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getNumericValue",
      "comment": "Returns the int value that the specified Unicode character represents. For example, the character \u0027\\u216C\u0027 (the roman numeral fifty) will return an int with a value of 50. The letters A-Z in their uppercase (\u0027\\u0041\u0027 through \u0027\\u005A\u0027), lowercase (\u0027\\u0061\u0027 through \u0027\\u007A\u0027), and full width variant (\u0027\\uFF21\u0027 through \u0027\\uFF3A\u0027 and \u0027\\uFF41\u0027 through \u0027\\uFF5A\u0027) forms have numeric values from 10 through 35. This is independent of the Unicode specification, which does not assign numeric values to these char values. If the character does not have a numeric value, then -1 is returned. If the character has a numeric value that cannot be represented as a nonnegative integer (for example, a fractional value), then -2 is returned. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the getNumericValue(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#forDigit(int,int)\"\u003e\u003ccode\u003eforDigit(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isDigit(int)\"\u003e\u003ccode\u003eisDigit(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be converted."
        ],
        "return": [
          "the numeric value of the character, as a nonnegative \n\u003ccode\u003eint\u003c/code\u003e value; -2 if the character has a numeric value but the value can not be represented as a nonnegative \n\u003ccode\u003eint\u003c/code\u003e value; -1 if the character has no numeric value."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getNumericValue",
      "comment": "Returns the int value that the specified character (Unicode code point) represents. For example, the character \u0027\\u216C\u0027 (the Roman numeral fifty) will return an int with a value of 50. The letters A-Z in their uppercase (\u0027\\u0041\u0027 through \u0027\\u005A\u0027), lowercase (\u0027\\u0061\u0027 through \u0027\\u007A\u0027), and full width variant (\u0027\\uFF21\u0027 through \u0027\\uFF3A\u0027 and \u0027\\uFF41\u0027 through \u0027\\uFF5A\u0027) forms have numeric values from 10 through 35. This is independent of the Unicode specification, which does not assign numeric values to these char values. If the character does not have a numeric value, then -1 is returned. If the character has a numeric value that cannot be represented as a nonnegative integer (for example, a fractional value), then -2 is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#forDigit(int,int)\"\u003e\u003ccode\u003eforDigit(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isDigit(int)\"\u003e\u003ccode\u003eisDigit(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be converted."
        ],
        "return": [
          "the numeric value of the character, as a nonnegative \n\u003ccode\u003eint\u003c/code\u003e value; -2 if the character has a numeric value but the value can not be represented as a nonnegative \n\u003ccode\u003eint\u003c/code\u003e value; -1 if the character has no numeric value."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isSpace",
      "comment": "Determines if the specified character is ISO-LATIN-1 white space. This method returns true for the following five characters only: truechars Character Code Name \u0027\\t\u0027 U+0009 HORIZONTAL TABULATION \u0027\\n\u0027 U+000A NEW LINE \u0027\\f\u0027 U+000C FORM FEED \u0027\\r\u0027 U+000D CARRIAGE RETURN \u0027 \u0027 U+0020 SPACE",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "1.1"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isSpaceChar(int)\"\u003e\u003ccode\u003eisSpaceChar(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003e\u003ccode\u003eisWhitespace(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is ISO-LATIN-1 white space; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isSpaceChar",
      "comment": "Determines if the specified character is a Unicode space character. A character is considered to be a space character if and only if it is specified to be a space character by the Unicode Standard. This method returns true if the character\u0027s general category type is any of the following: SPACE_SEPARATOR LINE_SEPARATOR PARAGRAPH_SEPARATOR Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isSpaceChar(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003e\u003ccode\u003eisWhitespace(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a space character; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isSpaceChar",
      "comment": "Determines if the specified character (Unicode code point) is a Unicode space character. A character is considered to be a space character if and only if it is specified to be a space character by the Unicode Standard. This method returns true if the character\u0027s general category type is any of the following: SPACE_SEPARATOR LINE_SEPARATOR PARAGRAPH_SEPARATOR",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003e\u003ccode\u003eisWhitespace(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a space character; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isWhitespace",
      "comment": "Determines if the specified character is white space according to Java. A character is a Java whitespace character if and only if it satisfies one of the following criteria: It is a Unicode space character (SPACE_SEPARATOR, LINE_SEPARATOR, or PARAGRAPH_SEPARATOR) but is not also a non-breaking space (\u0027\\u00A0\u0027, \u0027\\u2007\u0027, \u0027\\u202F\u0027). It is \u0027\\t\u0027, U+0009 HORIZONTAL TABULATION. It is \u0027\\n\u0027, U+000A LINE FEED. It is \u0027\\u000B\u0027, U+000B VERTICAL TABULATION. It is \u0027\\f\u0027, U+000C FORM FEED. It is \u0027\\r\u0027, U+000D CARRIAGE RETURN. It is \u0027\\u001C\u0027, U+001C FILE SEPARATOR. It is \u0027\\u001D\u0027, U+001D GROUP SEPARATOR. It is \u0027\\u001E\u0027, U+001E RECORD SEPARATOR. It is \u0027\\u001F\u0027, U+001F UNIT SEPARATOR. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isWhitespace(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isSpaceChar(int)\"\u003e\u003ccode\u003eisSpaceChar(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a Java whitespace character; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isWhitespace",
      "comment": "Determines if the specified character (Unicode code point) is white space according to Java. A character is a Java whitespace character if and only if it satisfies one of the following criteria: It is a Unicode space character (SPACE_SEPARATOR, LINE_SEPARATOR, or PARAGRAPH_SEPARATOR) but is not also a non-breaking space (\u0027\\u00A0\u0027, \u0027\\u2007\u0027, \u0027\\u202F\u0027). It is \u0027\\t\u0027, U+0009 HORIZONTAL TABULATION. It is \u0027\\n\u0027, U+000A LINE FEED. It is \u0027\\u000B\u0027, U+000B VERTICAL TABULATION. It is \u0027\\f\u0027, U+000C FORM FEED. It is \u0027\\r\u0027, U+000D CARRIAGE RETURN. It is \u0027\\u001C\u0027, U+001C FILE SEPARATOR. It is \u0027\\u001D\u0027, U+001D GROUP SEPARATOR. It is \u0027\\u001E\u0027, U+001E RECORD SEPARATOR. It is \u0027\\u001F\u0027, U+001F UNIT SEPARATOR.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isSpaceChar(int)\"\u003e\u003ccode\u003eisSpaceChar(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is a Java whitespace character; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isISOControl",
      "comment": "Determines if the specified character is an ISO control character. A character is considered to be an ISO control character if its code is in the range \u0027\\u0000\u0027 through \u0027\\u001F\u0027 or in the range \u0027\\u007F\u0027 through \u0027\\u009F\u0027. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isISOControl(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isSpaceChar(int)\"\u003e\u003ccode\u003eisSpaceChar(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003e\u003ccode\u003eisWhitespace(char)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is an ISO control character; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isISOControl",
      "comment": "Determines if the referenced character (Unicode code point) is an ISO control character. A character is considered to be an ISO control character if its code is in the range \u0027\\u0000\u0027 through \u0027\\u001F\u0027 or in the range \u0027\\u007F\u0027 through \u0027\\u009F\u0027.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isSpaceChar(int)\"\u003e\u003ccode\u003eisSpaceChar(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003e\u003ccode\u003eisWhitespace(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is an ISO control character; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getType",
      "comment": "Returns a value indicating a character\u0027s general category. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the getType(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#COMBINING_SPACING_MARK\"\u003e\u003ccode\u003eCOMBINING_SPACING_MARK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#CONNECTOR_PUNCTUATION\"\u003e\u003ccode\u003eCONNECTOR_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#CONTROL\"\u003e\u003ccode\u003eCONTROL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#CURRENCY_SYMBOL\"\u003e\u003ccode\u003eCURRENCY_SYMBOL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DASH_PUNCTUATION\"\u003e\u003ccode\u003eDASH_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DECIMAL_DIGIT_NUMBER\"\u003e\u003ccode\u003eDECIMAL_DIGIT_NUMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#ENCLOSING_MARK\"\u003e\u003ccode\u003eENCLOSING_MARK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#END_PUNCTUATION\"\u003e\u003ccode\u003eEND_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#FINAL_QUOTE_PUNCTUATION\"\u003e\u003ccode\u003eFINAL_QUOTE_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#FORMAT\"\u003e\u003ccode\u003eFORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#INITIAL_QUOTE_PUNCTUATION\"\u003e\u003ccode\u003eINITIAL_QUOTE_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#LETTER_NUMBER\"\u003e\u003ccode\u003eLETTER_NUMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#LINE_SEPARATOR\"\u003e\u003ccode\u003eLINE_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#LOWERCASE_LETTER\"\u003e\u003ccode\u003eLOWERCASE_LETTER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MATH_SYMBOL\"\u003e\u003ccode\u003eMATH_SYMBOL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MODIFIER_LETTER\"\u003e\u003ccode\u003eMODIFIER_LETTER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MODIFIER_SYMBOL\"\u003e\u003ccode\u003eMODIFIER_SYMBOL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#NON_SPACING_MARK\"\u003e\u003ccode\u003eNON_SPACING_MARK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#OTHER_LETTER\"\u003e\u003ccode\u003eOTHER_LETTER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#OTHER_NUMBER\"\u003e\u003ccode\u003eOTHER_NUMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#OTHER_PUNCTUATION\"\u003e\u003ccode\u003eOTHER_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#OTHER_SYMBOL\"\u003e\u003ccode\u003eOTHER_SYMBOL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#PARAGRAPH_SEPARATOR\"\u003e\u003ccode\u003ePARAGRAPH_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#PRIVATE_USE\"\u003e\u003ccode\u003ePRIVATE_USE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#SPACE_SEPARATOR\"\u003e\u003ccode\u003eSPACE_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#START_PUNCTUATION\"\u003e\u003ccode\u003eSTART_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#SURROGATE\"\u003e\u003ccode\u003eSURROGATE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#TITLECASE_LETTER\"\u003e\u003ccode\u003eTITLECASE_LETTER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#UNASSIGNED\"\u003e\u003ccode\u003eUNASSIGNED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#UPPERCASE_LETTER\"\u003e\u003ccode\u003eUPPERCASE_LETTER\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - the character to be tested."
        ],
        "return": [
          "a value of type \n\u003ccode\u003eint\u003c/code\u003e representing the character\u0027s general category."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getType",
      "comment": "Returns a value indicating a character\u0027s general category.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#COMBINING_SPACING_MARK\"\u003e\u003ccode\u003eCOMBINING_SPACING_MARK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#CONNECTOR_PUNCTUATION\"\u003e\u003ccode\u003eCONNECTOR_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#CONTROL\"\u003e\u003ccode\u003eCONTROL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#CURRENCY_SYMBOL\"\u003e\u003ccode\u003eCURRENCY_SYMBOL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DASH_PUNCTUATION\"\u003e\u003ccode\u003eDASH_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DECIMAL_DIGIT_NUMBER\"\u003e\u003ccode\u003eDECIMAL_DIGIT_NUMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#ENCLOSING_MARK\"\u003e\u003ccode\u003eENCLOSING_MARK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#END_PUNCTUATION\"\u003e\u003ccode\u003eEND_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#FINAL_QUOTE_PUNCTUATION\"\u003e\u003ccode\u003eFINAL_QUOTE_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#FORMAT\"\u003e\u003ccode\u003eFORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#INITIAL_QUOTE_PUNCTUATION\"\u003e\u003ccode\u003eINITIAL_QUOTE_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#LETTER_NUMBER\"\u003e\u003ccode\u003eLETTER_NUMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#LINE_SEPARATOR\"\u003e\u003ccode\u003eLINE_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#LOWERCASE_LETTER\"\u003e\u003ccode\u003eLOWERCASE_LETTER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MATH_SYMBOL\"\u003e\u003ccode\u003eMATH_SYMBOL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MODIFIER_LETTER\"\u003e\u003ccode\u003eMODIFIER_LETTER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MODIFIER_SYMBOL\"\u003e\u003ccode\u003eMODIFIER_SYMBOL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#NON_SPACING_MARK\"\u003e\u003ccode\u003eNON_SPACING_MARK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#OTHER_LETTER\"\u003e\u003ccode\u003eOTHER_LETTER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#OTHER_NUMBER\"\u003e\u003ccode\u003eOTHER_NUMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#OTHER_PUNCTUATION\"\u003e\u003ccode\u003eOTHER_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#OTHER_SYMBOL\"\u003e\u003ccode\u003eOTHER_SYMBOL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#PARAGRAPH_SEPARATOR\"\u003e\u003ccode\u003ePARAGRAPH_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#PRIVATE_USE\"\u003e\u003ccode\u003ePRIVATE_USE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#SPACE_SEPARATOR\"\u003e\u003ccode\u003eSPACE_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#START_PUNCTUATION\"\u003e\u003ccode\u003eSTART_PUNCTUATION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#SURROGATE\"\u003e\u003ccode\u003eSURROGATE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#TITLECASE_LETTER\"\u003e\u003ccode\u003eTITLECASE_LETTER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#UNASSIGNED\"\u003e\u003ccode\u003eUNASSIGNED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#UPPERCASE_LETTER\"\u003e\u003ccode\u003eUPPERCASE_LETTER\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "a value of type \n\u003ccode\u003eint\u003c/code\u003e representing the character\u0027s general category."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "digit",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "forDigit",
      "comment": "Determines the character representation for a specific digit in the specified radix. If the value of radix is not a valid radix, or the value of digit is not a valid digit in the specified radix, the null character (\u0027\\u0000\u0027) is returned. The radix argument is valid if it is greater than or equal to MIN_RADIX and less than or equal to MAX_RADIX. The digit argument is valid if 0 \u003c\u003d digit \u003c radix. If the digit is less than 10, then \u00270\u0027 + digit is returned. Otherwise, the value \u0027a\u0027 + digit - 10 is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MIN_RADIX\"\u003e\u003ccode\u003eMIN_RADIX\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MAX_RADIX\"\u003e\u003ccode\u003eMAX_RADIX\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#digit(int,int)\"\u003e\u003ccode\u003edigit(char, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edigit\u003c/code\u003e - the number to convert to a character.",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix."
        ],
        "return": [
          "the \n\u003ccode\u003echar\u003c/code\u003e representation of the specified digit in the specified radix."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDirectionality",
      "comment": "Returns the Unicode directionality property for the given character. Character directionality is used to calculate the visual ordering of text. The directionality value of undefined char values is DIRECTIONALITY_UNDEFINED. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the getDirectionality(int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_UNDEFINED\"\u003e\u003ccode\u003eDIRECTIONALITY_UNDEFINED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT\"\u003e\u003ccode\u003eDIRECTIONALITY_LEFT_TO_RIGHT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT\"\u003e\u003ccode\u003eDIRECTIONALITY_RIGHT_TO_LEFT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC\"\u003e\u003ccode\u003eDIRECTIONALITY_RIGHT_TO_LEFT_ARABIC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER\"\u003e\u003ccode\u003eDIRECTIONALITY_EUROPEAN_NUMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR\"\u003e\u003ccode\u003eDIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR\"\u003e\u003ccode\u003eDIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_ARABIC_NUMBER\"\u003e\u003ccode\u003eDIRECTIONALITY_ARABIC_NUMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR\"\u003e\u003ccode\u003eDIRECTIONALITY_COMMON_NUMBER_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_NONSPACING_MARK\"\u003e\u003ccode\u003eDIRECTIONALITY_NONSPACING_MARK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_BOUNDARY_NEUTRAL\"\u003e\u003ccode\u003eDIRECTIONALITY_BOUNDARY_NEUTRAL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_PARAGRAPH_SEPARATOR\"\u003e\u003ccode\u003eDIRECTIONALITY_PARAGRAPH_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_SEGMENT_SEPARATOR\"\u003e\u003ccode\u003eDIRECTIONALITY_SEGMENT_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_WHITESPACE\"\u003e\u003ccode\u003eDIRECTIONALITY_WHITESPACE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_OTHER_NEUTRALS\"\u003e\u003ccode\u003eDIRECTIONALITY_OTHER_NEUTRALS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING\"\u003e\u003ccode\u003eDIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE\"\u003e\u003ccode\u003eDIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING\"\u003e\u003ccode\u003eDIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE\"\u003e\u003ccode\u003eDIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT\"\u003e\u003ccode\u003eDIRECTIONALITY_POP_DIRECTIONAL_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE\"\u003e\u003ccode\u003eDIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE\"\u003e\u003ccode\u003eDIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_FIRST_STRONG_ISOLATE\"\u003e\u003ccode\u003eDIRECTIONALITY_FIRST_STRONG_ISOLATE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE\"\u003e\u003ccode\u003eDIRECTIONALITY_POP_DIRECTIONAL_ISOLATE\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - \n\u003ccode\u003echar\u003c/code\u003e for which the directionality property is requested."
        ],
        "return": [
          "the directionality property of the \n\u003ccode\u003echar\u003c/code\u003e value."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDirectionality",
      "comment": "Returns the Unicode directionality property for the given character (Unicode code point). Character directionality is used to calculate the visual ordering of text. The directionality value of undefined character is DIRECTIONALITY_UNDEFINED.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_UNDEFINED\"\u003e\u003ccode\u003eDIRECTIONALITY_UNDEFINED\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT\"\u003e\u003ccode\u003eDIRECTIONALITY_LEFT_TO_RIGHT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT\"\u003e\u003ccode\u003eDIRECTIONALITY_RIGHT_TO_LEFT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC\"\u003e\u003ccode\u003eDIRECTIONALITY_RIGHT_TO_LEFT_ARABIC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER\"\u003e\u003ccode\u003eDIRECTIONALITY_EUROPEAN_NUMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR\"\u003e\u003ccode\u003eDIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR\"\u003e\u003ccode\u003eDIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_ARABIC_NUMBER\"\u003e\u003ccode\u003eDIRECTIONALITY_ARABIC_NUMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR\"\u003e\u003ccode\u003eDIRECTIONALITY_COMMON_NUMBER_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_NONSPACING_MARK\"\u003e\u003ccode\u003eDIRECTIONALITY_NONSPACING_MARK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_BOUNDARY_NEUTRAL\"\u003e\u003ccode\u003eDIRECTIONALITY_BOUNDARY_NEUTRAL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_PARAGRAPH_SEPARATOR\"\u003e\u003ccode\u003eDIRECTIONALITY_PARAGRAPH_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_SEGMENT_SEPARATOR\"\u003e\u003ccode\u003eDIRECTIONALITY_SEGMENT_SEPARATOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_WHITESPACE\"\u003e\u003ccode\u003eDIRECTIONALITY_WHITESPACE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_OTHER_NEUTRALS\"\u003e\u003ccode\u003eDIRECTIONALITY_OTHER_NEUTRALS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING\"\u003e\u003ccode\u003eDIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE\"\u003e\u003ccode\u003eDIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING\"\u003e\u003ccode\u003eDIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE\"\u003e\u003ccode\u003eDIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT\"\u003e\u003ccode\u003eDIRECTIONALITY_POP_DIRECTIONAL_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE\"\u003e\u003ccode\u003eDIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE\"\u003e\u003ccode\u003eDIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_FIRST_STRONG_ISOLATE\"\u003e\u003ccode\u003eDIRECTIONALITY_FIRST_STRONG_ISOLATE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE\"\u003e\u003ccode\u003eDIRECTIONALITY_POP_DIRECTIONAL_ISOLATE\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) for which the directionality property is requested."
        ],
        "return": [
          "the directionality property of the character."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isMirrored",
      "comment": "Determines whether the character is mirrored according to the Unicode specification. Mirrored characters should have their glyphs horizontally mirrored when displayed in text that is right-to-left. For example, \u0027\\u0028\u0027 LEFT PARENTHESIS is semantically defined to be an opening parenthesis. This will appear as a \"(\" in text that is left-to-right but as a \")\" in text that is right-to-left. Note: This method cannot handle supplementary characters. To support all Unicode characters, including supplementary characters, use the isMirrored(int) method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - \n\u003ccode\u003echar\u003c/code\u003e for which the mirrored property is requested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the char is mirrored, \n\u003ccode\u003efalse\u003c/code\u003e if the \n\u003ccode\u003echar\u003c/code\u003e is not mirrored or is not defined."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isMirrored",
      "comment": "Determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification. Mirrored characters should have their glyphs horizontally mirrored when displayed in text that is right-to-left. For example, \u0027\\u0028\u0027 LEFT PARENTHESIS is semantically defined to be an opening parenthesis. This will appear as a \"(\" in text that is left-to-right but as a \")\" in text that is right-to-left.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point) to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character is mirrored, \n\u003ccode\u003efalse\u003c/code\u003e if the character is not mirrored or is not defined."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Character",
            "type": "Class"
          },
          "name": "anotherCharacter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares two Character objects numerically.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html\" title\u003d\"class in java.lang\"\u003eCharacter\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eanotherCharacter\u003c/code\u003e - the \n\u003ccode\u003eCharacter\u003c/code\u003e to be compared."
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if the argument \n\u003ccode\u003eCharacter\u003c/code\u003e is equal to this \n\u003ccode\u003eCharacter\u003c/code\u003e; a value less than \n\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eCharacter\u003c/code\u003e is numerically less than the \n\u003ccode\u003eCharacter\u003c/code\u003e argument; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eCharacter\u003c/code\u003e is numerically greater than the \n\u003ccode\u003eCharacter\u003c/code\u003e argument (unsigned comparison). Note that this is strictly a numerical comparison; it is not locale-dependent."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "compare",
      "comment": "Compares two char values numerically. The value returned is identical to what would be returned by:     Character.valueOf(x).compareTo(Character.valueOf(y))",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first \n\u003ccode\u003echar\u003c/code\u003e to compare",
          "\u003ccode\u003ey\u003c/code\u003e - the second \n\u003ccode\u003echar\u003c/code\u003e to compare"
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u003d\u003d y\u003c/code\u003e; a value less than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u0026lt; y\u003c/code\u003e; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u0026gt; y\u003c/code\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "ch",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "reverseBytes",
      "comment": "Returns the value obtained by reversing the order of the bytes in the specified char value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - The \n\u003ccode\u003echar\u003c/code\u003e of which to reverse the byte order."
        ],
        "return": [
          "the value obtained by reversing (or, equivalently, swapping) the bytes in the specified \n\u003ccode\u003echar\u003c/code\u003e value."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "codePoint",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getName",
      "comment": "Returns the Unicode name of the specified character codePoint, or null if the code point is unassigned. Note: if the specified character is not assigned a name by the UnicodeData file (part of the Unicode Character Database maintained by the Unicode Consortium), the returned name is the same as the result of expression: Character.UnicodeBlock.of(codePoint).toString().replace(\u0027_\u0027, \u0027 \u0027) + \" \" + Integer.toHexString(codePoint).toUpperCase(Locale.ROOT);",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoint\u003c/code\u003e - the character (Unicode code point)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003ecodePoint\u003c/code\u003e is not a valid Unicode code point."
        ],
        "return": [
          "the Unicode name of the specified character, or null if the code point is unassigned."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "codePointOf",
      "comment": "Returns the code point value of the Unicode character specified by the given Unicode character name. Note: if a character is not assigned a name by the UnicodeData file (part of the Unicode Character Database maintained by the Unicode Consortium), its name is defined as the result of expression: Character.UnicodeBlock.of(codePoint).toString().replace(\u0027_\u0027, \u0027 \u0027) + \" \" + Integer.toHexString(codePoint).toUpperCase(Locale.ROOT); The name matching is case insensitive, with any leading and trailing whitespace character removed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the Unicode character name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003ename\u003c/code\u003e is not a valid Unicode character name.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the code point value of the character specified by its name."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a newly allocated Character object that represents the specified char value.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to be represented by the \n\u003ccode\u003eCharacter\u003c/code\u003e object."
        ]
      }
    }
  ],
  "innerClasses": [
    "java.lang.Character$UnicodeBlock",
    "java.lang.Character$Subset",
    "java.lang.Character$UnicodeScript"
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.Character",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.Character\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}