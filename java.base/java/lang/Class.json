{
  "packageName": "java.lang",
  "simpleName": "Class",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Converts the object to a string. The string representation is the string \"class\" or \"interface\", followed by a space, and then by the name of the class in the format returned by getName. If this Class object represents a primitive type, this method returns the name of the primitive type. If this Class object represents void this method returns \"void\". If this Class object represents an array type, this method returns \"class \" followed by getName.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eClass\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toGenericString",
      "comment": "Returns a string describing this Class, including information about modifiers and type parameters. The string is formatted as a list of type modifiers, if any, followed by the kind of type (empty string for primitive types and class, enum, interface, @interface, or record as appropriate), followed by the type\u0027s name, followed by an angle-bracketed comma-separated list of the type\u0027s type parameters, if any, including informative bounds on the type parameters, if any. A space is used to separate modifiers from one another and to separate any modifiers from the kind of type. The modifiers occur in canonical order. If there are no type parameters, the type parameter list is elided. For an array type, the string starts with the type name, followed by an angle-bracketed comma-separated list of the type\u0027s type parameters, if any, followed by a sequence of [] characters, one set of brackets per dimension of the array. Note that since information about the runtime representation of a type is being generated, modifiers not present on the originating source code or illegal on the originating source code may be present.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a string describing this \n\u003ccode\u003eClass\u003c/code\u003e, including information about modifiers and type parameters"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "forName",
      "comment": "Returns the Class object associated with the class or interface with the given string name. Invoking this method is equivalent to: Class.forName(className, true, currentLoader) where currentLoader denotes the defining class loader of the current class. For example, the following code fragment returns the runtime Class descriptor for the class named java.lang.Thread: Class t \u003d Class.forName(\"java.lang.Thread\") A call to forName(\"X\") causes the class named X to be initialized.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-12.html#jls-12.2\"\u003e12.2 Loading of Classes and Interfaces\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-12.html#jls-12.3\"\u003e12.3 Linking of Classes and Interfaces\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-12.html#jls-12.4\"\u003e12.4 Initialization of Classes and Interfaces\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "param": [
          "\u003ccode\u003eclassName\u003c/code\u003e - the fully qualified name of the desired class."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/LinkageError.html\" title\u003d\"class in java.lang\"\u003eLinkageError\u003c/a\u003e\u003c/code\u003e - if the linkage fails",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ExceptionInInitializerError.html\" title\u003d\"class in java.lang\"\u003eExceptionInInitializerError\u003c/a\u003e\u003c/code\u003e - if the initialization provoked by this method fails",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if the class cannot be located"
        ],
        "return": [
          "the \n\u003ccode\u003eClass\u003c/code\u003e object for the class with the specified name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "forName",
      "comment": "Returns the Class object associated with the class or interface with the given string name, using the given class loader. Given the fully qualified name for a class or interface (in the same format returned by getName) this method attempts to locate and load the class or interface. The specified class loader is used to load the class or interface. If the parameter loader is null, the class is loaded through the bootstrap class loader. The class is initialized only if the initialize parameter is true and if it has not been initialized earlier. If name denotes a primitive type or void, an attempt will be made to locate a user-defined class in the unnamed package whose name is name. Therefore, this method cannot be used to obtain any of the Class objects representing primitive types or void. If name denotes an array class, the component type of the array class is loaded but not initialized. For example, in an instance method the expression: Class.forName(\"Foo\") is equivalent to: Class.forName(\"Foo\", true, this.getClass().getClassLoader()) Note that this method throws errors related to loading, linking or initializing as specified in Sections 12.2, 12.3, and 12.4 of The Java Language Specification. Note that this method does not check whether the requested class is accessible to its caller.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-12.html#jls-12.2\"\u003e12.2 Loading of Classes and Interfaces\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-12.html#jls-12.3\"\u003e12.3 Linking of Classes and Interfaces\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-12.html#jls-12.4\"\u003e12.4 Initialization of Classes and Interfaces\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#forName(java.lang.String)\"\u003e\u003ccode\u003eforName(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClassLoader\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - fully qualified name of the desired class",
          "\u003ccode\u003einitialize\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e the class will be initialized (which implies linking). See Section \n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-12.html#jls-12.4\"\u003e12.4\u003c/a\u003e of \n\u003ccite\u003eThe Java Language Specification\u003c/cite\u003e.",
          "\u003ccode\u003eloader\u003c/code\u003e - class loader from which the class must be loaded"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/LinkageError.html\" title\u003d\"class in java.lang\"\u003eLinkageError\u003c/a\u003e\u003c/code\u003e - if the linkage fails",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ExceptionInInitializerError.html\" title\u003d\"class in java.lang\"\u003eExceptionInInitializerError\u003c/a\u003e\u003c/code\u003e - if the initialization provoked by this method fails",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003eClassNotFoundException\u003c/a\u003e\u003c/code\u003e - if the class cannot be located by the specified class loader",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is present, and the \n\u003ccode\u003eloader\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, and the caller\u0027s class loader is not \n\u003ccode\u003enull\u003c/code\u003e, and the caller does not have the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"getClassLoader\")\u003c/code\u003e"
        ],
        "return": [
          "class object representing the desired class"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "forName",
      "comment": "Returns the Class with the given binary name in the given module. This method attempts to locate and load the class or interface. It does not link the class, and does not run the class initializer. If the class is not found, this method returns null. If the class loader of the given module defines other modules and the given name is a class defined in a different module, this method returns null after the class is loaded. This method does not check whether the requested class is accessible to its caller.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-12.html#jls-12.2\"\u003e12.2 Loading of Classes and Interfaces\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-12.html#jls-12.3\"\u003e12.3 Linking of Classes and Interfaces\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "apiNote": [
          "This method returns \n\u003ccode\u003enull\u003c/code\u003e on failure rather than throwing a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassNotFoundException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClassNotFoundException\u003c/code\u003e\u003c/a\u003e, as is done by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#forName(java.lang.String,boolean,java.lang.ClassLoader)\"\u003e\u003ccode\u003eforName(String, boolean, ClassLoader)\u003c/code\u003e\u003c/a\u003e method. The security check is a stack-based permission check if the caller loads a class in another module."
        ],
        "param": [
          "\u003ccode\u003emodule\u003c/code\u003e - A module",
          "\u003ccode\u003ename\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#binary-name\"\u003ebinary name\u003c/a\u003e of the class"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given module or name is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/LinkageError.html\" title\u003d\"class in java.lang\"\u003eLinkageError\u003c/a\u003e\u003c/code\u003e - if the linkage fails",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - \n\u003cul\u003e \n \u003cli\u003e if the caller is not the specified module and \u003ccode\u003eRuntimePermission(\"getClassLoader\")\u003c/code\u003e permission is denied; or\u003c/li\u003e \n \u003cli\u003e access to the module content is denied. For example, permission check will be performed when a class loader calls \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/ModuleReader.html#open(java.lang.String)\"\u003e\u003ccode\u003eModuleReader.open(String)\u003c/code\u003e\u003c/a\u003e to read the bytes of a class file in a module.\u003c/li\u003e \n\u003c/ul\u003e"
        ],
        "return": [
          "\u003ccode\u003eClass\u003c/code\u003e object of the given name defined in the given module; \n\u003ccode\u003enull\u003c/code\u003e if not found."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.lang.Class",
        "name": "T",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "newInstance",
      "comment": "Creates a new instance of the class represented by this Class object. The class is instantiated as if by a new expression with an empty argument list. The class is initialized if it has not already been initialized.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessException.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessException\u003c/a\u003e\u003c/code\u003e - if the class or its nullary constructor is not accessible.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InstantiationException.html\" title\u003d\"class in java.lang\"\u003eInstantiationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eClass\u003c/code\u003e represents an abstract class, an interface, an array class, a primitive type, or void; or if the class has no nullary constructor; or if the instantiation fails for some other reason.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ExceptionInInitializerError.html\" title\u003d\"class in java.lang\"\u003eExceptionInInitializerError\u003c/a\u003e\u003c/code\u003e - if the initialization provoked by this method fails.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class."
        ],
        "return": [
          "a newly allocated instance of the class represented by this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isInstance",
      "comment": "Determines if the specified Object is assignment-compatible with the object represented by this Class. This method is the dynamic equivalent of the Java language instanceof operator. The method returns true if the specified Object argument is non-null and can be cast to the reference type represented by this Class object without raising a ClassCastException. It returns false otherwise. Specifically, if this Class object represents a declared class, this method returns true if the specified Object argument is an instance of the represented class (or of any of its subclasses); it returns false otherwise. If this Class object represents an array class, this method returns true if the specified Object argument can be converted to an object of the array class by an identity conversion or by a widening reference conversion; it returns false otherwise. If this Class object represents an interface, this method returns true if the class or any superclass of the specified Object argument implements this interface; it returns false otherwise. If this Class object represents a primitive type, this method returns false.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to check"
        ],
        "return": [
          "true if \n\u003ccode\u003eobj\u003c/code\u003e is an instance of this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAssignableFrom",
      "comment": "Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter. It returns true if so; otherwise it returns false. If this Class object represents a primitive type, this method returns true if the specified Class parameter is exactly this Class object; otherwise it returns false. Specifically, this method tests whether the type represented by the specified Class parameter can be converted to the type represented by this Class object via an identity conversion or via a widening reference conversion. See The Java Language Specification, sections 5.1.1 and 5.1.4, for details.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecls\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object to be checked"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified Class parameter is null."
        ],
        "return": [
          "the \n\u003ccode\u003eboolean\u003c/code\u003e value indicating whether objects of the type \n\u003ccode\u003ecls\u003c/code\u003e can be assigned to objects of this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isInterface",
      "comment": "Determines if this Class object represents an interface type.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eClass\u003c/code\u003e object represents an interface; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isArray",
      "comment": "Determines if this Class object represents an array class.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfField.html#isArray()\"\u003eisArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfField.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfField\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"type parameter in Class\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eClass\u003c/code\u003e object represents an array class; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPrimitive",
      "comment": "Determines if the specified Class object represents a primitive type. There are nine predefined Class objects to represent the eight primitive types and void. These are created by the Java Virtual Machine, and have the same names as the primitive types that they represent, namely boolean, byte, char, short, int, long, float, and double. These objects may only be accessed via the following public static final variables, and are the only Class objects for which this method returns true.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Boolean.html#TYPE\"\u003e\u003ccode\u003eBoolean.TYPE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#TYPE\"\u003e\u003ccode\u003eCharacter.TYPE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Byte.html#TYPE\"\u003e\u003ccode\u003eByte.TYPE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Short.html#TYPE\"\u003e\u003ccode\u003eShort.TYPE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#TYPE\"\u003e\u003ccode\u003eInteger.TYPE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#TYPE\"\u003e\u003ccode\u003eLong.TYPE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Float.html#TYPE\"\u003e\u003ccode\u003eFloat.TYPE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Double.html#TYPE\"\u003e\u003ccode\u003eDouble.TYPE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Void.html#TYPE\"\u003e\u003ccode\u003eVoid.TYPE\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfField.html#isPrimitive()\"\u003eisPrimitive\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfField.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfField\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"type parameter in Class\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "true if and only if this class represents a primitive type"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAnnotation",
      "comment": "Returns true if this Class object represents an annotation interface. Note that if this method returns true, isInterface() would also return true, as all annotation interfaces are also interfaces.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eClass\u003c/code\u003e object represents an annotation interface; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSynthetic",
      "comment": "Returns true if and only if this class has the synthetic modifier bit set.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-13.html#jls-13.1\"\u003e13.1 The Form of a Binary\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "See Java Virtual Machine Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.1\"\u003e4.1 The \u003ccode\u003eClassFile\u003c/code\u003e Structure\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if this class has the synthetic modifier bit set"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Returns the name of the entity (class, interface, array class, primitive type, or void) represented by this Class object. If this Class object represents a class or interface, not an array class, then: If the class or interface is not hidden, then the binary name of the class or interface is returned. If the class or interface is hidden, then the result is a string of the form: N + \u0027/\u0027 + \u003csuffix\u003e where N is the binary name indicated by the class file passed to Lookup::defineHiddenClass, and \u003csuffix\u003e is an unqualified name. If this Class object represents an array class, then the result is a string consisting of one or more \u0027[\u0027 characters representing the depth of the array nesting, followed by the element type as encoded using the following table: Element types and encodings Element Type Encoding boolean Z byte B char C class or interface with binary name N LN; double D float F int I long J short S If this Class object represents a primitive type or void, then the result is a string with the same spelling as the Java language keyword which corresponds to the primitive type or void. Examples:  String.class.getName()\n     returns \"java.lang.String\"\n byte.class.getName()\n     returns \"byte\"\n (new Object[3]).getClass().getName()\n     returns \"[Ljava.lang.Object;\"\n (new int[3][4][5][6][7][8][9]).getClass().getName()\n     returns \"[[[[[[[I\"",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-13.html#jls-13.1\"\u003e13.1 The Form of a Binary\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "the name of the class, interface, or other entity represented by this \n\u003ccode\u003eClass\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ClassLoader",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getClassLoader",
      "comment": "Returns the class loader for the class. Some implementations may use null to represent the bootstrap class loader. This method will return null in such implementations if this class was loaded by the bootstrap class loader. If this Class object represents a primitive type or void, null is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClassLoader\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is present, and the caller\u0027s class loader is not \n\u003ccode\u003enull\u003c/code\u003e and is not the same as or an ancestor of the class loader for the class whose class loader is requested, and the caller does not have the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"getClassLoader\")\u003c/code\u003e"
        ],
        "return": [
          "the class loader that loaded the class or interface represented by this \n\u003ccode\u003eClass\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Module",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModule",
      "comment": "Returns the module that this class or interface is a member of. If this class represents an array type then this method returns the Module for the element type. If this class represents a primitive type or void, then the Module object for the java.base module is returned. If this class is in an unnamed module then the unnamed Module of the class loader for this class is returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the module that this class or interface is a member of"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.TypeVariable",
        "parameters": [
          {
            "name": "java.lang.Class",
            "parameters": [
              {
                "owner": "java.lang.Class",
                "name": "T",
                "type": "Variable"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTypeParameters",
      "comment": "Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order. Returns an array of length 0 if the underlying generic declaration declares no type variables.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/GenericDeclaration.html#getTypeParameters()\"\u003egetTypeParameters\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/GenericDeclaration.html\" title\u003d\"interface in java.lang.reflect\"\u003eGenericDeclaration\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/GenericSignatureFormatError.html\" title\u003d\"class in java.lang.reflect\"\u003eGenericSignatureFormatError\u003c/a\u003e\u003c/code\u003e - if the generic signature of this generic declaration does not conform to the format specified in section \n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.7.9\"\u003e4.7.9\u003c/a\u003e of \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eTypeVariable\u003c/code\u003e objects that represent the type variables declared by this generic declaration"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "lowerBounds": [
              {
                "owner": "java.lang.Class",
                "name": "T",
                "type": "Variable"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSuperclass",
      "comment": "Returns the Class representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class. If this Class represents either the Object class, an interface, a primitive type, or void, then null is returned. If this Class object represents an array class then the Class object representing the Object class is returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the direct superclass of the class represented by this \n\u003ccode\u003eClass\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGenericSuperclass",
      "comment": "Returns the Type representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class object. If the superclass is a parameterized type, the Type object returned must accurately reflect the actual type arguments used in the source code. The parameterized type representing the superclass is created if it had not been created before. See the declaration of ParameterizedType for the semantics of the creation process for parameterized types. If this Class object represents either the Object class, an interface, a primitive type, or void, then null is returned. If this Class object represents an array class then the Class object representing the Object class is returned.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/GenericSignatureFormatError.html\" title\u003d\"class in java.lang.reflect\"\u003eGenericSignatureFormatError\u003c/a\u003e\u003c/code\u003e - if the generic class signature does not conform to the format specified in section \n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.7.9\"\u003e4.7.9\u003c/a\u003e of \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if the generic superclass refers to a non-existent type declaration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html\" title\u003d\"class in java.lang.reflect\"\u003eMalformedParameterizedTypeException\u003c/a\u003e\u003c/code\u003e - if the generic superclass refers to a parameterized type that cannot be instantiated for any reason"
        ],
        "return": [
          "the direct superclass of the class represented by this \n\u003ccode\u003eClass\u003c/code\u003e object"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Package",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPackage",
      "comment": "Gets the package of this class. If this class represents an array type, a primitive type or void, this method returns null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the package of this class."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPackageName",
      "comment": "Returns the fully qualified package name. If this class is a top level class, then this method returns the fully qualified name of the package that the class is a member of, or the empty string if the class is in an unnamed package. If this class is a member class, then this method is equivalent to invoking getPackageName() on the enclosing class. If this class is a local class or an anonymous class, then this method is equivalent to invoking getPackageName() on the declaring class of the enclosing method or enclosing constructor. If this class represents an array type then this method returns the package name of the element type. If this class represents a primitive type or void then the package name \"java.lang\" is returned.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-6.html#jls-6.7\"\u003e6.7 Fully Qualified Names\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "the fully qualified package name"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInterfaces",
      "comment": "Returns the interfaces directly implemented by the class or interface represented by this Class object. If this Class object represents a class, the return value is an array containing objects representing all interfaces directly implemented by the class. The order of the interface objects in the array corresponds to the order of the interface names in the implements clause of the declaration of the class represented by this Class object. For example, given the declaration: class Shimmer implements FloorWax, DessertTopping { ... } suppose the value of s is an instance of Shimmer; the value of the expression: s.getClass().getInterfaces()[0] is the Class object that represents interface FloorWax; and the value of: s.getClass().getInterfaces()[1] is the Class object that represents interface DessertTopping. If this Class object represents an interface, the array contains objects representing all interfaces directly extended by the interface. The order of the interface objects in the array corresponds to the order of the interface names in the extends clause of the declaration of the interface represented by this Class object. If this Class object represents a class or interface that implements no interfaces, the method returns an array of length 0. If this Class object represents a primitive type or void, the method returns an array of length 0. If this Class object represents an array type, the interfaces Cloneable and java.io.Serializable are returned in that order.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array of interfaces directly implemented by this class"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGenericInterfaces",
      "comment": "Returns the Types representing the interfaces directly implemented by the class or interface represented by this Class object. If a superinterface is a parameterized type, the Type object returned for it must accurately reflect the actual type arguments used in the source code. The parameterized type representing each superinterface is created if it had not been created before. See the declaration of ParameterizedType for the semantics of the creation process for parameterized types. If this Class object represents a class, the return value is an array containing objects representing all interfaces directly implemented by the class. The order of the interface objects in the array corresponds to the order of the interface names in the implements clause of the declaration of the class represented by this Class object. If this Class object represents an interface, the array contains objects representing all interfaces directly extended by the interface. The order of the interface objects in the array corresponds to the order of the interface names in the extends clause of the declaration of the interface represented by this Class object. If this Class object represents a class or interface that implements no interfaces, the method returns an array of length 0. If this Class object represents a primitive type or void, the method returns an array of length 0. If this Class object represents an array type, the interfaces Cloneable and java.io.Serializable are returned in that order.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/GenericSignatureFormatError.html\" title\u003d\"class in java.lang.reflect\"\u003eGenericSignatureFormatError\u003c/a\u003e\u003c/code\u003e - if the generic class signature does not conform to the format specified in section \n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.7.9\"\u003e4.7.9\u003c/a\u003e of \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if any of the generic superinterfaces refers to a non-existent type declaration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html\" title\u003d\"class in java.lang.reflect\"\u003eMalformedParameterizedTypeException\u003c/a\u003e\u003c/code\u003e - if any of the generic superinterfaces refer to a parameterized type that cannot be instantiated for any reason"
        ],
        "return": [
          "an array of interfaces directly implemented by this class"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getComponentType",
      "comment": "Returns the Class representing the component type of an array. If this class does not represent an array class this method returns null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Array.html\" title\u003d\"class in java.lang.reflect\"\u003e\u003ccode\u003eArray\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eClass\u003c/code\u003e representing the component type of this class if this class is an array"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModifiers",
      "comment": "Returns the Java language modifiers for this class or interface, encoded in an integer. The modifiers consist of the Java Virtual Machine\u0027s constants for public, protected, private, final, static, abstract and interface; they should be decoded using the methods of class Modifier. If the underlying class is an array class, then its public, private and protected modifiers are the same as those of its component type. If this Class object represents a primitive type or void, its public modifier is always true, and its protected and private modifiers are always false. If this Class object represents an array class, a primitive type or void, then its final modifier is always true and its interface modifier is always false. The values of its other modifiers are not determined by this specification. The modifier encodings are defined in section 4.1 of The Java Virtual Machine Specification.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Modifier.html\" title\u003d\"class in java.lang.reflect\"\u003e\u003ccode\u003eModifier\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eint\u003c/code\u003e representing the modifiers for this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSigners",
      "comment": "Gets the signers of this class.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the signers of this class, or null if there are no signers. In particular, this method returns null if this \n\u003ccode\u003eClass\u003c/code\u003e object represents a primitive type or void."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Method",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEnclosingMethod",
      "comment": "If this Class object represents a local or anonymous class within a method, returns a Method object representing the immediately enclosing method of the underlying class. Returns null otherwise. In particular, this method returns null if the underlying class is a local or anonymous class immediately enclosed by a class or interface declaration, instance initializer or static initializer.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \n\u003cul\u003e \n \u003cli\u003e the caller\u0027s class loader is not the same as the class loader of the enclosing class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003es.checkPermission\u003c/code\u003e\u003c/a\u003e method with \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\")\u003c/code\u003e denies access to the methods within the enclosing class \u003c/li\u003e\n \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the enclosing class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of the enclosing class \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "return": [
          "the immediately enclosing method of the underlying class, if that class is a local or anonymous class; otherwise \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Constructor",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEnclosingConstructor",
      "comment": "If this Class object represents a local or anonymous class within a constructor, returns a Constructor object representing the immediately enclosing constructor of the underlying class. Returns null otherwise. In particular, this method returns null if the underlying class is a local or anonymous class immediately enclosed by a class or interface declaration, instance initializer or static initializer.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \n\u003cul\u003e \n \u003cli\u003e the caller\u0027s class loader is not the same as the class loader of the enclosing class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003es.checkPermission\u003c/code\u003e\u003c/a\u003e method with \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\")\u003c/code\u003e denies access to the constructors within the enclosing class \u003c/li\u003e\n \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the enclosing class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of the enclosing class \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "return": [
          "the immediately enclosing constructor of the underlying class, if that class is a local or anonymous class; otherwise \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaringClass",
      "comment": "If the class or interface represented by this Class object is a member of another class, returns the Class object representing the class in which it was declared. This method returns null if this class or interface is not a member of any other class. If this Class object represents an array class, a primitive type, or void,then this method returns null.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for the declaring class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of the declaring class"
        ],
        "return": [
          "the declaring class for this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEnclosingClass",
      "comment": "Returns the immediately enclosing class of the underlying class. If the underlying class is a top level class this method returns null.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for the enclosing class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of the enclosing class"
        ],
        "return": [
          "the immediately enclosing class of the underlying class"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSimpleName",
      "comment": "Returns the simple name of the underlying class as given in the source code. Returns an empty string if the underlying class is anonymous. The simple name of an array is the simple name of the component type with \"[]\" appended. In particular the simple name of an array whose component type is anonymous is \"[]\".",
      "annotations": [],
      "tagMap": {
        "return": [
          "the simple name of the underlying class"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTypeName",
      "comment": "Return an informative string for the name of this class or interface.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Type.html#getTypeName()\"\u003egetTypeName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Type.html\" title\u003d\"interface in java.lang.reflect\"\u003eType\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an informative string for the name of this class or interface"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCanonicalName",
      "comment": "Returns the canonical name of the underlying class as defined by The Java Language Specification. Returns null if the underlying class does not have a canonical name. Classes without canonical names include: a local class a anonymous class a hidden class an array whose component type does not have a canonical name",
      "annotations": [],
      "tagMap": {
        "return": [
          "the canonical name of the underlying class if it exists, and \n\u003ccode\u003enull\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAnonymousClass",
      "comment": "Returns true if and only if the underlying class is an anonymous class.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "An anonymous class is not a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#isHidden()\"\u003ehidden class\u003c/a\u003e."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if this class is an anonymous class."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLocalClass",
      "comment": "Returns true if and only if the underlying class is a local class.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if this class is a local class."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isMemberClass",
      "comment": "Returns true if and only if the underlying class is a member class.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if this class is a member class."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getClasses",
      "comment": "Returns an array containing Class objects representing all the public classes and interfaces that are members of the class represented by this Class object. This includes public class and interface members inherited from superclasses and public class and interface members declared by the class. This method returns an array of length 0 if this Class object has no public member classes or interfaces. This method also returns an array of length 0 if this Class object represents a primitive type, an array class, or void.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class."
        ],
        "return": [
          "the array of \n\u003ccode\u003eClass\u003c/code\u003e objects representing the public members of this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Field",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFields",
      "comment": "Returns an array containing Field objects reflecting all the accessible public fields of the class or interface represented by this Class object. If this Class object represents a class or interface with no accessible public fields, then this method returns an array of length 0. If this Class object represents a class, then this method returns the public fields of the class and of all its superclasses and superinterfaces. If this Class object represents an interface, then this method returns the fields of the interface and of all its superinterfaces. If this Class object represents an array type, a primitive type, or void, then this method returns an array of length 0. The elements in the returned array are not sorted and are not in any particular order.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.2\"\u003e8.2 Class Members\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.3\"\u003e8.3 Field Declarations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class."
        ],
        "return": [
          "the array of \n\u003ccode\u003eField\u003c/code\u003e objects representing the public fields"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Method",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMethods",
      "comment": "Returns an array containing Method objects reflecting all the public methods of the class or interface represented by this Class object, including those declared by the class or interface and those inherited from superclasses and superinterfaces. If this Class object represents an array type, then the returned array has a Method object for each of the public methods inherited by the array type from Object. It does not contain a Method object for clone(). If this Class object represents an interface then the returned array does not contain any implicitly declared methods from Object. Therefore, if no methods are explicitly declared in this interface or any of its superinterfaces then the returned array has length 0. (Note that a Class object which represents a class always has public methods, inherited from Object.) The returned array never contains methods with names \"\u003cinit\u003e\" or \"\u003cclinit\u003e\". The elements in the returned array are not sorted and are not in any particular order. Generally, the result is computed as with the following 4 step algorithm. Let C be the class or interface represented by this Class object: A union of methods is composed of: C\u0027s declared public instance and static methods as returned by getDeclaredMethods() and filtered to include only public methods. If C is a class other than Object, then include the result of invoking this algorithm recursively on the superclass of C. Include the results of invoking this algorithm recursively on all direct superinterfaces of C, but include only instance methods. Union from step 1 is partitioned into subsets of methods with same signature (name, parameter types) and return type. Within each such subset only the most specific methods are selected. Let method M be a method from a set of methods with same signature and return type. M is most specific if there is no such method N !\u003d M from the same set, such that N is more specific than M. N is more specific than M if: N is declared by a class and M is declared by an interface; or N and M are both declared by classes or both by interfaces and N\u0027s declaring type is the same as or a subtype of M\u0027s declaring type (clearly, if M\u0027s and N\u0027s declaring types are the same type, then M and N are the same method). The result of this algorithm is the union of all selected methods from step 3.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.2\"\u003e8.2 Class Members\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.4\"\u003e8.4 Method Declarations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "apiNote": [
          "There may be more than one method with a particular name and parameter types in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not. This increased flexibility in the virtual machine can be used to implement various language features. For example, covariant returns can be implemented with \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Method.html#isBridge()\"\u003ebridge methods\u003c/a\u003e; the bridge method and the overriding method would have the same signature but different return types."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class."
        ],
        "return": [
          "the array of \n\u003ccode\u003eMethod\u003c/code\u003e objects representing the public methods of this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Constructor",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getConstructors",
      "comment": "Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object. An array of length 0 is returned if the class has no public constructors, or if the class is an array class, or if the class reflects a primitive type or void.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "While this method returns an array of \n\u003ccode\u003e Constructor\u0026lt;T\u0026gt;\u003c/code\u003e objects (that is an array of constructors from this class), the return type of this method is \n\u003ccode\u003e Constructor\u0026lt;?\u0026gt;[]\u003c/code\u003e and \n\u003cem\u003enot\u003c/em\u003e \n\u003ccode\u003eConstructor\u0026lt;T\u0026gt;[]\u003c/code\u003e as might be expected. This less informative return type is necessary since after being returned from this method, the array could be modified to hold \n\u003ccode\u003eConstructor\u003c/code\u003e objects for different classes, which would violate the type guarantees of \n\u003ccode\u003eConstructor\u0026lt;T\u0026gt;[]\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class."
        ],
        "return": [
          "the array of \n\u003ccode\u003eConstructor\u003c/code\u003e objects representing the public constructors of this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Field",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getField",
      "comment": "Returns a Field object that reflects the specified public member field of the class or interface represented by this Class object. The name parameter is a String specifying the simple name of the desired field. The field to be reflected is determined by the algorithm that follows. Let C be the class or interface represented by this Class object: If C declares a public field with the name specified, that is the field to be reflected. If no field was found in step 1 above, this algorithm is applied recursively to each direct superinterface of C. The direct superinterfaces are searched in the order they were declared. If no field was found in steps 1 and 2 above, and C has a superclass S, then this algorithm is invoked recursively upon S. If C has no superclass, then a NoSuchFieldException is thrown. If this Class object represents an array type, then this method does not find the length field of the array type.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.2\"\u003e8.2 Class Members\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.3\"\u003e8.3 Field Declarations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the field name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchFieldException.html\" title\u003d\"class in java.lang\"\u003eNoSuchFieldException\u003c/a\u003e\u003c/code\u003e - if a field with the specified name is not found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class."
        ],
        "return": [
          "the \n\u003ccode\u003eField\u003c/code\u003e object of this class specified by \n\u003ccode\u003ename\u003c/code\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Method",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMethod",
      "comment": "Returns a Method object that reflects the specified public member method of the class or interface represented by this Class object. The name parameter is a String specifying the simple name of the desired method. The parameterTypes parameter is an array of Class objects that identify the method\u0027s formal parameter types, in declared order. If parameterTypes is null, it is treated as if it were an empty array. If this Class object represents an array type, then this method finds any public method inherited by the array type from Object except method clone(). If this Class object represents an interface then this method does not find any implicitly declared method from Object. Therefore, if no methods are explicitly declared in this interface or any of its superinterfaces, then this method does not find any method. This method does not find any method with name \"\u003cinit\u003e\" or \"\u003cclinit\u003e\". Generally, the method to be reflected is determined by the 4 step algorithm that follows. Let C be the class or interface represented by this Class object: A union of methods is composed of: C\u0027s declared public instance and static methods as returned by getDeclaredMethods() and filtered to include only public methods that match given name and parameterTypes If C is a class other than Object, then include the result of invoking this algorithm recursively on the superclass of C. Include the results of invoking this algorithm recursively on all direct superinterfaces of C, but include only instance methods. This union is partitioned into subsets of methods with same return type (the selection of methods from step 1 also guarantees that they have the same method name and parameter types). Within each such subset only the most specific methods are selected. Let method M be a method from a set of methods with same VM signature (return type, name, parameter types). M is most specific if there is no such method N !\u003d M from the same set, such that N is more specific than M. N is more specific than M if: N is declared by a class and M is declared by an interface; or N and M are both declared by classes or both by interfaces and N\u0027s declaring type is the same as or a subtype of M\u0027s declaring type (clearly, if M\u0027s and N\u0027s declaring types are the same type, then M and N are the same method). The result of this algorithm is chosen arbitrarily from the methods with most specific return type among all selected methods from step 3. Let R be a return type of a method M from the set of all selected methods from step 3. M is a method with most specific return type if there is no such method N !\u003d M from the same set, having return type S !\u003d R, such that S is a subtype of R as determined by R.class.isAssignableFrom(java.lang.Class\u003c?\u003e)(S.class).",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.2\"\u003e8.2 Class Members\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.4\"\u003e8.4 Method Declarations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "apiNote": [
          "There may be more than one method with matching name and parameter types in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not. This increased flexibility in the virtual machine can be used to implement various language features. For example, covariant returns can be implemented with \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Method.html#isBridge()\"\u003ebridge methods\u003c/a\u003e; the bridge method and the overriding method would have the same signature but different return types. This method would return the overriding method as it would have a more specific return type."
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the method",
          "\u003ccode\u003eparameterTypes\u003c/code\u003e - the list of parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchMethodException.html\" title\u003d\"class in java.lang\"\u003eNoSuchMethodException\u003c/a\u003e\u003c/code\u003e - if a matching method is not found or if the name is \"\u0026lt;init\u0026gt;\"or \"\u0026lt;clinit\u0026gt;\".",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class."
        ],
        "return": [
          "the \n\u003ccode\u003eMethod\u003c/code\u003e object that matches the specified \n\u003ccode\u003ename\u003c/code\u003e and \n\u003ccode\u003eparameterTypes\u003c/code\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Constructor",
        "parameters": [
          {
            "owner": "java.lang.Class",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getConstructor",
      "comment": "Returns a Constructor object that reflects the specified public constructor of the class represented by this Class object. The parameterTypes parameter is an array of Class objects that identify the constructor\u0027s formal parameter types, in declared order. If this Class object represents an inner class declared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter. The constructor to reflect is the public constructor of the class represented by this Class object whose formal parameter types match those specified by parameterTypes.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterTypes\u003c/code\u003e - the parameter array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchMethodException.html\" title\u003d\"class in java.lang\"\u003eNoSuchMethodException\u003c/a\u003e\u003c/code\u003e - if a matching method is not found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class."
        ],
        "return": [
          "the \n\u003ccode\u003eConstructor\u003c/code\u003e object of the public constructor that matches the specified \n\u003ccode\u003eparameterTypes\u003c/code\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredClasses",
      "comment": "Returns an array of Class objects reflecting all the classes and interfaces declared as members of the class represented by this Class object. This includes public, protected, default (package) access, and private classes and interfaces declared by the class, but excludes inherited classes and interfaces. This method returns an array of length 0 if the class declares no classes or interfaces as members, or if this Class object represents a primitive type, an array class, or void.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \n\u003cul\u003e \n \u003cli\u003e the caller\u0027s class loader is not the same as the class loader of this class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003es.checkPermission\u003c/code\u003e\u003c/a\u003e method with \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\")\u003c/code\u003e denies access to the declared classes within this class \u003c/li\u003e\n \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "return": [
          "the array of \n\u003ccode\u003eClass\u003c/code\u003e objects representing all the declared members of this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Field",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredFields",
      "comment": "Returns an array of Field objects reflecting all the fields declared by the class or interface represented by this Class object. This includes public, protected, default (package) access, and private fields, but excludes inherited fields. If this Class object represents a class or interface with no declared fields, then this method returns an array of length 0. If this Class object represents an array type, a primitive type, or void, then this method returns an array of length 0. The elements in the returned array are not sorted and are not in any particular order.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.2\"\u003e8.2 Class Members\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.3\"\u003e8.3 Field Declarations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \n\u003cul\u003e \n \u003cli\u003e the caller\u0027s class loader is not the same as the class loader of this class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003es.checkPermission\u003c/code\u003e\u003c/a\u003e method with \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\")\u003c/code\u003e denies access to the declared fields within this class \u003c/li\u003e\n \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "return": [
          "the array of \n\u003ccode\u003eField\u003c/code\u003e objects representing all the declared fields of this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.RecordComponent",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRecordComponents",
      "comment": "Returns an array of RecordComponent objects representing all the record components of this record class, or null if this class is not a record class. The components are returned in the same order that they are declared in the record header. The array is empty if this record class has no components. If the class is not a record class, that is isRecord() returns false, then this method returns null. Conversely, if isRecord() returns true, then this method returns a non-null value.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\"\u003e8.10 Record Classes\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \n\u003cul\u003e \n \u003cli\u003e the caller\u0027s class loader is not the same as the class loader of this class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003es.checkPermission\u003c/code\u003e\u003c/a\u003e method with \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\")\u003c/code\u003e denies access to the declared methods within this class \u003c/li\u003e\n \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "return": [
          "An array of \n\u003ccode\u003eRecordComponent\u003c/code\u003e objects representing all the record components of this record class, or \n\u003ccode\u003enull\u003c/code\u003e if this class is not a record class"
        ],
        "since": [
          "16"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Method",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredMethods",
      "comment": "Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods. If this Class object represents a class or interface that has multiple declared methods with the same name and parameter types, but different return types, then the returned array has a Method object for each such method. If this Class object represents a class or interface that has a class initialization method \u003cclinit\u003e, then the returned array does not have a corresponding Method object. If this Class object represents a class or interface with no declared methods, then the returned array has length 0. If this Class object represents an array type, a primitive type, or void, then the returned array has length 0. The elements in the returned array are not sorted and are not in any particular order.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.2\"\u003e8.2 Class Members\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.4\"\u003e8.4 Method Declarations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \n\u003cul\u003e \n \u003cli\u003e the caller\u0027s class loader is not the same as the class loader of this class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003es.checkPermission\u003c/code\u003e\u003c/a\u003e method with \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\")\u003c/code\u003e denies access to the declared methods within this class \u003c/li\u003e\n \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "return": [
          "the array of \n\u003ccode\u003eMethod\u003c/code\u003e objects representing all the declared methods of this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Constructor",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredConstructors",
      "comment": "Returns an array of Constructor objects reflecting all the constructors declared by the class represented by this Class object. These are public, protected, default (package) access, and private constructors. The elements in the array returned are not sorted and are not in any particular order. If the class has a default constructor, it is included in the returned array. This method returns an array of length 0 if this Class object represents an interface, a primitive type, an array class, or void. See The Java Language Specification, section 8.2.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \n\u003cul\u003e \n \u003cli\u003e the caller\u0027s class loader is not the same as the class loader of this class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003es.checkPermission\u003c/code\u003e\u003c/a\u003e method with \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\")\u003c/code\u003e denies access to the declared constructors within this class \u003c/li\u003e\n \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "return": [
          "the array of \n\u003ccode\u003eConstructor\u003c/code\u003e objects representing all the declared constructors of this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Field",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredField",
      "comment": "Returns a Field object that reflects the specified declared field of the class or interface represented by this Class object. The name parameter is a String that specifies the simple name of the desired field. If this Class object represents an array type, then this method does not find the length field of the array type.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.2\"\u003e8.2 Class Members\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.3\"\u003e8.3 Field Declarations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the field"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchFieldException.html\" title\u003d\"class in java.lang\"\u003eNoSuchFieldException\u003c/a\u003e\u003c/code\u003e - if a field with the specified name is not found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \n\u003cul\u003e \n \u003cli\u003e the caller\u0027s class loader is not the same as the class loader of this class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003es.checkPermission\u003c/code\u003e\u003c/a\u003e method with \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\")\u003c/code\u003e denies access to the declared field \u003c/li\u003e\n \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eField\u003c/code\u003e object for the specified field in this class"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Method",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredMethod",
      "comment": "Returns a Method object that reflects the specified declared method of the class or interface represented by this Class object. The name parameter is a String that specifies the simple name of the desired method, and the parameterTypes parameter is an array of Class objects that identify the method\u0027s formal parameter types, in declared order. If more than one method with the same parameter types is declared in a class, and one of these methods has a return type that is more specific than any of the others, that method is returned; otherwise one of the methods is chosen arbitrarily. If the name is \"\u003cinit\u003e\"or \"\u003cclinit\u003e\" a NoSuchMethodException is raised. If this Class object represents an array type, then this method does not find the clone() method.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.2\"\u003e8.2 Class Members\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.4\"\u003e8.4 Method Declarations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the method",
          "\u003ccode\u003eparameterTypes\u003c/code\u003e - the parameter array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchMethodException.html\" title\u003d\"class in java.lang\"\u003eNoSuchMethodException\u003c/a\u003e\u003c/code\u003e - if a matching method is not found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \n\u003cul\u003e \n \u003cli\u003e the caller\u0027s class loader is not the same as the class loader of this class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003es.checkPermission\u003c/code\u003e\u003c/a\u003e method with \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\")\u003c/code\u003e denies access to the declared method \u003c/li\u003e\n \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eMethod\u003c/code\u003e object for the method of this class matching the specified name and parameters"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Constructor",
        "parameters": [
          {
            "owner": "java.lang.Class",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredConstructor",
      "comment": "Returns a Constructor object that reflects the specified constructor of the class or interface represented by this Class object. The parameterTypes parameter is an array of Class objects that identify the constructor\u0027s formal parameter types, in declared order. If this Class object represents an inner class declared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameterTypes\u003c/code\u003e - the parameter array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NoSuchMethodException.html\" title\u003d\"class in java.lang\"\u003eNoSuchMethodException\u003c/a\u003e\u003c/code\u003e - if a matching method is not found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and any of the following conditions is met: \n\u003cul\u003e \n \u003cli\u003e the caller\u0027s class loader is not the same as the class loader of this class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003es.checkPermission\u003c/code\u003e\u003c/a\u003e method with \u003ccode\u003eRuntimePermission(\"accessDeclaredMembers\")\u003c/code\u003e denies access to the declared constructor \u003c/li\u003e\n \u003cli\u003e the caller\u0027s class loader is not the same as or an ancestor of the class loader for the current class and invocation of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of this class \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "return": [
          "The \n\u003ccode\u003eConstructor\u003c/code\u003e object for the constructor with the specified parameter list"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResourceAsStream",
      "comment": "Finds a resource with a given name. If this class is in a named Module then this method will attempt to find the resource in the module. This is done by delegating to the module\u0027s class loader findResource(String,String) method, invoking it with the module name and the absolute name of the resource. Resources in named modules are subject to the rules for encapsulation specified in the Module getResourceAsStream method and so this method returns null when the resource is a non-\".class\" resource in a package that is not open to the caller\u0027s module. Otherwise, if this class is not in a named module then the rules for searching resources associated with a given class are implemented by the defining class loader of the class. This method delegates to this Class object\u0027s class loader. If this Class object was loaded by the bootstrap class loader, the method delegates to ClassLoader.getSystemResourceAsStream(java.lang.String). Before delegation, an absolute resource name is constructed from the given resource name using this algorithm: If the name begins with a \u0027/\u0027 (\u0027\\u002f\u0027), then the absolute name of the resource is the portion of the name following the \u0027/\u0027. Otherwise, the absolute name is of the following form: modified_package_name/name Where the modified_package_name is the package name of this object with \u0027/\u0027 substituted for \u0027.\u0027 (\u0027\\u002e\u0027).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Module.html#getResourceAsStream(java.lang.String)\"\u003e\u003ccode\u003eModule.getResourceAsStream(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - name of the desired resource"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/InputStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eInputStream\u003c/code\u003e\u003c/a\u003e object; \n\u003ccode\u003enull\u003c/code\u003e if no resource with this name is found, the resource is in a package that is not \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Module.html#isOpen(java.lang.String,java.lang.Module)\"\u003eopen\u003c/a\u003e to at least the caller module, or access to the resource is denied by the security manager."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URL",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getResource",
      "comment": "Finds a resource with a given name. If this class is in a named Module then this method will attempt to find the resource in the module. This is done by delegating to the module\u0027s class loader findResource(String,String) method, invoking it with the module name and the absolute name of the resource. Resources in named modules are subject to the rules for encapsulation specified in the Module getResourceAsStream method and so this method returns null when the resource is a non-\".class\" resource in a package that is not open to the caller\u0027s module. Otherwise, if this class is not in a named module then the rules for searching resources associated with a given class are implemented by the defining class loader of the class. This method delegates to this Class object\u0027s class loader. If this Class object was loaded by the bootstrap class loader, the method delegates to ClassLoader.getSystemResource(java.lang.String). Before delegation, an absolute resource name is constructed from the given resource name using this algorithm: If the name begins with a \u0027/\u0027 (\u0027\\u002f\u0027), then the absolute name of the resource is the portion of the name following the \u0027/\u0027. Otherwise, the absolute name is of the following form: modified_package_name/name Where the modified_package_name is the package name of this object with \u0027/\u0027 substituted for \u0027.\u0027 (\u0027\\u002e\u0027).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - name of the desired resource"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURL\u003c/code\u003e\u003c/a\u003e object; \n\u003ccode\u003enull\u003c/code\u003e if no resource with this name is found, the resource cannot be located by a URL, the resource is in a package that is not \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Module.html#isOpen(java.lang.String,java.lang.Module)\"\u003eopen\u003c/a\u003e to at least the caller module, or access to the resource is denied by the security manager."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.ProtectionDomain",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getProtectionDomain",
      "comment": "Returns the ProtectionDomain of this class. If there is a security manager installed, this method first calls the security manager\u0027s checkPermission method with a RuntimePermission(\"getProtectionDomain\") permission to ensure it\u0027s ok to get the ProtectionDomain.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/ProtectionDomain.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProtectionDomain\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow getting the ProtectionDomain."
        ],
        "return": [
          "the ProtectionDomain of this class"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "desiredAssertionStatus",
      "comment": "Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked. If this class has had its assertion status set, the most recent setting will be returned; otherwise, if any package default assertion status pertains to this class, the most recent setting for the most specific pertinent package default assertion status is returned; otherwise, if this class is not a system class (i.e., it has a class loader) its class loader\u0027s default assertion status is returned; otherwise, the system class default assertion status is returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#setClassAssertionStatus(java.lang.String,boolean)\"\u003e\u003ccode\u003eClassLoader.setClassAssertionStatus(java.lang.String, boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#setPackageAssertionStatus(java.lang.String,boolean)\"\u003e\u003ccode\u003eClassLoader.setPackageAssertionStatus(java.lang.String, boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#setDefaultAssertionStatus(boolean)\"\u003e\u003ccode\u003eClassLoader.setDefaultAssertionStatus(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "Few programmers will have any need for this method; it is provided for the benefit of the JDK itself. (It allows a class to determine at the time that it is initialized whether assertions should be enabled.) Note that this method is not guaranteed to return the actual assertion status that was (or will be) associated with the specified class when it was (or will be) initialized."
        ],
        "return": [
          "the desired assertion status of the specified class."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEnum",
      "comment": "Returns true if and only if this class was declared as an enum in the source code. Note that Enum is not itself an enum class. Also note that if an enum constant is declared with a class body, the class of that enum constant object is an anonymous class and not the class of the declaring enum class. The Enum.getDeclaringClass() method of an enum constant can be used to get the class of the enum class declaring the constant.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.9.1\"\u003e8.9.1 Enum Constants\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "true if and only if this class was declared as an enum in the source code"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isRecord",
      "comment": "Returns true if and only if this class is a record class. The direct superclass of a record class is java.lang.Record. A record class is final. A record class has (possibly zero) record components; getRecordComponents() returns a non-null but possibly empty value for a record. Note that class Record is not a record class and thus invoking this method on class Record returns false.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\"\u003e8.10 Record Classes\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "true if and only if this class is a record class, otherwise false"
        ],
        "since": [
          "16"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.lang.Class",
        "name": "T",
        "type": "Variable",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEnumConstants",
      "comment": "Returns the elements of this enum class or null if this Class object does not represent an enum class.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array containing the values comprising the enum class represented by this \n\u003ccode\u003eClass\u003c/code\u003e object in the order they\u0027re declared, or null if this \n\u003ccode\u003eClass\u003c/code\u003e object does not represent an enum class"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.lang.Class",
        "name": "T",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "cast",
      "comment": "Casts an object to the class or interface represented by this Class object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to be cast"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the object is not null and is not assignable to the type T."
        ],
        "return": [
          "the object after casting, or null if obj is null"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "U",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "asSubclass",
      "comment": "Casts this Class object to represent a subclass of the class represented by the specified class object. Checks that the cast is valid, and throws a ClassCastException if it is not. If this method succeeds, it always returns a reference to this Class object. This method is useful when a client needs to \"narrow\" the type of a Class object to pass it to an API that restricts the Class objects that it is willing to accept. A cast would generate a compile-time warning, as the correctness of the cast could not be checked at runtime (because generic types are implemented by erasure).",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type to cast this \n\u003ccode\u003eClass\u003c/code\u003e object to"
        ],
        "param": [
          "\u003ccode\u003eclazz\u003c/code\u003e - the class of the type to cast this \n\u003ccode\u003eClass\u003c/code\u003e object to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eClass\u003c/code\u003e object does not represent a subclass of the specified class (here \"subclass\" includes the class itself)."
        ],
        "return": [
          "this \n\u003ccode\u003eClass\u003c/code\u003e object, cast to represent a subclass of the specified class object."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotation",
      "comment": "Returns this element\u0027s annotation for the specified type if such an annotation is present, else null. Note that any annotation returned by this method is a declaration annotation.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the type of the annotation to query for and return if present"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotation(java.lang.Class)\"\u003egetAnnotation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "this element\u0027s annotation for the specified annotation type if present on this element, else null"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAnnotationPresent",
      "comment": "Returns true if an annotation for the specified type is present on this element, else false. This method is designed primarily for convenient access to marker annotations. The truth value returned by this method is equivalent to: getAnnotation(annotationClass) !\u003d null",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#isAnnotationPresent(java.lang.Class)\"\u003eisAnnotationPresent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "true if an annotation for the specified annotation type is present on this element, else false"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class",
        "arrayDimensions": 1
      },
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotationsByType",
      "comment": "Returns annotations that are associated with this element. If there are no annotations associated with this element, the return value is an array of length 0. The difference between this method and AnnotatedElement.getAnnotation(Class) is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. Note that any annotations returned by this method are declaration annotations.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the type of the annotation to query for and return if present"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType(java.lang.Class)\"\u003egetAnnotationsByType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "all this element\u0027s annotations for the specified annotation type if associated with this element, else an array of length zero"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.annotation.Annotation",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotations",
      "comment": "Returns annotations that are present on this element. If there are no annotations present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. Note that any annotations returned by this method are declaration annotations.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotations()\"\u003egetAnnotations\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "annotations present on this element"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredAnnotation",
      "comment": "Returns this element\u0027s annotation for the specified type if such an annotation is directly present, else null. This method ignores inherited annotations. (Returns null if no annotations are directly present on this element.) Note that any annotation returned by this method is a declaration annotation.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the type of the annotation to query for and return if directly present"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotation(java.lang.Class)\"\u003egetDeclaredAnnotation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "this element\u0027s annotation for the specified annotation type if directly present on this element, else null"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class",
        "arrayDimensions": 1
      },
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredAnnotationsByType",
      "comment": "Returns this element\u0027s annotation(s) for the specified type if such annotations are either directly present or indirectly present. This method ignores inherited annotations. If there are no specified annotations directly or indirectly present on this element, the return value is an array of length 0. The difference between this method and AnnotatedElement.getDeclaredAnnotation(Class) is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation if one is present. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. Note that any annotations returned by this method are declaration annotations.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the type of the annotation to query for and return if directly or indirectly present"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotationsByType(java.lang.Class)\"\u003egetDeclaredAnnotationsByType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "all this element\u0027s annotations for the specified annotation type if directly or indirectly present on this element, else an array of length zero"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.annotation.Annotation",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredAnnotations",
      "comment": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. Note that any annotations returned by this method are declaration annotations.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotations()\"\u003egetDeclaredAnnotations\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "annotations directly present on this element"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.AnnotatedType",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotatedSuperclass",
      "comment": "Returns an AnnotatedType object that represents the use of a type to specify the superclass of the entity represented by this Class object. (The use of type Foo to specify the superclass in \u0027... extends Foo\u0027 is distinct from the declaration of class Foo.) If this Class object represents a class whose declaration does not explicitly indicate an annotated superclass, then the return value is an AnnotatedType object representing an element with no annotations. If this Class represents either the Object class, an interface type, an array type, a primitive type, or void, the return value is null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an object representing the superclass"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.AnnotatedType",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotatedInterfaces",
      "comment": "Returns an array of AnnotatedType objects that represent the use of types to specify superinterfaces of the entity represented by this Class object. (The use of type Foo to specify a superinterface in \u0027... implements Foo\u0027 is distinct from the declaration of interface Foo.) If this Class object represents a class, the return value is an array containing objects representing the uses of interface types to specify interfaces implemented by the class. The order of the objects in the array corresponds to the order of the interface types used in the \u0027implements\u0027 clause of the declaration of this Class object. If this Class object represents an interface, the return value is an array containing objects representing the uses of interface types to specify interfaces directly extended by the interface. The order of the objects in the array corresponds to the order of the interface types used in the \u0027extends\u0027 clause of the declaration of this Class object. If this Class object represents a class or interface whose declaration does not explicitly indicate any annotated superinterfaces, the return value is an array of length 0. If this Class object represents either the Object class, an array type, a primitive type, or void, the return value is an array of length 0.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an array representing the superinterfaces"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNestHost",
      "comment": "Returns the nest host of the nest to which the class or interface represented by this Class object belongs. Every class and interface belongs to exactly one nest. If the nest host of this class or interface has previously been determined, then this method returns the nest host. If the nest host of this class or interface has not previously been determined, then this method determines the nest host using the algorithm of JVMS 5.4.4, and returns it. Often, a class or interface belongs to a nest consisting only of itself, in which case this method returns this to indicate that the class or interface is the nest host. If this Class object represents a primitive type, an array type, or void, then this method returns this, indicating that the represented entity belongs to the nest consisting only of itself, and is the nest host.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If the returned class is not the current class, and if a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for the returned class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of the returned class"
        ],
        "See Java Virtual Machine Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.7.28\"\u003e4.7.28 The \u003ccode\u003eNestHost\u003c/code\u003e Attribute\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.7.29\"\u003e4.7.29 The \u003ccode\u003eNestMembers\u003c/code\u003e Attribute\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-5.html#jls-5.4.4\"\u003e5.4.4 Access Control\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "the nest host of this class or interface"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNestmateOf",
      "comment": "Determines if the given Class is a nestmate of the class or interface represented by this Class object. Two classes or interfaces are nestmates if they have the same nest host.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the class to check"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this class and \n\u003ccode\u003ec\u003c/code\u003e are members of the same nest; and \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNestMembers",
      "comment": "Returns an array containing Class objects representing all the classes and interfaces that are members of the nest to which the class or interface represented by this Class object belongs. First, this method obtains the nest host, H, of the nest to which the class or interface represented by this Class object belongs. The zeroth element of the returned array is H. Then, for each class or interface C which is recorded by H as being a member of its nest, this method attempts to obtain the Class object for C (using the defining class loader of the current Class object), and then obtains the nest host of the nest to which C belongs. The classes and interfaces which are recorded by H as being members of its nest, and for which H can be determined as their nest host, are indicated by subsequent elements of the returned array. The order of such elements is unspecified. Duplicates are permitted. If this Class object represents a primitive type, an array type, or void, then this method returns a single-element array containing this.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#getNestHost()\"\u003e\u003ccode\u003egetNestHost()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "The returned array includes only the nest members recorded in the \n\u003ccode\u003eNestMembers\u003c/code\u003e attribute, and not any hidden classes that were added to the nest via \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#defineHiddenClass(byte%5B%5D,boolean,java.lang.invoke.MethodHandles.Lookup.ClassOption...)\"\u003e\u003ccode\u003eLookup::defineHiddenClass\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If any returned class is not the current class, and if a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for that returned class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of that returned class"
        ],
        "See Java Virtual Machine Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.7.28\"\u003e4.7.28 The \u003ccode\u003eNestHost\u003c/code\u003e Attribute\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.7.29\"\u003e4.7.29 The \u003ccode\u003eNestMembers\u003c/code\u003e Attribute\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "an array of all classes and interfaces in the same nest as this class or interface"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "descriptorString",
      "comment": "Returns the descriptor string of the entity (class, interface, array class, primitive type, or void) represented by this Class object. If this Class object represents a class or interface, not an array class, then: If the class or interface is not hidden, then the result is a field descriptor (JVMS 4.3.2) for the class or interface. Calling ClassDesc::ofDescriptor with the result descriptor string produces a ClassDesc describing this class or interface. If the class or interface is hidden, then the result is a string of the form: \"L\" + N + \".\" + \u003csuffix\u003e + \";\" where N is the binary name encoded in internal form indicated by the class file passed to Lookup::defineHiddenClass, and \u003csuffix\u003e is an unqualified name. A hidden class or interface has no nominal descriptor. The result string is not a type descriptor. If this Class object represents an array class, then the result is a string consisting of one or more \u0027[\u0027 characters representing the depth of the array nesting, followed by the descriptor string of the element type. If the element type is not a hidden class or interface, then this array class can be described nominally. Calling ClassDesc::ofDescriptor with the result descriptor string produces a ClassDesc describing this array class. If the element type is a hidden class or interface, then this array class cannot be described nominally. The result string is not a type descriptor. If this Class object represents a primitive type or void, then the result is a field descriptor string which is a one-letter code corresponding to a primitive type or void (\"B\", \"C\", \"D\", \"F\", \"I\", \"J\", \"S\", \"Z\", \"V\") (JVMS 4.3.2).",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "This is not a strict inverse of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#forName(java.lang.String)\"\u003e\u003ccode\u003eforName(java.lang.String)\u003c/code\u003e\u003c/a\u003e; distinct classes which share a common name but have different class loaders will have identical descriptor strings."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.html#descriptorString()\"\u003edescriptorString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor\u003c/a\u003e\u003c/code\u003e"
        ],
        "See Java Virtual Machine Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-4.html#jls-4.3.2\"\u003e4.3.2 Field Descriptors\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "the descriptor string for this \n\u003ccode\u003eClass\u003c/code\u003e object"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "componentType",
      "comment": "Returns the component type of this Class, if it describes an array type, or null otherwise.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "Equivalent to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#getComponentType()\"\u003e\u003ccode\u003egetComponentType()\u003c/code\u003e\u003c/a\u003e."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfField.html#componentType()\"\u003ecomponentType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfField.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfField\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"type parameter in Class\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eClass\u003c/code\u003e describing the component type, or \n\u003ccode\u003enull\u003c/code\u003e if this \n\u003ccode\u003eClass\u003c/code\u003e does not describe an array type"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "arrayType",
      "comment": "Returns a Class for an array type whose component type is described by this Class.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfField.html#arrayType()\"\u003earrayType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/TypeDescriptor.OfField.html\" title\u003d\"interface in java.lang.invoke\"\u003eTypeDescriptor.OfField\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"type parameter in Class\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eClass\u003c/code\u003e describing the array type"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.constant.ClassDesc",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "describeConstable",
      "comment": "Returns a nominal descriptor for this instance, if one can be constructed, or an empty Optional if one cannot be.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html#describeConstable()\"\u003edescribeConstable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html\" title\u003d\"interface in java.lang.constant\"\u003eConstable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "An \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e containing the resulting nominal descriptor, or an empty \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e if one cannot be constructed."
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isHidden",
      "comment": "Returns true if and only if the underlying class is a hidden class.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodHandles.Lookup.html#defineHiddenClass(byte%5B%5D,boolean,java.lang.invoke.MethodHandles.Lookup.ClassOption...)\"\u003e\u003ccode\u003eMethodHandles.Lookup.defineHiddenClass(byte[], boolean, java.lang.invoke.MethodHandles.Lookup.ClassOption...)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if this class is a hidden class."
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPermittedSubclasses",
      "comment": "This method is associated with sealed classes, a preview feature of the Java language. Preview features may be removed in a future release, or upgraded to permanent features of the Java language. Returns an array containing Class objects representing the direct subinterfaces or subclasses permitted to extend or implement this class or interface if it is sealed. The order of such elements is unspecified. The array is empty if this sealed class or interface has no permitted subclass. If this Class object represents a primitive type, void, an array type, or a class or interface that is not sealed, that is isSealed() returns false, then this method returns null. Conversely, if isSealed() returns true, then this method returns a non-null value. For each class or interface C which is recorded as a permitted direct subinterface or subclass of this class or interface, this method attempts to obtain the Class object for C (using the defining class loader of the current Class object). The Class objects which can be obtained and which are direct subinterfaces or subclasses of this class or interface, are indicated by elements of the returned array. If a Class object cannot be obtained, it is silently ignored, and not included in the result array.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.1\"\u003e8.1 Class Declarations\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.1\"\u003e9.1 Interface Declarations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager, \n\u003ci\u003es\u003c/i\u003e, is present and the caller\u0027s class loader is not the same as or an ancestor of the class loader for that returned class and invocation of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPackageAccess(java.lang.String)\"\u003e\u003ccode\u003es.checkPackageAccess()\u003c/code\u003e\u003c/a\u003e denies access to the package of any class in the returned array."
        ],
        "return": [
          "an array of \n\u003ccode\u003eClass\u003c/code\u003e objects of the permitted subclasses of this class or interface, or \n\u003ccode\u003enull\u003c/code\u003e if this class or interface is not sealed."
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSealed",
      "comment": "This method is associated with sealed classes, a preview feature of the Java language. Preview features may be removed in a future release, or upgraded to permanent features of the Java language. Returns true if and only if this Class object represents a sealed class or interface. If this Class object represents a primitive type, void, or an array type, this method returns false. A sealed class or interface has (possibly zero) permitted subclasses; getPermittedSubclasses() returns a non-null but possibly empty value for a sealed class or interface.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.1\"\u003e8.1 Class Declarations\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.1\"\u003e9.1 Interface Declarations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if this \n\u003ccode\u003eClass\u003c/code\u003e object represents a sealed class or interface."
        ],
        "since": [
          "15"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.Class",
  "comment": "Instances of the class \n\u003ccode\u003eClass\u003c/code\u003e represent classes and interfaces in a running Java application. An enum class and a record class are kinds of class; an annotation interface is a kind of interface. Every array also belongs to a class that is reflected as a \n\u003ccode\u003eClass\u003c/code\u003e object that is shared by all arrays with the same element type and number of dimensions. The primitive Java types (\n\u003ccode\u003eboolean\u003c/code\u003e, \n\u003ccode\u003ebyte\u003c/code\u003e, \n\u003ccode\u003echar\u003c/code\u003e, \n\u003ccode\u003eshort\u003c/code\u003e, \n\u003ccode\u003e int\u003c/code\u003e, \n\u003ccode\u003elong\u003c/code\u003e, \n\u003ccode\u003efloat\u003c/code\u003e, and \n\u003ccode\u003edouble\u003c/code\u003e), and the keyword \n\u003ccode\u003evoid\u003c/code\u003e are also represented as \n\u003ccode\u003eClass\u003c/code\u003e objects. \n\u003cp\u003e \u003ccode\u003eClass\u003c/code\u003e has no public constructor. Instead a \u003ccode\u003eClass\u003c/code\u003e object is constructed automatically by the Java Virtual Machine when a class is derived from the bytes of a \u003ccode\u003eclass\u003c/code\u003e file through the invocation of one of the following methods: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e \u003ca href\u003d\"ClassLoader.html#defineClass(java.lang.String,byte%5B%5D,int,int)\"\u003e\u003ccode\u003eClassLoader::defineClass\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"invoke/MethodHandles.Lookup.html#defineClass(byte%5B%5D)\"\u003e\u003ccode\u003ejava.lang.invoke.MethodHandles.Lookup::defineClass\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"invoke/MethodHandles.Lookup.html#defineHiddenClass(byte%5B%5D,boolean,java.lang.invoke.MethodHandles.Lookup.ClassOption...)\"\u003e\u003ccode\u003ejava.lang.invoke.MethodHandles.Lookup::defineHiddenClass\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The methods of class \u003ccode\u003eClass\u003c/code\u003e expose many characteristics of a class or interface. Most characteristics are derived from the \u003ccode\u003eclass\u003c/code\u003e file that the class loader passed to the Java Virtual Machine or from the \u003ccode\u003eclass\u003c/code\u003e file passed to \u003ccode\u003eLookup::defineClass\u003c/code\u003e or \u003ccode\u003eLookup::defineHiddenClass\u003c/code\u003e. A few characteristics are determined by the class loading environment at run time, such as the module returned by \u003ca href\u003d\"#getModule()\"\u003e\u003ccode\u003egetModule()\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e The following example uses a \u003ccode\u003eClass\u003c/code\u003e object to print the class name of an object: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     void printClassName(Object obj) {\n         System.out.println(\"The class of \" + obj +\n                            \" is \" + obj.getClass().getName());\n     }\n \u003c/pre\u003e\n\u003c/blockquote\u003e It is also possible to get the \n\u003ccode\u003eClass\u003c/code\u003e object for a named class or interface (or for \n\u003ccode\u003evoid\u003c/code\u003e) using a \n\u003ci\u003eclass literal\u003c/i\u003e. For example: \n\u003cblockquote\u003e \n \u003ccode\u003eSystem.out.println(\"The name of class Foo is: \"+Foo.class.getName());\u003c/code\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Some methods of class \u003ccode\u003eClass\u003c/code\u003e expose whether the declaration of a class or interface in Java source code was \u003cem\u003eenclosed\u003c/em\u003e within another declaration. Other methods describe how a class or interface is situated in a \u003cem\u003enest\u003c/em\u003e. A \u003ca id\u003d\"nest\"\u003enest\u003c/a\u003e is a set of classes and interfaces, in the same run-time package, that allow mutual access to their \u003ccode\u003eprivate\u003c/code\u003e members. The classes and interfaces are known as \u003cem\u003enestmates\u003c/em\u003e. One nestmate acts as the \u003cem\u003enest host\u003c/em\u003e, and enumerates the other nestmates which belong to the nest; each of them in turn records it as the nest host. The classes and interfaces which belong to a nest, including its host, are determined when \u003ccode\u003eclass\u003c/code\u003e files are generated, for example, a Java compiler will typically record a top-level class as the host of a nest where the other members are the classes and interfaces whose declarations are enclosed within the top-level class declaration. \u003c/p\u003e\n\u003cp\u003e A class or interface created by the invocation of \u003ca href\u003d\"invoke/MethodHandles.Lookup.html#defineHiddenClass(byte%5B%5D,boolean,java.lang.invoke.MethodHandles.Lookup.ClassOption...)\"\u003e\u003ccode\u003eLookup::defineHiddenClass\u003c/code\u003e\u003c/a\u003e is a \u003ca href\u003d\"#isHidden()\"\u003e\u003cem\u003ehidden\u003c/em\u003e\u003c/a\u003e class or interface. All kinds of class, including enum classes and record classes, may be hidden classes; all kinds of interface, including annotation interfaces, may be hidden interfaces. The \u003ca href\u003d\"#getName()\"\u003ename of a hidden class or interface\u003c/a\u003e is not a \u003ca href\u003d\"ClassLoader.html#binary-name\"\u003ebinary name\u003c/a\u003e, which means the following: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eA hidden class or interface cannot be referenced by the constant pools of other classes and interfaces. \u003c/li\u003e\n \u003cli\u003eA hidden class or interface cannot be described in \u003ca href\u003d\"constant/ConstantDesc.html\" title\u003d\"interface in java.lang.constant\"\u003e\u003cem\u003enominal form\u003c/em\u003e\u003c/a\u003e by \u003ca href\u003d\"#describeConstable()\"\u003e\u003ccode\u003eClass::describeConstable\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"constant/ClassDesc.html#of(java.lang.String)\"\u003e\u003ccode\u003eClassDesc::of\u003c/code\u003e\u003c/a\u003e, or \u003ca href\u003d\"constant/ClassDesc.html#ofDescriptor(java.lang.String)\"\u003e\u003ccode\u003eClassDesc::ofDescriptor\u003c/code\u003e\u003c/a\u003e. \u003c/li\u003e\n \u003cli\u003eA hidden class or interface cannot be discovered by \u003ca href\u003d\"#forName(java.lang.String)\"\u003e\u003ccode\u003eClass::forName\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"ClassLoader.html#loadClass(java.lang.String,boolean)\"\u003e\u003ccode\u003eClassLoader::loadClass\u003c/code\u003e\u003c/a\u003e. \u003c/li\u003e\n\u003c/ul\u003e A hidden class or interface is never an array class, but may be the element type of an array. In all other respects, the fact that a class or interface is hidden has no bearing on the characteristics exposed by the methods of class \n\u003ccode\u003eClass\u003c/code\u003e.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-15.html#jls-15.8.2\"\u003e15.8.2 Class Literals\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#defineClass(byte%5B%5D,int,int)\"\u003e\u003ccode\u003eClassLoader.defineClass(byte[], int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.Class\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}