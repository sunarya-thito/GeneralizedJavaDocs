{
  "packageName": "java.lang",
  "simpleName": "Float",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Number",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "POSITIVE_INFINITY",
      "comment": "A constant holding the positive infinity of type float. It is equal to the value returned by Float.intBitsToFloat(0x7f800000).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Float.POSITIVE_INFINITY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NEGATIVE_INFINITY",
      "comment": "A constant holding the negative infinity of type float. It is equal to the value returned by Float.intBitsToFloat(0xff800000).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Float.NEGATIVE_INFINITY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NaN",
      "comment": "A constant holding a Not-a-Number (NaN) value of type float. It is equivalent to the value returned by Float.intBitsToFloat(0x7fc00000).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Float.NaN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_VALUE",
      "comment": "A constant holding the largest positive finite value of type float, (2-2-23)·2127. It is equal to the hexadecimal floating-point literal 0x1.fffffeP+127f and also equal to Float.intBitsToFloat(0x7f7fffff).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Float.MAX_VALUE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_NORMAL",
      "comment": "A constant holding the smallest positive normal value of type float, 2-126. It is equal to the hexadecimal floating-point literal 0x1.0p-126f and also equal to Float.intBitsToFloat(0x00800000).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Float.MIN_NORMAL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "float",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_VALUE",
      "comment": "A constant holding the smallest positive nonzero value of type float, 2-149. It is equal to the hexadecimal floating-point literal 0x0.000002P-126f and also equal to Float.intBitsToFloat(0x1).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Float.MIN_VALUE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_EXPONENT",
      "comment": "Maximum exponent a finite float variable may have. It is equal to the value returned by Math.getExponent(Float.MAX_VALUE).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Float.MAX_EXPONENT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_EXPONENT",
      "comment": "Minimum exponent a normalized float variable may have. It is equal to the value returned by Math.getExponent(Float.MIN_NORMAL).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Float.MIN_EXPONENT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SIZE",
      "comment": "The number of bits used to represent a float value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Float.SIZE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BYTES",
      "comment": "The number of bytes used to represent a float value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Float.BYTES\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "name": "java.lang.Float",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TYPE",
      "comment": "The Class instance representing the primitive type float.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "f",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toString",
      "comment": "Returns a string representation of the float argument. All characters mentioned below are ASCII characters. If the argument is NaN, the result is the string \"NaN\". Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is \u0027-\u0027 (\u0027\\u002D\u0027); if the sign is positive, no sign character appears in the result. As for the magnitude m: If m is infinity, it is represented by the characters \"Infinity\"; thus, positive infinity produces the result \"Infinity\" and negative infinity produces the result \"-Infinity\". If m is zero, it is represented by the characters \"0.0\"; thus, negative zero produces the result \"-0.0\" and positive zero produces the result \"0.0\". If m is greater than or equal to 10-3 but less than 107, then it is represented as the integer part of m, in decimal form with no leading zeroes, followed by \u0027.\u0027 (\u0027\\u002E\u0027), followed by one or more decimal digits representing the fractional part of m. If m is less than 10-3 or greater than or equal to 107, then it is represented in so-called \"computerized scientific notation.\" Let n be the unique integer such that 10n ≤ m \u003c 10n+1; then let a be the mathematically exact quotient of m and 10n so that 1 ≤ a \u003c 10. The magnitude is then represented as the integer part of a, as a single decimal digit, followed by \u0027.\u0027 (\u0027\\u002E\u0027), followed by decimal digits representing the fractional part of a, followed by the letter \u0027E\u0027 (\u0027\\u0045\u0027), followed by a representation of n as a decimal integer, as produced by the method Integer.toString(int). How many digits must be printed for the fractional part of m or a? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type float. That is, suppose that x is the exact mathematical value represented by the decimal representation produced by this method for a finite nonzero argument f. Then f must be the float value nearest to x; or, if two float values are equally close to x, then f must be one of them and the least significant bit of the significand of f must be 0. To create localized string representations of a floating-point value, use subclasses of NumberFormat.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the float to be converted."
        ],
        "return": [
          "a string representation of the argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "f",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toHexString",
      "comment": "Returns a hexadecimal string representation of the float argument. All characters mentioned below are ASCII characters. If the argument is NaN, the result is the string \"NaN\". Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. If the sign is negative, the first character of the result is \u0027-\u0027 (\u0027\\u002D\u0027); if the sign is positive, no sign character appears in the result. As for the magnitude m: If m is infinity, it is represented by the string \"Infinity\"; thus, positive infinity produces the result \"Infinity\" and negative infinity produces the result \"-Infinity\". If m is zero, it is represented by the string \"0x0.0p0\"; thus, negative zero produces the result \"-0x0.0p0\" and positive zero produces the result \"0x0.0p0\". If m is a float value with a normalized representation, substrings are used to represent the significand and exponent fields. The significand is represented by the characters \"0x1.\" followed by a lowercase hexadecimal representation of the rest of the significand as a fraction. Trailing zeros in the hexadecimal representation are removed unless all the digits are zero, in which case a single zero is used. Next, the exponent is represented by \"p\" followed by a decimal string of the unbiased exponent as if produced by a call to Integer.toString on the exponent value. If m is a float value with a subnormal representation, the significand is represented by the characters \"0x0.\" followed by a hexadecimal representation of the rest of the significand as a fraction. Trailing zeros in the hexadecimal representation are removed. Next, the exponent is represented by \"p-126\". Note that there must be at least one nonzero digit in a subnormal significand. Examples Floating-point Value Hexadecimal String 1.0 0x1.0p0 -1.0 -0x1.0p0 2.0 0x1.0p1 3.0 0x1.8p1 0.5 0x1.0p-1 0.25 0x1.0p-2 Float.MAX_VALUE 0x1.fffffep127 Minimum Normal Value 0x1.0p-126 Maximum Subnormal Value 0x0.fffffep-126 Float.MIN_VALUE 0x0.000002p-126",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the \n\u003ccode\u003efloat\u003c/code\u003e to be converted."
        ],
        "return": [
          "a hex string representation of the argument."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns a Float object holding the float value represented by the argument string s. If s is null, then a NullPointerException is thrown. Leading and trailing whitespace characters in s are ignored. Whitespace is removed as if by the String.trim() method; that is, both ASCII space and control characters are removed. The rest of s should constitute a FloatValue as described by the lexical syntax rules: FloatValue: Signopt NaN Signopt Infinity Signopt FloatingPointLiteral Signopt HexFloatingPointLiteral SignedInteger HexFloatingPointLiteral: HexSignificand BinaryExponent FloatTypeSuffixopt HexSignificand: HexNumeral HexNumeral . 0x HexDigitsopt . HexDigits 0X HexDigitsopt . HexDigits BinaryExponent: BinaryExponentIndicator SignedInteger BinaryExponentIndicator: p P where Sign, FloatingPointLiteral, HexNumeral, HexDigits, SignedInteger and FloatTypeSuffix are as defined in the lexical structure sections of The Java Language Specification, except that underscores are not accepted between digits. If s does not have the form of a FloatValue, then a NumberFormatException is thrown. Otherwise, s is regarded as representing an exact decimal value in the usual \"computerized scientific notation\" or as an exact hexadecimal value; this exact numerical value is then conceptually converted to an \"infinitely precise\" binary value that is then rounded to type float by the usual round-to-nearest rule of IEEE 754 floating-point arithmetic, which includes preserving the sign of a zero value. Note that the round-to-nearest rule also implies overflow and underflow behaviour; if the exact value of s is large enough in magnitude (greater than or equal to (MAX_VALUE + ulp(MAX_VALUE)/2), rounding to float will result in an infinity and if the exact value of s is small enough in magnitude (less than or equal to MIN_VALUE/2), rounding to float will result in a zero. Finally, after rounding a Float object representing this float value is returned. To interpret localized string representations of a floating-point value, use subclasses of NumberFormat. Note that trailing format specifiers, specifiers that determine the type of a floating-point literal (1.0f is a float value; 1.0d is a double value), do not influence the results of this method. In other words, the numerical value of the input string is converted directly to the target floating-point type. In general, the two-step sequence of conversions, string to double followed by double to float, is not equivalent to converting a string directly to float. For example, if first converted to an intermediate double and then to float, the string \"1.00000017881393421514957253748434595763683319091796875001d\" results in the float value 1.0000002f; if the string is converted directly to float, 1.0000001f results. To avoid calling this method on an invalid string and having a NumberFormatException be thrown, the documentation for Double.valueOf lists a regular expression which can be used to screen the input.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the string to be parsed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the string does not contain a parsable number."
        ],
        "return": [
          "a \n\u003ccode\u003eFloat\u003c/code\u003e object holding the value represented by the \n\u003ccode\u003eString\u003c/code\u003e argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "f",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns a Float instance representing the specified float value. If a new Float instance is not required, this method should generally be used in preference to the constructor Float(float), as this method is likely to yield significantly better space and time performance by caching frequently requested values.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a float value."
        ],
        "return": [
          "a \n\u003ccode\u003eFloat\u003c/code\u003e instance representing \n\u003ccode\u003ef\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parseFloat",
      "comment": "Returns a new float initialized to the value represented by the specified String, as performed by the valueOf method of class Float.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Float.html#valueOf(java.lang.String)\"\u003e\u003ccode\u003evalueOf(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the string to be parsed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the string is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the string does not contain a parsable \n\u003ccode\u003efloat\u003c/code\u003e."
        ],
        "return": [
          "the \n\u003ccode\u003efloat\u003c/code\u003e value represented by the string argument."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "v",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isNaN",
      "comment": "Returns true if the specified number is a Not-a-Number (NaN) value, false otherwise.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the value to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the argument is NaN; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "v",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isInfinite",
      "comment": "Returns true if the specified number is infinitely large in magnitude, false otherwise.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ev\u003c/code\u003e - the value to be tested."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the argument is positive infinity or negative infinity; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "f",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isFinite",
      "comment": "Returns true if the argument is a finite floating-point value; returns false otherwise (for NaN and infinity arguments).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the \n\u003ccode\u003efloat\u003c/code\u003e value to be tested"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the argument is a finite floating-point value, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNaN",
      "comment": "Returns true if this Float value is a Not-a-Number (NaN), false otherwise.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the value represented by this object is NaN; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isInfinite",
      "comment": "Returns true if this Float value is infinitely large in magnitude, false otherwise.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the value represented by this object is positive infinity or negative infinity; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this Float object. The primitive float value represented by this object is converted to a String exactly as if by the method toString of one argument.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Float.html#toString(float)\"\u003e\u003ccode\u003etoString(float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e representation of this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "byteValue",
      "comment": "Returns the value of this Float as a byte after a narrowing primitive conversion.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#byteValue()\"\u003ebyteValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003efloat\u003c/code\u003e value represented by this object converted to type \n\u003ccode\u003ebyte\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shortValue",
      "comment": "Returns the value of this Float as a short after a narrowing primitive conversion.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#shortValue()\"\u003eshortValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003efloat\u003c/code\u003e value represented by this object converted to type \n\u003ccode\u003eshort\u003c/code\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intValue",
      "comment": "Returns the value of this Float as an int after a narrowing primitive conversion.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#intValue()\"\u003eintValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003efloat\u003c/code\u003e value represented by this object converted to type \n\u003ccode\u003eint\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longValue",
      "comment": "Returns value of this Float as a long after a narrowing primitive conversion.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#longValue()\"\u003elongValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003efloat\u003c/code\u003e value represented by this object converted to type \n\u003ccode\u003elong\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "floatValue",
      "comment": "Returns the float value of this Float object.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#floatValue()\"\u003efloatValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003efloat\u003c/code\u003e value represented by this object"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubleValue",
      "comment": "Returns the value of this Float as a double after a widening primitive conversion.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.2\"\u003e5.1.2 Widening Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#doubleValue()\"\u003edoubleValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003efloat\u003c/code\u003e value represented by this object converted to type \n\u003ccode\u003edouble\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code for this Float object. The result is the integer bit representation, exactly as produced by the method floatToIntBits(float), of the primitive float value represented by this Float object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "hashCode",
      "comment": "Returns a hash code for a float value; compatible with Float.hashCode().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to hash"
        ],
        "return": [
          "a hash code value for a \n\u003ccode\u003efloat\u003c/code\u003e value."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this object against the specified object. The result is true if and only if the argument is not null and is a Float object that represents a float with the same value as the float represented by this object. For this purpose, two float values are considered to be the same if and only if the method floatToIntBits(float) returns the identical int value when applied to each. Note that in most cases, for two instances of class Float, f1 and f2, the value of f1.equals(f2) is true if and only if    f1.floatValue() \u003d\u003d f2.floatValue()\n also has the value true. However, there are two exceptions: If f1 and f2 both represent Float.NaN, then the equals method returns true, even though Float.NaN\u003d\u003dFloat.NaN has the value false. If f1 represents +0.0f while f2 represents -0.0f, or vice versa, the equal test has the value false, even though 0.0f\u003d\u003d-0.0f has the value true. This definition allows hash tables to operate properly.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Float.html#floatToIntBits(float)\"\u003e\u003ccode\u003efloatToIntBits(float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to be compared"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the objects are the same; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "floatToIntBits",
      "comment": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"single format\" bit layout. Bit 31 (the bit that is selected by the mask 0x80000000) represents the sign of the floating-point number. Bits 30-23 (the bits that are selected by the mask 0x7f800000) represent the exponent. Bits 22-0 (the bits that are selected by the mask 0x007fffff) represent the significand (sometimes called the mantissa) of the floating-point number. If the argument is positive infinity, the result is 0x7f800000. If the argument is negative infinity, the result is 0xff800000. If the argument is NaN, the result is 0x7fc00000. In all cases, the result is an integer that, when given to the intBitsToFloat(int) method, will produce a floating-point value the same as the argument to floatToIntBits (except all NaN values are collapsed to a single \"canonical\" NaN value).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - a floating-point number."
        ],
        "return": [
          "the bits that represent the floating-point number."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "floatToRawIntBits",
      "comment": "Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"single format\" bit layout, preserving Not-a-Number (NaN) values. Bit 31 (the bit that is selected by the mask 0x80000000) represents the sign of the floating-point number. Bits 30-23 (the bits that are selected by the mask 0x7f800000) represent the exponent. Bits 22-0 (the bits that are selected by the mask 0x007fffff) represent the significand (sometimes called the mantissa) of the floating-point number. If the argument is positive infinity, the result is 0x7f800000. If the argument is negative infinity, the result is 0xff800000. If the argument is NaN, the result is the integer representing the actual NaN value. Unlike the floatToIntBits method, floatToRawIntBits does not collapse all the bit patterns encoding a NaN to a single \"canonical\" NaN value. In all cases, the result is an integer that, when given to the intBitsToFloat(int) method, will produce a floating-point value the same as the argument to floatToRawIntBits.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - a floating-point number."
        ],
        "return": [
          "the bits that represent the floating-point number."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bits",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "intBitsToFloat",
      "comment": "Returns the float value corresponding to a given bit representation. The argument is considered to be a representation of a floating-point value according to the IEEE 754 floating-point \"single format\" bit layout. If the argument is 0x7f800000, the result is positive infinity. If the argument is 0xff800000, the result is negative infinity. If the argument is any value in the range 0x7f800001 through 0x7fffffff or in the range 0xff800001 through 0xffffffff, the result is a NaN. No IEEE 754 floating-point operation provided by Java can distinguish between two NaN values of the same type with different bit patterns. Distinct values of NaN are only distinguishable by use of the Float.floatToRawIntBits method. In all other cases, let s, e, and m be three values that can be computed from the argument: \n int s \u003d ((bits \u003e\u003e 31) \u003d\u003d 0) ? 1 : -1;\n int e \u003d ((bits \u003e\u003e 23) \u0026 0xff);\n int m \u003d (e \u003d\u003d 0) ?\n                 (bits \u0026 0x7fffff) \u003c\u003c 1 :\n                 (bits \u0026 0x7fffff) | 0x800000;\n Then the floating-point result equals the value of the mathematical expression s·m·2e-150. Note that this method may not be able to return a float NaN with exactly same bit pattern as the int argument. IEEE 754 distinguishes between two kinds of NaNs, quiet NaNs and signaling NaNs. The differences between the two kinds of NaN are generally not visible in Java. Arithmetic operations on signaling NaNs turn them into quiet NaNs with a different, but often similar, bit pattern. However, on some processors merely copying a signaling NaN also performs that conversion. In particular, copying a signaling NaN to return it to the calling method may perform this conversion. So intBitsToFloat may not be able to return a float with a signaling NaN bit pattern. Consequently, for some int values, floatToRawIntBits(intBitsToFloat(start)) may not equal start. Moreover, which particular bit patterns represent signaling NaNs is platform dependent; although all NaN bit patterns, quiet or signaling, must be in the NaN range identified above.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - an integer."
        ],
        "return": [
          "the \n\u003ccode\u003efloat\u003c/code\u003e floating-point value with the same bit pattern."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Float",
            "type": "Class"
          },
          "name": "anotherFloat",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares two Float objects numerically. There are two ways in which comparisons performed by this method differ from those performed by the Java language numerical comparison operators (\u003c, \u003c\u003d, \u003d\u003d, \u003e\u003d, \u003e) when applied to primitive float values: Float.NaN is considered by this method to be equal to itself and greater than all other float values (including Float.POSITIVE_INFINITY). 0.0f is considered by this method to be greater than -0.0f. This ensures that the natural ordering of Float objects imposed by this method is consistent with equals.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003e\u003ccode\u003eComparable.compareTo(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Float.html\" title\u003d\"class in java.lang\"\u003eFloat\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eanotherFloat\u003c/code\u003e - the \n\u003ccode\u003eFloat\u003c/code\u003e to be compared."
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003eanotherFloat\u003c/code\u003e is numerically equal to this \n\u003ccode\u003eFloat\u003c/code\u003e; a value less than \n\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eFloat\u003c/code\u003e is numerically less than \n\u003ccode\u003eanotherFloat\u003c/code\u003e; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eFloat\u003c/code\u003e is numerically greater than \n\u003ccode\u003eanotherFloat\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "f1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "f2",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "compare",
      "comment": "Compares the two specified float values. The sign of the integer value returned is the same as that of the integer that would be returned by the call:     new Float(f1).compareTo(new Float(f2))",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef1\u003c/code\u003e - the first \n\u003ccode\u003efloat\u003c/code\u003e to compare.",
          "\u003ccode\u003ef2\u003c/code\u003e - the second \n\u003ccode\u003efloat\u003c/code\u003e to compare."
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ef1\u003c/code\u003e is numerically equal to \n\u003ccode\u003ef2\u003c/code\u003e; a value less than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ef1\u003c/code\u003e is numerically less than \n\u003ccode\u003ef2\u003c/code\u003e; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ef1\u003c/code\u003e is numerically greater than \n\u003ccode\u003ef2\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "b",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "sum",
      "comment": "Adds two float values together as per the + operator.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.2.4\"\u003e4.2.4 Floating-Point Operations\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/BinaryOperator.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003eBinaryOperator\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the first operand",
          "\u003ccode\u003eb\u003c/code\u003e - the second operand"
        ],
        "return": [
          "the sum of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "b",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "max",
      "comment": "Returns the greater of two float values as if by calling Math.max.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/BinaryOperator.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003eBinaryOperator\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the first operand",
          "\u003ccode\u003eb\u003c/code\u003e - the second operand"
        ],
        "return": [
          "the greater of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "b",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "min",
      "comment": "Returns the smaller of two float values as if by calling Math.min.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/BinaryOperator.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003eBinaryOperator\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the first operand",
          "\u003ccode\u003eb\u003c/code\u003e - the second operand"
        ],
        "return": [
          "the smaller of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.Float",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "describeConstable",
      "comment": "Returns an Optional containing the nominal descriptor for this instance, which is the instance itself.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html#describeConstable()\"\u003edescribeConstable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html\" title\u003d\"interface in java.lang.constant\"\u003eConstable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e describing the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Float.html\" title\u003d\"class in java.lang\"\u003eFloat\u003c/a\u003e instance"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Float",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "resolveConstantDesc",
      "comment": "Resolves this instance as a ConstantDesc, the result of which is the instance itself.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/ConstantDesc.html#resolveConstantDesc(java.lang.invoke.MethodHandles.Lookup)\"\u003eresolveConstantDesc\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/ConstantDesc.html\" title\u003d\"interface in java.lang.constant\"\u003eConstantDesc\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - ignored"
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Float.html\" title\u003d\"class in java.lang\"\u003eFloat\u003c/a\u003e instance"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a newly allocated Float object that represents the primitive float argument.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to be represented by the \n\u003ccode\u003eFloat\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a newly allocated Float object that represents the argument converted to type float.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to be represented by the \n\u003ccode\u003eFloat\u003c/code\u003e."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a newly allocated Float object that represents the floating-point value of type float represented by the string. The string is converted to a float value as if by the valueOf method.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a string to be converted to a \n\u003ccode\u003eFloat\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the string does not contain a parsable number."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.Float",
  "comment": "The \n\u003ccode\u003eFloat\u003c/code\u003e class wraps a value of primitive type \n\u003ccode\u003efloat\u003c/code\u003e in an object. An object of type \n\u003ccode\u003eFloat\u003c/code\u003e contains a single field whose type is \n\u003ccode\u003efloat\u003c/code\u003e. \n\u003cp\u003eIn addition, this class provides several methods for converting a \u003ccode\u003efloat\u003c/code\u003e to a \u003ccode\u003eString\u003c/code\u003e and a \u003ccode\u003eString\u003c/code\u003e to a \u003ccode\u003efloat\u003c/code\u003e, as well as other constants and methods useful when dealing with a \u003ccode\u003efloat\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThis is a \u003ca href\u003d\"../../../java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e class; programmers should treat instances that are \u003ca href\u003d\"#equals(java.lang.Object)\"\u003eequal\u003c/a\u003e as interchangeable and should not use instances for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.Float\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}