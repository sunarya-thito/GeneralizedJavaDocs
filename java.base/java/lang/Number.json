{
  "packageName": "java.lang",
  "simpleName": "Number",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "intValue",
      "comment": "Returns the value of the specified number as an int.",
      "tagMap": {
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003eint\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "longValue",
      "comment": "Returns the value of the specified number as a long.",
      "tagMap": {
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003elong\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "floatValue",
      "comment": "Returns the value of the specified number as a float.",
      "tagMap": {
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003efloat\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "doubleValue",
      "comment": "Returns the value of the specified number as a double.",
      "tagMap": {
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003edouble\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "byteValue",
      "comment": "Returns the value of the specified number as a byte. This implementation returns the result of intValue() cast to a byte.",
      "tagMap": {
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003ebyte\u003c/code\u003e."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shortValue",
      "comment": "Returns the value of the specified number as a short. This implementation returns the result of intValue() cast to a short.",
      "tagMap": {
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003eshort\u003c/code\u003e."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.lang.Number",
  "comment": "The abstract class \n\u003ccode\u003eNumber\u003c/code\u003e is the superclass of platform classes representing numeric values that are convertible to the primitive types \n\u003ccode\u003ebyte\u003c/code\u003e, \n\u003ccode\u003edouble\u003c/code\u003e, \n\u003ccode\u003efloat\u003c/code\u003e, \n\u003ccode\u003e int\u003c/code\u003e, \n\u003ccode\u003elong\u003c/code\u003e, and \n\u003ccode\u003eshort\u003c/code\u003e. The specific semantics of the conversion from the numeric value of a particular \n\u003ccode\u003eNumber\u003c/code\u003e implementation to a given primitive type is defined by the \n\u003ccode\u003eNumber\u003c/code\u003e implementation in question. For platform classes, the conversion is often analogous to a narrowing primitive conversion or a widening primitive conversion as defined in \n\u003ccite\u003eThe Java Language Specification\u003c/cite\u003e for converting between primitive types. Therefore, conversions may lose information about the overall magnitude of a numeric value, may lose precision, and may even return a result of a different sign than the input. See the documentation of a given \n\u003ccode\u003eNumber\u003c/code\u003e implementation for conversion details.",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.2\"\u003e5.1.2 Widening Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.Number\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}