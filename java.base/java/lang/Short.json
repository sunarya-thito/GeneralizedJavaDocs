{
  "packageName": "java.lang",
  "simpleName": "Short",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Number",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_VALUE",
      "comment": "A constant holding the minimum value a short can have, -215.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Short.MIN_VALUE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "short",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_VALUE",
      "comment": "A constant holding the maximum value a short can have, 215-1.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Short.MAX_VALUE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "name": "java.lang.Short",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TYPE",
      "comment": "The Class instance representing the primitive type short.",
      "tagMap": {}
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SIZE",
      "comment": "The number of bits used to represent a short value in two\u0027s complement binary form.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Short.SIZE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BYTES",
      "comment": "The number of bytes used to represent a short value in two\u0027s complement binary form.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Short.BYTES\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toString",
      "comment": "Returns a new String object representing the specified short. The radix is assumed to be 10.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#toString(int)\"\u003e\u003ccode\u003eInteger.toString(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eshort\u003c/code\u003e to be converted"
        ],
        "return": [
          "the string representation of the specified \n\u003ccode\u003eshort\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "radix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parseShort",
      "comment": "Parses the string argument as a signed short in the radix specified by the second argument. The characters in the string must all be digits, of the specified radix (as determined by whether Character.digit(char, int) returns a nonnegative value) except that the first character may be an ASCII minus sign \u0027-\u0027 (\u0027\\u002D\u0027) to indicate a negative value or an ASCII plus sign \u0027+\u0027 (\u0027\\u002B\u0027) to indicate a positive value. The resulting short value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX. Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign \u0027-\u0027 (\u0027\\u002D\u0027) or plus sign \u0027+\u0027 (\u0027\\u002B\u0027) provided that the string is longer than length 1. The value represented by the string is not a value of type short.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e containing the \n\u003ccode\u003eshort\u003c/code\u003e representation to be parsed",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix to be used while parsing \n\u003ccode\u003es\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003eString\u003c/code\u003e does not contain a parsable \n\u003ccode\u003eshort\u003c/code\u003e."
        ],
        "return": [
          "the \n\u003ccode\u003eshort\u003c/code\u003e represented by the string argument in the specified radix."
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parseShort",
      "comment": "Parses the string argument as a signed decimal short. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign \u0027-\u0027 (\u0027\\u002D\u0027) to indicate a negative value or an ASCII plus sign \u0027+\u0027 (\u0027\\u002B\u0027) to indicate a positive value. The resulting short value is returned, exactly as if the argument and the radix 10 were given as arguments to the parseShort(java.lang.String, int) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e containing the \n\u003ccode\u003eshort\u003c/code\u003e representation to be parsed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - If the string does not contain a parsable \n\u003ccode\u003eshort\u003c/code\u003e."
        ],
        "return": [
          "the \n\u003ccode\u003eshort\u003c/code\u003e value represented by the argument in decimal."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Short",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "radix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns a Short object holding the value extracted from the specified String when parsed with the radix given by the second argument. The first argument is interpreted as representing a signed short in the radix specified by the second argument, exactly as if the argument were given to the parseShort(java.lang.String, int) method. The result is a Short object that represents the short value specified by the string. In other words, this method returns a Short object equal to the value of: new Short(Short.parseShort(s, radix))",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the string to be parsed",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix to be used in interpreting \n\u003ccode\u003es\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003eString\u003c/code\u003e does not contain a parsable \n\u003ccode\u003eshort\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eShort\u003c/code\u003e object holding the value represented by the string argument in the specified radix."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Short",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns a Short object holding the value given by the specified String. The argument is interpreted as representing a signed decimal short, exactly as if the argument were given to the parseShort(java.lang.String) method. The result is a Short object that represents the short value specified by the string. In other words, this method returns a Short object equal to the value of: new Short(Short.parseShort(s))",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the string to be parsed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003eString\u003c/code\u003e does not contain a parsable \n\u003ccode\u003eshort\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eShort\u003c/code\u003e object holding the value represented by the string argument"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.constant.DynamicConstantDesc",
            "parameters": [
              {
                "name": "java.lang.Short",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "describeConstable",
      "comment": "Returns an Optional containing the nominal descriptor for this instance.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html#describeConstable()\"\u003edescribeConstable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html\" title\u003d\"interface in java.lang.constant\"\u003eConstable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e describing the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Short.html\" title\u003d\"class in java.lang\"\u003eShort\u003c/a\u003e instance"
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Short",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns a Short instance representing the specified short value. If a new Short instance is not required, this method should generally be used in preference to the constructor Short(short), as this method is likely to yield significantly better space and time performance by caching frequently requested values. This method will always cache values in the range -128 to 127, inclusive, and may cache other values outside of this range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a short value."
        ],
        "return": [
          "a \n\u003ccode\u003eShort\u003c/code\u003e instance representing \n\u003ccode\u003es\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Short",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "decode",
      "comment": "Decodes a String into a Short. Accepts decimal, hexadecimal, and octal numbers given by the following grammar: DecodableString: Signopt DecimalNumeral Signopt 0x HexDigits Signopt 0X HexDigits Signopt # HexDigits Signopt 0 OctalDigits Sign: - + DecimalNumeral, HexDigits, and OctalDigits are as defined in section 3.10.1 of The Java Language Specification, except that underscores are not accepted between digits. The sequence of characters following an optional sign and/or radix specifier (\"0x\", \"0X\", \"#\", or leading zero) is parsed as by the Short.parseShort method with the indicated radix (10, 16, or 8). This sequence of characters must represent a positive value or a NumberFormatException will be thrown. The result is negated if first character of the specified String is the minus sign. No whitespace characters are permitted in the String.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Short.html#parseShort(java.lang.String,int)\"\u003e\u003ccode\u003eparseShort(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to decode."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eString\u003c/code\u003e does not contain a parsable \n\u003ccode\u003eshort\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eShort\u003c/code\u003e object holding the \n\u003ccode\u003eshort\u003c/code\u003e value represented by \n\u003ccode\u003enm\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "byteValue",
      "comment": "Returns the value of this Short as a byte after a narrowing primitive conversion.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#byteValue()\"\u003ebyteValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003ebyte\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shortValue",
      "comment": "Returns the value of this Short as a short.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#shortValue()\"\u003eshortValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003eshort\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intValue",
      "comment": "Returns the value of this Short as an int after a widening primitive conversion.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.2\"\u003e5.1.2 Widening Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#intValue()\"\u003eintValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003eint\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longValue",
      "comment": "Returns the value of this Short as a long after a widening primitive conversion.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.2\"\u003e5.1.2 Widening Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#longValue()\"\u003elongValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003elong\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "floatValue",
      "comment": "Returns the value of this Short as a float after a widening primitive conversion.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.2\"\u003e5.1.2 Widening Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#floatValue()\"\u003efloatValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003efloat\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubleValue",
      "comment": "Returns the value of this Short as a double after a widening primitive conversion.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.2\"\u003e5.1.2 Widening Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#doubleValue()\"\u003edoubleValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003edouble\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a String object representing this Short\u0027s value. The value is converted to signed decimal representation and returned as a string, exactly as if the short value were given as an argument to the toString(short) method.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the value of this object in base\u0026nbsp;10."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code for this Short; equal to the result of invoking intValue().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this \n\u003ccode\u003eShort\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "hashCode",
      "comment": "Returns a hash code for a short value; compatible with Short.hashCode().",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to hash"
        ],
        "return": [
          "a hash code value for a \n\u003ccode\u003eshort\u003c/code\u003e value."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this object to the specified object. The result is true if and only if the argument is not null and is a Short object that contains the same short value as this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to compare with"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the objects are the same; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Short",
            "type": "Class"
          },
          "field": {
            "name": "anotherShort"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares two Short objects numerically.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Short.html\" title\u003d\"class in java.lang\"\u003eShort\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eanotherShort\u003c/code\u003e - the \n\u003ccode\u003eShort\u003c/code\u003e to be compared."
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eShort\u003c/code\u003e is equal to the argument \n\u003ccode\u003eShort\u003c/code\u003e; a value less than \n\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eShort\u003c/code\u003e is numerically less than the argument \n\u003ccode\u003eShort\u003c/code\u003e; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eShort\u003c/code\u003e is numerically greater than the argument \n\u003ccode\u003eShort\u003c/code\u003e (signed comparison)."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "compare",
      "comment": "Compares two short values numerically. The value returned is identical to what would be returned by:     Short.valueOf(x).compareTo(Short.valueOf(y))",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first \n\u003ccode\u003eshort\u003c/code\u003e to compare",
          "\u003ccode\u003ey\u003c/code\u003e - the second \n\u003ccode\u003eshort\u003c/code\u003e to compare"
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u003d\u003d y\u003c/code\u003e; a value less than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u0026lt; y\u003c/code\u003e; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u0026gt; y\u003c/code\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "y"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "compareUnsigned",
      "comment": "Compares two short values numerically treating the values as unsigned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first \n\u003ccode\u003eshort\u003c/code\u003e to compare",
          "\u003ccode\u003ey\u003c/code\u003e - the second \n\u003ccode\u003eshort\u003c/code\u003e to compare"
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u003d\u003d y\u003c/code\u003e; a value less than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u0026lt; y\u003c/code\u003e as unsigned values; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u0026gt; y\u003c/code\u003e as unsigned values"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "reverseBytes",
      "comment": "Returns the value obtained by reversing the order of the bytes in the two\u0027s complement representation of the specified short value.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value whose bytes are to be reversed"
        ],
        "return": [
          "the value obtained by reversing (or, equivalently, swapping) the bytes in the specified \n\u003ccode\u003eshort\u003c/code\u003e value."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toUnsignedInt",
      "comment": "Converts the argument to an int by an unsigned conversion. In an unsigned conversion to an int, the high-order 16 bits of the int are zero and the low-order 16 bits are equal to the bits of the short argument. Consequently, zero and positive short values are mapped to a numerically equal int value and negative short values are mapped to an int value equal to the input plus 216.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the value to convert to an unsigned \n\u003ccode\u003eint\u003c/code\u003e"
        ],
        "return": [
          "the argument converted to \n\u003ccode\u003eint\u003c/code\u003e by an unsigned conversion"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toUnsignedLong",
      "comment": "Converts the argument to a long by an unsigned conversion. In an unsigned conversion to a long, the high-order 48 bits of the long are zero and the low-order 16 bits are equal to the bits of the short argument. Consequently, zero and positive short values are mapped to a numerically equal long value and negative short values are mapped to a long value equal to the input plus 216.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the value to convert to an unsigned \n\u003ccode\u003elong\u003c/code\u003e"
        ],
        "return": [
          "the argument converted to \n\u003ccode\u003elong\u003c/code\u003e by an unsigned conversion"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a newly allocated Short object that represents the specified short value.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to be represented by the \n\u003ccode\u003eShort\u003c/code\u003e."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a newly allocated Short object that represents the short value indicated by the String parameter. The string is converted to a short value in exactly the manner used by the parseShort method for radix 10.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to be converted to a \n\u003ccode\u003eShort\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003eString\u003c/code\u003e does not contain a parsable \n\u003ccode\u003eshort\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.Short",
  "comment": "The \n\u003ccode\u003eShort\u003c/code\u003e class wraps a value of primitive type \n\u003ccode\u003e short\u003c/code\u003e in an object. An object of type \n\u003ccode\u003eShort\u003c/code\u003e contains a single field whose type is \n\u003ccode\u003eshort\u003c/code\u003e. \n\u003cp\u003eIn addition, this class provides several methods for converting a \u003ccode\u003eshort\u003c/code\u003e to a \u003ccode\u003eString\u003c/code\u003e and a \u003ccode\u003eString\u003c/code\u003e to a \u003ccode\u003eshort\u003c/code\u003e, as well as other constants and methods useful when dealing with a \u003ccode\u003eshort\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThis is a \u003ca href\u003d\"../../../java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e class; programmers should treat instances that are \u003ca href\u003d\"#equals(java.lang.Object)\"\u003eequal\u003c/a\u003e as interchangeable and should not use instances for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNumber\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.Short\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}