{
  "packageName": "java.lang",
  "simpleName": "StackTraceElement",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFileName",
      "comment": "Returns the name of the source file containing the execution point represented by this stack trace element. Generally, this corresponds to the SourceFile attribute of the relevant class file (as per The Java Virtual Machine Specification, Section 4.7.7). In some systems, the name may refer to some source code unit other than a file, such as an entry in source repository.",
      "tagMap": {
        "return": [
          "the name of the file containing the execution point represented by this stack trace element, or \n\u003ccode\u003enull\u003c/code\u003e if this information is unavailable."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLineNumber",
      "comment": "Returns the line number of the source line containing the execution point represented by this stack trace element. Generally, this is derived from the LineNumberTable attribute of the relevant class file (as per The Java Virtual Machine Specification, Section 4.7.8).",
      "tagMap": {
        "return": [
          "the line number of the source line containing the execution point represented by this stack trace element, or a negative number if this information is unavailable."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModuleName",
      "comment": "Returns the module name of the module containing the execution point represented by this stack trace element.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Module.html#getName()\"\u003e\u003ccode\u003eModule.getName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the module name of the \n\u003ccode\u003eModule\u003c/code\u003e containing the execution point represented by this stack trace element; \n\u003ccode\u003enull\u003c/code\u003e if the module name is not available."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModuleVersion",
      "comment": "Returns the module version of the module containing the execution point represented by this stack trace element.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/module/ModuleDescriptor.Version.html\" title\u003d\"class in java.lang.module\"\u003e\u003ccode\u003eModuleDescriptor.Version\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the module version of the \n\u003ccode\u003eModule\u003c/code\u003e containing the execution point represented by this stack trace element; \n\u003ccode\u003enull\u003c/code\u003e if the module version is not available."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getClassLoaderName",
      "comment": "Returns the name of the class loader of the class containing the execution point represented by this stack trace element.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#getName()\"\u003e\u003ccode\u003eClassLoader.getName()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the name of the class loader of the class containing the execution point represented by this stack trace element; \n\u003ccode\u003enull\u003c/code\u003e if the class loader is not named."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getClassName",
      "comment": "Returns the fully qualified name of the class containing the execution point represented by this stack trace element.",
      "tagMap": {
        "return": [
          "the fully qualified name of the \n\u003ccode\u003eClass\u003c/code\u003e containing the execution point represented by this stack trace element."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMethodName",
      "comment": "Returns the name of the method containing the execution point represented by this stack trace element. If the execution point is contained in an instance or class initializer, this method will return the appropriate special method name, \u003cinit\u003e or \u003cclinit\u003e, as per Section 3.9 of The Java Virtual Machine Specification.",
      "tagMap": {
        "return": [
          "the name of the method containing the execution point represented by this stack trace element."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isNativeMethod",
      "comment": "Returns true if the method containing the execution point represented by this stack trace element is a native method.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the method containing the execution point represented by this stack trace element is a native method."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this stack trace element.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#printStackTrace()\"\u003e\u003ccode\u003eThrowable.printStackTrace()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "apiNote": [
          "The format of this string depends on the implementation, but the following examples may be regarded as typical: \n\u003cul\u003e \n \u003cli\u003e \"\u003ccode\u003ecom.foo.loader/foo@9.0/com.foo.Main.run(Main.java:101)\u003c/code\u003e\" - See the description below. \u003c/li\u003e \n \u003cli\u003e \"\u003ccode\u003ecom.foo.loader/foo@9.0/com.foo.Main.run(Main.java)\u003c/code\u003e\" - The line number is unavailable. \u003c/li\u003e \n \u003cli\u003e \"\u003ccode\u003ecom.foo.loader/foo@9.0/com.foo.Main.run(Unknown Source)\u003c/code\u003e\" - Neither the file name nor the line number is available. \u003c/li\u003e \n \u003cli\u003e \"\u003ccode\u003ecom.foo.loader/foo@9.0/com.foo.Main.run(Native Method)\u003c/code\u003e\" - The method containing the execution point is a native method. \u003c/li\u003e \n \u003cli\u003e \"\u003ccode\u003ecom.foo.loader//com.foo.bar.App.run(App.java:12)\u003c/code\u003e\" - The class of the execution point is defined in the unnamed module of the class loader named \u003ccode\u003ecom.foo.loader\u003c/code\u003e. \u003c/li\u003e \n \u003cli\u003e \"\u003ccode\u003eacme@2.1/org.acme.Lib.test(Lib.java:80)\u003c/code\u003e\" - The class of the execution point is defined in \u003ccode\u003eacme\u003c/code\u003e module loaded by a built-in class loader such as the application class loader. \u003c/li\u003e \n \u003cli\u003e \"\u003ccode\u003eMyClass.mash(MyClass.java:9)\u003c/code\u003e\" - \u003ccode\u003eMyClass\u003c/code\u003e class is on the application class path. \u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e The first example shows a stack trace element consisting of three elements, each separated by \u003ccode\u003e\"/\"\u003c/code\u003e, followed by the source file name and the line number of the source line containing the execution point. The first element \"\u003ccode\u003ecom.foo.loader\u003c/code\u003e\" is the name of the class loader. The second element \"\u003ccode\u003efoo@9.0\u003c/code\u003e\" is the module name and version. The third element is the method containing the execution point; \"\u003ccode\u003ecom.foo.Main\"\u003c/code\u003e\" is the fully-qualified class name and \"\u003ccode\u003erun\u003c/code\u003e\" is the name of the method. \"\u003ccode\u003eMain.java\u003c/code\u003e\" is the source file name and \"\u003ccode\u003e101\u003c/code\u003e\" is the line number. \u003c/p\u003e\n\u003cp\u003e If a class is defined in an \u003cem\u003eunnamed module\u003c/em\u003e then the second element is omitted as shown in \"\u003ccode\u003ecom.foo.loader//com.foo.bar.App.run(App.java:12)\u003c/code\u003e\". \u003c/p\u003e\n\u003cp\u003e If the class loader is a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#builtinLoaders\"\u003e built-in class loader\u003c/a\u003e or is not named then the first element and its following \u003ccode\u003e\"/\"\u003c/code\u003e are omitted as shown in \"\u003ccode\u003eacme@2.1/org.acme.Lib.test(Lib.java:80)\u003c/code\u003e\". If the first element is omitted and the module is an unnamed module, the second element and its following \u003ccode\u003e\"/\"\u003c/code\u003e are also omitted as shown in \"\u003ccode\u003eMyClass.mash(MyClass.java:9)\u003c/code\u003e\". \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003etoString\u003c/code\u003e method may return two different values on two \u003ccode\u003eStackTraceElement\u003c/code\u003e instances that are \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackTraceElement.html#equals(java.lang.Object)\"\u003eequal\u003c/a\u003e, for example one created via the constructor, and one obtained from \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eThrowable\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StackWalker.StackFrame.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eStackWalker.StackFrame\u003c/code\u003e\u003c/a\u003e, where an implementation may choose to omit some element in the returned string.\u003c/p\u003e"
        ],
        "return": [
          "a string representation of the object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Returns true if the specified object is another StackTraceElement instance representing the same execution point as this instance. Two stack trace elements a and b are equal if and only if: \n     equals(a.getClassLoaderName(), b.getClassLoaderName()) \u0026\u0026\n     equals(a.getModuleName(), b.getModuleName()) \u0026\u0026\n     equals(a.getModuleVersion(), b.getModuleVersion()) \u0026\u0026\n     equals(a.getClassName(), b.getClassName()) \u0026\u0026\n     equals(a.getMethodName(), b.getMethodName())\n     equals(a.getFileName(), b.getFileName()) \u0026\u0026\n     a.getLineNumber() \u003d\u003d b.getLineNumber()\n\n where equals has the semantics of Objects.equals.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to be compared with this stack trace element."
        ],
        "return": [
          "true if the specified object is another \n\u003ccode\u003eStackTraceElement\u003c/code\u003e instance representing the same execution point as this instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code value for this stack trace element.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "declaringClass"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "methodName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "fileName"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "lineNumber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a stack trace element representing the specified execution point. The module name and module version of the stack trace element will be null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edeclaringClass\u003c/code\u003e - the fully qualified name of the class containing the execution point represented by the stack trace element",
          "\u003ccode\u003emethodName\u003c/code\u003e - the name of the method containing the execution point represented by the stack trace element",
          "\u003ccode\u003efileName\u003c/code\u003e - the name of the file containing the execution point represented by the stack trace element, or \n\u003ccode\u003enull\u003c/code\u003e if this information is unavailable",
          "\u003ccode\u003elineNumber\u003c/code\u003e - the line number of the source line containing the execution point represented by this stack trace element, or a negative number if this information is unavailable. A value of -2 indicates that the method containing the execution point is a native method"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edeclaringClass\u003c/code\u003e or \n\u003ccode\u003emethodName\u003c/code\u003e is null"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "classLoaderName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "moduleName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "moduleVersion"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "declaringClass"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "methodName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "fileName"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "lineNumber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a stack trace element representing the specified execution point.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eclassLoaderName\u003c/code\u003e - the class loader name if the class loader of the class containing the execution point represented by the stack trace is named; otherwise \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003emoduleName\u003c/code\u003e - the module name if the class containing the execution point represented by the stack trace is in a named module; otherwise \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003emoduleVersion\u003c/code\u003e - the module version if the class containing the execution point represented by the stack trace is in a named module that has a version; otherwise \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003edeclaringClass\u003c/code\u003e - the fully qualified name of the class containing the execution point represented by the stack trace element",
          "\u003ccode\u003emethodName\u003c/code\u003e - the name of the method containing the execution point represented by the stack trace element",
          "\u003ccode\u003efileName\u003c/code\u003e - the name of the file containing the execution point represented by the stack trace element, or \n\u003ccode\u003enull\u003c/code\u003e if this information is unavailable",
          "\u003ccode\u003elineNumber\u003c/code\u003e - the line number of the source line containing the execution point represented by this stack trace element, or a negative number if this information is unavailable. A value of -2 indicates that the method containing the execution point is a native method"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edeclaringClass\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or \n\u003ccode\u003emethodName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.StackTraceElement",
  "comment": "An element in a stack trace, as returned by \n\u003ca href\u003d\"Throwable.html#getStackTrace()\"\u003e\u003ccode\u003eThrowable.getStackTrace()\u003c/code\u003e\u003c/a\u003e. Each element represents a single stack frame. All stack frames except for the one at the top of the stack represent a method invocation. The frame at the top of the stack represents the execution point at which the stack trace was generated. Typically, this is the point at which the throwable corresponding to the stack trace was created.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.StackTraceElement\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}