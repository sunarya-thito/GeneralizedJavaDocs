{
  "packageName": "java.lang",
  "simpleName": "Iterable",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "owner": "java.lang.Iterable",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "iterator",
      "comment": "Returns an iterator over elements of type T.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an Iterator."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.lang.Iterable",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "forEach",
      "comment": "Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception. Actions are performed in the order of iteration, if that order is specified. Exceptions thrown by the action are relayed to the caller. The behavior of this method is unspecified if the action performs side-effects that modify the underlying source of elements, unless an overriding class has specified a concurrent modification policy.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "\u003cp\u003eThe default implementation behaves as if: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n     for (T t : this)\n         action.accept(t);\n \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - The action to be performed for each element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified action is null"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator",
        "parameters": [
          {
            "owner": "java.lang.Iterable",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spliterator",
      "comment": "Creates a Spliterator over the elements described by this Iterable.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation creates an \n\u003cem\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#binding\"\u003eearly-binding\u003c/a\u003e\u003c/em\u003e spliterator from the iterable\u0027s \n\u003ccode\u003eIterator\u003c/code\u003e. The spliterator inherits the \n\u003cem\u003efail-fast\u003c/em\u003e properties of the iterable\u0027s iterator."
        ],
        "implNote": [
          "The default implementation should usually be overridden. The spliterator returned by the default implementation has poor splitting capabilities, is unsized, and does not report any spliterator characteristics. Implementing classes can nearly always provide a better implementation."
        ],
        "return": [
          "a \n\u003ccode\u003eSpliterator\u003c/code\u003e over the elements described by this \n\u003ccode\u003eIterable\u003c/code\u003e."
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.lang.Iterable",
  "annotations": [],
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-14.html#jls-14.14.2\"\u003e14.14.2 The enhanced \u003ccode\u003efor\u003c/code\u003e statement\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}