{
  "packageName": "java.lang",
  "simpleName": "Package",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Return the name of this package.",
      "tagMap": {
        "return": [
          "The fully-qualified name of this package as defined in section \n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-6.html#jls-6.5.3\"\u003e6.5.3\u003c/a\u003e of \n\u003ccite\u003eThe Java Language Specification\u003c/cite\u003e, for example, \n\u003ccode\u003ejava.lang\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSpecificationTitle",
      "comment": "Return the title of the specification that this package implements.",
      "tagMap": {
        "return": [
          "the specification title, \n\u003ccode\u003enull\u003c/code\u003e is returned if it is not known."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSpecificationVersion",
      "comment": "Returns the version number of the specification that this package implements. This version string must be a sequence of non-negative decimal integers separated by \".\"\u0027s and may have leading zeros. When version strings are compared the most significant numbers are compared. Specification version numbers use a syntax that consists of non-negative decimal integers separated by periods \".\", for example \"2.0\" or \"1.2.3.4.5.6.7\". This allows an extensible number to be used to represent major, minor, micro, etc. versions. The version specification is described by the following formal grammar: SpecificationVersion: Digits RefinedVersionopt RefinedVersion: . Digits . Digits RefinedVersion Digits: Digit Digits Digit: any character for which Character.isDigit(char) returns true, e.g. 0, 1, 2, ...",
      "tagMap": {
        "return": [
          "the specification version, \n\u003ccode\u003enull\u003c/code\u003e is returned if it is not known."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSpecificationVendor",
      "comment": "Return the name of the organization, vendor, or company that owns and maintains the specification of the classes that implement this package.",
      "tagMap": {
        "return": [
          "the specification vendor, \n\u003ccode\u003enull\u003c/code\u003e is returned if it is not known."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getImplementationTitle",
      "comment": "Return the title of this package.",
      "tagMap": {
        "return": [
          "the title of the implementation, \n\u003ccode\u003enull\u003c/code\u003e is returned if it is not known."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getImplementationVersion",
      "comment": "Return the version of this implementation. It consists of any string assigned by the vendor of this implementation and does not have any particular syntax specified or expected by the Java runtime. It may be compared for equality with other package version strings used for this implementation by this vendor for this package.",
      "tagMap": {
        "return": [
          "the version of the implementation, \n\u003ccode\u003enull\u003c/code\u003e is returned if it is not known."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getImplementationVendor",
      "comment": "Returns the vendor that implemented this package, null is returned if it is not known.",
      "tagMap": {
        "return": [
          "the vendor that implemented this package, \n\u003ccode\u003enull\u003c/code\u003e is returned if it is not known."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSealed",
      "comment": "Returns true if this package is sealed.",
      "tagMap": {
        "apiNote": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/jar/jar.html#package-sealing\"\u003ePackage sealing\u003c/a\u003e has no relationship with \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#isSealed()\"\u003esealed classes or interfaces\u003c/a\u003e. Package sealing is specific to JAR files defined for classes in an unnamed module. See the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Package.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003ePackage\u003c/code\u003e\u003c/a\u003e class specification for details how a \n\u003ccode\u003ePackage\u003c/code\u003e is defined as sealed package."
        ],
        "return": [
          "true if the package is sealed, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.net.URL",
            "type": "Class"
          },
          "field": {
            "name": "url"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSealed",
      "comment": "Returns true if this package is sealed with respect to the specified code source url.",
      "tagMap": {
        "apiNote": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/jar/jar.html#package-sealing\"\u003ePackage sealing\u003c/a\u003e has no relationship with \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#isSealed()\"\u003esealed classes or interfaces\u003c/a\u003e. Package sealing is specific to JAR files defined for classes in an unnamed module. See the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Package.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003ePackage\u003c/code\u003e\u003c/a\u003e class specification for details how a \n\u003ccode\u003ePackage\u003c/code\u003e is defined as sealed package."
        ],
        "param": [
          "\u003ccode\u003eurl\u003c/code\u003e - the code source URL"
        ],
        "return": [
          "true if this package is sealed with respect to the given \n\u003ccode\u003eurl\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "desired"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCompatibleWith",
      "comment": "Compare this package\u0027s specification version with a desired version. It returns true if this packages specification version number is greater than or equal to the desired version number. Version numbers are compared by sequentially comparing corresponding components of the desired and specification strings. Each component is converted as a decimal integer and the values compared. If the specification value is greater than the desired value true is returned. If the value is less false is returned. If the values are equal the period is skipped and the next pair of components is compared.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edesired\u003c/code\u003e - the version string of the desired version."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the current version is not known or the desired or current version is not of the correct dotted form."
        ],
        "return": [
          "true if this package\u0027s version number is greater than or equal to the desired version number"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Package",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getPackage",
      "comment": "Finds a package by name in the caller\u0027s class loader and its ancestors. If the caller\u0027s class loader defines a Package of the given name, the Package is returned. Otherwise, the ancestors of the caller\u0027s class loader are searched recursively (parent by parent) for a Package of the given name. Calling this method is equivalent to calling ClassLoader.getPackage(java.lang.String) on a ClassLoader instance which is the caller\u0027s class loader.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#getDefinedPackage(java.lang.String)\"\u003e\u003ccode\u003eClassLoader.getDefinedPackage(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - A package name, such as \"\n\u003ccode\u003ejava.lang\u003c/code\u003e\"."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "The \n\u003ccode\u003ePackage\u003c/code\u003e of the given name defined by the caller\u0027s class loader or its ancestors, or \n\u003ccode\u003enull\u003c/code\u003e if not found."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Package",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getPackages",
      "comment": "Returns all of the Packages defined by the caller\u0027s class loader and its ancestors. The returned array may contain more than one Package object of the same package name, each defined by a different class loader in the class loader hierarchy. Calling this method is equivalent to calling ClassLoader.getPackages() on a ClassLoader instance which is the caller\u0027s class loader.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#getDefinedPackages()\"\u003e\u003ccode\u003eClassLoader.getDefinedPackages()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The array of \n\u003ccode\u003ePackage\u003c/code\u003e objects defined by this class loader and its ancestors"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Return the hash code computed from the package name.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the hash code computed from the package name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the string representation of this Package. Its value is the string \"package \" and the package name. If the package title is defined it is appended. If the package version is defined it is appended.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string representation of the package."
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationClass"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotation",
      "comment": "Returns this element\u0027s annotation for the specified type if such an annotation is present, else null. Note that any annotation returned by this method is a declaration annotation.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the type of the annotation to query for and return if present"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotation(java.lang.Class)\"\u003egetAnnotation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "this element\u0027s annotation for the specified annotation type if present on this element, else null"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.lang.annotation.Annotation",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationClass"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAnnotationPresent",
      "comment": "Returns true if an annotation for the specified type is present on this element, else false. This method is designed primarily for convenient access to marker annotations. The truth value returned by this method is equivalent to: getAnnotation(annotationClass) !\u003d null",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#isAnnotationPresent(java.lang.Class)\"\u003eisAnnotationPresent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "true if an annotation for the specified annotation type is present on this element, else false"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationClass"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotationsByType",
      "comment": "Returns annotations that are associated with this element. If there are no annotations associated with this element, the return value is an array of length 0. The difference between this method and AnnotatedElement.getAnnotation(Class) is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. Note that any annotations returned by this method are declaration annotations.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the type of the annotation to query for and return if present"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType(java.lang.Class)\"\u003egetAnnotationsByType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "all this element\u0027s annotations for the specified annotation type if associated with this element, else an array of length zero"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.annotation.Annotation",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotations",
      "comment": "Returns annotations that are present on this element. If there are no annotations present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. Note that any annotations returned by this method are declaration annotations.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotations()\"\u003egetAnnotations\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "annotations present on this element"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationClass"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredAnnotation",
      "comment": "Returns this element\u0027s annotation for the specified type if such an annotation is directly present, else null. This method ignores inherited annotations. (Returns null if no annotations are directly present on this element.) Note that any annotation returned by this method is a declaration annotation.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the type of the annotation to query for and return if directly present"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotation(java.lang.Class)\"\u003egetDeclaredAnnotation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "this element\u0027s annotation for the specified annotation type if directly present on this element, else null"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationClass"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredAnnotationsByType",
      "comment": "Description copied from interface: AnnotatedElement",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - the type of the annotation to query for and return if directly or indirectly present"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotationsByType(java.lang.Class)\"\u003egetDeclaredAnnotationsByType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "all this element\u0027s annotations for the specified annotation type if directly or indirectly present on this element, else an array of length zero"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.annotation.Annotation",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredAnnotations",
      "comment": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. Note that any annotations returned by this method are declaration annotations.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotations()\"\u003egetDeclaredAnnotations\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "annotations directly present on this element"
        ],
        "since": [
          "1.5"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.Package",
  "comment": "Represents metadata about a run-time package associated with a class loader. Metadata includes annotations, versioning, and sealing. \n\u003cp\u003e Annotations for the run-time package are read from \u003ccode\u003epackage-info.class\u003c/code\u003e at the same code source as classes in the run-time package. \u003c/p\u003e\n\u003cp\u003e The set of classes that make up the run-time package may implement a particular specification. The specification title, version, and vendor (indicating the owner/maintainer of the specification) can be provided when the \u003ccode\u003ePackage\u003c/code\u003e is defined. An application can ask if the \u003ccode\u003ePackage\u003c/code\u003e is compatible with a particular specification version by using the \u003ca href\u003d\"#isCompatibleWith(java.lang.String)\"\u003e\u003ccode\u003ePackage.isCompatibleWith(String)\u003c/code\u003e\u003c/a\u003e method. In addition, information about the actual classes that make up the run-time package can be provided when the \u003ccode\u003ePackage\u003c/code\u003e is defined. This information consists of an implementation title, version, and vendor (indicating the supplier of the classes). \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003ePackage\u003c/code\u003e may be explicitly defined with the \u003ca href\u003d\"ClassLoader.html#definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)\"\u003e\u003ccode\u003eClassLoader.definePackage(String, String, String, String, String, String, String, URL)\u003c/code\u003e\u003c/a\u003e method. The caller supplies the specification and implementation titles, versions, and vendors. The caller also indicates whether the package is \u003ca href\u003d\"../util/jar/Attributes.Name.html#SEALED\"\u003esealed\u003c/a\u003e. If a \u003ccode\u003ePackage\u003c/code\u003e is not explicitly defined for a run-time package when a class in that run-time package is defined, then a \u003ccode\u003ePackage\u003c/code\u003e is automatically defined by the class\u0027s defining class loader, as follows. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003ePackage\u003c/code\u003e automatically defined for classes in a named module has the following properties: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe name of the package is derived from the \u003ca href\u003d\"Class.html#getName()\"\u003ebinary names\u003c/a\u003e of the classes. Since classes in a named module must be in a named package, the derived name is never empty.\u003c/li\u003e \n \u003cli\u003eThe package is sealed with the \u003ca href\u003d\"module/ModuleReference.html#location()\"\u003emodule location\u003c/a\u003e as the code source, if known.\u003c/li\u003e \n \u003cli\u003eThe specification and implementation titles, versions, and vendors are unspecified.\u003c/li\u003e \n \u003cli\u003eAny annotations on the package are read from \u003ccode\u003epackage-info.class\u003c/code\u003e as specified above.\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003ePackage\u003c/code\u003e automatically defined for classes in an unnamed module has the following properties: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe name of the package is either \u003ccode\u003e\"\"\u003c/code\u003e (for classes in an unnamed package) or derived from the \u003ca href\u003d\"Class.html#getName()\"\u003ebinary names\u003c/a\u003e of the classes (for classes in a named package).\u003c/li\u003e \n \u003cli\u003eThe package is not sealed.\u003c/li\u003e \n \u003cli\u003eThe specification and implementation titles, versions, and vendors are unspecified.\u003c/li\u003e \n \u003cli\u003eAny annotations on the package are read from \u003ccode\u003epackage-info.class\u003c/code\u003e as specified above.\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003ePackage\u003c/code\u003e can be obtained with the \u003ca href\u003d\"#getPackage(java.lang.String)\"\u003e\u003ccode\u003ePackage.getPackage(String)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"ClassLoader.html#getDefinedPackage(java.lang.String)\"\u003e\u003ccode\u003eClassLoader.getDefinedPackage(String)\u003c/code\u003e\u003c/a\u003e methods. Every \u003ccode\u003ePackage\u003c/code\u003e defined by a class loader can be obtained with the \u003ca href\u003d\"#getPackages()\"\u003e\u003ccode\u003ePackage.getPackages()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"ClassLoader.html#getDefinedPackages()\"\u003e\u003ccode\u003eClassLoader.getDefinedPackages()\u003c/code\u003e\u003c/a\u003e methods.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/jar/jar.html#package-sealing\"\u003e The JAR File Specification: Package Sealing\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)\"\u003e\u003ccode\u003eClassLoader.definePackage(String, String, String, String, String, String, String, URL)\u003c/code\u003e\u003c/a\u003e"
    ],
    "implNote": [
      "The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#builtinLoaders\"\u003ebuiltin class loaders\u003c/a\u003e do not explicitly define \n\u003ccode\u003ePackage\u003c/code\u003e objects for packages in \n\u003cem\u003enamed modules\u003c/em\u003e. Instead those packages are automatically defined and have no specification and implementation versioning information."
    ],
    "See Java Virtual Machine Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jvms/se16/html/jvms-5.html#jls-5.3\"\u003e5.3 Creation and Loading\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}