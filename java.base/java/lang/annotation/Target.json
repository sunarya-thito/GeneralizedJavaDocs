{
  "packageName": "java.lang.annotation",
  "simpleName": "Target",
  "moduleName": "java.base",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.annotation.Target",
  "comment": "Indicates the contexts in which an annotation interface is applicable. The declaration contexts and type contexts in which an annotation interface may be applicable are specified in JLS 9.6.4.1, and denoted in source code by enum constants of \n\u003ca href\u003d\"ElementType.html\" title\u003d\"enum class in java.lang.annotation\"\u003e\u003ccode\u003ejava.lang.annotation.ElementType\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003eIf an \u003ccode\u003e@Target\u003c/code\u003e meta-annotation is not present on an annotation interface \u003ccode\u003eT\u003c/code\u003e, then an annotation of type \u003ccode\u003eT\u003c/code\u003e may be written as a modifier for any declaration except a type parameter declaration. \u003c/p\u003e\n\u003cp\u003eIf an \u003ccode\u003e@Target\u003c/code\u003e meta-annotation is present, the compiler will enforce the usage restrictions indicated by \u003ccode\u003eElementType\u003c/code\u003e enum constants, in line with JLS 9.7.4. \u003c/p\u003e\n\u003cp\u003eFor example, this \u003ccode\u003e@Target\u003c/code\u003e meta-annotation indicates that the declared interface is itself a meta-annotation interface. It can only be used on annotation interface declarations: \u003c/p\u003e\n\u003cpre\u003e    @Target(ElementType.ANNOTATION_TYPE)\n    public @interface MetaAnnotationType {\n        ...\n    }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThis \u003ccode\u003e@Target\u003c/code\u003e meta-annotation indicates that the declared class or interface is intended solely for use as a member class or interface in complex annotation interface declarations. It cannot be used to annotate anything directly: \u003c/p\u003e\n\u003cpre\u003e    @Target({})\n    public @interface MemberInterface {\n        ...\n    }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIt is a compile-time error for a single \u003ccode\u003eElementType\u003c/code\u003e constant to appear more than once in an \u003ccode\u003e@Target\u003c/code\u003e annotation. For example, the following \u003ccode\u003e@Target\u003c/code\u003e meta-annotation is illegal: \u003c/p\u003e\n\u003cpre\u003e    @Target({ElementType.FIELD, ElementType.METHOD, ElementType.FIELD})\n    public @interface Bogus {\n        ...\n    }\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.4.1\"\u003e9.6.4.1 @Target\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.7.4\"\u003e9.7.4 Where Annotations May Appear\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.7.5\"\u003e9.7.5 Multiple Annotations of the Same Interface\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}