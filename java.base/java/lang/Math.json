{
  "packageName": "java.lang",
  "simpleName": "Math",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "double",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "E",
      "comment": "The double value that is closer than any other to e, the base of the natural logarithms.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Math.E\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "double",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PI",
      "comment": "The double value that is closer than any other to pi, the ratio of the circumference of a circle to its diameter.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Math.PI\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "sin",
      "comment": "Returns the trigonometric sine of an angle. Special cases: If the argument is NaN or an infinity, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an angle, in radians."
        ],
        "return": [
          "the sine of the argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "cos",
      "comment": "Returns the trigonometric cosine of an angle. Special cases: If the argument is NaN or an infinity, then the result is NaN. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an angle, in radians."
        ],
        "return": [
          "the cosine of the argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "tan",
      "comment": "Returns the trigonometric tangent of an angle. Special cases: If the argument is NaN or an infinity, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an angle, in radians."
        ],
        "return": [
          "the tangent of the argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "asin",
      "comment": "Returns the arc sine of a value; the returned angle is in the range -pi/2 through pi/2. Special cases: If the argument is NaN or its absolute value is greater than 1, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the value whose arc sine is to be returned."
        ],
        "return": [
          "the arc sine of the argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "acos",
      "comment": "Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi. Special case: If the argument is NaN or its absolute value is greater than 1, then the result is NaN. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the value whose arc cosine is to be returned."
        ],
        "return": [
          "the arc cosine of the argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "atan",
      "comment": "Returns the arc tangent of a value; the returned angle is in the range -pi/2 through pi/2. Special cases: If the argument is NaN, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the value whose arc tangent is to be returned."
        ],
        "return": [
          "the arc tangent of the argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toRadians",
      "comment": "Converts an angle measured in degrees to an approximately equivalent angle measured in radians. The conversion from degrees to radians is generally inexact.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eangdeg\u003c/code\u003e - an angle, in degrees"
        ],
        "return": [
          "the measurement of the angle \n\u003ccode\u003eangdeg\u003c/code\u003e in radians."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toDegrees",
      "comment": "Converts an angle measured in radians to an approximately equivalent angle measured in degrees. The conversion from radians to degrees is generally inexact; users should not expect cos(toRadians(90.0)) to exactly equal 0.0.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eangrad\u003c/code\u003e - an angle, in radians"
        ],
        "return": [
          "the measurement of the angle \n\u003ccode\u003eangrad\u003c/code\u003e in degrees."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "exp",
      "comment": "Returns Euler\u0027s number e raised to the power of a double value. Special cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is negative infinity, then the result is positive zero. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the exponent to raise \n\u003ci\u003ee\u003c/i\u003e to."
        ],
        "return": [
          "the value \n\u003ci\u003ee\u003c/i\u003e\n\u003csup\u003e\u003ccode\u003ea\u003c/code\u003e\u003c/sup\u003e, where \n\u003ci\u003ee\u003c/i\u003e is the base of the natural logarithms."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "log",
      "comment": "Returns the natural logarithm (base e) of a double value. Special cases: If the argument is NaN or less than zero, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is negative infinity. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a value"
        ],
        "return": [
          "the value ln\u0026nbsp;\n\u003ccode\u003ea\u003c/code\u003e, the natural logarithm of \n\u003ccode\u003ea\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "log10",
      "comment": "Returns the base 10 logarithm of a double value. Special cases: If the argument is NaN or less than zero, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is negative infinity. If the argument is equal to 10n for integer n, then the result is n. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a value"
        ],
        "return": [
          "the base 10 logarithm of \n\u003ccode\u003ea\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "sqrt",
      "comment": "Returns the correctly rounded positive square root of a double value. Special cases: If the argument is NaN or less than zero, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is positive zero or negative zero, then the result is the same as the argument. Otherwise, the result is the double value closest to the true mathematical square root of the argument value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a value."
        ],
        "return": [
          "the positive square root of \n\u003ccode\u003ea\u003c/code\u003e. If the argument is NaN or less than zero, the result is NaN."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "cbrt",
      "comment": "Returns the cube root of a double value. For positive finite x, cbrt(-x) \u003d\u003d -cbrt(x); that is, the cube root of a negative value is the negative of the cube root of that value\u0027s magnitude. Special cases: If the argument is NaN, then the result is NaN. If the argument is infinite, then the result is an infinity with the same sign as the argument. If the argument is zero, then the result is a zero with the same sign as the argument. The computed result must be within 1 ulp of the exact result.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a value."
        ],
        "return": [
          "the cube root of \n\u003ccode\u003ea\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "IEEEremainder",
      "comment": "Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard. The remainder value is mathematically equal to f1 - f2 × n, where n is the mathematical integer closest to the exact mathematical value of the quotient f1/f2, and if two mathematical integers are equally close to f1/f2, then n is the integer that is even. If the remainder is zero, its sign is the same as the sign of the first argument. Special cases: If either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN. If the first argument is finite and the second argument is infinite, then the result is the same as the first argument.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef1\u003c/code\u003e - the dividend.",
          "\u003ccode\u003ef2\u003c/code\u003e - the divisor."
        ],
        "return": [
          "the remainder when \n\u003ccode\u003ef1\u003c/code\u003e is divided by \n\u003ccode\u003ef2\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ceil",
      "comment": "Returns the smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer. Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument. If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument. If the argument value is less than zero but greater than -1.0, then the result is negative zero. Note that the value of Math.ceil(x) is exactly the value of -Math.floor(-x).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a value."
        ],
        "return": [
          "the smallest (closest to negative infinity) floating-point value that is greater than or equal to the argument and is equal to a mathematical integer."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "floor",
      "comment": "Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer. Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument. If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a value."
        ],
        "return": [
          "the largest (closest to positive infinity) floating-point value that less than or equal to the argument and is equal to a mathematical integer."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "rint",
      "comment": "Returns the double value that is closest in value to the argument and is equal to a mathematical integer. If two double values that are mathematical integers are equally close, the result is the integer value that is even. Special cases: If the argument value is already equal to a mathematical integer, then the result is the same as the argument. If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a \n\u003ccode\u003edouble\u003c/code\u003e value."
        ],
        "return": [
          "the closest floating-point value to \n\u003ccode\u003ea\u003c/code\u003e that is equal to a mathematical integer."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "atan2",
      "comment": "Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta). This method computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi. Special cases: If either argument is NaN, then the result is NaN. If the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero. If the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero. If the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the double value closest to pi. If the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the double value closest to -pi. If the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the double value closest to pi/2. If the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the double value closest to -pi/2. If both arguments are positive infinity, then the result is the double value closest to pi/4. If the first argument is positive infinity and the second argument is negative infinity, then the result is the double value closest to 3*pi/4. If the first argument is negative infinity and the second argument is positive infinity, then the result is the double value closest to -pi/4. If both arguments are negative infinity, then the result is the double value closest to -3*pi/4. The computed result must be within 2 ulps of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ey\u003c/code\u003e - the ordinate coordinate",
          "\u003ccode\u003ex\u003c/code\u003e - the abscissa coordinate"
        ],
        "return": [
          "the \n\u003ci\u003etheta\u003c/i\u003e component of the point (\n\u003ci\u003er\u003c/i\u003e,\u0026nbsp;\n\u003ci\u003etheta\u003c/i\u003e) in polar coordinates that corresponds to the point (\n\u003ci\u003ex\u003c/i\u003e,\u0026nbsp;\n\u003ci\u003ey\u003c/i\u003e) in Cartesian coordinates."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "pow",
      "comment": "Returns the value of the first argument raised to the power of the second argument. Special cases: If the second argument is positive or negative zero, then the result is 1.0. If the second argument is 1.0, then the result is the same as the first argument. If the second argument is NaN, then the result is NaN. If the first argument is NaN and the second argument is nonzero, then the result is NaN. If the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or the absolute value of the first argument is less than 1 and the second argument is negative infinity, then the result is positive infinity. If the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or the absolute value of the first argument is less than 1 and the second argument is positive infinity, then the result is positive zero. If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN. If the first argument is positive zero and the second argument is greater than zero, or the first argument is positive infinity and the second argument is less than zero, then the result is positive zero. If the first argument is positive zero and the second argument is less than zero, or the first argument is positive infinity and the second argument is greater than zero, then the result is positive infinity. If the first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is less than zero but not a finite odd integer, then the result is positive zero. If the first argument is negative zero and the second argument is a positive finite odd integer, or the first argument is negative infinity and the second argument is a negative finite odd integer, then the result is negative zero. If the first argument is negative zero and the second argument is less than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is greater than zero but not a finite odd integer, then the result is positive infinity. If the first argument is negative zero and the second argument is a negative finite odd integer, or the first argument is negative infinity and the second argument is a positive finite odd integer, then the result is negative infinity. If the first argument is finite and less than zero if the second argument is a finite even integer, the result is equal to the result of raising the absolute value of the first argument to the power of the second argument if the second argument is a finite odd integer, the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument if the second argument is finite and not an integer, then the result is NaN. If both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a double value. (In the foregoing descriptions, a floating-point value is considered to be an integer if and only if it is finite and a fixed point of the method ceil or, equivalently, a fixed point of the method floor. A value is a fixed point of a one-argument method if and only if the result of applying the method to the value is equal to the value.) The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the base.",
          "\u003ccode\u003eb\u003c/code\u003e - the exponent."
        ],
        "return": [
          "the value \n\u003ccode\u003ea\u003c/code\u003e\n\u003csup\u003e\u003ccode\u003eb\u003c/code\u003e\u003c/sup\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "round",
      "comment": "Returns the closest int to the argument, with ties rounding to positive infinity. Special cases: If the argument is NaN, the result is 0. If the argument is negative infinity or any value less than or equal to the value of Integer.MIN_VALUE, the result is equal to the value of Integer.MIN_VALUE. If the argument is positive infinity or any value greater than or equal to the value of Integer.MAX_VALUE, the result is equal to the value of Integer.MAX_VALUE.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#MAX_VALUE\"\u003e\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#MIN_VALUE\"\u003e\u003ccode\u003eInteger.MIN_VALUE\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a floating-point value to be rounded to an integer."
        ],
        "return": [
          "the value of the argument rounded to the nearest \n\u003ccode\u003eint\u003c/code\u003e value."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "round",
      "comment": "Returns the closest long to the argument, with ties rounding to positive infinity. Special cases: If the argument is NaN, the result is 0. If the argument is negative infinity or any value less than or equal to the value of Long.MIN_VALUE, the result is equal to the value of Long.MIN_VALUE. If the argument is positive infinity or any value greater than or equal to the value of Long.MAX_VALUE, the result is equal to the value of Long.MAX_VALUE.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#MAX_VALUE\"\u003e\u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#MIN_VALUE\"\u003e\u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a floating-point value to be rounded to a \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "return": [
          "the value of the argument rounded to the nearest \n\u003ccode\u003elong\u003c/code\u003e value."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "random",
      "comment": "Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range. When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression new java.util.Random() This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else. This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#nextDown(double)\"\u003e\u003ccode\u003enextDown(double)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#nextDouble()\"\u003e\u003ccode\u003eRandom.nextDouble()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "As the largest \n\u003ccode\u003edouble\u003c/code\u003e value less than \n\u003ccode\u003e1.0\u003c/code\u003e is \n\u003ccode\u003eMath.nextDown(1.0)\u003c/code\u003e, a value \n\u003ccode\u003ex\u003c/code\u003e in the closed range \n\u003ccode\u003e[x1,x2]\u003c/code\u003e where \n\u003ccode\u003ex1\u0026lt;\u003dx2\u003c/code\u003e may be defined by the statements \n\u003cblockquote\u003e\n \u003cpre\u003e\u003ccode\u003e\n double f \u003d Math.random()/Math.nextDown(1.0);\n double x \u003d x1*(1.0 - f) + x2*f;\n \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e greater than or equal to \n\u003ccode\u003e0.0\u003c/code\u003e and less than \n\u003ccode\u003e1.0\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "addExact",
      "comment": "Returns the sum of its arguments, throwing an exception if the result overflows an int.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first value",
          "\u003ccode\u003ey\u003c/code\u003e - the second value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows an int"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "addExact",
      "comment": "Returns the sum of its arguments, throwing an exception if the result overflows a long.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first value",
          "\u003ccode\u003ey\u003c/code\u003e - the second value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows a long"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "subtractExact",
      "comment": "Returns the difference of the arguments, throwing an exception if the result overflows an int.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first value",
          "\u003ccode\u003ey\u003c/code\u003e - the second value to subtract from the first"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows an int"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "subtractExact",
      "comment": "Returns the difference of the arguments, throwing an exception if the result overflows a long.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first value",
          "\u003ccode\u003ey\u003c/code\u003e - the second value to subtract from the first"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows a long"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "multiplyExact",
      "comment": "Returns the product of the arguments, throwing an exception if the result overflows an int.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first value",
          "\u003ccode\u003ey\u003c/code\u003e - the second value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows an int"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "multiplyExact",
      "comment": "Returns the product of the arguments, throwing an exception if the result overflows a long.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first value",
          "\u003ccode\u003ey\u003c/code\u003e - the second value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows a long"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "multiplyExact",
      "comment": "Returns the product of the arguments, throwing an exception if the result overflows a long.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first value",
          "\u003ccode\u003ey\u003c/code\u003e - the second value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows a long"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "incrementExact",
      "comment": "Returns the argument incremented by one, throwing an exception if the result overflows an int. The overflow only occurs for the maximum value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the value to increment"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows an int"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "incrementExact",
      "comment": "Returns the argument incremented by one, throwing an exception if the result overflows a long. The overflow only occurs for the maximum value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the value to increment"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows a long"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "decrementExact",
      "comment": "Returns the argument decremented by one, throwing an exception if the result overflows an int. The overflow only occurs for the minimum value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the value to decrement"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows an int"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "decrementExact",
      "comment": "Returns the argument decremented by one, throwing an exception if the result overflows a long. The overflow only occurs for the minimum value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the value to decrement"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows a long"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "negateExact",
      "comment": "Returns the negation of the argument, throwing an exception if the result overflows an int. The overflow only occurs for the minimum value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the value to negate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows an int"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "negateExact",
      "comment": "Returns the negation of the argument, throwing an exception if the result overflows a long. The overflow only occurs for the minimum value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the value to negate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result overflows a long"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toIntExact",
      "comment": "Returns the value of the long argument, throwing an exception if the value overflows an int.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the long value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eargument\u003c/code\u003e overflows an int"
        ],
        "return": [
          "the argument as an int"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "multiplyFull",
      "comment": "Returns the exact mathematical product of the arguments.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first value",
          "\u003ccode\u003ey\u003c/code\u003e - the second value"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "multiplyHigh",
      "comment": "Returns as a long the most significant 64 bits of the 128-bit product of two 64-bit factors.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first value",
          "\u003ccode\u003ey\u003c/code\u003e - the second value"
        ],
        "return": [
          "the result"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "floorDiv",
      "comment": "Returns the largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient. There is one special case, if the dividend is the Integer.MIN_VALUE and the divisor is -1, then integer overflow occurs and the result is equal to Integer.MIN_VALUE. Normal integer division operates under the round to zero rounding mode (truncation). This operation instead acts under the round toward negative infinity (floor) rounding mode. The floor rounding mode gives different results from truncation when the exact result is negative. If the signs of the arguments are the same, the results of floorDiv and the / operator are the same. For example, floorDiv(4, 3) \u003d\u003d 1 and (4 / 3) \u003d\u003d 1. If the signs of the arguments are different, the quotient is negative and floorDiv returns the integer less than or equal to the quotient and the / operator returns the integer closest to zero. For example, floorDiv(-4, 3) \u003d\u003d -2, whereas (-4 / 3) \u003d\u003d -1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#floorMod(long,long)\"\u003e\u003ccode\u003efloorMod(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#floor(double)\"\u003e\u003ccode\u003efloor(double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the dividend",
          "\u003ccode\u003ey\u003c/code\u003e - the divisor"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the divisor \n\u003ccode\u003ey\u003c/code\u003e is zero"
        ],
        "return": [
          "the largest (closest to positive infinity) \n\u003ccode\u003eint\u003c/code\u003e value that is less than or equal to the algebraic quotient."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "floorDiv",
      "comment": "Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient. There is one special case, if the dividend is the Long.MIN_VALUE and the divisor is -1, then integer overflow occurs and the result is equal to Long.MIN_VALUE. Normal integer division operates under the round to zero rounding mode (truncation). This operation instead acts under the round toward negative infinity (floor) rounding mode. The floor rounding mode gives different results from truncation when the exact result is negative. For examples, see floorDiv(int, int).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#floorMod(long,long)\"\u003e\u003ccode\u003efloorMod(long, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#floor(double)\"\u003e\u003ccode\u003efloor(double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the dividend",
          "\u003ccode\u003ey\u003c/code\u003e - the divisor"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the divisor \n\u003ccode\u003ey\u003c/code\u003e is zero"
        ],
        "return": [
          "the largest (closest to positive infinity) \n\u003ccode\u003eint\u003c/code\u003e value that is less than or equal to the algebraic quotient."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "floorDiv",
      "comment": "Returns the largest (closest to positive infinity) long value that is less than or equal to the algebraic quotient. There is one special case, if the dividend is the Long.MIN_VALUE and the divisor is -1, then integer overflow occurs and the result is equal to Long.MIN_VALUE. Normal integer division operates under the round to zero rounding mode (truncation). This operation instead acts under the round toward negative infinity (floor) rounding mode. The floor rounding mode gives different results from truncation when the exact result is negative. For examples, see floorDiv(int, int).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#floorMod(long,long)\"\u003e\u003ccode\u003efloorMod(long, long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#floor(double)\"\u003e\u003ccode\u003efloor(double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the dividend",
          "\u003ccode\u003ey\u003c/code\u003e - the divisor"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the divisor \n\u003ccode\u003ey\u003c/code\u003e is zero"
        ],
        "return": [
          "the largest (closest to positive infinity) \n\u003ccode\u003elong\u003c/code\u003e value that is less than or equal to the algebraic quotient."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "floorMod",
      "comment": "Returns the floor modulus of the int arguments. The floor modulus is x - (floorDiv(x, y) * y), has the same sign as the divisor y, and is in the range of -abs(y) \u003c r \u003c +abs(y). The relationship between floorDiv and floorMod is such that: floorDiv(x, y) * y + floorMod(x, y) \u003d\u003d x The difference in values between floorMod and the % operator is due to the difference between floorDiv that returns the integer less than or equal to the quotient and the / operator that returns the integer closest to zero. Examples: If the signs of the arguments are the same, the results of floorMod and the % operator are the same. floorMod(+4, +3) \u003d\u003d +1; and (+4 % +3) \u003d\u003d +1 floorMod(-4, -3) \u003d\u003d -1; and (-4 % -3) \u003d\u003d -1 If the signs of the arguments are different, the results differ from the % operator. floorMod(+4, -3) \u003d\u003d -2; and (+4 % -3) \u003d\u003d +1 floorMod(-4, +3) \u003d\u003d +2; and (-4 % +3) \u003d\u003d -1 If the signs of arguments are unknown and a positive modulus is needed it can be computed as (floorMod(x, y) + abs(y)) % abs(y).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#floorDiv(long,long)\"\u003e\u003ccode\u003efloorDiv(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the dividend",
          "\u003ccode\u003ey\u003c/code\u003e - the divisor"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the divisor \n\u003ccode\u003ey\u003c/code\u003e is zero"
        ],
        "return": [
          "the floor modulus \n\u003ccode\u003ex - (floorDiv(x, y) * y)\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "floorMod",
      "comment": "Returns the floor modulus of the long and int arguments. The floor modulus is x - (floorDiv(x, y) * y), has the same sign as the divisor y, and is in the range of -abs(y) \u003c r \u003c +abs(y). The relationship between floorDiv and floorMod is such that: floorDiv(x, y) * y + floorMod(x, y) \u003d\u003d x For examples, see floorMod(int, int).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#floorDiv(long,long)\"\u003e\u003ccode\u003efloorDiv(long, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the dividend",
          "\u003ccode\u003ey\u003c/code\u003e - the divisor"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the divisor \n\u003ccode\u003ey\u003c/code\u003e is zero"
        ],
        "return": [
          "the floor modulus \n\u003ccode\u003ex - (floorDiv(x, y) * y)\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "floorMod",
      "comment": "Returns the floor modulus of the long arguments. The floor modulus is x - (floorDiv(x, y) * y), has the same sign as the divisor y, and is in the range of -abs(y) \u003c r \u003c +abs(y). The relationship between floorDiv and floorMod is such that: floorDiv(x, y) * y + floorMod(x, y) \u003d\u003d x For examples, see floorMod(int, int).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#floorDiv(long,long)\"\u003e\u003ccode\u003efloorDiv(long, long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the dividend",
          "\u003ccode\u003ey\u003c/code\u003e - the divisor"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the divisor \n\u003ccode\u003ey\u003c/code\u003e is zero"
        ],
        "return": [
          "the floor modulus \n\u003ccode\u003ex - (floorDiv(x, y) * y)\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "abs",
      "comment": "Returns the absolute value of an int value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of Integer.MIN_VALUE, the most negative representable int value, the result is that same value, which is negative. In contrast, the absExact(int) method throws an ArithmeticException for this value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#absExact(long)\"\u003e\u003ccode\u003eabsExact(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the argument whose absolute value is to be determined"
        ],
        "return": [
          "the absolute value of the argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "absExact",
      "comment": "Returns the mathematical absolute value of an int value if it is exactly representable as an int, throwing ArithmeticException if the result overflows the positive int range. Since the range of two\u0027s complement integers is asymmetric with one additional negative value (JLS 4.2.1), the mathematical absolute value of Integer.MIN_VALUE overflows the positive int range, so an exception is thrown for that argument.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#abs(double)\"\u003e\u003ccode\u003eabs(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the argument whose absolute value is to be determined"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the argument is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#MIN_VALUE\"\u003e\u003ccode\u003eInteger.MIN_VALUE\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the absolute value of the argument, unless overflow occurs"
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "abs",
      "comment": "Returns the absolute value of a long value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Note that if the argument is equal to the value of Long.MIN_VALUE, the most negative representable long value, the result is that same value, which is negative. In contrast, the absExact(long) method throws an ArithmeticException for this value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#absExact(long)\"\u003e\u003ccode\u003eabsExact(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the argument whose absolute value is to be determined"
        ],
        "return": [
          "the absolute value of the argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "absExact",
      "comment": "Returns the mathematical absolute value of an long value if it is exactly representable as an long, throwing ArithmeticException if the result overflows the positive long range. Since the range of two\u0027s complement integers is asymmetric with one additional negative value (JLS 4.2.1), the mathematical absolute value of Long.MIN_VALUE overflows the positive long range, so an exception is thrown for that argument.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#abs(double)\"\u003e\u003ccode\u003eabs(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the argument whose absolute value is to be determined"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the argument is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#MIN_VALUE\"\u003e\u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the absolute value of the argument, unless overflow occurs"
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "abs",
      "comment": "Returns the absolute value of a float value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases: If the argument is positive zero or negative zero, the result is positive zero. If the argument is infinite, the result is positive infinity. If the argument is NaN, the result is NaN.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "As implied by the above, one valid implementation of this method is given by the expression below which computes a \n\u003ccode\u003efloat\u003c/code\u003e with the same exponent and significand as the argument but with a guaranteed zero sign bit indicating a positive value:\n\u003cbr\u003e \n\u003ccode\u003eFloat.intBitsToFloat(0x7fffffff \u0026amp; Float.floatToRawIntBits(a))\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the argument whose absolute value is to be determined"
        ],
        "return": [
          "the absolute value of the argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "abs",
      "comment": "Returns the absolute value of a double value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases: If the argument is positive zero or negative zero, the result is positive zero. If the argument is infinite, the result is positive infinity. If the argument is NaN, the result is NaN.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "As implied by the above, one valid implementation of this method is given by the expression below which computes a \n\u003ccode\u003edouble\u003c/code\u003e with the same exponent and significand as the argument but with a guaranteed zero sign bit indicating a positive value:\n\u003cbr\u003e \n\u003ccode\u003eDouble.longBitsToDouble((Double.doubleToRawLongBits(a)\u0026lt;\u0026lt;1)\u0026gt;\u0026gt;\u0026gt;1)\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the argument whose absolute value is to be determined"
        ],
        "return": [
          "the absolute value of the argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "max",
      "comment": "Returns the greater of two int values. That is, the result is the argument closer to the value of Integer.MAX_VALUE. If the arguments have the same value, the result is that same value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an argument.",
          "\u003ccode\u003eb\u003c/code\u003e - another argument."
        ],
        "return": [
          "the larger of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "max",
      "comment": "Returns the greater of two long values. That is, the result is the argument closer to the value of Long.MAX_VALUE. If the arguments have the same value, the result is that same value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an argument.",
          "\u003ccode\u003eb\u003c/code\u003e - another argument."
        ],
        "return": [
          "the larger of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "max",
      "comment": "Returns the greater of two float values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an argument.",
          "\u003ccode\u003eb\u003c/code\u003e - another argument."
        ],
        "return": [
          "the larger of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "max",
      "comment": "Returns the greater of two double values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an argument.",
          "\u003ccode\u003eb\u003c/code\u003e - another argument."
        ],
        "return": [
          "the larger of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "min",
      "comment": "Returns the smaller of two int values. That is, the result the argument closer to the value of Integer.MIN_VALUE. If the arguments have the same value, the result is that same value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an argument.",
          "\u003ccode\u003eb\u003c/code\u003e - another argument."
        ],
        "return": [
          "the smaller of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "min",
      "comment": "Returns the smaller of two long values. That is, the result is the argument closer to the value of Long.MIN_VALUE. If the arguments have the same value, the result is that same value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an argument.",
          "\u003ccode\u003eb\u003c/code\u003e - another argument."
        ],
        "return": [
          "the smaller of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "min",
      "comment": "Returns the smaller of two float values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an argument.",
          "\u003ccode\u003eb\u003c/code\u003e - another argument."
        ],
        "return": [
          "the smaller of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "min",
      "comment": "Returns the smaller of two double values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an argument.",
          "\u003ccode\u003eb\u003c/code\u003e - another argument."
        ],
        "return": [
          "the smaller of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fma",
      "comment": "Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest double. The rounding is done using the round to nearest even rounding mode. In contrast, if a * b + c is evaluated as a regular floating-point expression, two rounding errors are involved, the first for the multiply operation, the second for the addition operation. Special cases: If any argument is NaN, the result is NaN. If one of the first two arguments is infinite and the other is zero, the result is NaN. If the exact product of the first two arguments is infinite (in other words, at least one of the arguments is infinite and the other is neither zero nor NaN) and the third argument is an infinity of the opposite sign, the result is NaN. Note that fma(a, 1.0, c) returns the same result as (a + c). However, fma(a, b, +0.0) does not always return the same result as (a * b) since fma(-0.0, +0.0, +0.0) is +0.0 while (-0.0 * +0.0) is -0.0; fma(a, b, -0.0) is equivalent to (a * b) however.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "This method corresponds to the fusedMultiplyAdd operation defined in IEEE 754-2008."
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a value",
          "\u003ccode\u003eb\u003c/code\u003e - a value",
          "\u003ccode\u003ec\u003c/code\u003e - a value"
        ],
        "return": [
          "(\n\u003ci\u003ea\u003c/i\u003e\u0026nbsp;×\u0026nbsp;\n\u003ci\u003eb\u003c/i\u003e\u0026nbsp;+\u0026nbsp;\n\u003ci\u003ec\u003c/i\u003e) computed, as if with unlimited range and precision, and rounded once to the nearest \n\u003ccode\u003edouble\u003c/code\u003e value"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fma",
      "comment": "Returns the fused multiply add of the three arguments; that is, returns the exact product of the first two arguments summed with the third argument and then rounded once to the nearest float. The rounding is done using the round to nearest even rounding mode. In contrast, if a * b + c is evaluated as a regular floating-point expression, two rounding errors are involved, the first for the multiply operation, the second for the addition operation. Special cases: If any argument is NaN, the result is NaN. If one of the first two arguments is infinite and the other is zero, the result is NaN. If the exact product of the first two arguments is infinite (in other words, at least one of the arguments is infinite and the other is neither zero nor NaN) and the third argument is an infinity of the opposite sign, the result is NaN. Note that fma(a, 1.0f, c) returns the same result as (a + c). However, fma(a, b, +0.0f) does not always return the same result as (a * b) since fma(-0.0f, +0.0f, +0.0f) is +0.0f while (-0.0f * +0.0f) is -0.0f; fma(a, b, -0.0f) is equivalent to (a * b) however.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "This method corresponds to the fusedMultiplyAdd operation defined in IEEE 754-2008."
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - a value",
          "\u003ccode\u003eb\u003c/code\u003e - a value",
          "\u003ccode\u003ec\u003c/code\u003e - a value"
        ],
        "return": [
          "(\n\u003ci\u003ea\u003c/i\u003e\u0026nbsp;×\u0026nbsp;\n\u003ci\u003eb\u003c/i\u003e\u0026nbsp;+\u0026nbsp;\n\u003ci\u003ec\u003c/i\u003e) computed, as if with unlimited range and precision, and rounded once to the nearest \n\u003ccode\u003efloat\u003c/code\u003e value"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ulp",
      "comment": "Returns the size of an ulp of the argument. An ulp, unit in the last place, of a double value is the positive distance between this floating-point value and the double value next larger in magnitude. Note that for non-NaN x, ulp(-x) \u003d\u003d ulp(x). Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive or negative infinity, then the result is positive infinity. If the argument is positive or negative zero, then the result is Double.MIN_VALUE. If the argument is ±Double.MAX_VALUE, then the result is equal to 2971.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the floating-point value whose ulp is to be returned"
        ],
        "return": [
          "the size of an ulp of the argument"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ulp",
      "comment": "Returns the size of an ulp of the argument. An ulp, unit in the last place, of a float value is the positive distance between this floating-point value and the float value next larger in magnitude. Note that for non-NaN x, ulp(-x) \u003d\u003d ulp(x). Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive or negative infinity, then the result is positive infinity. If the argument is positive or negative zero, then the result is Float.MIN_VALUE. If the argument is ±Float.MAX_VALUE, then the result is equal to 2104.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the floating-point value whose ulp is to be returned"
        ],
        "return": [
          "the size of an ulp of the argument"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "signum",
      "comment": "Returns the signum function of the argument; zero if the argument is zero, 1.0 if the argument is greater than zero, -1.0 if the argument is less than zero. Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive zero or negative zero, then the result is the same as the argument.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - the floating-point value whose signum is to be returned"
        ],
        "return": [
          "the signum function of the argument"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "signum",
      "comment": "Returns the signum function of the argument; zero if the argument is zero, 1.0f if the argument is greater than zero, -1.0f if the argument is less than zero. Special Cases: If the argument is NaN, then the result is NaN. If the argument is positive zero or negative zero, then the result is the same as the argument.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - the floating-point value whose signum is to be returned"
        ],
        "return": [
          "the signum function of the argument"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "sinh",
      "comment": "Returns the hyperbolic sine of a double value. The hyperbolic sine of x is defined to be (ex - e-x)/2 where e is Euler\u0027s number. Special cases: If the argument is NaN, then the result is NaN. If the argument is infinite, then the result is an infinity with the same sign as the argument. If the argument is zero, then the result is a zero with the same sign as the argument. The computed result must be within 2.5 ulps of the exact result.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The number whose hyperbolic sine is to be returned."
        ],
        "return": [
          "The hyperbolic sine of \n\u003ccode\u003ex\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "cosh",
      "comment": "Returns the hyperbolic cosine of a double value. The hyperbolic cosine of x is defined to be (ex + e-x)/2 where e is Euler\u0027s number. Special cases: If the argument is NaN, then the result is NaN. If the argument is infinite, then the result is positive infinity. If the argument is zero, then the result is 1.0. The computed result must be within 2.5 ulps of the exact result.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The number whose hyperbolic cosine is to be returned."
        ],
        "return": [
          "The hyperbolic cosine of \n\u003ccode\u003ex\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "tanh",
      "comment": "Returns the hyperbolic tangent of a double value. The hyperbolic tangent of x is defined to be (ex - e-x)/(ex + e-x), in other words, sinh(x)/cosh(x). Note that the absolute value of the exact tanh is always less than 1. Special cases: If the argument is NaN, then the result is NaN. If the argument is zero, then the result is a zero with the same sign as the argument. If the argument is positive infinity, then the result is +1.0. If the argument is negative infinity, then the result is -1.0. The computed result must be within 2.5 ulps of the exact result. The result of tanh for any finite input must have an absolute value less than or equal to 1. Note that once the exact result of tanh is within 1/2 of an ulp of the limit value of ±1, correctly signed ±1.0 should be returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The number whose hyperbolic tangent is to be returned."
        ],
        "return": [
          "The hyperbolic tangent of \n\u003ccode\u003ex\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "hypot",
      "comment": "Returns sqrt(x2 +y2) without intermediate overflow or underflow. Special cases: If either argument is infinite, then the result is positive infinity. If either argument is NaN and neither argument is infinite, then the result is NaN. The computed result must be within 1 ulp of the exact result. If one parameter is held constant, the results must be semi-monotonic in the other parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - a value",
          "\u003ccode\u003ey\u003c/code\u003e - a value"
        ],
        "return": [
          "sqrt(\n\u003ci\u003ex\u003c/i\u003e\n\u003csup\u003e2\u003c/sup\u003e\u0026nbsp;+\n\u003ci\u003ey\u003c/i\u003e\n\u003csup\u003e2\u003c/sup\u003e) without intermediate overflow or underflow"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "expm1",
      "comment": "Returns ex -1. Note that for values of x near 0, the exact sum of expm1(x) + 1 is much closer to the true result of ex than exp(x). Special cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is negative infinity, then the result is -1.0. If the argument is zero, then the result is a zero with the same sign as the argument. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic. The result of expm1 for any finite input must be greater than or equal to -1.0. Note that once the exact result of ex - 1 is within 1/2 ulp of the limit value -1, -1.0 should be returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the exponent to raise \n\u003ci\u003ee\u003c/i\u003e to in the computation of \n\u003ci\u003ee\u003c/i\u003e\n\u003csup\u003e\u003ccode\u003ex\u003c/code\u003e\u003c/sup\u003e\u0026nbsp;-1."
        ],
        "return": [
          "the value \n\u003ci\u003ee\u003c/i\u003e\n\u003csup\u003e\u003ccode\u003ex\u003c/code\u003e\u003c/sup\u003e\u0026nbsp;-\u0026nbsp;1."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "log1p",
      "comment": "Returns the natural logarithm of the sum of the argument and 1. Note that for small values x, the result of log1p(x) is much closer to the true result of ln(1 + x) than the floating-point evaluation of log(1.0+x). Special cases: If the argument is NaN or less than -1, then the result is NaN. If the argument is positive infinity, then the result is positive infinity. If the argument is negative one, then the result is negative infinity. If the argument is zero, then the result is a zero with the same sign as the argument. The computed result must be within 1 ulp of the exact result. Results must be semi-monotonic.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - a value"
        ],
        "return": [
          "the value ln(\n\u003ccode\u003ex\u003c/code\u003e\u0026nbsp;+\u0026nbsp;1), the natural log of \n\u003ccode\u003ex\u003c/code\u003e\u0026nbsp;+\u0026nbsp;1"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "copySign",
      "comment": "Returns the first floating-point argument with the sign of the second floating-point argument. Note that unlike the StrictMath.copySign method, this method does not require NaN sign arguments to be treated as positive values; implementations are permitted to treat some NaN arguments as positive and other NaN arguments as negative to allow greater performance.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emagnitude\u003c/code\u003e - the parameter providing the magnitude of the result",
          "\u003ccode\u003esign\u003c/code\u003e - the parameter providing the sign of the result"
        ],
        "return": [
          "a value with the magnitude of \n\u003ccode\u003emagnitude\u003c/code\u003e and the sign of \n\u003ccode\u003esign\u003c/code\u003e."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "copySign",
      "comment": "Returns the first floating-point argument with the sign of the second floating-point argument. Note that unlike the StrictMath.copySign method, this method does not require NaN sign arguments to be treated as positive values; implementations are permitted to treat some NaN arguments as positive and other NaN arguments as negative to allow greater performance.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emagnitude\u003c/code\u003e - the parameter providing the magnitude of the result",
          "\u003ccode\u003esign\u003c/code\u003e - the parameter providing the sign of the result"
        ],
        "return": [
          "a value with the magnitude of \n\u003ccode\u003emagnitude\u003c/code\u003e and the sign of \n\u003ccode\u003esign\u003c/code\u003e."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getExponent",
      "comment": "Returns the unbiased exponent used in the representation of a float. Special cases: If the argument is NaN or infinite, then the result is Float.MAX_EXPONENT + 1. If the argument is zero or subnormal, then the result is Float.MIN_EXPONENT -1.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a \n\u003ccode\u003efloat\u003c/code\u003e value"
        ],
        "return": [
          "the unbiased exponent of the argument"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getExponent",
      "comment": "Returns the unbiased exponent used in the representation of a double. Special cases: If the argument is NaN or infinite, then the result is Double.MAX_EXPONENT + 1. If the argument is zero or subnormal, then the result is Double.MIN_EXPONENT -1.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - a \n\u003ccode\u003edouble\u003c/code\u003e value"
        ],
        "return": [
          "the unbiased exponent of the argument"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "nextAfter",
      "comment": "Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal the second argument is returned. Special cases: If either argument is a NaN, then NaN is returned. If both arguments are signed zeros, direction is returned unchanged (as implied by the requirement of returning the second argument if the arguments compare as equal). If start is ±Double.MIN_VALUE and direction has a value such that the result should have a smaller magnitude, then a zero with the same sign as start is returned. If start is infinite and direction has a value such that the result should have a smaller magnitude, Double.MAX_VALUE with the same sign as start is returned. If start is equal to ± Double.MAX_VALUE and direction has a value such that the result should have a larger magnitude, an infinity with same sign as start is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - starting floating-point value",
          "\u003ccode\u003edirection\u003c/code\u003e - value indicating which of \n\u003ccode\u003estart\u003c/code\u003e\u0027s neighbors or \n\u003ccode\u003estart\u003c/code\u003e should be returned"
        ],
        "return": [
          "The floating-point number adjacent to \n\u003ccode\u003estart\u003c/code\u003e in the direction of \n\u003ccode\u003edirection\u003c/code\u003e."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "nextAfter",
      "comment": "Returns the floating-point number adjacent to the first argument in the direction of the second argument. If both arguments compare as equal a value equivalent to the second argument is returned. Special cases: If either argument is a NaN, then NaN is returned. If both arguments are signed zeros, a value equivalent to direction is returned. If start is ±Float.MIN_VALUE and direction has a value such that the result should have a smaller magnitude, then a zero with the same sign as start is returned. If start is infinite and direction has a value such that the result should have a smaller magnitude, Float.MAX_VALUE with the same sign as start is returned. If start is equal to ± Float.MAX_VALUE and direction has a value such that the result should have a larger magnitude, an infinity with same sign as start is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - starting floating-point value",
          "\u003ccode\u003edirection\u003c/code\u003e - value indicating which of \n\u003ccode\u003estart\u003c/code\u003e\u0027s neighbors or \n\u003ccode\u003estart\u003c/code\u003e should be returned"
        ],
        "return": [
          "The floating-point number adjacent to \n\u003ccode\u003estart\u003c/code\u003e in the direction of \n\u003ccode\u003edirection\u003c/code\u003e."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "nextUp",
      "comment": "Returns the floating-point value adjacent to d in the direction of positive infinity. This method is semantically equivalent to nextAfter(d, Double.POSITIVE_INFINITY); however, a nextUp implementation may run faster than its equivalent nextAfter call. Special Cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, the result is positive infinity. If the argument is zero, the result is Double.MIN_VALUE",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - starting floating-point value"
        ],
        "return": [
          "The adjacent floating-point value closer to positive infinity."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "nextUp",
      "comment": "Returns the floating-point value adjacent to f in the direction of positive infinity. This method is semantically equivalent to nextAfter(f, Float.POSITIVE_INFINITY); however, a nextUp implementation may run faster than its equivalent nextAfter call. Special Cases: If the argument is NaN, the result is NaN. If the argument is positive infinity, the result is positive infinity. If the argument is zero, the result is Float.MIN_VALUE",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - starting floating-point value"
        ],
        "return": [
          "The adjacent floating-point value closer to positive infinity."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "nextDown",
      "comment": "Returns the floating-point value adjacent to d in the direction of negative infinity. This method is semantically equivalent to nextAfter(d, Double.NEGATIVE_INFINITY); however, a nextDown implementation may run faster than its equivalent nextAfter call. Special Cases: If the argument is NaN, the result is NaN. If the argument is negative infinity, the result is negative infinity. If the argument is zero, the result is -Double.MIN_VALUE",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - starting floating-point value"
        ],
        "return": [
          "The adjacent floating-point value closer to negative infinity."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "nextDown",
      "comment": "Returns the floating-point value adjacent to f in the direction of negative infinity. This method is semantically equivalent to nextAfter(f, Float.NEGATIVE_INFINITY); however, a nextDown implementation may run faster than its equivalent nextAfter call. Special Cases: If the argument is NaN, the result is NaN. If the argument is negative infinity, the result is negative infinity. If the argument is zero, the result is -Float.MIN_VALUE",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - starting floating-point value"
        ],
        "return": [
          "The adjacent floating-point value closer to negative infinity."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "scalb",
      "comment": "Returns d × 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set. See the Java Language Specification for a discussion of floating-point value sets. If the exponent of the result is between Double.MIN_EXPONENT and Double.MAX_EXPONENT, the answer is calculated exactly. If the exponent of the result would be larger than Double.MAX_EXPONENT, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when scalb(x, n) is subnormal, scalb(scalb(x, n), -n) may not equal x. When the result is non-NaN, the result has the same sign as d. Special cases: If the first argument is NaN, NaN is returned. If the first argument is infinite, then an infinity of the same sign is returned. If the first argument is zero, then a zero of the same sign is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - number to be scaled by a power of two.",
          "\u003ccode\u003escaleFactor\u003c/code\u003e - power of 2 used to scale \n\u003ccode\u003ed\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003ed\u003c/code\u003e × 2\n\u003csup\u003e\u003ccode\u003escaleFactor\u003c/code\u003e\u003c/sup\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "scalb",
      "comment": "Returns f × 2scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the float value set. See the Java Language Specification for a discussion of floating-point value sets. If the exponent of the result is between Float.MIN_EXPONENT and Float.MAX_EXPONENT, the answer is calculated exactly. If the exponent of the result would be larger than Float.MAX_EXPONENT, an infinity is returned. Note that if the result is subnormal, precision may be lost; that is, when scalb(x, n) is subnormal, scalb(scalb(x, n), -n) may not equal x. When the result is non-NaN, the result has the same sign as f. Special cases: If the first argument is NaN, NaN is returned. If the first argument is infinite, then an infinity of the same sign is returned. If the first argument is zero, then a zero of the same sign is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - number to be scaled by a power of two.",
          "\u003ccode\u003escaleFactor\u003c/code\u003e - power of 2 used to scale \n\u003ccode\u003ef\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003ef\u003c/code\u003e × 2\n\u003csup\u003e\u003ccode\u003escaleFactor\u003c/code\u003e\u003c/sup\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.Math",
  "comment": "The class \n\u003ccode\u003eMath\u003c/code\u003e contains methods for performing basic numeric operations such as the elementary exponential, logarithm, square root, and trigonometric functions. \n\u003cp\u003eUnlike some of the numeric methods of class \u003ccode\u003eStrictMath\u003c/code\u003e, all implementations of the equivalent functions of class \u003ccode\u003eMath\u003c/code\u003e are not defined to return the bit-for-bit same results. This relaxation permits better-performing implementations where strict reproducibility is not required. \u003c/p\u003e\n\u003cp\u003eBy default many of the \u003ccode\u003eMath\u003c/code\u003e methods simply call the equivalent method in \u003ccode\u003eStrictMath\u003c/code\u003e for their implementation. Code generators are encouraged to use platform-specific native libraries or microprocessor instructions, where available, to provide higher-performance implementations of \u003ccode\u003eMath\u003c/code\u003e methods. Such higher-performance implementations still must conform to the specification for \u003ccode\u003eMath\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThe quality of implementation specifications concern two properties, accuracy of the returned result and monotonicity of the method. Accuracy of the floating-point \u003ccode\u003eMath\u003c/code\u003e methods is measured in terms of \u003ci\u003eulps\u003c/i\u003e, units in the last place. For a given floating-point format, an \u003ca href\u003d\"#ulp(double)\"\u003eulp\u003c/a\u003e of a specific real number value is the distance between the two floating-point values bracketing that numerical value. When discussing the accuracy of a method as a whole rather than at a specific argument, the number of ulps cited is for the worst-case error at any argument. If a method always has an error less than 0.5 ulps, the method always returns the floating-point number nearest the exact result; such a method is \u003ci\u003ecorrectly rounded\u003c/i\u003e. A correctly rounded method is generally the best a floating-point approximation can be; however, it is impractical for many floating-point methods to be correctly rounded. Instead, for the \u003ccode\u003eMath\u003c/code\u003e class, a larger error bound of 1 or 2 ulps is allowed for certain methods. Informally, with a 1 ulp error bound, when the exact result is a representable number, the exact result should be returned as the computed result; otherwise, either of the two floating-point values which bracket the exact result may be returned. For exact results large in magnitude, one of the endpoints of the bracket may be infinite. Besides accuracy at individual arguments, maintaining proper relations between the method at different arguments is also important. Therefore, most methods with more than 0.5 ulp errors are required to be \u003ci\u003esemi-monotonic\u003c/i\u003e: whenever the mathematical function is non-decreasing, so is the floating-point approximation, likewise, whenever the mathematical function is non-increasing, so is the floating-point approximation. Not all approximations that have 1 ulp accuracy will automatically meet the monotonicity requirements. \u003c/p\u003e\n\u003cp\u003e The platform uses signed two\u0027s complement integer arithmetic with int and long primitive types. The developer should choose the primitive type to ensure that arithmetic operations consistently produce correct results, which in some cases means the operations will not overflow the range of values of the computation. The best practice is to choose the primitive type and algorithm to avoid overflow. In cases where the size is \u003ccode\u003eint\u003c/code\u003e or \u003ccode\u003elong\u003c/code\u003e and overflow errors need to be detected, the methods \u003ccode\u003eaddExact\u003c/code\u003e, \u003ccode\u003esubtractExact\u003c/code\u003e, \u003ccode\u003emultiplyExact\u003c/code\u003e, \u003ccode\u003etoIntExact\u003c/code\u003e, \u003ccode\u003eincrementExact\u003c/code\u003e, \u003ccode\u003edecrementExact\u003c/code\u003e and \u003ccode\u003enegateExact\u003c/code\u003e throw an \u003ccode\u003eArithmeticException\u003c/code\u003e when the results overflow. For the arithmetic operations divide and absolute value, overflow occurs only with a specific minimum or maximum value and should be checked against the minimum or maximum as appropriate.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.0"
    ]
  }
}