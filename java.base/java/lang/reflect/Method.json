{
  "packageName": "java.lang.reflect",
  "simpleName": "Method",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.reflect.Executable",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "flag"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAccessible",
      "comment": "Description copied from class: AccessibleObject",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AccessibleObject.html#trySetAccessible()\"\u003e\u003ccode\u003eAccessibleObject.trySetAccessible()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/invoke/MethodHandles.html#privateLookupIn(java.lang.Class,java.lang.invoke.MethodHandles.Lookup)\"\u003e\u003ccode\u003eMethodHandles.privateLookupIn(java.lang.Class\u0026lt;?\u0026gt;, java.lang.invoke.MethodHandles.Lookup)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AccessibleObject.html#setAccessible(boolean)\"\u003esetAccessible\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AccessibleObject.html\" title\u003d\"class in java.lang.reflect\"\u003eAccessibleObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eflag\u003c/code\u003e - the new value for the \n\u003ccode\u003eaccessible\u003c/code\u003e flag"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/InaccessibleObjectException.html\" title\u003d\"class in java.lang.reflect\"\u003eInaccessibleObjectException\u003c/a\u003e\u003c/code\u003e - if access cannot be enabled",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the request is denied by the security manager"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaringClass",
      "comment": "Returns the Class object representing the class or interface that declares the method represented by this object.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Member.html#getDeclaringClass()\"\u003egetDeclaringClass\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Member.html\" title\u003d\"interface in java.lang.reflect\"\u003eMember\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getDeclaringClass()\"\u003egetDeclaringClass\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an object representing the declaring class of the underlying member"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Returns the name of the method represented by this Method object, as a String.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Member.html#getName()\"\u003egetName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Member.html\" title\u003d\"interface in java.lang.reflect\"\u003eMember\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getName()\"\u003egetName\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the simple name of the underlying member"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getModifiers",
      "comment": "Returns the Java language modifiers for the executable represented by this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Modifier.html\" title\u003d\"class in java.lang.reflect\"\u003e\u003ccode\u003eModifier\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Member.html#getModifiers()\"\u003egetModifiers\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Member.html\" title\u003d\"interface in java.lang.reflect\"\u003eMember\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getModifiers()\"\u003egetModifiers\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the Java language modifiers for the underlying member"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.TypeVariable",
        "parameters": [
          {
            "name": "java.lang.reflect.Method",
            "type": "Class"
          }
        ],
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTypeParameters",
      "comment": "Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order. Returns an array of length 0 if the underlying generic declaration declares no type variables.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/GenericDeclaration.html#getTypeParameters()\"\u003egetTypeParameters\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/GenericDeclaration.html\" title\u003d\"interface in java.lang.reflect\"\u003eGenericDeclaration\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getTypeParameters()\"\u003egetTypeParameters\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/GenericSignatureFormatError.html\" title\u003d\"class in java.lang.reflect\"\u003eGenericSignatureFormatError\u003c/a\u003e\u003c/code\u003e - if the generic signature of this generic declaration does not conform to the format specified in \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e"
        ],
        "return": [
          "an array of \n\u003ccode\u003eTypeVariable\u003c/code\u003e objects that represent the type variables declared by this generic declaration"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReturnType",
      "comment": "Returns a Class object that represents the formal return type of the method represented by this Method object.",
      "tagMap": {
        "return": [
          "the return type for the method this object represents"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGenericReturnType",
      "comment": "Returns a Type object that represents the formal return type of the method represented by this Method object. If the return type is a parameterized type, the Type object returned must accurately reflect the actual type arguments used in the source code. If the return type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/GenericSignatureFormatError.html\" title\u003d\"class in java.lang.reflect\"\u003eGenericSignatureFormatError\u003c/a\u003e\u003c/code\u003e - if the generic method signature does not conform to the format specified in \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if the underlying method\u0027s return type refers to a non-existent class or interface declaration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html\" title\u003d\"class in java.lang.reflect\"\u003eMalformedParameterizedTypeException\u003c/a\u003e\u003c/code\u003e - if the underlying method\u0027s return type refers to a parameterized type that cannot be instantiated for any reason"
        ],
        "return": [
          "a \n\u003ccode\u003eType\u003c/code\u003e object that represents the formal return type of the underlying method"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParameterTypes",
      "comment": "Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object. Returns an array of length 0 if the underlying executable takes no parameters. Note that the constructors of some inner classes may have an implicitly declared parameter in addition to explicitly declared ones.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getParameterTypes()\"\u003egetParameterTypes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the parameter types for the executable this object represents"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParameterCount",
      "comment": "Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getParameterCount()\"\u003egetParameterCount\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The number of formal parameters for the executable this object represents"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGenericParameterTypes",
      "comment": "Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object. Returns an array of length 0 if the underlying executable takes no parameters. Note that the constructors of some inner classes may have an implicitly declared parameter in addition to explicitly declared ones. If a formal parameter type is a parameterized type, the Type object returned for it must accurately reflect the actual type arguments used in the source code. If a formal parameter type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getGenericParameterTypes()\"\u003egetGenericParameterTypes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/GenericSignatureFormatError.html\" title\u003d\"class in java.lang.reflect\"\u003eGenericSignatureFormatError\u003c/a\u003e\u003c/code\u003e - if the generic method signature does not conform to the format specified in \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if any of the parameter types of the underlying executable refers to a non-existent type declaration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html\" title\u003d\"class in java.lang.reflect\"\u003eMalformedParameterizedTypeException\u003c/a\u003e\u003c/code\u003e - if any of the underlying executable\u0027s parameter types refer to a parameterized type that cannot be instantiated for any reason"
        ],
        "return": [
          "an array of \n\u003ccode\u003eType\u003c/code\u003es that represent the formal parameter types of the underlying executable, in declaration order"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExceptionTypes",
      "comment": "Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object. Returns an array of length 0 if the executable declares no exceptions in its throws clause.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getExceptionTypes()\"\u003egetExceptionTypes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the exception types declared as being thrown by the executable this object represents"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getGenericExceptionTypes",
      "comment": "Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object. Returns an array of length 0 if the underlying executable declares no exceptions in its throws clause. If an exception type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getGenericExceptionTypes()\"\u003egetGenericExceptionTypes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/GenericSignatureFormatError.html\" title\u003d\"class in java.lang.reflect\"\u003eGenericSignatureFormatError\u003c/a\u003e\u003c/code\u003e - if the generic method signature does not conform to the format specified in \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if the underlying executable\u0027s \n\u003ccode\u003ethrows\u003c/code\u003e clause refers to a non-existent type declaration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html\" title\u003d\"class in java.lang.reflect\"\u003eMalformedParameterizedTypeException\u003c/a\u003e\u003c/code\u003e - if the underlying executable\u0027s \n\u003ccode\u003ethrows\u003c/code\u003e clause refers to a parameterized type that cannot be instantiated for any reason"
        ],
        "return": [
          "an array of Types that represent the exception types thrown by the underlying executable"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this Method against the specified object. Returns true if the objects are the same. Two Methods are the same if they were declared by the same class and have the same name and formal parameter types and return type.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is the same as the obj argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hashcode for this Method. The hashcode is computed as the exclusive-or of the hashcodes for the underlying method\u0027s declaring class name and the method\u0027s name.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string describing this Method. The string is formatted as the method access modifiers, if any, followed by the method return type, followed by a space, followed by the class declaring the method, followed by a period, followed by the method name, followed by a parenthesized, comma-separated list of the method\u0027s formal parameter types. If the method throws checked exceptions, the parameter list is followed by a space, followed by the word \"throws\" followed by a comma-separated list of the thrown exception types. For example:     public boolean java.lang.Object.equals(java.lang.Object)\n The access modifiers are placed in canonical order as specified by \"The Java Language Specification\". This is public, protected or private first, and then other modifiers in the following order: abstract, default, static, final, synchronized, native, strictfp.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.4.3\"\u003e8.4.3 Method Modifiers\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.4\"\u003e9.4 Method Declarations\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.1\"\u003e9.6.1 Annotation Interface Elements\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string describing this \n\u003ccode\u003eMethod\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toGenericString",
      "comment": "Returns a string describing this Method, including type parameters. The string is formatted as the method access modifiers, if any, followed by an angle-bracketed comma-separated list of the method\u0027s type parameters, if any, including informative bounds of the type parameters, if any, followed by the method\u0027s generic return type, followed by a space, followed by the class declaring the method, followed by a period, followed by the method name, followed by a parenthesized, comma-separated list of the method\u0027s generic formal parameter types. If this method was declared to take a variable number of arguments, instead of denoting the last parameter as \"Type[]\", it is denoted as \"Type...\". A space is used to separate access modifiers from one another and from the type parameters or return type. If there are no type parameters, the type parameter list is elided; if the type parameter list is present, a space separates the list from the class name. If the method is declared to throw exceptions, the parameter list is followed by a space, followed by the word \"throws\" followed by a comma-separated list of the generic thrown exception types. The access modifiers are placed in canonical order as specified by \"The Java Language Specification\". This is public, protected or private first, and then other modifiers in the following order: abstract, default, static, final, synchronized, native, strictfp.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.4.3\"\u003e8.4.3 Method Modifiers\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.4\"\u003e9.4 Method Declarations\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.1\"\u003e9.6.1 Annotation Interface Elements\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#toGenericString()\"\u003etoGenericString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string describing this \n\u003ccode\u003eMethod\u003c/code\u003e, include type parameters"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalAccessException",
          "type": "Class"
        },
        {
          "name": "java.lang.IllegalArgumentException",
          "type": "Class"
        },
        {
          "name": "java.lang.reflect.InvocationTargetException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "invoke",
      "comment": "Invokes the underlying method represented by this Method object, on the specified object with the specified parameters. Individual parameters are automatically unwrapped to match primitive formal parameters, and both primitive and reference parameters are subject to method invocation conversions as necessary. If the underlying method is static, then the specified obj argument is ignored. It may be null. If the number of formal parameters required by the underlying method is 0, the supplied args array may be of length 0 or null. If the underlying method is an instance method, it is invoked using dynamic method lookup as documented in The Java Language Specification, section 15.12.4.4; in particular, overriding based on the runtime type of the target object may occur. If the underlying method is static, the class that declared the method is initialized if it has not already been initialized. If the method completes normally, the value it returns is returned to the caller of invoke; if the value has a primitive type, it is first appropriately wrapped in an object. However, if the value has the type of an array of a primitive type, the elements of the array are not wrapped in objects; in other words, an array of primitive type is returned. If the underlying method return type is void, the invocation returns null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object the underlying method is invoked from",
          "\u003ccode\u003eargs\u003c/code\u003e - the arguments used for the method call"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessException.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eMethod\u003c/code\u003e object is enforcing Java language access control and the underlying method is inaccessible.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the method is an instance method and the specified object argument is not an instance of the class or interface declaring the underlying method (or of a subclass or implementor thereof); if the number of actual and formal parameters differ; if an unwrapping conversion for primitive arguments fails; or if, after possible unwrapping, a parameter value cannot be converted to the corresponding formal parameter type by a method invocation conversion.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/InvocationTargetException.html\" title\u003d\"class in java.lang.reflect\"\u003eInvocationTargetException\u003c/a\u003e\u003c/code\u003e - if the underlying method throws an exception.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified object is null and the method is an instance method.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ExceptionInInitializerError.html\" title\u003d\"class in java.lang\"\u003eExceptionInInitializerError\u003c/a\u003e\u003c/code\u003e - if the initialization provoked by this method fails."
        ],
        "return": [
          "the result of dispatching the method represented by this object on \n\u003ccode\u003eobj\u003c/code\u003e with parameters \n\u003ccode\u003eargs\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBridge",
      "comment": "Returns true if this method is a bridge method; returns false otherwise.",
      "tagMap": {
        "return": [
          "true if and only if this method is a bridge method as defined by the Java Language Specification."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isVarArgs",
      "comment": "Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#isVarArgs()\"\u003eisVarArgs\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if an only if this executable was declared to take a variable number of arguments."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isSynthetic",
      "comment": "Returns true if this executable is a synthetic construct; returns false otherwise.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-13.html#jls-13.1\"\u003e13.1 The Form of a Binary\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#isSynthetic()\"\u003eisSynthetic\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Member.html#isSynthetic()\"\u003eisSynthetic\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Member.html\" title\u003d\"interface in java.lang.reflect\"\u003eMember\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "true if and only if this executable is a synthetic construct as defined by \n\u003ccite\u003eThe Java Language Specification\u003c/cite\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDefault",
      "comment": "Returns true if this method is a default method; returns false otherwise. A default method is a public non-abstract instance method, that is, a non-static method with a body, declared in an interface.",
      "tagMap": {
        "return": [
          "true if and only if this method is a default method as defined by the Java Language Specification."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDefaultValue",
      "comment": "Returns the default value for the annotation member represented by this Method instance. If the member is of a primitive type, an instance of the corresponding wrapper type is returned. Returns null if no default is associated with the member, or if the method instance does not represent a declared member of an annotation type.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if the annotation is of type \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClass\u003c/code\u003e\u003c/a\u003e and no definition can be found for the default class value."
        ],
        "return": [
          "the default value for the annotation member represented by this \n\u003ccode\u003eMethod\u003c/code\u003e instance."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "annotationClass"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotation",
      "comment": "Returns this element\u0027s annotation for the specified type if such an annotation is present, else null. Note that any annotation returned by this method is a declaration annotation.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the annotation to query for and return if present"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getAnnotation(java.lang.Class)\"\u003egetAnnotation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotation(java.lang.Class)\"\u003egetAnnotation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "this element\u0027s annotation for the specified annotation type if present on this element, else null"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.annotation.Annotation",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDeclaredAnnotations",
      "comment": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. Note that any annotations returned by this method are declaration annotations.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AccessibleObject.html#getDeclaredAnnotations()\"\u003egetDeclaredAnnotations\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AccessibleObject.html\" title\u003d\"class in java.lang.reflect\"\u003eAccessibleObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotations()\"\u003egetDeclaredAnnotations\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "annotations directly present on this element"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.annotation.Annotation",
        "type": "Class",
        "arrayDimensions": [
          {},
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParameterAnnotations",
      "comment": "Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object. Synthetic and mandated parameters (see explanation below), such as the outer \"this\" parameter to an inner class constructor will be represented in the returned array. If the executable has no parameters (meaning no formal, no synthetic, and no mandated parameters), a zero-length array will be returned. If the Executable has one or more parameters, a nested array of length zero is returned for each parameter with no annotations. The annotation objects contained in the returned arrays are serializable. The caller of this method is free to modify the returned arrays; it will have no effect on the arrays returned to other callers. A compiler may add extra parameters that are implicitly declared in source (\"mandated\"), as well as parameters that are neither implicitly nor explicitly declared in source (\"synthetic\") to the parameter list for a method. See Parameter for more information. Note that any annotations returned by this method are declaration annotations.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Parameter.html\" title\u003d\"class in java.lang.reflect\"\u003e\u003ccode\u003eParameter\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Parameter.html#getAnnotations()\"\u003e\u003ccode\u003eParameter.getAnnotations()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getParameterAnnotations()\"\u003egetParameterAnnotations\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an array of arrays that represent the annotations on the formal and implicit parameters, in declaration order, of the executable represented by this object"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.AnnotatedType",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAnnotatedReturnType",
      "comment": "Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable. If this Executable object represents a constructor, the AnnotatedType object represents the type of the constructed object. If this Executable object represents a method, the AnnotatedType object represents the use of a type to specify the return type of the method.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html#getAnnotatedReturnType()\"\u003egetAnnotatedReturnType\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Executable.html\" title\u003d\"class in java.lang.reflect\"\u003eExecutable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an object representing the return type of the method or constructor represented by this \n\u003ccode\u003eExecutable\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.reflect.Method",
  "comment": "A \n\u003ccode\u003eMethod\u003c/code\u003e provides information about, and access to, a single method on a class or interface. The reflected method may be a class method or an instance method (including an abstract method). \n\u003cp\u003eA \u003ccode\u003eMethod\u003c/code\u003e permits widening conversions to occur when matching the actual parameters to invoke with the underlying method\u0027s formal parameters, but it throws an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e if a narrowing conversion would occur.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/Member.html\" title\u003d\"interface in java.lang.reflect\"\u003e\u003ccode\u003eMember\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClass\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#getMethods()\"\u003e\u003ccode\u003eClass.getMethods()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#getMethod(java.lang.String,java.lang.Class...)\"\u003e\u003ccode\u003eClass.getMethod(String, Class[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#getDeclaredMethods()\"\u003e\u003ccode\u003eClass.getDeclaredMethods()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#getDeclaredMethod(java.lang.String,java.lang.Class...)\"\u003e\u003ccode\u003eClass.getDeclaredMethod(String, Class[])\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}