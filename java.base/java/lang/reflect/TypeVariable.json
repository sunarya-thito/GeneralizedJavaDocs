{
  "packageName": "java.lang.reflect",
  "simpleName": "TypeVariable",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.lang.reflect.Type",
      "type": "Class"
    },
    {
      "name": "java.lang.reflect.AnnotatedElement",
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getBounds",
      "comment": "Returns an array of Type objects representing the upper bound(s) of this type variable. If no upper bound is explicitly declared, the upper bound is Object. For each upper bound B: if B is a parameterized type or a type variable, it is created, (see ParameterizedType for the details of the creation process for parameterized types). Otherwise, B is resolved.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if any of the bounds refers to a non-existent type declaration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html\" title\u003d\"class in java.lang.reflect\"\u003eMalformedParameterizedTypeException\u003c/a\u003e\u003c/code\u003e - if any of the bounds refer to a parameterized type that cannot be instantiated for any reason"
        ],
        "return": [
          "an array of \n\u003ccode\u003eType\u003c/code\u003es representing the upper bound(s) of this type variable"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.lang.reflect.TypeVariable",
        "name": "D",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getGenericDeclaration",
      "comment": "Returns the GenericDeclaration object representing the generic declaration declared for this type variable.",
      "tagMap": {
        "return": [
          "the generic declaration declared for this type variable."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getName",
      "comment": "Returns the name of this type variable, as it occurs in the source code.",
      "tagMap": {
        "return": [
          "the name of this type variable, as it appears in the source code"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.AnnotatedType",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotatedBounds",
      "comment": "Returns an array of AnnotatedType objects that represent the use of types to denote the upper bounds of the type parameter represented by this TypeVariable. The order of the objects in the array corresponds to the order of the bounds in the declaration of the type parameter. Note that if no upper bound is explicitly declared, the upper bound is unannotated Object.",
      "tagMap": {
        "return": [
          "an array of objects representing the upper bound(s) of the type variable"
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "D",
      "upperBounds": [
        {
          "name": "java.lang.reflect.GenericDeclaration",
          "type": "Class"
        }
      ],
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.lang.reflect.TypeVariable",
  "comment": "TypeVariable is the common superinterface for type variables of kinds. A type variable is created the first time it is needed by a reflective method, as specified in this package. If a type variable t is referenced by a type (i.e, class, interface or annotation type) T, and T is declared by the nth enclosing class of T (see JLS 8.1.2), then the creation of t requires the resolution (see JVMS 5) of the ith enclosing class of T, for i \u003d 0 to n, inclusive. Creating a type variable must not cause the creation of its bounds. Repeated creation of a type variable has no effect. \n\u003cp\u003eMultiple objects may be instantiated at run-time to represent a given type variable. Even though a type variable is created only once, this does not imply any requirement to cache instances representing the type variable. However, all instances representing a type variable must be equal() to each other. As a consequence, users of type variables must not rely on the identity of instances of classes implementing this interface.\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.4\"\u003e4.4 Type Variables\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}