{
  "packageName": "java.lang.reflect",
  "simpleName": "AnnotatedType",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.reflect.AnnotatedElement",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.reflect.AnnotatedType",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotatedOwnerType",
      "comment": "Returns the potentially annotated type that this type is a member of, if this type represents a nested type. For example, if this type is @TA O\u003cT\u003e.I\u003cS\u003e, return a representation of @TA O\u003cT\u003e. Returns null if this AnnotatedType represents a top-level class or interface, or a local or anonymous class, or a primitive type, or void. Returns null if this AnnotatedType is an instance of AnnotatedArrayType, AnnotatedTypeVariable, or AnnotatedWildcardType.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This default implementation returns \n\u003ccode\u003enull\u003c/code\u003e and performs no other action."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if the owner type refers to a non-existent class or interface declaration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html\" title\u003d\"class in java.lang.reflect\"\u003eMalformedParameterizedTypeException\u003c/a\u003e\u003c/code\u003e - if the owner type refers to a parameterized type that cannot be instantiated for any reason"
        ],
        "return": [
          "an \n\u003ccode\u003eAnnotatedType\u003c/code\u003e object representing the potentially annotated type that this type is a member of, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getType",
      "comment": "Returns the underlying type that this annotated type represents.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the type this annotated type represents"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "annotationClass",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotation",
      "comment": "Returns this element\u0027s annotation for the specified type if such an annotation is present, else null. Note that any annotation returned by this method is a type annotation.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the annotation to query for and return if present"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotation(java.lang.Class)\"\u003egetAnnotation\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "this element\u0027s annotation for the specified annotation type if present on this element, else null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.annotation.Annotation",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotations",
      "comment": "Returns annotations that are present on this element. If there are no annotations present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. Note that any annotations returned by this method are type annotations.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotations()\"\u003egetAnnotations\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "annotations present on this element"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.annotation.Annotation",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDeclaredAnnotations",
      "comment": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers. Note that any annotations returned by this method are type annotations.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotations()\"\u003egetDeclaredAnnotations\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html\" title\u003d\"interface in java.lang.reflect\"\u003eAnnotatedElement\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "annotations directly present on this element"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.lang.reflect.AnnotatedType",
  "comment": "\u003ccode\u003eAnnotatedType\u003c/code\u003e represents the potentially annotated use of a type in the program currently running in this VM. The use may be of any type in the Java programming language, including an array type, a parameterized type, a type variable, or a wildcard type. Note that any annotations returned by methods on this interface are \n\u003cem\u003etype annotations\u003c/em\u003e (JLS \n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.7.4\"\u003e9.7.4\u003c/a\u003e) as the entity being potentially annotated is a type.",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.1\"\u003e4.1 The Kinds of Types and Values\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.2\"\u003e4.2 Primitive Types and Values\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.3\"\u003e4.3 Reference Types and Values\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.4\"\u003e4.4 Type Variables\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.5\"\u003e4.5 Parameterized Types\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.8\"\u003e4.8 Raw Types\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.9\"\u003e4.9 Intersection Types\u003c/a\u003e\n\u003cbr\u003e\n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-10.html#jls-10.1\"\u003e10.1 Array Types\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}