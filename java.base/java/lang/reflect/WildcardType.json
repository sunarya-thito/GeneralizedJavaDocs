{
  "packageName": "java.lang.reflect",
  "simpleName": "WildcardType",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.reflect.Type",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getUpperBounds",
      "comment": "Returns an array of Type objects representing the upper bound(s) of this type variable. If no upper bound is explicitly declared, the upper bound is Object. For each upper bound B : if B is a parameterized type or a type variable, it is created, (see ParameterizedType for the details of the creation process for parameterized types). Otherwise, B is resolved.",
      "tagMap": {
        "apiNote": [
          "While to date a wildcard may have at most one upper bound, callers of this method should be written to accommodate multiple bounds."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if any of the bounds refers to a non-existent type declaration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html\" title\u003d\"class in java.lang.reflect\"\u003eMalformedParameterizedTypeException\u003c/a\u003e\u003c/code\u003e - if any of the bounds refer to a parameterized type that cannot be instantiated for any reason"
        ],
        "return": [
          "an array of Types representing the upper bound(s) of this type variable"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getLowerBounds",
      "comment": "Returns an array of Type objects representing the lower bound(s) of this type variable. If no lower bound is explicitly declared, the lower bound is the type of null. In this case, a zero length array is returned. For each lower bound B : if B is a parameterized type or a type variable, it is created, (see ParameterizedType for the details of the creation process for parameterized types). Otherwise, B is resolved.",
      "tagMap": {
        "apiNote": [
          "While to date a wildcard may have at most one lower bound, callers of this method should be written to accommodate multiple bounds."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if any of the bounds refers to a non-existent type declaration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html\" title\u003d\"class in java.lang.reflect\"\u003eMalformedParameterizedTypeException\u003c/a\u003e\u003c/code\u003e - if any of the bounds refer to a parameterized type that cannot be instantiated for any reason"
        ],
        "return": [
          "an array of Types representing the lower bound(s) of this type variable"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.lang.reflect.WildcardType",
  "comment": "WildcardType represents a wildcard type expression, such as \n\u003ccode\u003e?\u003c/code\u003e, \n\u003ccode\u003e? extends Number\u003c/code\u003e, or \n\u003ccode\u003e? super Integer\u003c/code\u003e.",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.5.1\"\u003e4.5.1 Type Arguments of Parameterized Types\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}