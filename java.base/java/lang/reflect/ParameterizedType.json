{
  "packageName": "java.lang.reflect",
  "simpleName": "ParameterizedType",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.reflect.Type",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getActualTypeArguments",
      "comment": "Returns an array of Type objects representing the actual type arguments to this type. Note that in some cases, the returned array be empty. This can occur if this type represents a non-parameterized type nested within a parameterized type.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if any of the actual type arguments refers to a non-existent class or interface declaration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html\" title\u003d\"class in java.lang.reflect\"\u003eMalformedParameterizedTypeException\u003c/a\u003e\u003c/code\u003e - if any of the actual type parameters refer to a parameterized type that cannot be instantiated for any reason"
        ],
        "return": [
          "an array of \n\u003ccode\u003eType\u003c/code\u003e objects representing the actual type arguments to this type"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getRawType",
      "comment": "Returns the Type object representing the class or interface that declared this type.",
      "tagMap": {
        "return": [
          "the \n\u003ccode\u003eType\u003c/code\u003e object representing the class or interface that declared this type"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.reflect.Type",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOwnerType",
      "comment": "Returns a Type object representing the type that this type is a member of. For example, if this type is O\u003cT\u003e.I\u003cS\u003e, return a representation of O\u003cT\u003e. If this type is a top-level type, null is returned.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003eTypeNotPresentException\u003c/a\u003e\u003c/code\u003e - if the owner type refers to a non-existent class or interface declaration",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/MalformedParameterizedTypeException.html\" title\u003d\"class in java.lang.reflect\"\u003eMalformedParameterizedTypeException\u003c/a\u003e\u003c/code\u003e - if the owner type refers to a parameterized type that cannot be instantiated for any reason"
        ],
        "return": [
          "a \n\u003ccode\u003eType\u003c/code\u003e object representing the type that this type is a member of. If this type is a top-level type, \n\u003ccode\u003enull\u003c/code\u003e is returned"
        ],
        "since": [
          "1.5"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.lang.reflect.ParameterizedType",
  "comment": "ParameterizedType represents a parameterized type such as \n\u003ccode\u003eCollection\u0026lt;String\u0026gt;\u003c/code\u003e. \n\u003cp\u003eA parameterized type is created the first time it is needed by a reflective method, as specified in this package. When a parameterized type p is created, the generic class or interface declaration that p instantiates is resolved, and all type arguments of p are created recursively. See \u003ca href\u003d\"TypeVariable.html\" title\u003d\"interface in java.lang.reflect\"\u003e\u003ccode\u003eTypeVariable\u003c/code\u003e\u003c/a\u003e for details on the creation process for type variables. Repeated creation of a parameterized type has no effect. \u003c/p\u003e\n\u003cp\u003eInstances of classes that implement this interface must implement an equals() method that equates any two instances that share the same generic class or interface declaration and have equal type parameters.\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.5\"\u003e4.5 Parameterized Types\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}