{
  "packageName": "java.lang.reflect",
  "simpleName": "AnnotatedElement",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isAnnotationPresent",
      "comment": "Returns true if an annotation for the specified type is present on this element, else false. This method is designed primarily for convenient access to marker annotations. The truth value returned by this method is equivalent to: getAnnotation(annotationClass) !\u003d null",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation returns \n\u003ccode\u003e getAnnotation(annotationClass) !\u003d null\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "true if an annotation for the specified annotation type is present on this element, else false"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotation",
      "comment": "Returns this element\u0027s annotation for the specified type if such an annotation is present, else null.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the annotation to query for and return if present"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "this element\u0027s annotation for the specified annotation type if present on this element, else null"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.annotation.Annotation",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotations",
      "comment": "Returns annotations that are present on this element. If there are no annotations present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.",
      "annotations": [],
      "tagMap": {
        "return": [
          "annotations present on this element"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class",
        "arrayDimensions": 1
      },
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAnnotationsByType",
      "comment": "Returns annotations that are associated with this element. If there are no annotations associated with this element, the return value is an array of length 0. The difference between this method and getAnnotation(Class) is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the annotation to query for and return if present"
        ],
        "implSpec": [
          "The default implementation first calls \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotationsByType(java.lang.Class)\"\u003e\u003ccode\u003egetDeclaredAnnotationsByType(Class)\u003c/code\u003e\u003c/a\u003e passing \n\u003ccode\u003e annotationClass\u003c/code\u003e as the argument. If the returned array has length greater than zero, the array is returned. If the returned array is zero-length and this \n\u003ccode\u003eAnnotatedElement\u003c/code\u003e is a class and the argument type is an inheritable annotation type, and the superclass of this \n\u003ccode\u003eAnnotatedElement\u003c/code\u003e is non-null, then the returned result is the result of calling \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType(java.lang.Class)\"\u003e\u003ccode\u003egetAnnotationsByType(Class)\u003c/code\u003e\u003c/a\u003e on the superclass with \n\u003ccode\u003e annotationClass\u003c/code\u003e as the argument. Otherwise, a zero-length array is returned."
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "all this element\u0027s annotations for the specified annotation type if associated with this element, else an array of length zero"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDeclaredAnnotation",
      "comment": "Returns this element\u0027s annotation for the specified type if such an annotation is directly present, else null. This method ignores inherited annotations. (Returns null if no annotations are directly present on this element.)",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the annotation to query for and return if directly present"
        ],
        "implSpec": [
          "The default implementation first performs a null check and then loops over the results of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotations()\"\u003e\u003ccode\u003egetDeclaredAnnotations()\u003c/code\u003e\u003c/a\u003e returning the first annotation whose annotation type matches the argument type."
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "this element\u0027s annotation for the specified annotation type if directly present on this element, else null"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class",
        "arrayDimensions": 1
      },
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.lang.annotation.Annotation",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDeclaredAnnotationsByType",
      "comment": "Returns this element\u0027s annotation(s) for the specified type if such annotations are either directly present or indirectly present. This method ignores inherited annotations. If there are no specified annotations directly or indirectly present on this element, the return value is an array of length 0. The difference between this method and getDeclaredAnnotation(Class) is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation if one is present. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the annotation to query for and return if directly or indirectly present"
        ],
        "implSpec": [
          "The default implementation may call \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotation(java.lang.Class)\"\u003e\u003ccode\u003egetDeclaredAnnotation(Class)\u003c/code\u003e\u003c/a\u003e one or more times to find a directly present annotation and, if the annotation type is repeatable, to find a container annotation. If annotations of the annotation type \n\u003ccode\u003eannotationClass\u003c/code\u003e are found to be both directly and indirectly present, then \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotations()\"\u003e\u003ccode\u003egetDeclaredAnnotations()\u003c/code\u003e\u003c/a\u003e will get called to determine the order of the elements in the returned array. \n\u003cp\u003eAlternatively, the default implementation may call \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotations()\"\u003e\u003ccode\u003egetDeclaredAnnotations()\u003c/code\u003e\u003c/a\u003e a single time and the returned array examined for both directly and indirectly present annotations. The results of calling \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotations()\"\u003e\u003ccode\u003egetDeclaredAnnotations()\u003c/code\u003e\u003c/a\u003e are assumed to be consistent with the results of calling \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotation(java.lang.Class)\"\u003e\u003ccode\u003egetDeclaredAnnotation(Class)\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003eannotationClass\u003c/code\u003e - the Class object corresponding to the annotation type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given annotation class is null"
        ],
        "return": [
          "all this element\u0027s annotations for the specified annotation type if directly or indirectly present on this element, else an array of length zero"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.annotation.Annotation",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getDeclaredAnnotations",
      "comment": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.",
      "annotations": [],
      "tagMap": {
        "return": [
          "annotations directly present on this element"
        ],
        "since": [
          "1.5"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.lang.reflect.AnnotatedElement",
  "comment": "Represents an annotated construct of the program currently running in this VM. A construct is either an element or a type. Annotations on an element are on a \n\u003cem\u003edeclaration\u003c/em\u003e, whereas annotations on a type are on a specific \n\u003cem\u003euse\u003c/em\u003e of a type name. As defined by \n\u003ccite\u003eThe Java Language Specification\u003c/cite\u003e section \n\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.7.4\"\u003e9.7.4\u003c/a\u003e, an annotation on an element is a \n\u003cem\u003edeclaration annotation\u003c/em\u003e and an annotation on a type is a \n\u003cem\u003etype annotation\u003c/em\u003e. Note that any annotations returned by methods on the \n\u003ca href\u003d\"AnnotatedType.html\" title\u003d\"interface in java.lang.reflect\"\u003e\u003ccode\u003eAnnotatedType\u003c/code\u003e\u003c/a\u003e interface and its subinterfaces are type annotations as the entity being potentially annotated is a type. Annotations returned by methods outside of the \n\u003ccode\u003e AnnotatedType\u003c/code\u003e hierarchy are declaration annotations. \n\u003cp\u003eThis interface allows annotations to be read reflectively. All annotations returned by methods in this interface are immutable and serializable. The arrays returned by methods of this interface may be modified by callers without affecting the arrays returned to other callers. \u003c/p\u003e\n\u003cp\u003eThe \u003ca href\u003d\"#getAnnotationsByType(java.lang.Class)\"\u003e\u003ccode\u003egetAnnotationsByType(Class)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#getDeclaredAnnotationsByType(java.lang.Class)\"\u003e\u003ccode\u003egetDeclaredAnnotationsByType(Class)\u003c/code\u003e\u003c/a\u003e methods support multiple annotations of the same type on an element. If the argument to either method is a repeatable annotation type (JLS \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6\"\u003e9.6\u003c/a\u003e), then the method will \"look through\" a container annotation (JLS \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.7\"\u003e9.7\u003c/a\u003e), if present, and return any annotations inside the container. Container annotations may be generated at compile-time to wrap multiple annotations of the argument type. \u003c/p\u003e\n\u003cp\u003eThe terms \u003cem\u003edirectly present\u003c/em\u003e, \u003cem\u003eindirectly present\u003c/em\u003e, \u003cem\u003epresent\u003c/em\u003e, and \u003cem\u003eassociated\u003c/em\u003e are used throughout this interface to describe precisely which annotations are returned by methods: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e An annotation \u003ci\u003eA\u003c/i\u003e is \u003cem\u003edirectly present\u003c/em\u003e on an element \u003ci\u003eE\u003c/i\u003e if \u003ci\u003eE\u003c/i\u003e has a \u003ccode\u003e RuntimeVisibleAnnotations\u003c/code\u003e or \u003ccode\u003e RuntimeVisibleParameterAnnotations\u003c/code\u003e or \u003ccode\u003e RuntimeVisibleTypeAnnotations\u003c/code\u003e attribute, and the attribute contains \u003ci\u003eA\u003c/i\u003e. \u003c/li\u003e\n \u003cli\u003eAn annotation \u003ci\u003eA\u003c/i\u003e is \u003cem\u003eindirectly present\u003c/em\u003e on an element \u003ci\u003eE\u003c/i\u003e if \u003ci\u003eE\u003c/i\u003e has a \u003ccode\u003eRuntimeVisibleAnnotations\u003c/code\u003e or \u003ccode\u003eRuntimeVisibleParameterAnnotations\u003c/code\u003e or \u003ccode\u003eRuntimeVisibleTypeAnnotations\u003c/code\u003e attribute, and \u003ci\u003eA\u003c/i\u003e \u0027s type is repeatable, and the attribute contains exactly one annotation whose value element contains \u003ci\u003eA\u003c/i\u003e and whose type is the containing annotation type of \u003ci\u003eA\u003c/i\u003e \u0027s type. \u003c/li\u003e\n \u003cli\u003eAn annotation \u003ci\u003eA\u003c/i\u003e is \u003cem\u003epresent\u003c/em\u003e on an element \u003ci\u003eE\u003c/i\u003e if either: \n  \u003cul\u003e \n   \u003cli\u003e\u003ci\u003eA\u003c/i\u003e is directly present on \u003ci\u003eE\u003c/i\u003e; or \u003c/li\u003e\n   \u003cli\u003eNo annotation of \u003ci\u003eA\u003c/i\u003e \u0027s type is directly present on \u003ci\u003eE\u003c/i\u003e, and \u003ci\u003eE\u003c/i\u003e is a class, and \u003ci\u003eA\u003c/i\u003e \u0027s type is inheritable, and \u003ci\u003eA\u003c/i\u003e is present on the superclass of \u003ci\u003eE\u003c/i\u003e. \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n \u003cli\u003eAn annotation \u003ci\u003eA\u003c/i\u003e is \u003cem\u003eassociated\u003c/em\u003e with an element \u003ci\u003eE\u003c/i\u003e if either: \n  \u003cul\u003e \n   \u003cli\u003e\u003ci\u003eA\u003c/i\u003e is directly or indirectly present on \u003ci\u003eE\u003c/i\u003e; or \u003c/li\u003e\n   \u003cli\u003eNo annotation of \u003ci\u003eA\u003c/i\u003e \u0027s type is directly or indirectly present on \u003ci\u003eE\u003c/i\u003e, and \u003ci\u003eE\u003c/i\u003e is a class, and \u003ci\u003eA\u003c/i\u003e\u0027s type is inheritable, and \u003ci\u003eA\u003c/i\u003e is associated with the superclass of \u003ci\u003eE\u003c/i\u003e. \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe table below summarizes which kind of annotation presence different methods in this interface examine. \u003c/p\u003e\n\u003ctable class\u003d\"plain\"\u003e \n \u003ccaption\u003e\n  Overview of kind of presence detected by different AnnotatedElement methods\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" scope\u003d\"col\"\u003eMethod\u003c/th\u003e \n   \u003cth colspan\u003d\"4\" scope\u003d\"col\"\u003eKind of Presence\u003c/th\u003e \n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"col\"\u003eReturn Type\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eSignature\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eDirectly Present\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eIndirectly Present\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003ePresent\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eAssociated\u003c/th\u003e \n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003ctd style\u003d\"text-align:right\"\u003e\u003ccode\u003eT\u003c/code\u003e\u003c/td\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u003ca href\u003d\"#getAnnotation(java.lang.Class)\"\u003e\u003ccode\u003egetAnnotation(Class\u0026lt;T\u0026gt;)\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center\"\u003eX\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003ctd style\u003d\"text-align:right\"\u003e\u003ccode\u003eAnnotation[]\u003c/code\u003e\u003c/td\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u003ca href\u003d\"#getAnnotations()\"\u003e\u003ccode\u003egetAnnotations()\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center\"\u003eX\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003ctd style\u003d\"text-align:right\"\u003e\u003ccode\u003eT[]\u003c/code\u003e\u003c/td\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u003ca href\u003d\"#getAnnotationsByType(java.lang.Class)\"\u003e\u003ccode\u003egetAnnotationsByType(Class\u0026lt;T\u0026gt;)\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center\"\u003eX\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003ctd style\u003d\"text-align:right\"\u003e\u003ccode\u003eT\u003c/code\u003e\u003c/td\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u003ca href\u003d\"#getDeclaredAnnotation(java.lang.Class)\"\u003e\u003ccode\u003egetDeclaredAnnotation(Class\u0026lt;T\u0026gt;)\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"text-align:center\"\u003eX\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003ctd style\u003d\"text-align:right\"\u003e\u003ccode\u003eAnnotation[]\u003c/code\u003e\u003c/td\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u003ca href\u003d\"#getDeclaredAnnotations()\"\u003e\u003ccode\u003egetDeclaredAnnotations()\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"text-align:center\"\u003eX\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003ctd style\u003d\"text-align:right\"\u003e\u003ccode\u003eT[]\u003c/code\u003e\u003c/td\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"font-weight:normal; text-align:left\"\u003e\u003ca href\u003d\"#getDeclaredAnnotationsByType(java.lang.Class)\"\u003e\u003ccode\u003egetDeclaredAnnotationsByType(Class\u0026lt;T\u0026gt;)\u003c/code\u003e\u003c/a\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"text-align:center\"\u003eX\u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center\"\u003eX\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e\n   \u003ctd\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eFor an invocation of \u003ccode\u003eget[Declared]AnnotationsByType(Class \u0026lt;T\u0026gt;)\u003c/code\u003e, the order of annotations which are directly or indirectly present on an element \u003ci\u003eE\u003c/i\u003e is computed as if indirectly present annotations on \u003ci\u003eE\u003c/i\u003e are directly present on \u003ci\u003eE\u003c/i\u003e in place of their container annotation, in the order in which they appear in the value element of the container annotation. \u003c/p\u003e\n\u003cp\u003eThere are several compatibility concerns to keep in mind if an annotation type \u003ci\u003eT\u003c/i\u003e is originally \u003cem\u003enot\u003c/em\u003e repeatable and later modified to be repeatable. The containing annotation type for \u003ci\u003eT\u003c/i\u003e is \u003ci\u003eTC\u003c/i\u003e. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eModifying \u003ci\u003eT\u003c/i\u003e to be repeatable is source and binary compatible with existing uses of \u003ci\u003eT\u003c/i\u003e and with existing uses of \u003ci\u003eTC\u003c/i\u003e. That is, for source compatibility, source code with annotations of type \u003ci\u003eT\u003c/i\u003e or of type \u003ci\u003eTC\u003c/i\u003e will still compile. For binary compatibility, class files with annotations of type \u003ci\u003eT\u003c/i\u003e or of type \u003ci\u003eTC\u003c/i\u003e (or with other kinds of uses of type \u003ci\u003eT\u003c/i\u003e or of type \u003ci\u003eTC\u003c/i\u003e) will link against the modified version of \u003ci\u003eT\u003c/i\u003e if they linked against the earlier version. (An annotation type \u003ci\u003eTC\u003c/i\u003e may informally serve as an acting containing annotation type before \u003ci\u003eT\u003c/i\u003e is modified to be formally repeatable. Alternatively, when \u003ci\u003eT\u003c/i\u003e is made repeatable, \u003ci\u003eTC\u003c/i\u003e can be introduced as a new type.) \u003c/li\u003e\n \u003cli\u003eIf an annotation type \u003ci\u003eTC\u003c/i\u003e is present on an element, and \u003ci\u003eT\u003c/i\u003e is modified to be repeatable with \u003ci\u003eTC\u003c/i\u003e as its containing annotation type then: \n  \u003cul\u003e \n   \u003cli\u003eThe change to \u003ci\u003eT\u003c/i\u003e is behaviorally compatible with respect to the \u003ccode\u003eget[Declared]Annotation(Class\u0026lt;T\u0026gt;)\u003c/code\u003e (called with an argument of \u003ci\u003eT\u003c/i\u003e or \u003ci\u003eTC\u003c/i\u003e) and \u003ccode\u003e get[Declared]Annotations()\u003c/code\u003e methods because the results of the methods will not change due to \u003ci\u003eTC\u003c/i\u003e becoming the containing annotation type for \u003ci\u003eT\u003c/i\u003e. \u003c/li\u003e\n   \u003cli\u003eThe change to \u003ci\u003eT\u003c/i\u003e changes the results of the \u003ccode\u003e get[Declared]AnnotationsByType(Class\u0026lt;T\u0026gt;)\u003c/code\u003e methods called with an argument of \u003ci\u003eT\u003c/i\u003e, because those methods will now recognize an annotation of type \u003ci\u003eTC\u003c/i\u003e as a container annotation for \u003ci\u003eT\u003c/i\u003e and will \"look through\" it to expose annotations of type \u003ci\u003eT\u003c/i\u003e. \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n \u003cli\u003eIf an annotation of type \u003ci\u003eT\u003c/i\u003e is present on an element and \u003ci\u003eT\u003c/i\u003e is made repeatable and more annotations of type \u003ci\u003eT\u003c/i\u003e are added to the element: \n  \u003cul\u003e \n   \u003cli\u003e The addition of the annotations of type \u003ci\u003eT\u003c/i\u003e is both source compatible and binary compatible. \u003c/li\u003e\n   \u003cli\u003eThe addition of the annotations of type \u003ci\u003eT\u003c/i\u003e changes the results of the \u003ccode\u003eget[Declared]Annotation(Class\u0026lt;T\u0026gt;)\u003c/code\u003e methods and \u003ccode\u003e get[Declared]Annotations()\u003c/code\u003e methods, because those methods will now only see a container annotation on the element and not see an annotation of type \u003ci\u003eT\u003c/i\u003e. \u003c/li\u003e\n   \u003cli\u003eThe addition of the annotations of type \u003ci\u003eT\u003c/i\u003e changes the results of the \u003ccode\u003eget[Declared]AnnotationsByType(Class\u0026lt;T\u0026gt;)\u003c/code\u003e methods, because their results will expose the additional annotations of type \u003ci\u003eT\u003c/i\u003e whereas previously they exposed only a single annotation of type \u003ci\u003eT\u003c/i\u003e. \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIf an annotation returned by a method in this interface contains (directly or indirectly) a \u003ca href\u003d\"../Class.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClass\u003c/code\u003e\u003c/a\u003e-valued member referring to a class that is not accessible in this VM, attempting to read the class by calling the relevant Class-returning method on the returned annotation will result in a \u003ca href\u003d\"../TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eTypeNotPresentException\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003eSimilarly, attempting to read an enum-valued member will result in a \u003ca href\u003d\"../EnumConstantNotPresentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eEnumConstantNotPresentException\u003c/code\u003e\u003c/a\u003e if the enum constant in the annotation is no longer present in the enum class. \u003c/p\u003e\n\u003cp\u003eIf an annotation type \u003ci\u003eT\u003c/i\u003e is (meta-)annotated with an \u003ccode\u003e@Repeatable\u003c/code\u003e annotation whose value element indicates a type \u003ci\u003eTC\u003c/i\u003e, but \u003ci\u003eTC\u003c/i\u003e does not declare a \u003ccode\u003evalue()\u003c/code\u003e method with a return type of \u003ci\u003eT\u003c/i\u003e\u003ccode\u003e[]\u003c/code\u003e, then an exception of type \u003ca href\u003d\"../annotation/AnnotationFormatError.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eAnnotationFormatError\u003c/code\u003e\u003c/a\u003e is thrown. \u003c/p\u003e\n\u003cp\u003eFinally, attempting to read a member whose definition has evolved incompatibly will result in a \u003ca href\u003d\"../annotation/AnnotationTypeMismatchException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eAnnotationTypeMismatchException\u003c/code\u003e\u003c/a\u003e or an \u003ca href\u003d\"../annotation/IncompleteAnnotationException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eIncompleteAnnotationException\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/EnumConstantNotPresentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eEnumConstantNotPresentException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/TypeNotPresentException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eTypeNotPresentException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/AnnotationFormatError.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eAnnotationFormatError\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/AnnotationTypeMismatchException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eAnnotationTypeMismatchException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/annotation/IncompleteAnnotationException.html\" title\u003d\"class in java.lang.annotation\"\u003e\u003ccode\u003eIncompleteAnnotationException\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}