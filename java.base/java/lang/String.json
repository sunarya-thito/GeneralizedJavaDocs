{
  "packageName": "java.lang",
  "simpleName": "String",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CASE_INSENSITIVE_ORDER",
      "comment": "A Comparator that orders String objects as by compareToIgnoreCase. This comparator is serializable. Note that this Comparator does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The Collator class provides locale-sensitive comparison.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollator\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "length",
      "comment": "Returns the length of this string. The length is equal to the number of Unicode code units in the string.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#length()\"\u003elength\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the length of the sequence of characters represented by this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEmpty",
      "comment": "Returns true if, and only if, length() is 0.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#isEmpty()\"\u003eisEmpty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#length()\"\u003e\u003ccode\u003elength()\u003c/code\u003e\u003c/a\u003e is \n\u003ccode\u003e0\u003c/code\u003e, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "charAt",
      "comment": "Returns the char value at the specified index. An index ranges from 0 to length() - 1. The first char value of the sequence is at index 0, the next at index 1, and so on, as for array indexing. If the char value specified by the index is a surrogate, the surrogate value is returned.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#charAt(int)\"\u003echarAt\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the \n\u003ccode\u003echar\u003c/code\u003e value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e argument is negative or not less than the length of this string."
        ],
        "return": [
          "the \n\u003ccode\u003echar\u003c/code\u003e value at the specified index of this string. The first \n\u003ccode\u003echar\u003c/code\u003e value is at index \n\u003ccode\u003e0\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "codePointAt",
      "comment": "Returns the character (Unicode code point) at the specified index. The index refers to char values (Unicode code units) and ranges from 0 to length() - 1. If the char value specified at the given index is in the high-surrogate range, the following index is less than the length of this String, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index to the \n\u003ccode\u003echar\u003c/code\u003e values"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e argument is negative or not less than the length of this string."
        ],
        "return": [
          "the code point value of the character at the \n\u003ccode\u003eindex\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "codePointBefore",
      "comment": "Returns the character (Unicode code point) before the specified index. The index refers to char values (Unicode code units) and ranges from 1 to length. If the char value at (index - 1) is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the char value at index - 1 is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index following the code point that should be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e argument is less than 1 or greater than the length of this string."
        ],
        "return": [
          "the Unicode code point value before the given index."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "beginIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "endIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "codePointCount",
      "comment": "Returns the number of Unicode code points in the specified text range of this String. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within the text range count as one code point each.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the index to the first \n\u003ccode\u003echar\u003c/code\u003e of the text range.",
          "\u003ccode\u003eendIndex\u003c/code\u003e - the index after the last \n\u003ccode\u003echar\u003c/code\u003e of the text range."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ebeginIndex\u003c/code\u003e is negative, or \n\u003ccode\u003eendIndex\u003c/code\u003e is larger than the length of this \n\u003ccode\u003eString\u003c/code\u003e, or \n\u003ccode\u003ebeginIndex\u003c/code\u003e is larger than \n\u003ccode\u003eendIndex\u003c/code\u003e."
        ],
        "return": [
          "the number of Unicode code points in the specified text range"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "codePointOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "offsetByCodePoints",
      "comment": "Returns the index within this String that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index to be offset",
          "\u003ccode\u003ecodePointOffset\u003c/code\u003e - the offset in code points"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eindex\u003c/code\u003e is negative or larger then the length of this \n\u003ccode\u003eString\u003c/code\u003e, or if \n\u003ccode\u003ecodePointOffset\u003c/code\u003e is positive and the substring starting with \n\u003ccode\u003eindex\u003c/code\u003e has fewer than \n\u003ccode\u003ecodePointOffset\u003c/code\u003e code points, or if \n\u003ccode\u003ecodePointOffset\u003c/code\u003e is negative and the substring before \n\u003ccode\u003eindex\u003c/code\u003e has fewer than the absolute value of \n\u003ccode\u003ecodePointOffset\u003c/code\u003e code points."
        ],
        "return": [
          "the index within this \n\u003ccode\u003eString\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "srcBegin"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "srcEnd"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "dst"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dstBegin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChars",
      "comment": "Copies characters from this string into the destination character array. The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1 (thus the total number of characters to be copied is srcEnd-srcBegin). The characters are copied into the subarray of dst starting at index dstBegin and ending at index:      dstBegin + (srcEnd-srcBegin) - 1",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrcBegin\u003c/code\u003e - index of the first character in the string to copy.",
          "\u003ccode\u003esrcEnd\u003c/code\u003e - index after the last character in the string to copy.",
          "\u003ccode\u003edst\u003c/code\u003e - the destination array.",
          "\u003ccode\u003edstBegin\u003c/code\u003e - the start offset in the destination array."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If any of the following is true: \n\u003cul\u003e\n \u003cli\u003e\u003ccode\u003esrcBegin\u003c/code\u003e is negative. \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003esrcBegin\u003c/code\u003e is greater than \u003ccode\u003esrcEnd\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003esrcEnd\u003c/code\u003e is greater than the length of this string \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003edstBegin\u003c/code\u003e is negative \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003edstBegin+(srcEnd-srcBegin)\u003c/code\u003e is larger than \u003ccode\u003edst.length\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "srcBegin"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "srcEnd"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "dst"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dstBegin"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBytes",
      "comment": "Copies characters from this string into the destination byte array. Each byte receives the 8 low-order bits of the corresponding character. The eight high-order bits of each character are not copied and do not participate in the transfer in any way. The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1. The total number of characters to be copied is srcEnd-srcBegin. The characters, converted to bytes, are copied into the subarray of dst starting at index dstBegin and ending at index:      dstBegin + (srcEnd-srcBegin) - 1",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "1.1"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003esrcBegin\u003c/code\u003e - Index of the first character in the string to copy",
          "\u003ccode\u003esrcEnd\u003c/code\u003e - Index after the last character in the string to copy",
          "\u003ccode\u003edst\u003c/code\u003e - The destination array",
          "\u003ccode\u003edstBegin\u003c/code\u003e - The start offset in the destination array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If any of the following is true: \n\u003cul\u003e \n \u003cli\u003e \u003ccode\u003esrcBegin\u003c/code\u003e is negative \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003esrcBegin\u003c/code\u003e is greater than \u003ccode\u003esrcEnd\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003esrcEnd\u003c/code\u003e is greater than the length of this String \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003edstBegin\u003c/code\u003e is negative \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003edstBegin+(srcEnd-srcBegin)\u003c/code\u003e is larger than \u003ccode\u003e dst.length\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "throwsClasses": [
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "charsetName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBytes",
      "comment": "Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the given charset is unspecified. The CharsetEncoder class should be used when more control over the encoding process is required.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echarsetName\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named charset is not supported"
        ],
        "return": [
          "The resultant byte array"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBytes",
      "comment": "Encodes this String into a sequence of bytes using the given charset, storing the result into a new byte array. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement byte array. The CharsetEncoder class should be used when more control over the encoding process is required.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echarset\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003eCharset\u003c/a\u003e to be used to encode the \n\u003ccode\u003eString\u003c/code\u003e"
        ],
        "return": [
          "The resultant byte array"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBytes",
      "comment": "Encodes this String into a sequence of bytes using the platform\u0027s default charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the default charset is unspecified. The CharsetEncoder class should be used when more control over the encoding process is required.",
      "tagMap": {
        "return": [
          "The resultant byte array"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "anObject"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this string to the specified object. The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this object. For finer-grained String comparison, refer to Collator.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#compareTo(java.lang.String)\"\u003e\u003ccode\u003ecompareTo(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#equalsIgnoreCase(java.lang.String)\"\u003e\u003ccode\u003eequalsIgnoreCase(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eanObject\u003c/code\u003e - The object to compare this \n\u003ccode\u003eString\u003c/code\u003e against"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given object represents a \n\u003ccode\u003eString\u003c/code\u003e equivalent to this string, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "field": {
            "name": "sb"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contentEquals",
      "comment": "Compares this string to the specified StringBuffer. The result is true if and only if this String represents the same sequence of characters as the specified StringBuffer. This method synchronizes on the StringBuffer. For finer-grained String comparison, refer to Collator.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esb\u003c/code\u003e - The \n\u003ccode\u003eStringBuffer\u003c/code\u003e to compare this \n\u003ccode\u003eString\u003c/code\u003e against"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eString\u003c/code\u003e represents the same sequence of characters as the specified \n\u003ccode\u003eStringBuffer\u003c/code\u003e, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "cs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contentEquals",
      "comment": "Compares this string to the specified CharSequence. The result is true if and only if this String represents the same sequence of char values as the specified sequence. Note that if the CharSequence is a StringBuffer then the method synchronizes on it. For finer-grained String comparison, refer to Collator.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecs\u003c/code\u003e - The sequence to compare this \n\u003ccode\u003eString\u003c/code\u003e against"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eString\u003c/code\u003e represents the same sequence of char values as the specified sequence, \n\u003ccode\u003e false\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "anotherString"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equalsIgnoreCase",
      "comment": "Compares this String to another String, ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding Unicode code points in the two strings are equal ignoring case. Two Unicode code points are considered the same ignoring case if at least one of the following is true: The two Unicode code points are the same (as compared by the \u003d\u003d operator) Calling Character.toLowerCase(Character.toUpperCase(int)) on each Unicode code point produces the same result Note that this method does not take locale into account, and will result in unsatisfactory results for certain locales. The Collator class provides locale-sensitive comparison.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#codePoints()\"\u003e\u003ccode\u003ecodePoints()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eanotherString\u003c/code\u003e - The \n\u003ccode\u003eString\u003c/code\u003e to compare this \n\u003ccode\u003eString\u003c/code\u003e against"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the argument is not \n\u003ccode\u003enull\u003c/code\u003e and it represents an equivalent \n\u003ccode\u003eString\u003c/code\u003e ignoring case; \n\u003ccode\u003e false\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "anotherString"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by this String object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this String object lexicographically precedes the argument string. The result is a positive integer if this String object lexicographically follows the argument string. The result is zero if the strings are equal; compareTo returns 0 exactly when the equals(Object) method would return true. This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let k be the smallest such index; then the string whose character at position k has the smaller value, as determined by using the \u003c operator, lexicographically precedes the other string. In this case, compareTo returns the difference of the two character values at position k in the two string -- that is, the value:  this.charAt(k)-anotherString.charAt(k)\n If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, compareTo returns the difference of the lengths of the strings -- that is, the value:  this.length()-anotherString.length()\n For finer-grained String comparison, refer to Collator.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html\" title\u003d\"class in java.lang\"\u003eString\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eanotherString\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to be compared."
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if the argument string is equal to this string; a value less than \n\u003ccode\u003e0\u003c/code\u003e if this string is lexicographically less than the string argument; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if this string is lexicographically greater than the string argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareToIgnoreCase",
      "comment": "Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of calling compareTo with case folded versions of the strings where case differences have been eliminated by calling Character.toLowerCase(Character.toUpperCase(int)) on each Unicode code point. Note that this method does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The Collator class provides locale-sensitive comparison.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#codePoints()\"\u003e\u003ccode\u003ecodePoints()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to be compared."
        ],
        "return": [
          "a negative integer, zero, or a positive integer as the specified String is greater than, equal to, or less than this String, ignoring case considerations."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "toffset"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ooffset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "regionMatches",
      "comment": "Tests if two string regions are equal. A substring of this String object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this String object to be compared begins at index toffset and has length len. The substring of other to be compared begins at index ooffset and has length len. The result is false if and only if at least one of the following is true: toffset is negative. ooffset is negative. toffset+len is greater than the length of this String object. ooffset+len is greater than the length of the other argument. There is some nonnegative integer k less than len such that: this.charAt(toffset + k) !\u003d other.charAt(ooffset + k) Note that this method does not take locale into account. The Collator class provides locale-sensitive comparison.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etoffset\u003c/code\u003e - the starting offset of the subregion in this string.",
          "\u003ccode\u003eother\u003c/code\u003e - the string argument.",
          "\u003ccode\u003eooffset\u003c/code\u003e - the starting offset of the subregion in the string argument.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of characters to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified subregion of this string exactly matches the specified subregion of the string argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "ignoreCase"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "toffset"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ooffset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "regionMatches",
      "comment": "Tests if two string regions are equal. A substring of this String object is compared to a substring of the argument other. The result is true if these substrings represent Unicode code point sequences that are the same, ignoring case if and only if ignoreCase is true. The sequences tsequence and osequence are compared, where tsequence is the sequence produced as if by calling this.substring(toffset, len).codePoints() and osequence is the sequence produced as if by calling other.substring(ooffset, len).codePoints(). The result is true if and only if all of the following are true: toffset is non-negative. ooffset is non-negative. toffset+len is less than or equal to the length of this String object. ooffset+len is less than or equal to the length of the other argument. if ignoreCase is false, all pairs of corresponding Unicode code points are equal integer values; or if ignoreCase is true, Character.toLowerCase( Character.toUpperCase(int)) on all pairs of Unicode code points results in equal integer values. Note that this method does not take locale into account, and will result in unsatisfactory results for certain locales when ignoreCase is true. The Collator class provides locale-sensitive comparison.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#codePoints()\"\u003e\u003ccode\u003ecodePoints()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eignoreCase\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, ignore case when comparing characters.",
          "\u003ccode\u003etoffset\u003c/code\u003e - the starting offset of the subregion in this string.",
          "\u003ccode\u003eother\u003c/code\u003e - the string argument.",
          "\u003ccode\u003eooffset\u003c/code\u003e - the starting offset of the subregion in the string argument.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of characters (Unicode code units - 16bit \n\u003ccode\u003echar\u003c/code\u003e value) to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified subregion of this string matches the specified subregion of the string argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise. Whether the matching is exact or case insensitive depends on the \n\u003ccode\u003eignoreCase\u003c/code\u003e argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "toffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "startsWith",
      "comment": "Tests if the substring of this string beginning at the specified index starts with the specified prefix.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix.",
          "\u003ccode\u003etoffset\u003c/code\u003e - where to begin looking in this string."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character sequence represented by the argument is a prefix of the substring of this object starting at index \n\u003ccode\u003etoffset\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise. The result is \n\u003ccode\u003efalse\u003c/code\u003e if \n\u003ccode\u003etoffset\u003c/code\u003e is negative or greater than the length of this \n\u003ccode\u003eString\u003c/code\u003e object; otherwise the result is the same as the result of the expression \n\u003cpre\u003e          this.substring(toffset).startsWith(prefix)\n          \u003c/pre\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "startsWith",
      "comment": "Tests if this string starts with the specified prefix.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character sequence represented by the argument is a prefix of the character sequence represented by this string; \n\u003ccode\u003efalse\u003c/code\u003e otherwise. Note also that \n\u003ccode\u003etrue\u003c/code\u003e will be returned if the argument is an empty string or is equal to this \n\u003ccode\u003eString\u003c/code\u003e object as determined by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(Object)\u003c/code\u003e\u003c/a\u003e method."
        ],
        "since": [
          "1.0"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "suffix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "endsWith",
      "comment": "Tests if this string ends with the specified suffix.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esuffix\u003c/code\u003e - the suffix."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the character sequence represented by the argument is a suffix of the character sequence represented by this object; \n\u003ccode\u003efalse\u003c/code\u003e otherwise. Note that the result will be \n\u003ccode\u003etrue\u003c/code\u003e if the argument is the empty string or is equal to this \n\u003ccode\u003eString\u003c/code\u003e object as determined by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(Object)\u003c/code\u003e\u003c/a\u003e method."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code for this string. The hash code for a String object is computed as  s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n using int arithmetic, where s[i] is the ith character of the string, n is the length of the string, and ^ indicates exponentiation. (The hash value of the empty string is zero.)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ch"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "indexOf",
      "comment": "Returns the index within this string of the first occurrence of the specified character. If a character with value ch occurs in the character sequence represented by this String object, then the index (in Unicode code units) of the first such occurrence is returned. For values of ch in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that:  this.charAt(k) \u003d\u003d ch\n is true. For other values of ch, it is the smallest value k such that:  this.codePointAt(k) \u003d\u003d ch\n is true. In either case, if no such character occurs in this string, then -1 is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - a character (Unicode code point)."
        ],
        "return": [
          "the index of the first occurrence of the character in the character sequence represented by this object, or \n\u003ccode\u003e-1\u003c/code\u003e if the character does not occur."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ch"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "indexOf",
      "comment": "Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index. If a character with value ch occurs in the character sequence represented by this String object at an index no smaller than fromIndex, then the index of the first such occurrence is returned. For values of ch in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that:  (this.charAt(k) \u003d\u003d ch) \u0026\u0026 (k \u003e\u003d fromIndex)\n is true. For other values of ch, it is the smallest value k such that:  (this.codePointAt(k) \u003d\u003d ch) \u0026\u0026 (k \u003e\u003d fromIndex)\n is true. In either case, if no such character occurs in this string at or after position fromIndex, then -1 is returned. There is no restriction on the value of fromIndex. If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: -1 is returned. All indices are specified in char values (Unicode code units).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - a character (Unicode code point).",
          "\u003ccode\u003efromIndex\u003c/code\u003e - the index to start the search from."
        ],
        "return": [
          "the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to \n\u003ccode\u003efromIndex\u003c/code\u003e, or \n\u003ccode\u003e-1\u003c/code\u003e if the character does not occur."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ch"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lastIndexOf",
      "comment": "Returns the index within this string of the last occurrence of the specified character. For values of ch in the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest value k such that:  this.charAt(k) \u003d\u003d ch\n is true. For other values of ch, it is the largest value k such that:  this.codePointAt(k) \u003d\u003d ch\n is true. In either case, if no such character occurs in this string, then -1 is returned. The String is searched backwards starting at the last character.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - a character (Unicode code point)."
        ],
        "return": [
          "the index of the last occurrence of the character in the character sequence represented by this object, or \n\u003ccode\u003e-1\u003c/code\u003e if the character does not occur."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "ch"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lastIndexOf",
      "comment": "Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. For values of ch in the range from 0 to 0xFFFF (inclusive), the index returned is the largest value k such that:  (this.charAt(k) \u003d\u003d ch) \u0026\u0026 (k \u003c\u003d fromIndex)\n is true. For other values of ch, it is the largest value k such that:  (this.codePointAt(k) \u003d\u003d ch) \u0026\u0026 (k \u003c\u003d fromIndex)\n is true. In either case, if no such character occurs in this string at or before position fromIndex, then -1 is returned. All indices are specified in char values (Unicode code units).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - a character (Unicode code point).",
          "\u003ccode\u003efromIndex\u003c/code\u003e - the index to start the search from. There is no restriction on the value of \n\u003ccode\u003efromIndex\u003c/code\u003e. If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned."
        ],
        "return": [
          "the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to \n\u003ccode\u003efromIndex\u003c/code\u003e, or \n\u003ccode\u003e-1\u003c/code\u003e if the character does not occur before that point."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "indexOf",
      "comment": "Returns the index within this string of the first occurrence of the specified substring. The returned index is the smallest value k for which: \n this.startsWith(str, k)\n If no such value of k exists, then -1 is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the substring to search for."
        ],
        "return": [
          "the index of the first occurrence of the specified substring, or \n\u003ccode\u003e-1\u003c/code\u003e if there is no such occurrence."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "indexOf",
      "comment": "Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The returned index is the smallest value k for which: \n     k \u003e\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n                   this.startsWith(str, k)\n If no such value of k exists, then -1 is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the substring to search for.",
          "\u003ccode\u003efromIndex\u003c/code\u003e - the index from which to start the search."
        ],
        "return": [
          "the index of the first occurrence of the specified substring, starting at the specified index, or \n\u003ccode\u003e-1\u003c/code\u003e if there is no such occurrence."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lastIndexOf",
      "comment": "Returns the index within this string of the last occurrence of the specified substring. The last occurrence of the empty string \"\" is considered to occur at the index value this.length(). The returned index is the largest value k for which: \n this.startsWith(str, k)\n If no such value of k exists, then -1 is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the substring to search for."
        ],
        "return": [
          "the index of the last occurrence of the specified substring, or \n\u003ccode\u003e-1\u003c/code\u003e if there is no such occurrence."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lastIndexOf",
      "comment": "Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index. The returned index is the largest value k for which: \n     k \u003c\u003d Math.min(fromIndex, this.length()) \u0026\u0026\n                   this.startsWith(str, k)\n If no such value of k exists, then -1 is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the substring to search for.",
          "\u003ccode\u003efromIndex\u003c/code\u003e - the index to start the search from."
        ],
        "return": [
          "the index of the last occurrence of the specified substring, searching backward from the specified index, or \n\u003ccode\u003e-1\u003c/code\u003e if there is no such occurrence."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "beginIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "substring",
      "comment": "Returns a string that is a substring of this string. The substring begins with the character at the specified index and extends to the end of this string. Examples:  \"unhappy\".substring(2) returns \"happy\"\n \"Harbison\".substring(3) returns \"bison\"\n \"emptiness\".substring(9) returns \"\" (an empty string)",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the beginning index, inclusive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebeginIndex\u003c/code\u003e is negative or larger than the length of this \n\u003ccode\u003eString\u003c/code\u003e object."
        ],
        "return": [
          "the specified substring."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "beginIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "endIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "substring",
      "comment": "Returns a string that is a substring of this string. The substring begins at the specified beginIndex and extends to the character at index endIndex - 1. Thus the length of the substring is endIndex-beginIndex. Examples:  \"hamburger\".substring(4, 8) returns \"urge\"\n \"smiles\".substring(1, 5) returns \"mile\"",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the beginning index, inclusive.",
          "\u003ccode\u003eendIndex\u003c/code\u003e - the ending index, exclusive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ebeginIndex\u003c/code\u003e is negative, or \n\u003ccode\u003eendIndex\u003c/code\u003e is larger than the length of this \n\u003ccode\u003eString\u003c/code\u003e object, or \n\u003ccode\u003ebeginIndex\u003c/code\u003e is larger than \n\u003ccode\u003eendIndex\u003c/code\u003e."
        ],
        "return": [
          "the specified substring."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.CharSequence",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "beginIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "endIndex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subSequence",
      "comment": "Returns a character sequence that is a subsequence of this sequence. An invocation of this method of the form  str.subSequence(begin, end) behaves in exactly the same way as the invocation  str.substring(begin, end)",
      "tagMap": {
        "apiNote": [
          "This method is defined so that the \n\u003ccode\u003eString\u003c/code\u003e class can implement the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCharSequence\u003c/code\u003e\u003c/a\u003e interface."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#subSequence(int,int)\"\u003esubSequence\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the begin index, inclusive.",
          "\u003ccode\u003eendIndex\u003c/code\u003e - the end index, exclusive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebeginIndex\u003c/code\u003e or \n\u003ccode\u003eendIndex\u003c/code\u003e is negative, if \n\u003ccode\u003eendIndex\u003c/code\u003e is greater than \n\u003ccode\u003elength()\u003c/code\u003e, or if \n\u003ccode\u003ebeginIndex\u003c/code\u003e is greater than \n\u003ccode\u003eendIndex\u003c/code\u003e"
        ],
        "return": [
          "the specified subsequence."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "concat",
      "comment": "Concatenates the specified string to the end of this string. If the length of the argument string is 0, then this String object is returned. Otherwise, a String object is returned that represents a character sequence that is the concatenation of the character sequence represented by this String object and the character sequence represented by the argument string. Examples:  \"cares\".concat(\"s\") returns \"caress\"\n \"to\".concat(\"get\").concat(\"her\") returns \"together\"",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e that is concatenated to the end of this \n\u003ccode\u003eString\u003c/code\u003e."
        ],
        "return": [
          "a string that represents the concatenation of this object\u0027s characters followed by the string argument\u0027s characters."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "oldChar"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "newChar"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Returns a string resulting from replacing all occurrences of oldChar in this string with newChar. If the character oldChar does not occur in the character sequence represented by this String object, then a reference to this String object is returned. Otherwise, a String object is returned that represents a character sequence identical to the character sequence represented by this String object, except that every occurrence of oldChar is replaced by an occurrence of newChar. Examples:  \"mesquite in your cellar\".replace(\u0027e\u0027, \u0027o\u0027)\n         returns \"mosquito in your collar\"\n \"the war of baronets\".replace(\u0027r\u0027, \u0027y\u0027)\n         returns \"the way of bayonets\"\n \"sparring with a purple porpoise\".replace(\u0027p\u0027, \u0027t\u0027)\n         returns \"starring with a turtle tortoise\"\n \"JonL\".replace(\u0027q\u0027, \u0027x\u0027) returns \"JonL\" (no change)",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoldChar\u003c/code\u003e - the old character.",
          "\u003ccode\u003enewChar\u003c/code\u003e - the new character."
        ],
        "return": [
          "a string derived from this string by replacing every occurrence of \n\u003ccode\u003eoldChar\u003c/code\u003e with \n\u003ccode\u003enewChar\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "regex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "matches",
      "comment": "Tells whether or not this string matches the given regular expression. An invocation of this method of the form str.matches(regex) yields exactly the same result as the expression Pattern.matches(regex, str)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html\" title\u003d\"class in java.util.regex\"\u003e\u003ccode\u003ePattern\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eregex\u003c/code\u003e - the regular expression to which this string is to be matched"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/PatternSyntaxException.html\" title\u003d\"class in java.util.regex\"\u003ePatternSyntaxException\u003c/a\u003e\u003c/code\u003e - if the regular expression\u0027s syntax is invalid"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this string matches the given regular expression"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Returns true if and only if this string contains the specified sequence of char values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the sequence to search for"
        ],
        "return": [
          "true if this string contains \n\u003ccode\u003es\u003c/code\u003e, false otherwise"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "regex"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "replacement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replaceFirst",
      "comment": "Replaces the first substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str.replaceFirst(regex, repl) yields exactly the same result as the expression Pattern.compile(regex).matcher(str).replaceFirst(repl) Note that backslashes (\\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see Matcher.replaceFirst(java.lang.String). Use Matcher.quoteReplacement(java.lang.String) to suppress the special meaning of these characters, if desired.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html\" title\u003d\"class in java.util.regex\"\u003e\u003ccode\u003ePattern\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eregex\u003c/code\u003e - the regular expression to which this string is to be matched",
          "\u003ccode\u003ereplacement\u003c/code\u003e - the string to be substituted for the first match"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/PatternSyntaxException.html\" title\u003d\"class in java.util.regex\"\u003ePatternSyntaxException\u003c/a\u003e\u003c/code\u003e - if the regular expression\u0027s syntax is invalid"
        ],
        "return": [
          "The resulting \n\u003ccode\u003eString\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "regex"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "replacement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replaceAll",
      "comment": "Replaces each substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str.replaceAll(regex, repl) yields exactly the same result as the expression Pattern.compile(regex).matcher(str).replaceAll(repl) Note that backslashes (\\) and dollar signs ($) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see Matcher.replaceAll. Use Matcher.quoteReplacement(java.lang.String) to suppress the special meaning of these characters, if desired.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html\" title\u003d\"class in java.util.regex\"\u003e\u003ccode\u003ePattern\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eregex\u003c/code\u003e - the regular expression to which this string is to be matched",
          "\u003ccode\u003ereplacement\u003c/code\u003e - the string to be substituted for each match"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/PatternSyntaxException.html\" title\u003d\"class in java.util.regex\"\u003ePatternSyntaxException\u003c/a\u003e\u003c/code\u003e - if the regular expression\u0027s syntax is invalid"
        ],
        "return": [
          "The resulting \n\u003ccode\u003eString\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "replacement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in \"ba\" rather than \"ab\".",
      "tagMap": {
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - The sequence of char values to be replaced",
          "\u003ccode\u003ereplacement\u003c/code\u003e - The replacement sequence of char values"
        ],
        "return": [
          "The resulting string"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "regex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "limit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "split",
      "comment": "Splits this string around matches of the given regular expression. The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. If the expression does not match any part of the input then the resulting array has just one element, namely this string. When there is a positive-width match at the beginning of this string then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring. The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit is positive then the pattern will be applied at most limit - 1 times, the array\u0027s length will be no greater than limit, and the array\u0027s last entry will contain all input beyond the last matched delimiter. If the limit is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded. If the limit is negative then the pattern will be applied as many times as possible and the array can have any length. The string \"boo:and:foo\", for example, yields the following results with these parameters: Split example showing regex, limit, and result Regex Limit Result : 2 { \"boo\", \"and:foo\" } 5 { \"boo\", \"and\", \"foo\" } -2 { \"boo\", \"and\", \"foo\" } o 5 { \"b\", \"\", \":and:f\", \"\", \"\" } -2 { \"b\", \"\", \":and:f\", \"\", \"\" } 0 { \"b\", \"\", \":and:f\" } An invocation of this method of the form str.split(regex, n) yields the same result as the expression Pattern.compile(regex).split(str, n)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html\" title\u003d\"class in java.util.regex\"\u003e\u003ccode\u003ePattern\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eregex\u003c/code\u003e - the delimiting regular expression",
          "\u003ccode\u003elimit\u003c/code\u003e - the result threshold, as described above"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/PatternSyntaxException.html\" title\u003d\"class in java.util.regex\"\u003ePatternSyntaxException\u003c/a\u003e\u003c/code\u003e - if the regular expression\u0027s syntax is invalid"
        ],
        "return": [
          "the array of strings computed by splitting this string around matches of the given regular expression"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "regex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "split",
      "comment": "Splits this string around matches of the given regular expression. This method works as if by invoking the two-argument split method with the given expression and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array. The string \"boo:and:foo\", for example, yields the following results with these expressions: Split examples showing regex and result Regex Result : { \"boo\", \"and\", \"foo\" } o { \"b\", \"\", \":and:f\" }",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html\" title\u003d\"class in java.util.regex\"\u003e\u003ccode\u003ePattern\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eregex\u003c/code\u003e - the delimiting regular expression"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/PatternSyntaxException.html\" title\u003d\"class in java.util.regex\"\u003ePatternSyntaxException\u003c/a\u003e\u003c/code\u003e - if the regular expression\u0027s syntax is invalid"
        ],
        "return": [
          "the array of strings computed by splitting this string around matches of the given regular expression"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "delimiter"
          }
        },
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "elements"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "join",
      "comment": "Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter. For example, \n     String message \u003d String.join(\"-\", \"Java\", \"is\", \"cool\");\n     // message returned is: \"Java-is-cool\"\n Note that if an element is null, then \"null\" is added.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/StringJoiner.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eStringJoiner\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edelimiter\u003c/code\u003e - the delimiter that separates each element",
          "\u003ccode\u003eelements\u003c/code\u003e - the elements to join together."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003edelimiter\u003c/code\u003e or \n\u003ccode\u003eelements\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eString\u003c/code\u003e that is composed of the \n\u003ccode\u003eelements\u003c/code\u003e separated by the \n\u003ccode\u003edelimiter\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "delimiter"
          }
        },
        {
          "type": {
            "name": "java.lang.Iterable",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.lang.CharSequence",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "elements"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "join",
      "comment": "Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter. For example, \n     List\u003cString\u003e strings \u003d List.of(\"Java\", \"is\", \"cool\");\n     String message \u003d String.join(\" \", strings);\n     // message returned is: \"Java is cool\"\n\n     Set\u003cString\u003e strings \u003d\n         new LinkedHashSet\u003c\u003e(List.of(\"Java\", \"is\", \"very\", \"cool\"));\n     String message \u003d String.join(\"-\", strings);\n     // message returned is: \"Java-is-very-cool\"\n Note that if an individual element is null, then \"null\" is added.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#join(java.lang.CharSequence,java.lang.CharSequence...)\"\u003e\u003ccode\u003ejoin(CharSequence,CharSequence...)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/StringJoiner.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eStringJoiner\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edelimiter\u003c/code\u003e - a sequence of characters that is used to separate each of the \n\u003ccode\u003eelements\u003c/code\u003e in the resulting \n\u003ccode\u003eString\u003c/code\u003e",
          "\u003ccode\u003eelements\u003c/code\u003e - an \n\u003ccode\u003eIterable\u003c/code\u003e that will have its \n\u003ccode\u003eelements\u003c/code\u003e joined together."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003edelimiter\u003c/code\u003e or \n\u003ccode\u003eelements\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a new \n\u003ccode\u003eString\u003c/code\u003e that is composed from the \n\u003ccode\u003eelements\u003c/code\u003e argument"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toLowerCase",
      "comment": "Converts all of the characters in this String to lower case using the rules of the given Locale. Case mapping is based on the Unicode Standard version specified by the Character class. Since case mappings are not always 1:1 char mappings, the resulting String may be a different length than the original String. Examples of lowercase mappings are in the following table: Lowercase mapping examples showing language code of locale, upper case, lower case, and description Language Code of Locale Upper Case Lower Case Description tr (Turkish) \\u0130 \\u0069 capital letter I with dot above -\u003e small letter i tr (Turkish) \\u0049 \\u0131 capital letter I -\u003e small letter dotless i (all) French Fries french fries lowercased all chars in String (all) ΙΧΘΥΣ ιχθυσ lowercased all chars in String",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toLowerCase()\"\u003e\u003ccode\u003etoLowerCase()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toUpperCase()\"\u003e\u003ccode\u003etoUpperCase()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toUpperCase(java.util.Locale)\"\u003e\u003ccode\u003etoUpperCase(Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - use the case transformation rules for this locale"
        ],
        "return": [
          "the \n\u003ccode\u003eString\u003c/code\u003e, converted to lowercase."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toLowerCase",
      "comment": "Converts all of the characters in this String to lower case using the rules of the default locale. This is equivalent to calling toLowerCase(Locale.getDefault()). Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, \"TITLE\".toLowerCase() in a Turkish locale returns \"t\\u0131tle\", where \u0027\\u0131\u0027 is the LATIN SMALL LETTER DOTLESS I character. To obtain correct results for locale insensitive strings, use toLowerCase(Locale.ROOT).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toLowerCase(java.util.Locale)\"\u003e\u003ccode\u003etoLowerCase(Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eString\u003c/code\u003e, converted to lowercase."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toUpperCase",
      "comment": "Converts all of the characters in this String to upper case using the rules of the given Locale. Case mapping is based on the Unicode Standard version specified by the Character class. Since case mappings are not always 1:1 char mappings, the resulting String may be a different length than the original String. Examples of locale-sensitive and 1:M case mappings are in the following table. Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description. Language Code of Locale Lower Case Upper Case Description tr (Turkish) \\u0069 \\u0130 small letter i -\u003e capital letter I with dot above tr (Turkish) \\u0131 \\u0049 small letter dotless i -\u003e capital letter I (all) \\u00df \\u0053 \\u0053 small letter sharp s -\u003e two letters: SS (all) Fahrvergnügen FAHRVERGNÜGEN",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toUpperCase()\"\u003e\u003ccode\u003etoUpperCase()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toLowerCase()\"\u003e\u003ccode\u003etoLowerCase()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toLowerCase(java.util.Locale)\"\u003e\u003ccode\u003etoLowerCase(Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - use the case transformation rules for this locale"
        ],
        "return": [
          "the \n\u003ccode\u003eString\u003c/code\u003e, converted to uppercase."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toUpperCase",
      "comment": "Converts all of the characters in this String to upper case using the rules of the default locale. This method is equivalent to toUpperCase(Locale.getDefault()). Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, \"title\".toUpperCase() in a Turkish locale returns \"T\\u0130TLE\", where \u0027\\u0130\u0027 is the LATIN CAPITAL LETTER I WITH DOT ABOVE character. To obtain correct results for locale insensitive strings, use toUpperCase(Locale.ROOT).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#toUpperCase(java.util.Locale)\"\u003e\u003ccode\u003etoUpperCase(Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eString\u003c/code\u003e, converted to uppercase."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "trim",
      "comment": "Returns a string whose value is this string, with all leading and trailing space removed, where space is defined as any character whose codepoint is less than or equal to \u0027U+0020\u0027 (the space character). If this String object represents an empty character sequence, or the first and last characters of character sequence represented by this String object both have codes that are not space (as defined above), then a reference to this String object is returned. Otherwise, if all characters in this string are space (as defined above), then a String object representing an empty string is returned. Otherwise, let k be the index of the first character in the string whose code is not a space (as defined above) and let m be the index of the last character in the string whose code is not a space (as defined above). A String object is returned, representing the substring of this string that begins with the character at index k and ends with the character at index m-that is, the result of this.substring(k, m + 1). This method may be used to trim space (as defined above) from the beginning and end of a string.",
      "tagMap": {
        "return": [
          "a string whose value is this string, with all leading and trailing space removed, or this string if it has no leading or trailing space."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "strip",
      "comment": "Returns a string whose value is this string, with all leading and trailing white space removed. If this String object represents an empty string, or if all code points in this string are white space, then an empty string is returned. Otherwise, returns a substring of this string beginning with the first code point that is not a white space up to and including the last code point that is not a white space. This method may be used to strip white space from the beginning and end of a string.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003e\u003ccode\u003eCharacter.isWhitespace(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a string whose value is this string, with all leading and trailing white space removed"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stripLeading",
      "comment": "Returns a string whose value is this string, with all leading white space removed. If this String object represents an empty string, or if all code points in this string are white space, then an empty string is returned. Otherwise, returns a substring of this string beginning with the first code point that is not a white space up to and including the last code point of this string. This method may be used to trim white space from the beginning of a string.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003e\u003ccode\u003eCharacter.isWhitespace(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a string whose value is this string, with all leading white space removed"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stripTrailing",
      "comment": "Returns a string whose value is this string, with all trailing white space removed. If this String object represents an empty string, or if all characters in this string are white space, then an empty string is returned. Otherwise, returns a substring of this string beginning with the first code point of this string up to and including the last code point that is not a white space. This method may be used to trim white space from the end of a string.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003e\u003ccode\u003eCharacter.isWhitespace(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a string whose value is this string, with all trailing white space removed"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isBlank",
      "comment": "Returns true if the string is empty or contains only white space codepoints, otherwise false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003e\u003ccode\u003eCharacter.isWhitespace(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the string is empty or contains only \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003ewhite space\u003c/a\u003e codepoints, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lines",
      "comment": "Returns a stream of lines extracted from this string, separated by line terminators. A line terminator is one of the following: a line feed character \"\\n\" (U+000A), a carriage return character \"\\r\" (U+000D), or a carriage return followed immediately by a line feed \"\\r\\n\" (U+000D U+000A). A line is either a sequence of zero or more characters followed by a line terminator, or it is a sequence of one or more characters followed by the end of the string. A line does not include the line terminator. The stream returned by this method contains the lines from this string in the order in which they occur.",
      "tagMap": {
        "apiNote": [
          "This definition of \n\u003ci\u003eline\u003c/i\u003e implies that an empty string has zero lines and that there is no empty line following a line terminator at the end of a string."
        ],
        "implNote": [
          "This method provides better performance than split(\"\\R\") by supplying elements lazily and by faster search of new line terminators."
        ],
        "return": [
          "the stream of lines extracted from this string"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "indent",
      "comment": "Adjusts the indentation of each line of this string based on the value of n, and normalizes line termination characters. This string is conceptually separated into lines using lines(). Each line is then adjusted as described below and then suffixed with a line feed \"\\n\" (U+000A). The resulting lines are then concatenated and returned. If n \u003e 0 then n spaces (U+0020) are inserted at the beginning of each line. If n \u003c 0 then up to n white space characters are removed from the beginning of each line. If a given line does not contain sufficient white space then all leading white space characters are removed. Each white space character is treated as a single character. In particular, the tab character \"\\t\" (U+0009) is considered a single character; it is not expanded. If n \u003d\u003d 0 then the line remains unchanged. However, line terminators are still normalized.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#lines()\"\u003e\u003ccode\u003elines()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#isBlank()\"\u003e\u003ccode\u003eisBlank()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003e\u003ccode\u003eCharacter.isWhitespace(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - number of leading \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003ewhite space characters\u003c/a\u003e to add or remove"
        ],
        "return": [
          "string with indentation adjusted and line endings normalized"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stripIndent",
      "comment": "Returns a string whose value is this string, with incidental white space removed from the beginning and end of every line. Incidental white space is often present in a text block to align the content with the opening delimiter. For example, in the following code, dots represent incidental white space:  String html \u003d \"\"\"\n ..............\u003chtml\u003e\n ..............    \u003cbody\u003e\n ..............        \u003cp\u003eHello, world\u003c/p\u003e\n ..............    \u003c/body\u003e\n ..............\u003c/html\u003e\n ..............\"\"\";\n This method treats the incidental white space as indentation to be stripped, producing a string that preserves the relative indentation of the content. Using | to visualize the start of each line of the string:  |\u003chtml\u003e\n |    \u003cbody\u003e\n |        \u003cp\u003eHello, world\u003c/p\u003e\n |    \u003c/body\u003e\n |\u003c/html\u003e\n First, the individual lines of this string are extracted. A line is a sequence of zero or more characters followed by either a line terminator or the end of the string. If the string has at least one line terminator, the last line consists of the characters between the last terminator and the end of the string. Otherwise, if the string has no terminators, the last line is the start of the string to the end of the string, in other words, the entire string. A line does not include the line terminator. Then, the minimum indentation (min) is determined as follows: For each non-blank line (as defined by isBlank()), the leading white space characters are counted. The leading white space characters on the last line are also counted even if blank. The min value is the smallest of these counts. For each non-blank line, min leading white space characters are removed, and any trailing white space characters are removed. Blank lines are replaced with the empty string. Finally, the lines are joined into a new string, using the LF character \"\\n\" (U+000A) to separate lines.",
      "tagMap": {
        "implSpec": [
          "This method treats all \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003ewhite space\u003c/a\u003e characters as having equal width. As long as the indentation on every line is consistently composed of the same character sequences, then the result will be as described above."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#lines()\"\u003e\u003ccode\u003elines()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#isBlank()\"\u003e\u003ccode\u003eisBlank()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#indent(int)\"\u003e\u003ccode\u003eindent(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003e\u003ccode\u003eCharacter.isWhitespace(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method\u0027s primary purpose is to shift a block of lines as far as possible to the left, while preserving relative indentation. Lines that were indented the least will thus have no leading \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#isWhitespace(int)\"\u003ewhite space\u003c/a\u003e. The result will have the same number of line terminators as this string. If this string ends with a line terminator then the result will end with a line terminator."
        ],
        "return": [
          "string with incidental indentation removed and line terminators normalized"
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "translateEscapes",
      "comment": "Returns a string whose value is this string, with escape sequences translated as if in a string literal. Escape sequences are translated as follows; Translation Escape Name Translation \\b backspace U+0008 \\t horizontal tab U+0009 \\n line feed U+000A \\f form feed U+000C \\r carriage return U+000D \\s space U+0020 \\\" double quote U+0022 \\\u0027 single quote U+0027 \\\\ backslash U+005C \\0 - \\377 octal escape code point equivalents \\\u003cline-terminator\u003e continuation discard",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.10.7\"\u003e3.10.7 Escape Sequences\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "implNote": [
          "This method does \n\u003cem\u003enot\u003c/em\u003e translate Unicode escapes such as \"\n\u003ccode\u003e\\u2022\u003c/code\u003e\". Unicode escapes are translated by the Java compiler when reading input characters and are not part of the string literal specification."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - when an escape sequence is malformed."
        ],
        "return": [
          "String with escape sequences translated."
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "R",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "java.lang.String",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "R",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "R",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "transform",
      "comment": "This method allows the application of a function to this string. The function should expect a single String argument and produce an R result. Any exception thrown by f.apply() will be propagated to the caller.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eR\u003c/code\u003e - the type of the result"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/Function.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003eFunction\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a function to apply"
        ],
        "return": [
          "the result of applying the function to this string"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "This object (which is already a string!) is itself returned.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string itself."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "chars",
      "comment": "Returns a stream of int zero-extending the char values from this sequence. Any char which maps to a surrogate code point is passed through uninterpreted.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#chars()\"\u003echars\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an IntStream of char values from this sequence"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "codePoints",
      "comment": "Returns a stream of code point values from this sequence. Any surrogate pairs encountered in the sequence are combined as if by Character.toCodePoint and the result is passed to the stream. Any other code units, including ordinary BMP characters, unpaired surrogates, and undefined code units, are zero-extended to int values which are then passed to the stream.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#codePoints()\"\u003ecodePoints\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an IntStream of Unicode code points from this sequence"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toCharArray",
      "comment": "Converts this string to a new character array.",
      "tagMap": {
        "return": [
          "a newly allocated character array whose length is the length of this string and whose contents are initialized to contain the character sequence represented by this string."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "format"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "format",
      "comment": "Returns a formatted string using the specified format string and arguments. The locale always used is the one returned by Locale.getDefault(Locale.Category) with FORMAT category specified.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatter\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eformat\u003c/code\u003e - A \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e. The behaviour on a \n\u003ccode\u003enull\u003c/code\u003e argument depends on the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification."
        ],
        "return": [
          "A formatted string"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "format"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "format",
      "comment": "Returns a formatted string using the specified locale, format string, and arguments.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatter\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied.",
          "\u003ccode\u003eformat\u003c/code\u003e - A \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eformat string\u003c/a\u003e",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e. The behaviour on a \n\u003ccode\u003enull\u003c/code\u003e argument depends on the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification"
        ],
        "return": [
          "A formatted string"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "formatted",
      "comment": "Formats using this string as the format string, and the supplied arguments.",
      "tagMap": {
        "implSpec": [
          "This method is equivalent to \n\u003ccode\u003eString.format(this, args)\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#format(java.lang.String,java.lang.Object...)\"\u003e\u003ccode\u003eformat(String,Object...)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatter\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in this string."
        ],
        "return": [
          "A formatted string"
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the string representation of the Object argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003e\u003ccode\u003eObject.toString()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - an \n\u003ccode\u003eObject\u003c/code\u003e."
        ],
        "return": [
          "if the argument is \n\u003ccode\u003enull\u003c/code\u003e, then a string equal to \n\u003ccode\u003e\"null\"\u003c/code\u003e; otherwise, the value of \n\u003ccode\u003eobj.toString()\u003c/code\u003e is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the string representation of the char array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the returned string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the character array."
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e that contains the characters of the character array."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "data"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the string representation of a specific subarray of the char array argument. The offset argument is the index of the first character of the subarray. The count argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the character array.",
          "\u003ccode\u003eoffset\u003c/code\u003e - initial offset of the subarray.",
          "\u003ccode\u003ecount\u003c/code\u003e - length of the subarray."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset\u003c/code\u003e is negative, or \n\u003ccode\u003ecount\u003c/code\u003e is negative, or \n\u003ccode\u003eoffset+count\u003c/code\u003e is larger than \n\u003ccode\u003edata.length\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e that contains the characters of the specified subarray of the character array."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "data"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "copyValueOf",
      "comment": "Equivalent to valueOf(char[], int, int).",
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the character array.",
          "\u003ccode\u003eoffset\u003c/code\u003e - initial offset of the subarray.",
          "\u003ccode\u003ecount\u003c/code\u003e - length of the subarray."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoffset\u003c/code\u003e is negative, or \n\u003ccode\u003ecount\u003c/code\u003e is negative, or \n\u003ccode\u003eoffset+count\u003c/code\u003e is larger than \n\u003ccode\u003edata.length\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e that contains the characters of the specified subarray of the character array."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "data"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "copyValueOf",
      "comment": "Equivalent to valueOf(char[]).",
      "tagMap": {
        "param": [
          "\u003ccode\u003edata\u003c/code\u003e - the character array."
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e that contains the characters of the character array."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the string representation of the boolean argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - a \n\u003ccode\u003eboolean\u003c/code\u003e."
        ],
        "return": [
          "if the argument is \n\u003ccode\u003etrue\u003c/code\u003e, a string equal to \n\u003ccode\u003e\"true\"\u003c/code\u003e is returned; otherwise, a string equal to \n\u003ccode\u003e\"false\"\u003c/code\u003e is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the string representation of the char argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - a \n\u003ccode\u003echar\u003c/code\u003e."
        ],
        "return": [
          "a string of length \n\u003ccode\u003e1\u003c/code\u003e containing as its single character the argument \n\u003ccode\u003ec\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the string representation of the int argument. The representation is exactly the one returned by the Integer.toString method of one argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#toString(int,int)\"\u003e\u003ccode\u003eInteger.toString(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - an \n\u003ccode\u003eint\u003c/code\u003e."
        ],
        "return": [
          "a string representation of the \n\u003ccode\u003eint\u003c/code\u003e argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the string representation of the long argument. The representation is exactly the one returned by the Long.toString method of one argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#toString(long)\"\u003e\u003ccode\u003eLong.toString(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - a \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "return": [
          "a string representation of the \n\u003ccode\u003elong\u003c/code\u003e argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the string representation of the float argument. The representation is exactly the one returned by the Float.toString method of one argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Float.html#toString(float)\"\u003e\u003ccode\u003eFloat.toString(float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - a \n\u003ccode\u003efloat\u003c/code\u003e."
        ],
        "return": [
          "a string representation of the \n\u003ccode\u003efloat\u003c/code\u003e argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the string representation of the double argument. The representation is exactly the one returned by the Double.toString method of one argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Double.html#toString(double)\"\u003e\u003ccode\u003eDouble.toString(double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - a \n\u003ccode\u003edouble\u003c/code\u003e."
        ],
        "return": [
          "a string representation of the \n\u003ccode\u003edouble\u003c/code\u003e argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intern",
      "comment": "Returns a canonical representation for the string object. A pool of strings, initially empty, is maintained privately by the class String. When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned. It follows that for any two strings s and t, s.intern() \u003d\u003d t.intern() is true if and only if s.equals(t) is true. All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the The Java Language Specification.",
      "tagMap": {
        "return": [
          "a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "repeat",
      "comment": "Returns a string whose value is the concatenation of this string repeated count times. If this string is empty or count is zero then the empty string is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecount\u003c/code\u003e - number of times to repeat"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ecount\u003c/code\u003e is negative."
        ],
        "return": [
          "A string composed of this string repeated \n\u003ccode\u003ecount\u003c/code\u003e times or the empty string if this string is empty or count is zero"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "describeConstable",
      "comment": "Returns an Optional containing the nominal descriptor for this instance, which is the instance itself.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html#describeConstable()\"\u003edescribeConstable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html\" title\u003d\"interface in java.lang.constant\"\u003eConstable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e describing the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html\" title\u003d\"class in java.lang\"\u003eString\u003c/a\u003e instance"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "field": {
            "name": "lookup"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "resolveConstantDesc",
      "comment": "Resolves this instance as a ConstantDesc, the result of which is the instance itself.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/ConstantDesc.html#resolveConstantDesc(java.lang.invoke.MethodHandles.Lookup)\"\u003eresolveConstantDesc\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/ConstantDesc.html\" title\u003d\"interface in java.lang.constant\"\u003eConstantDesc\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - ignored"
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html\" title\u003d\"class in java.lang\"\u003eString\u003c/a\u003e instance"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Initializes a newly created String object so that it represents an empty character sequence. Note that use of this constructor is unnecessary since Strings are immutable.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "original"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Initializes a newly created String object so that it represents the same sequence of characters as the argument; in other words, the newly created string is a copy of the argument string. Unless an explicit copy of original is needed, use of this constructor is unnecessary since Strings are immutable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoriginal\u003c/code\u003e - A \n\u003ccode\u003eString\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new String so that it represents the sequence of characters currently contained in the character array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the newly created string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The initial value of the string"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new String that contains characters from a subarray of the character array argument. The offset argument is the index of the first character of the subarray and the count argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the newly created string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - Array that is the source of characters",
          "\u003ccode\u003eoffset\u003c/code\u003e - The initial offset",
          "\u003ccode\u003ecount\u003c/code\u003e - The length"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eoffset\u003c/code\u003e is negative, \n\u003ccode\u003ecount\u003c/code\u003e is negative, or \n\u003ccode\u003eoffset\u003c/code\u003e is greater than \n\u003ccode\u003evalue.length - count\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "codePoints"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new String that contains characters from a subarray of the Unicode code point array argument. The offset argument is the index of the first code point of the subarray and the count argument specifies the length of the subarray. The contents of the subarray are converted to chars; subsequent modification of the int array does not affect the newly created string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodePoints\u003c/code\u003e - Array that is the source of Unicode code points",
          "\u003ccode\u003eoffset\u003c/code\u003e - The initial offset",
          "\u003ccode\u003ecount\u003c/code\u003e - The length"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If any invalid Unicode code point is found in \n\u003ccode\u003e codePoints\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eoffset\u003c/code\u003e is negative, \n\u003ccode\u003ecount\u003c/code\u003e is negative, or \n\u003ccode\u003eoffset\u003c/code\u003e is greater than \n\u003ccode\u003ecodePoints.length - count\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "ascii"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hibyte"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "count"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new String constructed from a subarray of an array of 8-bit integer values. The offset argument is the index of the first byte of the subarray, and the count argument specifies the length of the subarray. Each byte in the subarray is converted to a char as specified in the String(byte[],int) constructor.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "1.1"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D,int)\"\u003e\u003ccode\u003eString(byte[], int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D,int,int,java.lang.String)\"\u003e\u003ccode\u003eString(byte[], int, int, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D,int,int,java.nio.charset.Charset)\"\u003e\u003ccode\u003eString(byte[], int, int, java.nio.charset.Charset)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D,int,int)\"\u003e\u003ccode\u003eString(byte[], int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D,java.lang.String)\"\u003e\u003ccode\u003eString(byte[], java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D,java.nio.charset.Charset)\"\u003e\u003ccode\u003eString(byte[], java.nio.charset.Charset)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D)\"\u003e\u003ccode\u003eString(byte[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eascii\u003c/code\u003e - The bytes to be converted to characters",
          "\u003ccode\u003ehibyte\u003c/code\u003e - The top 8 bits of each 16-bit Unicode code unit",
          "\u003ccode\u003eoffset\u003c/code\u003e - The initial offset",
          "\u003ccode\u003ecount\u003c/code\u003e - The length"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eoffset\u003c/code\u003e is negative, \n\u003ccode\u003ecount\u003c/code\u003e is negative, or \n\u003ccode\u003eoffset\u003c/code\u003e is greater than \n\u003ccode\u003eascii.length - count\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "ascii"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hibyte"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new String containing characters constructed from an array of 8-bit integer values. Each character c in the resulting string is constructed from the corresponding component b in the byte array such that:      c \u003d\u003d (char)(((hibyte \u0026 0xff) \u003c\u003c 8)\n                         | (b \u0026 0xff))",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "1.1"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D,int,int,java.lang.String)\"\u003e\u003ccode\u003eString(byte[], int, int, java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D,int,int,java.nio.charset.Charset)\"\u003e\u003ccode\u003eString(byte[], int, int, java.nio.charset.Charset)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D,int,int)\"\u003e\u003ccode\u003eString(byte[], int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D,java.lang.String)\"\u003e\u003ccode\u003eString(byte[], java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D,java.nio.charset.Charset)\"\u003e\u003ccode\u003eString(byte[], java.nio.charset.Charset)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#%3Cinit%3E(byte%5B%5D)\"\u003e\u003ccode\u003eString(byte[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eascii\u003c/code\u003e - The bytes to be converted to characters",
          "\u003ccode\u003ehibyte\u003c/code\u003e - The top 8 bits of each 16-bit Unicode code unit"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "charsetName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new String by decoding the specified subarray of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray. The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - The bytes to be decoded into characters",
          "\u003ccode\u003eoffset\u003c/code\u003e - The index of the first byte to decode",
          "\u003ccode\u003elength\u003c/code\u003e - The number of bytes to decode",
          "\u003ccode\u003echarsetName\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named charset is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eoffset\u003c/code\u003e is negative, \n\u003ccode\u003elength\u003c/code\u003e is negative, or \n\u003ccode\u003eoffset\u003c/code\u003e is greater than \n\u003ccode\u003ebytes.length - length\u003c/code\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new String by decoding the specified subarray of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - The bytes to be decoded into characters",
          "\u003ccode\u003eoffset\u003c/code\u003e - The index of the first byte to decode",
          "\u003ccode\u003elength\u003c/code\u003e - The number of bytes to decode",
          "\u003ccode\u003echarset\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e to be used to decode the \n\u003ccode\u003ebytes\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eoffset\u003c/code\u003e is negative, \n\u003ccode\u003elength\u003c/code\u003e is negative, or \n\u003ccode\u003eoffset\u003c/code\u003e is greater than \n\u003ccode\u003ebytes.length - length\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "charsetName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new String by decoding the specified array of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array. The behavior of this constructor when the given bytes are not valid in the given charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - The bytes to be decoded into characters",
          "\u003ccode\u003echarsetName\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named charset is not supported"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new String by decoding the specified array of bytes using the specified charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. The CharsetDecoder class should be used when more control over the decoding process is required.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - The bytes to be decoded into characters",
          "\u003ccode\u003echarset\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e to be used to decode the \n\u003ccode\u003ebytes\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new String by decoding the specified subarray of bytes using the platform\u0027s default charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the subarray. The behavior of this constructor when the given bytes are not valid in the default charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - The bytes to be decoded into characters",
          "\u003ccode\u003eoffset\u003c/code\u003e - The index of the first byte to decode",
          "\u003ccode\u003elength\u003c/code\u003e - The number of bytes to decode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eoffset\u003c/code\u003e is negative, \n\u003ccode\u003elength\u003c/code\u003e is negative, or \n\u003ccode\u003eoffset\u003c/code\u003e is greater than \n\u003ccode\u003ebytes.length - length\u003c/code\u003e"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new String by decoding the specified array of bytes using the platform\u0027s default charset. The length of the new String is a function of the charset, and hence may not be equal to the length of the byte array. The behavior of this constructor when the given bytes are not valid in the default charset is unspecified. The CharsetDecoder class should be used when more control over the decoding process is required.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - The bytes to be decoded into characters"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.StringBuffer",
            "type": "Class"
          },
          "field": {
            "name": "buffer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new string that contains the sequence of characters currently contained in the string buffer argument. The contents of the string buffer are copied; subsequent modification of the string buffer does not affect the newly created string.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebuffer\u003c/code\u003e - A \n\u003ccode\u003eStringBuffer\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.StringBuilder",
            "type": "Class"
          },
          "field": {
            "name": "builder"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Allocates a new string that contains the sequence of characters currently contained in the string builder argument. The contents of the string builder are copied; subsequent modification of the string builder does not affect the newly created string. This constructor is provided to ease migration to StringBuilder. Obtaining a string from a string builder via the toString method is likely to run faster and is generally preferred.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebuilder\u003c/code\u003e - A \n\u003ccode\u003eStringBuilder\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.String",
  "comment": "The \n\u003ccode\u003eString\u003c/code\u003e class represents character strings. All string literals in Java programs, such as \n\u003ccode\u003e\"abc\"\u003c/code\u003e, are implemented as instances of this class. \n\u003cp\u003e Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     String str \u003d \"abc\";\n \u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e is equivalent to: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     char data[] \u003d {\u0027a\u0027, \u0027b\u0027, \u0027c\u0027};\n     String str \u003d new String(data);\n \u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Here are some more examples of how strings can be used: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     System.out.println(\"abc\");\n     String cde \u003d \"cde\";\n     System.out.println(\"abc\" + cde);\n     String c \u003d \"abc\".substring(2, 3);\n     String d \u003d cde.substring(1, 2);\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The class \u003ccode\u003eString\u003c/code\u003e includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard version specified by the \u003ca href\u003d\"Character.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eCharacter\u003c/code\u003e\u003c/a\u003e class. \u003c/p\u003e\n\u003cp\u003e The Java language provides special support for the string concatenation operator (\u0026nbsp;+\u0026nbsp;), and for conversion of other objects to strings. For additional information on string concatenation and conversion, see \u003ci\u003eThe Java Language Specification\u003c/i\u003e. \u003c/p\u003e\n\u003cp\u003e Unless otherwise noted, passing a \u003ccode\u003enull\u003c/code\u003e argument to a constructor or method in this class will cause a \u003ca href\u003d\"NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown. \u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eString\u003c/code\u003e represents a string in the UTF-16 format in which \u003cem\u003esupplementary characters\u003c/em\u003e are represented by \u003cem\u003esurrogate pairs\u003c/em\u003e (see the section \u003ca href\u003d\"Character.html#unicode\"\u003eUnicode Character Representations\u003c/a\u003e in the \u003ccode\u003eCharacter\u003c/code\u003e class for more information). Index values refer to \u003ccode\u003echar\u003c/code\u003e code units, so a supplementary character uses two positions in a \u003ccode\u003eString\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eString\u003c/code\u003e class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., \u003ccode\u003echar\u003c/code\u003e values). \u003c/p\u003e\n\u003cp\u003eUnless otherwise noted, methods for comparing Strings do not take locale into account. The \u003ca href\u003d\"../text/Collator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollator\u003c/code\u003e\u003c/a\u003e class provides methods for finer-grain, locale-sensitive String comparison.\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-15.html#jls-15.18.1\"\u003e15.18.1 String Concatenation Operator +\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003e\u003ccode\u003eObject.toString()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringBuffer.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eStringBuffer\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringBuilder.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharset\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.String\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "implNote": [
      "The implementation of the string concatenation operator is left to the discretion of a Java compiler, as long as the compiler ultimately conforms to \n\u003ci\u003eThe Java Language Specification\u003c/i\u003e. For example, the \n\u003ccode\u003ejavac\u003c/code\u003e compiler may implement the operator with \n\u003ccode\u003eStringBuffer\u003c/code\u003e, \n\u003ccode\u003eStringBuilder\u003c/code\u003e, or \n\u003ccode\u003ejava.lang.invoke.StringConcatFactory\u003c/code\u003e depending on the JDK version. The implementation of string conversion is typically through the method \n\u003ccode\u003etoString\u003c/code\u003e, defined by \n\u003ccode\u003eObject\u003c/code\u003e and inherited by all classes in Java."
    ],
    "since": [
      "1.0"
    ]
  }
}