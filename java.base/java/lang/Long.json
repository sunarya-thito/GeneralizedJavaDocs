{
  "packageName": "java.lang",
  "simpleName": "Long",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Number",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MIN_VALUE",
      "comment": "A constant holding the minimum value a long can have, -263.",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Long.MIN_VALUE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAX_VALUE",
      "comment": "A constant holding the maximum value a long can have, 263-1.",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Long.MAX_VALUE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "name": "java.lang.Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TYPE",
      "comment": "The Class instance representing the primitive type long.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.1"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SIZE",
      "comment": "The number of bits used to represent a long value in two\u0027s complement binary form.",
      "annotations": [
        {
          "type": {
            "name": "Native",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Long.SIZE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "BYTES",
      "comment": "The number of bytes used to represent a long value in two\u0027s complement binary form.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.lang.Long.BYTES\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toString",
      "comment": "Returns a string representation of the first argument in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. If the first argument is negative, the first element of the result is the ASCII minus sign \u0027-\u0027 (\u0027\\u002d\u0027). If the first argument is not negative, no sign character appears in the result. The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character \u00270\u0027 (\u0027\\u0030\u0027); otherwise, the first character of the representation of the magnitude will not be the zero character. The following ASCII characters are used as digits: 0123456789abcdefghijklmnopqrstuvwxyz These are \u0027\\u0030\u0027 through \u0027\\u0039\u0027 and \u0027\\u0061\u0027 through \u0027\\u007a\u0027. If radix is N, then the first N of these characters are used as radix-N digits in the order shown. Thus, the digits for hexadecimal (radix 16) are 0123456789abcdef. If uppercase letters are desired, the String.toUpperCase() method may be called on the result: Long.toString(n, 16).toUpperCase()",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MAX_RADIX\"\u003e\u003ccode\u003eCharacter.MAX_RADIX\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MIN_RADIX\"\u003e\u003ccode\u003eCharacter.MIN_RADIX\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - a \n\u003ccode\u003elong\u003c/code\u003e to be converted to a string.",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix to use in the string representation."
        ],
        "return": [
          "a string representation of the argument in the specified radix."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toUnsignedString",
      "comment": "Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. Note that since the first argument is treated as an unsigned value, no leading sign character is printed. If the magnitude is zero, it is represented by a single zero character \u00270\u0027 (\u0027\\u0030\u0027); otherwise, the first character of the representation of the magnitude will not be the zero character. The behavior of radixes and the characters used as digits are the same as toString.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#toString(long,int)\"\u003e\u003ccode\u003etoString(long, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - an integer to be converted to an unsigned string.",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix to use in the string representation."
        ],
        "return": [
          "an unsigned string representation of the argument in the specified radix."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toHexString",
      "comment": "Returns a string representation of the long argument as an unsigned integer in base 16. The unsigned long value is the argument plus 264 if the argument is negative; otherwise, it is equal to the argument. This value is converted to a string of ASCII digits in hexadecimal (base 16) with no extra leading 0s. The value of the argument can be recovered from the returned string s by calling Long.parseUnsignedLong(s, 16). If the unsigned magnitude is zero, it is represented by a single zero character \u00270\u0027 (\u0027\\u0030\u0027); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as hexadecimal digits: 0123456789abcdef These are the characters \u0027\\u0030\u0027 through \u0027\\u0039\u0027 and \u0027\\u0061\u0027 through \u0027\\u0066\u0027. If uppercase letters are desired, the String.toUpperCase() method may be called on the result: Long.toHexString(n).toUpperCase()",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#parseUnsignedLong(java.lang.String,int)\"\u003e\u003ccode\u003eparseUnsignedLong(String, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#toUnsignedString(long,int)\"\u003e\u003ccode\u003etoUnsignedString(long, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - a \n\u003ccode\u003elong\u003c/code\u003e to be converted to a string."
        ],
        "return": [
          "the string representation of the unsigned \n\u003ccode\u003elong\u003c/code\u003e value represented by the argument in hexadecimal (base\u0026nbsp;16)."
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toOctalString",
      "comment": "Returns a string representation of the long argument as an unsigned integer in base 8. The unsigned long value is the argument plus 264 if the argument is negative; otherwise, it is equal to the argument. This value is converted to a string of ASCII digits in octal (base 8) with no extra leading 0s. The value of the argument can be recovered from the returned string s by calling Long.parseUnsignedLong(s, 8). If the unsigned magnitude is zero, it is represented by a single zero character \u00270\u0027 (\u0027\\u0030\u0027); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as octal digits: 01234567 These are the characters \u0027\\u0030\u0027 through \u0027\\u0037\u0027.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#parseUnsignedLong(java.lang.String,int)\"\u003e\u003ccode\u003eparseUnsignedLong(String, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#toUnsignedString(long,int)\"\u003e\u003ccode\u003etoUnsignedString(long, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - a \n\u003ccode\u003elong\u003c/code\u003e to be converted to a string."
        ],
        "return": [
          "the string representation of the unsigned \n\u003ccode\u003elong\u003c/code\u003e value represented by the argument in octal (base\u0026nbsp;8)."
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toBinaryString",
      "comment": "Returns a string representation of the long argument as an unsigned integer in base 2. The unsigned long value is the argument plus 264 if the argument is negative; otherwise, it is equal to the argument. This value is converted to a string of ASCII digits in binary (base 2) with no extra leading 0s. The value of the argument can be recovered from the returned string s by calling Long.parseUnsignedLong(s, 2). If the unsigned magnitude is zero, it is represented by a single zero character \u00270\u0027 (\u0027\\u0030\u0027); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The characters \u00270\u0027 (\u0027\\u0030\u0027) and \u00271\u0027 (\u0027\\u0031\u0027) are used as binary digits.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#parseUnsignedLong(java.lang.String,int)\"\u003e\u003ccode\u003eparseUnsignedLong(String, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#toUnsignedString(long,int)\"\u003e\u003ccode\u003etoUnsignedString(long, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - a \n\u003ccode\u003elong\u003c/code\u003e to be converted to a string."
        ],
        "return": [
          "the string representation of the unsigned \n\u003ccode\u003elong\u003c/code\u003e value represented by the argument in binary (base\u0026nbsp;2)."
        ],
        "since": [
          "1.0.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toString",
      "comment": "Returns a String object representing the specified long. The argument is converted to signed decimal representation and returned as a string, exactly as if the argument and the radix 10 were given as arguments to the toString(long, int) method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - a \n\u003ccode\u003elong\u003c/code\u003e to be converted."
        ],
        "return": [
          "a string representation of the argument in base\u0026nbsp;10."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toUnsignedString",
      "comment": "Returns a string representation of the argument as an unsigned decimal value. The argument is converted to unsigned decimal representation and returned as a string exactly as if the argument and radix 10 were given as arguments to the toUnsignedString(long, int) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#toUnsignedString(long,int)\"\u003e\u003ccode\u003etoUnsignedString(long, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - an integer to be converted to an unsigned string."
        ],
        "return": [
          "an unsigned string representation of the argument."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parseLong",
      "comment": "Parses the string argument as a signed long in the radix specified by the second argument. The characters in the string must all be digits of the specified radix (as determined by whether Character.digit(char, int) returns a nonnegative value), except that the first character may be an ASCII minus sign \u0027-\u0027 (\u0027\\u002D\u0027) to indicate a negative value or an ASCII plus sign \u0027+\u0027 (\u0027\\u002B\u0027) to indicate a positive value. The resulting long value is returned. Note that neither the character L (\u0027\\u004C\u0027) nor l (\u0027\\u006C\u0027) is permitted to appear at the end of the string as a type indicator, as would be permitted in Java programming language source code - except that either L or l may appear as a digit for a radix greater than or equal to 22. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX. Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign \u0027-\u0027 (\u0027\\u002d\u0027) or plus sign \u0027+\u0027 (\u0027\\u002B\u0027) provided that the string is longer than length 1. The value represented by the string is not a value of type long. Examples:  parseLong(\"0\", 10) returns 0L\n parseLong(\"473\", 10) returns 473L\n parseLong(\"+42\", 10) returns 42L\n parseLong(\"-0\", 10) returns 0L\n parseLong(\"-FF\", 16) returns -255L\n parseLong(\"1100110\", 2) returns 102L\n parseLong(\"99\", 8) throws a NumberFormatException\n parseLong(\"Hazelnut\", 10) throws a NumberFormatException\n parseLong(\"Hazelnut\", 36) returns 1356099454469L",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e containing the \n\u003ccode\u003elong\u003c/code\u003e representation to be parsed.",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix to be used while parsing \n\u003ccode\u003es\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the string does not contain a parsable \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "return": [
          "the \n\u003ccode\u003elong\u003c/code\u003e represented by the string argument in the specified radix."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "endIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parseLong",
      "comment": "Parses the CharSequence argument as a signed long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1. The method does not take steps to guard against the CharSequence being mutated while parsing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eCharSequence\u003c/code\u003e containing the \n\u003ccode\u003elong\u003c/code\u003e representation to be parsed",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the beginning index, inclusive.",
          "\u003ccode\u003eendIndex\u003c/code\u003e - the ending index, exclusive.",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix to be used while parsing \n\u003ccode\u003es\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003es\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebeginIndex\u003c/code\u003e is negative, or if \n\u003ccode\u003ebeginIndex\u003c/code\u003e is greater than \n\u003ccode\u003eendIndex\u003c/code\u003e or if \n\u003ccode\u003eendIndex\u003c/code\u003e is greater than \n\u003ccode\u003es.length()\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eCharSequence\u003c/code\u003e does not contain a parsable \n\u003ccode\u003elong\u003c/code\u003e in the specified \n\u003ccode\u003eradix\u003c/code\u003e, or if \n\u003ccode\u003eradix\u003c/code\u003e is either smaller than \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MIN_RADIX\"\u003e\u003ccode\u003eCharacter.MIN_RADIX\u003c/code\u003e\u003c/a\u003e or larger than \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MAX_RADIX\"\u003e\u003ccode\u003eCharacter.MAX_RADIX\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the signed \n\u003ccode\u003elong\u003c/code\u003e represented by the subsequence in the specified radix."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parseLong",
      "comment": "Parses the string argument as a signed decimal long. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign \u0027-\u0027 (\\u002D\u0027) to indicate a negative value or an ASCII plus sign \u0027+\u0027 (\u0027\\u002B\u0027) to indicate a positive value. The resulting long value is returned, exactly as if the argument and the radix 10 were given as arguments to the parseLong(java.lang.String, int) method. Note that neither the character L (\u0027\\u004C\u0027) nor l (\u0027\\u006C\u0027) is permitted to appear at the end of the string as a type indicator, as would be permitted in Java programming language source code.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e containing the \n\u003ccode\u003elong\u003c/code\u003e representation to be parsed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the string does not contain a parsable \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "return": [
          "the \n\u003ccode\u003elong\u003c/code\u003e represented by the argument in decimal."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parseUnsignedLong",
      "comment": "Parses the string argument as an unsigned long in the radix specified by the second argument. An unsigned integer maps the values usually associated with negative numbers to positive numbers larger than MAX_VALUE. The characters in the string must all be digits of the specified radix (as determined by whether Character.digit(char, int) returns a nonnegative value), except that the first character may be an ASCII plus sign \u0027+\u0027 (\u0027\\u002B\u0027). The resulting integer value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX. Any character of the string is not a digit of the specified radix, except that the first character may be a plus sign \u0027+\u0027 (\u0027\\u002B\u0027) provided that the string is longer than length 1. The value represented by the string is larger than the largest unsigned long, 264-1.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e containing the unsigned integer representation to be parsed",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix to be used while parsing \n\u003ccode\u003es\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eString\u003c/code\u003e does not contain a parsable \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "return": [
          "the unsigned \n\u003ccode\u003elong\u003c/code\u003e represented by the string argument in the specified radix."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "beginIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "endIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parseUnsignedLong",
      "comment": "Parses the CharSequence argument as an unsigned long in the specified radix, beginning at the specified beginIndex and extending to endIndex - 1. The method does not take steps to guard against the CharSequence being mutated while parsing.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eCharSequence\u003c/code\u003e containing the unsigned \n\u003ccode\u003elong\u003c/code\u003e representation to be parsed",
          "\u003ccode\u003ebeginIndex\u003c/code\u003e - the beginning index, inclusive.",
          "\u003ccode\u003eendIndex\u003c/code\u003e - the ending index, exclusive.",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix to be used while parsing \n\u003ccode\u003es\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003es\u003c/code\u003e is null.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebeginIndex\u003c/code\u003e is negative, or if \n\u003ccode\u003ebeginIndex\u003c/code\u003e is greater than \n\u003ccode\u003eendIndex\u003c/code\u003e or if \n\u003ccode\u003eendIndex\u003c/code\u003e is greater than \n\u003ccode\u003es.length()\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eCharSequence\u003c/code\u003e does not contain a parsable unsigned \n\u003ccode\u003elong\u003c/code\u003e in the specified \n\u003ccode\u003eradix\u003c/code\u003e, or if \n\u003ccode\u003eradix\u003c/code\u003e is either smaller than \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MIN_RADIX\"\u003e\u003ccode\u003eCharacter.MIN_RADIX\u003c/code\u003e\u003c/a\u003e or larger than \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MAX_RADIX\"\u003e\u003ccode\u003eCharacter.MAX_RADIX\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the unsigned \n\u003ccode\u003elong\u003c/code\u003e represented by the subsequence in the specified radix."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "parseUnsignedLong",
      "comment": "Parses the string argument as an unsigned decimal long. The characters in the string must all be decimal digits, except that the first character may be an ASCII plus sign \u0027+\u0027 (\u0027\\u002B\u0027). The resulting integer value is returned, exactly as if the argument and the radix 10 were given as arguments to the parseUnsignedLong(java.lang.String, int) method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - a \n\u003ccode\u003eString\u003c/code\u003e containing the unsigned \n\u003ccode\u003elong\u003c/code\u003e representation to be parsed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the string does not contain a parsable unsigned integer."
        ],
        "return": [
          "the unsigned \n\u003ccode\u003elong\u003c/code\u003e value represented by the decimal string argument"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns a Long object holding the value extracted from the specified String when parsed with the radix given by the second argument. The first argument is interpreted as representing a signed long in the radix specified by the second argument, exactly as if the arguments were given to the parseLong(java.lang.String, int) method. The result is a Long object that represents the long value specified by the string. In other words, this method returns a Long object equal to the value of: new Long(Long.parseLong(s, radix))",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the string to be parsed",
          "\u003ccode\u003eradix\u003c/code\u003e - the radix to be used in interpreting \n\u003ccode\u003es\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003eString\u003c/code\u003e does not contain a parsable \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eLong\u003c/code\u003e object holding the value represented by the string argument in the specified radix."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns a Long object holding the value of the specified String. The argument is interpreted as representing a signed decimal long, exactly as if the argument were given to the parseLong(java.lang.String) method. The result is a Long object that represents the integer value specified by the string. In other words, this method returns a Long object equal to the value of: new Long(Long.parseLong(s))",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the string to be parsed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - If the string cannot be parsed as a \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eLong\u003c/code\u003e object holding the value represented by the string argument."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns a Long instance representing the specified long value. If a new Long instance is not required, this method should generally be used in preference to the constructor Long(long), as this method is likely to yield significantly better space and time performance by caching frequently requested values. This method will always cache values in the range -128 to 127, inclusive, and may cache other values outside of this range.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - a long value."
        ],
        "return": [
          "a \n\u003ccode\u003eLong\u003c/code\u003e instance representing \n\u003ccode\u003el\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nm",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "decode",
      "comment": "Decodes a String into a Long. Accepts decimal, hexadecimal, and octal numbers given by the following grammar: DecodableString: Signopt DecimalNumeral Signopt 0x HexDigits Signopt 0X HexDigits Signopt # HexDigits Signopt 0 OctalDigits Sign: - + DecimalNumeral, HexDigits, and OctalDigits are as defined in section 3.10.1 of The Java Language Specification, except that underscores are not accepted between digits. The sequence of characters following an optional sign and/or radix specifier (\"0x\", \"0X\", \"#\", or leading zero) is parsed as by the Long.parseLong method with the indicated radix (10, 16, or 8). This sequence of characters must represent a positive value or a NumberFormatException will be thrown. The result is negated if first character of the specified String is the minus sign. No whitespace characters are permitted in the String.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#parseLong(java.lang.String,int)\"\u003e\u003ccode\u003eparseLong(String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to decode."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eString\u003c/code\u003e does not contain a parsable \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eLong\u003c/code\u003e object holding the \n\u003ccode\u003elong\u003c/code\u003e value represented by \n\u003ccode\u003enm\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "byteValue",
      "comment": "Returns the value of this Long as a byte after a narrowing primitive conversion.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#byteValue()\"\u003ebyteValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003ebyte\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shortValue",
      "comment": "Returns the value of this Long as a short after a narrowing primitive conversion.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#shortValue()\"\u003eshortValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003eshort\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intValue",
      "comment": "Returns the value of this Long as an int after a narrowing primitive conversion.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#intValue()\"\u003eintValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003eint\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longValue",
      "comment": "Returns the value of this Long as a long value.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#longValue()\"\u003elongValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003elong\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "floatValue",
      "comment": "Returns the value of this Long as a float after a widening primitive conversion.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.2\"\u003e5.1.2 Widening Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#floatValue()\"\u003efloatValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003efloat\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubleValue",
      "comment": "Returns the value of this Long as a double after a widening primitive conversion.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.2\"\u003e5.1.2 Widening Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#doubleValue()\"\u003edoubleValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the numeric value represented by this object after conversion to type \n\u003ccode\u003edouble\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a String object representing this Long\u0027s value. The value is converted to signed decimal representation and returned as a string, exactly as if the long value were given as an argument to the toString(long) method.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the value of this object in base\u0026nbsp;10."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code for this Long. The result is the exclusive OR of the two halves of the primitive long value held by this Long object. That is, the hashcode is the value of the expression: (int)(this.longValue()^(this.longValue()\u003e\u003e\u003e32))",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "hashCode",
      "comment": "Returns a hash code for a long value; compatible with Long.hashCode().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to hash"
        ],
        "return": [
          "a hash code value for a \n\u003ccode\u003elong\u003c/code\u003e value."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this object to the specified object. The result is true if and only if the argument is not null and is a Long object that contains the same long value as this object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to compare with."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the objects are the same; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nm",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLong",
      "comment": "Determines the long value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the System.getProperty(java.lang.String) method. The string value of this property is then interpreted as a long value using the grammar supported by decode and a Long object representing this value is returned. If there is no property with the specified name, if the specified name is empty or null, or if the property does not have the correct numeric format, then null is returned. In other words, this method returns a Long object equal to the value of: getLong(nm, null)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - property name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - for the same reasons as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eLong\u003c/code\u003e value of the property."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nm",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLong",
      "comment": "Determines the long value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the System.getProperty(java.lang.String) method. The string value of this property is then interpreted as a long value using the grammar supported by decode and a Long object representing this value is returned. The second argument is the default value. A Long object that represents the value of the second argument is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null. In other words, this method returns a Long object equal to the value of: getLong(nm, new Long(val)) but in practice it may be implemented in a manner such as:  Long result \u003d getLong(nm, null);\n return (result \u003d\u003d null) ? new Long(val) : result;\n to avoid the unnecessary allocation of a Long object when the default value is not needed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - property name.",
          "\u003ccode\u003eval\u003c/code\u003e - default value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - for the same reasons as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eLong\u003c/code\u003e value of the property."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "nm",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Long",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLong",
      "comment": "Returns the long value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the System.getProperty(java.lang.String) method. The string value of this property is then interpreted as a long value, as per the decode method, and a Long object representing this value is returned; in summary: If the property value begins with the two ASCII characters 0x or the ASCII character #, not followed by a minus sign, then the rest of it is parsed as a hexadecimal integer exactly as for the method valueOf(java.lang.String, int) with radix 16. If the property value begins with the ASCII character 0 followed by another character, it is parsed as an octal integer exactly as by the method valueOf(java.lang.String, int) with radix 8. Otherwise the property value is parsed as a decimal integer exactly as by the method valueOf(java.lang.String, int) with radix 10. Note that, in every case, neither L (\u0027\\u004C\u0027) nor l (\u0027\\u006C\u0027) is permitted to appear at the end of the property value as a type indicator, as would be permitted in Java programming language source code. The second argument is the default value. The default value is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(java.lang.String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(java.lang.String, java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enm\u003c/code\u003e - property name.",
          "\u003ccode\u003eval\u003c/code\u003e - default value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - for the same reasons as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eLong\u003c/code\u003e value of the property."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Long",
            "type": "Class"
          },
          "name": "anotherLong",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares two Long objects numerically.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html\" title\u003d\"class in java.lang\"\u003eLong\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eanotherLong\u003c/code\u003e - the \n\u003ccode\u003eLong\u003c/code\u003e to be compared."
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eLong\u003c/code\u003e is equal to the argument \n\u003ccode\u003eLong\u003c/code\u003e; a value less than \n\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eLong\u003c/code\u003e is numerically less than the argument \n\u003ccode\u003eLong\u003c/code\u003e; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eLong\u003c/code\u003e is numerically greater than the argument \n\u003ccode\u003eLong\u003c/code\u003e (signed comparison)."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "compare",
      "comment": "Compares two long values numerically. The value returned is identical to what would be returned by:     Long.valueOf(x).compareTo(Long.valueOf(y))",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first \n\u003ccode\u003elong\u003c/code\u003e to compare",
          "\u003ccode\u003ey\u003c/code\u003e - the second \n\u003ccode\u003elong\u003c/code\u003e to compare"
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u003d\u003d y\u003c/code\u003e; a value less than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u0026lt; y\u003c/code\u003e; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u0026gt; y\u003c/code\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "y",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "compareUnsigned",
      "comment": "Compares two long values numerically treating the values as unsigned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the first \n\u003ccode\u003elong\u003c/code\u003e to compare",
          "\u003ccode\u003ey\u003c/code\u003e - the second \n\u003ccode\u003elong\u003c/code\u003e to compare"
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u003d\u003d y\u003c/code\u003e; a value less than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u0026lt; y\u003c/code\u003e as unsigned values; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if \n\u003ccode\u003ex \u0026gt; y\u003c/code\u003e as unsigned values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "dividend",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "divisor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "divideUnsigned",
      "comment": "Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value. Note that in two\u0027s complement arithmetic, the three other basic arithmetic operations of add, subtract, and multiply are bit-wise identical if the two operands are regarded as both being signed or both being unsigned. Therefore separate addUnsigned, etc. methods are not provided.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#remainderUnsigned(long,long)\"\u003e\u003ccode\u003eremainderUnsigned(long, long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edividend\u003c/code\u003e - the value to be divided",
          "\u003ccode\u003edivisor\u003c/code\u003e - the value doing the dividing"
        ],
        "return": [
          "the unsigned quotient of the first argument divided by the second argument"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "dividend",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "divisor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "remainderUnsigned",
      "comment": "Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#divideUnsigned(long,long)\"\u003e\u003ccode\u003edivideUnsigned(long, long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edividend\u003c/code\u003e - the value to be divided",
          "\u003ccode\u003edivisor\u003c/code\u003e - the value doing the dividing"
        ],
        "return": [
          "the unsigned remainder of the first argument divided by the second argument"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "highestOneBit",
      "comment": "Returns a long value with at most a single one-bit, in the position of the highest-order (\"leftmost\") one-bit in the specified long value. Returns zero if the specified value has no one-bits in its two\u0027s complement binary representation, that is, if it is equal to zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value whose highest one bit is to be computed"
        ],
        "return": [
          "a \n\u003ccode\u003elong\u003c/code\u003e value with a single one-bit, in the position of the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "lowestOneBit",
      "comment": "Returns a long value with at most a single one-bit, in the position of the lowest-order (\"rightmost\") one-bit in the specified long value. Returns zero if the specified value has no one-bits in its two\u0027s complement binary representation, that is, if it is equal to zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value whose lowest one bit is to be computed"
        ],
        "return": [
          "a \n\u003ccode\u003elong\u003c/code\u003e value with a single one-bit, in the position of the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "numberOfLeadingZeros",
      "comment": "Returns the number of zero bits preceding the highest-order (\"leftmost\") one-bit in the two\u0027s complement binary representation of the specified long value. Returns 64 if the specified value has no one-bits in its two\u0027s complement representation, in other words if it is equal to zero. Note that this method is closely related to the logarithm base 2. For all positive long values x: floor(log2(x)) \u003d 63 - numberOfLeadingZeros(x) ceil(log2(x)) \u003d 64 - numberOfLeadingZeros(x - 1)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value whose number of leading zeros is to be computed"
        ],
        "return": [
          "the number of zero bits preceding the highest-order (\"leftmost\") one-bit in the two\u0027s complement binary representation of the specified \n\u003ccode\u003elong\u003c/code\u003e value, or 64 if the value is equal to zero."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "numberOfTrailingZeros",
      "comment": "Returns the number of zero bits following the lowest-order (\"rightmost\") one-bit in the two\u0027s complement binary representation of the specified long value. Returns 64 if the specified value has no one-bits in its two\u0027s complement representation, in other words if it is equal to zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value whose number of trailing zeros is to be computed"
        ],
        "return": [
          "the number of zero bits following the lowest-order (\"rightmost\") one-bit in the two\u0027s complement binary representation of the specified \n\u003ccode\u003elong\u003c/code\u003e value, or 64 if the value is equal to zero."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "bitCount",
      "comment": "Returns the number of one-bits in the two\u0027s complement binary representation of the specified long value. This function is sometimes referred to as the population count.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value whose bits are to be counted"
        ],
        "return": [
          "the number of one-bits in the two\u0027s complement binary representation of the specified \n\u003ccode\u003elong\u003c/code\u003e value."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "distance",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "rotateLeft",
      "comment": "Returns the value obtained by rotating the two\u0027s complement binary representation of the specified long value left by the specified number of bits. (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) Note that left rotation with a negative distance is equivalent to right rotation: rotateLeft(val, -distance) \u003d\u003d rotateRight(val, distance). Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative: rotateLeft(val, distance) \u003d\u003d rotateLeft(val, distance \u0026 0x3F).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value whose bits are to be rotated left",
          "\u003ccode\u003edistance\u003c/code\u003e - the number of bit positions to rotate left"
        ],
        "return": [
          "the value obtained by rotating the two\u0027s complement binary representation of the specified \n\u003ccode\u003elong\u003c/code\u003e value left by the specified number of bits."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "distance",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "rotateRight",
      "comment": "Returns the value obtained by rotating the two\u0027s complement binary representation of the specified long value right by the specified number of bits. (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) Note that right rotation with a negative distance is equivalent to left rotation: rotateRight(val, -distance) \u003d\u003d rotateLeft(val, distance). Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative: rotateRight(val, distance) \u003d\u003d rotateRight(val, distance \u0026 0x3F).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value whose bits are to be rotated right",
          "\u003ccode\u003edistance\u003c/code\u003e - the number of bit positions to rotate right"
        ],
        "return": [
          "the value obtained by rotating the two\u0027s complement binary representation of the specified \n\u003ccode\u003elong\u003c/code\u003e value right by the specified number of bits."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "reverse",
      "comment": "Returns the value obtained by reversing the order of the bits in the two\u0027s complement binary representation of the specified long value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value to be reversed"
        ],
        "return": [
          "the value obtained by reversing order of the bits in the specified \n\u003ccode\u003elong\u003c/code\u003e value."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "signum",
      "comment": "Returns the signum function of the specified long value. (The return value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value whose signum is to be computed"
        ],
        "return": [
          "the signum function of the specified \n\u003ccode\u003elong\u003c/code\u003e value."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "reverseBytes",
      "comment": "Returns the value obtained by reversing the order of the bytes in the two\u0027s complement representation of the specified long value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - the value whose bytes are to be reversed"
        ],
        "return": [
          "the value obtained by reversing the bytes in the specified \n\u003ccode\u003elong\u003c/code\u003e value."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "b",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "sum",
      "comment": "Adds two long values together as per the + operator.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/BinaryOperator.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003eBinaryOperator\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the first operand",
          "\u003ccode\u003eb\u003c/code\u003e - the second operand"
        ],
        "return": [
          "the sum of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "b",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "max",
      "comment": "Returns the greater of two long values as if by calling Math.max.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/BinaryOperator.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003eBinaryOperator\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the first operand",
          "\u003ccode\u003eb\u003c/code\u003e - the second operand"
        ],
        "return": [
          "the greater of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "b",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "min",
      "comment": "Returns the smaller of two long values as if by calling Math.min.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/BinaryOperator.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003eBinaryOperator\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the first operand",
          "\u003ccode\u003eb\u003c/code\u003e - the second operand"
        ],
        "return": [
          "the smaller of \n\u003ccode\u003ea\u003c/code\u003e and \n\u003ccode\u003eb\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "java.lang.Long",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "describeConstable",
      "comment": "Returns an Optional containing the nominal descriptor for this instance, which is the instance itself.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html#describeConstable()\"\u003edescribeConstable\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/Constable.html\" title\u003d\"interface in java.lang.constant\"\u003eConstable\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eOptional\u003c/code\u003e\u003c/a\u003e describing the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html\" title\u003d\"class in java.lang\"\u003eLong\u003c/a\u003e instance"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Long",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.invoke.MethodHandles$Lookup",
            "type": "Class"
          },
          "name": "lookup",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "resolveConstantDesc",
      "comment": "Resolves this instance as a ConstantDesc, the result of which is the instance itself.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/ConstantDesc.html#resolveConstantDesc(java.lang.invoke.MethodHandles.Lookup)\"\u003eresolveConstantDesc\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/constant/ConstantDesc.html\" title\u003d\"interface in java.lang.constant\"\u003eConstantDesc\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003elookup\u003c/code\u003e - ignored"
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html\" title\u003d\"class in java.lang\"\u003eLong\u003c/a\u003e instance"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a newly allocated Long object that represents the specified long argument.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to be represented by the \n\u003ccode\u003eLong\u003c/code\u003e object."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.lang.NumberFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a newly allocated Long object that represents the long value indicated by the String parameter. The string is converted to a long value in exactly the manner used by the parseLong method for radix 10.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            },
            {
              "name": "orRemoval",
              "value": true
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e to be converted to a \n\u003ccode\u003eLong\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eString\u003c/code\u003e does not contain a parsable \n\u003ccode\u003elong\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.lang.Long",
  "comment": "The \n\u003ccode\u003eLong\u003c/code\u003e class wraps a value of the primitive type \n\u003ccode\u003e long\u003c/code\u003e in an object. An object of type \n\u003ccode\u003eLong\u003c/code\u003e contains a single field whose type is \n\u003ccode\u003elong\u003c/code\u003e. \n\u003cp\u003e In addition, this class provides several methods for converting a \u003ccode\u003elong\u003c/code\u003e to a \u003ccode\u003eString\u003c/code\u003e and a \u003ccode\u003eString\u003c/code\u003e to a \u003ccode\u003e long\u003c/code\u003e, as well as other constants and methods useful when dealing with a \u003ccode\u003elong\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThis is a \u003ca href\u003d\"../../../java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e class; programmers should treat instances that are \u003ca href\u003d\"#equals(java.lang.Object)\"\u003eequal\u003c/a\u003e as interchangeable and should not use instances for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail. \u003c/p\u003e\n\u003cp\u003eImplementation note: The implementations of the \"bit twiddling\" methods (such as \u003ca href\u003d\"#highestOneBit(long)\"\u003e\u003ccode\u003ehighestOneBit\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#numberOfTrailingZeros(long)\"\u003e\u003ccode\u003enumberOfTrailingZeros\u003c/code\u003e\u003c/a\u003e) are based on material from Henry S. Warren, Jr.\u0027s \u003ci\u003eHacker\u0027s Delight\u003c/i\u003e, (Addison Wesley, 2002).\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.Long\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}