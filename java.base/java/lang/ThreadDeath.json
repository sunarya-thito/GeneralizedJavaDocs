{
  "packageName": "java.lang",
  "simpleName": "ThreadDeath",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Error",
    "type": "Class"
  },
  "members": [
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a ThreadDeath.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.lang.ThreadDeath",
  "comment": "An instance of \n\u003ccode\u003eThreadDeath\u003c/code\u003e is thrown in the victim thread when the (deprecated) \n\u003ca href\u003d\"Thread.html#stop()\"\u003e\u003ccode\u003eThread.stop()\u003c/code\u003e\u003c/a\u003e method is invoked. \n\u003cp\u003eAn application should catch instances of this class only if it must clean up after being terminated asynchronously. If \u003ccode\u003eThreadDeath\u003c/code\u003e is caught by a method, it is important that it be rethrown so that the thread actually dies. \u003c/p\u003e\n\u003cp\u003eThe \u003ca href\u003d\"ThreadGroup.html#uncaughtException(java.lang.Thread,java.lang.Throwable)\"\u003etop-level error handler\u003c/a\u003e does not print out a message if \u003ccode\u003eThreadDeath\u003c/code\u003e is never caught. \u003c/p\u003e\n\u003cp\u003eThe class \u003ccode\u003eThreadDeath\u003c/code\u003e is specifically a subclass of \u003ccode\u003eError\u003c/code\u003e rather than \u003ccode\u003eException\u003c/code\u003e, even though it is a \"normal occurrence\", because many applications catch all occurrences of \u003ccode\u003eException\u003c/code\u003e and then discard the exception.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.lang.ThreadDeath\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}