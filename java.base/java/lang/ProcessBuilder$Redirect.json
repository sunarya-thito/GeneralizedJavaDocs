{
  "packageName": "java.lang",
  "simpleName": "Redirect",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.ProcessBuilder$Redirect",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PIPE",
      "comment": "Indicates that subprocess I/O will be connected to the current Java process over a pipe. This is the default handling of subprocess standard I/O. It will always be true that  \n Redirect.PIPE.file() \u003d\u003d null \u0026\u0026\n Redirect.PIPE.type() \u003d\u003d Redirect.Type.PIPE",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.ProcessBuilder$Redirect",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "INHERIT",
      "comment": "Indicates that subprocess I/O source or destination will be the same as those of the current process. This is the normal behavior of most operating system command interpreters (shells). It will always be true that  \n Redirect.INHERIT.file() \u003d\u003d null \u0026\u0026\n Redirect.INHERIT.type() \u003d\u003d Redirect.Type.INHERIT",
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.lang.ProcessBuilder$Redirect",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DISCARD",
      "comment": "Indicates that subprocess output will be discarded. A typical implementation discards the output by writing to an operating system specific \"null file\". It will always be true that  \n Redirect.DISCARD.file() is the filename appropriate for the operating system\n and may be null \u0026\u0026\n Redirect.DISCARD.type() \u003d\u003d Redirect.Type.WRITE",
      "tagMap": {
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder$Redirect$Type",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "type",
      "comment": "Returns the type of this Redirect.",
      "tagMap": {
        "return": [
          "the type of this \n\u003ccode\u003eRedirect\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "file",
      "comment": "Returns the File source or destination associated with this redirect, or null if there is no such file.",
      "tagMap": {
        "return": [
          "the file associated with this redirect, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder$Redirect",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Returns a redirect to read from the specified file. It will always be true that  \n Redirect.from(file).file() \u003d\u003d file \u0026\u0026\n Redirect.from(file).type() \u003d\u003d Redirect.Type.READ",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The \n\u003ccode\u003eFile\u003c/code\u003e for the \n\u003ccode\u003eRedirect\u003c/code\u003e."
        ],
        "return": [
          "a redirect to read from the specified file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder$Redirect",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "to",
      "comment": "Returns a redirect to write to the specified file. If the specified file exists when the subprocess is started, its previous contents will be discarded. It will always be true that  \n Redirect.to(file).file() \u003d\u003d file \u0026\u0026\n Redirect.to(file).type() \u003d\u003d Redirect.Type.WRITE",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The \n\u003ccode\u003eFile\u003c/code\u003e for the \n\u003ccode\u003eRedirect\u003c/code\u003e."
        ],
        "return": [
          "a redirect to write to the specified file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.ProcessBuilder$Redirect",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "appendTo",
      "comment": "Returns a redirect to append to the specified file. Each write operation first advances the position to the end of the file and then writes the requested data. Whether the advancement of the position and the writing of the data are done in a single atomic operation is system-dependent and therefore unspecified. It will always be true that  \n Redirect.appendTo(file).file() \u003d\u003d file \u0026\u0026\n Redirect.appendTo(file).type() \u003d\u003d Redirect.Type.APPEND",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The \n\u003ccode\u003eFile\u003c/code\u003e for the \n\u003ccode\u003eRedirect\u003c/code\u003e."
        ],
        "return": [
          "a redirect to append to the specified file"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares the specified object with this Redirect for equality. Returns true if and only if the two objects are identical or both objects are Redirect instances of the same type associated with non-null equal File instances.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is the same as the obj argument; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code value for this Redirect.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this \n\u003ccode\u003eRedirect\u003c/code\u003e"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.lang.ProcessBuilder$Redirect$Type"
  ],
  "memberType": "JavaClass",
  "modifiers": 1033,
  "name": "java.lang.ProcessBuilder$Redirect",
  "comment": "Represents a source of subprocess input or a destination of subprocess output. Each \n\u003ccode\u003eRedirect\u003c/code\u003e instance is one of the following: \n\u003cul\u003e \n \u003cli\u003ethe special value \u003ca href\u003d\"#PIPE\"\u003e\u003ccode\u003eRedirect.PIPE\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003ethe special value \u003ca href\u003d\"#INHERIT\"\u003e\u003ccode\u003eRedirect.INHERIT\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003ethe special value \u003ca href\u003d\"#DISCARD\"\u003e\u003ccode\u003eRedirect.DISCARD\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003ea redirection to read from a file, created by an invocation of \u003ca href\u003d\"#from(java.io.File)\"\u003e\u003ccode\u003eRedirect.from(File)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003ea redirection to write to a file, created by an invocation of \u003ca href\u003d\"#to(java.io.File)\"\u003e\u003ccode\u003eRedirect.to(File)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003ea redirection to append to a file, created by an invocation of \u003ca href\u003d\"#appendTo(java.io.File)\"\u003e\u003ccode\u003eRedirect.appendTo(File)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003eEach of the above categories has an associated unique \u003ca href\u003d\"ProcessBuilder.Redirect.Type.html\" title\u003d\"enum class in java.lang\"\u003e\u003ccode\u003eType\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}