{
  "packageName": "java.math",
  "simpleName": "BigInteger",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Number",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZERO",
      "comment": "The BigInteger constant zero.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.2"
        ]
      }
    },
    {
      "type": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ONE",
      "comment": "The BigInteger constant one.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.2"
        ]
      }
    },
    {
      "type": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TWO",
      "comment": "The BigInteger constant two.",
      "annotations": [],
      "tagMap": {
        "since": [
          "9"
        ]
      }
    },
    {
      "type": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TEN",
      "comment": "The BigInteger constant ten.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bitLength",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Random",
            "type": "Class"
          },
          "name": "rnd",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "probablePrime",
      "comment": "Returns a positive BigInteger that is probably prime, with the specified bitLength. The probability that a BigInteger returned by this method is composite does not exceed 2-100.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#bitLength()\"\u003e\u003ccode\u003ebitLength()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebitLength\u003c/code\u003e - bitLength of the returned BigInteger.",
          "\u003ccode\u003ernd\u003c/code\u003e - source of random bits used to select candidates to be tested for primality."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003ebitLength \u0026lt; 2\u003c/code\u003e or \n\u003ccode\u003ebitLength\u003c/code\u003e is too large."
        ],
        "return": [
          "a BigInteger of \n\u003ccode\u003ebitLength\u003c/code\u003e bits that is probably prime"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextProbablePrime",
      "comment": "Returns the first integer greater than this BigInteger that is probably prime. The probability that the number returned by this method is composite does not exceed 2-100. This method will never skip over a prime when searching: if it returns p, there is no prime q such that this \u003c q \u003c p.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003ethis \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003ethis\u003c/code\u003e is too large."
        ],
        "return": [
          "the first integer greater than this \n\u003ccode\u003eBigInteger\u003c/code\u003e that is probably prime."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns a BigInteger whose value is equal to that of the specified long.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "This static factory method is provided in preference to a (\n\u003ccode\u003elong\u003c/code\u003e) constructor because it allows for reuse of frequently used BigIntegers."
        ],
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value of the BigInteger to return."
        ],
        "return": [
          "a BigInteger with the specified value."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Returns a BigInteger whose value is (this + val).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value to be added to this BigInteger."
        ],
        "return": [
          "\u003ccode\u003ethis + val\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtract",
      "comment": "Returns a BigInteger whose value is (this - val).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value to be subtracted from this BigInteger."
        ],
        "return": [
          "\u003ccode\u003ethis - val\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "multiply",
      "comment": "Returns a BigInteger whose value is (this * val).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value to be multiplied by this BigInteger."
        ],
        "implNote": [
          "An implementation may offer better algorithmic performance when \n\u003ccode\u003eval \u003d\u003d this\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003ethis * val\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divide",
      "comment": "Returns a BigInteger whose value is (this / val).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value by which this BigInteger is to be divided."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eval\u003c/code\u003e is zero."
        ],
        "return": [
          "\u003ccode\u003ethis / val\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divideAndRemainder",
      "comment": "Returns an array of two BigIntegers containing (this / val) followed by (this % val).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value by which this BigInteger is to be divided, and the remainder computed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eval\u003c/code\u003e is zero."
        ],
        "return": [
          "an array of two BigIntegers: the quotient \n\u003ccode\u003e(this / val)\u003c/code\u003e is the initial element, and the remainder \n\u003ccode\u003e(this % val)\u003c/code\u003e is the final element."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remainder",
      "comment": "Returns a BigInteger whose value is (this % val).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value by which this BigInteger is to be divided, and the remainder computed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eval\u003c/code\u003e is zero."
        ],
        "return": [
          "\u003ccode\u003ethis % val\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "exponent",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "pow",
      "comment": "Returns a BigInteger whose value is (thisexponent). Note that exponent is an integer rather than a BigInteger.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexponent\u003c/code\u003e - exponent to which this BigInteger is to be raised."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003eexponent\u003c/code\u003e is negative. (This would cause the operation to yield a non-integer value.)"
        ],
        "return": [
          "\u003ccode\u003ethis\u003csup\u003eexponent\u003c/sup\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sqrt",
      "comment": "Returns the integer square root of this BigInteger. The integer square root of the corresponding mathematical integer n is the largest mathematical integer s such that s*s \u003c\u003d n. It is equal to the value of floor(sqrt(n)), where sqrt(n) denotes the real square root of n treated as a real. Note that the integer square root will be less than the real square root if the latter is not representable as an integral value.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ethis\u003c/code\u003e is negative. (The square root of a negative integer \n\u003ccode\u003eval\u003c/code\u003e is \n\u003ccode\u003e(i * sqrt(-val))\u003c/code\u003e where \n\u003ci\u003ei\u003c/i\u003e is the \n\u003ci\u003eimaginary unit\u003c/i\u003e and is equal to \n\u003ccode\u003esqrt(-1)\u003c/code\u003e.)"
        ],
        "return": [
          "the integer square root of \n\u003ccode\u003ethis\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sqrtAndRemainder",
      "comment": "Returns an array of two BigIntegers containing the integer square root s of this and its remainder this - s*s, respectively.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#sqrt()\"\u003e\u003ccode\u003esqrt()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ethis\u003c/code\u003e is negative. (The square root of a negative integer \n\u003ccode\u003eval\u003c/code\u003e is \n\u003ccode\u003e(i * sqrt(-val))\u003c/code\u003e where \n\u003ci\u003ei\u003c/i\u003e is the \n\u003ci\u003eimaginary unit\u003c/i\u003e and is equal to \n\u003ccode\u003esqrt(-1)\u003c/code\u003e.)"
        ],
        "return": [
          "an array of two BigIntegers with the integer square root at offset 0 and the remainder at offset 1"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "gcd",
      "comment": "Returns a BigInteger whose value is the greatest common divisor of abs(this) and abs(val). Returns 0 if this \u003d\u003d 0 \u0026\u0026 val \u003d\u003d 0.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value with which the GCD is to be computed."
        ],
        "return": [
          "\u003ccode\u003eGCD(abs(this), abs(val))\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "abs",
      "comment": "Returns a BigInteger whose value is the absolute value of this BigInteger.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003eabs(this)\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "negate",
      "comment": "Returns a BigInteger whose value is (-this).",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003e-this\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "signum",
      "comment": "Returns the signum function of this BigInteger.",
      "annotations": [],
      "tagMap": {
        "return": [
          "-1, 0 or 1 as the value of this BigInteger is negative, zero or positive."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mod",
      "comment": "Returns a BigInteger whose value is (this mod m). This method differs from remainder in that it always returns a non-negative BigInteger.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#remainder(java.math.BigInteger)\"\u003e\u003ccode\u003eremainder(java.math.BigInteger)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the modulus."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003em\u003c/code\u003e ≤ 0"
        ],
        "return": [
          "\u003ccode\u003ethis mod m\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "exponent",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modPow",
      "comment": "Returns a BigInteger whose value is (thisexponent mod m). (Unlike pow, this method permits negative exponents.)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#modInverse(java.math.BigInteger)\"\u003e\u003ccode\u003emodInverse(java.math.BigInteger)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eexponent\u003c/code\u003e - the exponent.",
          "\u003ccode\u003em\u003c/code\u003e - the modulus."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003em\u003c/code\u003e ≤ 0 or the exponent is negative and this BigInteger is not \n\u003ci\u003erelatively prime\u003c/i\u003e to \n\u003ccode\u003em\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003ethis\u003csup\u003eexponent\u003c/sup\u003e mod m\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "modInverse",
      "comment": "Returns a BigInteger whose value is (this-1 mod m).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the modulus."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003e m\u003c/code\u003e ≤ 0, or this BigInteger has no multiplicative inverse mod m (that is, this BigInteger is not \n\u003ci\u003erelatively prime\u003c/i\u003e to m)."
        ],
        "return": [
          "\u003ccode\u003ethis\u003c/code\u003e\n\u003csup\u003e-1\u003c/sup\u003e \n\u003ccode\u003emod m\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shiftLeft",
      "comment": "Returns a BigInteger whose value is (this \u003c\u003c n). The shift distance, n, may be negative, in which case this method performs a right shift. (Computes floor(this * 2n).)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#shiftRight(int)\"\u003e\u003ccode\u003eshiftRight(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - shift distance, in bits."
        ],
        "return": [
          "\u003ccode\u003ethis \u0026lt;\u0026lt; n\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shiftRight",
      "comment": "Returns a BigInteger whose value is (this \u003e\u003e n). Sign extension is performed. The shift distance, n, may be negative, in which case this method performs a left shift. (Computes floor(this / 2n).)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#shiftLeft(int)\"\u003e\u003ccode\u003eshiftLeft(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - shift distance, in bits."
        ],
        "return": [
          "\u003ccode\u003ethis \u0026gt;\u0026gt; n\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "and",
      "comment": "Returns a BigInteger whose value is (this \u0026 val). (This method returns a negative BigInteger if and only if this and val are both negative.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value to be AND\u0027ed with this BigInteger."
        ],
        "return": [
          "\u003ccode\u003ethis \u0026amp; val\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "or",
      "comment": "Returns a BigInteger whose value is (this | val). (This method returns a negative BigInteger if and only if either this or val is negative.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value to be OR\u0027ed with this BigInteger."
        ],
        "return": [
          "\u003ccode\u003ethis | val\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "xor",
      "comment": "Returns a BigInteger whose value is (this ^ val). (This method returns a negative BigInteger if and only if exactly one of this and val are negative.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value to be XOR\u0027ed with this BigInteger."
        ],
        "return": [
          "\u003ccode\u003ethis ^ val\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "not",
      "comment": "Returns a BigInteger whose value is (~this). (This method returns a negative value if and only if this BigInteger is non-negative.)",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003e~this\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "andNot",
      "comment": "Returns a BigInteger whose value is (this \u0026 ~val). This method, which is equivalent to and(val.not()), is provided as a convenience for masking operations. (This method returns a negative BigInteger if and only if this is negative and val is positive.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value to be complemented and AND\u0027ed with this BigInteger."
        ],
        "return": [
          "\u003ccode\u003ethis \u0026amp; ~val\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "testBit",
      "comment": "Returns true if and only if the designated bit is set. (Computes ((this \u0026 (1\u003c\u003cn)) !\u003d 0).)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - index of bit to test."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003en\u003c/code\u003e is negative."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the designated bit is set."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBit",
      "comment": "Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit set. (Computes (this | (1\u003c\u003cn)).)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - index of bit to set."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003en\u003c/code\u003e is negative."
        ],
        "return": [
          "\u003ccode\u003ethis | (1\u0026lt;\u0026lt;n)\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clearBit",
      "comment": "Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared. (Computes (this \u0026 ~(1\u003c\u003cn)).)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - index of bit to clear."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003en\u003c/code\u003e is negative."
        ],
        "return": [
          "\u003ccode\u003ethis \u0026amp; ~(1\u0026lt;\u0026lt;n)\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "flipBit",
      "comment": "Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped. (Computes (this ^ (1\u003c\u003cn)).)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - index of bit to flip."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003en\u003c/code\u003e is negative."
        ],
        "return": [
          "\u003ccode\u003ethis ^ (1\u0026lt;\u0026lt;n)\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLowestSetBit",
      "comment": "Returns the index of the rightmost (lowest-order) one bit in this BigInteger (the number of zero bits to the right of the rightmost one bit). Returns -1 if this BigInteger contains no one bits. (Computes (this \u003d\u003d 0? -1 : log2(this \u0026 -this)).)",
      "annotations": [],
      "tagMap": {
        "return": [
          "index of the rightmost one bit in this BigInteger."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "bitLength",
      "comment": "Returns the number of bits in the minimal two\u0027s-complement representation of this BigInteger, excluding a sign bit. For positive BigIntegers, this is equivalent to the number of bits in the ordinary binary representation. For zero this method returns 0. (Computes (ceil(log2(this \u003c 0 ? -this : this+1))).)",
      "annotations": [],
      "tagMap": {
        "return": [
          "number of bits in the minimal two\u0027s-complement representation of this BigInteger, \n\u003cem\u003eexcluding\u003c/em\u003e a sign bit."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "bitCount",
      "comment": "Returns the number of bits in the two\u0027s complement representation of this BigInteger that differ from its sign bit. This method is useful when implementing bit-vector style sets atop BigIntegers.",
      "annotations": [],
      "tagMap": {
        "return": [
          "number of bits in the two\u0027s complement representation of this BigInteger that differ from its sign bit."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "certainty",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isProbablePrime",
      "comment": "Returns true if this BigInteger is probably prime, false if it\u0027s definitely composite. If certainty is ≤ 0, true is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecertainty\u003c/code\u003e - a measure of the uncertainty that the caller is willing to tolerate: if the call returns \n\u003ccode\u003etrue\u003c/code\u003e the probability that this BigInteger is prime exceeds (1 - 1/2\n\u003csup\u003e\u003ccode\u003ecertainty\u003c/code\u003e\u003c/sup\u003e). The execution time of this method is proportional to the value of this parameter."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this BigInteger is probably prime, \n\u003ccode\u003efalse\u003c/code\u003e if it\u0027s definitely composite."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this BigInteger with the specified BigInteger. This method is provided in preference to individual methods for each of the six boolean comparison operators (\u003c, \u003d\u003d, \u003e, \u003e\u003d, !\u003d, \u003c\u003d). The suggested idiom for performing these comparisons is: (x.compareTo(y) \u003cop\u003e 0), where \u003cop\u003e is one of the six comparison operators.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html\" title\u003d\"class in java.math\"\u003eBigInteger\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - BigInteger to which this BigInteger is to be compared."
        ],
        "return": [
          "-1, 0 or 1 as this BigInteger is numerically less than, equal to, or greater than \n\u003ccode\u003eval\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "x",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this BigInteger with the specified Object for equality.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - Object to which this BigInteger is to be compared."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the specified Object is a BigInteger whose value is numerically equal to this BigInteger."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "min",
      "comment": "Returns the minimum of this BigInteger and val.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value with which the minimum is to be computed."
        ],
        "return": [
          "the BigInteger whose value is the lesser of this BigInteger and \n\u003ccode\u003eval\u003c/code\u003e. If they are equal, either may be returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "max",
      "comment": "Returns the maximum of this BigInteger and val.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value with which the maximum is to be computed."
        ],
        "return": [
          "the BigInteger whose value is the greater of this and \n\u003ccode\u003eval\u003c/code\u003e. If they are equal, either may be returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code for this BigInteger.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "hash code for this BigInteger."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the String representation of this BigInteger in the given radix. If the radix is outside the range from Character.MIN_RADIX to Character.MAX_RADIX inclusive, it will default to 10 (as is the case for Integer.toString). The digit-to-character mapping provided by Character.forDigit is used, and a minus sign is prepended if appropriate. (This representation is compatible with the (String, int) constructor.)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#toString(int,int)\"\u003e\u003ccode\u003eInteger.toString(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#forDigit(int,int)\"\u003e\u003ccode\u003eCharacter.forDigit(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#%3Cinit%3E(java.lang.String,int)\"\u003e\u003ccode\u003eBigInteger(java.lang.String, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eradix\u003c/code\u003e - radix of the String representation."
        ],
        "return": [
          "String representation of this BigInteger in the given radix."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the decimal String representation of this BigInteger. The digit-to-character mapping provided by Character.forDigit is used, and a minus sign is prepended if appropriate. (This representation is compatible with the (String) constructor, and allows for String concatenation with Java\u0027s + operator.)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#forDigit(int,int)\"\u003e\u003ccode\u003eCharacter.forDigit(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#%3Cinit%3E(java.lang.String)\"\u003e\u003ccode\u003eBigInteger(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "decimal String representation of this BigInteger."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toByteArray",
      "comment": "Returns a byte array containing the two\u0027s-complement representation of this BigInteger. The byte array will be in big-endian byte-order: the most significant byte is in the zeroth element. The array will contain the minimum number of bytes required to represent this BigInteger, including at least one sign bit, which is (ceil((this.bitLength() + 1)/8)). (This representation is compatible with the (byte[]) constructor.)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#%3Cinit%3E(byte%5B%5D)\"\u003e\u003ccode\u003eBigInteger(byte[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a byte array containing the two\u0027s-complement representation of this BigInteger."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intValue",
      "comment": "Converts this BigInteger to an int. This conversion is analogous to a narrowing primitive conversion from long to int as defined in The Java Language Specification: if this BigInteger is too big to fit in an int, only the low-order 32 bits are returned. Note that this conversion can lose information about the overall magnitude of the BigInteger value as well as return a result with the opposite sign.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#intValueExact()\"\u003e\u003ccode\u003eintValueExact()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#intValue()\"\u003eintValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this BigInteger converted to an \n\u003ccode\u003eint\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longValue",
      "comment": "Converts this BigInteger to a long. This conversion is analogous to a narrowing primitive conversion from long to int as defined in The Java Language Specification: if this BigInteger is too big to fit in a long, only the low-order 64 bits are returned. Note that this conversion can lose information about the overall magnitude of the BigInteger value as well as return a result with the opposite sign.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#longValueExact()\"\u003e\u003ccode\u003elongValueExact()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#longValue()\"\u003elongValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this BigInteger converted to a \n\u003ccode\u003elong\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "floatValue",
      "comment": "Converts this BigInteger to a float. This conversion is similar to the narrowing primitive conversion from double to float as defined in The Java Language Specification: if this BigInteger has too great a magnitude to represent as a float, it will be converted to Float.NEGATIVE_INFINITY or Float.POSITIVE_INFINITY as appropriate. Note that even when the return value is finite, this conversion can lose information about the precision of the BigInteger value.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#floatValue()\"\u003efloatValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this BigInteger converted to a \n\u003ccode\u003efloat\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubleValue",
      "comment": "Converts this BigInteger to a double. This conversion is similar to the narrowing primitive conversion from double to float as defined in The Java Language Specification: if this BigInteger has too great a magnitude to represent as a double, it will be converted to Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY as appropriate. Note that even when the return value is finite, this conversion can lose information about the precision of the BigInteger value.",
      "annotations": [],
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#doubleValue()\"\u003edoubleValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this BigInteger converted to a \n\u003ccode\u003edouble\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longValueExact",
      "comment": "Converts this BigInteger to a long, checking for lost information. If the value of this BigInteger is out of the range of the long type, then an ArithmeticException is thrown.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#longValue()\"\u003e\u003ccode\u003elongValue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the value of \n\u003ccode\u003ethis\u003c/code\u003e will not exactly fit in a \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "return": [
          "this \n\u003ccode\u003eBigInteger\u003c/code\u003e converted to a \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intValueExact",
      "comment": "Converts this BigInteger to an int, checking for lost information. If the value of this BigInteger is out of the range of the int type, then an ArithmeticException is thrown.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#intValue()\"\u003e\u003ccode\u003eintValue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the value of \n\u003ccode\u003ethis\u003c/code\u003e will not exactly fit in an \n\u003ccode\u003eint\u003c/code\u003e."
        ],
        "return": [
          "this \n\u003ccode\u003eBigInteger\u003c/code\u003e converted to an \n\u003ccode\u003eint\u003c/code\u003e."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shortValueExact",
      "comment": "Converts this BigInteger to a short, checking for lost information. If the value of this BigInteger is out of the range of the short type, then an ArithmeticException is thrown.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#shortValue()\"\u003e\u003ccode\u003eNumber.shortValue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the value of \n\u003ccode\u003ethis\u003c/code\u003e will not exactly fit in a \n\u003ccode\u003eshort\u003c/code\u003e."
        ],
        "return": [
          "this \n\u003ccode\u003eBigInteger\u003c/code\u003e converted to a \n\u003ccode\u003eshort\u003c/code\u003e."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "byteValueExact",
      "comment": "Converts this BigInteger to a byte, checking for lost information. If the value of this BigInteger is out of the range of the byte type, then an ArithmeticException is thrown.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#byteValue()\"\u003e\u003ccode\u003eNumber.byteValue()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the value of \n\u003ccode\u003ethis\u003c/code\u003e will not exactly fit in a \n\u003ccode\u003ebyte\u003c/code\u003e."
        ],
        "return": [
          "this \n\u003ccode\u003eBigInteger\u003c/code\u003e converted to a \n\u003ccode\u003ebyte\u003c/code\u003e."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "val",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "off",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "len",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a byte sub-array containing the two\u0027s-complement binary representation of a BigInteger into a BigInteger. The sub-array is specified via an offset into the array and a length. The sub-array is assumed to be in big-endian byte-order: the most significant byte is the element at index off. The val array is assumed to be unchanged for the duration of the constructor call. An IndexOutOfBoundsException is thrown if the length of the array val is non-zero and either off is negative, len is negative, or off+len is greater than the length of val.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - byte array containing a sub-array which is the big-endian two\u0027s-complement binary representation of a BigInteger.",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset of the binary representation.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of bytes to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003eval\u003c/code\u003e is zero bytes long.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the provided array offset and length would cause an index into the byte array to be negative or greater than or equal to the array length."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a byte array containing the two\u0027s-complement binary representation of a BigInteger into a BigInteger. The input array is assumed to be in big-endian byte-order: the most significant byte is in the zeroth element. The val array is assumed to be unchanged for the duration of the constructor call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - big-endian two\u0027s-complement binary representation of a BigInteger."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003eval\u003c/code\u003e is zero bytes long."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "signum",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "magnitude",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "off",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "len",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates the sign-magnitude representation of a BigInteger into a BigInteger. The sign is represented as an integer signum value: -1 for negative, 0 for zero, or 1 for positive. The magnitude is a sub-array of a byte array in big-endian byte-order: the most significant byte is the element at index off. A zero value of the length len is permissible, and will result in a BigInteger value of 0, whether signum is -1, 0 or 1. The magnitude array is assumed to be unchanged for the duration of the constructor call. An IndexOutOfBoundsException is thrown if the length of the array magnitude is non-zero and either off is negative, len is negative, or off+len is greater than the length of magnitude.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esignum\u003c/code\u003e - signum of the number (-1 for negative, 0 for zero, 1 for positive).",
          "\u003ccode\u003emagnitude\u003c/code\u003e - big-endian binary representation of the magnitude of the number.",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset of the binary representation.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of bytes to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003esignum\u003c/code\u003e is not one of the three legal values (-1, 0, and 1), or \n\u003ccode\u003esignum\u003c/code\u003e is 0 and \n\u003ccode\u003emagnitude\u003c/code\u003e contains one or more non-zero bytes.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the provided array offset and length would cause an index into the byte array to be negative or greater than or equal to the array length."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "signum",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "magnitude",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates the sign-magnitude representation of a BigInteger into a BigInteger. The sign is represented as an integer signum value: -1 for negative, 0 for zero, or 1 for positive. The magnitude is a byte array in big-endian byte-order: the most significant byte is the zeroth element. A zero-length magnitude array is permissible, and will result in a BigInteger value of 0, whether signum is -1, 0 or 1. The magnitude array is assumed to be unchanged for the duration of the constructor call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esignum\u003c/code\u003e - signum of the number (-1 for negative, 0 for zero, 1 for positive).",
          "\u003ccode\u003emagnitude\u003c/code\u003e - big-endian binary representation of the magnitude of the number."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003esignum\u003c/code\u003e is not one of the three legal values (-1, 0, and 1), or \n\u003ccode\u003esignum\u003c/code\u003e is 0 and \n\u003ccode\u003emagnitude\u003c/code\u003e contains one or more non-zero bytes."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "radix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates the String representation of a BigInteger in the specified radix into a BigInteger. The String representation consists of an optional minus or plus sign followed by a sequence of one or more digits in the specified radix. The character-to-digit mapping is provided by Character.digit. The String may not contain any extraneous characters (whitespace, for example).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - String representation of BigInteger.",
          "\u003ccode\u003eradix\u003c/code\u003e - radix to be used in interpreting \n\u003ccode\u003eval\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003eval\u003c/code\u003e is not a valid representation of a BigInteger in the specified radix, or \n\u003ccode\u003eradix\u003c/code\u003e is outside the range from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MIN_RADIX\"\u003e\u003ccode\u003eCharacter.MIN_RADIX\u003c/code\u003e\u003c/a\u003e to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#MAX_RADIX\"\u003e\u003ccode\u003eCharacter.MAX_RADIX\u003c/code\u003e\u003c/a\u003e, inclusive."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "val",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates the decimal String representation of a BigInteger into a BigInteger. The String representation consists of an optional minus or plus sign followed by a sequence of one or more decimal digits. The character-to-digit mapping is provided by Character.digit. The String may not contain any extraneous characters (whitespace, for example).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - decimal String representation of BigInteger."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003eval\u003c/code\u003e is not a valid representation of a BigInteger."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "numBits",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Random",
            "type": "Class"
          },
          "name": "rnd",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a randomly generated BigInteger, uniformly distributed over the range 0 to (2numBits - 1), inclusive. The uniformity of the distribution assumes that a fair source of random bits is provided in rnd. Note that this constructor always constructs a non-negative BigInteger.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#bitLength()\"\u003e\u003ccode\u003ebitLength()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enumBits\u003c/code\u003e - maximum bitLength of the new BigInteger.",
          "\u003ccode\u003ernd\u003c/code\u003e - source of randomness to be used in computing the new BigInteger."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003enumBits\u003c/code\u003e is negative."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "bitLength",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "certainty",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Random",
            "type": "Class"
          },
          "name": "rnd",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a randomly generated positive BigInteger that is probably prime, with the specified bitLength.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#bitLength()\"\u003e\u003ccode\u003ebitLength()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "It is recommended that the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#probablePrime(int,java.util.Random)\"\u003e\u003ccode\u003eprobablePrime\u003c/code\u003e\u003c/a\u003e method be used in preference to this constructor unless there is a compelling need to specify a certainty."
        ],
        "param": [
          "\u003ccode\u003ebitLength\u003c/code\u003e - bitLength of the returned BigInteger.",
          "\u003ccode\u003ecertainty\u003c/code\u003e - a measure of the uncertainty that the caller is willing to tolerate. The probability that the new BigInteger represents a prime number will exceed (1 - 1/2\n\u003csup\u003e\u003ccode\u003ecertainty\u003c/code\u003e\u003c/sup\u003e). The execution time of this constructor is proportional to the value of this parameter.",
          "\u003ccode\u003ernd\u003c/code\u003e - source of random bits used to select candidates to be tested for primality."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - \n\u003ccode\u003ebitLength \u0026lt; 2\u003c/code\u003e or \n\u003ccode\u003ebitLength\u003c/code\u003e is too large."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.math.BigInteger",
  "annotations": [],
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-4.html#jls-4.2.2\"\u003e4.2.2 Integer Operations\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eBigDecimal\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.math.BigInteger\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "implNote": [
      "In the reference implementation, BigInteger constructors and operations throw \n\u003ccode\u003eArithmeticException\u003c/code\u003e when the result is out of the supported range of -2\n\u003csup\u003e\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e\u003c/sup\u003e (exclusive) to +2\n\u003csup\u003e\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e\u003c/sup\u003e (exclusive)."
    ],
    "since": [
      "1.1"
    ]
  }
}