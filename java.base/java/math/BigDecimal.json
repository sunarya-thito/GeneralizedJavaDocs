{
  "packageName": "java.math",
  "simpleName": "BigDecimal",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Number",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZERO",
      "comment": "The value 0, with a scale of 0.",
      "tagMap": {
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ONE",
      "comment": "The value 1, with a scale of 0.",
      "tagMap": {
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TEN",
      "comment": "The value 10, with a scale of 0.",
      "tagMap": {
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROUND_UP",
      "comment": "Rounding mode to round away from zero. Always increments the digit prior to a nonzero discarded fraction. Note that this rounding mode never decreases the magnitude of the calculated value.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.math.BigDecimal.ROUND_UP\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROUND_DOWN",
      "comment": "Rounding mode to round towards zero. Never increments the digit prior to a discarded fraction (i.e., truncates). Note that this rounding mode never increases the magnitude of the calculated value.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.math.BigDecimal.ROUND_DOWN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROUND_CEILING",
      "comment": "Rounding mode to round towards positive infinity. If the BigDecimal is positive, behaves as for ROUND_UP; if negative, behaves as for ROUND_DOWN. Note that this rounding mode never decreases the calculated value.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.math.BigDecimal.ROUND_CEILING\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROUND_FLOOR",
      "comment": "Rounding mode to round towards negative infinity. If the BigDecimal is positive, behave as for ROUND_DOWN; if negative, behave as for ROUND_UP. Note that this rounding mode never increases the calculated value.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.math.BigDecimal.ROUND_FLOOR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROUND_HALF_UP",
      "comment": "Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant, in which case round up. Behaves as for ROUND_UP if the discarded fraction is ≥ 0.5; otherwise, behaves as for ROUND_DOWN. Note that this is the rounding mode that most of us were taught in grade school.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.math.BigDecimal.ROUND_HALF_UP\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROUND_HALF_DOWN",
      "comment": "Rounding mode to round towards \"nearest neighbor\" unless both neighbors are equidistant, in which case round down. Behaves as for ROUND_UP if the discarded fraction is \u003e 0.5; otherwise, behaves as for ROUND_DOWN.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.math.BigDecimal.ROUND_HALF_DOWN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROUND_HALF_EVEN",
      "comment": "Rounding mode to round towards the \"nearest neighbor\" unless both neighbors are equidistant, in which case, round towards the even neighbor. Behaves as for ROUND_HALF_UP if the digit to the left of the discarded fraction is odd; behaves as for ROUND_HALF_DOWN if it\u0027s even. Note that this is the rounding mode that minimizes cumulative error when applied repeatedly over a sequence of calculations.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.math.BigDecimal.ROUND_HALF_EVEN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROUND_UNNECESSARY",
      "comment": "Rounding mode to assert that the requested operation has an exact result, hence no rounding is necessary. If this rounding mode is specified on an operation that yields an inexact result, an ArithmeticException is thrown.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.math.BigDecimal.ROUND_UNNECESSARY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "unscaledVal"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Translates a long unscaled value and an int scale into a BigDecimal.",
      "tagMap": {
        "apiNote": [
          "This static factory method is provided in preference to a (\n\u003ccode\u003elong\u003c/code\u003e, \n\u003ccode\u003eint\u003c/code\u003e) constructor because it allows for reuse of frequently used \n\u003ccode\u003eBigDecimal\u003c/code\u003e values."
        ],
        "param": [
          "\u003ccode\u003eunscaledVal\u003c/code\u003e - unscaled value of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003escale\u003c/code\u003e - scale of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eBigDecimal\u003c/code\u003e whose value is \n\u003ccode\u003e(unscaledVal × 10\u003csup\u003e-scale\u003c/sup\u003e)\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Translates a long value into a BigDecimal with a scale of zero.",
      "tagMap": {
        "apiNote": [
          "This static factory method is provided in preference to a (\n\u003ccode\u003elong\u003c/code\u003e) constructor because it allows for reuse of frequently used \n\u003ccode\u003eBigDecimal\u003c/code\u003e values."
        ],
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eBigDecimal\u003c/code\u003e whose value is \n\u003ccode\u003eval\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Translates a double into a BigDecimal, using the double\u0027s canonical string representation provided by the Double.toString(double) method.",
      "tagMap": {
        "apiNote": [
          "This is generally the preferred way to convert a \n\u003ccode\u003edouble\u003c/code\u003e (or \n\u003ccode\u003efloat\u003c/code\u003e) into a \n\u003ccode\u003eBigDecimal\u003c/code\u003e, as the value returned is equal to that resulting from constructing a \n\u003ccode\u003eBigDecimal\u003c/code\u003e from the result of using \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Double.html#toString(double)\"\u003e\u003ccode\u003eDouble.toString(double)\u003c/code\u003e\u003c/a\u003e."
        ],
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - \n\u003ccode\u003edouble\u003c/code\u003e to convert to a \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eval\u003c/code\u003e is infinite or NaN."
        ],
        "return": [
          "a \n\u003ccode\u003eBigDecimal\u003c/code\u003e whose value is equal to or approximately equal to the value of \n\u003ccode\u003eval\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "augend"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale()).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaugend\u003c/code\u003e - value to be added to this \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003ethis + augend\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "augend"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Returns a BigDecimal whose value is (this + augend), with rounding according to the context settings. If either number is zero and the precision setting is nonzero then the other number, rounded if necessary, is used as the result.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaugend\u003c/code\u003e - value to be added to this \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003ethis + augend\u003c/code\u003e, rounded as necessary."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "subtrahend"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtract",
      "comment": "Returns a BigDecimal whose value is (this - subtrahend), and whose scale is max(this.scale(), subtrahend.scale()).",
      "tagMap": {
        "param": [
          "\u003ccode\u003esubtrahend\u003c/code\u003e - value to be subtracted from this \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003ethis - subtrahend\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "subtrahend"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subtract",
      "comment": "Returns a BigDecimal whose value is (this - subtrahend), with rounding according to the context settings. If subtrahend is zero then this, rounded if necessary, is used as the result. If this is zero then the result is subtrahend.negate(mc).",
      "tagMap": {
        "param": [
          "\u003ccode\u003esubtrahend\u003c/code\u003e - value to be subtracted from this \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003ethis - subtrahend\u003c/code\u003e, rounded as necessary."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "multiplicand"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "multiply",
      "comment": "Returns a BigDecimal whose value is (this × multiplicand), and whose scale is (this.scale() + multiplicand.scale()).",
      "tagMap": {
        "param": [
          "\u003ccode\u003emultiplicand\u003c/code\u003e - value to be multiplied by this \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003ethis * multiplicand\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "multiplicand"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "multiply",
      "comment": "Returns a BigDecimal whose value is (this × multiplicand), with rounding according to the context settings.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emultiplicand\u003c/code\u003e - value to be multiplied by this \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003ethis * multiplicand\u003c/code\u003e, rounded as necessary."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scale"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "roundingMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divide",
      "comment": "Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified. If rounding must be performed to generate a result with the specified scale, the specified rounding mode is applied.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_UP\"\u003e\u003ccode\u003eROUND_UP\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_DOWN\"\u003e\u003ccode\u003eROUND_DOWN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_CEILING\"\u003e\u003ccode\u003eROUND_CEILING\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_FLOOR\"\u003e\u003ccode\u003eROUND_FLOOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_HALF_UP\"\u003e\u003ccode\u003eROUND_HALF_UP\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_HALF_DOWN\"\u003e\u003ccode\u003eROUND_HALF_DOWN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_HALF_EVEN\"\u003e\u003ccode\u003eROUND_HALF_EVEN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_UNNECESSARY\"\u003e\u003ccode\u003eROUND_UNNECESSARY\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided.",
          "\u003ccode\u003escale\u003c/code\u003e - scale of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e quotient to be returned.",
          "\u003ccode\u003eroundingMode\u003c/code\u003e - rounding mode to apply."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edivisor\u003c/code\u003e is zero, \n\u003ccode\u003eroundingMode\u003d\u003dROUND_UNNECESSARY\u003c/code\u003e and the specified scale is insufficient to represent the result of the division exactly.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eroundingMode\u003c/code\u003e does not represent a valid rounding mode."
        ],
        "return": [
          "\u003ccode\u003ethis / divisor\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scale"
          }
        },
        {
          "type": {
            "name": "java.math.RoundingMode",
            "type": "Class"
          },
          "field": {
            "name": "roundingMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divide",
      "comment": "Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified. If rounding must be performed to generate a result with the specified scale, the specified rounding mode is applied.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided.",
          "\u003ccode\u003escale\u003c/code\u003e - scale of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e quotient to be returned.",
          "\u003ccode\u003eroundingMode\u003c/code\u003e - rounding mode to apply."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edivisor\u003c/code\u003e is zero, \n\u003ccode\u003eroundingMode\u003d\u003dRoundingMode.UNNECESSARY\u003c/code\u003e and the specified scale is insufficient to represent the result of the division exactly."
        ],
        "return": [
          "\u003ccode\u003ethis / divisor\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "roundingMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divide",
      "comment": "Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale(). If rounding must be performed to generate a result with the given scale, the specified rounding mode is applied.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_UP\"\u003e\u003ccode\u003eROUND_UP\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_DOWN\"\u003e\u003ccode\u003eROUND_DOWN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_CEILING\"\u003e\u003ccode\u003eROUND_CEILING\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_FLOOR\"\u003e\u003ccode\u003eROUND_FLOOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_HALF_UP\"\u003e\u003ccode\u003eROUND_HALF_UP\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_HALF_DOWN\"\u003e\u003ccode\u003eROUND_HALF_DOWN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_HALF_EVEN\"\u003e\u003ccode\u003eROUND_HALF_EVEN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_UNNECESSARY\"\u003e\u003ccode\u003eROUND_UNNECESSARY\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided.",
          "\u003ccode\u003eroundingMode\u003c/code\u003e - rounding mode to apply."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edivisor\u003d\u003d0\u003c/code\u003e, or \n\u003ccode\u003eroundingMode\u003d\u003dROUND_UNNECESSARY\u003c/code\u003e and \n\u003ccode\u003ethis.scale()\u003c/code\u003e is insufficient to represent the result of the division exactly.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eroundingMode\u003c/code\u003e does not represent a valid rounding mode."
        ],
        "return": [
          "\u003ccode\u003ethis / divisor\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        },
        {
          "type": {
            "name": "java.math.RoundingMode",
            "type": "Class"
          },
          "field": {
            "name": "roundingMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divide",
      "comment": "Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale(). If rounding must be performed to generate a result with the given scale, the specified rounding mode is applied.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided.",
          "\u003ccode\u003eroundingMode\u003c/code\u003e - rounding mode to apply."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edivisor\u003d\u003d0\u003c/code\u003e, or \n\u003ccode\u003eroundingMode\u003d\u003dRoundingMode.UNNECESSARY\u003c/code\u003e and \n\u003ccode\u003ethis.scale()\u003c/code\u003e is insufficient to represent the result of the division exactly."
        ],
        "return": [
          "\u003ccode\u003ethis / divisor\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divide",
      "comment": "Returns a BigDecimal whose value is (this / divisor), and whose preferred scale is (this.scale() - divisor.scale()); if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the exact quotient does not have a terminating decimal expansion"
        ],
        "return": [
          "\u003ccode\u003ethis / divisor\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divide",
      "comment": "Returns a BigDecimal whose value is (this / divisor), with rounding according to the context settings.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e or \n\u003ccode\u003emc.precision \u003d\u003d 0\u003c/code\u003e and the quotient has a non-terminating decimal expansion."
        ],
        "return": [
          "\u003ccode\u003ethis / divisor\u003c/code\u003e, rounded as necessary."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divideToIntegralValue",
      "comment": "Returns a BigDecimal whose value is the integer part of the quotient (this / divisor) rounded down. The preferred scale of the result is (this.scale() - divisor.scale()).",
      "tagMap": {
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edivisor\u003d\u003d0\u003c/code\u003e"
        ],
        "return": [
          "The integer part of \n\u003ccode\u003ethis / divisor\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divideToIntegralValue",
      "comment": "Returns a BigDecimal whose value is the integer part of (this / divisor). Since the integer part of the exact quotient does not depend on the rounding mode, the rounding mode does not affect the values returned by this method. The preferred scale of the result is (this.scale() - divisor.scale()). An ArithmeticException is thrown if the integer part of the exact quotient needs more than mc.precision digits.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edivisor\u003d\u003d0\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emc.precision\u003c/code\u003e \u0026gt; 0 and the result requires a precision of more than \n\u003ccode\u003emc.precision\u003c/code\u003e digits."
        ],
        "return": [
          "The integer part of \n\u003ccode\u003ethis / divisor\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remainder",
      "comment": "Returns a BigDecimal whose value is (this % divisor). The remainder is given by this.subtract(this.divideToIntegralValue(divisor).multiply(divisor)). Note that this is not the modulo operation (the result can be negative).",
      "tagMap": {
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edivisor\u003d\u003d0\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003ethis % divisor\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remainder",
      "comment": "Returns a BigDecimal whose value is (this % divisor), with rounding according to the context settings. The MathContext settings affect the implicit divide used to compute the remainder. The remainder computation itself is by definition exact. Therefore, the remainder may contain more than mc.getPrecision() digits. The remainder is given by this.subtract(this.divideToIntegralValue(divisor, mc).multiply(divisor)). Note that this is not the modulo operation (the result can be negative).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)\"\u003e\u003ccode\u003edivideToIntegralValue(java.math.BigDecimal, java.math.MathContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edivisor\u003d\u003d0\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e, or \n\u003ccode\u003emc.precision\u003c/code\u003e \u0026gt; 0 and the result of \n\u003ccode\u003ethis.divideToIntgralValue(divisor)\u003c/code\u003e would require a precision of more than \n\u003ccode\u003emc.precision\u003c/code\u003e digits."
        ],
        "return": [
          "\u003ccode\u003ethis % divisor\u003c/code\u003e, rounded as necessary."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divideAndRemainder",
      "comment": "Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands. Note that if both the integer quotient and remainder are needed, this method is faster than using the divideToIntegralValue and remainder methods separately because the division need only be carried out once.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)\"\u003e\u003ccode\u003edivideToIntegralValue(java.math.BigDecimal, java.math.MathContext)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#remainder(java.math.BigDecimal,java.math.MathContext)\"\u003e\u003ccode\u003eremainder(java.math.BigDecimal, java.math.MathContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided, and the remainder computed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edivisor\u003d\u003d0\u003c/code\u003e"
        ],
        "return": [
          "a two element \n\u003ccode\u003eBigDecimal\u003c/code\u003e array: the quotient (the result of \n\u003ccode\u003edivideToIntegralValue\u003c/code\u003e) is the initial element and the remainder is the final element."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "divisor"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "divideAndRemainder",
      "comment": "Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands calculated with rounding according to the context settings. Note that if both the integer quotient and remainder are needed, this method is faster than using the divideToIntegralValue and remainder methods separately because the division need only be carried out once.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)\"\u003e\u003ccode\u003edivideToIntegralValue(java.math.BigDecimal, java.math.MathContext)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#remainder(java.math.BigDecimal,java.math.MathContext)\"\u003e\u003ccode\u003eremainder(java.math.BigDecimal, java.math.MathContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edivisor\u003c/code\u003e - value by which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be divided, and the remainder computed.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edivisor\u003d\u003d0\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e, or \n\u003ccode\u003emc.precision\u003c/code\u003e \u0026gt; 0 and the result of \n\u003ccode\u003ethis.divideToIntgralValue(divisor)\u003c/code\u003e would require a precision of more than \n\u003ccode\u003emc.precision\u003c/code\u003e digits."
        ],
        "return": [
          "a two element \n\u003ccode\u003eBigDecimal\u003c/code\u003e array: the quotient (the result of \n\u003ccode\u003edivideToIntegralValue\u003c/code\u003e) is the initial element and the remainder is the final element."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sqrt",
      "comment": "Returns an approximation to the square root of this with rounding according to the context settings. The preferred scale of the returned result is equal to this.scale()/2. The value of the returned result is always within one ulp of the exact decimal value for the precision in question. If the rounding mode is HALF_UP, HALF_DOWN, or HALF_EVEN, the result is within one half an ulp of the exact decimal value. Special case: The square root of a number numerically equal to ZERO is numerically equal to ZERO with a preferred scale according to the general rule above. In particular, for ZERO, ZERO.sqrt(mc).equals(ZERO) is true with any MathContext as an argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html#sqrt()\"\u003e\u003ccode\u003eBigInteger.sqrt()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ethis\u003c/code\u003e is less than zero.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if an exact result is requested (\n\u003ccode\u003emc.getPrecision()\u003d\u003d0\u003c/code\u003e) and there is no finite decimal expansion of the exact result",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003e(mc.getRoundingMode()\u003d\u003dRoundingMode.UNNECESSARY\u003c/code\u003e) and the exact result cannot fit in \n\u003ccode\u003emc.getPrecision()\u003c/code\u003e digits."
        ],
        "return": [
          "the square root of \n\u003ccode\u003ethis\u003c/code\u003e."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "pow",
      "comment": "Returns a BigDecimal whose value is (thisn), The power is computed exactly, to unlimited precision. The parameter n must be in the range 0 through 999999999, inclusive. ZERO.pow(0) returns ONE. Note that future releases may expand the allowable exponent range of this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - power to raise this \n\u003ccode\u003eBigDecimal\u003c/code\u003e to."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003en\u003c/code\u003e is out of range."
        ],
        "return": [
          "\u003ccode\u003ethis\u003csup\u003en\u003c/sup\u003e\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "pow",
      "comment": "Returns a BigDecimal whose value is (thisn). The current implementation uses the core algorithm defined in ANSI standard X3.274-1996 with rounding according to the context settings. In general, the returned numerical value is within two ulps of the exact numerical value for the chosen precision. Note that future releases may use a different algorithm with a decreased allowable error bound and increased allowable exponent range. The X3.274-1996 algorithm is: An ArithmeticException exception is thrown if abs(n) \u003e 999999999 mc.precision \u003d\u003d 0 and n \u003c 0 mc.precision \u003e 0 and n has more than mc.precision decimal digits if n is zero, ONE is returned even if this is zero, otherwise if n is positive, the result is calculated via the repeated squaring technique into a single accumulator. The individual multiplications with the accumulator use the same math context settings as in mc except for a precision increased to mc.precision + elength + 1 where elength is the number of decimal digits in n. if n is negative, the result is calculated as if n were positive; this value is then divided into one using the working precision specified above. The final value from either the positive or negative case is then rounded to the destination precision.",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - power to raise this \n\u003ccode\u003eBigDecimal\u003c/code\u003e to.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e, or \n\u003ccode\u003en\u003c/code\u003e is out of range."
        ],
        "return": [
          "\u003ccode\u003ethis\u003csup\u003en\u003c/sup\u003e\u003c/code\u003e using the ANSI standard X3.274-1996 algorithm"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "abs",
      "comment": "Returns a BigDecimal whose value is the absolute value of this BigDecimal, and whose scale is this.scale().",
      "tagMap": {
        "return": [
          "\u003ccode\u003eabs(this)\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "abs",
      "comment": "Returns a BigDecimal whose value is the absolute value of this BigDecimal, with rounding according to the context settings.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003eabs(this)\u003c/code\u003e, rounded as necessary."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "negate",
      "comment": "Returns a BigDecimal whose value is (-this), and whose scale is this.scale().",
      "tagMap": {
        "return": [
          "\u003ccode\u003e-this\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "negate",
      "comment": "Returns a BigDecimal whose value is (-this), with rounding according to the context settings.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003e-this\u003c/code\u003e, rounded as necessary."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plus",
      "comment": "Returns a BigDecimal whose value is (+this), and whose scale is this.scale(). This method, which simply returns this BigDecimal is included for symmetry with the unary minus method negate().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#negate()\"\u003e\u003ccode\u003enegate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003ethis\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "plus",
      "comment": "Returns a BigDecimal whose value is (+this), with rounding according to the context settings. The effect of this method is identical to that of the round(MathContext) method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#round(java.math.MathContext)\"\u003e\u003ccode\u003eround(MathContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e."
        ],
        "return": [
          "\u003ccode\u003ethis\u003c/code\u003e, rounded as necessary. A zero result will have a scale of 0."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "signum",
      "comment": "Returns the signum function of this BigDecimal.",
      "tagMap": {
        "return": [
          "-1, 0, or 1 as the value of this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is negative, zero, or positive."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scale",
      "comment": "Returns the scale of this BigDecimal. If zero or positive, the scale is the number of digits to the right of the decimal point. If negative, the unscaled value of the number is multiplied by ten to the power of the negation of the scale. For example, a scale of -3 means the unscaled value is multiplied by 1000.",
      "tagMap": {
        "return": [
          "the scale of this \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "precision",
      "comment": "Returns the precision of this BigDecimal. (The precision is the number of digits in the unscaled value.) The precision of a zero value is 1.",
      "tagMap": {
        "return": [
          "the precision of this \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unscaledValue",
      "comment": "Returns a BigInteger whose value is the unscaled value of this BigDecimal. (Computes (this * 10this.scale()).)",
      "tagMap": {
        "return": [
          "the unscaled value of this \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "round",
      "comment": "Returns a BigDecimal rounded according to the MathContext settings. If the precision setting is 0 then no rounding takes place. The effect of this method is identical to that of the plus(MathContext) method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#plus(java.math.MathContext)\"\u003e\u003ccode\u003eplus(MathContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e and the \n\u003ccode\u003eBigDecimal\u003c/code\u003e operation would require rounding."
        ],
        "return": [
          "a \n\u003ccode\u003eBigDecimal\u003c/code\u003e rounded according to the \n\u003ccode\u003eMathContext\u003c/code\u003e settings."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newScale"
          }
        },
        {
          "type": {
            "name": "java.math.RoundingMode",
            "type": "Class"
          },
          "field": {
            "name": "roundingMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setScale",
      "comment": "Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal\u0027s unscaled value by the appropriate power of ten to maintain its overall value. If the scale is reduced by the operation, the unscaled value must be divided (rather than multiplied), and the value may be changed; in this case, the specified rounding mode is applied to the division.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/RoundingMode.html\" title\u003d\"enum class in java.math\"\u003e\u003ccode\u003eRoundingMode\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "Since BigDecimal objects are immutable, calls of this method do \n\u003cem\u003enot\u003c/em\u003e result in the original object being modified, contrary to the usual convention of having methods named \n\u003ccode\u003eset\u003ci\u003eX\u003c/i\u003e\u003c/code\u003e mutate field \n\u003ci\u003e\u003ccode\u003eX\u003c/code\u003e\u003c/i\u003e. Instead, \n\u003ccode\u003esetScale\u003c/code\u003e returns an object with the proper scale; the returned object may or may not be newly allocated."
        ],
        "param": [
          "\u003ccode\u003enewScale\u003c/code\u003e - scale of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e value to be returned.",
          "\u003ccode\u003eroundingMode\u003c/code\u003e - The rounding mode to apply."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eroundingMode\u003d\u003dUNNECESSARY\u003c/code\u003e and the specified scaling operation would require rounding."
        ],
        "return": [
          "a \n\u003ccode\u003eBigDecimal\u003c/code\u003e whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this \n\u003ccode\u003eBigDecimal\u003c/code\u003e\u0027s unscaled value by the appropriate power of ten to maintain its overall value."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newScale"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "roundingMode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setScale",
      "comment": "Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal\u0027s unscaled value by the appropriate power of ten to maintain its overall value. If the scale is reduced by the operation, the unscaled value must be divided (rather than multiplied), and the value may be changed; in this case, the specified rounding mode is applied to the division.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_UP\"\u003e\u003ccode\u003eROUND_UP\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_DOWN\"\u003e\u003ccode\u003eROUND_DOWN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_CEILING\"\u003e\u003ccode\u003eROUND_CEILING\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_FLOOR\"\u003e\u003ccode\u003eROUND_FLOOR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_HALF_UP\"\u003e\u003ccode\u003eROUND_HALF_UP\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_HALF_DOWN\"\u003e\u003ccode\u003eROUND_HALF_DOWN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_HALF_EVEN\"\u003e\u003ccode\u003eROUND_HALF_EVEN\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#ROUND_UNNECESSARY\"\u003e\u003ccode\u003eROUND_UNNECESSARY\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "Since BigDecimal objects are immutable, calls of this method do \n\u003cem\u003enot\u003c/em\u003e result in the original object being modified, contrary to the usual convention of having methods named \n\u003ccode\u003eset\u003ci\u003eX\u003c/i\u003e\u003c/code\u003e mutate field \n\u003ci\u003e\u003ccode\u003eX\u003c/code\u003e\u003c/i\u003e. Instead, \n\u003ccode\u003esetScale\u003c/code\u003e returns an object with the proper scale; the returned object may or may not be newly allocated."
        ],
        "param": [
          "\u003ccode\u003enewScale\u003c/code\u003e - scale of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e value to be returned.",
          "\u003ccode\u003eroundingMode\u003c/code\u003e - The rounding mode to apply."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eroundingMode\u003d\u003dROUND_UNNECESSARY\u003c/code\u003e and the specified scaling operation would require rounding.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eroundingMode\u003c/code\u003e does not represent a valid rounding mode."
        ],
        "return": [
          "a \n\u003ccode\u003eBigDecimal\u003c/code\u003e whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this \n\u003ccode\u003eBigDecimal\u003c/code\u003e\u0027s unscaled value by the appropriate power of ten to maintain its overall value."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newScale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setScale",
      "comment": "Returns a BigDecimal whose scale is the specified value, and whose value is numerically equal to this BigDecimal\u0027s. Throws an ArithmeticException if this is not possible. This call is typically used to increase the scale, in which case it is guaranteed that there exists a BigDecimal of the specified scale and the correct value. The call can also be used to reduce the scale if the caller knows that the BigDecimal has sufficiently many zeros at the end of its fractional part (i.e., factors of ten in its integer value) to allow for the rescaling without changing its value. This method returns the same result as the two-argument versions of setScale, but saves the caller the trouble of specifying a rounding mode in cases where it is irrelevant.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#setScale(int,int)\"\u003e\u003ccode\u003esetScale(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#setScale(int,java.math.RoundingMode)\"\u003e\u003ccode\u003esetScale(int, RoundingMode)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "Since \n\u003ccode\u003eBigDecimal\u003c/code\u003e objects are immutable, calls of this method do \n\u003cem\u003enot\u003c/em\u003e result in the original object being modified, contrary to the usual convention of having methods named \n\u003ccode\u003eset\u003ci\u003eX\u003c/i\u003e\u003c/code\u003e mutate field \n\u003ci\u003e\u003ccode\u003eX\u003c/code\u003e\u003c/i\u003e. Instead, \n\u003ccode\u003esetScale\u003c/code\u003e returns an object with the proper scale; the returned object may or may not be newly allocated."
        ],
        "param": [
          "\u003ccode\u003enewScale\u003c/code\u003e - scale of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e value to be returned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the specified scaling operation would require rounding."
        ],
        "return": [
          "a \n\u003ccode\u003eBigDecimal\u003c/code\u003e whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this \n\u003ccode\u003eBigDecimal\u003c/code\u003e\u0027s unscaled value by the appropriate power of ten to maintain its overall value."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "movePointLeft",
      "comment": "Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the left. If n is non-negative, the call merely adds n to the scale. If n is negative, the call is equivalent to movePointRight(-n). The BigDecimal returned by this call has value (this × 10-n) and scale max(this.scale()+n, 0).",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - number of places to move the decimal point to the left."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if scale overflows."
        ],
        "return": [
          "a \n\u003ccode\u003eBigDecimal\u003c/code\u003e which is equivalent to this one with the decimal point moved \n\u003ccode\u003en\u003c/code\u003e places to the left."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "movePointRight",
      "comment": "Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the right. If n is non-negative, the call merely subtracts n from the scale. If n is negative, the call is equivalent to movePointLeft(-n). The BigDecimal returned by this call has value (this × 10n) and scale max(this.scale()-n, 0).",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - number of places to move the decimal point to the right."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if scale overflows."
        ],
        "return": [
          "a \n\u003ccode\u003eBigDecimal\u003c/code\u003e which is equivalent to this one with the decimal point moved \n\u003ccode\u003en\u003c/code\u003e places to the right."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scaleByPowerOfTen",
      "comment": "Returns a BigDecimal whose numerical value is equal to (this * 10n). The scale of the result is (this.scale() - n).",
      "tagMap": {
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - the exponent power of ten to scale by"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the scale would be outside the range of a 32-bit integer."
        ],
        "return": [
          "a BigDecimal whose numerical value is equal to (\n\u003ccode\u003ethis\u003c/code\u003e * 10\n\u003csup\u003en\u003c/sup\u003e)"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stripTrailingZeros",
      "comment": "Returns a BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation. For example, stripping the trailing zeros from the BigDecimal value 600.0, which has [BigInteger, scale] components equal to [6000, 1], yields 6E2 with [BigInteger, scale] components equal to [6, -2]. If this BigDecimal is numerically equal to zero, then BigDecimal.ZERO is returned.",
      "tagMap": {
        "return": [
          "a numerically equal \n\u003ccode\u003eBigDecimal\u003c/code\u003e with any trailing zeros removed."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this BigDecimal with the specified BigDecimal. Two BigDecimal objects that are equal in value but have a different scale (like 2.0 and 2.00) are considered equal by this method. This method is provided in preference to individual methods for each of the six boolean comparison operators (\u003c, \u003d\u003d, \u003e, \u003e\u003d, !\u003d, \u003c\u003d). The suggested idiom for performing these comparisons is: (x.compareTo(y) \u003cop\u003e 0), where \u003cop\u003e is one of the six comparison operators.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html\" title\u003d\"class in java.math\"\u003eBigDecimal\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - \n\u003ccode\u003eBigDecimal\u003c/code\u003e to which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be compared."
        ],
        "return": [
          "-1, 0, or 1 as this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is numerically less than, equal to, or greater than \n\u003ccode\u003eval\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this BigDecimal with the specified Object for equality. Unlike compareTo, this method considers two BigDecimal objects equal only if they are equal in value and scale (thus 2.0 is not equal to 2.00 when compared by this method).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#compareTo(java.math.BigDecimal)\"\u003e\u003ccode\u003ecompareTo(java.math.BigDecimal)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#hashCode()\"\u003e\u003ccode\u003ehashCode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - \n\u003ccode\u003eObject\u003c/code\u003e to which this \n\u003ccode\u003eBigDecimal\u003c/code\u003e is to be compared."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the specified \n\u003ccode\u003eObject\u003c/code\u003e is a \n\u003ccode\u003eBigDecimal\u003c/code\u003e whose value and scale are equal to this \n\u003ccode\u003eBigDecimal\u003c/code\u003e\u0027s."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "min",
      "comment": "Returns the minimum of this BigDecimal and val.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#compareTo(java.math.BigDecimal)\"\u003e\u003ccode\u003ecompareTo(java.math.BigDecimal)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value with which the minimum is to be computed."
        ],
        "return": [
          "the \n\u003ccode\u003eBigDecimal\u003c/code\u003e whose value is the lesser of this \n\u003ccode\u003eBigDecimal\u003c/code\u003e and \n\u003ccode\u003eval\u003c/code\u003e. If they are equal, as defined by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#compareTo(java.math.BigDecimal)\"\u003e\u003ccode\u003ecompareTo\u003c/code\u003e\u003c/a\u003e method, \n\u003ccode\u003ethis\u003c/code\u003e is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigDecimal",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "max",
      "comment": "Returns the maximum of this BigDecimal and val.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#compareTo(java.math.BigDecimal)\"\u003e\u003ccode\u003ecompareTo(java.math.BigDecimal)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - value with which the maximum is to be computed."
        ],
        "return": [
          "the \n\u003ccode\u003eBigDecimal\u003c/code\u003e whose value is the greater of this \n\u003ccode\u003eBigDecimal\u003c/code\u003e and \n\u003ccode\u003eval\u003c/code\u003e. If they are equal, as defined by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#compareTo(java.math.BigDecimal)\"\u003e\u003ccode\u003ecompareTo\u003c/code\u003e\u003c/a\u003e method, \n\u003ccode\u003ethis\u003c/code\u003e is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code for this BigDecimal. Note that two BigDecimal objects that are numerically equal but differ in scale (like 2.0 and 2.00) will generally not have the same hash code.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "hash code for this \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the string representation of this BigDecimal, using scientific notation if an exponent is needed. A standard canonical string form of the BigDecimal is created as though by the following steps: first, the absolute value of the unscaled value of the BigDecimal is converted to a string in base ten using the characters \u00270\u0027 through \u00279\u0027 with no leading zeros (except if its value is zero, in which case a single \u00270\u0027 character is used). Next, an adjusted exponent is calculated; this is the negated scale, plus the number of characters in the converted unscaled value, less one. That is, -scale+(ulength-1), where ulength is the length of the absolute value of the unscaled value in decimal digits (its precision). If the scale is greater than or equal to zero and the adjusted exponent is greater than or equal to -6, the number will be converted to a character form without using exponential notation. In this case, if the scale is zero then no decimal point is added and if the scale is positive a decimal point will be inserted with the scale specifying the number of characters to the right of the decimal point. \u00270\u0027 characters are added to the left of the converted unscaled value as necessary. If no character precedes the decimal point after this insertion then a conventional \u00270\u0027 character is prefixed. Otherwise (that is, if the scale is negative, or the adjusted exponent is less than -6), the number will be converted to a character form using exponential notation. In this case, if the converted BigInteger has more than one digit a decimal point is inserted after the first digit. An exponent in character form is then suffixed to the converted unscaled value (perhaps with inserted decimal point); this comprises the letter \u0027E\u0027 followed immediately by the adjusted exponent converted to a character form. The latter is in base ten, using the characters \u00270\u0027 through \u00279\u0027 with no leading zeros, and is always prefixed by a sign character \u0027-\u0027 (\u0027\\u002D\u0027) if the adjusted exponent is negative, \u0027+\u0027 (\u0027\\u002B\u0027) otherwise). Finally, the entire string is prefixed by a minus sign character \u0027-\u0027 (\u0027\\u002D\u0027) if the unscaled value is less than zero. No sign character is prefixed if the unscaled value is zero or positive. Examples: For each representation [unscaled value, scale] on the left, the resulting string is shown on the right.  [123,0]      \"123\"\n [-123,0]     \"-123\"\n [123,-1]     \"1.23E+3\"\n [123,-3]     \"1.23E+5\"\n [123,1]      \"12.3\"\n [123,5]      \"0.00123\"\n [123,10]     \"1.23E-8\"\n [-123,12]    \"-1.23E-10\"\n Notes: There is a one-to-one mapping between the distinguishable BigDecimal values and the result of this conversion. That is, every distinguishable BigDecimal value (unscaled value and scale) has a unique string representation as a result of using toString. If that string representation is converted back to a BigDecimal using the BigDecimal(String) constructor, then the original value will be recovered. The string produced for a given number is always the same; it is not affected by locale. This means that it can be used as a canonical string representation for exchanging decimal data, or as a key for a Hashtable, etc. Locale-sensitive number formatting and parsing is handled by the NumberFormat class and its subclasses. The toEngineeringString() method may be used for presenting numbers with exponents in engineering notation, and the setScale method may be used for rounding a BigDecimal so it has a known number of digits after the decimal point. The digit-to-character mapping provided by Character.forDigit is used.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html#forDigit(int,int)\"\u003e\u003ccode\u003eCharacter.forDigit(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#%3Cinit%3E(java.lang.String)\"\u003e\u003ccode\u003eBigDecimal(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "string representation of this \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toEngineeringString",
      "comment": "Returns a string representation of this BigDecimal, using engineering notation if an exponent is needed. Returns a string that represents the BigDecimal as described in the toString() method, except that if exponential notation is used, the power of ten is adjusted to be a multiple of three (engineering notation) such that the integer part of nonzero values will be in the range 1 through 999. If exponential notation is used for zero values, a decimal point and one or two fractional zero digits are used so that the scale of the zero value is preserved. Note that unlike the output of toString(), the output of this method is not guaranteed to recover the same [integer, scale] pair of this BigDecimal if the output string is converting back to a BigDecimal using the string constructor. The result of this method meets the weaker constraint of always producing a numerically equal result from applying the string constructor to the method\u0027s output.",
      "tagMap": {
        "return": [
          "string representation of this \n\u003ccode\u003eBigDecimal\u003c/code\u003e, using engineering notation if an exponent is needed."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toPlainString",
      "comment": "Returns a string representation of this BigDecimal without an exponent field. For values with a positive scale, the number of digits to the right of the decimal point is used to indicate scale. For values with a zero or negative scale, the resulting string is generated as if the value were converted to a numerically equal value with zero scale and as if all the trailing zeros of the zero scale value were present in the result. The entire string is prefixed by a minus sign character \u0027-\u0027 (\u0027\\u002D\u0027) if the unscaled value is less than zero. No sign character is prefixed if the unscaled value is zero or positive. Note that if the result of this method is passed to the string constructor, only the numerical value of this BigDecimal will necessarily be recovered; the representation of the new BigDecimal may have a different scale. In particular, if this BigDecimal has a negative scale, the string resulting from this method will have a scale of zero when processed by the string constructor. (This method behaves analogously to the toString method in 1.4 and earlier releases.)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#toString()\"\u003e\u003ccode\u003etoString()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#toEngineeringString()\"\u003e\u003ccode\u003etoEngineeringString()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a string representation of this \n\u003ccode\u003eBigDecimal\u003c/code\u003e without an exponent field."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toBigInteger",
      "comment": "Converts this BigDecimal to a BigInteger. This conversion is analogous to the narrowing primitive conversion from double to long as defined in The Java Language Specification: any fractional part of this BigDecimal will be discarded. Note that this conversion can lose information about the precision of the BigDecimal value. To have an exception thrown if the conversion is inexact (in other words if a nonzero fractional part is discarded), use the toBigIntegerExact() method.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eBigDecimal\u003c/code\u003e converted to a \n\u003ccode\u003eBigInteger\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toBigIntegerExact",
      "comment": "Converts this BigDecimal to a BigInteger, checking for lost information. An exception is thrown if this BigDecimal has a nonzero fractional part.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ethis\u003c/code\u003e has a nonzero fractional part."
        ],
        "return": [
          "this \n\u003ccode\u003eBigDecimal\u003c/code\u003e converted to a \n\u003ccode\u003eBigInteger\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longValue",
      "comment": "Converts this BigDecimal to a long. This conversion is analogous to the narrowing primitive conversion from double to short as defined in The Java Language Specification: any fractional part of this BigDecimal will be discarded, and if the resulting \"BigInteger\" is too big to fit in a long, only the low-order 64 bits are returned. Note that this conversion can lose information about the overall magnitude and precision of this BigDecimal value as well as return a result with the opposite sign.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#longValue()\"\u003elongValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eBigDecimal\u003c/code\u003e converted to a \n\u003ccode\u003elong\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longValueExact",
      "comment": "Converts this BigDecimal to a long, checking for lost information. If this BigDecimal has a nonzero fractional part or is out of the possible range for a long result then an ArithmeticException is thrown.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ethis\u003c/code\u003e has a nonzero fractional part, or will not fit in a \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "return": [
          "this \n\u003ccode\u003eBigDecimal\u003c/code\u003e converted to a \n\u003ccode\u003elong\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intValue",
      "comment": "Converts this BigDecimal to an int. This conversion is analogous to the narrowing primitive conversion from double to short as defined in The Java Language Specification: any fractional part of this BigDecimal will be discarded, and if the resulting \"BigInteger\" is too big to fit in an int, only the low-order 32 bits are returned. Note that this conversion can lose information about the overall magnitude and precision of this BigDecimal value as well as return a result with the opposite sign.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#intValue()\"\u003eintValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eBigDecimal\u003c/code\u003e converted to an \n\u003ccode\u003eint\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "intValueExact",
      "comment": "Converts this BigDecimal to an int, checking for lost information. If this BigDecimal has a nonzero fractional part or is out of the possible range for an int result then an ArithmeticException is thrown.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ethis\u003c/code\u003e has a nonzero fractional part, or will not fit in an \n\u003ccode\u003eint\u003c/code\u003e."
        ],
        "return": [
          "this \n\u003ccode\u003eBigDecimal\u003c/code\u003e converted to an \n\u003ccode\u003eint\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shortValueExact",
      "comment": "Converts this BigDecimal to a short, checking for lost information. If this BigDecimal has a nonzero fractional part or is out of the possible range for a short result then an ArithmeticException is thrown.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ethis\u003c/code\u003e has a nonzero fractional part, or will not fit in a \n\u003ccode\u003eshort\u003c/code\u003e."
        ],
        "return": [
          "this \n\u003ccode\u003eBigDecimal\u003c/code\u003e converted to a \n\u003ccode\u003eshort\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "byteValueExact",
      "comment": "Converts this BigDecimal to a byte, checking for lost information. If this BigDecimal has a nonzero fractional part or is out of the possible range for a byte result then an ArithmeticException is thrown.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ethis\u003c/code\u003e has a nonzero fractional part, or will not fit in a \n\u003ccode\u003ebyte\u003c/code\u003e."
        ],
        "return": [
          "this \n\u003ccode\u003eBigDecimal\u003c/code\u003e converted to a \n\u003ccode\u003ebyte\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "floatValue",
      "comment": "Converts this BigDecimal to a float. This conversion is similar to the narrowing primitive conversion from double to float as defined in The Java Language Specification: if this BigDecimal has too great a magnitude to represent as a float, it will be converted to Float.NEGATIVE_INFINITY or Float.POSITIVE_INFINITY as appropriate. Note that even when the return value is finite, this conversion can lose information about the precision of the BigDecimal value.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#floatValue()\"\u003efloatValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eBigDecimal\u003c/code\u003e converted to a \n\u003ccode\u003efloat\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubleValue",
      "comment": "Converts this BigDecimal to a double. This conversion is similar to the narrowing primitive conversion from double to float as defined in The Java Language Specification: if this BigDecimal has too great a magnitude represent as a double, it will be converted to Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY as appropriate. Note that even when the return value is finite, this conversion can lose information about the precision of the BigDecimal value.",
      "tagMap": {
        "See Java Language Specification:": [
          "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-5.html#jls-5.1.3\"\u003e5.1.3 Narrowing Primitive Conversion\u003c/a\u003e\n\u003cbr\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html#doubleValue()\"\u003edoubleValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Number.html\" title\u003d\"class in java.lang\"\u003eNumber\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eBigDecimal\u003c/code\u003e converted to a \n\u003ccode\u003edouble\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigDecimal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ulp",
      "comment": "Returns the size of an ulp, a unit in the last place, of this BigDecimal. An ulp of a nonzero BigDecimal value is the positive distance between this value and the BigDecimal value next larger in magnitude with the same number of digits. An ulp of a zero value is numerically equal to 1 with the scale of this. The result is stored with the same scale as this so the result for zero and nonzero values is equal to [1, this.scale()].",
      "tagMap": {
        "return": [
          "the size of an ulp of \n\u003ccode\u003ethis\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a character array representation of a BigDecimal into a BigDecimal, accepting the same sequence of characters as the BigDecimal(String) constructor, while allowing a sub-array to be specified.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - \n\u003ccode\u003echar\u003c/code\u003e array that is the source of characters.",
          "\u003ccode\u003eoffset\u003c/code\u003e - first character in the array to inspect.",
          "\u003ccode\u003elen\u003c/code\u003e - number of characters to consider."
        ],
        "implNote": [
          "If the sequence of characters is already available within a character array, using this constructor is faster than converting the \n\u003ccode\u003echar\u003c/code\u003e array to string and using the \n\u003ccode\u003eBigDecimal(String)\u003c/code\u003e constructor."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ein\u003c/code\u003e is not a valid representation of a \n\u003ccode\u003eBigDecimal\u003c/code\u003e or the defined subarray is not wholly within \n\u003ccode\u003ein\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a character array representation of a BigDecimal into a BigDecimal, accepting the same sequence of characters as the BigDecimal(String) constructor, while allowing a sub-array to be specified and with rounding according to the context settings.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - \n\u003ccode\u003echar\u003c/code\u003e array that is the source of characters.",
          "\u003ccode\u003eoffset\u003c/code\u003e - first character in the array to inspect.",
          "\u003ccode\u003elen\u003c/code\u003e - number of characters to consider.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "implNote": [
          "If the sequence of characters is already available within a character array, using this constructor is faster than converting the \n\u003ccode\u003echar\u003c/code\u003e array to string and using the \n\u003ccode\u003eBigDecimal(String)\u003c/code\u003e constructor."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ein\u003c/code\u003e is not a valid representation of a \n\u003ccode\u003eBigDecimal\u003c/code\u003e or the defined subarray is not wholly within \n\u003ccode\u003ein\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "in"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a character array representation of a BigDecimal into a BigDecimal, accepting the same sequence of characters as the BigDecimal(String) constructor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - \n\u003ccode\u003echar\u003c/code\u003e array that is the source of characters."
        ],
        "implNote": [
          "If the sequence of characters is already available as a character array, using this constructor is faster than converting the \n\u003ccode\u003echar\u003c/code\u003e array to string and using the \n\u003ccode\u003eBigDecimal(String)\u003c/code\u003e constructor."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ein\u003c/code\u003e is not a valid representation of a \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a character array representation of a BigDecimal into a BigDecimal, accepting the same sequence of characters as the BigDecimal(String) constructor and with rounding according to the context settings.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - \n\u003ccode\u003echar\u003c/code\u003e array that is the source of characters.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "implNote": [
          "If the sequence of characters is already available as a character array, using this constructor is faster than converting the \n\u003ccode\u003echar\u003c/code\u003e array to string and using the \n\u003ccode\u003eBigDecimal(String)\u003c/code\u003e constructor."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ein\u003c/code\u003e is not a valid representation of a \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates the string representation of a BigDecimal into a BigDecimal. The string representation consists of an optional sign, \u0027+\u0027 ( \u0027\\u002B\u0027) or \u0027-\u0027 (\u0027\\u002D\u0027), followed by a sequence of zero or more decimal digits (\"the integer\"), optionally followed by a fraction, optionally followed by an exponent. The fraction consists of a decimal point followed by zero or more decimal digits. The string must contain at least one digit in either the integer or the fraction. The number formed by the sign, the integer and the fraction is referred to as the significand. The exponent consists of the character \u0027e\u0027 (\u0027\\u0065\u0027) or \u0027E\u0027 (\u0027\\u0045\u0027) followed by one or more decimal digits. The value of the exponent must lie between -Integer.MAX_VALUE (Integer.MIN_VALUE+1) and Integer.MAX_VALUE, inclusive. More formally, the strings this constructor accepts are described by the following grammar: BigDecimalString: Signopt Significand Exponentopt Sign: + - Significand: IntegerPart . FractionPartopt . FractionPart IntegerPart IntegerPart: Digits FractionPart: Digits Exponent: ExponentIndicator SignedInteger ExponentIndicator: e E SignedInteger: Signopt Digits Digits: Digit Digits Digit Digit: any character for which Character.isDigit(char) returns true, including 0, 1, 2 ... The scale of the returned BigDecimal will be the number of digits in the fraction, or zero if the string contains no decimal point, subject to adjustment for any exponent; if the string contains an exponent, the exponent is subtracted from the scale. The value of the resulting scale must lie between Integer.MIN_VALUE and Integer.MAX_VALUE, inclusive. The character-to-digit mapping is provided by Character.digit(char, int) set to convert to radix 10. The String may not contain any extraneous characters (whitespace, for example). Examples: The value of the returned BigDecimal is equal to significand × 10 exponent. For each string on the left, the resulting representation [BigInteger, scale] is shown on the right.  \"0\"            [0,0]\n \"0.00\"         [0,2]\n \"123\"          [123,0]\n \"-123\"         [-123,0]\n \"1.23E3\"       [123,-1]\n \"1.23E+3\"      [123,-1]\n \"12.3E+7\"      [123,-6]\n \"12.0\"         [120,1]\n \"12.3\"         [123,1]\n \"0.00123\"      [123,5]\n \"-1.23E-12\"    [-123,14]\n \"1234.5E-4\"    [12345,5]\n \"0E+7\"         [0,-7]\n \"-0\"           [0,0]",
      "tagMap": {
        "apiNote": [
          "For values other than \n\u003ccode\u003efloat\u003c/code\u003e and \n\u003ccode\u003edouble\u003c/code\u003e NaN and ±Infinity, this constructor is compatible with the values returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Float.html#toString(float)\"\u003e\u003ccode\u003eFloat.toString(float)\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Double.html#toString(double)\"\u003e\u003ccode\u003eDouble.toString(double)\u003c/code\u003e\u003c/a\u003e. This is generally the preferred way to convert a \n\u003ccode\u003efloat\u003c/code\u003e or \n\u003ccode\u003edouble\u003c/code\u003e into a BigDecimal, as it doesn\u0027t suffer from the unpredictability of the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigDecimal.html#%3Cinit%3E(double)\"\u003e\u003ccode\u003eBigDecimal(double)\u003c/code\u003e\u003c/a\u003e constructor."
        ],
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - String representation of \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eval\u003c/code\u003e is not a valid representation of a \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates the string representation of a BigDecimal into a BigDecimal, accepting the same strings as the BigDecimal(String) constructor, with rounding according to the context settings.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - string representation of a \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eval\u003c/code\u003e is not a valid representation of a BigDecimal."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a double into a BigDecimal which is the exact decimal representation of the double\u0027s binary floating-point value. The scale of the returned BigDecimal is the smallest value such that (10scale × val) is an integer. Notes: The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding. The String constructor, on the other hand, is perfectly predictable: writing new BigDecimal(\"0.1\") creates a BigDecimal which is exactly equal to 0.1, as one would expect. Therefore, it is generally recommended that the String constructor be used in preference to this one. When a double must be used as a source for a BigDecimal, note that this constructor provides an exact conversion; it does not give the same result as converting the double to a String using the Double.toString(double) method and then using the BigDecimal(String) constructor. To get that result, use the static valueOf(double) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - \n\u003ccode\u003edouble\u003c/code\u003e value to be converted to \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eval\u003c/code\u003e is infinite or NaN."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a double into a BigDecimal, with rounding according to the context settings. The scale of the BigDecimal is the smallest value such that (10scale × val) is an integer. The results of this constructor can be somewhat unpredictable and its use is generally not recommended; see the notes under the BigDecimal(double) constructor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - \n\u003ccode\u003edouble\u003c/code\u003e value to be converted to \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the RoundingMode is UNNECESSARY.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NumberFormatException.html\" title\u003d\"class in java.lang\"\u003eNumberFormatException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eval\u003c/code\u003e is infinite or NaN."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a BigInteger into a BigDecimal. The scale of the BigDecimal is zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - \n\u003ccode\u003eBigInteger\u003c/code\u003e value to be converted to \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a BigInteger into a BigDecimal rounding according to the context settings. The scale of the BigDecimal is zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - \n\u003ccode\u003eBigInteger\u003c/code\u003e value to be converted to \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "field": {
            "name": "unscaledVal"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a BigInteger unscaled value and an int scale into a BigDecimal. The value of the BigDecimal is (unscaledVal × 10-scale).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eunscaledVal\u003c/code\u003e - unscaled value of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003escale\u003c/code\u003e - scale of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "field": {
            "name": "unscaledVal"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "scale"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a BigInteger unscaled value and an int scale into a BigDecimal, with rounding according to the context settings. The value of the BigDecimal is (unscaledVal × 10-scale), rounded according to the precision and rounding mode settings.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eunscaledVal\u003c/code\u003e - unscaled value of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003escale\u003c/code\u003e - scale of the \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates an int into a BigDecimal. The scale of the BigDecimal is zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - \n\u003ccode\u003eint\u003c/code\u003e value to be converted to \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates an int into a BigDecimal, with rounding according to the context settings. The scale of the BigDecimal, before any rounding, is zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - \n\u003ccode\u003eint\u003c/code\u003e value to be converted to \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a long into a BigDecimal. The scale of the BigDecimal is zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - \n\u003ccode\u003elong\u003c/code\u003e value to be converted to \n\u003ccode\u003eBigDecimal\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "val"
          }
        },
        {
          "type": {
            "name": "java.math.MathContext",
            "type": "Class"
          },
          "field": {
            "name": "mc"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Translates a long into a BigDecimal, with rounding according to the context settings. The scale of the BigDecimal, before any rounding, is zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eval\u003c/code\u003e - \n\u003ccode\u003elong\u003c/code\u003e value to be converted to \n\u003ccode\u003eBigDecimal\u003c/code\u003e.",
          "\u003ccode\u003emc\u003c/code\u003e - the context to use."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003eArithmeticException\u003c/a\u003e\u003c/code\u003e - if the result is inexact but the rounding mode is \n\u003ccode\u003eUNNECESSARY\u003c/code\u003e."
        ],
        "since": [
          "1.5"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.math.BigDecimal",
  "comment": "Immutable, arbitrary-precision signed decimal numbers. A \n\u003ccode\u003eBigDecimal\u003c/code\u003e consists of an arbitrary precision integer \n\u003ci\u003eunscaled value\u003c/i\u003e and a 32-bit integer \n\u003ci\u003escale\u003c/i\u003e. If zero or positive, the scale is the number of digits to the right of the decimal point. If negative, the unscaled value of the number is multiplied by ten to the power of the negation of the scale. The value of the number represented by the \n\u003ccode\u003eBigDecimal\u003c/code\u003e is therefore \n\u003ccode\u003e(unscaledValue × 10\u003csup\u003e-scale\u003c/sup\u003e)\u003c/code\u003e. \n\u003cp\u003eThe \u003ccode\u003eBigDecimal\u003c/code\u003e class provides operations for arithmetic, scale manipulation, rounding, comparison, hashing, and format conversion. The \u003ca href\u003d\"#toString()\"\u003e\u003ccode\u003etoString()\u003c/code\u003e\u003c/a\u003e method provides a canonical representation of a \u003ccode\u003eBigDecimal\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eBigDecimal\u003c/code\u003e class gives its user complete control over rounding behavior. If no rounding mode is specified and the exact result cannot be represented, an exception is thrown; otherwise, calculations can be carried out to a chosen precision and rounding mode by supplying an appropriate \u003ca href\u003d\"MathContext.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eMathContext\u003c/code\u003e\u003c/a\u003e object to the operation. In either case, eight \u003cem\u003erounding modes\u003c/em\u003e are provided for the control of rounding. Using the integer fields in this class (such as \u003ca href\u003d\"#ROUND_HALF_UP\"\u003e\u003ccode\u003eROUND_HALF_UP\u003c/code\u003e\u003c/a\u003e) to represent rounding mode is deprecated; the enumeration values of the \u003ccode\u003eRoundingMode\u003c/code\u003e \u003ccode\u003eenum\u003c/code\u003e, (such as \u003ca href\u003d\"RoundingMode.html#HALF_UP\"\u003e\u003ccode\u003eRoundingMode.HALF_UP\u003c/code\u003e\u003c/a\u003e) should be used instead. \u003c/p\u003e\n\u003cp\u003eWhen a \u003ccode\u003eMathContext\u003c/code\u003e object is supplied with a precision setting of 0 (for example, \u003ca href\u003d\"MathContext.html#UNLIMITED\"\u003e\u003ccode\u003eMathContext.UNLIMITED\u003c/code\u003e\u003c/a\u003e), arithmetic operations are exact, as are the arithmetic methods which take no \u003ccode\u003eMathContext\u003c/code\u003e object. (This is the only behavior that was supported in releases prior to 5.) As a corollary of computing the exact result, the rounding mode setting of a \u003ccode\u003eMathContext\u003c/code\u003e object with a precision setting of 0 is not used and thus irrelevant. In the case of divide, the exact quotient could have an infinitely long decimal expansion; for example, 1 divided by 3. If the quotient has a nonterminating decimal expansion and the operation is specified to return an exact result, an \u003ccode\u003eArithmeticException\u003c/code\u003e is thrown. Otherwise, the exact result of the division is returned, as done for other operations. \u003c/p\u003e\n\u003cp\u003eWhen the precision setting is not 0, the rules of \u003ccode\u003eBigDecimal\u003c/code\u003e arithmetic are broadly compatible with selected modes of operation of the arithmetic defined in ANSI X3.274-1996 and ANSI X3.274-1996/AM 1-2000 (section 7.4). Unlike those standards, \u003ccode\u003eBigDecimal\u003c/code\u003e includes many rounding modes, which were mandatory for division in \u003ccode\u003eBigDecimal\u003c/code\u003e releases prior to 5. Any conflicts between these ANSI standards and the \u003ccode\u003eBigDecimal\u003c/code\u003e specification are resolved in favor of \u003ccode\u003eBigDecimal\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eSince the same numerical value can have different representations (with different scales), the rules of arithmetic and rounding must specify both the numerical result and the scale used in the result\u0027s representation. \u003c/p\u003e\n\u003cp\u003eIn general the rounding modes and precision setting determine how operations return results with a limited number of digits when the exact result has more digits (perhaps infinitely many in the case of division and square root) than the number of digits returned. First, the total number of digits to return is specified by the \u003ccode\u003eMathContext\u003c/code\u003e\u0027s \u003ccode\u003eprecision\u003c/code\u003e setting; this determines the result\u0027s \u003ci\u003eprecision\u003c/i\u003e. The digit count starts from the leftmost nonzero digit of the exact result. The rounding mode determines how any discarded trailing digits affect the returned result. \u003c/p\u003e\n\u003cp\u003eFor all arithmetic operators, the operation is carried out as though an exact intermediate result were first calculated and then rounded to the number of digits specified by the precision setting (if necessary), using the selected rounding mode. If the exact result is not returned, some digit positions of the exact result are discarded. When rounding increases the magnitude of the returned result, it is possible for a new digit position to be created by a carry propagating to a leading \"9\" digit. For example, rounding the value 999.9 to three digits rounding up would be numerically equal to one thousand, represented as 100×10\u003csup\u003e1\u003c/sup\u003e. In such cases, the new \"1\" is the leading digit position of the returned result. \u003c/p\u003e\n\u003cp\u003eBesides a logical exact result, each arithmetic operation has a preferred scale for representing a result. The preferred scale for each operation is listed in the table below. \u003c/p\u003e\n\u003ctable class\u003d\"striped\" style\u003d\"text-align:left\"\u003e \n \u003ccaption\u003e\n  Preferred Scales for Results of Arithmetic Operations \n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"col\"\u003eOperation\u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003ePreferred Scale of Result\u003c/th\u003e\n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003eAdd\u003c/th\u003e\n   \u003ctd\u003emax(addend.scale(), augend.scale())\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003eSubtract\u003c/th\u003e\n   \u003ctd\u003emax(minuend.scale(), subtrahend.scale())\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003eMultiply\u003c/th\u003e\n   \u003ctd\u003emultiplier.scale() + multiplicand.scale()\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003eDivide\u003c/th\u003e\n   \u003ctd\u003edividend.scale() - divisor.scale()\u003c/td\u003e \n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003eSquare root\u003c/th\u003e\n   \u003ctd\u003eradicand.scale()/2\u003c/td\u003e \n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e These scales are the ones used by the methods which return exact arithmetic results; except that an exact divide may have to use a larger scale since the exact result may have more digits. For example, \n\u003ccode\u003e1/32\u003c/code\u003e is \n\u003ccode\u003e0.03125\u003c/code\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eBefore rounding, the scale of the logical exact intermediate result is the preferred scale for that operation. If the exact numerical result cannot be represented in \u003ccode\u003eprecision\u003c/code\u003e digits, rounding selects the set of digits to return and the scale of the result is reduced from the scale of the intermediate result to the least scale which can represent the \u003ccode\u003eprecision\u003c/code\u003e digits actually returned. If the exact result can be represented with at most \u003ccode\u003eprecision\u003c/code\u003e digits, the representation of the result with the scale closest to the preferred scale is returned. In particular, an exactly representable quotient may be represented in fewer than \u003ccode\u003eprecision\u003c/code\u003e digits by removing trailing zeros and decreasing the scale. For example, rounding to three digits using the \u003ca href\u003d\"RoundingMode.html#FLOOR\"\u003efloor\u003c/a\u003e rounding mode, \u003cbr\u003e \u003ccode\u003e19/100 \u003d 0.19 // integer\u003d19, scale\u003d2\u003c/code\u003e \u003cbr\u003e but\u003cbr\u003e \u003ccode\u003e21/110 \u003d 0.190 // integer\u003d190, scale\u003d3\u003c/code\u003e \u003cbr\u003e \u003c/p\u003e\n\u003cp\u003eNote that for add, subtract, and multiply, the reduction in scale will equal the number of digit positions of the exact result which are discarded. If the rounding causes a carry propagation to create a new high-order digit position, an additional digit of the result is discarded than when no new digit position is created. \u003c/p\u003e\n\u003cp\u003eOther methods may have slightly different rounding semantics. For example, the result of the \u003ccode\u003epow\u003c/code\u003e method using the \u003ca href\u003d\"#pow(int,java.math.MathContext)\"\u003especified algorithm\u003c/a\u003e can occasionally differ from the rounded mathematical result by more than one unit in the last place, one \u003ci\u003e\u003ca href\u003d\"#ulp()\"\u003eulp\u003c/a\u003e\u003c/i\u003e. \u003c/p\u003e\n\u003cp\u003eTwo types of operations are provided for manipulating the scale of a \u003ccode\u003eBigDecimal\u003c/code\u003e: scaling/rounding operations and decimal point motion operations. Scaling/rounding operations (\u003ca href\u003d\"#setScale(int,java.math.RoundingMode)\"\u003e\u003ccode\u003esetScale\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#round(java.math.MathContext)\"\u003e\u003ccode\u003eround\u003c/code\u003e\u003c/a\u003e) return a \u003ccode\u003eBigDecimal\u003c/code\u003e whose value is approximately (or exactly) equal to that of the operand, but whose scale or precision is the specified value; that is, they increase or decrease the precision of the stored number with minimal effect on its value. Decimal point motion operations (\u003ca href\u003d\"#movePointLeft(int)\"\u003e\u003ccode\u003emovePointLeft\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#movePointRight(int)\"\u003e\u003ccode\u003emovePointRight\u003c/code\u003e\u003c/a\u003e) return a \u003ccode\u003eBigDecimal\u003c/code\u003e created from the operand by moving the decimal point a specified distance in the specified direction. \u003c/p\u003e\n\u003cp\u003eFor the sake of brevity and clarity, pseudo-code is used throughout the descriptions of \u003ccode\u003eBigDecimal\u003c/code\u003e methods. The pseudo-code expression \u003ccode\u003e(i + j)\u003c/code\u003e is shorthand for \"a \u003ccode\u003eBigDecimal\u003c/code\u003e whose value is that of the \u003ccode\u003eBigDecimal\u003c/code\u003e \u003ccode\u003ei\u003c/code\u003e added to that of the \u003ccode\u003eBigDecimal\u003c/code\u003e \u003ccode\u003ej\u003c/code\u003e.\" The pseudo-code expression \u003ccode\u003e(i \u003d\u003d j)\u003c/code\u003e is shorthand for \"\u003ccode\u003etrue\u003c/code\u003e if and only if the \u003ccode\u003eBigDecimal\u003c/code\u003e \u003ccode\u003ei\u003c/code\u003e represents the same value as the \u003ccode\u003eBigDecimal\u003c/code\u003e \u003ccode\u003ej\u003c/code\u003e.\" Other pseudo-code expressions are interpreted similarly. Square brackets are used to represent the particular \u003ccode\u003eBigInteger\u003c/code\u003e and scale pair defining a \u003ccode\u003eBigDecimal\u003c/code\u003e value; for example [19, 2] is the \u003ccode\u003eBigDecimal\u003c/code\u003e numerically equal to 0.19 having a scale of 2. \u003c/p\u003e\n\u003cp\u003eAll methods and constructors for this class throw \u003ccode\u003eNullPointerException\u003c/code\u003e when passed a \u003ccode\u003enull\u003c/code\u003e object reference for any input parameter.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/BigInteger.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eBigInteger\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/MathContext.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eMathContext\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/math/RoundingMode.html\" title\u003d\"enum class in java.math\"\u003e\u003ccode\u003eRoundingMode\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.math.BigDecimal\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "apiNote": [
      "Care should be exercised if \n\u003ccode\u003eBigDecimal\u003c/code\u003e objects are used as keys in a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedMap\u003c/code\u003e\u003c/a\u003e or elements in a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedSet\u003c/code\u003e\u003c/a\u003e since \n\u003ccode\u003eBigDecimal\u003c/code\u003e\u0027s \n\u003ci\u003enatural ordering\u003c/i\u003e is \n\u003cem\u003einconsistent with equals\u003c/em\u003e. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedMap\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedSet\u003c/code\u003e\u003c/a\u003e for more information."
    ],
    "since": [
      "1.1"
    ]
  }
}