{
  "packageName": "java.util.concurrent",
  "simpleName": "ExecutorCompletionService",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "owner": "java.util.concurrent.ExecutorCompletionService",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "submit",
      "comment": "Description copied from interface: CompletionService",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionService.html#submit(java.util.concurrent.Callable)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionService.html\" title\u003d\"interface in java.util.concurrent\"\u003eCompletionService\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorCompletionService.html\" title\u003d\"type parameter in ExecutorCompletionService\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null"
        ],
        "return": [
          "a Future representing pending completion of the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "owner": "java.util.concurrent.ExecutorCompletionService",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "submit",
      "comment": "Description copied from interface: CompletionService",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionService.html#submit(java.lang.Runnable,V)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionService.html\" title\u003d\"interface in java.util.concurrent\"\u003eCompletionService\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorCompletionService.html\" title\u003d\"type parameter in ExecutorCompletionService\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit",
          "\u003ccode\u003eresult\u003c/code\u003e - the result to return upon successful completion"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null"
        ],
        "return": [
          "a Future representing pending completion of the task, and whose \n\u003ccode\u003eget()\u003c/code\u003e method will return the given result value upon completion"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "owner": "java.util.concurrent.ExecutorCompletionService",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "take",
      "comment": "Description copied from interface: CompletionService",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionService.html#take()\"\u003etake\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionService.html\" title\u003d\"interface in java.util.concurrent\"\u003eCompletionService\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorCompletionService.html\" title\u003d\"type parameter in ExecutorCompletionService\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting"
        ],
        "return": [
          "the Future representing the next completed task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "owner": "java.util.concurrent.ExecutorCompletionService",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "poll",
      "comment": "Description copied from interface: CompletionService",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionService.html#poll()\"\u003epoll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionService.html\" title\u003d\"interface in java.util.concurrent\"\u003eCompletionService\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorCompletionService.html\" title\u003d\"type parameter in ExecutorCompletionService\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the Future representing the next completed task, or \n\u003ccode\u003enull\u003c/code\u003e if none are present"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "owner": "java.util.concurrent.ExecutorCompletionService",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "poll",
      "comment": "Description copied from interface: CompletionService",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionService.html#poll(long,java.util.concurrent.TimeUnit)\"\u003epoll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionService.html\" title\u003d\"interface in java.util.concurrent\"\u003eCompletionService\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorCompletionService.html\" title\u003d\"type parameter in ExecutorCompletionService\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - how long to wait before giving up, in units of \n\u003ccode\u003eunit\u003c/code\u003e",
          "\u003ccode\u003eunit\u003c/code\u003e - a \n\u003ccode\u003eTimeUnit\u003c/code\u003e determining how to interpret the \n\u003ccode\u003etimeout\u003c/code\u003e parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting"
        ],
        "return": [
          "the Future representing the next completed task or \n\u003ccode\u003enull\u003c/code\u003e if the specified waiting time elapses before one is present"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an ExecutorCompletionService using the supplied executor for base task execution and a LinkedBlockingQueue as a completion queue.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if executor is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.BlockingQueue",
            "parameters": [
              {
                "name": "java.util.concurrent.Future",
                "parameters": [
                  {
                    "owner": "java.util.concurrent.ExecutorCompletionService",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "completionQueue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an ExecutorCompletionService using the supplied executor for base task execution and the supplied queue as its completion queue.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use",
          "\u003ccode\u003ecompletionQueue\u003c/code\u003e - the queue to use as the completion queue normally one dedicated for use by this service. This queue is treated as unbounded -- failed attempted \n\u003ccode\u003eQueue.add\u003c/code\u003e operations for completed tasks cause them not to be retrievable."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if executor or completionQueue are \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.ExecutorCompletionService",
  "comment": "A \n\u003ca href\u003d\"CompletionService.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eCompletionService\u003c/code\u003e\u003c/a\u003e that uses a supplied \n\u003ca href\u003d\"Executor.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eExecutor\u003c/code\u003e\u003c/a\u003e to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using \n\u003ccode\u003etake\u003c/code\u003e. The class is lightweight enough to be suitable for transient use when processing groups of tasks. \n\u003cp\u003e \u003cb\u003eUsage Examples.\u003c/b\u003e Suppose you have a set of solvers for a certain problem, each returning a value of some type \u003ccode\u003eResult\u003c/code\u003e, and would like to run them concurrently, processing the results of each of them that return a non-null value, in some method \u003ccode\u003euse(Result r)\u003c/code\u003e. You could write this as: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n void solve(Executor e,\n            Collection\u0026lt;Callable\u0026lt;Result\u0026gt;\u0026gt; solvers)\n     throws InterruptedException, ExecutionException {\n   CompletionService\u0026lt;Result\u0026gt; cs\n       \u003d new ExecutorCompletionService\u0026lt;\u0026gt;(e);\n   solvers.forEach(cs::submit);\n   for (int i \u003d solvers.size(); i \u0026gt; 0; i--) {\n     Result r \u003d cs.take().get();\n     if (r !\u003d null)\n       use(r);\n   }\n }\u003c/code\u003e\u003c/pre\u003e Suppose instead that you would like to use the first non-null result of the set of tasks, ignoring any that encounter exceptions, and cancelling all other tasks when the first one is ready: \n\u003cpre\u003e \u003ccode\u003e\n void solve(Executor e,\n            Collection\u0026lt;Callable\u0026lt;Result\u0026gt;\u0026gt; solvers)\n     throws InterruptedException {\n   CompletionService\u0026lt;Result\u0026gt; cs\n       \u003d new ExecutorCompletionService\u0026lt;\u0026gt;(e);\n   int n \u003d solvers.size();\n   List\u0026lt;Future\u0026lt;Result\u0026gt;\u0026gt; futures \u003d new ArrayList\u0026lt;\u0026gt;(n);\n   Result result \u003d null;\n   try {\n     solvers.forEach(solver -\u0026gt; futures.add(cs.submit(solver)));\n     for (int i \u003d n; i \u0026gt; 0; i--) {\n       try {\n         Result r \u003d cs.take().get();\n         if (r !\u003d null) {\n           result \u003d r;\n           break;\n         }\n       } catch (ExecutionException ignore) {}\n     }\n   } finally {\n     futures.forEach(future -\u0026gt; future.cancel(true));\n   }\n\n   if (result !\u003d null)\n     use(result);\n }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}