{
  "packageName": "java.util.concurrent",
  "simpleName": "CountedCompleter",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.concurrent.ForkJoinTask",
    "parameters": [
      {
        "name": "T",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "compute",
      "comment": "The main computation performed by this task.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CountedCompleter",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "caller",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "onCompletion",
      "comment": "Performs an action when method tryComplete() is invoked and the pending count is zero, or when the unconditional method complete(T) is invoked. By default, this method does nothing. You can distinguish cases by checking the identity of the given caller argument. If not equal to this, then it is typically a subtask that may contain results (and/or links to other results) to combine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecaller\u003c/code\u003e - the task invoking this method (which may be this task itself)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "ex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CountedCompleter",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "caller",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "onExceptionalCompletion",
      "comment": "Performs an action when method ForkJoinTask.completeExceptionally(Throwable) is invoked or method compute() throws an exception, and this task has not already otherwise completed normally. On entry to this method, this task ForkJoinTask.isCompletedAbnormally(). The return value of this method controls further propagation: If true and this task has a completer that has not completed, then that completer is also completed exceptionally, with the same exception as this completer. The default implementation of this method does nothing except return true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eex\u003c/code\u003e - the exception",
          "\u003ccode\u003ecaller\u003c/code\u003e - the task invoking this method (which may be this task itself)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this exception should be propagated to this task\u0027s completer, if one exists"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CountedCompleter",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getCompleter",
      "comment": "Returns the completer established in this task\u0027s constructor, or null if none.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the completer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getPendingCount",
      "comment": "Returns the current pending count.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current pending count"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setPendingCount",
      "comment": "Sets the pending count to the given value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecount\u003c/code\u003e - the count"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "delta",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "addToPendingCount",
      "comment": "Adds (atomically) the given value to the pending count.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edelta\u003c/code\u003e - the value to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "expected",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compareAndSetPendingCount",
      "comment": "Sets (atomically) the pending count to the given count only if it currently holds the given expected value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpected\u003c/code\u003e - the expected value",
          "\u003ccode\u003ecount\u003c/code\u003e - the new value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "decrementPendingCountUnlessZero",
      "comment": "If the pending count is nonzero, (atomically) decrements it.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the initial (undecremented) pending count holding on entry to this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CountedCompleter",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getRoot",
      "comment": "Returns the root of the current computation; i.e., this task if it has no completer, else its completer\u0027s root.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the root of the current computation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "tryComplete",
      "comment": "If the pending count is nonzero, decrements the count; otherwise invokes onCompletion(CountedCompleter) and then similarly tries to complete this task\u0027s completer, if one exists, else marks this task as complete.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "propagateCompletion",
      "comment": "Equivalent to tryComplete() but does not invoke onCompletion(CountedCompleter) along the completion path: If the pending count is nonzero, decrements the count; otherwise, similarly tries to complete this task\u0027s completer, if one exists, else marks this task as complete. This method may be useful in cases where onCompletion should not, or need not, be invoked for each completer in a computation.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.CountedCompleter",
            "name": "T",
            "type": "Variable"
          },
          "name": "rawResult",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "complete",
      "comment": "Regardless of pending count, invokes onCompletion(CountedCompleter), marks this task as complete and further triggers tryComplete() on this task\u0027s completer, if one exists. The given rawResult is used as an argument to setRawResult(T) before invoking onCompletion(CountedCompleter) or marking this task as complete; its value is meaningful only for classes overriding setRawResult. This method does not modify the pending count. This method may be useful when forcing completion as soon as any one (versus all) of several subtask results are obtained. However, in the common (and recommended) case in which setRawResult is not overridden, this effect can be obtained more simply using quietlyCompleteRoot().",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#complete(V)\"\u003ecomplete\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CountedCompleter.html\" title\u003d\"type parameter in CountedCompleter\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erawResult\u003c/code\u003e - the raw result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CountedCompleter",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "firstComplete",
      "comment": "If this task\u0027s pending count is zero, returns this task; otherwise decrements its pending count and returns null. This method is designed to be used with nextComplete() in completion traversal loops.",
      "annotations": [],
      "tagMap": {
        "return": [
          "this task, if pending count was zero, else \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CountedCompleter",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "nextComplete",
      "comment": "If this task does not have a completer, invokes ForkJoinTask.quietlyComplete() and returns null. Or, if the completer\u0027s pending count is non-zero, decrements that pending count and returns null. Otherwise, returns the completer. This method can be used as part of a completion traversal loop for homogeneous task hierarchies:  \n for (CountedCompleter\u003c?\u003e c \u003d firstComplete();\n      c !\u003d null;\n      c \u003d c.nextComplete()) {\n   // ... process c ...\n }",
      "annotations": [],
      "tagMap": {
        "return": [
          "the completer, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "quietlyCompleteRoot",
      "comment": "Equivalent to getRoot().quietlyComplete().",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "maxTasks",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "helpComplete",
      "comment": "If this task has not completed, attempts to process at most the given number of other unprocessed tasks for which this task is on the completion path, if any are known to exist.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxTasks\u003c/code\u003e - the maximum number of tasks to process. If less than or equal to zero, then no tasks are processed."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "exec",
      "comment": "Implements execution conventions for CountedCompleters.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#exec()\"\u003eexec\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CountedCompleter.html\" title\u003d\"type parameter in CountedCompleter\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task is known to have completed normally"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.CountedCompleter",
        "name": "T",
        "type": "Variable"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRawResult",
      "comment": "Returns the result of the computation. By default, returns null, which is appropriate for Void actions, but in other cases should be overridden, almost always to return a field or function of a field that holds the result upon completion.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#getRawResult()\"\u003egetRawResult\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CountedCompleter.html\" title\u003d\"type parameter in CountedCompleter\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the result of the computation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.CountedCompleter",
            "name": "T",
            "type": "Variable"
          },
          "name": "t",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setRawResult",
      "comment": "A method that result-bearing CountedCompleters may optionally use to help maintain result data. By default, does nothing. Overrides are not recommended. However, if this method is overridden to update existing objects or fields, then it must in general be defined to be thread-safe.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#setRawResult(V)\"\u003esetRawResult\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CountedCompleter.html\" title\u003d\"type parameter in CountedCompleter\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the value"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CountedCompleter",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "completer",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "initialPendingCount",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a new CountedCompleter with the given completer and initial pending count.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecompleter\u003c/code\u003e - this task\u0027s completer, or \n\u003ccode\u003enull\u003c/code\u003e if none",
          "\u003ccode\u003einitialPendingCount\u003c/code\u003e - the initial pending count"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CountedCompleter",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "completer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a new CountedCompleter with the given completer and an initial pending count of zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecompleter\u003c/code\u003e - this task\u0027s completer, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a new CountedCompleter with no completer and an initial pending count of zero.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.concurrent.CountedCompleter",
  "comment": "A \n\u003ca href\u003d\"ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinTask\u003c/code\u003e\u003c/a\u003e with a completion action performed when triggered and there are no remaining pending actions. CountedCompleters are in general more robust in the presence of subtask stalls and blockage than are other forms of ForkJoinTasks, but are less intuitive to program. Uses of CountedCompleter are similar to those of other completion based components (such as \n\u003ca href\u003d\"../../nio/channels/CompletionHandler.html\" title\u003d\"interface in java.nio.channels\"\u003e\u003ccode\u003eCompletionHandler\u003c/code\u003e\u003c/a\u003e) except that multiple \n\u003cem\u003epending\u003c/em\u003e completions may be necessary to trigger the completion action \n\u003ca href\u003d\"#onCompletion(java.util.concurrent.CountedCompleter)\"\u003e\u003ccode\u003eonCompletion(CountedCompleter)\u003c/code\u003e\u003c/a\u003e, not just one. Unless initialized otherwise, the \n\u003ca href\u003d\"#getPendingCount()\"\u003epending count\u003c/a\u003e starts at zero, but may be (atomically) changed using methods \n\u003ca href\u003d\"#setPendingCount(int)\"\u003e\u003ccode\u003esetPendingCount(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"#addToPendingCount(int)\"\u003e\u003ccode\u003eaddToPendingCount(int)\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"#compareAndSetPendingCount(int,int)\"\u003e\u003ccode\u003ecompareAndSetPendingCount(int, int)\u003c/code\u003e\u003c/a\u003e. Upon invocation of \n\u003ca href\u003d\"#tryComplete()\"\u003e\u003ccode\u003etryComplete()\u003c/code\u003e\u003c/a\u003e, if the pending action count is nonzero, it is decremented; otherwise, the completion action is performed, and if this completer itself has a completer, the process is continued with its completer. As is the case with related synchronization components such as \n\u003ca href\u003d\"Phaser.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003ePhaser\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"Semaphore.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eSemaphore\u003c/code\u003e\u003c/a\u003e, these methods affect only internal counts; they do not establish any further internal bookkeeping. In particular, the identities of pending tasks are not maintained. As illustrated below, you can create subclasses that do record some or all pending tasks or their results when needed. As illustrated below, utility methods supporting customization of completion traversals are also provided. However, because CountedCompleters provide only basic synchronization mechanisms, it may be useful to create further abstract subclasses that maintain linkages, fields, and additional support methods appropriate for a set of related usages. \n\u003cp\u003eA concrete CountedCompleter class must define method \u003ca href\u003d\"#compute()\"\u003e\u003ccode\u003ecompute()\u003c/code\u003e\u003c/a\u003e, that should in most cases (as illustrated below), invoke \u003ccode\u003etryComplete()\u003c/code\u003e once before returning. The class may also optionally override method \u003ca href\u003d\"#onCompletion(java.util.concurrent.CountedCompleter)\"\u003e\u003ccode\u003eonCompletion(CountedCompleter)\u003c/code\u003e\u003c/a\u003e to perform an action upon normal completion, and method \u003ca href\u003d\"#onExceptionalCompletion(java.lang.Throwable,java.util.concurrent.CountedCompleter)\"\u003e\u003ccode\u003eonExceptionalCompletion(Throwable, CountedCompleter)\u003c/code\u003e\u003c/a\u003e to perform an action upon any exception. \u003c/p\u003e\n\u003cp\u003eCountedCompleters most often do not bear results, in which case they are normally declared as \u003ccode\u003eCountedCompleter\u0026lt;Void\u0026gt;\u003c/code\u003e, and will always return \u003ccode\u003enull\u003c/code\u003e as a result value. In other cases, you should override method \u003ca href\u003d\"#getRawResult()\"\u003e\u003ccode\u003egetRawResult()\u003c/code\u003e\u003c/a\u003e to provide a result from \u003ccode\u003ejoin(), invoke()\u003c/code\u003e, and related methods. In general, this method should return the value of a field (or a function of one or more fields) of the CountedCompleter object that holds the result upon completion. Method \u003ca href\u003d\"#setRawResult(T)\"\u003e\u003ccode\u003esetRawResult(T)\u003c/code\u003e\u003c/a\u003e by default plays no role in CountedCompleters. It is possible, but rarely applicable, to override this method to maintain other objects or fields holding result data. \u003c/p\u003e\n\u003cp\u003eA CountedCompleter that does not itself have a completer (i.e., one for which \u003ca href\u003d\"#getCompleter()\"\u003e\u003ccode\u003egetCompleter()\u003c/code\u003e\u003c/a\u003e returns \u003ccode\u003enull\u003c/code\u003e) can be used as a regular ForkJoinTask with this added functionality. However, any completer that in turn has another completer serves only as an internal helper for other computations, so its own task status (as reported in methods such as \u003ca href\u003d\"ForkJoinTask.html#isDone()\"\u003e\u003ccode\u003eForkJoinTask.isDone()\u003c/code\u003e\u003c/a\u003e) is arbitrary; this status changes only upon explicit invocations of \u003ca href\u003d\"#complete(T)\"\u003e\u003ccode\u003ecomplete(T)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"ForkJoinTask.html#cancel(boolean)\"\u003e\u003ccode\u003eForkJoinTask.cancel(boolean)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"ForkJoinTask.html#completeExceptionally(java.lang.Throwable)\"\u003e\u003ccode\u003eForkJoinTask.completeExceptionally(Throwable)\u003c/code\u003e\u003c/a\u003e or upon exceptional completion of method \u003ccode\u003ecompute\u003c/code\u003e. Upon any exceptional completion, the exception may be relayed to a task\u0027s completer (and its completer, and so on), if one exists and it has not otherwise already completed. Similarly, cancelling an internal CountedCompleter has only a local effect on that completer, so is not often useful. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eSample Usages.\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eParallel recursive decomposition.\u003c/b\u003e CountedCompleters may be arranged in trees similar to those often used with \u003ca href\u003d\"RecursiveAction.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eRecursiveAction\u003c/code\u003e\u003c/a\u003es, although the constructions involved in setting them up typically vary. Here, the completer of each task is its parent in the computation tree. Even though they entail a bit more bookkeeping, CountedCompleters may be better choices when applying a possibly time-consuming operation (that cannot be further subdivided) to each element of an array or collection; especially when the operation takes a significantly different amount of time to complete for some elements than others, either because of intrinsic variation (for example I/O) or auxiliary effects such as garbage collection. Because CountedCompleters provide their own continuations, other tasks need not block waiting to perform them. \u003c/p\u003e\n\u003cp\u003eFor example, here is an initial version of a utility method that uses divide-by-two recursive decomposition to divide work into single pieces (leaf tasks). Even when work is split into individual calls, tree-based techniques are usually preferable to directly forking leaf tasks, because they reduce inter-thread communication and improve load balancing. In the recursive case, the second of each pair of subtasks to finish triggers completion of their parent (because no result combination is performed, the default no-op implementation of method \u003ccode\u003eonCompletion\u003c/code\u003e is not overridden). The utility method sets up the root task and invokes it (here, implicitly using the \u003ca href\u003d\"ForkJoinPool.html#commonPool()\"\u003e\u003ccode\u003eForkJoinPool.commonPool()\u003c/code\u003e\u003c/a\u003e). It is straightforward and reliable (but not optimal) to always set the pending count to the number of child tasks and call \u003ccode\u003e tryComplete()\u003c/code\u003e immediately before returning. \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n public static \u0026lt;E\u0026gt; void forEach(E[] array, Consumer\u0026lt;E\u0026gt; action) {\n   class Task extends CountedCompleter\u0026lt;Void\u0026gt; {\n     final int lo, hi;\n     Task(Task parent, int lo, int hi) {\n       super(parent); this.lo \u003d lo; this.hi \u003d hi;\n     }\n\n     public void compute() {\n       if (hi - lo \u0026gt;\u003d 2) {\n         int mid \u003d (lo + hi) \u0026gt;\u0026gt;\u0026gt; 1;\n         // must set pending count before fork\n         setPendingCount(2);\n         new Task(this, mid, hi).fork(); // right child\n         new Task(this, lo, mid).fork(); // left child\n       }\n       else if (hi \u0026gt; lo)\n         action.accept(array[lo]);\n       tryComplete();\n     }\n   }\n   new Task(null, 0, array.length).invoke();\n }\u003c/code\u003e\u003c/pre\u003e This design can be improved by noticing that in the recursive case, the task has nothing to do after forking its right task, so can directly invoke its left task before returning. (This is an analog of tail recursion removal.) Also, when the last action in a task is to fork or invoke a subtask (a \"tail call\"), the call to \n\u003ccode\u003e tryComplete()\u003c/code\u003e can be optimized away, at the cost of making the pending count look \"off by one\". \n\u003cpre\u003e \u003ccode\u003e\n     public void compute() {\n       if (hi - lo \u0026gt;\u003d 2) {\n         int mid \u003d (lo + hi) \u0026gt;\u0026gt;\u0026gt; 1;\n         setPendingCount(1); // looks off by one, but correct!\n         new Task(this, mid, hi).fork(); // right child\n         new Task(this, lo, mid).compute(); // direct invoke\n       } else {\n         if (hi \u0026gt; lo)\n           action.accept(array[lo]);\n         tryComplete();\n       }\n     }\u003c/code\u003e\u003c/pre\u003e As a further optimization, notice that the left task need not even exist. Instead of creating a new one, we can continue using the original task, and add a pending count for each fork. Additionally, because no task in this tree implements an \n\u003ca href\u003d\"#onCompletion(java.util.concurrent.CountedCompleter)\"\u003e\u003ccode\u003eonCompletion(CountedCompleter)\u003c/code\u003e\u003c/a\u003e method, \n\u003ccode\u003etryComplete\u003c/code\u003e can be replaced with \n\u003ca href\u003d\"#propagateCompletion()\"\u003e\u003ccode\u003epropagateCompletion()\u003c/code\u003e\u003c/a\u003e. \n\u003cpre\u003e \u003ccode\u003e\n     public void compute() {\n       int n \u003d hi - lo;\n       for (; n \u0026gt;\u003d 2; n /\u003d 2) {\n         addToPendingCount(1);\n         new Task(this, lo + n/2, lo + n).fork();\n       }\n       if (n \u0026gt; 0)\n         action.accept(array[lo]);\n       propagateCompletion();\n     }\u003c/code\u003e\u003c/pre\u003e When pending counts can be precomputed, they can be established in the constructor: \n\u003cpre\u003e \u003ccode\u003e\n public static \u0026lt;E\u0026gt; void forEach(E[] array, Consumer\u0026lt;E\u0026gt; action) {\n   class Task extends CountedCompleter\u0026lt;Void\u0026gt; {\n     final int lo, hi;\n     Task(Task parent, int lo, int hi) {\n       super(parent, 31 - Integer.numberOfLeadingZeros(hi - lo));\n       this.lo \u003d lo; this.hi \u003d hi;\n     }\n\n     public void compute() {\n       for (int n \u003d hi - lo; n \u0026gt;\u003d 2; n /\u003d 2)\n         new Task(this, lo + n/2, lo + n).fork();\n       action.accept(array[lo]);\n       propagateCompletion();\n     }\n   }\n   if (array.length \u0026gt; 0)\n     new Task(null, 0, array.length).invoke();\n }\u003c/code\u003e\u003c/pre\u003e Additional optimizations of such classes might entail specializing classes for leaf steps, subdividing by say, four, instead of two per iteration, and using an adaptive threshold instead of always subdividing down to single elements. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eSearching.\u003c/b\u003e A tree of CountedCompleters can search for a value or property in different parts of a data structure, and report a result in an \u003ca href\u003d\"atomic/AtomicReference.html\" title\u003d\"class in java.util.concurrent.atomic\"\u003e\u003ccode\u003eAtomicReference\u003c/code\u003e\u003c/a\u003e as soon as one is found. The others can poll the result to avoid unnecessary work. (You could additionally \u003ca href\u003d\"ForkJoinTask.html#cancel(boolean)\"\u003ecancel\u003c/a\u003e other tasks, but it is usually simpler and more efficient to just let them notice that the result is set and if so skip further processing.) Illustrating again with an array using full partitioning (again, in practice, leaf tasks will almost always process more than one element): \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class Searcher\u0026lt;E\u0026gt; extends CountedCompleter\u0026lt;E\u0026gt; {\n   final E[] array; final AtomicReference\u0026lt;E\u0026gt; result; final int lo, hi;\n   Searcher(CountedCompleter\u0026lt;?\u0026gt; p, E[] array, AtomicReference\u0026lt;E\u0026gt; result, int lo, int hi) {\n     super(p);\n     this.array \u003d array; this.result \u003d result; this.lo \u003d lo; this.hi \u003d hi;\n   }\n   public E getRawResult() { return result.get(); }\n   public void compute() { // similar to ForEach version 3\n     int l \u003d lo, h \u003d hi;\n     while (result.get() \u003d\u003d null \u0026amp;\u0026amp; h \u0026gt;\u003d l) {\n       if (h - l \u0026gt;\u003d 2) {\n         int mid \u003d (l + h) \u0026gt;\u0026gt;\u0026gt; 1;\n         addToPendingCount(1);\n         new Searcher(this, array, result, mid, h).fork();\n         h \u003d mid;\n       }\n       else {\n         E x \u003d array[l];\n         if (matches(x) \u0026amp;\u0026amp; result.compareAndSet(null, x))\n           quietlyCompleteRoot(); // root task is now joinable\n         break;\n       }\n     }\n     tryComplete(); // normally complete whether or not found\n   }\n   boolean matches(E e) { ... } // return true if found\n\n   public static \u0026lt;E\u0026gt; E search(E[] array) {\n       return new Searcher\u0026lt;E\u0026gt;(null, array, new AtomicReference\u0026lt;E\u0026gt;(), 0, array.length).invoke();\n   }\n }\u003c/code\u003e\u003c/pre\u003e In this example, as well as others in which tasks have no other effects except to \n\u003ccode\u003ecompareAndSet\u003c/code\u003e a common result, the trailing unconditional invocation of \n\u003ccode\u003etryComplete\u003c/code\u003e could be made conditional (\n\u003ccode\u003eif (result.get() \u003d\u003d null) tryComplete();\u003c/code\u003e) because no further bookkeeping is required to manage completions once the root task completes. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eRecording subtasks.\u003c/b\u003e CountedCompleter tasks that combine results of multiple subtasks usually need to access these results in method \u003ca href\u003d\"#onCompletion(java.util.concurrent.CountedCompleter)\"\u003e\u003ccode\u003eonCompletion(CountedCompleter)\u003c/code\u003e\u003c/a\u003e. As illustrated in the following class (that performs a simplified form of map-reduce where mappings and reductions are all of type \u003ccode\u003eE\u003c/code\u003e), one way to do this in divide and conquer designs is to have each subtask record its sibling, so that it can be accessed in method \u003ccode\u003eonCompletion\u003c/code\u003e. This technique applies to reductions in which the order of combining left and right results does not matter; ordered reductions require explicit left/right designations. Variants of other streamlinings seen in the above examples may also apply. \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class MyMapper\u0026lt;E\u0026gt; { E apply(E v) {  ...  } }\n class MyReducer\u0026lt;E\u0026gt; { E apply(E x, E y) {  ...  } }\n class MapReducer\u0026lt;E\u0026gt; extends CountedCompleter\u0026lt;E\u0026gt; {\n   final E[] array; final MyMapper\u0026lt;E\u0026gt; mapper;\n   final MyReducer\u0026lt;E\u0026gt; reducer; final int lo, hi;\n   MapReducer\u0026lt;E\u0026gt; sibling;\n   E result;\n   MapReducer(CountedCompleter\u0026lt;?\u0026gt; p, E[] array, MyMapper\u0026lt;E\u0026gt; mapper,\n              MyReducer\u0026lt;E\u0026gt; reducer, int lo, int hi) {\n     super(p);\n     this.array \u003d array; this.mapper \u003d mapper;\n     this.reducer \u003d reducer; this.lo \u003d lo; this.hi \u003d hi;\n   }\n   public void compute() {\n     if (hi - lo \u0026gt;\u003d 2) {\n       int mid \u003d (lo + hi) \u0026gt;\u0026gt;\u0026gt; 1;\n       MapReducer\u0026lt;E\u0026gt; left \u003d new MapReducer(this, array, mapper, reducer, lo, mid);\n       MapReducer\u0026lt;E\u0026gt; right \u003d new MapReducer(this, array, mapper, reducer, mid, hi);\n       left.sibling \u003d right;\n       right.sibling \u003d left;\n       setPendingCount(1); // only right is pending\n       right.fork();\n       left.compute();     // directly execute left\n     }\n     else {\n       if (hi \u0026gt; lo)\n           result \u003d mapper.apply(array[lo]);\n       tryComplete();\n     }\n   }\n   public void onCompletion(CountedCompleter\u0026lt;?\u0026gt; caller) {\n     if (caller !\u003d this) {\n       MapReducer\u0026lt;E\u0026gt; child \u003d (MapReducer\u0026lt;E\u0026gt;)caller;\n       MapReducer\u0026lt;E\u0026gt; sib \u003d child.sibling;\n       if (sib \u003d\u003d null || sib.result \u003d\u003d null)\n         result \u003d child.result;\n       else\n         result \u003d reducer.apply(child.result, sib.result);\n     }\n   }\n   public E getRawResult() { return result; }\n\n   public static \u0026lt;E\u0026gt; E mapReduce(E[] array, MyMapper\u0026lt;E\u0026gt; mapper, MyReducer\u0026lt;E\u0026gt; reducer) {\n     return new MapReducer\u0026lt;E\u0026gt;(null, array, mapper, reducer,\n                              0, array.length).invoke();\n   }\n }\u003c/code\u003e\u003c/pre\u003e Here, method \n\u003ccode\u003eonCompletion\u003c/code\u003e takes a form common to many completion designs that combine results. This callback-style method is triggered once per task, in either of the two different contexts in which the pending count is, or becomes, zero: (1) by a task itself, if its pending count is zero upon invocation of \n\u003ccode\u003e tryComplete\u003c/code\u003e, or (2) by any of its subtasks when they complete and decrement the pending count to zero. The \n\u003ccode\u003ecaller\u003c/code\u003e argument distinguishes cases. Most often, when the caller is \n\u003ccode\u003ethis\u003c/code\u003e, no action is necessary. Otherwise the caller argument can be used (usually via a cast) to supply a value (and/or links to other values) to be combined. Assuming proper use of pending counts, the actions inside \n\u003ccode\u003eonCompletion\u003c/code\u003e occur (once) upon completion of a task and its subtasks. No additional synchronization is required within this method to ensure thread safety of accesses to fields of this task or other completed tasks. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eCompletion Traversals\u003c/b\u003e. If using \u003ccode\u003eonCompletion\u003c/code\u003e to process completions is inapplicable or inconvenient, you can use methods \u003ca href\u003d\"#firstComplete()\"\u003e\u003ccode\u003efirstComplete()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#nextComplete()\"\u003e\u003ccode\u003enextComplete()\u003c/code\u003e\u003c/a\u003e to create custom traversals. For example, to define a MapReducer that only splits out right-hand tasks in the form of the third ForEach example, the completions must cooperatively reduce along unexhausted subtask links, which can be done as follows: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class MapReducer\u0026lt;E\u0026gt; extends CountedCompleter\u0026lt;E\u0026gt; { // version 2\n   final E[] array; final MyMapper\u0026lt;E\u0026gt; mapper;\n   final MyReducer\u0026lt;E\u0026gt; reducer; final int lo, hi;\n   MapReducer\u0026lt;E\u0026gt; forks, next; // record subtask forks in list\n   E result;\n   MapReducer(CountedCompleter\u0026lt;?\u0026gt; p, E[] array, MyMapper\u0026lt;E\u0026gt; mapper,\n              MyReducer\u0026lt;E\u0026gt; reducer, int lo, int hi, MapReducer\u0026lt;E\u0026gt; next) {\n     super(p);\n     this.array \u003d array; this.mapper \u003d mapper;\n     this.reducer \u003d reducer; this.lo \u003d lo; this.hi \u003d hi;\n     this.next \u003d next;\n   }\n   public void compute() {\n     int l \u003d lo, h \u003d hi;\n     while (h - l \u0026gt;\u003d 2) {\n       int mid \u003d (l + h) \u0026gt;\u0026gt;\u0026gt; 1;\n       addToPendingCount(1);\n       (forks \u003d new MapReducer(this, array, mapper, reducer, mid, h, forks)).fork();\n       h \u003d mid;\n     }\n     if (h \u0026gt; l)\n       result \u003d mapper.apply(array[l]);\n     // process completions by reducing along and advancing subtask links\n     for (CountedCompleter\u0026lt;?\u0026gt; c \u003d firstComplete(); c !\u003d null; c \u003d c.nextComplete()) {\n       for (MapReducer t \u003d (MapReducer)c, s \u003d t.forks; s !\u003d null; s \u003d t.forks \u003d s.next)\n         t.result \u003d reducer.apply(t.result, s.result);\n     }\n   }\n   public E getRawResult() { return result; }\n\n   public static \u0026lt;E\u0026gt; E mapReduce(E[] array, MyMapper\u0026lt;E\u0026gt; mapper, MyReducer\u0026lt;E\u0026gt; reducer) {\n     return new MapReducer\u0026lt;E\u0026gt;(null, array, mapper, reducer,\n                              0, array.length, null).invoke();\n   }\n }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eTriggers.\u003c/b\u003e Some CountedCompleters are themselves never forked, but instead serve as bits of plumbing in other designs; including those in which the completion of one or more async tasks triggers another async task. For example: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class HeaderBuilder extends CountedCompleter\u0026lt;...\u0026gt; { ... }\n class BodyBuilder extends CountedCompleter\u0026lt;...\u0026gt; { ... }\n class PacketSender extends CountedCompleter\u0026lt;...\u0026gt; {\n   PacketSender(...) { super(null, 1); ... } // trigger on second completion\n   public void compute() { } // never called\n   public void onCompletion(CountedCompleter\u0026lt;?\u0026gt; caller) { sendPacket(); }\n }\n // sample use:\n PacketSender p \u003d new PacketSender();\n new HeaderBuilder(p, ...).fork();\n new BodyBuilder(p, ...).fork();\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.CountedCompleter\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}