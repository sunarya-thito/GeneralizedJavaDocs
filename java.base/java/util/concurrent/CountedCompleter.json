{
  "packageName": "java.util.concurrent",
  "simpleName": "CountedCompleter",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.concurrent.ForkJoinTask",
    "parameters": [
      {
        "name": "T",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "compute",
      "comment": "The main computation performed by this task.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CountedCompleter",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "caller",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "onCompletion",
      "comment": "Performs an action when method tryComplete() is invoked and the pending count is zero, or when the unconditional method complete(T) is invoked. By default, this method does nothing. You can distinguish cases by checking the identity of the given caller argument. If not equal to this, then it is typically a subtask that may contain results (and/or links to other results) to combine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecaller\u003c/code\u003e - the task invoking this method (which may be this task itself)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "ex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CountedCompleter",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "caller",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "onExceptionalCompletion",
      "comment": "Performs an action when method ForkJoinTask.completeExceptionally(Throwable) is invoked or method compute() throws an exception, and this task has not already otherwise completed normally. On entry to this method, this task ForkJoinTask.isCompletedAbnormally(). The return value of this method controls further propagation: If true and this task has a completer that has not completed, then that completer is also completed exceptionally, with the same exception as this completer. The default implementation of this method does nothing except return true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eex\u003c/code\u003e - the exception",
          "\u003ccode\u003ecaller\u003c/code\u003e - the task invoking this method (which may be this task itself)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this exception should be propagated to this task\u0027s completer, if one exists"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CountedCompleter",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getCompleter",
      "comment": "Returns the completer established in this task\u0027s constructor, or null if none.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the completer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getPendingCount",
      "comment": "Returns the current pending count.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current pending count"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setPendingCount",
      "comment": "Sets the pending count to the given value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecount\u003c/code\u003e - the count"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "delta",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "addToPendingCount",
      "comment": "Adds (atomically) the given value to the pending count.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edelta\u003c/code\u003e - the value to add"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "expected",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "count",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compareAndSetPendingCount",
      "comment": "Sets (atomically) the pending count to the given count only if it currently holds the given expected value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpected\u003c/code\u003e - the expected value",
          "\u003ccode\u003ecount\u003c/code\u003e - the new value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "decrementPendingCountUnlessZero",
      "comment": "If the pending count is nonzero, (atomically) decrements it.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the initial (undecremented) pending count holding on entry to this method"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CountedCompleter",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getRoot",
      "comment": "Returns the root of the current computation; i.e., this task if it has no completer, else its completer\u0027s root.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the root of the current computation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "tryComplete",
      "comment": "If the pending count is nonzero, decrements the count; otherwise invokes onCompletion(CountedCompleter) and then similarly tries to complete this task\u0027s completer, if one exists, else marks this task as complete.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "propagateCompletion",
      "comment": "Equivalent to tryComplete() but does not invoke onCompletion(CountedCompleter) along the completion path: If the pending count is nonzero, decrements the count; otherwise, similarly tries to complete this task\u0027s completer, if one exists, else marks this task as complete. This method may be useful in cases where onCompletion should not, or need not, be invoked for each completer in a computation.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.CountedCompleter",
            "name": "T",
            "type": "Variable"
          },
          "name": "rawResult",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "complete",
      "comment": "Regardless of pending count, invokes onCompletion(CountedCompleter), marks this task as complete and further triggers tryComplete() on this task\u0027s completer, if one exists. The given rawResult is used as an argument to setRawResult(T) before invoking onCompletion(CountedCompleter) or marking this task as complete; its value is meaningful only for classes overriding setRawResult. This method does not modify the pending count. This method may be useful when forcing completion as soon as any one (versus all) of several subtask results are obtained. However, in the common (and recommended) case in which setRawResult is not overridden, this effect can be obtained more simply using quietlyCompleteRoot().",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#complete(V)\"\u003ecomplete\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CountedCompleter.html\" title\u003d\"type parameter in CountedCompleter\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erawResult\u003c/code\u003e - the raw result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CountedCompleter",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "firstComplete",
      "comment": "If this task\u0027s pending count is zero, returns this task; otherwise decrements its pending count and returns null. This method is designed to be used with nextComplete() in completion traversal loops.",
      "annotations": [],
      "tagMap": {
        "return": [
          "this task, if pending count was zero, else \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CountedCompleter",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "nextComplete",
      "comment": "If this task does not have a completer, invokes ForkJoinTask.quietlyComplete() and returns null. Or, if the completer\u0027s pending count is non-zero, decrements that pending count and returns null. Otherwise, returns the completer. This method can be used as part of a completion traversal loop for homogeneous task hierarchies:  \n for (CountedCompleter\u003c?\u003e c \u003d firstComplete();\n      c !\u003d null;\n      c \u003d c.nextComplete()) {\n   // ... process c ...\n }",
      "annotations": [],
      "tagMap": {
        "return": [
          "the completer, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "quietlyCompleteRoot",
      "comment": "Equivalent to getRoot().quietlyComplete().",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "maxTasks",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "helpComplete",
      "comment": "If this task has not completed, attempts to process at most the given number of other unprocessed tasks for which this task is on the completion path, if any are known to exist.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emaxTasks\u003c/code\u003e - the maximum number of tasks to process. If less than or equal to zero, then no tasks are processed."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "exec",
      "comment": "Implements execution conventions for CountedCompleters.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#exec()\"\u003eexec\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CountedCompleter.html\" title\u003d\"type parameter in CountedCompleter\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task is known to have completed normally"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.CountedCompleter",
        "name": "T",
        "type": "Variable"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRawResult",
      "comment": "Returns the result of the computation. By default, returns null, which is appropriate for Void actions, but in other cases should be overridden, almost always to return a field or function of a field that holds the result upon completion.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#getRawResult()\"\u003egetRawResult\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CountedCompleter.html\" title\u003d\"type parameter in CountedCompleter\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the result of the computation"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.CountedCompleter",
            "name": "T",
            "type": "Variable"
          },
          "name": "t",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setRawResult",
      "comment": "A method that result-bearing CountedCompleters may optionally use to help maintain result data. By default, does nothing. Overrides are not recommended. However, if this method is overridden to update existing objects or fields, then it must in general be defined to be thread-safe.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#setRawResult(V)\"\u003esetRawResult\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CountedCompleter.html\" title\u003d\"type parameter in CountedCompleter\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the value"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CountedCompleter",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "completer",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "initialPendingCount",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a new CountedCompleter with the given completer and initial pending count.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecompleter\u003c/code\u003e - this task\u0027s completer, or \n\u003ccode\u003enull\u003c/code\u003e if none",
          "\u003ccode\u003einitialPendingCount\u003c/code\u003e - the initial pending count"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CountedCompleter",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "completer",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a new CountedCompleter with the given completer and an initial pending count of zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecompleter\u003c/code\u003e - this task\u0027s completer, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a new CountedCompleter with no completer and an initial pending count of zero.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.concurrent.CountedCompleter",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.CountedCompleter\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}