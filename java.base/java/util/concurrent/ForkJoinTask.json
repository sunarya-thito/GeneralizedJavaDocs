{
  "packageName": "java.util.concurrent",
  "simpleName": "ForkJoinTask",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "owner": "java.util.concurrent.ForkJoinTask",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "fork",
      "comment": "Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the ForkJoinPool.commonPool() if not inForkJoinPool(). While it is not necessarily enforced, it is a usage error to fork a task more than once unless it has completed and been reinitialized. Subsequent modifications to the state of this task or any data it operates on are not necessarily consistently observable by any thread other than the one executing it unless preceded by a call to join() or related methods, or a call to isDone() returning true.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003ethis\u003c/code\u003e, to simplify usage"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ForkJoinTask",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "join",
      "comment": "Returns the result of the computation when it is done. This method differs from get() in that abnormal completion results in RuntimeException or Error, not ExecutionException, and that interrupts of the calling thread do not cause the method to abruptly return by throwing InterruptedException.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the computed result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ForkJoinTask",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "invoke",
      "comment": "Commences performing this task, awaits its completion if necessary, and returns its result, or throws an (unchecked) RuntimeException or Error if the underlying computation did so.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the computed result"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.ForkJoinTask",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "t1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.ForkJoinTask",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "t2",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "invokeAll",
      "comment": "Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, the other may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using getException() and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003et1\u003c/code\u003e - the first task",
          "\u003ccode\u003et2\u003c/code\u003e - the second task"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any task is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.ForkJoinTask",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "tasks",
          "varargs": true
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "invokeAll",
      "comment": "Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using getException() and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etasks\u003c/code\u003e - the tasks"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any task is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "tasks",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.util.concurrent.ForkJoinTask",
              "parameters": [
                {
                  "type": "Wildcard"
                }
              ],
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "invokeAll",
      "comment": "Forks all tasks in the specified collection, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown. If more than one task encounters an exception, then this method throws any one of these exceptions. If any task encounters an exception, others may be cancelled. However, the execution status of individual tasks is not guaranteed upon exceptional return. The status of each task may be obtained using getException() and related methods to check if they have been cancelled, completed normally or exceptionally, or left unprocessed.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the values returned from the tasks"
        ],
        "param": [
          "\u003ccode\u003etasks\u003c/code\u003e - the collection of tasks"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if tasks or any element are null"
        ],
        "return": [
          "the tasks argument, to simplify usage"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "mayInterruptIfRunning",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "cancel",
      "comment": "Attempts to cancel execution of this task. This attempt will fail if the task has already completed or could not be cancelled for some other reason. If successful, and this task has not started when cancel is called, execution of this task is suppressed. After this method returns successfully, unless there is an intervening call to reinitialize(), subsequent calls to isCancelled(), isDone(), and cancel will return true and calls to join() and related methods will result in CancellationException. This method may be overridden in subclasses, but if so, must still ensure that these properties hold. In particular, the cancel method itself must not throw exceptions. This method is designed to be invoked by other tasks. To terminate the current task, you can just return or throw an unchecked exception from its computation method, or invoke completeExceptionally(Throwable).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html#cancel(boolean)\"\u003ecancel\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html\" title\u003d\"interface in java.util.concurrent\"\u003eFuture\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"type parameter in ForkJoinTask\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003emayInterruptIfRunning\u003c/code\u003e - this value has no effect in the default implementation because interrupts are not used to control cancellation."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task is now cancelled"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isDone",
      "comment": "Description copied from interface: Future",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html#isDone()\"\u003eisDone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html\" title\u003d\"interface in java.util.concurrent\"\u003eFuture\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"type parameter in ForkJoinTask\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task completed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isCancelled",
      "comment": "Description copied from interface: Future",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html#isCancelled()\"\u003eisCancelled\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html\" title\u003d\"interface in java.util.concurrent\"\u003eFuture\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"type parameter in ForkJoinTask\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task was cancelled before it completed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isCompletedAbnormally",
      "comment": "Returns true if this task threw an exception or was cancelled.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task threw an exception or was cancelled"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isCompletedNormally",
      "comment": "Returns true if this task completed without throwing an exception and was not cancelled.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task completed without throwing an exception and was not cancelled"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Throwable",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getException",
      "comment": "Returns the exception thrown by the base computation, or a CancellationException if cancelled, or null if none or if the method has not yet completed.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the exception, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "name": "ex",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "completeExceptionally",
      "comment": "Completes this task abnormally, and if not already aborted or cancelled, causes it to throw the given exception upon join and related operations. This method may be used to induce exceptions in asynchronous tasks, or to force completion of tasks that would not otherwise complete. Its use in other situations is discouraged. This method is overridable, but overridden versions must invoke super implementation to maintain guarantees.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eex\u003c/code\u003e - the exception to throw. If this exception is not a \n\u003ccode\u003eRuntimeException\u003c/code\u003e or \n\u003ccode\u003eError\u003c/code\u003e, the actual exception thrown will be a \n\u003ccode\u003eRuntimeException\u003c/code\u003e with cause \n\u003ccode\u003eex\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.ForkJoinTask",
            "name": "V",
            "type": "Variable"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "complete",
      "comment": "Completes this task, and if not already aborted or cancelled, returning the given value as the result of subsequent invocations of join and related operations. This method may be used to provide results for asynchronous tasks, or to provide alternative handling for tasks that would not otherwise complete normally. Its use in other situations is discouraged. This method is overridable, but overridden versions must invoke super implementation to maintain guarantees.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the result value for this task"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "quietlyComplete",
      "comment": "Completes this task normally without setting a value. The most recent value established by setRawResult(V) (or null by default) will be returned as the result of subsequent invocations of join and related operations.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ForkJoinTask",
        "name": "V",
        "type": "Variable"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        },
        {
          "name": "java.util.concurrent.ExecutionException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "get",
      "comment": "Waits if necessary for the computation to complete, and then retrieves its result.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html#get()\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html\" title\u003d\"interface in java.util.concurrent\"\u003eFuture\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"type parameter in ForkJoinTask\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CancellationException.html\" title\u003d\"class in java.util.concurrent\"\u003eCancellationException\u003c/a\u003e\u003c/code\u003e - if the computation was cancelled",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eExecutionException\u003c/a\u003e\u003c/code\u003e - if the computation threw an exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is not a member of a ForkJoinPool and was interrupted while waiting"
        ],
        "return": [
          "the computed result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ForkJoinTask",
        "name": "V",
        "type": "Variable"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        },
        {
          "name": "java.util.concurrent.ExecutionException",
          "type": "Class"
        },
        {
          "name": "java.util.concurrent.TimeoutException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "timeout",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "get",
      "comment": "Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html#get(long,java.util.concurrent.TimeUnit)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html\" title\u003d\"interface in java.util.concurrent\"\u003eFuture\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"type parameter in ForkJoinTask\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the timeout argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CancellationException.html\" title\u003d\"class in java.util.concurrent\"\u003eCancellationException\u003c/a\u003e\u003c/code\u003e - if the computation was cancelled",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eExecutionException\u003c/a\u003e\u003c/code\u003e - if the computation threw an exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is not a member of a ForkJoinPool and was interrupted while waiting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/TimeoutException.html\" title\u003d\"class in java.util.concurrent\"\u003eTimeoutException\u003c/a\u003e\u003c/code\u003e - if the wait timed out"
        ],
        "return": [
          "the computed result"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "quietlyJoin",
      "comment": "Joins this task, without returning its result or throwing its exception. This method may be useful when processing collections of tasks when some have been cancelled or otherwise known to have aborted.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "quietlyInvoke",
      "comment": "Commences performing this task and awaits its completion if necessary, without returning its result or throwing its exception.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "helpQuiesce",
      "comment": "Possibly executes tasks until the pool hosting the current task is quiescent. This method may be of use in designs in which many tasks are forked, but none are explicitly joined, instead executing them until all are processed.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reinitialize",
      "comment": "Resets the internal bookkeeping state of this task, allowing a subsequent fork. This method allows repeated reuse of this task, but only if reuse occurs when this task has either never been forked, or has been forked, then completed and all outstanding joins of this task have also completed. Effects under any other usage conditions are not guaranteed. This method may be useful when executing pre-constructed trees of subtasks in loops. Upon completion of this method, isDone() reports false, and getException() reports null. However, the value returned by getRawResult is unaffected. To clear this value, you can invoke setRawResult(null).",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinPool",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getPool",
      "comment": "Returns the pool hosting the current thread, or null if the current thread is executing outside of any ForkJoinPool. This method returns null if and only if inForkJoinPool() returns false.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the pool, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "inForkJoinPool",
      "comment": "Returns true if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the current thread is a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinWorkerThread.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinWorkerThread\u003c/code\u003e\u003c/a\u003e executing as a ForkJoinPool computation, or \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryUnfork",
      "comment": "Tries to unschedule this task for execution. This method will typically (but is not guaranteed to) succeed if this task is the most recently forked task by the current thread, and has not commenced executing in another thread. This method may be useful when arranging alternative local processing of tasks that could have been, but were not, stolen.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if unforked"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getQueuedTaskCount",
      "comment": "Returns an estimate of the number of tasks that have been forked by the current worker thread but not yet executed. This value may be useful for heuristic decisions about whether to fork other tasks.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of tasks"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getSurplusQueuedTaskCount",
      "comment": "Returns an estimate of how many more locally queued tasks are held by the current worker thread than there are other worker threads that might steal them, or zero if this thread is not operating in a ForkJoinPool. This value may be useful for heuristic decisions about whether to fork other tasks. In many usages of ForkJoinTasks, at steady state, each worker should aim to maintain a small constant surplus (for example, 3) of tasks, and to process computations locally if this threshold is exceeded.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the surplus number of tasks, which may be negative"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ForkJoinTask",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRawResult",
      "comment": "Returns the result that would be returned by join(), even if this task completed abnormally, or null if this task is not known to have been completed. This method is designed to aid debugging, as well as to support extensions. Its use in any other context is discouraged.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the result, or \n\u003ccode\u003enull\u003c/code\u003e if not completed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.ForkJoinTask",
            "name": "V",
            "type": "Variable"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "setRawResult",
      "comment": "Forces the given value to be returned as a result. This method is designed to support extensions, and should not in general be called otherwise.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "exec",
      "comment": "Immediately performs the base action of this task and returns true if, upon return from this method, this task is guaranteed to have completed. This method may return false otherwise, to indicate that this task is not necessarily complete (or is not known to be complete), for example in asynchronous actions that require explicit invocations of completion methods. This method may also throw an (unchecked) exception to indicate abnormal exit. This method is designed to support extensions, and should not in general be called otherwise.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task is known to have completed normally"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 12,
      "name": "peekNextLocalTask",
      "comment": "Returns, but does not unschedule or execute, a task queued by the current thread but not yet executed, if one is immediately available. There is no guarantee that this task will actually be polled or executed next. Conversely, this method may return null even if a task exists but cannot be accessed without contention with other threads. This method is designed primarily to support extensions, and is unlikely to be useful otherwise.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the next task, or \n\u003ccode\u003enull\u003c/code\u003e if none are available"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 12,
      "name": "pollNextLocalTask",
      "comment": "Unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if the current thread is operating in a ForkJoinPool. This method is designed primarily to support extensions, and is unlikely to be useful otherwise.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the next task, or \n\u003ccode\u003enull\u003c/code\u003e if none are available"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 12,
      "name": "pollTask",
      "comment": "If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if one is available, or if not available, a task that was forked by some other thread, if available. Availability may be transient, so a null result does not necessarily imply quiescence of the pool this task is operating in. This method is designed primarily to support extensions, and is unlikely to be useful otherwise.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a task, or \n\u003ccode\u003enull\u003c/code\u003e if none are available"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 12,
      "name": "pollSubmission",
      "comment": "If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, a task externally submitted to the pool, if one is available. Availability may be transient, so a null result does not necessarily imply quiescence of the pool. This method is designed primarily to support extensions, and is unlikely to be useful otherwise.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a task, or \n\u003ccode\u003enull\u003c/code\u003e if none are available"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getForkJoinTaskTag",
      "comment": "Returns the tag for this task.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the tag for this task"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "short",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setForkJoinTaskTag",
      "comment": "Atomically sets the tag value for this task and returns the old value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new tag value"
        ],
        "return": [
          "the previous value of the tag"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "short",
            "type": "Class"
          },
          "name": "expect",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "short",
            "type": "Class"
          },
          "name": "update",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compareAndSetForkJoinTaskTag",
      "comment": "Atomically conditionally sets the tag value for this task. Among other applications, tags can be used as visit markers in tasks operating on graphs, as in methods that check: if (task.compareAndSetForkJoinTaskTag((short)0, (short)1)) before processing, otherwise exiting because the node has already been visited.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpect\u003c/code\u003e - the expected tag value",
          "\u003ccode\u003eupdate\u003c/code\u003e - the new tag value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful; i.e., the current value was equal to \n\u003ccode\u003eexpect\u003c/code\u003e and was changed to \n\u003ccode\u003eupdate\u003c/code\u003e."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "runnable",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "adapt",
      "comment": "Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns a null result upon join().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003erunnable\u003c/code\u003e - the runnable action"
        ],
        "return": [
          "the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "runnable",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "result",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "adapt",
      "comment": "Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns the given result upon join().",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the result"
        ],
        "param": [
          "\u003ccode\u003erunnable\u003c/code\u003e - the runnable action",
          "\u003ccode\u003eresult\u003c/code\u003e - the result upon completion"
        ],
        "return": [
          "the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Callable",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "callable",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "adapt",
      "comment": "Returns a new ForkJoinTask that performs the call method of the given Callable as its action, and returns its result upon join(), translating any checked exceptions encountered into RuntimeException.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the callable\u0027s result"
        ],
        "param": [
          "\u003ccode\u003ecallable\u003c/code\u003e - the callable action"
        ],
        "return": [
          "the task"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "genericParameters": [
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.concurrent.ForkJoinTask",
  "comment": "Abstract base class for tasks that run within a \n\u003ca href\u003d\"ForkJoinPool.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinPool\u003c/code\u003e\u003c/a\u003e. A \n\u003ccode\u003eForkJoinTask\u003c/code\u003e is a thread-like entity that is much lighter weight than a normal thread. Huge numbers of tasks and subtasks may be hosted by a small number of actual threads in a ForkJoinPool, at the price of some usage limitations. \n\u003cp\u003eA \"main\" \u003ccode\u003eForkJoinTask\u003c/code\u003e begins execution when it is explicitly submitted to a \u003ca href\u003d\"ForkJoinPool.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinPool\u003c/code\u003e\u003c/a\u003e, or, if not already engaged in a ForkJoin computation, commenced in the \u003ca href\u003d\"ForkJoinPool.html#commonPool()\"\u003e\u003ccode\u003eForkJoinPool.commonPool()\u003c/code\u003e\u003c/a\u003e via \u003ca href\u003d\"#fork()\"\u003e\u003ccode\u003efork()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#invoke()\"\u003e\u003ccode\u003einvoke()\u003c/code\u003e\u003c/a\u003e, or related methods. Once started, it will usually in turn start other subtasks. As indicated by the name of this class, many programs using \u003ccode\u003eForkJoinTask\u003c/code\u003e employ only methods \u003ca href\u003d\"#fork()\"\u003e\u003ccode\u003efork()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#join()\"\u003e\u003ccode\u003ejoin()\u003c/code\u003e\u003c/a\u003e, or derivatives such as \u003ca href\u003d\"#invokeAll(java.util.concurrent.ForkJoinTask...)\"\u003e\u003ccode\u003einvokeAll\u003c/code\u003e\u003c/a\u003e. However, this class also provides a number of other methods that can come into play in advanced usages, as well as extension mechanics that allow support of new forms of fork/join processing. \u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eForkJoinTask\u003c/code\u003e is a lightweight form of \u003ca href\u003d\"Future.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eFuture\u003c/code\u003e\u003c/a\u003e. The efficiency of \u003ccode\u003eForkJoinTask\u003c/code\u003es stems from a set of restrictions (that are only partially statically enforceable) reflecting their main use as computational tasks calculating pure functions or operating on purely isolated objects. The primary coordination mechanisms are \u003ca href\u003d\"#fork()\"\u003e\u003ccode\u003efork()\u003c/code\u003e\u003c/a\u003e, that arranges asynchronous execution, and \u003ca href\u003d\"#join()\"\u003e\u003ccode\u003ejoin()\u003c/code\u003e\u003c/a\u003e, that doesn\u0027t proceed until the task\u0027s result has been computed. Computations should ideally avoid \u003ccode\u003esynchronized\u003c/code\u003e methods or blocks, and should minimize other blocking synchronization apart from joining other tasks or using synchronizers such as Phasers that are advertised to cooperate with fork/join scheduling. Subdividable tasks should also not perform blocking I/O, and should ideally access variables that are completely independent of those accessed by other running tasks. These guidelines are loosely enforced by not permitting checked exceptions such as \u003ccode\u003eIOExceptions\u003c/code\u003e to be thrown. However, computations may still encounter unchecked exceptions, that are rethrown to callers attempting to join them. These exceptions may additionally include \u003ca href\u003d\"RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eRejectedExecutionException\u003c/code\u003e\u003c/a\u003e stemming from internal resource exhaustion, such as failure to allocate internal task queues. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using \u003ccode\u003eex.printStackTrace()\u003c/code\u003e) of both the thread that initiated the computation as well as the thread actually encountering the exception; minimally only the latter. \u003c/p\u003e\n\u003cp\u003eIt is possible to define and use ForkJoinTasks that may block, but doing so requires three further considerations: (1) Completion of few if any \u003cem\u003eother\u003c/em\u003e tasks should be dependent on a task that blocks on external synchronization or I/O. Event-style async tasks that are never joined (for example, those subclassing \u003ca href\u003d\"CountedCompleter.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eCountedCompleter\u003c/code\u003e\u003c/a\u003e) often fall into this category. (2) To minimize resource impact, tasks should be small; ideally performing only the (possibly) blocking action. (3) Unless the \u003ca href\u003d\"ForkJoinPool.ManagedBlocker.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinPool.ManagedBlocker\u003c/code\u003e\u003c/a\u003e API is used, or the number of possibly blocked tasks is known to be less than the pool\u0027s \u003ca href\u003d\"ForkJoinPool.html#getParallelism()\"\u003e\u003ccode\u003eForkJoinPool.getParallelism()\u003c/code\u003e\u003c/a\u003e level, the pool cannot guarantee that enough threads will be available to ensure progress or good performance. \u003c/p\u003e\n\u003cp\u003eThe primary method for awaiting completion and extracting results of a task is \u003ca href\u003d\"#join()\"\u003e\u003ccode\u003ejoin()\u003c/code\u003e\u003c/a\u003e, but there are several variants: The \u003ca href\u003d\"Future.html#get()\"\u003e\u003ccode\u003eFuture.get()\u003c/code\u003e\u003c/a\u003e methods support interruptible and/or timed waits for completion and report results using \u003ccode\u003eFuture\u003c/code\u003e conventions. Method \u003ca href\u003d\"#invoke()\"\u003e\u003ccode\u003einvoke()\u003c/code\u003e\u003c/a\u003e is semantically equivalent to \u003ccode\u003efork(); join()\u003c/code\u003e but always attempts to begin execution in the current thread. The \"\u003cem\u003equiet\u003c/em\u003e\" forms of these methods do not extract results or report exceptions. These may be useful when a set of tasks are being executed, and you need to delay processing of results or exceptions until all complete. Method \u003ccode\u003einvokeAll\u003c/code\u003e (available in multiple versions) performs the most common form of parallel invocation: forking a set of tasks and joining them all. \u003c/p\u003e\n\u003cp\u003eIn the most typical usages, a fork-join pair act like a call (fork) and return (join) from a parallel recursive function. As is the case with other forms of recursive calls, returns (joins) should be performed innermost-first. For example, \u003ccode\u003ea.fork(); b.fork(); b.join(); a.join();\u003c/code\u003e is likely to be substantially more efficient than joining \u003ccode\u003ea\u003c/code\u003e before \u003ccode\u003eb\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThe execution status of tasks may be queried at several levels of detail: \u003ca href\u003d\"#isDone()\"\u003e\u003ccode\u003eisDone()\u003c/code\u003e\u003c/a\u003e is true if a task completed in any way (including the case where a task was cancelled without executing); \u003ca href\u003d\"#isCompletedNormally()\"\u003e\u003ccode\u003eisCompletedNormally()\u003c/code\u003e\u003c/a\u003e is true if a task completed without cancellation or encountering an exception; \u003ca href\u003d\"#isCancelled()\"\u003e\u003ccode\u003eisCancelled()\u003c/code\u003e\u003c/a\u003e is true if the task was cancelled (in which case \u003ca href\u003d\"#getException()\"\u003e\u003ccode\u003egetException()\u003c/code\u003e\u003c/a\u003e returns a \u003ca href\u003d\"CancellationException.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eCancellationException\u003c/code\u003e\u003c/a\u003e); and \u003ca href\u003d\"#isCompletedAbnormally()\"\u003e\u003ccode\u003eisCompletedAbnormally()\u003c/code\u003e\u003c/a\u003e is true if a task was either cancelled or encountered an exception, in which case \u003ca href\u003d\"#getException()\"\u003e\u003ccode\u003egetException()\u003c/code\u003e\u003c/a\u003e will return either the encountered exception or \u003ca href\u003d\"CancellationException.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eCancellationException\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003eThe ForkJoinTask class is not usually directly subclassed. Instead, you subclass one of the abstract classes that support a particular style of fork/join processing, typically \u003ca href\u003d\"RecursiveAction.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eRecursiveAction\u003c/code\u003e\u003c/a\u003e for most computations that do not return results, \u003ca href\u003d\"RecursiveTask.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eRecursiveTask\u003c/code\u003e\u003c/a\u003e for those that do, and \u003ca href\u003d\"CountedCompleter.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eCountedCompleter\u003c/code\u003e\u003c/a\u003e for those in which completed actions trigger other actions. Normally, a concrete ForkJoinTask subclass declares fields comprising its parameters, established in a constructor, and then defines a \u003ccode\u003ecompute\u003c/code\u003e method that somehow uses the control methods supplied by this base class. \u003c/p\u003e\n\u003cp\u003eMethod \u003ca href\u003d\"#join()\"\u003e\u003ccode\u003ejoin()\u003c/code\u003e\u003c/a\u003e and its variants are appropriate for use only when completion dependencies are acyclic; that is, the parallel computation can be described as a directed acyclic graph (DAG). Otherwise, executions may encounter a form of deadlock as tasks cyclically wait for each other. However, this framework supports other methods and techniques (for example the use of \u003ca href\u003d\"Phaser.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003ePhaser\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#helpQuiesce()\"\u003e\u003ccode\u003ehelpQuiesce()\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#complete(V)\"\u003e\u003ccode\u003ecomplete(V)\u003c/code\u003e\u003c/a\u003e) that may be of use in constructing custom subclasses for problems that are not statically structured as DAGs. To support such usages, a ForkJoinTask may be atomically \u003cem\u003etagged\u003c/em\u003e with a \u003ccode\u003eshort\u003c/code\u003e value using \u003ca href\u003d\"#setForkJoinTaskTag(short)\"\u003e\u003ccode\u003esetForkJoinTaskTag(short)\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"#compareAndSetForkJoinTaskTag(short,short)\"\u003e\u003ccode\u003ecompareAndSetForkJoinTaskTag(short, short)\u003c/code\u003e\u003c/a\u003e and checked using \u003ca href\u003d\"#getForkJoinTaskTag()\"\u003e\u003ccode\u003egetForkJoinTaskTag()\u003c/code\u003e\u003c/a\u003e. The ForkJoinTask implementation does not use these \u003ccode\u003eprotected\u003c/code\u003e methods or tags for any purpose, but they may be of use in the construction of specialized subclasses. For example, parallel graph traversals can use the supplied methods to avoid revisiting nodes/tasks that have already been processed. (Method names for tagging are bulky in part to encourage definition of methods that reflect their usage patterns.) \u003c/p\u003e\n\u003cp\u003eMost base support methods are \u003ccode\u003efinal\u003c/code\u003e, to prevent overriding of implementations that are intrinsically tied to the underlying lightweight task scheduling framework. Developers creating new basic styles of fork/join processing should minimally implement \u003ccode\u003eprotected\u003c/code\u003e methods \u003ca href\u003d\"#exec()\"\u003e\u003ccode\u003eexec()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#setRawResult(V)\"\u003e\u003ccode\u003esetRawResult(V)\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#getRawResult()\"\u003e\u003ccode\u003egetRawResult()\u003c/code\u003e\u003c/a\u003e, while also introducing an abstract computational method that can be implemented in its subclasses, possibly relying on other \u003ccode\u003eprotected\u003c/code\u003e methods provided by this class. \u003c/p\u003e\n\u003cp\u003eForkJoinTasks should perform relatively small amounts of computation. Large tasks should be split into smaller subtasks, usually via recursive decomposition. As a very rough rule of thumb, a task should perform more than 100 and less than 10000 basic computational steps, and should avoid indefinite looping. If tasks are too big, then parallelism cannot improve throughput. If too small, then memory and internal task maintenance overhead may overwhelm processing. \u003c/p\u003e\n\u003cp\u003eThis class provides \u003ccode\u003eadapt\u003c/code\u003e methods for \u003ca href\u003d\"../../lang/Runnable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eRunnable\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"Callable.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eCallable\u003c/code\u003e\u003c/a\u003e, that may be of use when mixing execution of \u003ccode\u003eForkJoinTasks\u003c/code\u003e with other kinds of tasks. When all tasks are of this form, consider using a pool constructed in \u003cem\u003easyncMode\u003c/em\u003e. \u003c/p\u003e\n\u003cp\u003eForkJoinTasks are \u003ccode\u003eSerializable\u003c/code\u003e, which enables them to be used in extensions such as remote execution frameworks. It is sensible to serialize tasks only before or after, but not during, execution. Serialization is not relied on during execution itself.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.ForkJoinTask\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.7"
    ]
  }
}