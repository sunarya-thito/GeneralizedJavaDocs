{
  "packageName": "java.util.concurrent",
  "simpleName": "ThreadLocalRandom",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.Random",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.concurrent.ThreadLocalRandom",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "current",
      "comment": "Returns the current thread\u0027s ThreadLocalRandom.",
      "tagMap": {
        "return": [
          "the current thread\u0027s \n\u003ccode\u003eThreadLocalRandom\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "seed"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSeed",
      "comment": "Throws UnsupportedOperationException. Setting seeds in this generator is not supported.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#setSeed(long)\"\u003esetSeed\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eseed\u003c/code\u003e - the initial seed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - always"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bits"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "next",
      "comment": "Generates a pseudorandom number with the indicated number of low-order bits. Because this class has no subclasses, this method cannot be invoked or overridden.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#next(int)\"\u003enext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ebits\u003c/code\u003e - random bits"
        ],
        "return": [
          "the next pseudorandom value from this random number generator\u0027s sequence"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextInt",
      "comment": "Returns a pseudorandom int value.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#nextInt()\"\u003enextInt\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003eint\u003c/code\u003e value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextInt",
      "comment": "Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#nextInt(int)\"\u003enextInt\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive). Must be positive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebound\u003c/code\u003e is not positive"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003eint\u003c/code\u003e value between zero (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextInt",
      "comment": "Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the least value returned",
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eorigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003ebound\u003c/code\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003eint\u003c/code\u003e value between the origin (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextLong",
      "comment": "Returns a pseudorandom long value.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#nextLong()\"\u003enextLong\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003elong\u003c/code\u003e value"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextLong",
      "comment": "Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive). Must be positive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebound\u003c/code\u003e is not positive"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003elong\u003c/code\u003e value between zero (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextLong",
      "comment": "Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the least value returned",
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eorigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003ebound\u003c/code\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003elong\u003c/code\u003e value between the origin (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextDouble",
      "comment": "Returns a pseudorandom double value between zero (inclusive) and one (exclusive).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Math.html#random()\"\u003e\u003ccode\u003eMath.random()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#nextDouble()\"\u003enextDouble\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e value between zero (inclusive) and one (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextDouble",
      "comment": "Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive). Must be positive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebound\u003c/code\u003e is not positive"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e value between zero (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextDouble",
      "comment": "Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the least value returned",
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eorigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003ebound\u003c/code\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e value between the origin (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextBoolean",
      "comment": "Returns a pseudorandom boolean value.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#nextBoolean()\"\u003enextBoolean\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003eboolean\u003c/code\u003e value"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextFloat",
      "comment": "Returns a pseudorandom float value between zero (inclusive) and one (exclusive).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#nextFloat()\"\u003enextFloat\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003efloat\u003c/code\u003e value between zero (inclusive) and one (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ints",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom int values.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#ints(long)\"\u003eints\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003eint\u003c/code\u003e values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ints",
      "comment": "Returns an effectively unlimited stream of pseudorandom int values.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#ints()\"\u003eints\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e ints(Long.MAX_VALUE)\u003c/code\u003e."
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003eint\u003c/code\u003e values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ints",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#ints(long,int,int)\"\u003eints\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate",
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero, or \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003eint\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ints",
      "comment": "Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#ints(int,int)\"\u003eints\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e ints(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003eint\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.LongStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longs",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom long values.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#longs(long)\"\u003elongs\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003elong\u003c/code\u003e values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.LongStream",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longs",
      "comment": "Returns an effectively unlimited stream of pseudorandom long values.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#longs()\"\u003elongs\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e longs(Long.MAX_VALUE)\u003c/code\u003e."
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003elong\u003c/code\u003e values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.LongStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longs",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#longs(long,long,long)\"\u003elongs\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate",
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero, or \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003elong\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.LongStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longs",
      "comment": "Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#longs(long,long)\"\u003elongs\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e longs(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003elong\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.DoubleStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubles",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#doubles(long)\"\u003edoubles\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero"
        ],
        "return": [
          "a stream of \n\u003ccode\u003edouble\u003c/code\u003e values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.DoubleStream",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubles",
      "comment": "Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#doubles()\"\u003edoubles\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e doubles(Long.MAX_VALUE)\u003c/code\u003e."
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.DoubleStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubles",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#doubles(long,double,double)\"\u003edoubles\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate",
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero, or \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.DoubleStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubles",
      "comment": "Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#doubles(double,double)\"\u003edoubles\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e doubles(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.ThreadLocalRandom",
  "comment": "A random number generator isolated to the current thread. Like the global \n\u003ca href\u003d\"../Random.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eRandom\u003c/code\u003e\u003c/a\u003e generator used by the \n\u003ca href\u003d\"../../lang/Math.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eMath\u003c/code\u003e\u003c/a\u003e class, a \n\u003ccode\u003eThreadLocalRandom\u003c/code\u003e is initialized with an internally generated seed that may not otherwise be modified. When applicable, use of \n\u003ccode\u003eThreadLocalRandom\u003c/code\u003e rather than shared \n\u003ccode\u003eRandom\u003c/code\u003e objects in concurrent programs will typically encounter much less overhead and contention. Use of \n\u003ccode\u003eThreadLocalRandom\u003c/code\u003e is particularly appropriate when multiple tasks (for example, each a \n\u003ca href\u003d\"ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinTask\u003c/code\u003e\u003c/a\u003e) use random numbers in parallel in thread pools. \n\u003cp\u003eUsages of this class should typically be of the form: \u003ccode\u003eThreadLocalRandom.current().nextX(...)\u003c/code\u003e (where \u003ccode\u003eX\u003c/code\u003e is \u003ccode\u003eInt\u003c/code\u003e, \u003ccode\u003eLong\u003c/code\u003e, etc). When all usages are of this form, it is never possible to accidentally share a \u003ccode\u003eThreadLocalRandom\u003c/code\u003e across multiple threads. \u003c/p\u003e\n\u003cp\u003eThis class also provides additional commonly used bounded random generation methods. \u003c/p\u003e\n\u003cp\u003eInstances of \u003ccode\u003eThreadLocalRandom\u003c/code\u003e are not cryptographically secure. Consider instead using \u003ca href\u003d\"../../security/SecureRandom.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSecureRandom\u003c/code\u003e\u003c/a\u003e in security-sensitive applications. Additionally, default-constructed instances do not use a cryptographically random seed unless the \u003ca href\u003d\"../../lang/System.html#getProperty(java.lang.String)\"\u003esystem property\u003c/a\u003e \u003ccode\u003ejava.util.secureRandomSeed\u003c/code\u003e is set to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.ThreadLocalRandom\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.7"
    ]
  }
}