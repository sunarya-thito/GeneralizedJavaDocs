{
  "packageName": "java.util.concurrent",
  "simpleName": "RecursiveTask",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.concurrent.ForkJoinTask",
    "parameters": [
      {
        "name": "V",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "java.util.concurrent.RecursiveTask",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "compute",
      "comment": "The main computation performed by this task.",
      "tagMap": {
        "return": [
          "the result of the computation"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.RecursiveTask",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getRawResult",
      "comment": "Description copied from class: ForkJoinTask",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#getRawResult()\"\u003egetRawResult\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RecursiveTask.html\" title\u003d\"type parameter in RecursiveTask\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the result, or \n\u003ccode\u003enull\u003c/code\u003e if not completed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.concurrent.RecursiveTask",
            "name": "V",
            "type": "Variable"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "setRawResult",
      "comment": "Description copied from class: ForkJoinTask",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#setRawResult(V)\"\u003esetRawResult\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RecursiveTask.html\" title\u003d\"type parameter in RecursiveTask\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "exec",
      "comment": "Implements execution conventions for RecursiveTask.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#exec()\"\u003eexec\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RecursiveTask.html\" title\u003d\"type parameter in RecursiveTask\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task is known to have completed normally"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "genericParameters": [
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.concurrent.RecursiveTask",
  "comment": "A recursive result-bearing \n\u003ca href\u003d\"ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinTask\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003eFor a classic example, here is a task computing Fibonacci numbers: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class Fibonacci extends RecursiveTask\u0026lt;Integer\u0026gt; {\n   final int n;\n   Fibonacci(int n) { this.n \u003d n; }\n   protected Integer compute() {\n     if (n \u0026lt;\u003d 1)\n       return n;\n     Fibonacci f1 \u003d new Fibonacci(n - 1);\n     f1.fork();\n     Fibonacci f2 \u003d new Fibonacci(n - 2);\n     return f2.compute() + f1.join();\n   }\n }\u003c/code\u003e\u003c/pre\u003e However, besides being a dumb way to compute Fibonacci functions (there is a simple fast linear algorithm that you\u0027d use in practice), this is likely to perform poorly because the smallest subtasks are too small to be worthwhile splitting up. Instead, as is the case for nearly all fork/join applications, you\u0027d pick some minimum granularity size (for example 10 here) for which you always sequentially solve rather than subdividing.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.RecursiveTask\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.7"
    ]
  }
}