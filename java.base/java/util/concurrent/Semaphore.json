{
  "packageName": "java.util.concurrent",
  "simpleName": "Semaphore",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "acquire",
      "comment": "Acquires a permit from this semaphore, blocking until one is available, or the thread is interrupted. Acquires a permit, if one is available and returns immediately, reducing the number of available permits by one. If no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: Some other thread invokes the release() method for this semaphore and the current thread is next to be assigned a permit; or Some other thread interrupts the current thread. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting for a permit, then InterruptedException is thrown and the current thread\u0027s interrupted status is cleared.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "acquireUninterruptibly",
      "comment": "Acquires a permit from this semaphore, blocking until one is available. Acquires a permit, if one is available and returns immediately, reducing the number of available permits by one. If no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until some other thread invokes the release() method for this semaphore and the current thread is next to be assigned a permit. If the current thread is interrupted while waiting for a permit then it will continue to wait, but the time at which the thread is assigned a permit may change compared to the time it would have received the permit had no interruption occurred. When the thread does return from this method its interrupt status will be set.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryAcquire",
      "comment": "Acquires a permit from this semaphore, only if one is available at the time of invocation. Acquires a permit, if one is available and returns immediately, with the value true, reducing the number of available permits by one. If no permit is available then this method will return immediately with the value false. Even when this semaphore has been set to use a fair ordering policy, a call to tryAcquire() will immediately acquire a permit if one is available, whether or not other threads are currently waiting. This \"barging\" behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting, then use tryAcquire(0, TimeUnit.SECONDS) which is almost equivalent (it also detects interruption).",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a permit was acquired and \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryAcquire",
      "comment": "Acquires a permit from this semaphore, if one becomes available within the given waiting time and the current thread has not been interrupted. Acquires a permit, if one is available and returns immediately, with the value true, reducing the number of available permits by one. If no permit is available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: Some other thread invokes the release() method for this semaphore and the current thread is next to be assigned a permit; or Some other thread interrupts the current thread; or The specified waiting time elapses. If a permit is acquired then the value true is returned. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting to acquire a permit, then InterruptedException is thrown and the current thread\u0027s interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait for a permit",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the \n\u003ccode\u003etimeout\u003c/code\u003e argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a permit was acquired and \n\u003ccode\u003efalse\u003c/code\u003e if the waiting time elapsed before a permit was acquired"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "release",
      "comment": "Releases a permit, returning it to the semaphore. Releases a permit, increasing the number of available permits by one. If any threads are trying to acquire a permit, then one is selected and given the permit that was just released. That thread is (re)enabled for thread scheduling purposes. There is no requirement that a thread that releases a permit must have acquired that permit by calling acquire(). Correct usage of a semaphore is established by programming convention in the application.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "permits"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "acquire",
      "comment": "Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is interrupted. Acquires the given number of permits, if they are available, and returns immediately, reducing the number of available permits by the given amount. This method has the same effect as the loop for (int i \u003d 0; i \u003c permits; ++i) acquire(); except that it atomically acquires the permits all at once: If insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: Some other thread invokes one of the release methods for this semaphore and the current thread is next to be assigned permits and the number of available permits satisfies this request; or Some other thread interrupts the current thread. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting for a permit, then InterruptedException is thrown and the current thread\u0027s interrupted status is cleared. Any permits that were to be assigned to this thread are instead assigned to other threads trying to acquire permits, as if permits had been made available by a call to release().",
      "tagMap": {
        "param": [
          "\u003ccode\u003epermits\u003c/code\u003e - the number of permits to acquire"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epermits\u003c/code\u003e is negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "permits"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "acquireUninterruptibly",
      "comment": "Acquires the given number of permits from this semaphore, blocking until all are available. Acquires the given number of permits, if they are available, and returns immediately, reducing the number of available permits by the given amount. This method has the same effect as the loop for (int i \u003d 0; i \u003c permits; ++i) acquireUninterruptibly(); except that it atomically acquires the permits all at once: If insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until some other thread invokes one of the release methods for this semaphore and the current thread is next to be assigned permits and the number of available permits satisfies this request. If the current thread is interrupted while waiting for permits then it will continue to wait and its position in the queue is not affected. When the thread does return from this method its interrupt status will be set.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epermits\u003c/code\u003e - the number of permits to acquire"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epermits\u003c/code\u003e is negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "permits"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryAcquire",
      "comment": "Acquires the given number of permits from this semaphore, only if all are available at the time of invocation. Acquires the given number of permits, if they are available, and returns immediately, with the value true, reducing the number of available permits by the given amount. If insufficient permits are available then this method will return immediately with the value false and the number of available permits is unchanged. Even when this semaphore has been set to use a fair ordering policy, a call to tryAcquire will immediately acquire a permit if one is available, whether or not other threads are currently waiting. This \"barging\" behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting, then use tryAcquire(permits, 0, TimeUnit.SECONDS) which is almost equivalent (it also detects interruption).",
      "tagMap": {
        "param": [
          "\u003ccode\u003epermits\u003c/code\u003e - the number of permits to acquire"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epermits\u003c/code\u003e is negative"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the permits were acquired and \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "permits"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryAcquire",
      "comment": "Acquires the given number of permits from this semaphore, if all become available within the given waiting time and the current thread has not been interrupted. Acquires the given number of permits, if they are available and returns immediately, with the value true, reducing the number of available permits by the given amount. If insufficient permits are available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: Some other thread invokes one of the release methods for this semaphore and the current thread is next to be assigned permits and the number of available permits satisfies this request; or Some other thread interrupts the current thread; or The specified waiting time elapses. If the permits are acquired then the value true is returned. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting to acquire the permits, then InterruptedException is thrown and the current thread\u0027s interrupted status is cleared. Any permits that were to be assigned to this thread, are instead assigned to other threads trying to acquire permits, as if the permits had been made available by a call to release(). If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all. Any permits that were to be assigned to this thread, are instead assigned to other threads trying to acquire permits, as if the permits had been made available by a call to release().",
      "tagMap": {
        "param": [
          "\u003ccode\u003epermits\u003c/code\u003e - the number of permits to acquire",
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait for the permits",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the \n\u003ccode\u003etimeout\u003c/code\u003e argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epermits\u003c/code\u003e is negative"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if all permits were acquired and \n\u003ccode\u003efalse\u003c/code\u003e if the waiting time elapsed before all permits were acquired"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "permits"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "release",
      "comment": "Releases the given number of permits, returning them to the semaphore. Releases the given number of permits, increasing the number of available permits by that amount. If any threads are trying to acquire permits, then one thread is selected and given the permits that were just released. If the number of available permits satisfies that thread\u0027s request then that thread is (re)enabled for thread scheduling purposes; otherwise the thread will wait until sufficient permits are available. If there are still permits available after this thread\u0027s request has been satisfied, then those permits are assigned in turn to other threads trying to acquire permits. There is no requirement that a thread that releases a permit must have acquired that permit by calling acquire. Correct usage of a semaphore is established by programming convention in the application.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epermits\u003c/code\u003e - the number of permits to release"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epermits\u003c/code\u003e is negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "availablePermits",
      "comment": "Returns the current number of permits available in this semaphore. This method is typically used for debugging and testing purposes.",
      "tagMap": {
        "return": [
          "the number of permits available in this semaphore"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "drainPermits",
      "comment": "Acquires and returns all permits that are immediately available, or if negative permits are available, releases them. Upon return, zero permits are available.",
      "tagMap": {
        "return": [
          "the number of permits acquired or, if negative, the number released"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "reduction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "reducePermits",
      "comment": "Shrinks the number of available permits by the indicated reduction. This method can be useful in subclasses that use semaphores to track resources that become unavailable. This method differs from acquire in that it does not block waiting for permits to become available.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ereduction\u003c/code\u003e - the number of permits to remove"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ereduction\u003c/code\u003e is negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFair",
      "comment": "Returns true if this semaphore has fairness set true.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this semaphore has fairness set true"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hasQueuedThreads",
      "comment": "Queries whether any threads are waiting to acquire. Note that because cancellations may occur at any time, a true return does not guarantee that any other thread will ever acquire. This method is designed primarily for use in monitoring of the system state.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there may be other threads waiting to acquire the lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getQueueLength",
      "comment": "Returns an estimate of the number of threads waiting to acquire. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring system state, not for synchronization control.",
      "tagMap": {
        "return": [
          "the estimated number of threads waiting for this lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.lang.Thread",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getQueuedThreads",
      "comment": "Returns a collection containing threads that may be waiting to acquire. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.",
      "tagMap": {
        "return": [
          "the collection of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string identifying this semaphore, as well as its state. The state, in brackets, includes the String \"Permits \u003d\" followed by the number of permits.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string identifying this semaphore, as well as its state"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "permits"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a Semaphore with the given number of permits and nonfair fairness setting.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epermits\u003c/code\u003e - the initial number of permits available. This value may be negative, in which case releases must occur before any acquires will be granted."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "permits"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "fair"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a Semaphore with the given number of permits and the given fairness setting.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epermits\u003c/code\u003e - the initial number of permits available. This value may be negative, in which case releases must occur before any acquires will be granted.",
          "\u003ccode\u003efair\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if this semaphore will guarantee first-in first-out granting of permits under contention, else \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.Semaphore",
  "comment": "A counting semaphore. Conceptually, a semaphore maintains a set of permits. Each \n\u003ca href\u003d\"#acquire()\"\u003e\u003ccode\u003eacquire()\u003c/code\u003e\u003c/a\u003e blocks if necessary until a permit is available, and then takes it. Each \n\u003ca href\u003d\"#release()\"\u003e\u003ccode\u003erelease()\u003c/code\u003e\u003c/a\u003e adds a permit, potentially releasing a blocking acquirer. However, no actual permit objects are used; the \n\u003ccode\u003eSemaphore\u003c/code\u003e just keeps a count of the number available and acts accordingly. \n\u003cp\u003eSemaphores are often used to restrict the number of threads than can access some (physical or logical) resource. For example, here is a class that uses a semaphore to control access to a pool of items: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class Pool {\n   private static final int MAX_AVAILABLE \u003d 100;\n   private final Semaphore available \u003d new Semaphore(MAX_AVAILABLE, true);\n\n   public Object getItem() throws InterruptedException {\n     available.acquire();\n     return getNextAvailableItem();\n   }\n\n   public void putItem(Object x) {\n     if (markAsUnused(x))\n       available.release();\n   }\n\n   // Not a particularly efficient data structure; just for demo\n\n   protected Object[] items \u003d ... whatever kinds of items being managed\n   protected boolean[] used \u003d new boolean[MAX_AVAILABLE];\n\n   protected synchronized Object getNextAvailableItem() {\n     for (int i \u003d 0; i \u0026lt; MAX_AVAILABLE; ++i) {\n       if (!used[i]) {\n         used[i] \u003d true;\n         return items[i];\n       }\n     }\n     return null; // not reached\n   }\n\n   protected synchronized boolean markAsUnused(Object item) {\n     for (int i \u003d 0; i \u0026lt; MAX_AVAILABLE; ++i) {\n       if (item \u003d\u003d items[i]) {\n         if (used[i]) {\n           used[i] \u003d false;\n           return true;\n         } else\n           return false;\n       }\n     }\n     return false;\n   }\n }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eBefore obtaining an item each thread must acquire a permit from the semaphore, guaranteeing that an item is available for use. When the thread has finished with the item it is returned back to the pool and a permit is returned to the semaphore, allowing another thread to acquire that item. Note that no synchronization lock is held when \u003ca href\u003d\"#acquire()\"\u003e\u003ccode\u003eacquire()\u003c/code\u003e\u003c/a\u003e is called as that would prevent an item from being returned to the pool. The semaphore encapsulates the synchronization needed to restrict access to the pool, separately from any synchronization needed to maintain the consistency of the pool itself. \u003c/p\u003e\n\u003cp\u003eA semaphore initialized to one, and which is used such that it only has at most one permit available, can serve as a mutual exclusion lock. This is more commonly known as a \u003cem\u003ebinary semaphore\u003c/em\u003e, because it only has two states: one permit available, or zero permits available. When used in this way, the binary semaphore has the property (unlike many \u003ca href\u003d\"locks/Lock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eLock\u003c/code\u003e\u003c/a\u003e implementations), that the \"lock\" can be released by a thread other than the owner (as semaphores have no notion of ownership). This can be useful in some specialized contexts, such as deadlock recovery. \u003c/p\u003e\n\u003cp\u003eThe constructor for this class optionally accepts a \u003cem\u003efairness\u003c/em\u003e parameter. When set false, this class makes no guarantees about the order in which threads acquire permits. In particular, \u003cem\u003ebarging\u003c/em\u003e is permitted, that is, a thread invoking \u003ca href\u003d\"#acquire()\"\u003e\u003ccode\u003eacquire()\u003c/code\u003e\u003c/a\u003e can be allocated a permit ahead of a thread that has been waiting - logically the new thread places itself at the head of the queue of waiting threads. When fairness is set true, the semaphore guarantees that threads invoking any of the \u003ca href\u003d\"#acquire()\"\u003e\u003ccode\u003eacquire\u003c/code\u003e\u003c/a\u003e methods are selected to obtain permits in the order in which their invocation of those methods was processed (first-in-first-out; FIFO). Note that FIFO ordering necessarily applies to specific internal points of execution within these methods. So, it is possible for one thread to invoke \u003ccode\u003eacquire\u003c/code\u003e before another, but reach the ordering point after the other, and similarly upon return from the method. Also note that the untimed \u003ca href\u003d\"#tryAcquire()\"\u003e\u003ccode\u003etryAcquire\u003c/code\u003e\u003c/a\u003e methods do not honor the fairness setting, but will take any permits that are available. \u003c/p\u003e\n\u003cp\u003eGenerally, semaphores used to control resource access should be initialized as fair, to ensure that no thread is starved out from accessing a resource. When using semaphores for other kinds of synchronization control, the throughput advantages of non-fair ordering often outweigh fairness considerations. \u003c/p\u003e\n\u003cp\u003eThis class also provides convenience methods to \u003ca href\u003d\"#acquire(int)\"\u003e\u003ccode\u003eacquire\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#release(int)\"\u003e\u003ccode\u003erelease\u003c/code\u003e\u003c/a\u003e multiple permits at a time. These methods are generally more efficient and effective than loops. However, they do not establish any preference order. For example, if thread A invokes \u003ccode\u003es.acquire(3\u003c/code\u003e) and thread B invokes \u003ccode\u003es.acquire(2)\u003c/code\u003e, and two permits become available, then there is no guarantee that thread B will obtain them unless its acquire came first and Semaphore \u003ccode\u003es\u003c/code\u003e is in fair mode. \u003c/p\u003e\n\u003cp\u003eMemory consistency effects: Actions in a thread prior to calling a \"release\" method such as \u003ccode\u003erelease()\u003c/code\u003e \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e actions following a successful \"acquire\" method such as \u003ccode\u003eacquire()\u003c/code\u003e in another thread.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.Semaphore\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}