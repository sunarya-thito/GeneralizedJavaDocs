{
  "packageName": "java.util.concurrent",
  "simpleName": "CompletionStage",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenApply",
      "comment": "Returns a new CompletionStage that, when this stage completes normally, is executed with this stage\u0027s result as the argument to the supplied function. This method is analogous to Optional.map and Stream.map. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenApplyAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes normally, is executed using this stage\u0027s default asynchronous execution facility, with this stage\u0027s result as the argument to the supplied function. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenApplyAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage\u0027s result as the argument to the supplied function. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenAccept",
      "comment": "Returns a new CompletionStage that, when this stage completes normally, is executed with this stage\u0027s result as the argument to the supplied action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenAcceptAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes normally, is executed using this stage\u0027s default asynchronous execution facility, with this stage\u0027s result as the argument to the supplied action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenAcceptAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage\u0027s result as the argument to the supplied action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenRun",
      "comment": "Returns a new CompletionStage that, when this stage completes normally, executes the given action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenRunAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes normally, executes the given action using this stage\u0027s default asynchronous execution facility. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenRunAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes normally, executes the given action using the supplied Executor. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "V",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenCombine",
      "comment": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied function. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the other CompletionStage\u0027s result",
          "\u003ccode\u003eV\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "V",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenCombineAsync",
      "comment": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using this stage\u0027s default asynchronous execution facility, with the two results as arguments to the supplied function. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the other CompletionStage\u0027s result",
          "\u003ccode\u003eV\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "V",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenCombineAsync",
      "comment": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the other CompletionStage\u0027s result",
          "\u003ccode\u003eV\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiConsumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenAcceptBoth",
      "comment": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the other CompletionStage\u0027s result"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiConsumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenAcceptBothAsync",
      "comment": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using this stage\u0027s default asynchronous execution facility, with the two results as arguments to the supplied action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the other CompletionStage\u0027s result"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiConsumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenAcceptBothAsync",
      "comment": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using the supplied executor, with the two results as arguments to the supplied action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the other CompletionStage\u0027s result"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "runAfterBoth",
      "comment": "Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "runAfterBothAsync",
      "comment": "Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action using this stage\u0027s default asynchronous execution facility. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "runAfterBothAsync",
      "comment": "Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action using the supplied executor. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "name": "U",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "applyToEither",
      "comment": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied function. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "name": "U",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "applyToEitherAsync",
      "comment": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage\u0027s default asynchronous execution facility, with the corresponding result as argument to the supplied function. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "name": "U",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "applyToEitherAsync",
      "comment": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "acceptEither",
      "comment": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "acceptEitherAsync",
      "comment": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage\u0027s default asynchronous execution facility, with the corresponding result as argument to the supplied action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "acceptEitherAsync",
      "comment": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "runAfterEither",
      "comment": "Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "runAfterEitherAsync",
      "comment": "Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using this stage\u0027s default asynchronous execution facility. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "java.lang.Void",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.CompletionStage",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "other",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "runAfterEitherAsync",
      "comment": "Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using the supplied executor. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other CompletionStage",
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform before completing the returned CompletionStage",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "java.util.concurrent.CompletionStage",
                    "parameters": [
                      {
                        "name": "U",
                        "type": "Class"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenCompose",
      "comment": "Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function. When this stage completes normally, the given function is invoked with this stage\u0027s result as the argument, returning another CompletionStage. When that stage completes normally, the CompletionStage returned by this method is completed with the same value. To ensure progress, the supplied function must arrange eventual completion of its result. This method is analogous to Optional.flatMap and Stream.flatMap. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the returned CompletionStage\u0027s result"
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute another CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "java.util.concurrent.CompletionStage",
                    "parameters": [
                      {
                        "name": "U",
                        "type": "Class"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenComposeAsync",
      "comment": "Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function, executed using this stage\u0027s default asynchronous execution facility. When this stage completes normally, the given function is invoked with this stage\u0027s result as the argument, returning another CompletionStage. When that stage completes normally, the CompletionStage returned by this method is completed with the same value. To ensure progress, the supplied function must arrange eventual completion of its result. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the returned CompletionStage\u0027s result"
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute another CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "java.util.concurrent.CompletionStage",
                    "parameters": [
                      {
                        "name": "U",
                        "type": "Class"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenComposeAsync",
      "comment": "Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function, executed using the supplied Executor. When this stage completes normally, the given function is invoked with this stage\u0027s result as the argument, returning another CompletionStage. When that stage completes normally, the CompletionStage returned by this method is completed with the same value. To ensure progress, the supplied function must arrange eventual completion of its result. See the CompletionStage documentation for rules covering exceptional completion.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the returned CompletionStage\u0027s result"
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute another CompletionStage",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "name": "java.lang.Throwable",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "handle",
      "comment": "Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed with this stage\u0027s result and exception as arguments to the supplied function. When this stage is complete, the given function is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments, and the function\u0027s result is used to complete the returned stage.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "name": "java.lang.Throwable",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "handleAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using this stage\u0027s default asynchronous execution facility, with this stage\u0027s result and exception as arguments to the supplied function. When this stage is complete, the given function is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments, and the function\u0027s result is used to complete the returned stage.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "name": "java.lang.Throwable",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "handleAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using the supplied executor, with this stage\u0027s result and exception as arguments to the supplied function. When this stage is complete, the given function is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments, and the function\u0027s result is used to complete the returned stage.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the function\u0027s return type"
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "owner": "java.util.concurrent.CompletionStage",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiConsumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "name": "java.lang.Throwable",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "whenComplete",
      "comment": "Returns a new CompletionStage with the same result or exception as this stage, that executes the given action when this stage completes. When this stage is complete, the given action is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments. The returned stage is completed when the action returns. Unlike method handle, this method is not designed to translate completion outcomes, so the supplied action should not throw an exception. However, if it does, the following rules apply: if this stage completed normally but the supplied action throws an exception, then the returned stage completes exceptionally with the supplied action\u0027s exception. Or, if this stage completed exceptionally and the supplied action throws an exception, then the returned stage completes exceptionally with this stage\u0027s exception.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "owner": "java.util.concurrent.CompletionStage",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiConsumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "name": "java.lang.Throwable",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "whenCompleteAsync",
      "comment": "Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using this stage\u0027s default asynchronous execution facility when this stage completes. When this stage is complete, the given action is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments. The returned stage is completed when the action returns. Unlike method handleAsync, this method is not designed to translate completion outcomes, so the supplied action should not throw an exception. However, if it does, the following rules apply: If this stage completed normally but the supplied action throws an exception, then the returned stage completes exceptionally with the supplied action\u0027s exception. Or, if this stage completed exceptionally and the supplied action throws an exception, then the returned stage completes exceptionally with this stage\u0027s exception.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "owner": "java.util.concurrent.CompletionStage",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiConsumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "name": "java.lang.Throwable",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "whenCompleteAsync",
      "comment": "Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using the supplied Executor when this stage completes. When this stage is complete, the given action is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments. The returned stage is completed when the action returns. Unlike method handleAsync, this method is not designed to translate completion outcomes, so the supplied action should not throw an exception. However, if it does, the following rules apply: If this stage completed normally but the supplied action throws an exception, then the returned stage completes exceptionally with the supplied action\u0027s exception. Or, if this stage completed exceptionally and the supplied action throws an exception, then the returned stage completes exceptionally with this stage\u0027s exception.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to perform",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "owner": "java.util.concurrent.CompletionStage",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "name": "java.lang.Throwable",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "exceptionally",
      "comment": "Returns a new CompletionStage that, when this stage completes exceptionally, is executed with this stage\u0027s exception as the argument to the supplied function. Otherwise, if this stage completes normally, then the returned stage also completes normally with the same value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage if this CompletionStage completed exceptionally"
        ],
        "return": [
          "the new CompletionStage"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "owner": "java.util.concurrent.CompletionStage",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "name": "java.lang.Throwable",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "exceptionallyAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes exceptionally, is executed with this stage\u0027s exception as the argument to the supplied function, using this stage\u0027s default asynchronous execution facility. Otherwise, if this stage completes normally, then the returned stage also completes normally with the same value.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation invokes \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#handle(java.util.function.BiFunction)\"\u003e\u003ccode\u003ehandle(java.util.function.BiFunction\u0026lt;? super T, java.lang.Throwable, ? extends U\u0026gt;)\u003c/code\u003e\u003c/a\u003e, relaying to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#handleAsync(java.util.function.BiFunction)\"\u003e\u003ccode\u003ehandleAsync(java.util.function.BiFunction\u0026lt;? super T, java.lang.Throwable, ? extends U\u0026gt;)\u003c/code\u003e\u003c/a\u003e on exception, then \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#thenCompose(java.util.function.Function)\"\u003e\u003ccode\u003ethenCompose(java.util.function.Function\u0026lt;? super T, ? extends java.util.concurrent.CompletionStage\u0026lt;U\u0026gt;\u0026gt;)\u003c/code\u003e\u003c/a\u003e for result."
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage if this CompletionStage completed exceptionally"
        ],
        "return": [
          "the new CompletionStage"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "owner": "java.util.concurrent.CompletionStage",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "name": "java.lang.Throwable",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.concurrent.CompletionStage",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "exceptionallyAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes exceptionally, is executed with this stage\u0027s exception as the argument to the supplied function, using the supplied Executor. Otherwise, if this stage completes normally, then the returned stage also completes normally with the same value.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation invokes \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#handle(java.util.function.BiFunction)\"\u003e\u003ccode\u003ehandle(java.util.function.BiFunction\u0026lt;? super T, java.lang.Throwable, ? extends U\u0026gt;)\u003c/code\u003e\u003c/a\u003e, relaying to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#handleAsync(java.util.function.BiFunction)\"\u003e\u003ccode\u003ehandleAsync(java.util.function.BiFunction\u0026lt;? super T, java.lang.Throwable, ? extends U\u0026gt;)\u003c/code\u003e\u003c/a\u003e on exception, then \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#thenCompose(java.util.function.Function)\"\u003e\u003ccode\u003ethenCompose(java.util.function.Function\u0026lt;? super T, ? extends java.util.concurrent.CompletionStage\u0026lt;U\u0026gt;\u0026gt;)\u003c/code\u003e\u003c/a\u003e for result."
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the value of the returned CompletionStage if this CompletionStage completed exceptionally",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "owner": "java.util.concurrent.CompletionStage",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "name": "java.lang.Throwable",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "name": "java.util.concurrent.CompletionStage",
                    "parameters": [
                      {
                        "owner": "java.util.concurrent.CompletionStage",
                        "name": "T",
                        "type": "Variable"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "exceptionallyCompose",
      "comment": "Returns a new CompletionStage that, when this stage completes exceptionally, is composed using the results of the supplied function applied to this stage\u0027s exception.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation invokes \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#handle(java.util.function.BiFunction)\"\u003e\u003ccode\u003ehandle(java.util.function.BiFunction\u0026lt;? super T, java.lang.Throwable, ? extends U\u0026gt;)\u003c/code\u003e\u003c/a\u003e, invoking the given function on exception, then \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#thenCompose(java.util.function.Function)\"\u003e\u003ccode\u003ethenCompose(java.util.function.Function\u0026lt;? super T, ? extends java.util.concurrent.CompletionStage\u0026lt;U\u0026gt;\u0026gt;)\u003c/code\u003e\u003c/a\u003e for result."
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the returned CompletionStage if this CompletionStage completed exceptionally"
        ],
        "return": [
          "the new CompletionStage"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "owner": "java.util.concurrent.CompletionStage",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "name": "java.lang.Throwable",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "name": "java.util.concurrent.CompletionStage",
                    "parameters": [
                      {
                        "owner": "java.util.concurrent.CompletionStage",
                        "name": "T",
                        "type": "Variable"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "exceptionallyComposeAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes exceptionally, is composed using the results of the supplied function applied to this stage\u0027s exception, using this stage\u0027s default asynchronous execution facility.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation invokes \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#handle(java.util.function.BiFunction)\"\u003e\u003ccode\u003ehandle(java.util.function.BiFunction\u0026lt;? super T, java.lang.Throwable, ? extends U\u0026gt;)\u003c/code\u003e\u003c/a\u003e, relaying to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#handleAsync(java.util.function.BiFunction)\"\u003e\u003ccode\u003ehandleAsync(java.util.function.BiFunction\u0026lt;? super T, java.lang.Throwable, ? extends U\u0026gt;)\u003c/code\u003e\u003c/a\u003e on exception, then \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#thenCompose(java.util.function.Function)\"\u003e\u003ccode\u003ethenCompose(java.util.function.Function\u0026lt;? super T, ? extends java.util.concurrent.CompletionStage\u0026lt;U\u0026gt;\u0026gt;)\u003c/code\u003e\u003c/a\u003e for result."
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the returned CompletionStage if this CompletionStage completed exceptionally"
        ],
        "return": [
          "the new CompletionStage"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletionStage",
        "parameters": [
          {
            "owner": "java.util.concurrent.CompletionStage",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "name": "java.lang.Throwable",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "name": "java.util.concurrent.CompletionStage",
                    "parameters": [
                      {
                        "owner": "java.util.concurrent.CompletionStage",
                        "name": "T",
                        "type": "Variable"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "fn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.Executor",
            "type": "Class"
          },
          "name": "executor",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "exceptionallyComposeAsync",
      "comment": "Returns a new CompletionStage that, when this stage completes exceptionally, is composed using the results of the supplied function applied to this stage\u0027s exception, using the supplied Executor.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation invokes \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#handle(java.util.function.BiFunction)\"\u003e\u003ccode\u003ehandle(java.util.function.BiFunction\u0026lt;? super T, java.lang.Throwable, ? extends U\u0026gt;)\u003c/code\u003e\u003c/a\u003e, relaying to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#handleAsync(java.util.function.BiFunction)\"\u003e\u003ccode\u003ehandleAsync(java.util.function.BiFunction\u0026lt;? super T, java.lang.Throwable, ? extends U\u0026gt;)\u003c/code\u003e\u003c/a\u003e on exception, then \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CompletionStage.html#thenCompose(java.util.function.Function)\"\u003e\u003ccode\u003ethenCompose(java.util.function.Function\u0026lt;? super T, ? extends java.util.concurrent.CompletionStage\u0026lt;U\u0026gt;\u0026gt;)\u003c/code\u003e\u003c/a\u003e for result."
        ],
        "param": [
          "\u003ccode\u003efn\u003c/code\u003e - the function to use to compute the returned CompletionStage if this CompletionStage completed exceptionally",
          "\u003ccode\u003eexecutor\u003c/code\u003e - the executor to use for asynchronous execution"
        ],
        "return": [
          "the new CompletionStage"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.CompletableFuture",
        "parameters": [
          {
            "owner": "java.util.concurrent.CompletionStage",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toCompletableFuture",
      "comment": "Returns a CompletableFuture maintaining the same completion properties as this stage. If this stage is already a CompletableFuture, this method may return this stage itself. Otherwise, invocation of this method may be equivalent in effect to thenApply(x -\u003e x), but returning an instance of type CompletableFuture.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the CompletableFuture"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.concurrent.CompletionStage",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.8"
    ]
  }
}