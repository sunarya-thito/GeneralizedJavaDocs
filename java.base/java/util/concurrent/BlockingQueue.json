{
  "packageName": "java.util.concurrent",
  "simpleName": "BlockingQueue",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.Queue",
    "parameters": [
      {
        "name": "E",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.concurrent.BlockingQueue",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "add",
      "comment": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. When using a capacity-restricted queue, it is generally preferable to use offer.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#add(E)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/BlockingQueue.html\" title\u003d\"type parameter in BlockingQueue\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Queue.html#add(E)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Queue.html\" title\u003d\"interface in java.util\"\u003eQueue\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/BlockingQueue.html\" title\u003d\"type parameter in BlockingQueue\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to add"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the element cannot be added at this time due to capacity restrictions",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this queue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified element prevents it from being added to this queue"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e (as specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#add(E)\"\u003e\u003ccode\u003eCollection.add(E)\u003c/code\u003e\u003c/a\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.concurrent.BlockingQueue",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "offer",
      "comment": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. When using a capacity-restricted queue, this method is generally preferable to add(E), which can fail to insert an element only by throwing an exception.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Queue.html#offer(E)\"\u003eoffer\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Queue.html\" title\u003d\"interface in java.util\"\u003eQueue\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/BlockingQueue.html\" title\u003d\"type parameter in BlockingQueue\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to add"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this queue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified element prevents it from being added to this queue"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the element was added to this queue, else \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "owner": "java.util.concurrent.BlockingQueue",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "put",
      "comment": "Inserts the specified element into this queue, waiting if necessary for space to become available.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to add"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this queue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified element prevents it from being added to this queue"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "owner": "java.util.concurrent.BlockingQueue",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "e"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "offer",
      "comment": "Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to add",
          "\u003ccode\u003etimeout\u003c/code\u003e - how long to wait before giving up, in units of \n\u003ccode\u003eunit\u003c/code\u003e",
          "\u003ccode\u003eunit\u003c/code\u003e - a \n\u003ccode\u003eTimeUnit\u003c/code\u003e determining how to interpret the \n\u003ccode\u003etimeout\u003c/code\u003e parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this queue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified element prevents it from being added to this queue"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful, or \n\u003ccode\u003efalse\u003c/code\u003e if the specified waiting time elapses before space is available"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.BlockingQueue",
        "name": "E",
        "type": "Variable"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "take",
      "comment": "Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting"
        ],
        "return": [
          "the head of this queue"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.BlockingQueue",
        "name": "E",
        "type": "Variable"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "poll",
      "comment": "Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - how long to wait before giving up, in units of \n\u003ccode\u003eunit\u003c/code\u003e",
          "\u003ccode\u003eunit\u003c/code\u003e - a \n\u003ccode\u003eTimeUnit\u003c/code\u003e determining how to interpret the \n\u003ccode\u003etimeout\u003c/code\u003e parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting"
        ],
        "return": [
          "the head of this queue, or \n\u003ccode\u003enull\u003c/code\u003e if the specified waiting time elapses before an element is available"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remainingCapacity",
      "comment": "Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or Integer.MAX_VALUE if there is no intrinsic limit. Note that you cannot always tell if an attempt to insert an element will succeed by inspecting remainingCapacity because it may be the case that another thread is about to insert or remove an element.",
      "tagMap": {
        "return": [
          "the remaining capacity"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that o.equals(e), if this queue contains one or more such elements. Returns true if this queue contained the specified element (or equivalently, if this queue changed as a result of the call).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#remove(java.lang.Object)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/BlockingQueue.html\" title\u003d\"type parameter in BlockingQueue\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - element to be removed from this queue, if present"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element is incompatible with this queue (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this queue changed as a result of the call"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "contains",
      "comment": "Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that o.equals(e).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#contains(java.lang.Object)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/BlockingQueue.html\" title\u003d\"type parameter in BlockingQueue\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - object to be checked for containment in this queue"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element is incompatible with this queue (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this queue contains the specified element"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.BlockingQueue",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "drainTo",
      "comment": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the collection to transfer elements into"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if addition of elements is not supported by the specified collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of an element of this queue prevents it from being added to the specified collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified collection is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection"
        ],
        "return": [
          "the number of elements transferred"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.BlockingQueue",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxElements"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "drainTo",
      "comment": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the collection to transfer elements into",
          "\u003ccode\u003emaxElements\u003c/code\u003e - the maximum number of elements to transfer"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if addition of elements is not supported by the specified collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of an element of this queue prevents it from being added to the specified collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified collection is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection"
        ],
        "return": [
          "the number of elements transferred"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.concurrent.BlockingQueue",
  "comment": "A \n\u003ca href\u003d\"../Queue.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eQueue\u003c/code\u003e\u003c/a\u003e that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element. \n\u003cp\u003e\u003ccode\u003eBlockingQueue\u003c/code\u003e methods come in four forms, with different ways of handling operations that cannot be satisfied immediately, but may be satisfied at some point in the future: one throws an exception, the second returns a special value (either \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e, depending on the operation), the third blocks the current thread indefinitely until the operation can succeed, and the fourth blocks for only a given maximum time limit before giving up. These methods are summarized in the following table: \u003c/p\u003e\n\u003ctable class\u003d\"plain\"\u003e \n \u003ccaption\u003e\n  Summary of BlockingQueue methods\n \u003c/caption\u003e \n \u003ctbody\u003e\n  \u003ctr\u003e \n   \u003ctd\u003e\u003c/td\u003e \n   \u003cth scope\u003d\"col\" style\u003d\"font-weight:normal; font-style:italic\"\u003eThrows exception\u003c/th\u003e \n   \u003cth scope\u003d\"col\" style\u003d\"font-weight:normal; font-style:italic\"\u003eSpecial value\u003c/th\u003e \n   \u003cth scope\u003d\"col\" style\u003d\"font-weight:normal; font-style:italic\"\u003eBlocks\u003c/th\u003e \n   \u003cth scope\u003d\"col\" style\u003d\"font-weight:normal; font-style:italic\"\u003eTimes out\u003c/th\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"text-align:left\"\u003eInsert\u003c/th\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#add(E)\"\u003e\u003ccode\u003eadd(e)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#offer(E)\"\u003e\u003ccode\u003eoffer(e)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#put(E)\"\u003e\u003ccode\u003eput(e)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#offer(E,long,java.util.concurrent.TimeUnit)\"\u003e\u003ccode\u003eoffer(e, time, unit)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"text-align:left\"\u003eRemove\u003c/th\u003e \n   \u003ctd\u003e\u003ca href\u003d\"../Queue.html#remove()\"\u003e\u003ccode\u003eremove()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ca href\u003d\"../Queue.html#poll()\"\u003e\u003ccode\u003epoll()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#take()\"\u003e\u003ccode\u003etake()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#poll(long,java.util.concurrent.TimeUnit)\"\u003e\u003ccode\u003epoll(time, unit)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"text-align:left\"\u003eExamine\u003c/th\u003e \n   \u003ctd\u003e\u003ca href\u003d\"../Queue.html#element()\"\u003e\u003ccode\u003eelement()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ca href\u003d\"../Queue.html#peek()\"\u003e\u003ccode\u003epeek()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd style\u003d\"font-style: italic\"\u003enot applicable\u003c/td\u003e \n   \u003ctd style\u003d\"font-style: italic\"\u003enot applicable\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e\n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eBlockingQueue\u003c/code\u003e does not accept \u003ccode\u003enull\u003c/code\u003e elements. Implementations throw \u003ccode\u003eNullPointerException\u003c/code\u003e on attempts to \u003ccode\u003eadd\u003c/code\u003e, \u003ccode\u003eput\u003c/code\u003e or \u003ccode\u003eoffer\u003c/code\u003e a \u003ccode\u003enull\u003c/code\u003e. A \u003ccode\u003enull\u003c/code\u003e is used as a sentinel value to indicate failure of \u003ccode\u003epoll\u003c/code\u003e operations. \u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eBlockingQueue\u003c/code\u003e may be capacity bounded. At any given time it may have a \u003ccode\u003eremainingCapacity\u003c/code\u003e beyond which no additional elements can be \u003ccode\u003eput\u003c/code\u003e without blocking. A \u003ccode\u003eBlockingQueue\u003c/code\u003e without any intrinsic capacity constraints always reports a remaining capacity of \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eBlockingQueue\u003c/code\u003e implementations are designed to be used primarily for producer-consumer queues, but additionally support the \u003ca href\u003d\"../Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e interface. So, for example, it is possible to remove an arbitrary element from a queue using \u003ccode\u003eremove(x)\u003c/code\u003e. However, such operations are in general \u003cem\u003enot\u003c/em\u003e performed very efficiently, and are intended for only occasional use, such as when a queued message is cancelled. \u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eBlockingQueue\u003c/code\u003e implementations are thread-safe. All queuing methods achieve their effects atomically using internal locks or other forms of concurrency control. However, the \u003cem\u003ebulk\u003c/em\u003e Collection operations \u003ccode\u003eaddAll\u003c/code\u003e, \u003ccode\u003econtainsAll\u003c/code\u003e, \u003ccode\u003eretainAll\u003c/code\u003e and \u003ccode\u003eremoveAll\u003c/code\u003e are \u003cem\u003enot\u003c/em\u003e necessarily performed atomically unless specified otherwise in an implementation. So it is possible, for example, for \u003ccode\u003eaddAll(c)\u003c/code\u003e to fail (throwing an exception) after adding only some of the elements in \u003ccode\u003ec\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eBlockingQueue\u003c/code\u003e does \u003cem\u003enot\u003c/em\u003e intrinsically support any kind of \"close\" or \"shutdown\" operation to indicate that no more items will be added. The needs and usage of such features tend to be implementation-dependent. For example, a common tactic is for producers to insert special \u003cem\u003eend-of-stream\u003c/em\u003e or \u003cem\u003epoison\u003c/em\u003e objects, that are interpreted accordingly when taken by consumers. \u003c/p\u003e\n\u003cp\u003e Usage example, based on a typical producer-consumer scenario. Note that a \u003ccode\u003eBlockingQueue\u003c/code\u003e can safely be used with multiple producers and multiple consumers. \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class Producer implements Runnable {\n   private final BlockingQueue queue;\n   Producer(BlockingQueue q) { queue \u003d q; }\n   public void run() {\n     try {\n       while (true) { queue.put(produce()); }\n     } catch (InterruptedException ex) { ... handle ...}\n   }\n   Object produce() { ... }\n }\n\n class Consumer implements Runnable {\n   private final BlockingQueue queue;\n   Consumer(BlockingQueue q) { queue \u003d q; }\n   public void run() {\n     try {\n       while (true) { consume(queue.take()); }\n     } catch (InterruptedException ex) { ... handle ...}\n   }\n   void consume(Object x) { ... }\n }\n\n class Setup {\n   void main() {\n     BlockingQueue q \u003d new SomeQueueImplementation();\n     Producer p \u003d new Producer(q);\n     Consumer c1 \u003d new Consumer(q);\n     Consumer c2 \u003d new Consumer(q);\n     new Thread(p).start();\n     new Thread(c1).start();\n     new Thread(c2).start();\n   }\n }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eMemory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a \u003ccode\u003eBlockingQueue\u003c/code\u003e \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e actions subsequent to the access or removal of that element from the \u003ccode\u003eBlockingQueue\u003c/code\u003e in another thread. \u003c/p\u003e\n\u003cp\u003eThis interface is a member of the \u003ca href\u003d\"../../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}