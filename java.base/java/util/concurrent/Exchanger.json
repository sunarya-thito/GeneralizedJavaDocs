{
  "packageName": "java.util.concurrent",
  "simpleName": "Exchanger",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "java.util.concurrent.Exchanger",
        "name": "V",
        "type": "Variable"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "owner": "java.util.concurrent.Exchanger",
            "name": "V",
            "type": "Variable"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "exchange",
      "comment": "Waits for another thread to arrive at this exchange point (unless the current thread is interrupted), and then transfers the given object to it, receiving its object in return. If another thread is already waiting at the exchange point then it is resumed for thread scheduling purposes and receives the object passed in by the current thread. The current thread returns immediately, receiving the object passed to the exchange by that other thread. If no other thread is already waiting at the exchange then the current thread is disabled for thread scheduling purposes and lies dormant until one of two things happens: Some other thread enters the exchange; or Some other thread interrupts the current thread. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting for the exchange, then InterruptedException is thrown and the current thread\u0027s interrupted status is cleared.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the object to exchange"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread was interrupted while waiting"
        ],
        "return": [
          "the object provided by the other thread"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.Exchanger",
        "name": "V",
        "type": "Variable"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        },
        {
          "name": "java.util.concurrent.TimeoutException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "owner": "java.util.concurrent.Exchanger",
            "name": "V",
            "type": "Variable"
          },
          "field": {
            "name": "x"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "exchange",
      "comment": "Waits for another thread to arrive at this exchange point (unless the current thread is interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return. If another thread is already waiting at the exchange point then it is resumed for thread scheduling purposes and receives the object passed in by the current thread. The current thread returns immediately, receiving the object passed to the exchange by that other thread. If no other thread is already waiting at the exchange then the current thread is disabled for thread scheduling purposes and lies dormant until one of three things happens: Some other thread enters the exchange; or Some other thread interrupts the current thread; or The specified waiting time elapses. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting for the exchange, then InterruptedException is thrown and the current thread\u0027s interrupted status is cleared. If the specified waiting time elapses then TimeoutException is thrown. If the time is less than or equal to zero, the method will not wait at all.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the object to exchange",
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the \n\u003ccode\u003etimeout\u003c/code\u003e argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread was interrupted while waiting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/TimeoutException.html\" title\u003d\"class in java.util.concurrent\"\u003eTimeoutException\u003c/a\u003e\u003c/code\u003e - if the specified waiting time elapses before another thread enters the exchange"
        ],
        "return": [
          "the object provided by the other thread"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new Exchanger.",
      "tagMap": {}
    }
  ],
  "genericParameters": [
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.Exchanger",
  "comment": "A synchronization point at which threads can pair and swap elements within pairs. Each thread presents some object on entry to the \n\u003ca href\u003d\"#exchange(V)\"\u003e\u003ccode\u003eexchange\u003c/code\u003e\u003c/a\u003e method, matches with a partner thread, and receives its partner\u0027s object on return. An Exchanger may be viewed as a bidirectional form of a \n\u003ca href\u003d\"SynchronousQueue.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eSynchronousQueue\u003c/code\u003e\u003c/a\u003e. Exchangers may be useful in applications such as genetic algorithms and pipeline designs. \n\u003cp\u003e\u003cb\u003eSample Usage:\u003c/b\u003e Here are the highlights of a class that uses an \u003ccode\u003eExchanger\u003c/code\u003e to swap buffers between threads so that the thread filling the buffer gets a freshly emptied one when it needs it, handing off the filled one to the thread emptying the buffer. \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class FillAndEmpty {\n   Exchanger\u0026lt;DataBuffer\u0026gt; exchanger \u003d new Exchanger\u0026lt;\u0026gt;();\n   DataBuffer initialEmptyBuffer \u003d ... a made-up type\n   DataBuffer initialFullBuffer \u003d ...\n\n   class FillingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer \u003d initialEmptyBuffer;\n       try {\n         while (currentBuffer !\u003d null) {\n           addToBuffer(currentBuffer);\n           if (currentBuffer.isFull())\n             currentBuffer \u003d exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ... }\n     }\n   }\n\n   class EmptyingLoop implements Runnable {\n     public void run() {\n       DataBuffer currentBuffer \u003d initialFullBuffer;\n       try {\n         while (currentBuffer !\u003d null) {\n           takeFromBuffer(currentBuffer);\n           if (currentBuffer.isEmpty())\n             currentBuffer \u003d exchanger.exchange(currentBuffer);\n         }\n       } catch (InterruptedException ex) { ... handle ...}\n     }\n   }\n\n   void start() {\n     new Thread(new FillingLoop()).start();\n     new Thread(new EmptyingLoop()).start();\n   }\n }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eMemory consistency effects: For each pair of threads that successfully exchange objects via an \u003ccode\u003eExchanger\u003c/code\u003e, actions prior to the \u003ccode\u003eexchange()\u003c/code\u003e in each thread \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e those subsequent to a return from the corresponding \u003ccode\u003eexchange()\u003c/code\u003e in the other thread.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}