{
  "packageName": "java.util.concurrent",
  "simpleName": "TimeUnit",
  "moduleName": "java.base",
  "type": "ENUM",
  "superClass": {
    "name": "java.lang.Enum",
    "parameters": [
      {
        "name": "java.util.concurrent.TimeUnit",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.concurrent.TimeUnit",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "values",
      "comment": "Returns an array containing the constants of this enum class, in the order they are declared.",
      "tagMap": {
        "return": [
          "an array containing the constants of this enum class, in the order they are declared"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.TimeUnit",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "valueOf",
      "comment": "Returns the enum constant of this class with the specified name. The string must match exactly an identifier used to declare an enum constant in this class. (Extraneous whitespace characters are not permitted.)",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the enum constant to be returned."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this enum class has no constant with the specified name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null"
        ],
        "return": [
          "the enum constant with the specified name"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "sourceDuration"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "sourceUnit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "convert",
      "comment": "Converts the given time duration in the given unit to this unit. Conversions from finer to coarser granularities truncate, so lose precision. For example, converting 999 milliseconds to seconds results in 0. Conversions from coarser to finer granularities with arguments that would numerically overflow saturate to Long.MIN_VALUE if negative or Long.MAX_VALUE if positive. For example, to convert 10 minutes to milliseconds, use: TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)",
      "tagMap": {
        "param": [
          "\u003ccode\u003esourceDuration\u003c/code\u003e - the time duration in the given \n\u003ccode\u003esourceUnit\u003c/code\u003e",
          "\u003ccode\u003esourceUnit\u003c/code\u003e - the unit of the \n\u003ccode\u003esourceDuration\u003c/code\u003e argument"
        ],
        "return": [
          "the converted duration in this unit, or \n\u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e if conversion would negatively overflow, or \n\u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e if it would positively overflow."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Duration",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "convert",
      "comment": "Converts the given time duration to this unit. For any TimeUnit unit, unit.convert(Duration.ofNanos(n)) is equivalent to unit.convert(n, NANOSECONDS), and unit.convert(Duration.of(n, unit.toChronoUnit())) is equivalent to n (in the absence of overflow).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/Duration.html#of(long,java.time.temporal.TemporalUnit)\"\u003e\u003ccode\u003eDuration.of(long,TemporalUnit)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method differs from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/Duration.html#toNanos()\"\u003e\u003ccode\u003eDuration.toNanos()\u003c/code\u003e\u003c/a\u003e in that it does not throw \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArithmeticException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eArithmeticException\u003c/code\u003e\u003c/a\u003e on numeric overflow."
        ],
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - the time duration"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eduration\u003c/code\u003e is null"
        ],
        "return": [
          "the converted duration in this unit, or \n\u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e if conversion would negatively overflow, or \n\u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e if it would positively overflow."
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toNanos",
      "comment": "Equivalent to NANOSECONDS.convert(duration, this).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - the duration"
        ],
        "return": [
          "the converted duration, or \n\u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e if conversion would negatively overflow, or \n\u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e if it would positively overflow."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toMicros",
      "comment": "Equivalent to MICROSECONDS.convert(duration, this).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - the duration"
        ],
        "return": [
          "the converted duration, or \n\u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e if conversion would negatively overflow, or \n\u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e if it would positively overflow."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toMillis",
      "comment": "Equivalent to MILLISECONDS.convert(duration, this).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - the duration"
        ],
        "return": [
          "the converted duration, or \n\u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e if conversion would negatively overflow, or \n\u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e if it would positively overflow."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toSeconds",
      "comment": "Equivalent to SECONDS.convert(duration, this).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - the duration"
        ],
        "return": [
          "the converted duration, or \n\u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e if conversion would negatively overflow, or \n\u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e if it would positively overflow."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toMinutes",
      "comment": "Equivalent to MINUTES.convert(duration, this).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - the duration"
        ],
        "return": [
          "the converted duration, or \n\u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e if conversion would negatively overflow, or \n\u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e if it would positively overflow."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toHours",
      "comment": "Equivalent to HOURS.convert(duration, this).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - the duration"
        ],
        "return": [
          "the converted duration, or \n\u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e if conversion would negatively overflow, or \n\u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e if it would positively overflow."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "duration"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toDays",
      "comment": "Equivalent to DAYS.convert(duration, this).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eduration\u003c/code\u003e - the duration"
        ],
        "return": [
          "the converted duration"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "timedWait",
      "comment": "Performs a timed Object.wait using this time unit. This is a convenience method that converts timeout arguments into the form required by the Object.wait method. For example, you could implement a blocking poll method (see BlockingQueue.poll) using:  \n public E poll(long timeout, TimeUnit unit)\n     throws InterruptedException {\n   synchronized (lock) {\n     while (isEmpty()) {\n       unit.timedWait(lock, timeout);\n       ...\n     }\n   }\n }",
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to wait on",
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait. If less than or equal to zero, do not wait at all."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Thread",
            "type": "Class"
          },
          "field": {
            "name": "thread"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "timedJoin",
      "comment": "Performs a timed Thread.join using this time unit. This is a convenience method that converts time arguments into the form required by the Thread.join method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ethread\u003c/code\u003e - the thread to wait for",
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait. If less than or equal to zero, do not wait at all."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "sleep",
      "comment": "Performs a Thread.sleep using this time unit. This is a convenience method that converts time arguments into the form required by the Thread.sleep method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the minimum time to sleep. If less than or equal to zero, do not sleep at all."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while sleeping"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.temporal.ChronoUnit",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toChronoUnit",
      "comment": "Converts this TimeUnit to the equivalent ChronoUnit.",
      "tagMap": {
        "return": [
          "the converted equivalent ChronoUnit"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.TimeUnit",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.temporal.ChronoUnit",
            "type": "Class"
          },
          "field": {
            "name": "chronoUnit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Converts a ChronoUnit to the equivalent TimeUnit.",
      "tagMap": {
        "param": [
          "\u003ccode\u003echronoUnit\u003c/code\u003e - the ChronoUnit to convert"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003echronoUnit\u003c/code\u003e has no equivalent TimeUnit",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003echronoUnit\u003c/code\u003e is null"
        ],
        "return": [
          "the converted equivalent TimeUnit"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.TimeUnit",
  "comment": "A \n\u003ccode\u003eTimeUnit\u003c/code\u003e represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units. A \n\u003ccode\u003eTimeUnit\u003c/code\u003e does not maintain time information, but only helps organize and use time representations that may be maintained separately across various contexts. A nanosecond is defined as one thousandth of a microsecond, a microsecond as one thousandth of a millisecond, a millisecond as one thousandth of a second, a minute as sixty seconds, an hour as sixty minutes, and a day as twenty four hours. \n\u003cp\u003eA \u003ccode\u003eTimeUnit\u003c/code\u003e is mainly used to inform time-based methods how a given timing parameter should be interpreted. For example, the following code will timeout in 50 milliseconds if the \u003ca href\u003d\"locks/Lock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003elock\u003c/code\u003e\u003c/a\u003e is not available: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n Lock lock \u003d ...;\n if (lock.tryLock(50L, TimeUnit.MILLISECONDS)) ...\u003c/code\u003e\u003c/pre\u003e while this code will timeout in 50 seconds: \n\u003cpre\u003e \u003ccode\u003e\n Lock lock \u003d ...;\n if (lock.tryLock(50L, TimeUnit.SECONDS)) ...\u003c/code\u003e\u003c/pre\u003e Note however, that there is no guarantee that a particular timeout implementation will be able to notice the passage of time at the same granularity as the given \n\u003ccode\u003eTimeUnit\u003c/code\u003e.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}