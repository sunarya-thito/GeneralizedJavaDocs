{
  "packageName": "java.util.concurrent",
  "simpleName": "ForkJoinWorkerThreadFactory",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinWorkerThread",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.ForkJoinPool",
            "type": "Class"
          },
          "field": {
            "name": "pool"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "newThread",
      "comment": "Returns a new worker thread operating in the given pool. Returning null or throwing an exception may result in tasks never being executed. If this method throws an exception, it is relayed to the caller of the method (for example execute) causing attempted thread creation. If this method returns null or throws an exception, it is not retried until the next attempted creation (for example another call to execute).",
      "tagMap": {
        "param": [
          "\u003ccode\u003epool\u003c/code\u003e - the pool this thread works in"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the pool is null"
        ],
        "return": [
          "the new worker thread, or \n\u003ccode\u003enull\u003c/code\u003e if the request to create a thread is rejected"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory",
  "comment": "Factory for creating new \n\u003ca href\u003d\"ForkJoinWorkerThread.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinWorkerThread\u003c/code\u003e\u003c/a\u003es. A \n\u003ccode\u003eForkJoinWorkerThreadFactory\u003c/code\u003e must be defined and used for \n\u003ccode\u003eForkJoinWorkerThread\u003c/code\u003e subclasses that extend base functionality or initialize threads with different contexts.",
  "tagMap": {}
}