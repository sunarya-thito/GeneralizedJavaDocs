{
  "packageName": "java.util.concurrent",
  "simpleName": "ScheduledThreadPoolExecutor",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.concurrent.ThreadPoolExecutor",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.concurrent.RunnableScheduledFuture",
        "parameters": [
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "runnable"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.RunnableScheduledFuture",
            "parameters": [
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "task"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "decorateTask",
      "comment": "Modifies or replaces the task used to execute a runnable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eV\u003c/code\u003e - the type of the task\u0027s result"
        ],
        "param": [
          "\u003ccode\u003erunnable\u003c/code\u003e - the submitted Runnable",
          "\u003ccode\u003etask\u003c/code\u003e - the task created to execute the runnable"
        ],
        "return": [
          "a task that can execute the runnable"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.RunnableScheduledFuture",
        "parameters": [
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.Callable",
            "parameters": [
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "callable"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.RunnableScheduledFuture",
            "parameters": [
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "task"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "decorateTask",
      "comment": "Modifies or replaces the task used to execute a callable. This method can be used to override the concrete class used for managing internal tasks. The default implementation simply returns the given task.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eV\u003c/code\u003e - the type of the task\u0027s result"
        ],
        "param": [
          "\u003ccode\u003ecallable\u003c/code\u003e - the submitted Callable",
          "\u003ccode\u003etask\u003c/code\u003e - the task created to execute the callable"
        ],
        "return": [
          "a task that can execute the callable"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ScheduledFuture",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "delay"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "schedule",
      "comment": "Description copied from interface: ScheduledExecutorService",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledExecutorService.html#schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)\"\u003eschedule\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eScheduledExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the task to execute",
          "\u003ccode\u003edelay\u003c/code\u003e - the time from now to delay execution",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the delay parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if command or unit is null"
        ],
        "return": [
          "a ScheduledFuture representing pending completion of the task and whose \n\u003ccode\u003eget()\u003c/code\u003e method will return \n\u003ccode\u003enull\u003c/code\u003e upon completion"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ScheduledFuture",
        "parameters": [
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.Callable",
            "parameters": [
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "callable"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "delay"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "schedule",
      "comment": "Description copied from interface: ScheduledExecutorService",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eV\u003c/code\u003e - the type of the callable\u0027s result"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledExecutorService.html#schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)\"\u003eschedule\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eScheduledExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecallable\u003c/code\u003e - the function to execute",
          "\u003ccode\u003edelay\u003c/code\u003e - the time from now to delay execution",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the delay parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if callable or unit is null"
        ],
        "return": [
          "a ScheduledFuture that can be used to extract result or cancel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ScheduledFuture",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "initialDelay"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "period"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scheduleAtFixedRate",
      "comment": "Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is, executions will commence after initialDelay, then initialDelay + period, then initialDelay + 2 * period, and so on. The sequence of task executions continues indefinitely until one of the following exceptional completions occur: The task is explicitly cancelled via the returned future. Method shutdown() is called and the policy on whether to continue after shutdown is not set true, or method shutdownNow() is called; also resulting in task cancellation. An execution of the task throws an exception. In this case calling get on the returned future will throw ExecutionException, holding the exception as its cause. Subsequent executions are suppressed. Subsequent calls to isDone() on the returned future will return true. If any execution of this task takes longer than its period, then subsequent executions may start late, but will not concurrently execute.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledExecutorService.html#scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)\"\u003escheduleAtFixedRate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eScheduledExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the task to execute",
          "\u003ccode\u003einitialDelay\u003c/code\u003e - the time to delay first execution",
          "\u003ccode\u003eperiod\u003c/code\u003e - the period between successive executions",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the initialDelay and period parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if command or unit is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if period less than or equal to zero"
        ],
        "return": [
          "a ScheduledFuture representing pending completion of the series of repeated tasks. The future\u0027s \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html#get()\"\u003e\u003ccode\u003eget()\u003c/code\u003e\u003c/a\u003e method will never return normally, and will throw an exception upon task cancellation or abnormal termination of a task execution."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ScheduledFuture",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "initialDelay"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "delay"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "scheduleWithFixedDelay",
      "comment": "Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next. The sequence of task executions continues indefinitely until one of the following exceptional completions occur: The task is explicitly cancelled via the returned future. Method shutdown() is called and the policy on whether to continue after shutdown is not set true, or method shutdownNow() is called; also resulting in task cancellation. An execution of the task throws an exception. In this case calling get on the returned future will throw ExecutionException, holding the exception as its cause. Subsequent executions are suppressed. Subsequent calls to isDone() on the returned future will return true.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledExecutorService.html#scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)\"\u003escheduleWithFixedDelay\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eScheduledExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the task to execute",
          "\u003ccode\u003einitialDelay\u003c/code\u003e - the time to delay first execution",
          "\u003ccode\u003edelay\u003c/code\u003e - the delay between the termination of one execution and the commencement of the next",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the initialDelay and delay parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if command or unit is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if delay less than or equal to zero"
        ],
        "return": [
          "a ScheduledFuture representing pending completion of the series of repeated tasks. The future\u0027s \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html#get()\"\u003e\u003ccode\u003eget()\u003c/code\u003e\u003c/a\u003e method will never return normally, and will throw an exception upon task cancellation or abnormal termination of a task execution."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "execute",
      "comment": "Executes command with zero required delay. This has effect equivalent to schedule(command, 0, anyUnit). Note that inspections of the queue and of the list returned by shutdownNow will access the zero-delayed ScheduledFuture, not the command itself. A consequence of the use of ScheduledFuture objects is that afterExecute is always called with a null second Throwable argument, even if the command terminated abruptly. Instead, the Throwable thrown by such a task can be obtained via Future.get().",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#execute(java.lang.Runnable)\"\u003eexecute\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html\" title\u003d\"class in java.util.concurrent\"\u003eThreadPoolExecutor\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Executor.html#execute(java.lang.Runnable)\"\u003eexecute\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Executor.html\" title\u003d\"interface in java.util.concurrent\"\u003eExecutor\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the task to execute"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - at discretion of \n\u003ccode\u003eRejectedExecutionHandler\u003c/code\u003e, if the task cannot be accepted for execution because the executor has been shut down",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecommand\u003c/code\u003e is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "task"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "submit",
      "comment": "Description copied from interface: ExecutorService",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html#submit(java.lang.Runnable)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html\" title\u003d\"class in java.util.concurrent\"\u003eAbstractExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html#submit(java.lang.Runnable)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null"
        ],
        "return": [
          "a Future representing pending completion of the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "task"
          }
        },
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "result"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "submit",
      "comment": "Description copied from interface: ExecutorService",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the result"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html#submit(java.lang.Runnable,T)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html\" title\u003d\"class in java.util.concurrent\"\u003eAbstractExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html#submit(java.lang.Runnable,T)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit",
          "\u003ccode\u003eresult\u003c/code\u003e - the result to return"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null"
        ],
        "return": [
          "a Future representing pending completion of the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.Callable",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "task"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "submit",
      "comment": "Description copied from interface: ExecutorService",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the task\u0027s result"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html#submit(java.util.concurrent.Callable)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html\" title\u003d\"class in java.util.concurrent\"\u003eAbstractExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html#submit(java.util.concurrent.Callable)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null"
        ],
        "return": [
          "a Future representing pending completion of the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setContinueExistingPeriodicTasksAfterShutdownPolicy",
      "comment": "Sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown. In this case, executions will continue until shutdownNow or the policy is set to false when already shutdown. This value is by default false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledThreadPoolExecutor.html#getContinueExistingPeriodicTasksAfterShutdownPolicy()\"\u003e\u003ccode\u003egetContinueExistingPeriodicTasksAfterShutdownPolicy()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, continue after shutdown, else don\u0027t"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getContinueExistingPeriodicTasksAfterShutdownPolicy",
      "comment": "Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown. In this case, executions will continue until shutdownNow or the policy is set to false when already shutdown. This value is by default false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledThreadPoolExecutor.html#setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)\"\u003e\u003ccode\u003esetContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if will continue after shutdown"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setExecuteExistingDelayedTasksAfterShutdownPolicy",
      "comment": "Sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown. In this case, these tasks will only terminate upon shutdownNow, or after setting the policy to false when already shutdown. This value is by default true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledThreadPoolExecutor.html#getExecuteExistingDelayedTasksAfterShutdownPolicy()\"\u003e\u003ccode\u003egetExecuteExistingDelayedTasksAfterShutdownPolicy()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, execute after shutdown, else don\u0027t"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExecuteExistingDelayedTasksAfterShutdownPolicy",
      "comment": "Gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown. In this case, these tasks will only terminate upon shutdownNow, or after setting the policy to false when already shutdown. This value is by default true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledThreadPoolExecutor.html#setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)\"\u003e\u003ccode\u003esetExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if will execute after shutdown"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRemoveOnCancelPolicy",
      "comment": "Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation. This value is by default false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledThreadPoolExecutor.html#getRemoveOnCancelPolicy()\"\u003e\u003ccode\u003egetRemoveOnCancelPolicy()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, remove on cancellation, else don\u0027t"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRemoveOnCancelPolicy",
      "comment": "Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation. This value is by default false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledThreadPoolExecutor.html#setRemoveOnCancelPolicy(boolean)\"\u003e\u003ccode\u003esetRemoveOnCancelPolicy(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if cancelled tasks are immediately removed from the queue"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shutdown",
      "comment": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down. This method does not wait for previously submitted tasks to complete execution. Use awaitTermination to do that. If the ExecuteExistingDelayedTasksAfterShutdownPolicy has been set false, existing delayed tasks whose delays have not yet elapsed are cancelled. And unless the ContinueExistingPeriodicTasksAfterShutdownPolicy has been set true, future executions of existing periodic tasks will be cancelled.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#shutdown()\"\u003eshutdown\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html\" title\u003d\"class in java.util.concurrent\"\u003eThreadPoolExecutor\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html#shutdown()\"\u003eshutdown\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e, or the security manager\u0027s \n\u003ccode\u003echeckAccess\u003c/code\u003e method denies access."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.Runnable",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shutdownNow",
      "comment": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. These tasks are drained (removed) from the task queue upon return from this method. This method does not wait for actively executing tasks to terminate. Use awaitTermination to do that. There are no guarantees beyond best-effort attempts to stop processing actively executing tasks. This implementation interrupts tasks via Thread.interrupt(); any task that fails to respond to interrupts may never terminate.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#shutdownNow()\"\u003eshutdownNow\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html\" title\u003d\"class in java.util.concurrent\"\u003eThreadPoolExecutor\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html#shutdownNow()\"\u003eshutdownNow\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e, or the security manager\u0027s \n\u003ccode\u003echeckAccess\u003c/code\u003e method denies access."
        ],
        "return": [
          "list of tasks that never commenced execution. Each element of this list is a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledFuture.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eScheduledFuture\u003c/code\u003e\u003c/a\u003e. For tasks submitted via one of the \n\u003ccode\u003eschedule\u003c/code\u003e methods, the element will be identical to the returned \n\u003ccode\u003eScheduledFuture\u003c/code\u003e. For tasks submitted using \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ScheduledThreadPoolExecutor.html#execute(java.lang.Runnable)\"\u003e\u003ccode\u003eexecute\u003c/code\u003e\u003c/a\u003e, the element will be a zero-delay \n\u003ccode\u003eScheduledFuture\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.BlockingQueue",
        "parameters": [
          {
            "name": "java.lang.Runnable",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getQueue",
      "comment": "Returns the task queue used by this executor. Access to the task queue is intended primarily for debugging and monitoring. This queue may be in active use. Retrieving the task queue does not prevent queued tasks from executing. Each element of this queue is a ScheduledFuture. For tasks submitted via one of the schedule methods, the element will be identical to the returned ScheduledFuture. For tasks submitted using execute, the element will be a zero-delay ScheduledFuture. Iteration over this queue is not guaranteed to traverse tasks in the order in which they will execute.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#getQueue()\"\u003egetQueue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html\" title\u003d\"class in java.util.concurrent\"\u003eThreadPoolExecutor\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the task queue"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "corePoolSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ScheduledThreadPoolExecutor with the given core pool size.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecorePoolSize\u003c/code\u003e - the number of threads to keep in the pool, even if they are idle, unless \n\u003ccode\u003eallowCoreThreadTimeOut\u003c/code\u003e is set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecorePoolSize \u0026lt; 0\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "corePoolSize"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.ThreadFactory",
            "type": "Class"
          },
          "field": {
            "name": "threadFactory"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecorePoolSize\u003c/code\u003e - the number of threads to keep in the pool, even if they are idle, unless \n\u003ccode\u003eallowCoreThreadTimeOut\u003c/code\u003e is set",
          "\u003ccode\u003ethreadFactory\u003c/code\u003e - the factory to use when the executor creates a new thread"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecorePoolSize \u0026lt; 0\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ethreadFactory\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "corePoolSize"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.RejectedExecutionHandler",
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecorePoolSize\u003c/code\u003e - the number of threads to keep in the pool, even if they are idle, unless \n\u003ccode\u003eallowCoreThreadTimeOut\u003c/code\u003e is set",
          "\u003ccode\u003ehandler\u003c/code\u003e - the handler to use when execution is blocked because the thread bounds and queue capacities are reached"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecorePoolSize \u0026lt; 0\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ehandler\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "corePoolSize"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.ThreadFactory",
            "type": "Class"
          },
          "field": {
            "name": "threadFactory"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.RejectedExecutionHandler",
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ScheduledThreadPoolExecutor with the given initial parameters.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecorePoolSize\u003c/code\u003e - the number of threads to keep in the pool, even if they are idle, unless \n\u003ccode\u003eallowCoreThreadTimeOut\u003c/code\u003e is set",
          "\u003ccode\u003ethreadFactory\u003c/code\u003e - the factory to use when the executor creates a new thread",
          "\u003ccode\u003ehandler\u003c/code\u003e - the handler to use when execution is blocked because the thread bounds and queue capacities are reached"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecorePoolSize \u0026lt; 0\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ethreadFactory\u003c/code\u003e or \n\u003ccode\u003ehandler\u003c/code\u003e is null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.ScheduledThreadPoolExecutor",
  "comment": "A \n\u003ca href\u003d\"ThreadPoolExecutor.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eThreadPoolExecutor\u003c/code\u003e\u003c/a\u003e that can additionally schedule commands to run after a given delay, or to execute periodically. This class is preferable to \n\u003ca href\u003d\"../Timer.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTimer\u003c/code\u003e\u003c/a\u003e when multiple worker threads are needed, or when the additional flexibility or capabilities of \n\u003ca href\u003d\"ThreadPoolExecutor.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eThreadPoolExecutor\u003c/code\u003e\u003c/a\u003e (which this class extends) are required. \n\u003cp\u003eDelayed tasks execute no sooner than they are enabled, but without any real-time guarantees about when, after they are enabled, they will commence. Tasks scheduled for exactly the same execution time are enabled in first-in-first-out (FIFO) order of submission. \u003c/p\u003e\n\u003cp\u003eWhen a submitted task is cancelled before it is run, execution is suppressed. By default, such a cancelled task is not automatically removed from the work queue until its delay elapses. While this enables further inspection and monitoring, it may also cause unbounded retention of cancelled tasks. To avoid this, use \u003ca href\u003d\"#setRemoveOnCancelPolicy(boolean)\"\u003e\u003ccode\u003esetRemoveOnCancelPolicy(boolean)\u003c/code\u003e\u003c/a\u003e to cause tasks to be immediately removed from the work queue at time of cancellation. \u003c/p\u003e\n\u003cp\u003eSuccessive executions of a periodic task scheduled via \u003ca href\u003d\"#scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)\"\u003e\u003ccode\u003escheduleAtFixedRate\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"#scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)\"\u003e\u003ccode\u003escheduleWithFixedDelay\u003c/code\u003e\u003c/a\u003e do not overlap. While different executions may be performed by different threads, the effects of prior executions \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e those of subsequent ones. \u003c/p\u003e\n\u003cp\u003eWhile this class inherits from \u003ca href\u003d\"ThreadPoolExecutor.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eThreadPoolExecutor\u003c/code\u003e\u003c/a\u003e, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using \u003ccode\u003ecorePoolSize\u003c/code\u003e threads and an unbounded queue, adjustments to \u003ccode\u003emaximumPoolSize\u003c/code\u003e have no useful effect. Additionally, it is almost never a good idea to set \u003ccode\u003ecorePoolSize\u003c/code\u003e to zero or use \u003ccode\u003eallowCoreThreadTimeOut\u003c/code\u003e because this may leave the pool without threads to handle tasks once they become eligible to run. \u003c/p\u003e\n\u003cp\u003eAs with \u003ccode\u003eThreadPoolExecutor\u003c/code\u003e, if not otherwise specified, this class uses \u003ca href\u003d\"Executors.html#defaultThreadFactory()\"\u003e\u003ccode\u003eExecutors.defaultThreadFactory()\u003c/code\u003e\u003c/a\u003e as the default thread factory, and \u003ca href\u003d\"ThreadPoolExecutor.AbortPolicy.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eThreadPoolExecutor.AbortPolicy\u003c/code\u003e\u003c/a\u003e as the default rejected execution handler. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExtension notes:\u003c/b\u003e This class overrides the \u003ca href\u003d\"ThreadPoolExecutor.html#execute(java.lang.Runnable)\"\u003e\u003ccode\u003eexecute\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"AbstractExecutorService.html#submit(java.lang.Runnable)\"\u003e\u003ccode\u003esubmit\u003c/code\u003e\u003c/a\u003e methods to generate internal \u003ca href\u003d\"ScheduledFuture.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eScheduledFuture\u003c/code\u003e\u003c/a\u003e objects to control per-task delays and scheduling. To preserve functionality, any further overrides of these methods in subclasses must invoke superclass versions, which effectively disables additional task customization. However, this class provides alternative protected extension method \u003ccode\u003edecorateTask\u003c/code\u003e (one version each for \u003ccode\u003eRunnable\u003c/code\u003e and \u003ccode\u003eCallable\u003c/code\u003e) that can be used to customize the concrete task types used to execute commands entered via \u003ccode\u003eexecute\u003c/code\u003e, \u003ccode\u003esubmit\u003c/code\u003e, \u003ccode\u003eschedule\u003c/code\u003e, \u003ccode\u003escheduleAtFixedRate\u003c/code\u003e, and \u003ccode\u003escheduleWithFixedDelay\u003c/code\u003e. By default, a \u003ccode\u003eScheduledThreadPoolExecutor\u003c/code\u003e uses a task type extending \u003ca href\u003d\"FutureTask.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eFutureTask\u003c/code\u003e\u003c/a\u003e. However, this may be modified or replaced using subclasses of the form: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor {\n\n   static class CustomTask\u0026lt;V\u0026gt; implements RunnableScheduledFuture\u0026lt;V\u0026gt; { ... }\n\n   protected \u0026lt;V\u0026gt; RunnableScheduledFuture\u0026lt;V\u0026gt; decorateTask(\n                Runnable r, RunnableScheduledFuture\u0026lt;V\u0026gt; task) {\n       return new CustomTask\u0026lt;V\u0026gt;(r, task);\n   }\n\n   protected \u0026lt;V\u0026gt; RunnableScheduledFuture\u0026lt;V\u0026gt; decorateTask(\n                Callable\u0026lt;V\u0026gt; c, RunnableScheduledFuture\u0026lt;V\u0026gt; task) {\n       return new CustomTask\u0026lt;V\u0026gt;(c, task);\n   }\n   // ... add constructors, etc.\n }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}