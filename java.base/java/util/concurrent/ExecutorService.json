{
  "packageName": "java.util.concurrent",
  "simpleName": "ExecutorService",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.concurrent.Executor",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "shutdown",
      "comment": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down. This method does not wait for previously submitted tasks to complete execution. Use awaitTermination to do that.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e, or the security manager\u0027s \n\u003ccode\u003echeckAccess\u003c/code\u003e method denies access."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.Runnable",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "shutdownNow",
      "comment": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. This method does not wait for actively executing tasks to terminate. Use awaitTermination to do that. There are no guarantees beyond best-effort attempts to stop processing actively executing tasks. For example, typical implementations will cancel via Thread.interrupt(), so any task that fails to respond to interrupts may never terminate.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e, or the security manager\u0027s \n\u003ccode\u003echeckAccess\u003c/code\u003e method denies access."
        ],
        "return": [
          "list of tasks that never commenced execution"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isShutdown",
      "comment": "Returns true if this executor has been shut down.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this executor has been shut down"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isTerminated",
      "comment": "Returns true if all tasks have completed following shut down. Note that isTerminated is never true unless either shutdown or shutdownNow was called first.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if all tasks have completed following shut down"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "awaitTermination",
      "comment": "Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the timeout argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this executor terminated and \n\u003ccode\u003efalse\u003c/code\u003e if the timeout elapsed before termination"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.Callable",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "task"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "submit",
      "comment": "Submits a value-returning task for execution and returns a Future representing the pending results of the task. The Future\u0027s get method will return the task\u0027s result upon successful completion. If you would like to immediately block waiting for a task, you can use constructions of the form result \u003d exec.submit(aCallable).get(); Note: The Executors class includes a set of methods that can convert some other common closure-like objects, for example, PrivilegedAction to Callable form so they can be submitted.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the task\u0027s result"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null"
        ],
        "return": [
          "a Future representing pending completion of the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "task"
          }
        },
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "result"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "submit",
      "comment": "Submits a Runnable task for execution and returns a Future representing that task. The Future\u0027s get method will return the given result upon successful completion.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the result"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit",
          "\u003ccode\u003eresult\u003c/code\u003e - the result to return"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null"
        ],
        "return": [
          "a Future representing pending completion of the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "task"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "submit",
      "comment": "Submits a Runnable task for execution and returns a Future representing that task. The Future\u0027s get method will return null upon successful completion.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null"
        ],
        "return": [
          "a Future representing pending completion of the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.util.concurrent.Future",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.util.concurrent.Callable",
                    "parameters": [
                      {
                        "name": "T",
                        "type": "Class"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "tasks"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "invokeAll",
      "comment": "Executes the given tasks, returning a list of Futures holding their status and results when all complete. Future.isDone() is true for each element of the returned list. Note that a completed task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the values returned from the tasks"
        ],
        "param": [
          "\u003ccode\u003etasks\u003c/code\u003e - the collection of tasks"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting, in which case unfinished tasks are cancelled",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if tasks or any of its elements are \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if any task cannot be scheduled for execution"
        ],
        "return": [
          "a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list, each of which has completed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.util.concurrent.Future",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.util.concurrent.Callable",
                    "parameters": [
                      {
                        "name": "T",
                        "type": "Class"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "tasks"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "invokeAll",
      "comment": "Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first. Future.isDone() is true for each element of the returned list. Upon return, tasks that have not completed are cancelled. Note that a completed task could have terminated either normally or by throwing an exception. The results of this method are undefined if the given collection is modified while this operation is in progress.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the values returned from the tasks"
        ],
        "param": [
          "\u003ccode\u003etasks\u003c/code\u003e - the collection of tasks",
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the timeout argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting, in which case unfinished tasks are cancelled",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if tasks, any of its elements, or unit are \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if any task cannot be scheduled for execution"
        ],
        "return": [
          "a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list. If the operation did not time out, each task will have completed. If it did time out, some of these tasks will not have completed."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        },
        {
          "name": "java.util.concurrent.ExecutionException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.util.concurrent.Callable",
                    "parameters": [
                      {
                        "name": "T",
                        "type": "Class"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "tasks"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "invokeAny",
      "comment": "Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the values returned from the tasks"
        ],
        "param": [
          "\u003ccode\u003etasks\u003c/code\u003e - the collection of tasks"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if tasks or any element task subject to execution is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if tasks is empty",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eExecutionException\u003c/a\u003e\u003c/code\u003e - if no task successfully completes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if tasks cannot be scheduled for execution"
        ],
        "return": [
          "the result returned by one of the tasks"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        },
        {
          "name": "java.util.concurrent.ExecutionException",
          "type": "Class"
        },
        {
          "name": "java.util.concurrent.TimeoutException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.util.concurrent.Callable",
                    "parameters": [
                      {
                        "name": "T",
                        "type": "Class"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "tasks"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "invokeAny",
      "comment": "Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses. Upon normal or exceptional return, tasks that have not completed are cancelled. The results of this method are undefined if the given collection is modified while this operation is in progress.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the values returned from the tasks"
        ],
        "param": [
          "\u003ccode\u003etasks\u003c/code\u003e - the collection of tasks",
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the timeout argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if tasks, or unit, or any element task subject to execution is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/TimeoutException.html\" title\u003d\"class in java.util.concurrent\"\u003eTimeoutException\u003c/a\u003e\u003c/code\u003e - if the given timeout elapses before any task successfully completes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eExecutionException\u003c/a\u003e\u003c/code\u003e - if no task successfully completes",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if tasks cannot be scheduled for execution"
        ],
        "return": [
          "the result returned by one of the tasks"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.concurrent.ExecutorService",
  "comment": "An \n\u003ca href\u003d\"Executor.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eExecutor\u003c/code\u003e\u003c/a\u003e that provides methods to manage termination and methods that can produce a \n\u003ca href\u003d\"Future.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eFuture\u003c/code\u003e\u003c/a\u003e for tracking progress of one or more asynchronous tasks. \n\u003cp\u003eAn \u003ccode\u003eExecutorService\u003c/code\u003e can be shut down, which will cause it to reject new tasks. Two different methods are provided for shutting down an \u003ccode\u003eExecutorService\u003c/code\u003e. The \u003ca href\u003d\"#shutdown()\"\u003e\u003ccode\u003eshutdown()\u003c/code\u003e\u003c/a\u003e method will allow previously submitted tasks to execute before terminating, while the \u003ca href\u003d\"#shutdownNow()\"\u003e\u003ccode\u003eshutdownNow()\u003c/code\u003e\u003c/a\u003e method prevents waiting tasks from starting and attempts to stop currently executing tasks. Upon termination, an executor has no tasks actively executing, no tasks awaiting execution, and no new tasks can be submitted. An unused \u003ccode\u003eExecutorService\u003c/code\u003e should be shut down to allow reclamation of its resources. \u003c/p\u003e\n\u003cp\u003eMethod \u003ccode\u003esubmit\u003c/code\u003e extends base method \u003ca href\u003d\"Executor.html#execute(java.lang.Runnable)\"\u003e\u003ccode\u003eExecutor.execute(Runnable)\u003c/code\u003e\u003c/a\u003e by creating and returning a \u003ca href\u003d\"Future.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eFuture\u003c/code\u003e\u003c/a\u003e that can be used to cancel execution and/or wait for completion. Methods \u003ccode\u003einvokeAny\u003c/code\u003e and \u003ccode\u003einvokeAll\u003c/code\u003e perform the most commonly useful forms of bulk execution, executing a collection of tasks and then waiting for at least one, or all, to complete. (Class \u003ca href\u003d\"ExecutorCompletionService.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eExecutorCompletionService\u003c/code\u003e\u003c/a\u003e can be used to write customized variants of these methods.) \u003c/p\u003e\n\u003cp\u003eThe \u003ca href\u003d\"Executors.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eExecutors\u003c/code\u003e\u003c/a\u003e class provides factory methods for the executor services provided in this package. \u003c/p\u003e\n\u003ch2\u003eUsage Examples\u003c/h2\u003e Here is a sketch of a network service in which threads in a thread pool service incoming requests. It uses the preconfigured \n\u003ca href\u003d\"Executors.html#newFixedThreadPool(int)\"\u003e\u003ccode\u003eExecutors.newFixedThreadPool(int)\u003c/code\u003e\u003c/a\u003e factory method: \n\u003cpre\u003e \u003ccode\u003e\n class NetworkService implements Runnable {\n   private final ServerSocket serverSocket;\n   private final ExecutorService pool;\n\n   public NetworkService(int port, int poolSize)\n       throws IOException {\n     serverSocket \u003d new ServerSocket(port);\n     pool \u003d Executors.newFixedThreadPool(poolSize);\n   }\n\n   public void run() { // run the service\n     try {\n       for (;;) {\n         pool.execute(new Handler(serverSocket.accept()));\n       }\n     } catch (IOException ex) {\n       pool.shutdown();\n     }\n   }\n }\n\n class Handler implements Runnable {\n   private final Socket socket;\n   Handler(Socket socket) { this.socket \u003d socket; }\n   public void run() {\n     // read and service request on socket\n   }\n }\u003c/code\u003e\u003c/pre\u003e The following method shuts down an \n\u003ccode\u003eExecutorService\u003c/code\u003e in two phases, first by calling \n\u003ccode\u003eshutdown\u003c/code\u003e to reject incoming tasks, and then calling \n\u003ccode\u003eshutdownNow\u003c/code\u003e, if necessary, to cancel any lingering tasks: \n\u003cpre\u003e \u003ccode\u003e\n void shutdownAndAwaitTermination(ExecutorService pool) {\n   pool.shutdown(); // Disable new tasks from being submitted\n   try {\n     // Wait a while for existing tasks to terminate\n     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {\n       pool.shutdownNow(); // Cancel currently executing tasks\n       // Wait a while for tasks to respond to being cancelled\n       if (!pool.awaitTermination(60, TimeUnit.SECONDS))\n           System.err.println(\"Pool did not terminate\");\n     }\n   } catch (InterruptedException ie) {\n     // (Re-)Cancel if current thread also interrupted\n     pool.shutdownNow();\n     // Preserve interrupt status\n     Thread.currentThread().interrupt();\n   }\n }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003eMemory consistency effects: Actions in a thread prior to the submission of a \u003ccode\u003eRunnable\u003c/code\u003e or \u003ccode\u003eCallable\u003c/code\u003e task to an \u003ccode\u003eExecutorService\u003c/code\u003e \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e any actions taken by that task, which in turn \u003ci\u003ehappen-before\u003c/i\u003e the result is retrieved via \u003ccode\u003eFuture.get()\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}