{
  "packageName": "java.util.concurrent",
  "simpleName": "RecursiveAction",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.concurrent.ForkJoinTask",
    "parameters": [
      {
        "name": "java.lang.Void",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "compute",
      "comment": "The main computation performed by this task.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.Void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getRawResult",
      "comment": "Always returns null.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#getRawResult()\"\u003egetRawResult\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Void.html\" title\u003d\"class in java.lang\"\u003eVoid\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003enull\u003c/code\u003e always"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Void",
            "type": "Class"
          },
          "field": {
            "name": "mustBeNull"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "setRawResult",
      "comment": "Requires null completion value.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#setRawResult(V)\"\u003esetRawResult\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Void.html\" title\u003d\"class in java.lang\"\u003eVoid\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003emustBeNull\u003c/code\u003e - the value"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "exec",
      "comment": "Implements execution conventions for RecursiveActions.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html#exec()\"\u003eexec\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003eForkJoinTask\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Void.html\" title\u003d\"class in java.lang\"\u003eVoid\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task is known to have completed normally"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.concurrent.RecursiveAction",
  "comment": "A recursive resultless \n\u003ca href\u003d\"ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinTask\u003c/code\u003e\u003c/a\u003e. This class establishes conventions to parameterize resultless actions as \n\u003ccode\u003eVoid\u003c/code\u003e \n\u003ccode\u003eForkJoinTask\u003c/code\u003es. Because \n\u003ccode\u003enull\u003c/code\u003e is the only valid value of type \n\u003ccode\u003eVoid\u003c/code\u003e, methods such as \n\u003ccode\u003ejoin\u003c/code\u003e always return \n\u003ccode\u003enull\u003c/code\u003e upon completion. \n\u003cp\u003e\u003cb\u003eSample Usages.\u003c/b\u003e Here is a simple but complete ForkJoin sort that sorts a given \u003ccode\u003elong[]\u003c/code\u003e array: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n static class SortTask extends RecursiveAction {\n   final long[] array; final int lo, hi;\n   SortTask(long[] array, int lo, int hi) {\n     this.array \u003d array; this.lo \u003d lo; this.hi \u003d hi;\n   }\n   SortTask(long[] array) { this(array, 0, array.length); }\n   protected void compute() {\n     if (hi - lo \u0026lt; THRESHOLD)\n       sortSequentially(lo, hi);\n     else {\n       int mid \u003d (lo + hi) \u0026gt;\u0026gt;\u0026gt; 1;\n       invokeAll(new SortTask(array, lo, mid),\n                 new SortTask(array, mid, hi));\n       merge(lo, mid, hi);\n     }\n   }\n   // implementation details follow:\n   static final int THRESHOLD \u003d 1000;\n   void sortSequentially(int lo, int hi) {\n     Arrays.sort(array, lo, hi);\n   }\n   void merge(int lo, int mid, int hi) {\n     long[] buf \u003d Arrays.copyOfRange(array, lo, mid);\n     for (int i \u003d 0, j \u003d lo, k \u003d mid; i \u0026lt; buf.length; j++)\n       array[j] \u003d (k \u003d\u003d hi || buf[i] \u0026lt; array[k]) ?\n         buf[i++] : array[k++];\n   }\n }\u003c/code\u003e\u003c/pre\u003e You could then sort \n\u003ccode\u003eanArray\u003c/code\u003e by creating \n\u003ccode\u003enew SortTask(anArray)\u003c/code\u003e and invoking it in a ForkJoinPool. As a more concrete simple example, the following task increments each element of an array: \n\u003cpre\u003e \u003ccode\u003e\n class IncrementTask extends RecursiveAction {\n   final long[] array; final int lo, hi;\n   IncrementTask(long[] array, int lo, int hi) {\n     this.array \u003d array; this.lo \u003d lo; this.hi \u003d hi;\n   }\n   protected void compute() {\n     if (hi - lo \u0026lt; THRESHOLD) {\n       for (int i \u003d lo; i \u0026lt; hi; ++i)\n         array[i]++;\n     }\n     else {\n       int mid \u003d (lo + hi) \u0026gt;\u0026gt;\u0026gt; 1;\n       invokeAll(new IncrementTask(array, lo, mid),\n                 new IncrementTask(array, mid, hi));\n     }\n   }\n }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe following example illustrates some refinements and idioms that may lead to better performance: RecursiveActions need not be fully recursive, so long as they maintain the basic divide-and-conquer approach. Here is a class that sums the squares of each element of a double array, by subdividing out only the right-hand-sides of repeated divisions by two, and keeping track of them with a chain of \u003ccode\u003enext\u003c/code\u003e references. It uses a dynamic threshold based on method \u003ccode\u003egetSurplusQueuedTaskCount\u003c/code\u003e, but counterbalances potential excess partitioning by directly performing leaf actions on unstolen tasks rather than further subdividing. \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n double sumOfSquares(ForkJoinPool pool, double[] array) {\n   int n \u003d array.length;\n   Applyer a \u003d new Applyer(array, 0, n, null);\n   pool.invoke(a);\n   return a.result;\n }\n\n class Applyer extends RecursiveAction {\n   final double[] array;\n   final int lo, hi;\n   double result;\n   Applyer next; // keeps track of right-hand-side tasks\n   Applyer(double[] array, int lo, int hi, Applyer next) {\n     this.array \u003d array; this.lo \u003d lo; this.hi \u003d hi;\n     this.next \u003d next;\n   }\n\n   double atLeaf(int l, int h) {\n     double sum \u003d 0;\n     for (int i \u003d l; i \u0026lt; h; ++i) // perform leftmost base step\n       sum +\u003d array[i] * array[i];\n     return sum;\n   }\n\n   protected void compute() {\n     int l \u003d lo;\n     int h \u003d hi;\n     Applyer right \u003d null;\n     while (h - l \u0026gt; 1 \u0026amp;\u0026amp; getSurplusQueuedTaskCount() \u0026lt;\u003d 3) {\n       int mid \u003d (l + h) \u0026gt;\u0026gt;\u0026gt; 1;\n       right \u003d new Applyer(array, mid, h, right);\n       right.fork();\n       h \u003d mid;\n     }\n     double sum \u003d atLeaf(l, h);\n     while (right !\u003d null) {\n       if (right.tryUnfork()) // directly calculate if not stolen\n         sum +\u003d right.atLeaf(right.lo, right.hi);\n       else {\n         right.join();\n         sum +\u003d right.result;\n       }\n       right \u003d right.next;\n     }\n     result \u003d sum;\n   }\n }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.RecursiveAction\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.7"
    ]
  }
}