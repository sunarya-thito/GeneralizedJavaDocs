{
  "packageName": "java.util.concurrent",
  "simpleName": "ThreadPoolExecutor",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.concurrent.AbstractExecutorService",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "execute",
      "comment": "Executes the given task sometime in the future. The task may execute in a new thread or in an existing pooled thread. If the task cannot be submitted for execution, either because this executor has been shutdown or because its capacity has been reached, the task is handled by the current RejectedExecutionHandler.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the task to execute"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - at discretion of \n\u003ccode\u003eRejectedExecutionHandler\u003c/code\u003e, if the task cannot be accepted for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecommand\u003c/code\u003e is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shutdown",
      "comment": "Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down. This method does not wait for previously submitted tasks to complete execution. Use awaitTermination to do that.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e, or the security manager\u0027s \n\u003ccode\u003echeckAccess\u003c/code\u003e method denies access."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.Runnable",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shutdownNow",
      "comment": "Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution. These tasks are drained (removed) from the task queue upon return from this method. This method does not wait for actively executing tasks to terminate. Use awaitTermination to do that. There are no guarantees beyond best-effort attempts to stop processing actively executing tasks. This implementation interrupts tasks via Thread.interrupt(); any task that fails to respond to interrupts may never terminate.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and shutting down this ExecutorService may manipulate threads that the caller is not permitted to modify because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e, or the security manager\u0027s \n\u003ccode\u003echeckAccess\u003c/code\u003e method denies access."
        ],
        "return": [
          "list of tasks that never commenced execution"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isShutdown",
      "comment": "Description copied from interface: ExecutorService",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this executor has been shut down"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isTerminating",
      "comment": "Returns true if this executor is in the process of terminating after shutdown() or shutdownNow() but has not completely terminated. This method may be useful for debugging. A return of true reported a sufficient period after shutdown may indicate that submitted tasks have ignored or suppressed interruption, causing this executor not to properly terminate.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if terminating but not yet terminated"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isTerminated",
      "comment": "Description copied from interface: ExecutorService",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if all tasks have completed following shut down"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "awaitTermination",
      "comment": "Description copied from interface: ExecutorService",
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the timeout argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this executor terminated and \n\u003ccode\u003efalse\u003c/code\u003e if the timeout elapsed before termination"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "finalize",
      "comment": "Description copied from class: Object",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ref/WeakReference.html\" title\u003d\"class in java.lang.ref\"\u003e\u003ccode\u003eWeakReference\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ref/PhantomReference.html\" title\u003d\"class in java.lang.ref\"\u003e\u003ccode\u003ePhantomReference\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#finalize()\"\u003efinalize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "implNote": [
          "Previous versions of this class had a finalize method that shut down this executor, but in this version, finalize does nothing."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.ThreadFactory",
            "type": "Class"
          },
          "field": {
            "name": "threadFactory"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setThreadFactory",
      "comment": "Sets the thread factory used to create new threads.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#getThreadFactory()\"\u003e\u003ccode\u003egetThreadFactory()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ethreadFactory\u003c/code\u003e - the new thread factory"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if threadFactory is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ThreadFactory",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getThreadFactory",
      "comment": "Returns the thread factory used to create new threads.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#setThreadFactory(java.util.concurrent.ThreadFactory)\"\u003e\u003ccode\u003esetThreadFactory(ThreadFactory)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current thread factory"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.RejectedExecutionHandler",
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setRejectedExecutionHandler",
      "comment": "Sets a new handler for unexecutable tasks.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#getRejectedExecutionHandler()\"\u003e\u003ccode\u003egetRejectedExecutionHandler()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ehandler\u003c/code\u003e - the new handler"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if handler is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.RejectedExecutionHandler",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRejectedExecutionHandler",
      "comment": "Returns the current handler for unexecutable tasks.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)\"\u003e\u003ccode\u003esetRejectedExecutionHandler(RejectedExecutionHandler)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current handler"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "corePoolSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCorePoolSize",
      "comment": "Sets the core number of threads. This overrides any value set in the constructor. If the new value is smaller than the current value, excess existing threads will be terminated when they next become idle. If larger, new threads will, if needed, be started to execute any queued tasks.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#getCorePoolSize()\"\u003e\u003ccode\u003egetCorePoolSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecorePoolSize\u003c/code\u003e - the new core size"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecorePoolSize \u0026lt; 0\u003c/code\u003e or \n\u003ccode\u003ecorePoolSize\u003c/code\u003e is greater than the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#getMaximumPoolSize()\"\u003emaximum pool size\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCorePoolSize",
      "comment": "Returns the core number of threads.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#setCorePoolSize(int)\"\u003e\u003ccode\u003esetCorePoolSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the core number of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "prestartCoreThread",
      "comment": "Starts a core thread, causing it to idly wait for work. This overrides the default policy of starting core threads only when new tasks are executed. This method will return false if all core threads have already been started.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a thread was started"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "prestartAllCoreThreads",
      "comment": "Starts all core threads, causing them to idly wait for work. This overrides the default policy of starting core threads only when new tasks are executed.",
      "tagMap": {
        "return": [
          "the number of threads started"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "allowsCoreThreadTimeOut",
      "comment": "Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time, being replaced if needed when new tasks arrive. When true, the same keep-alive policy applying to non-core threads applies also to core threads. When false (the default), core threads are never terminated due to lack of incoming tasks.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if core threads are allowed to time out, else \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "allowCoreThreadTimeOut",
      "comment": "Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive. When false, core threads are never terminated due to lack of incoming tasks. When true, the same keep-alive policy applying to non-core threads applies also to core threads. To avoid continual thread replacement, the keep-alive time must be greater than zero when setting true. This method should in general be called before the pool is actively used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if should time out, else \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if value is \n\u003ccode\u003etrue\u003c/code\u003e and the current keep-alive time is not greater than zero"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maximumPoolSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMaximumPoolSize",
      "comment": "Sets the maximum allowed number of threads. This overrides any value set in the constructor. If the new value is smaller than the current value, excess existing threads will be terminated when they next become idle.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#getMaximumPoolSize()\"\u003e\u003ccode\u003egetMaximumPoolSize()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emaximumPoolSize\u003c/code\u003e - the new maximum"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the new maximum is less than or equal to zero, or less than the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#getCorePoolSize()\"\u003ecore pool size\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMaximumPoolSize",
      "comment": "Returns the maximum allowed number of threads.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#setMaximumPoolSize(int)\"\u003e\u003ccode\u003esetMaximumPoolSize(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the maximum allowed number of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "time"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setKeepAliveTime",
      "comment": "Sets the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated. Threads that wait this amount of time without processing a task will be terminated if there are more than the core number of threads currently in the pool, or if this pool allows core thread timeout. This overrides any value set in the constructor.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#getKeepAliveTime(java.util.concurrent.TimeUnit)\"\u003e\u003ccode\u003egetKeepAliveTime(TimeUnit)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - the time to wait. A time value of zero will cause excess threads to terminate immediately after executing tasks.",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the \n\u003ccode\u003etime\u003c/code\u003e argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etime\u003c/code\u003e less than zero or if \n\u003ccode\u003etime\u003c/code\u003e is zero and \n\u003ccode\u003eallowsCoreThreadTimeOut\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getKeepAliveTime",
      "comment": "Returns the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated. Threads that wait this amount of time without processing a task will be terminated if there are more than the core number of threads currently in the pool, or if this pool allows core thread timeout.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ThreadPoolExecutor.html#setKeepAliveTime(long,java.util.concurrent.TimeUnit)\"\u003e\u003ccode\u003esetKeepAliveTime(long, TimeUnit)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the desired time unit of the result"
        ],
        "return": [
          "the time limit"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.BlockingQueue",
        "parameters": [
          {
            "name": "java.lang.Runnable",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getQueue",
      "comment": "Returns the task queue used by this executor. Access to the task queue is intended primarily for debugging and monitoring. This queue may be in active use. Retrieving the task queue does not prevent queued tasks from executing.",
      "tagMap": {
        "return": [
          "the task queue"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "task"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Removes this task from the executor\u0027s internal queue if it is present, thus causing it not to be run if it has not already started. This method may be useful as one part of a cancellation scheme. It may fail to remove tasks that have been converted into other forms before being placed on the internal queue. For example, a task entered using submit might be converted into a form that maintains Future status. However, in such cases, method purge() may be used to remove those Futures that have been cancelled.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to remove"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the task was removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "purge",
      "comment": "Tries to remove from the work queue all Future tasks that have been cancelled. This method can be useful as a storage reclamation operation, that has no other impact on functionality. Cancelled tasks are never executed, but may accumulate in work queues until worker threads can actively remove them. Invoking this method instead tries to remove them now. However, this method may fail to remove tasks in the presence of interference by other threads.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPoolSize",
      "comment": "Returns the current number of threads in the pool.",
      "tagMap": {
        "return": [
          "the number of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActiveCount",
      "comment": "Returns the approximate number of threads that are actively executing tasks.",
      "tagMap": {
        "return": [
          "the number of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLargestPoolSize",
      "comment": "Returns the largest number of threads that have ever simultaneously been in the pool.",
      "tagMap": {
        "return": [
          "the number of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTaskCount",
      "comment": "Returns the approximate total number of tasks that have ever been scheduled for execution. Because the states of tasks and threads may change dynamically during computation, the returned value is only an approximation.",
      "tagMap": {
        "return": [
          "the number of tasks"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCompletedTaskCount",
      "comment": "Returns the approximate total number of tasks that have completed execution. Because the states of tasks and threads may change dynamically during computation, the returned value is only an approximation, but one that does not ever decrease across successive calls.",
      "tagMap": {
        "return": [
          "the number of tasks"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string identifying this pool, as well as its state, including indications of run state and estimated worker and task counts.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string identifying this pool, as well as its state"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Thread",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "beforeExecute",
      "comment": "Method invoked prior to executing the given Runnable in the given thread. This method is invoked by thread t that will execute task r, and may be used to re-initialize ThreadLocals, or to perform logging. This implementation does nothing, but may be customized in subclasses. Note: To properly nest multiple overridings, subclasses should generally invoke super.beforeExecute at the end of this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the thread that will run task \n\u003ccode\u003er\u003c/code\u003e",
          "\u003ccode\u003er\u003c/code\u003e - the task that will be executed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        },
        {
          "type": {
            "name": "java.lang.Throwable",
            "type": "Class"
          },
          "field": {
            "name": "t"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "afterExecute",
      "comment": "Method invoked upon completion of execution of the given Runnable. This method is invoked by the thread that executed the task. If non-null, the Throwable is the uncaught RuntimeException or Error that caused execution to terminate abruptly. This implementation does nothing, but may be customized in subclasses. Note: To properly nest multiple overridings, subclasses should generally invoke super.afterExecute at the beginning of this method. Note: When actions are enclosed in tasks (such as FutureTask) either explicitly or via methods such as submit, these task objects catch and maintain computational exceptions, and so they do not cause abrupt termination, and the internal exceptions are not passed to this method. If you would like to trap both kinds of failures in this method, you can further probe for such cases, as in this sample subclass that prints either the direct cause or the underlying exception if a task has been aborted:  \n class ExtendedExecutor extends ThreadPoolExecutor {\n   // ...\n   protected void afterExecute(Runnable r, Throwable t) {\n     super.afterExecute(r, t);\n     if (t \u003d\u003d null\n         \u0026\u0026 r instanceof Future\u003c?\u003e\n         \u0026\u0026 ((Future\u003c?\u003e)r).isDone()) {\n       try {\n         Object result \u003d ((Future\u003c?\u003e) r).get();\n       } catch (CancellationException ce) {\n         t \u003d ce;\n       } catch (ExecutionException ee) {\n         t \u003d ee.getCause();\n       } catch (InterruptedException ie) {\n         // ignore/reset\n         Thread.currentThread().interrupt();\n       }\n     }\n     if (t !\u003d null)\n       System.out.println(t);\n   }\n }",
      "tagMap": {
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - the runnable that has completed",
          "\u003ccode\u003et\u003c/code\u003e - the exception that caused termination, or null if execution completed normally"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "terminated",
      "comment": "Method invoked when the Executor has terminated. Default implementation does nothing. Note: To properly nest multiple overridings, subclasses should generally invoke super.terminated within this method.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "corePoolSize"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maximumPoolSize"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "keepAliveTime"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.BlockingQueue",
            "parameters": [
              {
                "name": "java.lang.Runnable",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "workQueue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ThreadPoolExecutor with the given initial parameters, the default thread factory and the default rejected execution handler. It may be more convenient to use one of the Executors factory methods instead of this general purpose constructor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecorePoolSize\u003c/code\u003e - the number of threads to keep in the pool, even if they are idle, unless \n\u003ccode\u003eallowCoreThreadTimeOut\u003c/code\u003e is set",
          "\u003ccode\u003emaximumPoolSize\u003c/code\u003e - the maximum number of threads to allow in the pool",
          "\u003ccode\u003ekeepAliveTime\u003c/code\u003e - when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating.",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit for the \n\u003ccode\u003ekeepAliveTime\u003c/code\u003e argument",
          "\u003ccode\u003eworkQueue\u003c/code\u003e - the queue to use for holding tasks before they are executed. This queue will hold only the \n\u003ccode\u003eRunnable\u003c/code\u003e tasks submitted by the \n\u003ccode\u003eexecute\u003c/code\u003e method."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if one of the following holds:\n\u003cbr\u003e \n\u003ccode\u003ecorePoolSize \u0026lt; 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003ekeepAliveTime \u0026lt; 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003emaximumPoolSize \u0026lt;\u003d 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003emaximumPoolSize \u0026lt; corePoolSize\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eworkQueue\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "corePoolSize"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maximumPoolSize"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "keepAliveTime"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.BlockingQueue",
            "parameters": [
              {
                "name": "java.lang.Runnable",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "workQueue"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.ThreadFactory",
            "type": "Class"
          },
          "field": {
            "name": "threadFactory"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ThreadPoolExecutor with the given initial parameters and default rejected execution handler.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecorePoolSize\u003c/code\u003e - the number of threads to keep in the pool, even if they are idle, unless \n\u003ccode\u003eallowCoreThreadTimeOut\u003c/code\u003e is set",
          "\u003ccode\u003emaximumPoolSize\u003c/code\u003e - the maximum number of threads to allow in the pool",
          "\u003ccode\u003ekeepAliveTime\u003c/code\u003e - when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating.",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit for the \n\u003ccode\u003ekeepAliveTime\u003c/code\u003e argument",
          "\u003ccode\u003eworkQueue\u003c/code\u003e - the queue to use for holding tasks before they are executed. This queue will hold only the \n\u003ccode\u003eRunnable\u003c/code\u003e tasks submitted by the \n\u003ccode\u003eexecute\u003c/code\u003e method.",
          "\u003ccode\u003ethreadFactory\u003c/code\u003e - the factory to use when the executor creates a new thread"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if one of the following holds:\n\u003cbr\u003e \n\u003ccode\u003ecorePoolSize \u0026lt; 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003ekeepAliveTime \u0026lt; 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003emaximumPoolSize \u0026lt;\u003d 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003emaximumPoolSize \u0026lt; corePoolSize\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eworkQueue\u003c/code\u003e or \n\u003ccode\u003ethreadFactory\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "corePoolSize"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maximumPoolSize"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "keepAliveTime"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.BlockingQueue",
            "parameters": [
              {
                "name": "java.lang.Runnable",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "workQueue"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.RejectedExecutionHandler",
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ThreadPoolExecutor with the given initial parameters and default thread factory.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecorePoolSize\u003c/code\u003e - the number of threads to keep in the pool, even if they are idle, unless \n\u003ccode\u003eallowCoreThreadTimeOut\u003c/code\u003e is set",
          "\u003ccode\u003emaximumPoolSize\u003c/code\u003e - the maximum number of threads to allow in the pool",
          "\u003ccode\u003ekeepAliveTime\u003c/code\u003e - when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating.",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit for the \n\u003ccode\u003ekeepAliveTime\u003c/code\u003e argument",
          "\u003ccode\u003eworkQueue\u003c/code\u003e - the queue to use for holding tasks before they are executed. This queue will hold only the \n\u003ccode\u003eRunnable\u003c/code\u003e tasks submitted by the \n\u003ccode\u003eexecute\u003c/code\u003e method.",
          "\u003ccode\u003ehandler\u003c/code\u003e - the handler to use when execution is blocked because the thread bounds and queue capacities are reached"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if one of the following holds:\n\u003cbr\u003e \n\u003ccode\u003ecorePoolSize \u0026lt; 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003ekeepAliveTime \u0026lt; 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003emaximumPoolSize \u0026lt;\u003d 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003emaximumPoolSize \u0026lt; corePoolSize\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eworkQueue\u003c/code\u003e or \n\u003ccode\u003ehandler\u003c/code\u003e is null"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "corePoolSize"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maximumPoolSize"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "keepAliveTime"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.BlockingQueue",
            "parameters": [
              {
                "name": "java.lang.Runnable",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "workQueue"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.ThreadFactory",
            "type": "Class"
          },
          "field": {
            "name": "threadFactory"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.RejectedExecutionHandler",
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ThreadPoolExecutor with the given initial parameters.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecorePoolSize\u003c/code\u003e - the number of threads to keep in the pool, even if they are idle, unless \n\u003ccode\u003eallowCoreThreadTimeOut\u003c/code\u003e is set",
          "\u003ccode\u003emaximumPoolSize\u003c/code\u003e - the maximum number of threads to allow in the pool",
          "\u003ccode\u003ekeepAliveTime\u003c/code\u003e - when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating.",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit for the \n\u003ccode\u003ekeepAliveTime\u003c/code\u003e argument",
          "\u003ccode\u003eworkQueue\u003c/code\u003e - the queue to use for holding tasks before they are executed. This queue will hold only the \n\u003ccode\u003eRunnable\u003c/code\u003e tasks submitted by the \n\u003ccode\u003eexecute\u003c/code\u003e method.",
          "\u003ccode\u003ethreadFactory\u003c/code\u003e - the factory to use when the executor creates a new thread",
          "\u003ccode\u003ehandler\u003c/code\u003e - the handler to use when execution is blocked because the thread bounds and queue capacities are reached"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if one of the following holds:\n\u003cbr\u003e \n\u003ccode\u003ecorePoolSize \u0026lt; 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003ekeepAliveTime \u0026lt; 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003emaximumPoolSize \u0026lt;\u003d 0\u003c/code\u003e\n\u003cbr\u003e \n\u003ccode\u003emaximumPoolSize \u0026lt; corePoolSize\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eworkQueue\u003c/code\u003e or \n\u003ccode\u003ethreadFactory\u003c/code\u003e or \n\u003ccode\u003ehandler\u003c/code\u003e is null"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy",
    "java.util.concurrent.ThreadPoolExecutor$AbortPolicy",
    "java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy",
    "java.util.concurrent.ThreadPoolExecutor$DiscardPolicy"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.ThreadPoolExecutor",
  "comment": "An \n\u003ca href\u003d\"ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eExecutorService\u003c/code\u003e\u003c/a\u003e that executes each submitted task using one of possibly several pooled threads, normally configured using \n\u003ca href\u003d\"Executors.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eExecutors\u003c/code\u003e\u003c/a\u003e factory methods. \n\u003cp\u003eThread pools address two different problems: they usually provide improved performance when executing large numbers of asynchronous tasks, due to reduced per-task invocation overhead, and they provide a means of bounding and managing the resources, including threads, consumed when executing a collection of tasks. Each \u003ccode\u003eThreadPoolExecutor\u003c/code\u003e also maintains some basic statistics, such as the number of completed tasks. \u003c/p\u003e\n\u003cp\u003eTo be useful across a wide range of contexts, this class provides many adjustable parameters and extensibility hooks. However, programmers are urged to use the more convenient \u003ca href\u003d\"Executors.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eExecutors\u003c/code\u003e\u003c/a\u003e factory methods \u003ca href\u003d\"Executors.html#newCachedThreadPool()\"\u003e\u003ccode\u003eExecutors.newCachedThreadPool()\u003c/code\u003e\u003c/a\u003e (unbounded thread pool, with automatic thread reclamation), \u003ca href\u003d\"Executors.html#newFixedThreadPool(int)\"\u003e\u003ccode\u003eExecutors.newFixedThreadPool(int)\u003c/code\u003e\u003c/a\u003e (fixed size thread pool) and \u003ca href\u003d\"Executors.html#newSingleThreadExecutor()\"\u003e\u003ccode\u003eExecutors.newSingleThreadExecutor()\u003c/code\u003e\u003c/a\u003e (single background thread), that preconfigure settings for the most common usage scenarios. Otherwise, use the following guide when manually configuring and tuning this class: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e\n  Core and maximum pool sizes\n \u003c/dt\u003e \n \u003cdd\u003e\n  A \n  \u003ccode\u003eThreadPoolExecutor\u003c/code\u003e will automatically adjust the pool size (see \n  \u003ca href\u003d\"#getPoolSize()\"\u003e\u003ccode\u003egetPoolSize()\u003c/code\u003e\u003c/a\u003e) according to the bounds set by corePoolSize (see \n  \u003ca href\u003d\"#getCorePoolSize()\"\u003e\u003ccode\u003egetCorePoolSize()\u003c/code\u003e\u003c/a\u003e) and maximumPoolSize (see \n  \u003ca href\u003d\"#getMaximumPoolSize()\"\u003e\u003ccode\u003egetMaximumPoolSize()\u003c/code\u003e\u003c/a\u003e). When a new task is submitted in method \n  \u003ca href\u003d\"#execute(java.lang.Runnable)\"\u003e\u003ccode\u003eexecute(Runnable)\u003c/code\u003e\u003c/a\u003e, if fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle. Else if fewer than maximumPoolSize threads are running, a new thread will be created to handle the request only if the queue is full. By setting corePoolSize and maximumPoolSize the same, you create a fixed-size thread pool. By setting maximumPoolSize to an essentially unbounded value such as \n  \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e, you allow the pool to accommodate an arbitrary number of concurrent tasks. Most typically, core and maximum pool sizes are set only upon construction, but they may also be changed dynamically using \n  \u003ca href\u003d\"#setCorePoolSize(int)\"\u003e\u003ccode\u003esetCorePoolSize(int)\u003c/code\u003e\u003c/a\u003e and \n  \u003ca href\u003d\"#setMaximumPoolSize(int)\"\u003e\u003ccode\u003esetMaximumPoolSize(int)\u003c/code\u003e\u003c/a\u003e. \n \u003c/dd\u003e \n \u003cdt\u003e\n  On-demand construction\n \u003c/dt\u003e \n \u003cdd\u003e\n  By default, even core threads are initially created and started only when new tasks arrive, but this can be overridden dynamically using method \n  \u003ca href\u003d\"#prestartCoreThread()\"\u003e\u003ccode\u003eprestartCoreThread()\u003c/code\u003e\u003c/a\u003e or \n  \u003ca href\u003d\"#prestartAllCoreThreads()\"\u003e\u003ccode\u003eprestartAllCoreThreads()\u003c/code\u003e\u003c/a\u003e. You probably want to prestart threads if you construct the pool with a non-empty queue. \n \u003c/dd\u003e \n \u003cdt\u003e\n  Creating new threads\n \u003c/dt\u003e \n \u003cdd\u003e\n  New threads are created using a \n  \u003ca href\u003d\"ThreadFactory.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eThreadFactory\u003c/code\u003e\u003c/a\u003e. If not otherwise specified, a \n  \u003ca href\u003d\"Executors.html#defaultThreadFactory()\"\u003e\u003ccode\u003eExecutors.defaultThreadFactory()\u003c/code\u003e\u003c/a\u003e is used, that creates threads to all be in the same \n  \u003ca href\u003d\"../../lang/ThreadGroup.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eThreadGroup\u003c/code\u003e\u003c/a\u003e and with the same \n  \u003ccode\u003eNORM_PRIORITY\u003c/code\u003e priority and non-daemon status. By supplying a different ThreadFactory, you can alter the thread\u0027s name, thread group, priority, daemon status, etc. If a \n  \u003ccode\u003eThreadFactory\u003c/code\u003e fails to create a thread when asked by returning null from \n  \u003ccode\u003enewThread\u003c/code\u003e, the executor will continue, but might not be able to execute any tasks. Threads should possess the \"modifyThread\" \n  \u003ccode\u003eRuntimePermission\u003c/code\u003e. If worker threads or other threads using the pool do not possess this permission, service may be degraded: configuration changes may not take effect in a timely manner, and a shutdown pool may remain in a state in which termination is possible but not completed.\n \u003c/dd\u003e \n \u003cdt\u003e\n  Keep-alive times\n \u003c/dt\u003e \n \u003cdd\u003e\n  If the pool currently has more than corePoolSize threads, excess threads will be terminated if they have been idle for more than the keepAliveTime (see \n  \u003ca href\u003d\"#getKeepAliveTime(java.util.concurrent.TimeUnit)\"\u003e\u003ccode\u003egetKeepAliveTime(TimeUnit)\u003c/code\u003e\u003c/a\u003e). This provides a means of reducing resource consumption when the pool is not being actively used. If the pool becomes more active later, new threads will be constructed. This parameter can also be changed dynamically using method \n  \u003ca href\u003d\"#setKeepAliveTime(long,java.util.concurrent.TimeUnit)\"\u003e\u003ccode\u003esetKeepAliveTime(long, TimeUnit)\u003c/code\u003e\u003c/a\u003e. Using a value of \n  \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e \n  \u003ca href\u003d\"TimeUnit.html#NANOSECONDS\"\u003e\u003ccode\u003eTimeUnit.NANOSECONDS\u003c/code\u003e\u003c/a\u003e effectively disables idle threads from ever terminating prior to shut down. By default, the keep-alive policy applies only when there are more than corePoolSize threads, but method \n  \u003ca href\u003d\"#allowCoreThreadTimeOut(boolean)\"\u003e\u003ccode\u003eallowCoreThreadTimeOut(boolean)\u003c/code\u003e\u003c/a\u003e can be used to apply this time-out policy to core threads as well, so long as the keepAliveTime value is non-zero. \n \u003c/dd\u003e \n \u003cdt\u003e\n  Queuing\n \u003c/dt\u003e \n \u003cdd\u003e\n  Any \n  \u003ca href\u003d\"BlockingQueue.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eBlockingQueue\u003c/code\u003e\u003c/a\u003e may be used to transfer and hold submitted tasks. The use of this queue interacts with pool sizing: \n  \u003cul\u003e \n   \u003cli\u003eIf fewer than corePoolSize threads are running, the Executor always prefers adding a new thread rather than queuing. \u003c/li\u003e\n   \u003cli\u003eIf corePoolSize or more threads are running, the Executor always prefers queuing a request rather than adding a new thread. \u003c/li\u003e\n   \u003cli\u003eIf a request cannot be queued, a new thread is created unless this would exceed maximumPoolSize, in which case, the task will be rejected. \u003c/li\u003e\n  \u003c/ul\u003e There are three general strategies for queuing: \n  \u003col\u003e \n   \u003cli\u003e\u003cem\u003e Direct handoffs.\u003c/em\u003e A good default choice for a work queue is a \u003ca href\u003d\"SynchronousQueue.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eSynchronousQueue\u003c/code\u003e\u003c/a\u003e that hands off tasks to threads without otherwise holding them. Here, an attempt to queue a task will fail if no threads are immediately available to run it, so a new thread will be constructed. This policy avoids lockups when handling sets of requests that might have internal dependencies. Direct handoffs generally require unbounded maximumPoolSizes to avoid rejection of new submitted tasks. This in turn admits the possibility of unbounded thread growth when commands continue to arrive on average faster than they can be processed. \u003c/li\u003e\n   \u003cli\u003e\u003cem\u003e Unbounded queues.\u003c/em\u003e Using an unbounded queue (for example a \u003ca href\u003d\"LinkedBlockingQueue.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eLinkedBlockingQueue\u003c/code\u003e\u003c/a\u003e without a predefined capacity) will cause new tasks to wait in the queue when all corePoolSize threads are busy. Thus, no more than corePoolSize threads will ever be created. (And the value of the maximumPoolSize therefore doesn\u0027t have any effect.) This may be appropriate when each task is completely independent of others, so tasks cannot affect each others execution; for example, in a web page server. While this style of queuing can be useful in smoothing out transient bursts of requests, it admits the possibility of unbounded work queue growth when commands continue to arrive on average faster than they can be processed. \u003c/li\u003e\n   \u003cli\u003e\u003cem\u003eBounded queues.\u003c/em\u003e A bounded queue (for example, an \u003ca href\u003d\"ArrayBlockingQueue.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e\u003c/a\u003e) helps prevent resource exhaustion when used with finite maximumPoolSizes, but can be more difficult to tune and control. Queue sizes and maximum pool sizes may be traded off for each other: Using large queues and small pools minimizes CPU usage, OS resources, and context-switching overhead, but can lead to artificially low throughput. If tasks frequently block (for example if they are I/O bound), a system may be able to schedule time for more threads than you otherwise allow. Use of small queues generally requires larger pool sizes, which keeps CPUs busier but may encounter unacceptable scheduling overhead, which also decreases throughput. \u003c/li\u003e\n  \u003c/ol\u003e \n \u003c/dd\u003e \n \u003cdt\u003e\n  Rejected tasks\n \u003c/dt\u003e \n \u003cdd\u003e\n  New tasks submitted in method \n  \u003ca href\u003d\"#execute(java.lang.Runnable)\"\u003e\u003ccode\u003eexecute(Runnable)\u003c/code\u003e\u003c/a\u003e will be \n  \u003cem\u003erejected\u003c/em\u003e when the Executor has been shut down, and also when the Executor uses finite bounds for both maximum threads and work queue capacity, and is saturated. In either case, the \n  \u003ccode\u003eexecute\u003c/code\u003e method invokes the \n  \u003ca href\u003d\"RejectedExecutionHandler.html#rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)\"\u003e\u003ccode\u003eRejectedExecutionHandler.rejectedExecution(Runnable, ThreadPoolExecutor)\u003c/code\u003e\u003c/a\u003e method of its \n  \u003ca href\u003d\"RejectedExecutionHandler.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eRejectedExecutionHandler\u003c/code\u003e\u003c/a\u003e. Four predefined handler policies are provided: \n  \u003col\u003e \n   \u003cli\u003eIn the default \u003ca href\u003d\"ThreadPoolExecutor.AbortPolicy.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eThreadPoolExecutor.AbortPolicy\u003c/code\u003e\u003c/a\u003e, the handler throws a runtime \u003ca href\u003d\"RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eRejectedExecutionException\u003c/code\u003e\u003c/a\u003e upon rejection. \u003c/li\u003e\n   \u003cli\u003eIn \u003ca href\u003d\"ThreadPoolExecutor.CallerRunsPolicy.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eThreadPoolExecutor.CallerRunsPolicy\u003c/code\u003e\u003c/a\u003e, the thread that invokes \u003ccode\u003eexecute\u003c/code\u003e itself runs the task. This provides a simple feedback control mechanism that will slow down the rate that new tasks are submitted. \u003c/li\u003e\n   \u003cli\u003eIn \u003ca href\u003d\"ThreadPoolExecutor.DiscardPolicy.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eThreadPoolExecutor.DiscardPolicy\u003c/code\u003e\u003c/a\u003e, a task that cannot be executed is simply dropped. \u003c/li\u003e\n   \u003cli\u003eIn \u003ca href\u003d\"ThreadPoolExecutor.DiscardOldestPolicy.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eThreadPoolExecutor.DiscardOldestPolicy\u003c/code\u003e\u003c/a\u003e, if the executor is not shut down, the task at the head of the work queue is dropped, and then execution is retried (which can fail again, causing this to be repeated.) \u003c/li\u003e\n  \u003c/ol\u003e It is possible to define and use other kinds of \n  \u003ca href\u003d\"RejectedExecutionHandler.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eRejectedExecutionHandler\u003c/code\u003e\u003c/a\u003e classes. Doing so requires some care especially when policies are designed to work only under particular capacity or queuing policies. \n \u003c/dd\u003e \n \u003cdt\u003e\n  Hook methods\n \u003c/dt\u003e \n \u003cdd\u003e\n  This class provides \n  \u003ccode\u003eprotected\u003c/code\u003e overridable \n  \u003ca href\u003d\"#beforeExecute(java.lang.Thread,java.lang.Runnable)\"\u003e\u003ccode\u003ebeforeExecute(Thread, Runnable)\u003c/code\u003e\u003c/a\u003e and \n  \u003ca href\u003d\"#afterExecute(java.lang.Runnable,java.lang.Throwable)\"\u003e\u003ccode\u003eafterExecute(Runnable, Throwable)\u003c/code\u003e\u003c/a\u003e methods that are called before and after execution of each task. These can be used to manipulate the execution environment; for example, reinitializing ThreadLocals, gathering statistics, or adding log entries. Additionally, method \n  \u003ca href\u003d\"#terminated()\"\u003e\u003ccode\u003eterminated()\u003c/code\u003e\u003c/a\u003e can be overridden to perform any special processing that needs to be done once the Executor has fully terminated. \n  \u003cp\u003eIf hook, callback, or BlockingQueue methods throw exceptions, internal worker threads may in turn fail, abruptly terminate, and possibly be replaced.\u003c/p\u003e\n \u003c/dd\u003e \n \u003cdt\u003e\n  Queue maintenance\n \u003c/dt\u003e \n \u003cdd\u003e\n  Method \n  \u003ca href\u003d\"#getQueue()\"\u003e\u003ccode\u003egetQueue()\u003c/code\u003e\u003c/a\u003e allows access to the work queue for purposes of monitoring and debugging. Use of this method for any other purpose is strongly discouraged. Two supplied methods, \n  \u003ca href\u003d\"#remove(java.lang.Runnable)\"\u003e\u003ccode\u003eremove(Runnable)\u003c/code\u003e\u003c/a\u003e and \n  \u003ca href\u003d\"#purge()\"\u003e\u003ccode\u003epurge()\u003c/code\u003e\u003c/a\u003e are available to assist in storage reclamation when large numbers of queued tasks become cancelled.\n \u003c/dd\u003e \n \u003cdt\u003e\n  Reclamation\n \u003c/dt\u003e \n \u003cdd\u003e\n  A pool that is no longer referenced in a program \n  \u003cem\u003eAND\u003c/em\u003e has no remaining threads may be reclaimed (garbage collected) without being explicitly shutdown. You can configure a pool to allow all unused threads to eventually die by setting appropriate keep-alive times, using a lower bound of zero core threads and/or setting \n  \u003ca href\u003d\"#allowCoreThreadTimeOut(boolean)\"\u003e\u003ccode\u003eallowCoreThreadTimeOut(boolean)\u003c/code\u003e\u003c/a\u003e. \n \u003c/dd\u003e \n\u003c/dl\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExtension example\u003c/b\u003e. Most extensions of this class override one or more of the protected hook methods. For example, here is a subclass that adds a simple pause/resume feature: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class PausableThreadPoolExecutor extends ThreadPoolExecutor {\n   private boolean isPaused;\n   private ReentrantLock pauseLock \u003d new ReentrantLock();\n   private Condition unpaused \u003d pauseLock.newCondition();\n\n   public PausableThreadPoolExecutor(...) { super(...); }\n\n   protected void beforeExecute(Thread t, Runnable r) {\n     super.beforeExecute(t, r);\n     pauseLock.lock();\n     try {\n       while (isPaused) unpaused.await();\n     } catch (InterruptedException ie) {\n       t.interrupt();\n     } finally {\n       pauseLock.unlock();\n     }\n   }\n\n   public void pause() {\n     pauseLock.lock();\n     try {\n       isPaused \u003d true;\n     } finally {\n       pauseLock.unlock();\n     }\n   }\n\n   public void resume() {\n     pauseLock.lock();\n     try {\n       isPaused \u003d false;\n       unpaused.signalAll();\n     } finally {\n       pauseLock.unlock();\n     }\n   }\n }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}