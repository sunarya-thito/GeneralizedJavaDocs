{
  "packageName": "java.util.concurrent",
  "simpleName": "Publisher",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.Flow$Subscriber",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.concurrent.Flow$Publisher",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "subscriber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subscribe",
      "comment": "Adds the given Subscriber if possible. If already subscribed, or the attempt to subscribe fails due to policy violations or errors, the Subscriber\u0027s onError method is invoked with an IllegalStateException. Otherwise, the Subscriber\u0027s onSubscribe method is invoked with a new Flow.Subscription. Subscribers may enable receiving items by invoking the request method of this Subscription, and may unsubscribe by invoking its cancel method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esubscriber\u003c/code\u003e - the subscriber"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if subscriber is null"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "java.util.concurrent.Flow$Publisher",
  "comment": "A producer of items (and related control messages) received by Subscribers. Each current \n\u003ca href\u003d\"Flow.Subscriber.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eFlow.Subscriber\u003c/code\u003e\u003c/a\u003e receives the same items (via method \n\u003ccode\u003eonNext\u003c/code\u003e) in the same order, unless drops or errors are encountered. If a Publisher encounters an error that does not allow items to be issued to a Subscriber, that Subscriber receives \n\u003ccode\u003eonError\u003c/code\u003e, and then receives no further messages. Otherwise, when it is known that no further messages will be issued to it, a subscriber receives \n\u003ccode\u003e onComplete\u003c/code\u003e. Publishers ensure that Subscriber method invocations for each subscription are strictly ordered in \n\u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e\u003ci\u003ehappens-before\u003c/i\u003e\u003c/a\u003e order. \n\u003cp\u003ePublishers may vary in policy about whether drops (failures to issue an item because of resource limitations) are treated as unrecoverable errors. Publishers may also vary about whether Subscribers receive items that were produced or available before they subscribed.\u003c/p\u003e",
  "tagMap": {}
}