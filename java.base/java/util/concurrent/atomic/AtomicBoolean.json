{
  "packageName": "java.util.concurrent.atomic",
  "simpleName": "AtomicBoolean",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "get",
      "comment": "Returns the current value, with memory effects as specified by VarHandle.getVolatile(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current value"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "expectedValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compareAndSet",
      "comment": "Atomically sets the value to newValue if the current value \u003d\u003d expectedValue, with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpectedValue\u003c/code\u003e - the expected value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful. False return indicates that the actual value was not equal to the expected value."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "expectedValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "weakCompareAndSet",
      "comment": "Possibly atomically sets the value to newValue if the current value \u003d\u003d expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...).",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          },
          "values": [
            {
              "name": "since",
              "value": "9"
            }
          ]
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/atomic/AtomicBoolean.html#weakCompareAndSetPlain(boolean,boolean)\"\u003e\u003ccode\u003eweakCompareAndSetPlain(boolean, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eexpectedValue\u003c/code\u003e - the expected value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "expectedValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "weakCompareAndSetPlain",
      "comment": "Possibly atomically sets the value to newValue if the current value \u003d\u003d expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetPlain(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpectedValue\u003c/code\u003e - the expected value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "set",
      "comment": "Sets the value to newValue, with memory effects as specified by VarHandle.setVolatile(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lazySet",
      "comment": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getAndSet",
      "comment": "Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle.getAndSet(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "the previous value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the String representation of the current value.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the String representation of the current value"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getPlain",
      "comment": "Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the value"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setPlain",
      "comment": "Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getOpaque",
      "comment": "Returns the current value, with memory effects as specified by VarHandle.getOpaque(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "return": [
          "the value"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setOpaque",
      "comment": "Sets the value to newValue, with memory effects as specified by VarHandle.setOpaque(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getAcquire",
      "comment": "Returns the current value, with memory effects as specified by VarHandle.getAcquire(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "return": [
          "the value"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setRelease",
      "comment": "Sets the value to newValue, with memory effects as specified by VarHandle.setRelease(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "expectedValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compareAndExchange",
      "comment": "Atomically sets the value to newValue if the current value, referred to as the witness value, \u003d\u003d expectedValue, with memory effects as specified by VarHandle.compareAndExchange(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpectedValue\u003c/code\u003e - the expected value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "the witness value, which will be the same as the expected value if successful"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "expectedValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compareAndExchangeAcquire",
      "comment": "Atomically sets the value to newValue if the current value, referred to as the witness value, \u003d\u003d expectedValue, with memory effects as specified by VarHandle.compareAndExchangeAcquire(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpectedValue\u003c/code\u003e - the expected value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "the witness value, which will be the same as the expected value if successful"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "expectedValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compareAndExchangeRelease",
      "comment": "Atomically sets the value to newValue if the current value, referred to as the witness value, \u003d\u003d expectedValue, with memory effects as specified by VarHandle.compareAndExchangeRelease(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpectedValue\u003c/code\u003e - the expected value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "the witness value, which will be the same as the expected value if successful"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "expectedValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "weakCompareAndSetVolatile",
      "comment": "Possibly atomically sets the value to newValue if the current value \u003d\u003d expectedValue, with memory effects as specified by VarHandle.weakCompareAndSet(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpectedValue\u003c/code\u003e - the expected value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "expectedValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "weakCompareAndSetAcquire",
      "comment": "Possibly atomically sets the value to newValue if the current value \u003d\u003d expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetAcquire(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpectedValue\u003c/code\u003e - the expected value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "expectedValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "weakCompareAndSetRelease",
      "comment": "Possibly atomically sets the value to newValue if the current value \u003d\u003d expectedValue, with memory effects as specified by VarHandle.weakCompareAndSetRelease(java.lang.Object...).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpectedValue\u003c/code\u003e - the expected value",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "initialValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new AtomicBoolean with the given initial value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einitialValue\u003c/code\u003e - the initial value"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new AtomicBoolean with initial value false.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.atomic.AtomicBoolean",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.atomic.AtomicBoolean\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}