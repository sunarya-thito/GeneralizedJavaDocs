{
  "packageName": "java.util.concurrent.atomic",
  "simpleName": "AtomicReferenceFieldUpdater",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          },
          {
            "name": "W",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "U",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "tclass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "W",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "vclass",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "fieldName",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        },
        {
          "name": "W",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newUpdater",
      "comment": "Creates and returns an updater for objects with the given field. The Class arguments are needed to check that reflective types and generic types match.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of instances of tclass",
          "\u003ccode\u003eW\u003c/code\u003e - the type of instances of vclass"
        ],
        "param": [
          "\u003ccode\u003etclass\u003c/code\u003e - the class of the objects holding the field",
          "\u003ccode\u003evclass\u003c/code\u003e - the class of the field",
          "\u003ccode\u003efieldName\u003c/code\u003e - the name of the field to be updated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the field is of the wrong type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the field is not volatile",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimeException.html\" title\u003d\"class in java.lang\"\u003eRuntimeException\u003c/a\u003e\u003c/code\u003e - with a nested reflection-based exception if the class does not hold field or is the wrong type, or the field is inaccessible to the caller according to Java language access control"
        ],
        "return": [
          "the updater"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "T",
            "type": "Variable"
          },
          "name": "obj",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "V",
            "type": "Variable"
          },
          "name": "expect",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "V",
            "type": "Variable"
          },
          "name": "update",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "compareAndSet",
      "comment": "Atomically sets the field of the given object managed by this updater to the given updated value if the current value \u003d\u003d the expected value. This method is guaranteed to be atomic with respect to other calls to compareAndSet and set, but not necessarily with respect to other changes in the field.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - An object whose field to conditionally set",
          "\u003ccode\u003eexpect\u003c/code\u003e - the expected value",
          "\u003ccode\u003eupdate\u003c/code\u003e - the new value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "T",
            "type": "Variable"
          },
          "name": "obj",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "V",
            "type": "Variable"
          },
          "name": "expect",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "V",
            "type": "Variable"
          },
          "name": "update",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "weakCompareAndSet",
      "comment": "Atomically sets the field of the given object managed by this updater to the given updated value if the current value \u003d\u003d the expected value. This method is guaranteed to be atomic with respect to other calls to compareAndSet and set, but not necessarily with respect to other changes in the field. This operation may fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to compareAndSet.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - An object whose field to conditionally set",
          "\u003ccode\u003eexpect\u003c/code\u003e - the expected value",
          "\u003ccode\u003eupdate\u003c/code\u003e - the new value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "T",
            "type": "Variable"
          },
          "name": "obj",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "V",
            "type": "Variable"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "set",
      "comment": "Sets the field of the given object managed by this updater to the given updated value. This operation is guaranteed to act as a volatile store with respect to subsequent invocations of compareAndSet.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - An object whose field to set",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "T",
            "type": "Variable"
          },
          "name": "obj",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "V",
            "type": "Variable"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "lazySet",
      "comment": "Eventually sets the field of the given object managed by this updater to the given updated value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - An object whose field to set",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "T",
            "type": "Variable"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "get",
      "comment": "Returns the current value held in the field of the given object managed by this updater.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - An object whose field to get"
        ],
        "return": [
          "the current value"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "T",
            "type": "Variable"
          },
          "name": "obj",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "V",
            "type": "Variable"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAndSet",
      "comment": "Atomically sets the field of the given object managed by this updater to the given value and returns the old value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - An object whose field to get and set",
          "\u003ccode\u003enewValue\u003c/code\u003e - the new value"
        ],
        "return": [
          "the previous value"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "T",
            "type": "Variable"
          },
          "name": "obj",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.UnaryOperator",
            "parameters": [
              {
                "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
                "name": "V",
                "type": "Variable"
              }
            ],
            "type": "Class"
          },
          "name": "updateFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getAndUpdate",
      "comment": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed by this updater with the results of applying the given function, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - An object whose field to get and set",
          "\u003ccode\u003eupdateFunction\u003c/code\u003e - a side-effect-free function"
        ],
        "return": [
          "the previous value"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "T",
            "type": "Variable"
          },
          "name": "obj",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.UnaryOperator",
            "parameters": [
              {
                "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
                "name": "V",
                "type": "Variable"
              }
            ],
            "type": "Class"
          },
          "name": "updateFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "updateAndGet",
      "comment": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed by this updater with the results of applying the given function, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - An object whose field to get and set",
          "\u003ccode\u003eupdateFunction\u003c/code\u003e - a side-effect-free function"
        ],
        "return": [
          "the updated value"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "T",
            "type": "Variable"
          },
          "name": "obj",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "V",
            "type": "Variable"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BinaryOperator",
            "parameters": [
              {
                "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
                "name": "V",
                "type": "Variable"
              }
            ],
            "type": "Class"
          },
          "name": "accumulatorFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getAndAccumulate",
      "comment": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - An object whose field to get and set",
          "\u003ccode\u003ex\u003c/code\u003e - the update value",
          "\u003ccode\u003eaccumulatorFunction\u003c/code\u003e - a side-effect-free function of two arguments"
        ],
        "return": [
          "the previous value"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "T",
            "type": "Variable"
          },
          "name": "obj",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
            "name": "V",
            "type": "Variable"
          },
          "name": "x",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BinaryOperator",
            "parameters": [
              {
                "owner": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
                "name": "V",
                "type": "Variable"
              }
            ],
            "type": "Class"
          },
          "name": "accumulatorFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "accumulateAndGet",
      "comment": "Atomically updates (with memory effects as specified by VarHandle.compareAndSet(java.lang.Object...)) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - An object whose field to get and set",
          "\u003ccode\u003ex\u003c/code\u003e - the update value",
          "\u003ccode\u003eaccumulatorFunction\u003c/code\u003e - a side-effect-free function of two arguments"
        ],
        "return": [
          "the updated value"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Protected do-nothing constructor for use by subclasses.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    },
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.concurrent.atomic.AtomicReferenceFieldUpdater",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}