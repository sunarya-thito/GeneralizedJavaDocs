{
  "packageName": "java.util.concurrent.atomic",
  "simpleName": "AtomicMarkableReference",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "java.util.concurrent.atomic.AtomicMarkableReference",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReference",
      "comment": "Returns the current value of the reference.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current value of the reference"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isMarked",
      "comment": "Returns the current value of the mark.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the current value of the mark"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.atomic.AtomicMarkableReference",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Returns the current values of both the reference and the mark. Typical usage is boolean[1] holder; ref \u003d v.get(holder); .",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emarkHolder\u003c/code\u003e - an array of size of at least one. On return, \n\u003ccode\u003emarkHolder[0]\u003c/code\u003e will hold the value of the mark."
        ],
        "return": [
          "the current value of the reference"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "weakCompareAndSet",
      "comment": "Atomically sets the value of both the reference and mark to the given update values if the current reference is \u003d\u003d to the expected reference and the current mark is equal to the expected mark. This operation may fail spuriously and does not provide ordering guarantees, so is only rarely an appropriate alternative to compareAndSet.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpectedReference\u003c/code\u003e - the expected value of the reference",
          "\u003ccode\u003enewReference\u003c/code\u003e - the new value for the reference",
          "\u003ccode\u003eexpectedMark\u003c/code\u003e - the expected value of the mark",
          "\u003ccode\u003enewMark\u003c/code\u003e - the new value for the mark"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareAndSet",
      "comment": "Atomically sets the value of both the reference and mark to the given update values if the current reference is \u003d\u003d to the expected reference and the current mark is equal to the expected mark.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpectedReference\u003c/code\u003e - the expected value of the reference",
          "\u003ccode\u003enewReference\u003c/code\u003e - the new value for the reference",
          "\u003ccode\u003eexpectedMark\u003c/code\u003e - the expected value of the mark",
          "\u003ccode\u003enewMark\u003c/code\u003e - the new value for the mark"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "set",
      "comment": "Unconditionally sets the value of both the reference and mark.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewReference\u003c/code\u003e - the new value for the reference",
          "\u003ccode\u003enewMark\u003c/code\u003e - the new value for the mark"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "attemptMark",
      "comment": "Atomically sets the value of the mark to the given update value if the current reference is \u003d\u003d to the expected reference. Any given invocation of this operation may fail (return false) spuriously, but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpectedReference\u003c/code\u003e - the expected value of the reference",
          "\u003ccode\u003enewMark\u003c/code\u003e - the new value for the mark"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.concurrent.atomic.AtomicMarkableReference",
            "name": "V",
            "type": "Variable"
          },
          "name": "initialRef",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "initialMark",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new AtomicMarkableReference with the given initial values.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einitialRef\u003c/code\u003e - the initial reference",
          "\u003ccode\u003einitialMark\u003c/code\u003e - the initial mark"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.atomic.AtomicMarkableReference",
  "comment": "An \n\u003ccode\u003eAtomicMarkableReference\u003c/code\u003e maintains an object reference along with a mark bit, that can be updated atomically. \n\u003cp\u003eImplementation note: This implementation maintains markable references by creating internal objects representing \"boxed\" [reference, boolean] pairs.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}