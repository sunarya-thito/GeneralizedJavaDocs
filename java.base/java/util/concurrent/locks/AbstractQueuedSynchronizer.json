{
  "packageName": "java.util.concurrent.locks",
  "simpleName": "AbstractQueuedSynchronizer",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.concurrent.locks.AbstractOwnableSynchronizer",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getState",
      "comment": "Returns the current value of synchronization state. This operation has memory semantics of a volatile read.",
      "annotations": [],
      "tagMap": {
        "return": [
          "current state value"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newState",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "setState",
      "comment": "Sets the value of synchronization state. This operation has memory semantics of a volatile write.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewState\u003c/code\u003e - the new state value"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "expect",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "update",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "compareAndSetState",
      "comment": "Atomically sets synchronization state to the given updated value if the current state value equals the expected value. This operation has memory semantics of a volatile read and write.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexpect\u003c/code\u003e - the expected value",
          "\u003ccode\u003eupdate\u003c/code\u003e - the new value"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful. False return indicates that the actual value was not equal to the expected value."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "tryAcquire",
      "comment": "Attempts to acquire in exclusive mode. This method should query if the state of the object permits it to be acquired in the exclusive mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. This can be used to implement method Lock.tryLock(). The default implementation throws UnsupportedOperationException.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if exclusive mode is not supported"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if successful. Upon success, this object has been acquired."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "tryRelease",
      "comment": "Attempts to set the state to reflect a release in exclusive mode. This method is always invoked by the thread performing release. The default implementation throws UnsupportedOperationException.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the release argument. This value is always the one passed to a release method, or the current state value upon entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if releasing would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if exclusive mode is not supported"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is now in a fully released state, so that any waiting threads may attempt to acquire; and \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "tryAcquireShared",
      "comment": "Attempts to acquire in shared mode. This method should query if the state of the object permits it to be acquired in the shared mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. The default implementation throws UnsupportedOperationException.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if shared mode is not supported"
        ],
        "return": [
          "a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability. (Support for three different return values enables this method to be used in contexts where acquires only sometimes act exclusively.) Upon success, this object has been acquired."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "tryReleaseShared",
      "comment": "Attempts to set the state to reflect a release in shared mode. This method is always invoked by the thread performing release. The default implementation throws UnsupportedOperationException.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the release argument. This value is always the one passed to a release method, or the current state value upon entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if releasing would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if shared mode is not supported"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this release of shared mode may permit a waiting acquire (shared or exclusive) to succeed; and \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "isHeldExclusively",
      "comment": "Returns true if synchronization is held exclusively with respect to the current (calling) thread. This method is invoked upon each call to a AbstractQueuedSynchronizer.ConditionObject method. The default implementation throws UnsupportedOperationException. This method is invoked internally only within AbstractQueuedSynchronizer.ConditionObject methods, so need not be defined if conditions are not used.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if conditions are not supported"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if synchronization is held exclusively; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "acquire",
      "comment": "Acquires in exclusive mode, ignoring interrupts. Implemented by invoking at least once tryAcquire(int), returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking tryAcquire(int) until success. This method can be used to implement method Lock.lock().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the acquire argument. This value is conveyed to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquire(int)\"\u003e\u003ccode\u003etryAcquire(int)\u003c/code\u003e\u003c/a\u003e but is otherwise uninterpreted and can represent anything you like."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "acquireInterruptibly",
      "comment": "Acquires in exclusive mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once tryAcquire(int), returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking tryAcquire(int) until success or the thread is interrupted. This method can be used to implement method Lock.lockInterruptibly().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the acquire argument. This value is conveyed to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquire(int)\"\u003e\u003ccode\u003etryAcquire(int)\u003c/code\u003e\u003c/a\u003e but is otherwise uninterpreted and can represent anything you like."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "nanosTimeout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "tryAcquireNanos",
      "comment": "Attempts to acquire in exclusive mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once tryAcquire(int), returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking tryAcquire(int) until success or the thread is interrupted or the timeout elapses. This method can be used to implement method Lock.tryLock(long, TimeUnit).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the acquire argument. This value is conveyed to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquire(int)\"\u003e\u003ccode\u003etryAcquire(int)\u003c/code\u003e\u003c/a\u003e but is otherwise uninterpreted and can represent anything you like.",
          "\u003ccode\u003enanosTimeout\u003c/code\u003e - the maximum number of nanoseconds to wait"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if acquired; \n\u003ccode\u003efalse\u003c/code\u003e if timed out"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "release",
      "comment": "Releases in exclusive mode. Implemented by unblocking one or more threads if tryRelease(int) returns true. This method can be used to implement method Lock.unlock().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the release argument. This value is conveyed to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryRelease(int)\"\u003e\u003ccode\u003etryRelease(int)\u003c/code\u003e\u003c/a\u003e but is otherwise uninterpreted and can represent anything you like."
        ],
        "return": [
          "the value returned from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryRelease(int)\"\u003e\u003ccode\u003etryRelease(int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "acquireShared",
      "comment": "Acquires in shared mode, ignoring interrupts. Implemented by first invoking at least once tryAcquireShared(int), returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking tryAcquireShared(int) until success.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the acquire argument. This value is conveyed to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquireShared(int)\"\u003e\u003ccode\u003etryAcquireShared(int)\u003c/code\u003e\u003c/a\u003e but is otherwise uninterpreted and can represent anything you like."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "acquireSharedInterruptibly",
      "comment": "Acquires in shared mode, aborting if interrupted. Implemented by first checking interrupt status, then invoking at least once tryAcquireShared(int), returning on success. Otherwise the thread is queued, possibly repeatedly blocking and unblocking, invoking tryAcquireShared(int) until success or the thread is interrupted.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the acquire argument. This value is conveyed to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquireShared(int)\"\u003e\u003ccode\u003etryAcquireShared(int)\u003c/code\u003e\u003c/a\u003e but is otherwise uninterpreted and can represent anything you like."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "nanosTimeout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "tryAcquireSharedNanos",
      "comment": "Attempts to acquire in shared mode, aborting if interrupted, and failing if the given timeout elapses. Implemented by first checking interrupt status, then invoking at least once tryAcquireShared(int), returning on success. Otherwise, the thread is queued, possibly repeatedly blocking and unblocking, invoking tryAcquireShared(int) until success or the thread is interrupted or the timeout elapses.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the acquire argument. This value is conveyed to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryAcquireShared(int)\"\u003e\u003ccode\u003etryAcquireShared(int)\u003c/code\u003e\u003c/a\u003e but is otherwise uninterpreted and can represent anything you like.",
          "\u003ccode\u003enanosTimeout\u003c/code\u003e - the maximum number of nanoseconds to wait"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if acquired; \n\u003ccode\u003efalse\u003c/code\u003e if timed out"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "arg",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "releaseShared",
      "comment": "Releases in shared mode. Implemented by unblocking one or more threads if tryReleaseShared(int) returns true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - the release argument. This value is conveyed to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryReleaseShared(int)\"\u003e\u003ccode\u003etryReleaseShared(int)\u003c/code\u003e\u003c/a\u003e but is otherwise uninterpreted and can represent anything you like."
        ],
        "return": [
          "the value returned from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedSynchronizer.html#tryReleaseShared(int)\"\u003e\u003ccode\u003etryReleaseShared(int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hasQueuedThreads",
      "comment": "Queries whether any threads are waiting to acquire. Note that because cancellations due to interrupts and timeouts may occur at any time, a true return does not guarantee that any other thread will ever acquire.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there may be other threads waiting to acquire"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hasContended",
      "comment": "Queries whether any threads have ever contended to acquire this synchronizer; that is, if an acquire method has ever blocked. In this implementation, this operation returns in constant time.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there has ever been contention"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Thread",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getFirstQueuedThread",
      "comment": "Returns the first (longest-waiting) thread in the queue, or null if no threads are currently queued. In this implementation, this operation normally returns in constant time, but may iterate upon contention if other threads are concurrently modifying the queue.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the first (longest-waiting) thread in the queue, or \n\u003ccode\u003enull\u003c/code\u003e if no threads are currently queued"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Thread",
            "type": "Class"
          },
          "name": "thread",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isQueued",
      "comment": "Returns true if the given thread is currently queued. This implementation traverses the queue to determine presence of the given thread.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ethread\u003c/code\u003e - the thread"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the thread is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given thread is on the queue"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hasQueuedPredecessors",
      "comment": "Queries whether any threads have been waiting to acquire longer than the current thread. An invocation of this method is equivalent to (but may be more efficient than):  \n getFirstQueuedThread() !\u003d Thread.currentThread()\n   \u0026\u0026 hasQueuedThreads() Note that because cancellations due to interrupts and timeouts may occur at any time, a true return does not guarantee that some other thread will acquire before the current thread. Likewise, it is possible for another thread to win a race to enqueue after this method has returned false, due to the queue being empty. This method is designed to be used by a fair synchronizer to avoid barging. Such a synchronizer\u0027s tryAcquire(int) method should return false, and its tryAcquireShared(int) method should return a negative value, if this method returns true (unless this is a reentrant acquire). For example, the tryAcquire method for a fair, reentrant, exclusive mode synchronizer might look like this:  \n protected boolean tryAcquire(int arg) {\n   if (isHeldExclusively()) {\n     // A reentrant acquire; increment hold count\n     return true;\n   } else if (hasQueuedPredecessors()) {\n     return false;\n   } else {\n     // try to acquire normally\n   }\n }",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there is a queued thread preceding the current thread, and \n\u003ccode\u003efalse\u003c/code\u003e if the current thread is at the head of the queue or the queue is empty"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getQueueLength",
      "comment": "Returns an estimate of the number of threads waiting to acquire. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring system state, not for synchronization control.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the estimated number of threads waiting to acquire"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.lang.Thread",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getQueuedThreads",
      "comment": "Returns a collection containing threads that may be waiting to acquire. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the collection of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.lang.Thread",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getExclusiveQueuedThreads",
      "comment": "Returns a collection containing threads that may be waiting to acquire in exclusive mode. This has the same properties as getQueuedThreads() except that it only returns those threads waiting due to an exclusive acquire.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the collection of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.lang.Thread",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getSharedQueuedThreads",
      "comment": "Returns a collection containing threads that may be waiting to acquire in shared mode. This has the same properties as getQueuedThreads() except that it only returns those threads waiting due to a shared acquire.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the collection of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string identifying this synchronizer, as well as its state. The state, in brackets, includes the String \"State \u003d\" followed by the current value of getState(), and either \"nonempty\" or \"empty\" depending on whether the queue is empty.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string identifying this synchronizer, as well as its state"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject",
            "type": "Class"
          },
          "name": "condition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "owns",
      "comment": "Queries whether the given ConditionObject uses this synchronizer as its lock.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003econdition\u003c/code\u003e - the condition"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the condition is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if owned"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject",
            "type": "Class"
          },
          "name": "condition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hasWaiters",
      "comment": "Queries whether any threads are waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, a true return does not guarantee that a future signal will awaken any threads. This method is designed primarily for use in monitoring of the system state.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003econdition\u003c/code\u003e - the condition"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if exclusive synchronization is not held",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given condition is not associated with this synchronizer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the condition is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there are any waiting threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject",
            "type": "Class"
          },
          "name": "condition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getWaitQueueLength",
      "comment": "Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring system state, not for synchronization control.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003econdition\u003c/code\u003e - the condition"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if exclusive synchronization is not held",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given condition is not associated with this synchronizer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the condition is null"
        ],
        "return": [
          "the estimated number of waiting threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.lang.Thread",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject",
            "type": "Class"
          },
          "name": "condition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getWaitingThreads",
      "comment": "Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003econdition\u003c/code\u003e - the condition"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if exclusive synchronization is not held",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given condition is not associated with this synchronizer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the condition is null"
        ],
        "return": [
          "the collection of threads"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a new AbstractQueuedSynchronizer instance with initial synchronization state of zero.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.concurrent.locks.AbstractQueuedSynchronizer",
  "comment": "Provides a framework for implementing blocking locks and related synchronizers (semaphores, events, etc) that rely on first-in-first-out (FIFO) wait queues. This class is designed to be a useful basis for most kinds of synchronizers that rely on a single atomic \n\u003ccode\u003eint\u003c/code\u003e value to represent state. Subclasses must define the protected methods that change this state, and which define what that state means in terms of this object being acquired or released. Given these, the other methods in this class carry out all queuing and blocking mechanics. Subclasses can maintain other state fields, but only the atomically updated \n\u003ccode\u003eint\u003c/code\u003e value manipulated using methods \n\u003ca href\u003d\"#getState()\"\u003e\u003ccode\u003egetState()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"#setState(int)\"\u003e\u003ccode\u003esetState(int)\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"#compareAndSetState(int,int)\"\u003e\u003ccode\u003ecompareAndSetState(int, int)\u003c/code\u003e\u003c/a\u003e is tracked with respect to synchronization. \n\u003cp\u003eSubclasses should be defined as non-public internal helper classes that are used to implement the synchronization properties of their enclosing class. Class \u003ccode\u003eAbstractQueuedSynchronizer\u003c/code\u003e does not implement any synchronization interface. Instead it defines methods such as \u003ca href\u003d\"#acquireInterruptibly(int)\"\u003e\u003ccode\u003eacquireInterruptibly(int)\u003c/code\u003e\u003c/a\u003e that can be invoked as appropriate by concrete locks and related synchronizers to implement their public methods. \u003c/p\u003e\n\u003cp\u003eThis class supports either or both a default \u003cem\u003eexclusive\u003c/em\u003e mode and a \u003cem\u003eshared\u003c/em\u003e mode. When acquired in exclusive mode, attempted acquires by other threads cannot succeed. Shared mode acquires by multiple threads may (but need not) succeed. This class does not \"understand\" these differences except in the mechanical sense that when a shared mode acquire succeeds, the next waiting thread (if one exists) must also determine whether it can acquire as well. Threads waiting in the different modes share the same FIFO queue. Usually, implementation subclasses support only one of these modes, but both can come into play for example in a \u003ca href\u003d\"ReadWriteLock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eReadWriteLock\u003c/code\u003e\u003c/a\u003e. Subclasses that support only exclusive or only shared modes need not define the methods supporting the unused mode. \u003c/p\u003e\n\u003cp\u003eThis class defines a nested \u003ca href\u003d\"AbstractQueuedSynchronizer.ConditionObject.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eAbstractQueuedSynchronizer.ConditionObject\u003c/code\u003e\u003c/a\u003e class that can be used as a \u003ca href\u003d\"Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e implementation by subclasses supporting exclusive mode for which method \u003ca href\u003d\"#isHeldExclusively()\"\u003e\u003ccode\u003eisHeldExclusively()\u003c/code\u003e\u003c/a\u003e reports whether synchronization is exclusively held with respect to the current thread, method \u003ca href\u003d\"#release(int)\"\u003e\u003ccode\u003erelease(int)\u003c/code\u003e\u003c/a\u003e invoked with the current \u003ca href\u003d\"#getState()\"\u003e\u003ccode\u003egetState()\u003c/code\u003e\u003c/a\u003e value fully releases this object, and \u003ccode\u003eacquire(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node, int, boolean, boolean, boolean, long)\u003c/code\u003e, given this saved state value, eventually restores this object to its previous acquired state. No \u003ccode\u003eAbstractQueuedSynchronizer\u003c/code\u003e method otherwise creates such a condition, so if this constraint cannot be met, do not use it. The behavior of \u003ca href\u003d\"AbstractQueuedSynchronizer.ConditionObject.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eAbstractQueuedSynchronizer.ConditionObject\u003c/code\u003e\u003c/a\u003e depends of course on the semantics of its synchronizer implementation. \u003c/p\u003e\n\u003cp\u003eThis class provides inspection, instrumentation, and monitoring methods for the internal queue, as well as similar methods for condition objects. These can be exported as desired into classes using an \u003ccode\u003eAbstractQueuedSynchronizer\u003c/code\u003e for their synchronization mechanics. \u003c/p\u003e\n\u003cp\u003eSerialization of this class stores only the underlying atomic integer maintaining state, so deserialized objects have empty thread queues. Typical subclasses requiring serializability will define a \u003ccode\u003ereadObject\u003c/code\u003e method that restores this to a known initial state upon deserialization. \u003c/p\u003e\n\u003ch2\u003eUsage\u003c/h2\u003e \n\u003cp\u003eTo use this class as the basis of a synchronizer, redefine the following methods, as applicable, by inspecting and/or modifying the synchronization state using \u003ca href\u003d\"#getState()\"\u003e\u003ccode\u003egetState()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#setState(int)\"\u003e\u003ccode\u003esetState(int)\u003c/code\u003e\u003c/a\u003e and/or \u003ca href\u003d\"#compareAndSetState(int,int)\"\u003e\u003ccode\u003ecompareAndSetState(int, int)\u003c/code\u003e\u003c/a\u003e: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ca href\u003d\"#tryAcquire(int)\"\u003e\u003ccode\u003etryAcquire(int)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#tryRelease(int)\"\u003e\u003ccode\u003etryRelease(int)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#tryAcquireShared(int)\"\u003e\u003ccode\u003etryAcquireShared(int)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#tryReleaseShared(int)\"\u003e\u003ccode\u003etryReleaseShared(int)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"#isHeldExclusively()\"\u003e\u003ccode\u003eisHeldExclusively()\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e Each of these methods by default throws \n\u003ca href\u003d\"../../../lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e. Implementations of these methods must be internally thread-safe, and should in general be short and not block. Defining these methods is the \n\u003cem\u003eonly\u003c/em\u003e supported means of using this class. All other methods are declared \n\u003ccode\u003efinal\u003c/code\u003e because they cannot be independently varied. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eYou may also find the inherited methods from \u003ca href\u003d\"AbstractOwnableSynchronizer.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eAbstractOwnableSynchronizer\u003c/code\u003e\u003c/a\u003e useful to keep track of the thread owning an exclusive synchronizer. You are encouraged to use them -- this enables monitoring and diagnostic tools to assist users in determining which threads hold locks. \u003c/p\u003e\n\u003cp\u003eEven though this class is based on an internal FIFO queue, it does not automatically enforce FIFO acquisition policies. The core of exclusive synchronization takes the form: \u003c/p\u003e\n\u003cpre\u003e Acquire:\n     while (!tryAcquire(arg)) {\n        \u003cem\u003eenqueue thread if it is not already queued\u003c/em\u003e;\n        \u003cem\u003epossibly block current thread\u003c/em\u003e;\n     }\n\n Release:\n     if (tryRelease(arg))\n        \u003cem\u003eunblock the first queued thread\u003c/em\u003e;\n \u003c/pre\u003e (Shared mode is similar but may involve cascading signals.) \n\u003cp\u003e\u003c/p\u003e\n\u003cp id\u003d\"barging\"\u003eBecause checks in acquire are invoked before enqueuing, a newly acquiring thread may \u003cem\u003ebarge\u003c/em\u003e ahead of others that are blocked and queued. However, you can, if desired, define \u003ccode\u003etryAcquire\u003c/code\u003e and/or \u003ccode\u003etryAcquireShared\u003c/code\u003e to disable barging by internally invoking one or more of the inspection methods, thereby providing a \u003cem\u003efair\u003c/em\u003e FIFO acquisition order. In particular, most fair synchronizers can define \u003ccode\u003etryAcquire\u003c/code\u003e to return \u003ccode\u003efalse\u003c/code\u003e if \u003ca href\u003d\"#hasQueuedPredecessors()\"\u003e\u003ccode\u003ehasQueuedPredecessors()\u003c/code\u003e\u003c/a\u003e (a method specifically designed to be used by fair synchronizers) returns \u003ccode\u003etrue\u003c/code\u003e. Other variations are possible. \u003c/p\u003e\n\u003cp\u003eThroughput and scalability are generally highest for the default barging (also known as \u003cem\u003egreedy\u003c/em\u003e, \u003cem\u003erenouncement\u003c/em\u003e, and \u003cem\u003econvoy-avoidance\u003c/em\u003e) strategy. While this is not guaranteed to be fair or starvation-free, earlier queued threads are allowed to recontend before later queued threads, and each recontention has an unbiased chance to succeed against incoming threads. Also, while acquires do not \"spin\" in the usual sense, they may perform multiple invocations of \u003ccode\u003etryAcquire\u003c/code\u003e interspersed with other computations before blocking. This gives most of the benefits of spins when exclusive synchronization is only briefly held, without most of the liabilities when it isn\u0027t. If so desired, you can augment this by preceding calls to acquire methods with \"fast-path\" checks, possibly prechecking \u003ca href\u003d\"#hasContended()\"\u003e\u003ccode\u003ehasContended()\u003c/code\u003e\u003c/a\u003e and/or \u003ca href\u003d\"#hasQueuedThreads()\"\u003e\u003ccode\u003ehasQueuedThreads()\u003c/code\u003e\u003c/a\u003e to only do so if the synchronizer is likely not to be contended. \u003c/p\u003e\n\u003cp\u003eThis class provides an efficient and scalable basis for synchronization in part by specializing its range of use to synchronizers that can rely on \u003ccode\u003eint\u003c/code\u003e state, acquire, and release parameters, and an internal FIFO wait queue. When this does not suffice, you can build synchronizers from a lower level using \u003ca href\u003d\"../atomic/package-summary.html\"\u003e\u003ccode\u003eatomic\u003c/code\u003e\u003c/a\u003e classes, your own custom \u003ca href\u003d\"../../Queue.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eQueue\u003c/code\u003e\u003c/a\u003e classes, and \u003ca href\u003d\"LockSupport.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eLockSupport\u003c/code\u003e\u003c/a\u003e blocking support. \u003c/p\u003e\n\u003ch2\u003eUsage Examples\u003c/h2\u003e \n\u003cp\u003eHere is a non-reentrant mutual exclusion lock class that uses the value zero to represent the unlocked state, and one to represent the locked state. While a non-reentrant lock does not strictly require recording of the current owner thread, this class does so anyway to make usage easier to monitor. It also supports conditions and exposes some instrumentation methods: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class Mutex implements Lock, java.io.Serializable {\n\n   // Our internal helper class\n   private static class Sync extends AbstractQueuedSynchronizer {\n     // Acquires the lock if state is zero\n     public boolean tryAcquire(int acquires) {\n       assert acquires \u003d\u003d 1; // Otherwise unused\n       if (compareAndSetState(0, 1)) {\n         setExclusiveOwnerThread(Thread.currentThread());\n         return true;\n       }\n       return false;\n     }\n\n     // Releases the lock by setting state to zero\n     protected boolean tryRelease(int releases) {\n       assert releases \u003d\u003d 1; // Otherwise unused\n       if (!isHeldExclusively())\n         throw new IllegalMonitorStateException();\n       setExclusiveOwnerThread(null);\n       setState(0);\n       return true;\n     }\n\n     // Reports whether in locked state\n     public boolean isLocked() {\n       return getState() !\u003d 0;\n     }\n\n     public boolean isHeldExclusively() {\n       // a data race, but safe due to out-of-thin-air guarantees\n       return getExclusiveOwnerThread() \u003d\u003d Thread.currentThread();\n     }\n\n     // Provides a Condition\n     public Condition newCondition() {\n       return new ConditionObject();\n     }\n\n     // Deserializes properly\n     private void readObject(ObjectInputStream s)\n         throws IOException, ClassNotFoundException {\n       s.defaultReadObject();\n       setState(0); // reset to unlocked state\n     }\n   }\n\n   // The sync object does all the hard work. We just forward to it.\n   private final Sync sync \u003d new Sync();\n\n   public void lock()              { sync.acquire(1); }\n   public boolean tryLock()        { return sync.tryAcquire(1); }\n   public void unlock()            { sync.release(1); }\n   public Condition newCondition() { return sync.newCondition(); }\n   public boolean isLocked()       { return sync.isLocked(); }\n   public boolean isHeldByCurrentThread() {\n     return sync.isHeldExclusively();\n   }\n   public boolean hasQueuedThreads() {\n     return sync.hasQueuedThreads();\n   }\n   public void lockInterruptibly() throws InterruptedException {\n     sync.acquireInterruptibly(1);\n   }\n   public boolean tryLock(long timeout, TimeUnit unit)\n       throws InterruptedException {\n     return sync.tryAcquireNanos(1, unit.toNanos(timeout));\n   }\n }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eHere is a latch class that is like a \u003ca href\u003d\"../CountDownLatch.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eCountDownLatch\u003c/code\u003e\u003c/a\u003e except that it only requires a single \u003ccode\u003esignal\u003c/code\u003e to fire. Because a latch is non-exclusive, it uses the \u003ccode\u003eshared\u003c/code\u003e acquire and release methods. \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class BooleanLatch {\n\n   private static class Sync extends AbstractQueuedSynchronizer {\n     boolean isSignalled() { return getState() !\u003d 0; }\n\n     protected int tryAcquireShared(int ignore) {\n       return isSignalled() ? 1 : -1;\n     }\n\n     protected boolean tryReleaseShared(int ignore) {\n       setState(1);\n       return true;\n     }\n   }\n\n   private final Sync sync \u003d new Sync();\n   public boolean isSignalled() { return sync.isSignalled(); }\n   public void signal()         { sync.releaseShared(1); }\n   public void await() throws InterruptedException {\n     sync.acquireSharedInterruptibly(1);\n   }\n }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.locks.AbstractQueuedSynchronizer\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}