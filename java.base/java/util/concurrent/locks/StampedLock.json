{
  "packageName": "java.util.concurrent.locks",
  "simpleName": "StampedLock",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "writeLock",
      "comment": "Exclusively acquires the lock, blocking if necessary until available.",
      "tagMap": {
        "return": [
          "a write stamp that can be used to unlock or convert mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryWriteLock",
      "comment": "Exclusively acquires the lock if it is immediately available.",
      "tagMap": {
        "return": [
          "a write stamp that can be used to unlock or convert mode, or zero if the lock is not available"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "time"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryWriteLock",
      "comment": "Exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted. Behavior under timeout and interruption matches that specified for method Lock.tryLock(long,TimeUnit).",
      "tagMap": {
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - the maximum time to wait for the lock",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the \n\u003ccode\u003etime\u003c/code\u003e argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted before acquiring the lock"
        ],
        "return": [
          "a write stamp that can be used to unlock or convert mode, or zero if the lock is not available"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "writeLockInterruptibly",
      "comment": "Exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted. Behavior under interruption matches that specified for method Lock.lockInterruptibly().",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted before acquiring the lock"
        ],
        "return": [
          "a write stamp that can be used to unlock or convert mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readLock",
      "comment": "Non-exclusively acquires the lock, blocking if necessary until available.",
      "tagMap": {
        "return": [
          "a read stamp that can be used to unlock or convert mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryReadLock",
      "comment": "Non-exclusively acquires the lock if it is immediately available.",
      "tagMap": {
        "return": [
          "a read stamp that can be used to unlock or convert mode, or zero if the lock is not available"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "time"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryReadLock",
      "comment": "Non-exclusively acquires the lock if it is available within the given time and the current thread has not been interrupted. Behavior under timeout and interruption matches that specified for method Lock.tryLock(long,TimeUnit).",
      "tagMap": {
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - the maximum time to wait for the lock",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the \n\u003ccode\u003etime\u003c/code\u003e argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted before acquiring the lock"
        ],
        "return": [
          "a read stamp that can be used to unlock or convert mode, or zero if the lock is not available"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readLockInterruptibly",
      "comment": "Non-exclusively acquires the lock, blocking if necessary until available or the current thread is interrupted. Behavior under interruption matches that specified for method Lock.lockInterruptibly().",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted before acquiring the lock"
        ],
        "return": [
          "a read stamp that can be used to unlock or convert mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryOptimisticRead",
      "comment": "Returns a stamp that can later be validated, or zero if exclusively locked.",
      "tagMap": {
        "return": [
          "a valid optimistic read stamp, or zero if exclusively locked"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stamp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "validate",
      "comment": "Returns true if the lock has not been exclusively acquired since issuance of the given stamp. Always returns false if the stamp is zero. Always returns true if the stamp represents a currently held lock. Invoking this method with a value not obtained from tryOptimisticRead() or a locking method for this lock has no defined effect or result.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estamp\u003c/code\u003e - a stamp"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the lock has not been exclusively acquired since issuance of the given stamp; else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stamp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unlockWrite",
      "comment": "If the lock state matches the given stamp, releases the exclusive lock.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estamp\u003c/code\u003e - a stamp returned by a write-lock operation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if the stamp does not match the current state of this lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stamp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unlockRead",
      "comment": "If the lock state matches the given stamp, releases the non-exclusive lock.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estamp\u003c/code\u003e - a stamp returned by a read-lock operation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if the stamp does not match the current state of this lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stamp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unlock",
      "comment": "If the lock state matches the given stamp, releases the corresponding mode of the lock.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estamp\u003c/code\u003e - a stamp returned by a lock operation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if the stamp does not match the current state of this lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stamp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryConvertToWriteLock",
      "comment": "If the lock state matches the given stamp, atomically performs one of the following actions. If the stamp represents holding a write lock, returns it. Or, if a read lock, if the write lock is available, releases the read lock and returns a write stamp. Or, if an optimistic read, returns a write stamp only if immediately available. This method returns zero in all other cases.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estamp\u003c/code\u003e - a stamp"
        ],
        "return": [
          "a valid write stamp, or zero on failure"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stamp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryConvertToReadLock",
      "comment": "If the lock state matches the given stamp, atomically performs one of the following actions. If the stamp represents holding a write lock, releases it and obtains a read lock. Or, if a read lock, returns it. Or, if an optimistic read, acquires a read lock and returns a read stamp only if immediately available. This method returns zero in all other cases.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estamp\u003c/code\u003e - a stamp"
        ],
        "return": [
          "a valid read stamp, or zero on failure"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stamp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryConvertToOptimisticRead",
      "comment": "If the lock state matches the given stamp then, atomically, if the stamp represents holding a lock, releases it and returns an observation stamp. Or, if an optimistic read, returns it if validated. This method returns zero in all other cases, and so may be useful as a form of \"tryUnlock\".",
      "tagMap": {
        "param": [
          "\u003ccode\u003estamp\u003c/code\u003e - a stamp"
        ],
        "return": [
          "a valid optimistic read stamp, or zero on failure"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryUnlockWrite",
      "comment": "Releases the write lock if it is held, without requiring a stamp value. This method may be useful for recovery after errors.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the lock was held, else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "tryUnlockRead",
      "comment": "Releases one hold of the read lock if it is held, without requiring a stamp value. This method may be useful for recovery after errors.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the read lock was held, else false"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isWriteLocked",
      "comment": "Returns true if the lock is currently held exclusively.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the lock is currently held exclusively"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isReadLocked",
      "comment": "Returns true if the lock is currently held non-exclusively.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the lock is currently held non-exclusively"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stamp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isWriteLockStamp",
      "comment": "Tells whether a stamp represents holding a lock exclusively. This method may be useful in conjunction with tryConvertToWriteLock(long), for example:  \n long stamp \u003d sl.tryOptimisticRead();\n try {\n   ...\n   stamp \u003d sl.tryConvertToWriteLock(stamp);\n   ...\n } finally {\n   if (StampedLock.isWriteLockStamp(stamp))\n     sl.unlockWrite(stamp);\n }",
      "tagMap": {
        "param": [
          "\u003ccode\u003estamp\u003c/code\u003e - a stamp returned by a previous StampedLock operation"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the stamp was returned by a successful write-lock operation"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stamp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isReadLockStamp",
      "comment": "Tells whether a stamp represents holding a lock non-exclusively. This method may be useful in conjunction with tryConvertToReadLock(long), for example:  \n long stamp \u003d sl.tryOptimisticRead();\n try {\n   ...\n   stamp \u003d sl.tryConvertToReadLock(stamp);\n   ...\n } finally {\n   if (StampedLock.isReadLockStamp(stamp))\n     sl.unlockRead(stamp);\n }",
      "tagMap": {
        "param": [
          "\u003ccode\u003estamp\u003c/code\u003e - a stamp returned by a previous StampedLock operation"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the stamp was returned by a successful read-lock operation"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stamp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isLockStamp",
      "comment": "Tells whether a stamp represents holding a lock. This method may be useful in conjunction with tryConvertToReadLock(long) and tryConvertToWriteLock(long), for example:  \n long stamp \u003d sl.tryOptimisticRead();\n try {\n   ...\n   stamp \u003d sl.tryConvertToReadLock(stamp);\n   ...\n   stamp \u003d sl.tryConvertToWriteLock(stamp);\n   ...\n } finally {\n   if (StampedLock.isLockStamp(stamp))\n     sl.unlock(stamp);\n }",
      "tagMap": {
        "param": [
          "\u003ccode\u003estamp\u003c/code\u003e - a stamp returned by a previous StampedLock operation"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the stamp was returned by a successful read-lock or write-lock operation"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "stamp"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isOptimisticReadStamp",
      "comment": "Tells whether a stamp represents a successful optimistic read.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estamp\u003c/code\u003e - a stamp returned by a previous StampedLock operation"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the stamp was returned by a successful optimistic read operation, that is, a non-zero return from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/StampedLock.html#tryOptimisticRead()\"\u003e\u003ccode\u003etryOptimisticRead()\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/StampedLock.html#tryConvertToOptimisticRead(long)\"\u003e\u003ccode\u003etryConvertToOptimisticRead(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReadLockCount",
      "comment": "Queries the number of read locks held for this lock. This method is designed for use in monitoring system state, not for synchronization control.",
      "tagMap": {
        "return": [
          "the number of read locks held"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string identifying this lock, as well as its lock state. The state, in brackets, includes the String \"Unlocked\" or the String \"Write-locked\" or the String \"Read-locks:\" followed by the current number of read-locks held.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string identifying this lock, as well as its lock state"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.locks.Lock",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "asReadLock",
      "comment": "Returns a plain Lock view of this StampedLock in which the Lock.lock() method is mapped to readLock(), and similarly for other methods. The returned Lock does not support a Condition; method Lock.newCondition() throws UnsupportedOperationException.",
      "tagMap": {
        "return": [
          "the lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.locks.Lock",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "asWriteLock",
      "comment": "Returns a plain Lock view of this StampedLock in which the Lock.lock() method is mapped to writeLock(), and similarly for other methods. The returned Lock does not support a Condition; method Lock.newCondition() throws UnsupportedOperationException.",
      "tagMap": {
        "return": [
          "the lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.locks.ReadWriteLock",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "asReadWriteLock",
      "comment": "Returns a ReadWriteLock view of this StampedLock in which the ReadWriteLock.readLock() method is mapped to asReadLock(), and ReadWriteLock.writeLock() to asWriteLock().",
      "tagMap": {
        "return": [
          "the lock"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new lock, initially in unlocked state.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.locks.StampedLock",
  "comment": "A capability-based lock with three modes for controlling read/write access. The state of a StampedLock consists of a version and mode. Lock acquisition methods return a stamp that represents and controls access with respect to a lock state; \"try\" versions of these methods may instead return the special value zero to represent failure to acquire access. Lock release and conversion methods require stamps as arguments, and fail if they do not match the state of the lock. The three modes are: \n\u003cul\u003e \n \u003cli\u003e\u003cb\u003eWriting.\u003c/b\u003e Method \u003ca href\u003d\"#writeLock()\"\u003e\u003ccode\u003ewriteLock()\u003c/code\u003e\u003c/a\u003e possibly blocks waiting for exclusive access, returning a stamp that can be used in method \u003ca href\u003d\"#unlockWrite(long)\"\u003e\u003ccode\u003eunlockWrite(long)\u003c/code\u003e\u003c/a\u003e to release the lock. Untimed and timed versions of \u003ccode\u003etryWriteLock\u003c/code\u003e are also provided. When the lock is held in write mode, no read locks may be obtained, and all optimistic read validations will fail. \u003c/li\u003e\n \u003cli\u003e\u003cb\u003eReading.\u003c/b\u003e Method \u003ca href\u003d\"#readLock()\"\u003e\u003ccode\u003ereadLock()\u003c/code\u003e\u003c/a\u003e possibly blocks waiting for non-exclusive access, returning a stamp that can be used in method \u003ca href\u003d\"#unlockRead(long)\"\u003e\u003ccode\u003eunlockRead(long)\u003c/code\u003e\u003c/a\u003e to release the lock. Untimed and timed versions of \u003ccode\u003etryReadLock\u003c/code\u003e are also provided. \u003c/li\u003e\n \u003cli\u003e\u003cb\u003eOptimistic Reading.\u003c/b\u003e Method \u003ca href\u003d\"#tryOptimisticRead()\"\u003e\u003ccode\u003etryOptimisticRead()\u003c/code\u003e\u003c/a\u003e returns a non-zero stamp only if the lock is not currently held in write mode. Method \u003ca href\u003d\"#validate(long)\"\u003e\u003ccode\u003evalidate(long)\u003c/code\u003e\u003c/a\u003e returns true if the lock has not been acquired in write mode since obtaining a given stamp, in which case all actions prior to the most recent write lock release happen-before actions following the call to \u003ccode\u003etryOptimisticRead\u003c/code\u003e. This mode can be thought of as an extremely weak version of a read-lock, that can be broken by a writer at any time. The use of optimistic read mode for short read-only code segments often reduces contention and improves throughput. However, its use is inherently fragile. Optimistic read sections should only read fields and hold them in local variables for later use after validation. Fields read while in optimistic read mode may be wildly inconsistent, so usage applies only when you are familiar enough with data representations to check consistency and/or repeatedly invoke method \u003ccode\u003evalidate()\u003c/code\u003e. For example, such steps are typically required when first reading an object or array reference, and then accessing one of its fields, elements or methods. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003eThis class also supports methods that conditionally provide conversions across the three modes. For example, method \u003ca href\u003d\"#tryConvertToWriteLock(long)\"\u003e\u003ccode\u003etryConvertToWriteLock(long)\u003c/code\u003e\u003c/a\u003e attempts to \"upgrade\" a mode, returning a valid write stamp if (1) already in writing mode (2) in reading mode and there are no other readers or (3) in optimistic read mode and the lock is available. The forms of these methods are designed to help reduce some of the code bloat that otherwise occurs in retry-based designs. \u003c/p\u003e\n\u003cp\u003eStampedLocks are designed for use as internal utilities in the development of thread-safe components. Their use relies on knowledge of the internal properties of the data, objects, and methods they are protecting. They are not reentrant, so locked bodies should not call other unknown methods that may try to re-acquire locks (although you may pass a stamp to other methods that can use or convert it). The use of read lock modes relies on the associated code sections being side-effect-free. Unvalidated optimistic read sections cannot call methods that are not known to tolerate potential inconsistencies. Stamps use finite representations, and are not cryptographically secure (i.e., a valid stamp may be guessable). Stamp values may recycle after (no sooner than) one year of continuous operation. A stamp held without use or validation for longer than this period may fail to validate correctly. StampedLocks are serializable, but always deserialize into initial unlocked state, so they are not useful for remote locking. \u003c/p\u003e\n\u003cp\u003eLike \u003ca href\u003d\"../Semaphore.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eSemaphore\u003c/code\u003e\u003c/a\u003e, but unlike most \u003ca href\u003d\"Lock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eLock\u003c/code\u003e\u003c/a\u003e implementations, StampedLocks have no notion of ownership. Locks acquired in one thread can be released or converted in another. \u003c/p\u003e\n\u003cp\u003eThe scheduling policy of StampedLock does not consistently prefer readers over writers or vice versa. All \"try\" methods are best-effort and do not necessarily conform to any scheduling or fairness policy. A zero return from any \"try\" method for acquiring or converting locks does not carry any information about the state of the lock; a subsequent invocation may succeed. \u003c/p\u003e\n\u003cp\u003eBecause it supports coordinated usage across multiple lock modes, this class does not directly implement the \u003ca href\u003d\"Lock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eLock\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"ReadWriteLock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eReadWriteLock\u003c/code\u003e\u003c/a\u003e interfaces. However, a StampedLock may be viewed \u003ca href\u003d\"#asReadLock()\"\u003e\u003ccode\u003easReadLock()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#asWriteLock()\"\u003e\u003ccode\u003easWriteLock()\u003c/code\u003e\u003c/a\u003e, or \u003ca href\u003d\"#asReadWriteLock()\"\u003e\u003ccode\u003easReadWriteLock()\u003c/code\u003e\u003c/a\u003e in applications requiring only the associated set of functionality. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eMemory Synchronization.\u003c/b\u003e Methods with the effect of successfully locking in any mode have the same memory synchronization effects as a \u003cem\u003eLock\u003c/em\u003e action, as described in Chapter 17 of \u003ccite\u003eThe Java Language Specification\u003c/cite\u003e. Methods successfully unlocking in write mode have the same memory synchronization effects as an \u003cem\u003eUnlock\u003c/em\u003e action. In optimistic read usages, actions prior to the most recent write mode unlock action are guaranteed to happen-before those following a tryOptimisticRead only if a later validate returns true; otherwise there is no guarantee that the reads between tryOptimisticRead and validate obtain a consistent snapshot. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eSample Usage.\u003c/b\u003e The following illustrates some usage idioms in a class that maintains simple two-dimensional points. The sample code illustrates some try/catch conventions even though they are not strictly needed here because no exceptions can occur in their bodies. \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class Point {\n   private double x, y;\n   private final StampedLock sl \u003d new StampedLock();\n\n   // an exclusively locked method\n   void move(double deltaX, double deltaY) {\n     long stamp \u003d sl.writeLock();\n     try {\n       x +\u003d deltaX;\n       y +\u003d deltaY;\n     } finally {\n       sl.unlockWrite(stamp);\n     }\n   }\n\n   // a read-only method\n   // upgrade from optimistic read to read lock\n   double distanceFromOrigin() {\n     long stamp \u003d sl.tryOptimisticRead();\n     try {\n       retryHoldingLock: for (;; stamp \u003d sl.readLock()) {\n         if (stamp \u003d\u003d 0L)\n           continue retryHoldingLock;\n         // possibly racy reads\n         double currentX \u003d x;\n         double currentY \u003d y;\n         if (!sl.validate(stamp))\n           continue retryHoldingLock;\n         return Math.hypot(currentX, currentY);\n       }\n     } finally {\n       if (StampedLock.isReadLockStamp(stamp))\n         sl.unlockRead(stamp);\n     }\n   }\n\n   // upgrade from optimistic read to write lock\n   void moveIfAtOrigin(double newX, double newY) {\n     long stamp \u003d sl.tryOptimisticRead();\n     try {\n       retryHoldingLock: for (;; stamp \u003d sl.writeLock()) {\n         if (stamp \u003d\u003d 0L)\n           continue retryHoldingLock;\n         // possibly racy reads\n         double currentX \u003d x;\n         double currentY \u003d y;\n         if (!sl.validate(stamp))\n           continue retryHoldingLock;\n         if (currentX !\u003d 0.0 || currentY !\u003d 0.0)\n           break;\n         stamp \u003d sl.tryConvertToWriteLock(stamp);\n         if (stamp \u003d\u003d 0L)\n           continue retryHoldingLock;\n         // exclusive access\n         x \u003d newX;\n         y \u003d newY;\n         return;\n       }\n     } finally {\n       if (StampedLock.isWriteLockStamp(stamp))\n         sl.unlockWrite(stamp);\n     }\n   }\n\n   // Upgrade read lock to write lock\n   void moveIfAtOrigin(double newX, double newY) {\n     long stamp \u003d sl.readLock();\n     try {\n       while (x \u003d\u003d 0.0 \u0026amp;\u0026amp; y \u003d\u003d 0.0) {\n         long ws \u003d sl.tryConvertToWriteLock(stamp);\n         if (ws !\u003d 0L) {\n           stamp \u003d ws;\n           x \u003d newX;\n           y \u003d newY;\n           break;\n         }\n         else {\n           sl.unlockRead(stamp);\n           stamp \u003d sl.writeLock();\n         }\n       }\n     } finally {\n       sl.unlock(stamp);\n     }\n   }\n }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-17.html#jls-17.4\"\u003e17.4 Memory Model\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.locks.StampedLock\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}