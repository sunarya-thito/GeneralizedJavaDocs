{
  "packageName": "java.util.concurrent.locks",
  "simpleName": "ReentrantReadWriteLock",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "writeLock",
      "comment": "Description copied from interface: ReadWriteLock",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html#writeLock()\"\u003ewriteLock\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003eReadWriteLock\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the lock used for writing"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readLock",
      "comment": "Description copied from interface: ReadWriteLock",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html#readLock()\"\u003ereadLock\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003eReadWriteLock\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the lock used for reading"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isFair",
      "comment": "Returns true if this lock has fairness set true.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this lock has fairness set true"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Thread",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getOwner",
      "comment": "Returns the thread that currently owns the write lock, or null if not owned. When this method is called by a thread that is not the owner, the return value reflects a best-effort approximation of current lock status. For example, the owner may be momentarily null even if there are threads trying to acquire the lock but have not yet done so. This method is designed to facilitate construction of subclasses that provide more extensive lock monitoring facilities.",
      "tagMap": {
        "return": [
          "the owner, or \n\u003ccode\u003enull\u003c/code\u003e if not owned"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReadLockCount",
      "comment": "Queries the number of read locks held for this lock. This method is designed for use in monitoring system state, not for synchronization control.",
      "tagMap": {
        "return": [
          "the number of read locks held"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isWriteLocked",
      "comment": "Queries if the write lock is held by any thread. This method is designed for use in monitoring system state, not for synchronization control.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if any thread holds the write lock and \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isWriteLockedByCurrentThread",
      "comment": "Queries if the write lock is held by the current thread.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the current thread holds the write lock and \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWriteHoldCount",
      "comment": "Queries the number of reentrant write holds on this lock by the current thread. A writer thread has a hold on a lock for each lock action that is not matched by an unlock action.",
      "tagMap": {
        "return": [
          "the number of holds on the write lock by the current thread, or zero if the write lock is not held by the current thread"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getReadHoldCount",
      "comment": "Queries the number of reentrant read holds on this lock by the current thread. A reader thread has a hold on a lock for each lock action that is not matched by an unlock action.",
      "tagMap": {
        "return": [
          "the number of holds on the read lock by the current thread, or zero if the read lock is not held by the current thread"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.lang.Thread",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getQueuedWriterThreads",
      "comment": "Returns a collection containing threads that may be waiting to acquire the write lock. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive lock monitoring facilities.",
      "tagMap": {
        "return": [
          "the collection of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.lang.Thread",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getQueuedReaderThreads",
      "comment": "Returns a collection containing threads that may be waiting to acquire the read lock. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive lock monitoring facilities.",
      "tagMap": {
        "return": [
          "the collection of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hasQueuedThreads",
      "comment": "Queries whether any threads are waiting to acquire the read or write lock. Note that because cancellations may occur at any time, a true return does not guarantee that any other thread will ever acquire a lock. This method is designed primarily for use in monitoring of the system state.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there may be other threads waiting to acquire the lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Thread",
            "type": "Class"
          },
          "field": {
            "name": "thread"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hasQueuedThread",
      "comment": "Queries whether the given thread is waiting to acquire either the read or write lock. Note that because cancellations may occur at any time, a true return does not guarantee that this thread will ever acquire a lock. This method is designed primarily for use in monitoring of the system state.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ethread\u003c/code\u003e - the thread"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the thread is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given thread is queued waiting for this lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getQueueLength",
      "comment": "Returns an estimate of the number of threads waiting to acquire either the read or write lock. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring system state, not for synchronization control.",
      "tagMap": {
        "return": [
          "the estimated number of threads waiting for this lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.lang.Thread",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getQueuedThreads",
      "comment": "Returns a collection containing threads that may be waiting to acquire either the read or write lock. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.",
      "tagMap": {
        "return": [
          "the collection of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.locks.Condition",
            "type": "Class"
          },
          "field": {
            "name": "condition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasWaiters",
      "comment": "Queries whether any threads are waiting on the given condition associated with the write lock. Note that because timeouts and interrupts may occur at any time, a true return does not guarantee that a future signal will awaken any threads. This method is designed primarily for use in monitoring of the system state.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econdition\u003c/code\u003e - the condition"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if this lock is not held",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given condition is not associated with this lock",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the condition is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there are any waiting threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.locks.Condition",
            "type": "Class"
          },
          "field": {
            "name": "condition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWaitQueueLength",
      "comment": "Returns an estimate of the number of threads waiting on the given condition associated with the write lock. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring of the system state, not for synchronization control.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econdition\u003c/code\u003e - the condition"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if this lock is not held",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given condition is not associated with this lock",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the condition is null"
        ],
        "return": [
          "the estimated number of waiting threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.lang.Thread",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.locks.Condition",
            "type": "Class"
          },
          "field": {
            "name": "condition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "getWaitingThreads",
      "comment": "Returns a collection containing those threads that may be waiting on the given condition associated with the write lock. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive condition monitoring facilities.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econdition\u003c/code\u003e - the condition"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if this lock is not held",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given condition is not associated with this lock",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the condition is null"
        ],
        "return": [
          "the collection of threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string identifying this lock, as well as its lock state. The state, in brackets, includes the String \"Write locks \u003d\" followed by the number of reentrantly held write locks, and the String \"Read locks \u003d\" followed by the number of held read locks.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string identifying this lock, as well as its lock state"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ReentrantReadWriteLock with default (nonfair) ordering properties.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "fair"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ReentrantReadWriteLock with the given fairness policy.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efair\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if this lock should use a fair ordering policy"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock",
    "java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.locks.ReentrantReadWriteLock",
  "comment": "An implementation of \n\u003ca href\u003d\"ReadWriteLock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eReadWriteLock\u003c/code\u003e\u003c/a\u003e supporting similar semantics to \n\u003ca href\u003d\"ReentrantLock.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003eThis class has the following properties: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003cb\u003eAcquisition order\u003c/b\u003e \u003cp\u003eThis class does not impose a reader or writer preference ordering for lock access. However, it does support an optional \u003cem\u003efairness\u003c/em\u003e policy. \u003c/p\u003e\n  \u003cdl\u003e \n   \u003cdt\u003e\n    \u003cb\u003e\u003ci\u003eNon-fair mode (default)\u003c/i\u003e\u003c/b\u003e \n   \u003c/dt\u003e\n   \u003cdd\u003e\n    When constructed as non-fair (the default), the order of entry to the read and write lock is unspecified, subject to reentrancy constraints. A nonfair lock that is continuously contended may indefinitely postpone one or more reader or writer threads, but will normally have higher throughput than a fair lock. \n   \u003c/dd\u003e\n   \u003cdt\u003e\n    \u003cb\u003e\u003ci\u003eFair mode\u003c/i\u003e\u003c/b\u003e \n   \u003c/dt\u003e\n   \u003cdd\u003e\n    When constructed as fair, threads contend for entry using an approximately arrival-order policy. When the currently held lock is released, either the longest-waiting single writer thread will be assigned the write lock, or if there is a group of reader threads waiting longer than all waiting writer threads, that group will be assigned the read lock. \n    \u003cp\u003eA thread that tries to acquire a fair read lock (non-reentrantly) will block if either the write lock is held, or there is a waiting writer thread. The thread will not acquire the read lock until after the oldest currently waiting writer thread has acquired and released the write lock. Of course, if a waiting writer abandons its wait, leaving one or more reader threads as the longest waiters in the queue with the write lock free, then those readers will be assigned the read lock. \u003c/p\u003e\n    \u003cp\u003eA thread that tries to acquire a fair write lock (non-reentrantly) will block unless both the read lock and write lock are free (which implies there are no waiting threads). (Note that the non-blocking \u003ca href\u003d\"ReentrantReadWriteLock.ReadLock.html#tryLock()\"\u003e\u003ccode\u003eReentrantReadWriteLock.ReadLock.tryLock()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"ReentrantReadWriteLock.WriteLock.html#tryLock()\"\u003e\u003ccode\u003eReentrantReadWriteLock.WriteLock.tryLock()\u003c/code\u003e\u003c/a\u003e methods do not honor this fair setting and will immediately acquire the lock if it is possible, regardless of waiting threads.) \u003c/p\u003e\n   \u003c/dd\u003e\n  \u003c/dl\u003e \u003c/li\u003e\n \u003cli\u003e\u003cb\u003eReentrancy\u003c/b\u003e \u003cp\u003eThis lock allows both readers and writers to reacquire read or write locks in the style of a \u003ca href\u003d\"ReentrantLock.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e\u003c/a\u003e. Non-reentrant readers are not allowed until all write locks held by the writing thread have been released. \u003c/p\u003e\u003cp\u003eAdditionally, a writer can acquire the read lock, but not vice-versa. Among other applications, reentrancy can be useful when write locks are held during calls or callbacks to methods that perform reads under read locks. If a reader tries to acquire the write lock it will never succeed. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e\u003cb\u003eLock downgrading\u003c/b\u003e \u003cp\u003eReentrancy also allows downgrading from the write lock to a read lock, by acquiring the write lock, then the read lock and then releasing the write lock. However, upgrading from a read lock to the write lock is \u003cb\u003enot\u003c/b\u003e possible. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e\u003cb\u003eInterruption of lock acquisition\u003c/b\u003e \u003cp\u003eThe read lock and write lock both support interruption during lock acquisition. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e\u003cb\u003e\u003ca href\u003d\"Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e support\u003c/b\u003e \u003cp\u003eThe write lock provides a \u003ca href\u003d\"Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e implementation that behaves in the same way, with respect to the write lock, as the \u003ca href\u003d\"Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e implementation provided by \u003ca href\u003d\"ReentrantLock.html#newCondition()\"\u003e\u003ccode\u003eReentrantLock.newCondition()\u003c/code\u003e\u003c/a\u003e does for \u003ca href\u003d\"ReentrantLock.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e\u003c/a\u003e. This \u003ca href\u003d\"Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e can, of course, only be used with the write lock. \u003c/p\u003e\u003cp\u003eThe read lock does not support a \u003ca href\u003d\"Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e and \u003ccode\u003ereadLock().newCondition()\u003c/code\u003e throws \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e\u003cb\u003eInstrumentation\u003c/b\u003e \u003cp\u003eThis class supports methods to determine whether locks are held or contended. These methods are designed for monitoring system state, not for synchronization control. \u003c/p\u003e\u003c/li\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eSerialization of this class behaves in the same way as built-in locks: a deserialized lock is in the unlocked state, regardless of its state when serialized. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eSample usages\u003c/b\u003e. Here is a code sketch showing how to perform lock downgrading after updating a cache (exception handling is particularly tricky when handling multiple locks in a non-nested fashion): \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class CachedData {\n   Object data;\n   boolean cacheValid;\n   final ReentrantReadWriteLock rwl \u003d new ReentrantReadWriteLock();\n\n   void processCachedData() {\n     rwl.readLock().lock();\n     if (!cacheValid) {\n       // Must release read lock before acquiring write lock\n       rwl.readLock().unlock();\n       rwl.writeLock().lock();\n       try {\n         // Recheck state because another thread might have\n         // acquired write lock and changed state before we did.\n         if (!cacheValid) {\n           data \u003d ...\n           cacheValid \u003d true;\n         }\n         // Downgrade by acquiring read lock before releasing write lock\n         rwl.readLock().lock();\n       } finally {\n         rwl.writeLock().unlock(); // Unlock write, still hold read\n       }\n     }\n\n     try {\n       use(data);\n     } finally {\n       rwl.readLock().unlock();\n     }\n   }\n }\u003c/code\u003e\u003c/pre\u003e ReentrantReadWriteLocks can be used to improve concurrency in some uses of some kinds of Collections. This is typically worthwhile only when the collections are expected to be large, accessed by more reader threads than writer threads, and entail operations with overhead that outweighs synchronization overhead. For example, here is a class using a TreeMap that is expected to be large and concurrently accessed. \n\u003cpre\u003e \u003ccode\u003e\n class RWDictionary {\n   private final Map\u0026lt;String, Data\u0026gt; m \u003d new TreeMap\u0026lt;\u0026gt;();\n   private final ReentrantReadWriteLock rwl \u003d new ReentrantReadWriteLock();\n   private final Lock r \u003d rwl.readLock();\n   private final Lock w \u003d rwl.writeLock();\n\n   public Data get(String key) {\n     r.lock();\n     try { return m.get(key); }\n     finally { r.unlock(); }\n   }\n   public List\u0026lt;String\u0026gt; allKeys() {\n     r.lock();\n     try { return new ArrayList\u0026lt;\u0026gt;(m.keySet()); }\n     finally { r.unlock(); }\n   }\n   public Data put(String key, Data value) {\n     w.lock();\n     try { return m.put(key, value); }\n     finally { w.unlock(); }\n   }\n   public void clear() {\n     w.lock();\n     try { m.clear(); }\n     finally { w.unlock(); }\n   }\n }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003eImplementation Notes\u003c/h2\u003e \n\u003cp\u003eThis lock supports a maximum of 65535 recursive write locks and 65535 read locks. Attempts to exceed these limits result in \u003ca href\u003d\"../../../lang/Error.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eError\u003c/code\u003e\u003c/a\u003e throws from locking methods.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.locks.ReentrantReadWriteLock\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}