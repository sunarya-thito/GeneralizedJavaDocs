{
  "packageName": "java.util.concurrent.locks",
  "simpleName": "ConditionObject",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "signal",
      "comment": "Moves the longest-waiting thread, if one exists, from the wait queue for this condition to the wait queue for the owning lock.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html#signal()\"\u003esignal\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003eCondition\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#isHeldExclusively()\"\u003e\u003ccode\u003eAbstractQueuedLongSynchronizer.isHeldExclusively()\u003c/code\u003e\u003c/a\u003e returns \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "signalAll",
      "comment": "Moves all threads from the wait queue for this condition to the wait queue for the owning lock.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html#signalAll()\"\u003esignalAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003eCondition\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#isHeldExclusively()\"\u003e\u003ccode\u003eAbstractQueuedLongSynchronizer.isHeldExclusively()\u003c/code\u003e\u003c/a\u003e returns \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "awaitUninterruptibly",
      "comment": "Implements uninterruptible condition wait. Save lock state returned by AbstractQueuedLongSynchronizer.getState(). Invoke AbstractQueuedLongSynchronizer.release(long) with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled. Reacquire by invoking specialized version of AbstractQueuedLongSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long, boolean, boolean, boolean, long) with saved state as argument.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html#awaitUninterruptibly()\"\u003eawaitUninterruptibly\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003eCondition\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "await",
      "comment": "Implements interruptible condition wait. If current thread is interrupted, throw InterruptedException. Save lock state returned by AbstractQueuedLongSynchronizer.getState(). Invoke AbstractQueuedLongSynchronizer.release(long) with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled or interrupted. Reacquire by invoking specialized version of AbstractQueuedLongSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long, boolean, boolean, boolean, long) with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html#await()\"\u003eawait\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003eCondition\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted (and interruption of thread suspension is supported)"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "nanosTimeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "awaitNanos",
      "comment": "Implements timed condition wait. If current thread is interrupted, throw InterruptedException. Save lock state returned by AbstractQueuedLongSynchronizer.getState(). Invoke AbstractQueuedLongSynchronizer.release(long) with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out. Reacquire by invoking specialized version of AbstractQueuedLongSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long, boolean, boolean, boolean, long) with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html#awaitNanos(long)\"\u003eawaitNanos\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003eCondition\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enanosTimeout\u003c/code\u003e - the maximum time to wait, in nanoseconds"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted (and interruption of thread suspension is supported)"
        ],
        "return": [
          "an estimate of the \n\u003ccode\u003enanosTimeout\u003c/code\u003e value minus the time spent waiting upon return from this method. A positive value may be used as the argument to a subsequent call to this method to finish waiting out the desired time. A value less than or equal to zero indicates that no time remains."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "deadline"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "awaitUntil",
      "comment": "Implements absolute timed condition wait. If current thread is interrupted, throw InterruptedException. Save lock state returned by AbstractQueuedLongSynchronizer.getState(). Invoke AbstractQueuedLongSynchronizer.release(long) with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out. Reacquire by invoking specialized version of AbstractQueuedLongSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long, boolean, boolean, boolean, long) with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException. If timed out while blocked in step 4, return false, else true.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html#awaitUntil(java.util.Date)\"\u003eawaitUntil\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003eCondition\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003edeadline\u003c/code\u003e - the absolute time to wait until"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted (and interruption of thread suspension is supported)"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the deadline has elapsed upon return, else \n\u003ccode\u003etrue\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "time"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "await",
      "comment": "Implements timed condition wait. If current thread is interrupted, throw InterruptedException. Save lock state returned by AbstractQueuedLongSynchronizer.getState(). Invoke AbstractQueuedLongSynchronizer.release(long) with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out. Reacquire by invoking specialized version of AbstractQueuedLongSynchronizer.acquire(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.Node, long, boolean, boolean, boolean, long) with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException. If timed out while blocked in step 4, return false, else true.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html#await(long,java.util.concurrent.TimeUnit)\"\u003eawait\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003eCondition\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - the maximum time to wait",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the \n\u003ccode\u003etime\u003c/code\u003e argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted (and interruption of thread suspension is supported)"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the waiting time detectably elapsed before return from the method, else \n\u003ccode\u003etrue\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "hasWaiters",
      "comment": "Queries whether any threads are waiting on this condition. Implements AbstractQueuedLongSynchronizer.hasWaiters(ConditionObject).",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#isHeldExclusively()\"\u003e\u003ccode\u003eAbstractQueuedLongSynchronizer.isHeldExclusively()\u003c/code\u003e\u003c/a\u003e returns \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there are any waiting threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getWaitQueueLength",
      "comment": "Returns an estimate of the number of threads waiting on this condition. Implements AbstractQueuedLongSynchronizer.getWaitQueueLength(ConditionObject).",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#isHeldExclusively()\"\u003e\u003ccode\u003eAbstractQueuedLongSynchronizer.isHeldExclusively()\u003c/code\u003e\u003c/a\u003e returns \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "return": [
          "the estimated number of waiting threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.lang.Thread",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "getWaitingThreads",
      "comment": "Returns a collection containing those threads that may be waiting on this Condition. Implements AbstractQueuedLongSynchronizer.getWaitingThreads(ConditionObject).",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalMonitorStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalMonitorStateException\u003c/a\u003e\u003c/code\u003e - if \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.html#isHeldExclusively()\"\u003e\u003ccode\u003eAbstractQueuedLongSynchronizer.isHeldExclusively()\u003c/code\u003e\u003c/a\u003e returns \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "return": [
          "the collection of threads"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new ConditionObject instance.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer$ConditionObject",
  "comment": "Condition implementation for a \n\u003ca href\u003d\"AbstractQueuedLongSynchronizer.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eAbstractQueuedLongSynchronizer\u003c/code\u003e\u003c/a\u003e serving as the basis of a \n\u003ca href\u003d\"Lock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eLock\u003c/code\u003e\u003c/a\u003e implementation. \n\u003cp\u003eMethod documentation for this class describes mechanics, not behavioral specifications from the point of view of Lock and Condition users. Exported versions of this class will in general need to be accompanied by documentation describing condition semantics that rely on those of the associated \u003ccode\u003eAbstractQueuedLongSynchronizer\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThis class is Serializable, but all fields are transient, so deserialized conditions have no waiters.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject\"\u003eSerialized Form\u003c/a\u003e"
    ]
  }
}