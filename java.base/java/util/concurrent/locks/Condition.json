{
  "packageName": "java.util.concurrent.locks",
  "simpleName": "Condition",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "await",
      "comment": "Causes the current thread to wait until it is signalled or interrupted. The lock associated with this Condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: Some other thread invokes the signal() method for this Condition and the current thread happens to be chosen as the thread to be awakened; or Some other thread invokes the signalAll() method for this Condition; or Some other thread interrupts the current thread, and interruption of thread suspension is supported; or A \"spurious wakeup\" occurs. In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is guaranteed to hold this lock. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting and interruption of thread suspension is supported, then InterruptedException is thrown and the current thread\u0027s interrupted status is cleared. It is not specified, in the first case, whether or not the test for interruption occurs before the lock is released. Implementation Considerations The current thread is assumed to hold the lock associated with this Condition when this method is called. It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as IllegalMonitorStateException) and the implementation must document that fact. An implementation can favor responding to an interrupt over normal method return in response to a signal. In that case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted (and interruption of thread suspension is supported)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "awaitUninterruptibly",
      "comment": "Causes the current thread to wait until it is signalled. The lock associated with this condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: Some other thread invokes the signal() method for this Condition and the current thread happens to be chosen as the thread to be awakened; or Some other thread invokes the signalAll() method for this Condition; or A \"spurious wakeup\" occurs. In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is guaranteed to hold this lock. If the current thread\u0027s interrupted status is set when it enters this method, or it is interrupted while waiting, it will continue to wait until signalled. When it finally returns from this method its interrupted status will still be set. Implementation Considerations The current thread is assumed to hold the lock associated with this Condition when this method is called. It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as IllegalMonitorStateException) and the implementation must document that fact.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "nanosTimeout",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "awaitNanos",
      "comment": "Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses. The lock associated with this condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until one of five things happens: Some other thread invokes the signal() method for this Condition and the current thread happens to be chosen as the thread to be awakened; or Some other thread invokes the signalAll() method for this Condition; or Some other thread interrupts the current thread, and interruption of thread suspension is supported; or The specified waiting time elapses; or A \"spurious wakeup\" occurs. In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is guaranteed to hold this lock. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting and interruption of thread suspension is supported, then InterruptedException is thrown and the current thread\u0027s interrupted status is cleared. It is not specified, in the first case, whether or not the test for interruption occurs before the lock is released. The method returns an estimate of the number of nanoseconds remaining to wait given the supplied nanosTimeout value upon return, or a value less than or equal to zero if it timed out. This value can be used to determine whether and how long to re-wait in cases where the wait returns but an awaited condition still does not hold. Typical uses of this method take the following form:  \n boolean aMethod(long timeout, TimeUnit unit)\n     throws InterruptedException {\n   long nanosRemaining \u003d unit.toNanos(timeout);\n   lock.lock();\n   try {\n     while (!conditionBeingWaitedFor()) {\n       if (nanosRemaining \u003c\u003d 0L)\n         return false;\n       nanosRemaining \u003d theCondition.awaitNanos(nanosRemaining);\n     }\n     // ...\n     return true;\n   } finally {\n     lock.unlock();\n   }\n } Design note: This method requires a nanosecond argument so as to avoid truncation errors in reporting remaining times. Such precision loss would make it difficult for programmers to ensure that total waiting times are not systematically shorter than specified when re-waits occur. Implementation Considerations The current thread is assumed to hold the lock associated with this Condition when this method is called. It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as IllegalMonitorStateException) and the implementation must document that fact. An implementation can favor responding to an interrupt over normal method return in response to a signal, or over indicating the elapse of the specified waiting time. In either case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enanosTimeout\u003c/code\u003e - the maximum time to wait, in nanoseconds"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted (and interruption of thread suspension is supported)"
        ],
        "return": [
          "an estimate of the \n\u003ccode\u003enanosTimeout\u003c/code\u003e value minus the time spent waiting upon return from this method. A positive value may be used as the argument to a subsequent call to this method to finish waiting out the desired time. A value less than or equal to zero indicates that no time remains."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "time",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "await",
      "comment": "Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses. This method is behaviorally equivalent to:  awaitNanos(unit.toNanos(time)) \u003e 0",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - the maximum time to wait",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the \n\u003ccode\u003etime\u003c/code\u003e argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted (and interruption of thread suspension is supported)"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the waiting time detectably elapsed before return from the method, else \n\u003ccode\u003etrue\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "name": "deadline",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "awaitUntil",
      "comment": "Causes the current thread to wait until it is signalled or interrupted, or the specified deadline elapses. The lock associated with this condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until one of five things happens: Some other thread invokes the signal() method for this Condition and the current thread happens to be chosen as the thread to be awakened; or Some other thread invokes the signalAll() method for this Condition; or Some other thread interrupts the current thread, and interruption of thread suspension is supported; or The specified deadline elapses; or A \"spurious wakeup\" occurs. In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is guaranteed to hold this lock. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting and interruption of thread suspension is supported, then InterruptedException is thrown and the current thread\u0027s interrupted status is cleared. It is not specified, in the first case, whether or not the test for interruption occurs before the lock is released. The return value indicates whether the deadline has elapsed, which can be used as follows:  \n boolean aMethod(Date deadline)\n     throws InterruptedException {\n   boolean stillWaiting \u003d true;\n   lock.lock();\n   try {\n     while (!conditionBeingWaitedFor()) {\n       if (!stillWaiting)\n         return false;\n       stillWaiting \u003d theCondition.awaitUntil(deadline);\n     }\n     // ...\n     return true;\n   } finally {\n     lock.unlock();\n   }\n } Implementation Considerations The current thread is assumed to hold the lock associated with this Condition when this method is called. It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as IllegalMonitorStateException) and the implementation must document that fact. An implementation can favor responding to an interrupt over normal method return in response to a signal, or over indicating the passing of the specified deadline. In either case the implementation must ensure that the signal is redirected to another waiting thread, if there is one.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edeadline\u003c/code\u003e - the absolute time to wait until"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted (and interruption of thread suspension is supported)"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the deadline has elapsed upon return, else \n\u003ccode\u003etrue\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "signal",
      "comment": "Wakes up one waiting thread. If any threads are waiting on this condition then one is selected for waking up. That thread must then re-acquire the lock before returning from await. Implementation Considerations An implementation may (and typically does) require that the current thread hold the lock associated with this Condition when this method is called. Implementations must document this precondition and any actions taken if the lock is not held. Typically, an exception such as IllegalMonitorStateException will be thrown.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "signalAll",
      "comment": "Wakes up all waiting threads. If any threads are waiting on this condition then they are all woken up. Each thread must re-acquire the lock before it can return from await. Implementation Considerations An implementation may (and typically does) require that the current thread hold the lock associated with this Condition when this method is called. Implementations must document this precondition and any actions taken if the lock is not held. Typically, an exception such as IllegalMonitorStateException will be thrown.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.concurrent.locks.Condition",
  "comment": "\u003ccode\u003eCondition\u003c/code\u003e factors out the \n\u003ccode\u003eObject\u003c/code\u003e monitor methods (\n\u003ca href\u003d\"../../../lang/Object.html#wait()\"\u003e\u003ccode\u003ewait\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"../../../lang/Object.html#notify()\"\u003e\u003ccode\u003enotify\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"../../../lang/Object.html#notifyAll()\"\u003e\u003ccode\u003enotifyAll\u003c/code\u003e\u003c/a\u003e) into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary \n\u003ca href\u003d\"Lock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eLock\u003c/code\u003e\u003c/a\u003e implementations. Where a \n\u003ccode\u003eLock\u003c/code\u003e replaces the use of \n\u003ccode\u003esynchronized\u003c/code\u003e methods and statements, a \n\u003ccode\u003eCondition\u003c/code\u003e replaces the use of the Object monitor methods. \n\u003cp\u003eConditions (also known as \u003cem\u003econdition queues\u003c/em\u003e or \u003cem\u003econdition variables\u003c/em\u003e) provide a means for one thread to suspend execution (to \"wait\") until notified by another thread that some state condition may now be true. Because access to this shared state information occurs in different threads, it must be protected, so a lock of some form is associated with the condition. The key property that waiting for a condition provides is that it \u003cem\u003eatomically\u003c/em\u003e releases the associated lock and suspends the current thread, just like \u003ccode\u003eObject.wait\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eCondition\u003c/code\u003e instance is intrinsically bound to a lock. To obtain a \u003ccode\u003eCondition\u003c/code\u003e instance for a particular \u003ca href\u003d\"Lock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eLock\u003c/code\u003e\u003c/a\u003e instance use its \u003ca href\u003d\"Lock.html#newCondition()\"\u003e\u003ccode\u003enewCondition()\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\n\u003cp\u003eAs an example, suppose we have a bounded buffer which supports \u003ccode\u003eput\u003c/code\u003e and \u003ccode\u003etake\u003c/code\u003e methods. If a \u003ccode\u003etake\u003c/code\u003e is attempted on an empty buffer, then the thread will block until an item becomes available; if a \u003ccode\u003eput\u003c/code\u003e is attempted on a full buffer, then the thread will block until a space becomes available. We would like to keep waiting \u003ccode\u003eput\u003c/code\u003e threads and \u003ccode\u003etake\u003c/code\u003e threads in separate wait-sets so that we can use the optimization of only notifying a single thread at a time when items or spaces become available in the buffer. This can be achieved using two \u003ca href\u003d\"Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e instances. \u003c/p\u003e\n\u003cpre\u003e class BoundedBuffer\u0026lt;E\u0026gt; {\n   \u003cb\u003efinal Lock lock \u003d new ReentrantLock();\u003c/b\u003e\n   final Condition notFull  \u003d \u003cb\u003elock.newCondition(); \u003c/b\u003e\n   final Condition notEmpty \u003d \u003cb\u003elock.newCondition(); \u003c/b\u003e\n\n   final Object[] items \u003d new Object[100];\n   int putptr, takeptr, count;\n\n   public void put(E x) throws InterruptedException {\n     \u003cb\u003elock.lock();\n     try {\u003c/b\u003e\n       while (count \u003d\u003d items.length)\n         \u003cb\u003enotFull.await();\u003c/b\u003e\n       items[putptr] \u003d x;\n       if (++putptr \u003d\u003d items.length) putptr \u003d 0;\n       ++count;\n       \u003cb\u003enotEmpty.signal();\u003c/b\u003e\n     \u003cb\u003e} finally {\n       lock.unlock();\n     }\u003c/b\u003e\n   }\n\n   public E take() throws InterruptedException {\n     \u003cb\u003elock.lock();\n     try {\u003c/b\u003e\n       while (count \u003d\u003d 0)\n         \u003cb\u003enotEmpty.await();\u003c/b\u003e\n       E x \u003d (E) items[takeptr];\n       if (++takeptr \u003d\u003d items.length) takeptr \u003d 0;\n       --count;\n       \u003cb\u003enotFull.signal();\u003c/b\u003e\n       return x;\n     \u003cb\u003e} finally {\n       lock.unlock();\n     }\u003c/b\u003e\n   }\n }\n \u003c/pre\u003e (The \n\u003ca href\u003d\"../ArrayBlockingQueue.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eArrayBlockingQueue\u003c/code\u003e\u003c/a\u003e class provides this functionality, so there is no reason to implement this sample usage class.) \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eCondition\u003c/code\u003e implementation can provide behavior and semantics that is different from that of the \u003ccode\u003eObject\u003c/code\u003e monitor methods, such as guaranteed ordering for notifications, or not requiring a lock to be held when performing notifications. If an implementation provides such specialized semantics then the implementation must document those semantics. \u003c/p\u003e\n\u003cp\u003eNote that \u003ccode\u003eCondition\u003c/code\u003e instances are just normal objects and can themselves be used as the target in a \u003ccode\u003esynchronized\u003c/code\u003e statement, and can have their own monitor \u003ca href\u003d\"../../../lang/Object.html#wait()\"\u003e\u003ccode\u003ewait\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"../../../lang/Object.html#notify()\"\u003e\u003ccode\u003enotify\u003c/code\u003e\u003c/a\u003e methods invoked. Acquiring the monitor lock of a \u003ccode\u003eCondition\u003c/code\u003e instance, or using its monitor methods, has no specified relationship with acquiring the \u003ca href\u003d\"Lock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eLock\u003c/code\u003e\u003c/a\u003e associated with that \u003ccode\u003eCondition\u003c/code\u003e or the use of its \u003ca href\u003d\"#await()\"\u003ewaiting\u003c/a\u003e and \u003ca href\u003d\"#signal()\"\u003esignalling\u003c/a\u003e methods. It is recommended that to avoid confusion you never use \u003ccode\u003eCondition\u003c/code\u003e instances in this way, except perhaps within their own implementation. \u003c/p\u003e\n\u003cp\u003eExcept where noted, passing a \u003ccode\u003enull\u003c/code\u003e value for any parameter will result in a \u003ca href\u003d\"../../../lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e being thrown. \u003c/p\u003e\n\u003ch2\u003eImplementation Considerations\u003c/h2\u003e \n\u003cp\u003eWhen waiting upon a \u003ccode\u003eCondition\u003c/code\u003e, a \"\u003cem\u003espurious wakeup\u003c/em\u003e\" is permitted to occur, in general, as a concession to the underlying platform semantics. This has little practical impact on most application programs as a \u003ccode\u003eCondition\u003c/code\u003e should always be waited upon in a loop, testing the state predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications programmers always assume that they can occur and so always wait in a loop. \u003c/p\u003e\n\u003cp\u003eThe three forms of condition waiting (interruptible, non-interruptible, and timed) may differ in their ease of implementation on some platforms and in their performance characteristics. In particular, it may be difficult to provide these features and maintain specific semantics such as ordering guarantees. Further, the ability to interrupt the actual suspension of the thread may not always be feasible to implement on all platforms. \u003c/p\u003e\n\u003cp\u003eConsequently, an implementation is not required to define exactly the same guarantees or semantics for all three forms of waiting, nor is it required to support interruption of the actual suspension of the thread. \u003c/p\u003e\n\u003cp\u003eAn implementation is required to clearly document the semantics and guarantees provided by each of the waiting methods, and when an implementation does support interruption of thread suspension then it must obey the interruption semantics as defined in this interface. \u003c/p\u003e\n\u003cp\u003eAs interruption generally implies cancellation, and checks for interruption are often infrequent, an implementation can favor responding to an interrupt over normal method return. This is true even if it can be shown that the interrupt occurred after another action that may have unblocked the thread. An implementation should document this behavior.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}