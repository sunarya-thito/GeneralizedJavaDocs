{
  "packageName": "java.util.concurrent.locks",
  "simpleName": "Lock",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lock",
      "comment": "Acquires the lock. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired. Implementation Considerations A Lock implementation may be able to detect erroneous use of the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances. The circumstances and the exception type must be documented by that Lock implementation.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lockInterruptibly",
      "comment": "Acquires the lock unless the current thread is interrupted. Acquires the lock if it is available and returns immediately. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: The lock is acquired by the current thread; or Some other thread interrupts the current thread, and interruption of lock acquisition is supported. If the current thread: has its interrupted status set on entry to this method; or is interrupted while acquiring the lock, and interruption of lock acquisition is supported, then InterruptedException is thrown and the current thread\u0027s interrupted status is cleared. Implementation Considerations The ability to interrupt a lock acquisition in some implementations may not be possible, and if possible may be an expensive operation. The programmer should be aware that this may be the case. An implementation should document when this is the case. An implementation can favor responding to an interrupt over normal method return. A Lock implementation may be able to detect erroneous use of the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances. The circumstances and the exception type must be documented by that Lock implementation.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted while acquiring the lock (and interruption of lock acquisition is supported)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "tryLock",
      "comment": "Acquires the lock only if it is free at the time of invocation. Acquires the lock if it is available and returns immediately with the value true. If the lock is not available then this method will return immediately with the value false. A typical usage idiom for this method would be:  \n Lock lock \u003d ...;\n if (lock.tryLock()) {\n   try {\n     // manipulate protected state\n   } finally {\n     lock.unlock();\n   }\n } else {\n   // perform alternative actions\n } This usage ensures that the lock is unlocked if it was acquired, and doesn\u0027t try to unlock if the lock was not acquired.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the lock was acquired and \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "time",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "tryLock",
      "comment": "Acquires the lock if it is free within the given waiting time and the current thread has not been interrupted. If the lock is available this method returns immediately with the value true. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: The lock is acquired by the current thread; or Some other thread interrupts the current thread, and interruption of lock acquisition is supported; or The specified waiting time elapses If the lock is acquired then the value true is returned. If the current thread: has its interrupted status set on entry to this method; or is interrupted while acquiring the lock, and interruption of lock acquisition is supported, then InterruptedException is thrown and the current thread\u0027s interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all. Implementation Considerations The ability to interrupt a lock acquisition in some implementations may not be possible, and if possible may be an expensive operation. The programmer should be aware that this may be the case. An implementation should document when this is the case. An implementation can favor responding to an interrupt over normal method return, or reporting a timeout. A Lock implementation may be able to detect erroneous use of the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances. The circumstances and the exception type must be documented by that Lock implementation.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - the maximum time to wait for the lock",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the \n\u003ccode\u003etime\u003c/code\u003e argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread is interrupted while acquiring the lock (and interruption of lock acquisition is supported)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the lock was acquired and \n\u003ccode\u003efalse\u003c/code\u003e if the waiting time elapsed before the lock was acquired"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "unlock",
      "comment": "Releases the lock. Implementation Considerations A Lock implementation will usually impose restrictions on which thread can release a lock (typically only the holder of the lock can release it) and may throw an (unchecked) exception if the restriction is violated. Any restrictions and the exception type must be documented by that Lock implementation.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.util.concurrent.locks.Condition",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "newCondition",
      "comment": "Returns a new Condition instance that is bound to this Lock instance. Before waiting on the condition the lock must be held by the current thread. A call to Condition.await() will atomically release the lock before waiting and re-acquire the lock before the wait returns. Implementation Considerations The exact operation of the Condition instance depends on the Lock implementation and must be documented by that implementation.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this \n\u003ccode\u003eLock\u003c/code\u003e implementation does not support conditions"
        ],
        "return": [
          "A new \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e instance for this \n\u003ccode\u003eLock\u003c/code\u003e instance"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.concurrent.locks.Lock",
  "comment": "\u003ccode\u003eLock\u003c/code\u003e implementations provide more extensive locking operations than can be obtained using \n\u003ccode\u003esynchronized\u003c/code\u003e methods and statements. They allow more flexible structuring, may have quite different properties, and may support multiple associated \n\u003ca href\u003d\"Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e objects. \n\u003cp\u003eA lock is a tool for controlling access to a shared resource by multiple threads. Commonly, a lock provides exclusive access to a shared resource: only one thread at a time can acquire the lock and all access to the shared resource requires that the lock be acquired first. However, some locks may allow concurrent access to a shared resource, such as the read lock of a \u003ca href\u003d\"ReadWriteLock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eReadWriteLock\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003eThe use of \u003ccode\u003esynchronized\u003c/code\u003e methods or statements provides access to the implicit monitor lock associated with every object, but forces all lock acquisition and release to occur in a block-structured way: when multiple locks are acquired they must be released in the opposite order, and all locks must be released in the same lexical scope in which they were acquired. \u003c/p\u003e\n\u003cp\u003eWhile the scoping mechanism for \u003ccode\u003esynchronized\u003c/code\u003e methods and statements makes it much easier to program with monitor locks, and helps avoid many common programming errors involving locks, there are occasions where you need to work with locks in a more flexible way. For example, some algorithms for traversing concurrently accessed data structures require the use of \"hand-over-hand\" or \"chain locking\": you acquire the lock of node A, then node B, then release A and acquire C, then release B and acquire D and so on. Implementations of the \u003ccode\u003eLock\u003c/code\u003e interface enable the use of such techniques by allowing a lock to be acquired and released in different scopes, and allowing multiple locks to be acquired and released in any order. \u003c/p\u003e\n\u003cp\u003eWith this increased flexibility comes additional responsibility. The absence of block-structured locking removes the automatic release of locks that occurs with \u003ccode\u003esynchronized\u003c/code\u003e methods and statements. In most cases, the following idiom should be used: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n Lock l \u003d ...;\n l.lock();\n try {\n   // access the resource protected by this lock\n } finally {\n   l.unlock();\n }\u003c/code\u003e\u003c/pre\u003e When locking and unlocking occur in different scopes, care must be taken to ensure that all code that is executed while the lock is held is protected by try-finally or try-catch to ensure that the lock is released when necessary. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eLock\u003c/code\u003e implementations provide additional functionality over the use of \u003ccode\u003esynchronized\u003c/code\u003e methods and statements by providing a non-blocking attempt to acquire a lock (\u003ca href\u003d\"#tryLock()\"\u003e\u003ccode\u003etryLock()\u003c/code\u003e\u003c/a\u003e), an attempt to acquire the lock that can be interrupted (\u003ca href\u003d\"#lockInterruptibly()\"\u003e\u003ccode\u003elockInterruptibly()\u003c/code\u003e\u003c/a\u003e, and an attempt to acquire the lock that can timeout (\u003ca href\u003d\"#tryLock(long,java.util.concurrent.TimeUnit)\"\u003e\u003ccode\u003etryLock(long, TimeUnit)\u003c/code\u003e\u003c/a\u003e). \u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eLock\u003c/code\u003e class can also provide behavior and semantics that is quite different from that of the implicit monitor lock, such as guaranteed ordering, non-reentrant usage, or deadlock detection. If an implementation provides such specialized semantics then the implementation must document those semantics. \u003c/p\u003e\n\u003cp\u003eNote that \u003ccode\u003eLock\u003c/code\u003e instances are just normal objects and can themselves be used as the target in a \u003ccode\u003esynchronized\u003c/code\u003e statement. Acquiring the monitor lock of a \u003ccode\u003eLock\u003c/code\u003e instance has no specified relationship with invoking any of the \u003ca href\u003d\"#lock()\"\u003e\u003ccode\u003elock()\u003c/code\u003e\u003c/a\u003e methods of that instance. It is recommended that to avoid confusion you never use \u003ccode\u003eLock\u003c/code\u003e instances in this way, except within their own implementation. \u003c/p\u003e\n\u003cp\u003eExcept where noted, passing a \u003ccode\u003enull\u003c/code\u003e value for any parameter will result in a \u003ca href\u003d\"../../../lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e being thrown. \u003c/p\u003e\n\u003ch2\u003eMemory Synchronization\u003c/h2\u003e \n\u003cp\u003eAll \u003ccode\u003eLock\u003c/code\u003e implementations \u003cem\u003emust\u003c/em\u003e enforce the same memory synchronization semantics as provided by the built-in monitor lock, as described in Chapter 17 of \u003ccite\u003eThe Java Language Specification\u003c/cite\u003e: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eA successful \u003ccode\u003elock\u003c/code\u003e operation has the same memory synchronization effects as a successful \u003cem\u003eLock\u003c/em\u003e action. \u003c/li\u003e\n \u003cli\u003eA successful \u003ccode\u003eunlock\u003c/code\u003e operation has the same memory synchronization effects as a successful \u003cem\u003eUnlock\u003c/em\u003e action. \u003c/li\u003e\n\u003c/ul\u003e Unsuccessful locking and unlocking operations, and reentrant locking/unlocking operations, do not require any memory synchronization effects. \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003eImplementation Considerations\u003c/h2\u003e \n\u003cp\u003eThe three forms of lock acquisition (interruptible, non-interruptible, and timed) may differ in their performance characteristics, ordering guarantees, or other implementation qualities. Further, the ability to interrupt the \u003cem\u003eongoing\u003c/em\u003e acquisition of a lock may not be available in a given \u003ccode\u003eLock\u003c/code\u003e class. Consequently, an implementation is not required to define exactly the same guarantees or semantics for all three forms of lock acquisition, nor is it required to support interruption of an ongoing lock acquisition. An implementation is required to clearly document the semantics and guarantees provided by each of the locking methods. It must also obey the interruption semantics as defined in this interface, to the extent that interruption of lock acquisition is supported: which is either totally, or only on method entry. \u003c/p\u003e\n\u003cp\u003eAs interruption generally implies cancellation, and checks for interruption are often infrequent, an implementation can favor responding to an interrupt over normal method return. This is true even if it can be shown that the interrupt occurred after another action may have unblocked the thread. An implementation should document this behavior.\u003c/p\u003e",
  "tagMap": {
    "See Java Language Specification:": [
      "\u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-17.html#jls-17.4\"\u003e17.4 Memory Model\u003c/a\u003e\n\u003cbr\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/ReentrantLock.html\" title\u003d\"class in java.util.concurrent.locks\"\u003e\u003ccode\u003eReentrantLock\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/Condition.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eCondition\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/locks/ReadWriteLock.html\" title\u003d\"interface in java.util.concurrent.locks\"\u003e\u003ccode\u003eReadWriteLock\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}