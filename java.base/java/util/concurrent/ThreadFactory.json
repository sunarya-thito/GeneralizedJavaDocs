{
  "packageName": "java.util.concurrent",
  "simpleName": "ThreadFactory",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Thread",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "r"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "newThread",
      "comment": "Constructs a new Thread. Implementations may also initialize priority, name, daemon status, ThreadGroup, etc.",
      "tagMap": {
        "param": [
          "\u003ccode\u003er\u003c/code\u003e - a runnable to be executed by new thread instance"
        ],
        "return": [
          "constructed thread, or \n\u003ccode\u003enull\u003c/code\u003e if the request to create a thread is rejected"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.concurrent.ThreadFactory",
  "comment": "An object that creates new threads on demand. Using thread factories removes hardwiring of calls to \n\u003ca href\u003d\"../../lang/Thread.html#%3Cinit%3E(java.lang.Runnable)\"\u003e\u003ccode\u003enew Thread\u003c/code\u003e\u003c/a\u003e, enabling applications to use special thread subclasses, priorities, etc. \n\u003cp\u003e The simplest implementation of this interface is just: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n class SimpleThreadFactory implements ThreadFactory {\n   public Thread newThread(Runnable r) {\n     return new Thread(r);\n   }\n }\u003c/code\u003e\u003c/pre\u003e The \n\u003ca href\u003d\"Executors.html#defaultThreadFactory()\"\u003e\u003ccode\u003eExecutors.defaultThreadFactory()\u003c/code\u003e\u003c/a\u003e method provides a more useful simple implementation, that sets the created thread context to known values before returning it.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}