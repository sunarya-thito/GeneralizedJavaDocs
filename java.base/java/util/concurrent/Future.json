{
  "packageName": "java.util.concurrent",
  "simpleName": "Future",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "mayInterruptIfRunning",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "cancel",
      "comment": "Attempts to cancel execution of this task. This attempt will fail if the task has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when cancel is called, this task should never run. If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task. After this method returns, subsequent calls to isDone() will always return true. Subsequent calls to isCancelled() will always return true if this method returned true.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emayInterruptIfRunning\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the thread executing this task should be interrupted; otherwise, in-progress tasks are allowed to complete"
        ],
        "return": [
          "\u003ccode\u003efalse\u003c/code\u003e if the task could not be cancelled, typically because it has already completed normally; \n\u003ccode\u003etrue\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isCancelled",
      "comment": "Returns true if this task was cancelled before it completed normally.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task was cancelled before it completed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDone",
      "comment": "Returns true if this task completed. Completion may be due to normal termination, an exception, or cancellation -- in all of these cases, this method will return true.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this task completed"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.Future",
        "name": "V",
        "type": "Variable"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        },
        {
          "name": "java.util.concurrent.ExecutionException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Waits if necessary for the computation to complete, and then retrieves its result.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CancellationException.html\" title\u003d\"class in java.util.concurrent\"\u003eCancellationException\u003c/a\u003e\u003c/code\u003e - if the computation was cancelled",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eExecutionException\u003c/a\u003e\u003c/code\u003e - if the computation threw an exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread was interrupted while waiting"
        ],
        "return": [
          "the computed result"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.Future",
        "name": "V",
        "type": "Variable"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        },
        {
          "name": "java.util.concurrent.ExecutionException",
          "type": "Class"
        },
        {
          "name": "java.util.concurrent.TimeoutException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "timeout",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the timeout argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/CancellationException.html\" title\u003d\"class in java.util.concurrent\"\u003eCancellationException\u003c/a\u003e\u003c/code\u003e - if the computation was cancelled",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eExecutionException\u003c/a\u003e\u003c/code\u003e - if the computation threw an exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if the current thread was interrupted while waiting",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/TimeoutException.html\" title\u003d\"class in java.util.concurrent\"\u003eTimeoutException\u003c/a\u003e\u003c/code\u003e - if the wait timed out"
        ],
        "return": [
          "the computed result"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.concurrent.Future",
  "comment": "A \n\u003ccode\u003eFuture\u003c/code\u003e represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method \n\u003ccode\u003eget\u003c/code\u003e when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the \n\u003ccode\u003ecancel\u003c/code\u003e method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a \n\u003ccode\u003eFuture\u003c/code\u003e for the sake of cancellability but not provide a usable result, you can declare types of the form \n\u003ccode\u003eFuture\u0026lt;?\u0026gt;\u003c/code\u003e and return \n\u003ccode\u003enull\u003c/code\u003e as a result of the underlying task. \n\u003cp\u003e\u003cb\u003eSample Usage\u003c/b\u003e (Note that the following classes are all made-up.) \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n interface ArchiveSearcher { String search(String target); }\n class App {\n   ExecutorService executor \u003d ...\n   ArchiveSearcher searcher \u003d ...\n   void showSearch(String target) throws InterruptedException {\n     Callable\u0026lt;String\u0026gt; task \u003d () -\u0026gt; searcher.search(target);\n     Future\u0026lt;String\u0026gt; future \u003d executor.submit(task);\n     displayOtherThings(); // do other things while searching\n     try {\n       displayText(future.get()); // use future\n     } catch (ExecutionException ex) { cleanup(); return; }\n   }\n }\u003c/code\u003e\u003c/pre\u003e The \n\u003ca href\u003d\"FutureTask.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eFutureTask\u003c/code\u003e\u003c/a\u003e class is an implementation of \n\u003ccode\u003eFuture\u003c/code\u003e that implements \n\u003ccode\u003eRunnable\u003c/code\u003e, and so may be executed by an \n\u003ccode\u003eExecutor\u003c/code\u003e. For example, the above construction with \n\u003ccode\u003esubmit\u003c/code\u003e could be replaced by: \n\u003cpre\u003e \u003ccode\u003e\n FutureTask\u0026lt;String\u0026gt; future \u003d new FutureTask\u0026lt;\u0026gt;(task);\n executor.execute(future);\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eMemory consistency effects: Actions taken by the asynchronous computation \u003ca href\u003d\"package-summary.html#MemoryVisibility\"\u003e \u003ci\u003ehappen-before\u003c/i\u003e\u003c/a\u003e actions following the corresponding \u003ccode\u003eFuture.get()\u003c/code\u003e in another thread.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/FutureTask.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eFutureTask\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Executor.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eExecutor\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}