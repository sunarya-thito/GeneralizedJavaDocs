{
  "packageName": "java.util.concurrent",
  "simpleName": "ScheduledExecutorService",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.concurrent.ExecutorService",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.concurrent.ScheduledFuture",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "delay"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "schedule",
      "comment": "Submits a one-shot task that becomes enabled after the given delay.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the task to execute",
          "\u003ccode\u003edelay\u003c/code\u003e - the time from now to delay execution",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the delay parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if command or unit is null"
        ],
        "return": [
          "a ScheduledFuture representing pending completion of the task and whose \n\u003ccode\u003eget()\u003c/code\u003e method will return \n\u003ccode\u003enull\u003c/code\u003e upon completion"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ScheduledFuture",
        "parameters": [
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.Callable",
            "parameters": [
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "callable"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "delay"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "schedule",
      "comment": "Submits a value-returning one-shot task that becomes enabled after the given delay.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eV\u003c/code\u003e - the type of the callable\u0027s result"
        ],
        "param": [
          "\u003ccode\u003ecallable\u003c/code\u003e - the function to execute",
          "\u003ccode\u003edelay\u003c/code\u003e - the time from now to delay execution",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the delay parameter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if callable or unit is null"
        ],
        "return": [
          "a ScheduledFuture that can be used to extract result or cancel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ScheduledFuture",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "initialDelay"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "period"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "scheduleAtFixedRate",
      "comment": "Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is, executions will commence after initialDelay, then initialDelay + period, then initialDelay + 2 * period, and so on. The sequence of task executions continues indefinitely until one of the following exceptional completions occur: The task is explicitly cancelled via the returned future. The executor terminates, also resulting in task cancellation. An execution of the task throws an exception. In this case calling get on the returned future will throw ExecutionException, holding the exception as its cause. Subsequent executions are suppressed. Subsequent calls to isDone() on the returned future will return true. If any execution of this task takes longer than its period, then subsequent executions may start late, but will not concurrently execute.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the task to execute",
          "\u003ccode\u003einitialDelay\u003c/code\u003e - the time to delay first execution",
          "\u003ccode\u003eperiod\u003c/code\u003e - the period between successive executions",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the initialDelay and period parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if command or unit is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if period less than or equal to zero"
        ],
        "return": [
          "a ScheduledFuture representing pending completion of the series of repeated tasks. The future\u0027s \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html#get()\"\u003e\u003ccode\u003eget()\u003c/code\u003e\u003c/a\u003e method will never return normally, and will throw an exception upon task cancellation or abnormal termination of a task execution."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ScheduledFuture",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "command"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "initialDelay"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "delay"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "scheduleWithFixedDelay",
      "comment": "Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next. The sequence of task executions continues indefinitely until one of the following exceptional completions occur: The task is explicitly cancelled via the returned future. The executor terminates, also resulting in task cancellation. An execution of the task throws an exception. In this case calling get on the returned future will throw ExecutionException, holding the exception as its cause. Subsequent executions are suppressed. Subsequent calls to isDone() on the returned future will return true.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecommand\u003c/code\u003e - the task to execute",
          "\u003ccode\u003einitialDelay\u003c/code\u003e - the time to delay first execution",
          "\u003ccode\u003edelay\u003c/code\u003e - the delay between the termination of one execution and the commencement of the next",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the initialDelay and delay parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if command or unit is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if delay less than or equal to zero"
        ],
        "return": [
          "a ScheduledFuture representing pending completion of the series of repeated tasks. The future\u0027s \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Future.html#get()\"\u003e\u003ccode\u003eget()\u003c/code\u003e\u003c/a\u003e method will never return normally, and will throw an exception upon task cancellation or abnormal termination of a task execution."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.concurrent.ScheduledExecutorService",
  "comment": "An \n\u003ca href\u003d\"ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eExecutorService\u003c/code\u003e\u003c/a\u003e that can schedule commands to run after a given delay, or to execute periodically. \n\u003cp\u003eThe \u003ccode\u003eschedule\u003c/code\u003e methods create tasks with various delays and return a task object that can be used to cancel or check execution. The \u003ccode\u003escheduleAtFixedRate\u003c/code\u003e and \u003ccode\u003escheduleWithFixedDelay\u003c/code\u003e methods create and execute tasks that run periodically until cancelled. \u003c/p\u003e\n\u003cp\u003eCommands submitted using the \u003ca href\u003d\"Executor.html#execute(java.lang.Runnable)\"\u003e\u003ccode\u003eExecutor.execute(Runnable)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eExecutorService\u003c/code\u003e\u003c/a\u003e \u003ccode\u003esubmit\u003c/code\u003e methods are scheduled with a requested delay of zero. Zero and negative delays (but not periods) are also allowed in \u003ccode\u003eschedule\u003c/code\u003e methods, and are treated as requests for immediate execution. \u003c/p\u003e\n\u003cp\u003eAll \u003ccode\u003eschedule\u003c/code\u003e methods accept \u003cem\u003erelative\u003c/em\u003e delays and periods as arguments, not absolute times or dates. It is a simple matter to transform an absolute time represented as a \u003ca href\u003d\"../Date.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e to the required form. For example, to schedule at a certain future \u003ccode\u003edate\u003c/code\u003e, you can use: \u003ccode\u003eschedule(task, date.getTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS)\u003c/code\u003e. Beware however that expiration of a relative delay need not coincide with the current \u003ccode\u003eDate\u003c/code\u003e at which the task is enabled due to network time synchronization protocols, clock drift, or other factors. \u003c/p\u003e\n\u003cp\u003eThe \u003ca href\u003d\"Executors.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eExecutors\u003c/code\u003e\u003c/a\u003e class provides convenient factory methods for the ScheduledExecutorService implementations provided in this package. \u003c/p\u003e\n\u003ch2\u003eUsage Example\u003c/h2\u003e Here is a class with a method that sets up a ScheduledExecutorService to beep every ten seconds for an hour: \n\u003cpre\u003e \u003ccode\u003e\n import static java.util.concurrent.TimeUnit.*;\n class BeeperControl {\n   private final ScheduledExecutorService scheduler \u003d\n     Executors.newScheduledThreadPool(1);\n\n   public void beepForAnHour() {\n     Runnable beeper \u003d () -\u0026gt; System.out.println(\"beep\");\n     ScheduledFuture\u0026lt;?\u0026gt; beeperHandle \u003d\n       scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);\n     Runnable canceller \u003d () -\u0026gt; beeperHandle.cancel(false);\n     scheduler.schedule(canceller, 1, HOURS);\n   }\n }\u003c/code\u003e\u003c/pre\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}