{
  "packageName": "java.util.concurrent",
  "simpleName": "ConcurrentHashMap",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.AbstractMap",
    "parameters": [
      {
        "name": "K",
        "type": "Class"
      },
      {
        "name": "V",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "size",
      "comment": "Returns the number of key-value mappings in this map. If the map contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#size()\"\u003esize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#size()\"\u003esize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the number of key-value mappings in this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEmpty",
      "comment": "Returns true if this map contains no key-value mappings.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#isEmpty()\"\u003eisEmpty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#isEmpty()\"\u003eisEmpty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this map contains no key-value mappings"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that key.equals(k), then this method returns v; otherwise it returns null. (There can be at most one such mapping.)",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#get(java.lang.Object)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#get(java.lang.Object)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key whose associated value is to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null"
        ],
        "return": [
          "the value to which the specified key is mapped, or \n\u003ccode\u003enull\u003c/code\u003e if this map contains no mapping for the key"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "containsKey",
      "comment": "Tests if the specified object is a key in this table.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#containsKey(java.lang.Object)\"\u003econtainsKey\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#containsKey(java.lang.Object)\"\u003econtainsKey\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - possible key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the specified object is a key in this table, as determined by the \n\u003ccode\u003eequals\u003c/code\u003e method; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "containsValue",
      "comment": "Returns true if this map maps one or more keys to the specified value. Note: This method may require a full traversal of the map, and is much slower than method containsKey.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#containsValue(java.lang.Object)\"\u003econtainsValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#containsValue(java.lang.Object)\"\u003econtainsValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - value whose presence in this map is to be tested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified value is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this map maps one or more keys to the specified value"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Maps the specified key to the specified value in this table. Neither the key nor the value can be null. The value can be retrieved by calling the get method with a key that is equal to the original key.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#put(K,V)\"\u003eput\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#put(K,V)\"\u003eput\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003evalue\u003c/code\u003e - value to be associated with the specified key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key or value is null"
        ],
        "return": [
          "the previous value associated with \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there was no mapping for \n\u003ccode\u003ekey\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "putAll",
      "comment": "Copies all of the mappings from the specified map to this one. These mappings replace any mappings that this map had for any of the keys currently in the specified map.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#putAll(java.util.Map)\"\u003eputAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#putAll(java.util.Map)\"\u003eputAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - mappings to be stored in this map"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Removes the key (and its corresponding value) from this map. This method does nothing if the key is not in the map.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#remove(java.lang.Object)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#remove(java.lang.Object)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key that needs to be removed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null"
        ],
        "return": [
          "the previous value associated with \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there was no mapping for \n\u003ccode\u003ekey\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clear",
      "comment": "Removes all of the mappings from this map.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#clear()\"\u003eclear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#clear()\"\u003eclear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ConcurrentHashMap$KeySetView",
        "parameters": [
          {
            "owner": "java.util.concurrent.ConcurrentHashMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.concurrent.ConcurrentHashMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "keySet",
      "comment": "Returns a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from this map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations. The view\u0027s iterators and spliterators are weakly consistent. The view\u0027s spliterator reports Spliterator.CONCURRENT, Spliterator.DISTINCT, and Spliterator.NONNULL.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#keySet()\"\u003ekeySet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#keySet()\"\u003ekeySet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the set view"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "owner": "java.util.concurrent.ConcurrentHashMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "values",
      "comment": "Returns a Collection view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. The collection supports element removal, which removes the corresponding mapping from this map, via the Iterator.remove, Collection.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations. The view\u0027s iterators and spliterators are weakly consistent. The view\u0027s spliterator reports Spliterator.CONCURRENT and Spliterator.NONNULL.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#values()\"\u003evalues\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#values()\"\u003evalues\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the collection view"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.util.Map$Entry",
            "parameters": [
              {
                "owner": "java.util.concurrent.ConcurrentHashMap",
                "name": "K",
                "type": "Variable"
              },
              {
                "owner": "java.util.concurrent.ConcurrentHashMap",
                "name": "V",
                "type": "Variable"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "entrySet",
      "comment": "Returns a Set view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. The view\u0027s iterators and spliterators are weakly consistent. The view\u0027s spliterator reports Spliterator.CONCURRENT, Spliterator.DISTINCT, and Spliterator.NONNULL.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#entrySet()\"\u003eentrySet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the set view"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code value for this Map, i.e., the sum of, for each key-value pair in the map, key.hashCode() ^ value.hashCode().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.Entry.html#hashCode()\"\u003e\u003ccode\u003eMap.Entry.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eSet.equals(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the hash code value for this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this map. The string representation consists of a list of key-value mappings (in no particular order) enclosed in braces (\"{}\"). Adjacent mappings are separated by the characters \", \" (comma and space). Each key-value mapping is rendered as the key followed by an equals sign (\"\u003d\") followed by the associated value.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares the specified object with this map for equality. Returns true if the given object is a map with the same mappings as this map. This operation may return misleading results if either map is concurrently modified during execution of this method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.html\" title\u003d\"class in java.util\"\u003eAbstractMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - object to be compared for equality with this map"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified object is equal to this map"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "putIfAbsent",
      "comment": "If the specified key is not already associated with a value, associates it with the given value. This is equivalent to, for this map:  \n if (!map.containsKey(key))\n   return map.put(key, value);\n else\n   return map.get(key); except that the action is performed atomically.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html#putIfAbsent(K,V)\"\u003eputIfAbsent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003eConcurrentMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#putIfAbsent(K,V)\"\u003eputIfAbsent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003evalue\u003c/code\u003e - value to be associated with the specified key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key or value is null"
        ],
        "return": [
          "the previous value associated with the specified key, or \n\u003ccode\u003enull\u003c/code\u003e if there was no mapping for the key"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Removes the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:  \n if (map.containsKey(key)\n     \u0026\u0026 Objects.equals(map.get(key), value)) {\n   map.remove(key);\n   return true;\n } else {\n   return false;\n } except that the action is performed atomically.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html#remove(java.lang.Object,java.lang.Object)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003eConcurrentMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#remove(java.lang.Object,java.lang.Object)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is associated",
          "\u003ccode\u003evalue\u003c/code\u003e - value expected to be associated with the specified key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the value was removed"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Replaces the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:  \n if (map.containsKey(key)\n     \u0026\u0026 Objects.equals(map.get(key), oldValue)) {\n   map.put(key, newValue);\n   return true;\n } else {\n   return false;\n } except that the action is performed atomically.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html#replace(K,V,V)\"\u003ereplace\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003eConcurrentMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#replace(K,V,V)\"\u003ereplace\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is associated",
          "\u003ccode\u003eoldValue\u003c/code\u003e - value expected to be associated with the specified key",
          "\u003ccode\u003enewValue\u003c/code\u003e - value to be associated with the specified key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any of the arguments are null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the value was replaced"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "replace",
      "comment": "Replaces the entry for a key only if currently mapped to some value. This is equivalent to, for this map:  \n if (map.containsKey(key))\n   return map.put(key, value);\n else\n   return null; except that the action is performed atomically.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html#replace(K,V)\"\u003ereplace\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003eConcurrentMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#replace(K,V)\"\u003ereplace\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is associated",
          "\u003ccode\u003evalue\u003c/code\u003e - value to be associated with the specified key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key or value is null"
        ],
        "return": [
          "the previous value associated with the specified key, or \n\u003ccode\u003enull\u003c/code\u003e if there was no mapping for the key"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOrDefault",
      "comment": "Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html#getOrDefault(java.lang.Object,V)\"\u003egetOrDefault\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003eConcurrentMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#getOrDefault(java.lang.Object,V)\"\u003egetOrDefault\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key whose associated value is to be returned",
          "\u003ccode\u003edefaultValue\u003c/code\u003e - the value to return if this map contains no mapping for the given key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null"
        ],
        "return": [
          "the mapping for the key, if present; else the default value"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "computeIfAbsent",
      "comment": "If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null. The entire method invocation is performed atomically. The supplied function is invoked exactly once per invocation of this method if the key is absent, else not at all. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple. The mapping function must not modify this map during computation.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html#computeIfAbsent(K,java.util.function.Function)\"\u003ecomputeIfAbsent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003eConcurrentMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#computeIfAbsent(K,java.util.function.Function)\"\u003ecomputeIfAbsent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003emappingFunction\u003c/code\u003e - the function to compute a value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key or mappingFunction is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the computation detectably attempts a recursive update to this map that would otherwise never complete",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimeException.html\" title\u003d\"class in java.lang\"\u003eRuntimeException\u003c/a\u003e\u003c/code\u003e - or Error if the mappingFunction does so, in which case the mapping is left unestablished"
        ],
        "return": [
          "the current (existing or computed) value associated with the specified key, or null if the computed value is null"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "computeIfPresent",
      "comment": "If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value. The entire method invocation is performed atomically. The supplied function is invoked exactly once per invocation of this method if the key is present, else not at all. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple. The remapping function must not modify this map during computation.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html#computeIfPresent(K,java.util.function.BiFunction)\"\u003ecomputeIfPresent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003eConcurrentMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#computeIfPresent(K,java.util.function.BiFunction)\"\u003ecomputeIfPresent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which a value may be associated",
          "\u003ccode\u003eremappingFunction\u003c/code\u003e - the function to compute a value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key or remappingFunction is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the computation detectably attempts a recursive update to this map that would otherwise never complete",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimeException.html\" title\u003d\"class in java.lang\"\u003eRuntimeException\u003c/a\u003e\u003c/code\u003e - or Error if the remappingFunction does so, in which case the mapping is unchanged"
        ],
        "return": [
          "the new value associated with the specified key, or null if none"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compute",
      "comment": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). The entire method invocation is performed atomically. The supplied function is invoked exactly once per invocation of this method. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple. The remapping function must not modify this map during computation.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html#compute(K,java.util.function.BiFunction)\"\u003ecompute\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003eConcurrentMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#compute(K,java.util.function.BiFunction)\"\u003ecompute\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003eremappingFunction\u003c/code\u003e - the function to compute a value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key or remappingFunction is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the computation detectably attempts a recursive update to this map that would otherwise never complete",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimeException.html\" title\u003d\"class in java.lang\"\u003eRuntimeException\u003c/a\u003e\u003c/code\u003e - or Error if the remappingFunction does so, in which case the mapping is unchanged"
        ],
        "return": [
          "the new value associated with the specified key, or null if none"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "merge",
      "comment": "If the specified key is not already associated with a (non-null) value, associates it with the given value. Otherwise, replaces the value with the results of the given remapping function, or removes if null. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html#merge(K,V,java.util.function.BiFunction)\"\u003emerge\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003eConcurrentMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#merge(K,V,java.util.function.BiFunction)\"\u003emerge\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html\" title\u003d\"type parameter in ConcurrentHashMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003evalue\u003c/code\u003e - the value to use if absent",
          "\u003ccode\u003eremappingFunction\u003c/code\u003e - the function to recompute a value if present"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key or the remappingFunction is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimeException.html\" title\u003d\"class in java.lang\"\u003eRuntimeException\u003c/a\u003e\u003c/code\u003e - or Error if the remappingFunction does so, in which case the mapping is unchanged"
        ],
        "return": [
          "the new value associated with the specified key, or null if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if some key maps into the specified value in this table. Note that this method is identical in functionality to containsValue(Object), and exists solely to ensure full compatibility with class Hashtable, which supported this method prior to introduction of the Java Collections Framework.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - a value to search for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified value is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if some key maps to the \n\u003ccode\u003evalue\u003c/code\u003e argument in this table as determined by the \n\u003ccode\u003eequals\u003c/code\u003e method; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "owner": "java.util.concurrent.ConcurrentHashMap",
            "name": "K",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "keys",
      "comment": "Returns an enumeration of the keys in this table.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#keySet()\"\u003e\u003ccode\u003ekeySet()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an enumeration of the keys in this table"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "owner": "java.util.concurrent.ConcurrentHashMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "elements",
      "comment": "Returns an enumeration of the values in this table.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html#values()\"\u003e\u003ccode\u003evalues()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an enumeration of the values in this table"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mappingCount",
      "comment": "Returns the number of mappings. This method should be used instead of size() because a ConcurrentHashMap may contain more mappings than can be represented as an int. The value returned is an estimate; the actual count may differ if there are concurrent insertions or removals.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of mappings"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ConcurrentHashMap$KeySetView",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "java.lang.Boolean",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newKeySet",
      "comment": "Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the element type of the returned set"
        ],
        "return": [
          "the new set"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ConcurrentHashMap$KeySetView",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "java.lang.Boolean",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newKeySet",
      "comment": "Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the element type of the returned set"
        ],
        "param": [
          "\u003ccode\u003einitialCapacity\u003c/code\u003e - The implementation performs internal sizing to accommodate this many elements."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the initial capacity of elements is negative"
        ],
        "return": [
          "the new set"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ConcurrentHashMap$KeySetView",
        "parameters": [
          {
            "owner": "java.util.concurrent.ConcurrentHashMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.concurrent.ConcurrentHashMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "keySet",
      "comment": "Returns a Set view of the keys in this map, using the given common mapped value for any additions (i.e., Collection.add(E) and Collection.addAll(Collection)). This is of course only appropriate if it is acceptable to use the same value for all additions from this view.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003emappedValue\u003c/code\u003e - the mapped value to use for any additions"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the mappedValue is null"
        ],
        "return": [
          "the set view"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "forEach",
      "comment": "Performs the given action for each (key, value).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003eaction\u003c/code\u003e - the action"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "forEach",
      "comment": "Performs the given action for each non-null transformation of each (key, value).",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the transformer"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)",
          "\u003ccode\u003eaction\u003c/code\u003e - the action"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "U",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "search",
      "comment": "Returns a non-null result from applying the given search function on each (key, value), or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the search function"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003esearchFunction\u003c/code\u003e - a function returning a non-null result on success, else null"
        ],
        "return": [
          "a non-null result from applying the given search function on each (key, value), or null if none"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "U",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduce",
      "comment": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the transformer"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all (key, value) pairs"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceToDouble",
      "comment": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all (key, value) pairs"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceToLong",
      "comment": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all (key, value) pairs"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceToInt",
      "comment": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all (key, value) pairs"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "forEachKey",
      "comment": "Performs the given action for each key.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003eaction\u003c/code\u003e - the action"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "forEachKey",
      "comment": "Performs the given action for each non-null transformation of each key.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the transformer"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)",
          "\u003ccode\u003eaction\u003c/code\u003e - the action"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "U",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "searchKeys",
      "comment": "Returns a non-null result from applying the given search function on each key, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the search function"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003esearchFunction\u003c/code\u003e - a function returning a non-null result on success, else null"
        ],
        "return": [
          "a non-null result from applying the given search function on each key, or null if none"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "K",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceKeys",
      "comment": "Returns the result of accumulating all keys using the given reducer to combine values, or null if none.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating all keys using the given reducer to combine values, or null if none"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "U",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceKeys",
      "comment": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the transformer"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all keys"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceKeysToDouble",
      "comment": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all keys"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceKeysToLong",
      "comment": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all keys"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceKeysToInt",
      "comment": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all keys"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "forEachValue",
      "comment": "Performs the given action for each value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003eaction\u003c/code\u003e - the action"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "forEachValue",
      "comment": "Performs the given action for each non-null transformation of each value.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the transformer"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)",
          "\u003ccode\u003eaction\u003c/code\u003e - the action"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "U",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "searchValues",
      "comment": "Returns a non-null result from applying the given search function on each value, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the search function"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003esearchFunction\u003c/code\u003e - a function returning a non-null result on success, else null"
        ],
        "return": [
          "a non-null result from applying the given search function on each value, or null if none"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.concurrent.ConcurrentHashMap",
        "name": "V",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceValues",
      "comment": "Returns the result of accumulating all values using the given reducer to combine values, or null if none.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating all values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "U",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceValues",
      "comment": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the transformer"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceValuesToDouble",
      "comment": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceValuesToLong",
      "comment": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceValuesToInt",
      "comment": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all values"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "forEachEntry",
      "comment": "Performs the given action for each entry.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003eaction\u003c/code\u003e - the action"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "forEachEntry",
      "comment": "Performs the given action for each non-null transformation of each entry.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the transformer"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)",
          "\u003ccode\u003eaction\u003c/code\u003e - the action"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "U",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "searchEntries",
      "comment": "Returns a non-null result from applying the given search function on each entry, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the search function"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003esearchFunction\u003c/code\u003e - a function returning a non-null result on success, else null"
        ],
        "return": [
          "a non-null result from applying the given search function on each entry, or null if none"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map$Entry",
        "parameters": [
          {
            "owner": "java.util.concurrent.ConcurrentHashMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.concurrent.ConcurrentHashMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceEntries",
      "comment": "Returns the result of accumulating all entries using the given reducer to combine values, or null if none.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating all entries"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "U",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceEntries",
      "comment": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the return type of the transformer"
        ],
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all entries"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceEntriesToDouble",
      "comment": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all entries"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceEntriesToLong",
      "comment": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all entries"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reduceEntriesToInt",
      "comment": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelismThreshold\u003c/code\u003e - the (estimated) number of elements needed for this operation to be executed in parallel",
          "\u003ccode\u003etransformer\u003c/code\u003e - a function returning the transformation for an element",
          "\u003ccode\u003ebasis\u003c/code\u003e - the identity (initial default value) for the reduction",
          "\u003ccode\u003ereducer\u003c/code\u003e - a commutative associative combining function"
        ],
        "return": [
          "the result of accumulating the given transformation of all entries"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new, empty map with the default initial table size (16).",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "initialCapacity",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new, empty map with an initial table size accommodating the specified number of elements without the need to dynamically resize.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einitialCapacity\u003c/code\u003e - The implementation performs internal sizing to accommodate this many elements."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the initial capacity of elements is negative"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.concurrent.ConcurrentHashMap",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.concurrent.ConcurrentHashMap",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new map with the same mappings as the given map.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the map"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "initialCapacity",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "loadFactor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity) and initial table density (loadFactor).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einitialCapacity\u003c/code\u003e - the initial capacity. The implementation performs internal sizing to accommodate this many elements, given the specified load factor.",
          "\u003ccode\u003eloadFactor\u003c/code\u003e - the load factor (table density) for establishing the initial table size"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the initial capacity of elements is negative or the load factor is nonpositive"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "initialCapacity",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "loadFactor",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "concurrencyLevel",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity), initial table density (loadFactor), and number of concurrently updating threads (concurrencyLevel).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einitialCapacity\u003c/code\u003e - the initial capacity. The implementation performs internal sizing to accommodate this many elements, given the specified load factor.",
          "\u003ccode\u003eloadFactor\u003c/code\u003e - the load factor (table density) for establishing the initial table size",
          "\u003ccode\u003econcurrencyLevel\u003c/code\u003e - the estimated number of concurrently updating threads. The implementation may use this value as a sizing hint."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the initial capacity is negative or the load factor or concurrencyLevel are nonpositive"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.concurrent.ConcurrentHashMap$KeySetView"
  ],
  "genericParameters": [
    {
      "name": "K",
      "type": "Variable"
    },
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.ConcurrentHashMap",
  "comment": "A hash table supporting full concurrency of retrievals and high expected concurrency for updates. This class obeys the same functional specification as \n\u003ca href\u003d\"../Hashtable.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashtable\u003c/code\u003e\u003c/a\u003e, and includes versions of methods corresponding to each method of \n\u003ccode\u003eHashtable\u003c/code\u003e. However, even though all operations are thread-safe, retrieval operations do \n\u003cem\u003enot\u003c/em\u003e entail locking, and there is \n\u003cem\u003enot\u003c/em\u003e any support for locking the entire table in a way that prevents all access. This class is fully interoperable with \n\u003ccode\u003eHashtable\u003c/code\u003e in programs that rely on its thread safety but not on its synchronization details. \n\u003cp\u003eRetrieval operations (including \u003ccode\u003eget\u003c/code\u003e) generally do not block, so may overlap with update operations (including \u003ccode\u003eput\u003c/code\u003e and \u003ccode\u003eremove\u003c/code\u003e). Retrievals reflect the results of the most recently \u003cem\u003ecompleted\u003c/em\u003e update operations holding upon their onset. (More formally, an update operation for a given key bears a \u003cem\u003ehappens-before\u003c/em\u003e relation with any (non-null) retrieval for that key reporting the updated value.) For aggregate operations such as \u003ccode\u003eputAll\u003c/code\u003e and \u003ccode\u003eclear\u003c/code\u003e, concurrent retrievals may reflect insertion or removal of only some entries. Similarly, Iterators, Spliterators and Enumerations return elements reflecting the state of the hash table at some point at or since the creation of the iterator/enumeration. They do \u003cem\u003enot\u003c/em\u003e throw \u003ca href\u003d\"../ConcurrentModificationException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eConcurrentModificationException\u003c/code\u003e\u003c/a\u003e. However, iterators are designed to be used by only one thread at a time. Bear in mind that the results of aggregate status methods including \u003ccode\u003esize\u003c/code\u003e, \u003ccode\u003eisEmpty\u003c/code\u003e, and \u003ccode\u003econtainsValue\u003c/code\u003e are typically useful only when a map is not undergoing concurrent updates in other threads. Otherwise the results of these methods reflect transient states that may be adequate for monitoring or estimation purposes, but not for program control. \u003c/p\u003e\n\u003cp\u003eThe table is dynamically expanded when there are too many collisions (i.e., keys that have distinct hash codes but fall into the same slot modulo the table size), with the expected average effect of maintaining roughly two bins per mapping (corresponding to a 0.75 load factor threshold for resizing). There may be much variance around this average as mappings are added and removed, but overall, this maintains a commonly accepted time/space tradeoff for hash tables. However, resizing this or any other kind of hash table may be a relatively slow operation. When possible, it is a good idea to provide a size estimate as an optional \u003ccode\u003e initialCapacity\u003c/code\u003e constructor argument. An additional optional \u003ccode\u003eloadFactor\u003c/code\u003e constructor argument provides a further means of customizing initial table capacity by specifying the table density to be used in calculating the amount of space to allocate for the given number of elements. Also, for compatibility with previous versions of this class, constructors may optionally specify an expected \u003ccode\u003econcurrencyLevel\u003c/code\u003e as an additional hint for internal sizing. Note that using many keys with exactly the same \u003ccode\u003ehashCode()\u003c/code\u003e is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are \u003ca href\u003d\"../../lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e, this class may use comparison order among keys to help break ties. \u003c/p\u003e\n\u003cp\u003eA \u003ca href\u003d\"../Set.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSet\u003c/code\u003e\u003c/a\u003e projection of a ConcurrentHashMap may be created (using \u003ca href\u003d\"#newKeySet()\"\u003e\u003ccode\u003enewKeySet()\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"#newKeySet(int)\"\u003e\u003ccode\u003enewKeySet(int)\u003c/code\u003e\u003c/a\u003e), or viewed (using \u003ca href\u003d\"#keySet(V)\"\u003e\u003ccode\u003ekeySet(Object)\u003c/code\u003e\u003c/a\u003e when only keys are of interest, and the mapped values are (perhaps transiently) not used or all take the same mapping value. \u003c/p\u003e\n\u003cp\u003eA ConcurrentHashMap can be used as a scalable frequency map (a form of histogram or multiset) by using \u003ca href\u003d\"atomic/LongAdder.html\" title\u003d\"class in java.util.concurrent.atomic\"\u003e\u003ccode\u003eLongAdder\u003c/code\u003e\u003c/a\u003e values and initializing via \u003ca href\u003d\"#computeIfAbsent(K,java.util.function.Function)\"\u003e\u003ccode\u003ecomputeIfAbsent\u003c/code\u003e\u003c/a\u003e. For example, to add a count to a \u003ccode\u003eConcurrentHashMap\u0026lt;String,LongAdder\u0026gt; freqs\u003c/code\u003e, you can use \u003ccode\u003efreqs.computeIfAbsent(key, k -\u0026gt; new LongAdder()).increment();\u003c/code\u003e \u003c/p\u003e\n\u003cp\u003eThis class and its views and iterators implement all of the \u003cem\u003eoptional\u003c/em\u003e methods of the \u003ca href\u003d\"../Map.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"../Iterator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eIterator\u003c/code\u003e\u003c/a\u003e interfaces. \u003c/p\u003e\n\u003cp\u003eLike \u003ca href\u003d\"../Hashtable.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashtable\u003c/code\u003e\u003c/a\u003e but unlike \u003ca href\u003d\"../HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e, this class does \u003cem\u003enot\u003c/em\u003e allow \u003ccode\u003enull\u003c/code\u003e to be used as a key or value. \u003c/p\u003e\n\u003cp\u003eConcurrentHashMaps support a set of sequential and parallel bulk operations that, unlike most \u003ca href\u003d\"../stream/Stream.html\" title\u003d\"interface in java.util.stream\"\u003e\u003ccode\u003eStream\u003c/code\u003e\u003c/a\u003e methods, are designed to be safely, and often sensibly, applied even with maps that are being concurrently updated by other threads; for example, when computing a snapshot summary of the values in a shared registry. There are three kinds of operation, each with four forms, accepting functions with keys, values, entries, and (key, value) pairs as arguments and/or return values. Because the elements of a ConcurrentHashMap are not ordered in any particular way, and may be processed in different orders in different parallel executions, the correctness of supplied functions should not depend on any ordering, or on any other objects or values that may transiently change while computation is in progress; and except for forEach actions, should ideally be side-effect-free. Bulk operations on \u003ca href\u003d\"../Map.Entry.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eMap.Entry\u003c/code\u003e\u003c/a\u003e objects do not support method \u003ccode\u003esetValue\u003c/code\u003e. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eforEach: Performs a given action on each element. A variant form applies a given transformation on each element before performing the action. \u003c/li\u003e\n \u003cli\u003esearch: Returns the first available non-null result of applying a given function on each element; skipping further search when a result is found. \u003c/li\u003e\n \u003cli\u003ereduce: Accumulates each element. The supplied reduction function cannot rely on ordering (more formally, it should be both associative and commutative). There are five variants: \n  \u003cul\u003e \n   \u003cli\u003ePlain reductions. (There is not a form of this method for (key, value) function arguments since there is no corresponding return type.) \u003c/li\u003e\n   \u003cli\u003eMapped reductions that accumulate the results of a given function applied to each element. \u003c/li\u003e\n   \u003cli\u003eReductions to scalar doubles, longs, and ints, using a given basis value. \u003c/li\u003e\n  \u003c/ul\u003e \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThese bulk operations accept a \u003ccode\u003eparallelismThreshold\u003c/code\u003e argument. Methods proceed sequentially if the current map size is estimated to be less than the given threshold. Using a value of \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e suppresses all parallelism. Using a value of \u003ccode\u003e1\u003c/code\u003e results in maximal parallelism by partitioning into enough subtasks to fully utilize the \u003ca href\u003d\"ForkJoinPool.html#commonPool()\"\u003e\u003ccode\u003eForkJoinPool.commonPool()\u003c/code\u003e\u003c/a\u003e that is used for all parallel computations. Normally, you would initially choose one of these extreme values, and then measure performance of using in-between values that trade off overhead versus throughput. \u003c/p\u003e\n\u003cp\u003eThe concurrency properties of bulk operations follow from those of ConcurrentHashMap: Any non-null result returned from \u003ccode\u003eget(key)\u003c/code\u003e and related access methods bears a happens-before relation with the associated insertion or update. The result of any bulk operation reflects the composition of these per-element relations (but is not necessarily atomic with respect to the map as a whole unless it is somehow known to be quiescent). Conversely, because keys and values in the map are never null, null serves as a reliable atomic indicator of the current lack of any result. To maintain this property, null serves as an implicit basis for all non-scalar reduction operations. For the double, long, and int versions, the basis should be one that, when combined with any other value, returns that other value (more formally, it should be the identity element for the reduction). Most common reductions have these properties; for example, computing a sum with basis 0 or a minimum with basis MAX_VALUE. \u003c/p\u003e\n\u003cp\u003eSearch and transformation functions provided as arguments should similarly return null to indicate the lack of any result (in which case it is not used). In the case of mapped reductions, this also enables transformations to serve as filters, returning null (or, in the case of primitive specializations, the identity basis) if the element should not be combined. You can create compound transformations and filterings by composing them yourself under this \"null means there is nothing there now\" rule before using them in search or reduce operations. \u003c/p\u003e\n\u003cp\u003eMethods accepting and/or returning Entry arguments maintain key-value associations. They may be useful for example when finding the key for the greatest value. Note that \"plain\" Entry arguments can be supplied using \u003ccode\u003enew AbstractMap.SimpleEntry(k,v)\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eBulk operations may complete abruptly, throwing an exception encountered in the application of a supplied function. Bear in mind when handling such exceptions that other concurrently executing functions could also have thrown exceptions, or would have done so if the first exception had not occurred. \u003c/p\u003e\n\u003cp\u003eSpeedups for parallel compared to sequential forms are common but not guaranteed. Parallel operations involving brief functions on small maps may execute more slowly than sequential forms if the underlying work to parallelize the computation is more expensive than the computation itself. Similarly, parallelization may not lead to much actual parallelism if all processors are busy performing unrelated tasks. \u003c/p\u003e\n\u003cp\u003eAll arguments to all task methods must be non-null. \u003c/p\u003e\n\u003cp\u003eThis class is a member of the \u003ca href\u003d\"../../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.concurrent.ConcurrentHashMap\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.5"
    ]
  }
}