{
  "packageName": "java.util.concurrent",
  "simpleName": "ForkJoinPool",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.concurrent.AbstractExecutorService",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "defaultForkJoinWorkerThreadFactory",
      "comment": "Creates a new ForkJoinWorkerThread. This factory is used unless overridden in ForkJoinPool constructors.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinPool",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "commonPool",
      "comment": "Returns the common pool instance. This pool is statically constructed; its run state is unaffected by attempts to shutdown() or shutdownNow(). However this pool and any ongoing processing are automatically terminated upon program System.exit(int). Any program that relies on asynchronous task processing to complete before program termination should invoke commonPool().awaitQuiescence, before exit.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the common pool instance"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "invoke",
      "comment": "Performs the given task, returning its result upon completion. If the computation encounters an unchecked Exception or Error, it is rethrown as the outcome of this invocation. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using ex.printStackTrace()) of both the current thread as well as the thread actually encountering the exception; minimally only the latter.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the task\u0027s result"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution"
        ],
        "return": [
          "the task\u0027s result"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "execute",
      "comment": "Arranges for (asynchronous) execution of the given task.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "execute",
      "comment": "Description copied from interface: Executor",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the runnable task"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "submit",
      "comment": "Submits a ForkJoinTask for execution.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the task\u0027s result"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution"
        ],
        "return": [
          "the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "submit",
      "comment": "Description copied from interface: ExecutorService",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the task\u0027s result"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html#submit(java.util.concurrent.Callable)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html\" title\u003d\"class in java.util.concurrent\"\u003eAbstractExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html#submit(java.util.concurrent.Callable)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution"
        ],
        "return": [
          "a Future representing pending completion of the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "submit",
      "comment": "Description copied from interface: ExecutorService",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the result"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html#submit(java.lang.Runnable,T)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html\" title\u003d\"class in java.util.concurrent\"\u003eAbstractExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html#submit(java.lang.Runnable,T)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit",
          "\u003ccode\u003eresult\u003c/code\u003e - the result to return"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution"
        ],
        "return": [
          "a Future representing pending completion of the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "submit",
      "comment": "Description copied from interface: ExecutorService",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html#submit(java.lang.Runnable)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/AbstractExecutorService.html\" title\u003d\"class in java.util.concurrent\"\u003eAbstractExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html#submit(java.lang.Runnable)\"\u003esubmit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003eExecutorService\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etask\u003c/code\u003e - the task to submit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the task is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if the task cannot be scheduled for execution"
        ],
        "return": [
          "a Future representing pending completion of the task"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.util.concurrent.Future",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "invokeAll",
      "comment": "Description copied from interface: ExecutorService",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the values returned from the tasks"
        ],
        "param": [
          "\u003ccode\u003etasks\u003c/code\u003e - the collection of tasks"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if tasks or any of its elements are \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003eRejectedExecutionException\u003c/a\u003e\u003c/code\u003e - if any task cannot be scheduled for execution"
        ],
        "return": [
          "a list of Futures representing the tasks, in the same sequential order as produced by the iterator for the given task list, each of which has completed"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFactory",
      "comment": "Returns the factory used for constructing new workers.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the factory used for constructing new workers"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Thread$UncaughtExceptionHandler",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUncaughtExceptionHandler",
      "comment": "Returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the handler, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParallelism",
      "comment": "Returns the targeted parallelism level of this pool.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the targeted parallelism level of this pool"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getCommonPoolParallelism",
      "comment": "Returns the targeted parallelism level of the common pool.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the targeted parallelism level of the common pool"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPoolSize",
      "comment": "Returns the number of worker threads that have started but not yet terminated. The result returned by this method may differ from getParallelism() when threads are created to maintain parallelism when others are cooperatively blocked.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of worker threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAsyncMode",
      "comment": "Returns true if this pool uses local first-in-first-out scheduling mode for forked tasks that are never joined.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this pool uses async mode"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRunningThreadCount",
      "comment": "Returns an estimate of the number of worker threads that are not blocked waiting to join tasks or for other managed synchronization. This method may overestimate the number of running threads.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of worker threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActiveThreadCount",
      "comment": "Returns an estimate of the number of threads that are currently stealing or executing tasks. This method may overestimate the number of active threads.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of active threads"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isQuiescent",
      "comment": "Returns true if all worker threads are currently idle. An idle worker is one that cannot obtain a task to execute because none are available to steal from other threads, and there are no pending submissions to the pool. This method is conservative; it might not return true immediately upon idleness of all threads, but will eventually become true if threads remain inactive.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if all threads are currently idle"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getStealCount",
      "comment": "Returns an estimate of the total number of completed tasks that were executed by a thread other than their submitter. The reported value underestimates the actual total number of steals when the pool is not quiescent. This value may be useful for monitoring and tuning fork/join programs: in general, steal counts should be high enough to keep threads busy, but low enough to avoid overhead and contention across threads.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of steals"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getQueuedTaskCount",
      "comment": "Returns an estimate of the total number of tasks currently held in queues by worker threads (but not including tasks submitted to the pool that have not begun executing). This value is only an approximation, obtained by iterating across all threads in the pool. This method may be useful for tuning task granularities.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of queued tasks"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getQueuedSubmissionCount",
      "comment": "Returns an estimate of the number of tasks submitted to this pool that have not yet begun executing. This method may take time proportional to the number of submissions.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of queued submissions"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasQueuedSubmissions",
      "comment": "Returns true if there are any tasks submitted to this pool that have not yet begun executing.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there are any queued submissions"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.ForkJoinTask",
        "parameters": [
          {
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "pollSubmission",
      "comment": "Removes and returns the next unexecuted submission if one is available. This method may be useful in extensions to this class that re-assign work in systems with multiple pools.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the next submission, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "drainTasksTo",
      "comment": "Removes all available unexecuted submitted and forked tasks from scheduling queues and adds them to the given collection, without altering their execution status. These may include artificially generated or wrapped tasks. This method is designed to be invoked only when the pool is known to be quiescent. Invocations at other times may not remove all tasks. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the collection to transfer elements into"
        ],
        "return": [
          "the number of elements transferred"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string identifying this pool, as well as its state, including indications of run state, parallelism level, and worker and task counts.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string identifying this pool, as well as its state"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shutdown",
      "comment": "Possibly initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no effect on execution state if this is the commonPool(), and no additional effect if already shut down. Tasks that are in the process of being submitted concurrently during the course of this method may or may not be rejected.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller is not permitted to modify threads because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.Runnable",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "shutdownNow",
      "comment": "Possibly attempts to cancel and/or stop all tasks, and reject all subsequently submitted tasks. Invocation has no effect on execution state if this is the commonPool(), and no additional effect if already shut down. Otherwise, tasks that are in the process of being submitted or executed concurrently during the course of this method may or may not be rejected. This method cancels both existing and unexecuted tasks, in order to permit termination in the presence of task dependencies. So the method always returns an empty list (unlike the case for some other Executors).",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller is not permitted to modify threads because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e"
        ],
        "return": [
          "an empty list"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isTerminated",
      "comment": "Returns true if all tasks have completed following shut down.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if all tasks have completed following shut down"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isTerminating",
      "comment": "Returns true if the process of termination has commenced but not yet completed. This method may be useful for debugging. A return of true reported a sufficient period after shutdown may indicate that submitted tasks have ignored or suppressed interruption, or are waiting for I/O, causing this executor not to properly terminate. (See the advisory notes for class ForkJoinTask stating that tasks should not normally entail blocking operations. But if they do, they must abort them on interrupt.)",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if terminating but not yet terminated"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isShutdown",
      "comment": "Returns true if this pool has been shut down.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this pool has been shut down"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "awaitTermination",
      "comment": "Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. Because the commonPool() never terminates until program shutdown, when applied to the common pool, this method is equivalent to awaitQuiescence(long, TimeUnit) but always returns false.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the timeout argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if interrupted while waiting"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this executor terminated and \n\u003ccode\u003efalse\u003c/code\u003e if the timeout elapsed before termination"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "awaitQuiescence",
      "comment": "If called by a ForkJoinTask operating in this pool, equivalent in effect to ForkJoinTask.helpQuiesce(). Otherwise, waits and/or attempts to assist performing tasks until this pool isQuiescent() or the indicated timeout elapses.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - the maximum time to wait",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit of the timeout argument"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if quiescent; \n\u003ccode\u003efalse\u003c/code\u003e if the timeout elapsed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "managedBlock",
      "comment": "Runs the given possibly blocking task. When running in a ForkJoinPool, this method possibly arranges for a spare thread to be activated if necessary to ensure sufficient parallelism while the current thread is blocked in blocker.block(). This method repeatedly calls blocker.isReleasable() and blocker.block() until either method returns true. Every call to blocker.block() is preceded by a call to blocker.isReleasable() that returned false. If not running in a ForkJoinPool, this method is behaviorally equivalent to  \n while (!blocker.isReleasable())\n   if (blocker.block())\n     break; If running in a ForkJoinPool, the pool may first be expanded to ensure sufficient parallelism available during the call to blocker.block().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eblocker\u003c/code\u003e - the blocker task"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eblocker.block()\u003c/code\u003e did so"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a ForkJoinPool with parallelism equal to Runtime.availableProcessors(), using defaults for all other parameters (see ForkJoinPool(int, ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean, int, int, int, Predicate, long, TimeUnit)).",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller is not permitted to modify threads because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "parallelism",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a ForkJoinPool with the indicated parallelism level, using defaults for all other parameters (see ForkJoinPool(int, ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean, int, int, int, Predicate, long, TimeUnit)).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelism\u003c/code\u003e - the parallelism level"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if parallelism less than or equal to zero, or greater than implementation limit",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller is not permitted to modify threads because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "parallelism",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory",
            "type": "Class"
          },
          "name": "factory",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Thread$UncaughtExceptionHandler",
            "type": "Class"
          },
          "name": "handler",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "asyncMode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a ForkJoinPool with the given parameters (using defaults for others -- see ForkJoinPool(int, ForkJoinWorkerThreadFactory, UncaughtExceptionHandler, boolean, int, int, int, Predicate, long, TimeUnit)).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelism\u003c/code\u003e - the parallelism level. For default value, use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runtime.html#availableProcessors()\"\u003e\u003ccode\u003eRuntime.availableProcessors()\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003efactory\u003c/code\u003e - the factory for creating new threads. For default value, use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#defaultForkJoinWorkerThreadFactory\"\u003e\u003ccode\u003edefaultForkJoinWorkerThreadFactory\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003ehandler\u003c/code\u003e - the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks. For default value, use \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003easyncMode\u003c/code\u003e - if true, establishes local first-in-first-out scheduling mode for forked tasks that are never joined. This mode may be more appropriate than default locally stack-based mode in applications in which worker threads only process event-style asynchronous tasks. For default value, use \n\u003ccode\u003efalse\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if parallelism less than or equal to zero, or greater than implementation limit",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the factory is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller is not permitted to modify threads because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "parallelism",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory",
            "type": "Class"
          },
          "name": "factory",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Thread$UncaughtExceptionHandler",
            "type": "Class"
          },
          "name": "handler",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "asyncMode",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "corePoolSize",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "maximumPoolSize",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "minimumRunnable",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "java.util.concurrent.ForkJoinPool",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "saturate",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "keepAliveTime",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "name": "unit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a ForkJoinPool with the given parameters.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparallelism\u003c/code\u003e - the parallelism level. For default value, use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Runtime.html#availableProcessors()\"\u003e\u003ccode\u003eRuntime.availableProcessors()\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003efactory\u003c/code\u003e - the factory for creating new threads. For default value, use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinPool.html#defaultForkJoinWorkerThreadFactory\"\u003e\u003ccode\u003edefaultForkJoinWorkerThreadFactory\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003ehandler\u003c/code\u003e - the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks. For default value, use \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003easyncMode\u003c/code\u003e - if true, establishes local first-in-first-out scheduling mode for forked tasks that are never joined. This mode may be more appropriate than default locally stack-based mode in applications in which worker threads only process event-style asynchronous tasks. For default value, use \n\u003ccode\u003e false\u003c/code\u003e.",
          "\u003ccode\u003ecorePoolSize\u003c/code\u003e - the number of threads to keep in the pool (unless timed out after an elapsed keep-alive). Normally (and by default) this is the same value as the parallelism level, but may be set to a larger value to reduce dynamic overhead if tasks regularly block. Using a smaller value (for example \n\u003ccode\u003e0\u003c/code\u003e) has the same effect as the default.",
          "\u003ccode\u003emaximumPoolSize\u003c/code\u003e - the maximum number of threads allowed. When the maximum is reached, attempts to replace blocked threads fail. (However, because creation and termination of different threads may overlap, and may be managed by the given thread factory, this value may be transiently exceeded.) To arrange the same value as is used by default for the common pool, use \n\u003ccode\u003e256\u003c/code\u003e plus the \n\u003ccode\u003eparallelism\u003c/code\u003e level. (By default, the common pool allows a maximum of 256 spare threads.) Using a value (for example \n\u003ccode\u003e Integer.MAX_VALUE\u003c/code\u003e) larger than the implementation\u0027s total thread limit has the same effect as using this limit (which is the default).",
          "\u003ccode\u003eminimumRunnable\u003c/code\u003e - the minimum allowed number of core threads not blocked by a join or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinPool.ManagedBlocker.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinPool.ManagedBlocker\u003c/code\u003e\u003c/a\u003e. To ensure progress, when too few unblocked threads exist and unexecuted tasks may exist, new threads are constructed, up to the given maximumPoolSize. For the default value, use \n\u003ccode\u003e 1\u003c/code\u003e, that ensures liveness. A larger value might improve throughput in the presence of blocked activities, but might not, due to increased overhead. A value of zero may be acceptable when submitted tasks cannot have dependencies requiring additional threads.",
          "\u003ccode\u003esaturate\u003c/code\u003e - if non-null, a predicate invoked upon attempts to create more than the maximum total allowed threads. By default, when a thread is about to block on a join or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ForkJoinPool.ManagedBlocker.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinPool.ManagedBlocker\u003c/code\u003e\u003c/a\u003e, but cannot be replaced because the maximumPoolSize would be exceeded, a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eRejectedExecutionException\u003c/code\u003e\u003c/a\u003e is thrown. But if this predicate returns \n\u003ccode\u003etrue\u003c/code\u003e, then no exception is thrown, so the pool continues to operate with fewer than the target number of runnable threads, which might not ensure progress.",
          "\u003ccode\u003ekeepAliveTime\u003c/code\u003e - the elapsed time since last use before a thread is terminated (and then later replaced if needed). For the default value, use \n\u003ccode\u003e60, TimeUnit.SECONDS\u003c/code\u003e.",
          "\u003ccode\u003eunit\u003c/code\u003e - the time unit for the \n\u003ccode\u003ekeepAliveTime\u003c/code\u003e argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if parallelism is less than or equal to zero, or is greater than implementation limit, or if maximumPoolSize is less than parallelism, of if the keepAliveTime is less than or equal to zero.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the factory is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller is not permitted to modify threads because it does not hold \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"modifyThread\")\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.concurrent.ForkJoinPool$ManagedBlocker",
    "java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.concurrent.ForkJoinPool",
  "comment": "An \n\u003ca href\u003d\"ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eExecutorService\u003c/code\u003e\u003c/a\u003e for running \n\u003ca href\u003d\"ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinTask\u003c/code\u003e\u003c/a\u003es. A \n\u003ccode\u003eForkJoinPool\u003c/code\u003e provides the entry point for submissions from non-\n\u003ccode\u003eForkJoinTask\u003c/code\u003e clients, as well as management and monitoring operations. \n\u003cp\u003eA \u003ccode\u003eForkJoinPool\u003c/code\u003e differs from other kinds of \u003ca href\u003d\"ExecutorService.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eExecutorService\u003c/code\u003e\u003c/a\u003e mainly by virtue of employing \u003cem\u003ework-stealing\u003c/em\u003e: all threads in the pool attempt to find and execute tasks submitted to the pool and/or created by other active tasks (eventually blocking waiting for work if none exist). This enables efficient processing when most tasks spawn other subtasks (as do most \u003ccode\u003eForkJoinTask\u003c/code\u003es), as well as when many small tasks are submitted to the pool from external clients. Especially when setting \u003cem\u003easyncMode\u003c/em\u003e to true in constructors, \u003ccode\u003e ForkJoinPool\u003c/code\u003es may also be appropriate for use with event-style tasks that are never joined. All worker threads are initialized with \u003ca href\u003d\"../../lang/Thread.html#isDaemon()\"\u003e\u003ccode\u003eThread.isDaemon()\u003c/code\u003e\u003c/a\u003e set \u003ccode\u003etrue\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eA static \u003ca href\u003d\"#commonPool()\"\u003e\u003ccode\u003ecommonPool()\u003c/code\u003e\u003c/a\u003e is available and appropriate for most applications. The common pool is used by any ForkJoinTask that is not explicitly submitted to a specified pool. Using the common pool normally reduces resource usage (its threads are slowly reclaimed during periods of non-use, and reinstated upon subsequent use). \u003c/p\u003e\n\u003cp\u003eFor applications that require separate or custom pools, a \u003ccode\u003e ForkJoinPool\u003c/code\u003e may be constructed with a given target parallelism level; by default, equal to the number of available processors. The pool attempts to maintain enough active (or available) threads by dynamically adding, suspending, or resuming internal worker threads, even if some tasks are stalled waiting to join others. However, no such adjustments are guaranteed in the face of blocked I/O or other unmanaged synchronization. The nested \u003ca href\u003d\"ForkJoinPool.ManagedBlocker.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinPool.ManagedBlocker\u003c/code\u003e\u003c/a\u003e interface enables extension of the kinds of synchronization accommodated. The default policies may be overridden using a constructor with parameters corresponding to those documented in class \u003ca href\u003d\"ThreadPoolExecutor.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eThreadPoolExecutor\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003eIn addition to execution and lifecycle control methods, this class provides status check methods (for example \u003ca href\u003d\"#getStealCount()\"\u003e\u003ccode\u003egetStealCount()\u003c/code\u003e\u003c/a\u003e) that are intended to aid in developing, tuning, and monitoring fork/join applications. Also, method \u003ca href\u003d\"#toString()\"\u003e\u003ccode\u003etoString()\u003c/code\u003e\u003c/a\u003e returns indications of pool state in a convenient form for informal monitoring. \u003c/p\u003e\n\u003cp\u003eAs is the case with other ExecutorServices, there are three main task execution methods summarized in the following table. These are designed to be used primarily by clients not already engaged in fork/join computations in the current pool. The main forms of these methods accept instances of \u003ccode\u003eForkJoinTask\u003c/code\u003e, but overloaded forms also allow mixed execution of plain \u003ccode\u003e Runnable\u003c/code\u003e- or \u003ccode\u003eCallable\u003c/code\u003e- based activities as well. However, tasks that are already executing in a pool should normally instead use the within-computation forms listed in the table unless using async event-style tasks that are not usually joined, in which case there is little difference among choice of methods. \u003c/p\u003e\n\u003ctable class\u003d\"plain\"\u003e \n \u003ccaption\u003e\n  Summary of task execution methods\n \u003c/caption\u003e \n \u003ctbody\u003e\n  \u003ctr\u003e \n   \u003ctd\u003e\u003c/td\u003e \n   \u003cth scope\u003d\"col\"\u003e Call from non-fork/join clients\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003e Call from within fork/join computations\u003c/th\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"text-align:left\"\u003e Arrange async execution\u003c/th\u003e \n   \u003ctd\u003e \u003ca href\u003d\"#execute(java.util.concurrent.ForkJoinTask)\"\u003e\u003ccode\u003eexecute(ForkJoinTask)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e \u003ca href\u003d\"ForkJoinTask.html#fork()\"\u003e\u003ccode\u003eForkJoinTask.fork()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"text-align:left\"\u003e Await and obtain result\u003c/th\u003e \n   \u003ctd\u003e \u003ca href\u003d\"#invoke(java.util.concurrent.ForkJoinTask)\"\u003e\u003ccode\u003einvoke(ForkJoinTask)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e \u003ca href\u003d\"ForkJoinTask.html#invoke()\"\u003e\u003ccode\u003eForkJoinTask.invoke()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\" style\u003d\"text-align:left\"\u003e Arrange exec and obtain Future\u003c/th\u003e \n   \u003ctd\u003e \u003ca href\u003d\"#submit(java.util.concurrent.ForkJoinTask)\"\u003e\u003ccode\u003esubmit(ForkJoinTask)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e \u003ca href\u003d\"ForkJoinTask.html#fork()\"\u003e\u003ccode\u003eForkJoinTask.fork()\u003c/code\u003e\u003c/a\u003e (ForkJoinTasks \u003cem\u003eare\u003c/em\u003e Futures)\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e\n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe parameters used to construct the common pool may be controlled by setting the following \u003ca href\u003d\"../../lang/System.html#getProperty(java.lang.String)\"\u003esystem properties\u003c/a\u003e: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003e\u003cspan id\u003d\"java.util.concurrent.ForkJoinPool.common.parallelism\" class\u003d\"search-tag-result\"\u003ejava.util.concurrent.ForkJoinPool.common.parallelism\u003c/span\u003e\u003c/code\u003e - the parallelism level, a non-negative integer \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003e\u003cspan id\u003d\"java.util.concurrent.ForkJoinPool.common.threadFactory\" class\u003d\"search-tag-result\"\u003ejava.util.concurrent.ForkJoinPool.common.threadFactory\u003c/span\u003e\u003c/code\u003e - the class name of a \u003ca href\u003d\"ForkJoinPool.ForkJoinWorkerThreadFactory.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eForkJoinPool.ForkJoinWorkerThreadFactory\u003c/code\u003e\u003c/a\u003e. The \u003ca href\u003d\"../../lang/ClassLoader.html#getSystemClassLoader()\"\u003esystem class loader\u003c/a\u003e is used to load this class. \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003e\u003cspan id\u003d\"java.util.concurrent.ForkJoinPool.common.exceptionHandler\" class\u003d\"search-tag-result\"\u003ejava.util.concurrent.ForkJoinPool.common.exceptionHandler\u003c/span\u003e\u003c/code\u003e - the class name of a \u003ca href\u003d\"../../lang/Thread.UncaughtExceptionHandler.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eThread.UncaughtExceptionHandler\u003c/code\u003e\u003c/a\u003e. The \u003ca href\u003d\"../../lang/ClassLoader.html#getSystemClassLoader()\"\u003esystem class loader\u003c/a\u003e is used to load this class. \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003e\u003cspan id\u003d\"java.util.concurrent.ForkJoinPool.common.maximumSpares\" class\u003d\"search-tag-result\"\u003ejava.util.concurrent.ForkJoinPool.common.maximumSpares\u003c/span\u003e\u003c/code\u003e - the maximum number of allowed extra threads to maintain target parallelism (default 256). \u003c/li\u003e\n\u003c/ul\u003e If no thread factory is supplied via a system property, then the common pool uses a factory that uses the system class loader as the \n\u003ca href\u003d\"../../lang/Thread.html#getContextClassLoader()\"\u003ethread context class loader\u003c/a\u003e. In addition, if a \n\u003ca href\u003d\"../../lang/SecurityManager.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityManager\u003c/code\u003e\u003c/a\u003e is present, then the common pool uses a factory supplying threads that have no \n\u003ca href\u003d\"../../security/Permissions.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissions\u003c/code\u003e\u003c/a\u003e enabled. Upon any error in establishing these settings, default parameters are used. It is possible to disable or limit the use of threads in the common pool by setting the parallelism property to zero, and/or using a factory that may return \n\u003ccode\u003enull\u003c/code\u003e. However doing so may cause unjoined tasks to never be executed. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eImplementation notes\u003c/b\u003e: This implementation restricts the maximum number of running threads to 32767. Attempts to create pools with greater than the maximum number result in \u003ccode\u003eIllegalArgumentException\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThis implementation rejects submitted tasks (that is, by throwing \u003ca href\u003d\"RejectedExecutionException.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eRejectedExecutionException\u003c/code\u003e\u003c/a\u003e) only when the pool is shut down or internal resources have been exhausted.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}