{
  "packageName": "java.util",
  "simpleName": "AbstractList",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.AbstractCollection",
    "parameters": [
      {
        "name": "E",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 132,
      "name": "modCount",
      "comment": "The number of times this list has been structurally modified. Structural modifications are those that change the size of the list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results. This field is used by the iterator and list iterator implementation returned by the iterator and listIterator methods. If the value of this field changes unexpectedly, the iterator (or list iterator) will throw a ConcurrentModificationException in response to the next, remove, previous, set or add operations. This provides fail-fast behavior, rather than non-deterministic behavior in the face of concurrent modification during iteration. Use of this field by subclasses is optional. If a subclass wishes to provide fail-fast iterators (and list iterators), then it merely has to increment this field in its add(int, E) and remove(int) methods (and any other methods that it overrides that result in structural modifications to the list). A single call to add(int, E) or remove(int) must add no more than one to this field, or the iterators (and list iterators) will throw bogus ConcurrentModificationExceptions. If an implementation does not wish to provide fail-fast iterators, this field may be ignored.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Appends the specified element to the end of this list (optional operation). Lists that support this operation may place limitations on what elements may be added to this list. In particular, some lists will refuse to add null elements, and others will impose restrictions on the type of elements that may be added. List classes should clearly specify in their documentation any restrictions on what elements may be added.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation calls \n\u003ccode\u003eadd(size(), e)\u003c/code\u003e. \n\u003cp\u003eNote that this implementation throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e unless \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html#add(int,E)\"\u003e\u003ccode\u003eadd(int, E)\u003c/code\u003e\u003c/a\u003e is overridden.\u003c/p\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractCollection.html#add(E)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractCollection.html\" title\u003d\"class in java.util\"\u003eAbstractCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#add(E)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#add(E)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - element to be appended to this list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eadd\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of this element prevents it from being added to this list"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e (as specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#add(E)\"\u003e\u003ccode\u003eCollection.add(E)\u003c/code\u003e\u003c/a\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.AbstractList",
        "name": "E",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "get",
      "comment": "Returns the element at the specified position in this list.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#get(int)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - index of the element to return"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e)"
        ],
        "return": [
          "the element at the specified position in this list"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.AbstractList",
        "name": "E",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "set",
      "comment": "Replaces the element at the specified position in this list with the specified element (optional operation).",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation always throws an \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#set(int,E)\"\u003eset\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - index of the element to replace",
          "\u003ccode\u003eelement\u003c/code\u003e - element to be stored at the specified position"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eset\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e)"
        ],
        "return": [
          "the element previously at the specified position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation always throws an \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#add(int,E)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - index at which the specified element is to be inserted",
          "\u003ccode\u003eelement\u003c/code\u003e - element to be inserted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eadd\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.AbstractList",
        "name": "E",
        "type": "Variable"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Removes the element at the specified position in this list (optional operation). Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation always throws an \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#remove(int)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the element to be removed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eremove\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e)"
        ],
        "return": [
          "the element previously at the specified position"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "indexOf",
      "comment": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the lowest index i such that Objects.equals(o, get(i)), or -1 if there is no such index.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation first gets a list iterator (with \n\u003ccode\u003elistIterator()\u003c/code\u003e). Then, it iterates over the list until the specified element is found or the end of the list is reached."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#indexOf(java.lang.Object)\"\u003eindexOf\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - element to search for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the type of the specified element is incompatible with this list (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lastIndexOf",
      "comment": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the highest index i such that Objects.equals(o, get(i)), or -1 if there is no such index.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation first gets a list iterator that points to the end of the list (with \n\u003ccode\u003elistIterator(size())\u003c/code\u003e). Then, it iterates backwards over the list until the specified element is found, or the beginning of the list is reached."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#lastIndexOf(java.lang.Object)\"\u003elastIndexOf\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - element to search for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the type of the specified element is incompatible with this list (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clear",
      "comment": "Removes all of the elements from this list (optional operation). The list will be empty after this call returns.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation calls \n\u003ccode\u003eremoveRange(0, size())\u003c/code\u003e. \n\u003cp\u003eNote that this implementation throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e unless \u003ccode\u003eremove(int index)\u003c/code\u003e or \u003ccode\u003eremoveRange(int fromIndex, int toIndex)\u003c/code\u003e is overridden.\u003c/p\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractCollection.html#clear()\"\u003eclear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractCollection.html\" title\u003d\"class in java.util\"\u003eAbstractCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#clear()\"\u003eclear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#clear()\"\u003eclear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eclear\u003c/code\u003e operation is not supported by this list"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addAll",
      "comment": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection\u0027s iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it\u0027s nonempty.)",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation gets an iterator over the specified collection and iterates over it, inserting the elements obtained from the iterator into this list at the appropriate position, one at a time, using \n\u003ccode\u003eadd(int, E)\u003c/code\u003e. Many implementations will override this method for efficiency. \n\u003cp\u003eNote that this implementation throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e unless \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html#add(int,E)\"\u003e\u003ccode\u003eadd(int, E)\u003c/code\u003e\u003c/a\u003e is overridden.\u003c/p\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#addAll(int,java.util.Collection)\"\u003eaddAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - index at which to insert the first element from the specified collection",
          "\u003ccode\u003ec\u003c/code\u003e - collection containing elements to be added to this list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eaddAll\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of an element of the specified collection prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of an element of the specified collection prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this list changed as a result of the call"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "owner": "java.util.AbstractList",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "iterator",
      "comment": "Returns an iterator over the elements in this list in proper sequence.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation returns a straightforward implementation of the iterator interface, relying on the backing list\u0027s \n\u003ccode\u003esize()\u003c/code\u003e, \n\u003ccode\u003eget(int)\u003c/code\u003e, and \n\u003ccode\u003eremove(int)\u003c/code\u003e methods. \n\u003cp\u003eNote that the iterator returned by this method will throw an \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e in response to its \u003ccode\u003eremove\u003c/code\u003e method unless the list\u0027s \u003ccode\u003eremove(int)\u003c/code\u003e method is overridden. \u003c/p\u003e\n\u003cp\u003eThis implementation can be made to throw runtime exceptions in the face of concurrent modification, as described in the specification for the (protected) \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html#modCount\"\u003e\u003ccode\u003emodCount\u003c/code\u003e\u003c/a\u003e field.\u003c/p\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#iterator()\"\u003eiterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html#iterator()\"\u003eiterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html\" title\u003d\"interface in java.lang\"\u003eIterable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#iterator()\"\u003eiterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractCollection.html#iterator()\"\u003eiterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractCollection.html\" title\u003d\"class in java.util\"\u003eAbstractCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "an iterator over the elements in this list in proper sequence"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ListIterator",
        "parameters": [
          {
            "owner": "java.util.AbstractList",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "listIterator",
      "comment": "Returns a list iterator over the elements in this list (in proper sequence).",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation returns \n\u003ccode\u003elistIterator(0)\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html#listIterator(int)\"\u003e\u003ccode\u003elistIterator(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#listIterator()\"\u003elistIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a list iterator over the elements in this list (in proper sequence)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ListIterator",
        "parameters": [
          {
            "owner": "java.util.AbstractList",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "listIterator",
      "comment": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. The specified index indicates the first element that would be returned by an initial call to next. An initial call to previous would return the element with the specified index minus one.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation returns a straightforward implementation of the \n\u003ccode\u003eListIterator\u003c/code\u003e interface that extends the implementation of the \n\u003ccode\u003eIterator\u003c/code\u003e interface returned by the \n\u003ccode\u003eiterator()\u003c/code\u003e method. The \n\u003ccode\u003eListIterator\u003c/code\u003e implementation relies on the backing list\u0027s \n\u003ccode\u003eget(int)\u003c/code\u003e, \n\u003ccode\u003eset(int, E)\u003c/code\u003e, \n\u003ccode\u003eadd(int, E)\u003c/code\u003e and \n\u003ccode\u003eremove(int)\u003c/code\u003e methods. \n\u003cp\u003eNote that the list iterator returned by this implementation will throw an \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e in response to its \u003ccode\u003eremove\u003c/code\u003e, \u003ccode\u003eset\u003c/code\u003e and \u003ccode\u003eadd\u003c/code\u003e methods unless the list\u0027s \u003ccode\u003eremove(int)\u003c/code\u003e, \u003ccode\u003eset(int, E)\u003c/code\u003e, and \u003ccode\u003eadd(int, E)\u003c/code\u003e methods are overridden. \u003c/p\u003e\n\u003cp\u003eThis implementation can be made to throw runtime exceptions in the face of concurrent modification, as described in the specification for the (protected) \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html#modCount\"\u003e\u003ccode\u003emodCount\u003c/code\u003e\u003c/a\u003e field.\u003c/p\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#listIterator(int)\"\u003elistIterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - index of the first element to be returned from the list iterator (by a call to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ListIterator.html#next()\"\u003e\u003ccode\u003enext\u003c/code\u003e\u003c/a\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e)"
        ],
        "return": [
          "a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "owner": "java.util.AbstractList",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "subList",
      "comment": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the returned list is empty.) The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations supported by this list. This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list: \n      list.subList(from, to).clear();\n Similar idioms may be constructed for indexOf and lastIndexOf, and all of the algorithms in the Collections class can be applied to a subList. The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is structurally modified in any way other than via the returned list. (Structural modifications are those that change the size of this list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.)",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation returns a list that subclasses \n\u003ccode\u003eAbstractList\u003c/code\u003e. The subclass stores, in private fields, the size of the subList (which can change over its lifetime), and the expected \n\u003ccode\u003emodCount\u003c/code\u003e value of the backing list. There are two variants of the subclass, one of which implements \n\u003ccode\u003eRandomAccess\u003c/code\u003e. If this list implements \n\u003ccode\u003eRandomAccess\u003c/code\u003e the returned list will be an instance of the subclass that implements \n\u003ccode\u003eRandomAccess\u003c/code\u003e. \n\u003cp\u003eThe subclass\u0027s \u003ccode\u003eset(int, E)\u003c/code\u003e, \u003ccode\u003eget(int)\u003c/code\u003e, \u003ccode\u003eadd(int, E)\u003c/code\u003e, \u003ccode\u003eremove(int)\u003c/code\u003e, \u003ccode\u003eaddAll(int, Collection)\u003c/code\u003e and \u003ccode\u003eremoveRange(int, int)\u003c/code\u003e methods all delegate to the corresponding methods on the backing abstract list, after bounds-checking the index and adjusting for the offset. The \u003ccode\u003eaddAll(Collection c)\u003c/code\u003e method merely returns \u003ccode\u003eaddAll(size, c)\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003elistIterator(int)\u003c/code\u003e method returns a \"wrapper object\" over a list iterator on the backing list, which is created with the corresponding method on the backing list. The \u003ccode\u003eiterator\u003c/code\u003e method merely returns \u003ccode\u003elistIterator()\u003c/code\u003e, and the \u003ccode\u003esize\u003c/code\u003e method merely returns the subclass\u0027s \u003ccode\u003esize\u003c/code\u003e field. \u003c/p\u003e\n\u003cp\u003eAll methods first check to see if the actual \u003ccode\u003emodCount\u003c/code\u003e of the backing list is equal to its expected value, and throw a \u003ccode\u003eConcurrentModificationException\u003c/code\u003e if it is not.\u003c/p\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#subList(int,int)\"\u003esubList\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efromIndex\u003c/code\u003e - low endpoint (inclusive) of the subList",
          "\u003ccode\u003etoIndex\u003c/code\u003e - high endpoint (exclusive) of the subList"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if an endpoint index value is out of range \n\u003ccode\u003e(fromIndex \u0026lt; 0 || toIndex \u0026gt; size)\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the endpoint indices are out of order \n\u003ccode\u003e(fromIndex \u0026gt; toIndex)\u003c/code\u003e"
        ],
        "return": [
          "a view of the specified range within this list"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares the specified object with this list for equality. Returns true if and only if the specified object is also a list, both lists have the same size, and all corresponding pairs of elements in the two lists are equal. (Two elements e1 and e2 are equal if (e1\u003d\u003dnull ? e2\u003d\u003dnull : e1.equals(e2)).) In other words, two lists are defined to be equal if they contain the same elements in the same order.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation first checks if the specified object is this list. If so, it returns \n\u003ccode\u003etrue\u003c/code\u003e; if not, it checks if the specified object is a list. If not, it returns \n\u003ccode\u003efalse\u003c/code\u003e; if so, it iterates over both lists, comparing corresponding pairs of elements. If any comparison returns \n\u003ccode\u003efalse\u003c/code\u003e, this method returns \n\u003ccode\u003efalse\u003c/code\u003e. If either iterator runs out of elements before the other it returns \n\u003ccode\u003efalse\u003c/code\u003e (as the lists are of unequal length); otherwise it returns \n\u003ccode\u003etrue\u003c/code\u003e when the iterations complete."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - the object to be compared for equality with this list"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified object is equal to this list"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code value for this list.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation uses exactly the code that is used to define the list hash function in the documentation for the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#hashCode()\"\u003e\u003ccode\u003eList.hashCode()\u003c/code\u003e\u003c/a\u003e method."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003eList\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"type parameter in AbstractList\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the hash code value for this list"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "removeRange",
      "comment": "Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any succeeding elements to the left (reduces their index). This call shortens the list by (toIndex - fromIndex) elements. (If toIndex\u003d\u003dfromIndex, this operation has no effect.) This method is called by the clear operation on this list and its subLists. Overriding this method to take advantage of the internals of the list implementation can substantially improve the performance of the clear operation on this list and its subLists.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This implementation gets a list iterator positioned before \n\u003ccode\u003efromIndex\u003c/code\u003e, and repeatedly calls \n\u003ccode\u003eListIterator.next\u003c/code\u003e followed by \n\u003ccode\u003eListIterator.remove\u003c/code\u003e until the entire range has been removed. \n\u003cb\u003eNote: if \u003ccode\u003eListIterator.remove\u003c/code\u003e requires linear time, this implementation requires quadratic time.\u003c/b\u003e"
        ],
        "param": [
          "\u003ccode\u003efromIndex\u003c/code\u003e - index of first element to be removed",
          "\u003ccode\u003etoIndex\u003c/code\u003e - index after last element to be removed"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Sole constructor. (For invocation by subclass constructors, typically implicit.)",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.AbstractList",
  "comment": "This class provides a skeletal implementation of the \n\u003ca href\u003d\"List.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eList\u003c/code\u003e\u003c/a\u003e interface to minimize the effort required to implement this interface backed by a \"random access\" data store (such as an array). For sequential access data (such as a linked list), \n\u003ca href\u003d\"AbstractSequentialList.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eAbstractSequentialList\u003c/code\u003e\u003c/a\u003e should be used in preference to this class. \n\u003cp\u003eTo implement an unmodifiable list, the programmer needs only to extend this class and provide implementations for the \u003ca href\u003d\"#get(int)\"\u003e\u003ccode\u003eget(int)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"List.html#size()\"\u003e\u003ccode\u003esize()\u003c/code\u003e\u003c/a\u003e methods. \u003c/p\u003e\n\u003cp\u003eTo implement a modifiable list, the programmer must additionally override the \u003ca href\u003d\"#set(int,E)\"\u003e\u003ccode\u003eset(int, E)\u003c/code\u003e\u003c/a\u003e method (which otherwise throws an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e). If the list is variable-size the programmer must additionally override the \u003ca href\u003d\"#add(int,E)\"\u003e\u003ccode\u003eadd(int, E)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#remove(int)\"\u003e\u003ccode\u003eremove(int)\u003c/code\u003e\u003c/a\u003e methods. \u003c/p\u003e\n\u003cp\u003eThe programmer should generally provide a void (no argument) and collection constructor, as per the recommendation in the \u003ca href\u003d\"Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e interface specification. \u003c/p\u003e\n\u003cp\u003eUnlike the other abstract collection implementations, the programmer does \u003ci\u003enot\u003c/i\u003e have to provide an iterator implementation; the iterator and list iterator are implemented by this class, on top of the \"random access\" methods: \u003ca href\u003d\"#get(int)\"\u003e\u003ccode\u003eget(int)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#set(int,E)\"\u003e\u003ccode\u003eset(int, E)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#add(int,E)\"\u003e\u003ccode\u003eadd(int, E)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#remove(int)\"\u003e\u003ccode\u003eremove(int)\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003eThe documentation for each non-abstract method in this class describes its implementation in detail. Each of these methods may be overridden if the collection being implemented admits a more efficient implementation. \u003c/p\u003e\n\u003cp\u003eThis class is a member of the \u003ca href\u003d\"../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}