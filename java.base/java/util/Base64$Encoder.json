{
  "packageName": "java.util",
  "simpleName": "Encoder",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "src"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "encode",
      "comment": "Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme. The returned byte array is of the length of the resulting bytes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the byte array to encode"
        ],
        "return": [
          "A newly-allocated byte array containing the resulting encoded bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "dst"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "encode",
      "comment": "Encodes all bytes from the specified byte array using the Base64 encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0. It is the responsibility of the invoker of this method to make sure the output byte array dst has enough space for encoding all bytes from the input byte array. No bytes will be written to the output byte array if the output byte array is not big enough.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the byte array to encode",
          "\u003ccode\u003edst\u003c/code\u003e - the output byte array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edst\u003c/code\u003e does not have enough space for encoding all input bytes."
        ],
        "return": [
          "The number of bytes written to the output byte array"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "src"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "encodeToString",
      "comment": "Encodes the specified byte array into a String using the Base64 encoding scheme. This method first encodes all input bytes into a base64 encoded byte array and then constructs a new String by using the encoded byte array and the ISO-8859-1 charset. In other words, an invocation of this method has exactly the same effect as invoking new String(encode(src), StandardCharsets.ISO_8859_1).",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - the byte array to encode"
        ],
        "return": [
          "A String containing the resulting Base64 encoded characters"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "buffer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "encode",
      "comment": "Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the Base64 encoding scheme. Upon return, the source buffer\u0027s position will be updated to its limit; its limit will not have been changed. The returned output buffer\u0027s position will be zero and its limit will be the number of resulting encoded bytes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebuffer\u003c/code\u003e - the source ByteBuffer to encode"
        ],
        "return": [
          "A newly-allocated byte buffer containing the encoded bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.OutputStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "field": {
            "name": "os"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "wrap",
      "comment": "Wraps an output stream for encoding byte data using the Base64 encoding scheme. It is recommended to promptly close the returned output stream after use, during which it will flush all possible leftover bytes to the underlying output stream. Closing the returned output stream will close the underlying output stream.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eos\u003c/code\u003e - the output stream."
        ],
        "return": [
          "the output stream for encoding the byte data into the specified Base64 encoded format"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Base64$Encoder",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "withoutPadding",
      "comment": "Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data. The encoding scheme of this encoder instance is unaffected by this invocation. The returned encoder instance should be used for non-padding encoding operation.",
      "tagMap": {
        "return": [
          "an equivalent encoder that encodes without adding any padding character at the end"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "java.util.Base64$Encoder",
  "comment": "This class implements an encoder for encoding byte data using the Base64 encoding scheme as specified in RFC 4648 and RFC 2045. \n\u003cp\u003e Instances of \u003ca href\u003d\"Base64.Encoder.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eBase64.Encoder\u003c/code\u003e\u003c/a\u003e class are safe for use by multiple concurrent threads. \u003c/p\u003e\n\u003cp\u003e Unless otherwise noted, passing a \u003ccode\u003enull\u003c/code\u003e argument to a method of this class will cause a \u003ca href\u003d\"../lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown. \u003c/p\u003e\n\u003cp\u003e If the encoded byte output of the needed size can not be allocated, the encode methods of this class will cause an \u003ca href\u003d\"../lang/OutOfMemoryError.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eOutOfMemoryError\u003c/code\u003e\u003c/a\u003e to be thrown.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Base64.Decoder.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eBase64.Decoder\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}