{
  "packageName": "java.util",
  "simpleName": "Hashtable",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.Dictionary",
    "parameters": [
      {
        "name": "K",
        "type": "Class"
      },
      {
        "name": "V",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "size",
      "comment": "Returns the number of keys in this hashtable.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#size()\"\u003esize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html#size()\"\u003esize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html\" title\u003d\"class in java.util\"\u003eDictionary\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the number of keys in this hashtable."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEmpty",
      "comment": "Tests if this hashtable maps no keys to values.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#isEmpty()\"\u003eisEmpty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html#isEmpty()\"\u003eisEmpty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html\" title\u003d\"class in java.util\"\u003eDictionary\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this hashtable maps no keys to values; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "owner": "java.util.Hashtable",
            "name": "K",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "keys",
      "comment": "Returns an enumeration of the keys in this hashtable. Use the Enumeration methods on the returned object to fetch the keys sequentially. If the hashtable is structurally modified while enumerating over the keys then the results of enumerating are undefined.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eEnumeration\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html#elements()\"\u003e\u003ccode\u003eelements()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html#keySet()\"\u003e\u003ccode\u003ekeySet()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html#keys()\"\u003ekeys\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html\" title\u003d\"class in java.util\"\u003eDictionary\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "an enumeration of the keys in this hashtable."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "owner": "java.util.Hashtable",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "elements",
      "comment": "Returns an enumeration of the values in this hashtable. Use the Enumeration methods on the returned object to fetch the elements sequentially. If the hashtable is structurally modified while enumerating over the values then the results of enumerating are undefined.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eEnumeration\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html#keys()\"\u003e\u003ccode\u003ekeys()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html#values()\"\u003e\u003ccode\u003evalues()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html#elements()\"\u003eelements\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html\" title\u003d\"class in java.util\"\u003eDictionary\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "an enumeration of the values in this hashtable."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "contains",
      "comment": "Tests if some key maps into the specified value in this hashtable. This operation is more expensive than the containsKey method. Note that this method is identical in functionality to containsValue, (which is part of the Map interface in the collections framework).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - a value to search for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if some key maps to the \n\u003ccode\u003evalue\u003c/code\u003e argument in this hashtable as determined by the \n\u003ccode\u003eequals\u003c/code\u003e method; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "containsValue",
      "comment": "Returns true if this hashtable maps one or more keys to this value. Note that this method is identical in functionality to contains (which predates the Map interface).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#containsValue(java.lang.Object)\"\u003econtainsValue\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - value whose presence in this hashtable is to be tested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this map maps one or more keys to the specified value"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "containsKey",
      "comment": "Tests if the specified object is a key in this hashtable.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html#contains(java.lang.Object)\"\u003e\u003ccode\u003econtains(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#containsKey(java.lang.Object)\"\u003econtainsKey\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - possible key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the key is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the specified object is a key in this hashtable, as determined by the \n\u003ccode\u003eequals\u003c/code\u003e method; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Hashtable",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that (key.equals(k)), then this method returns v; otherwise it returns null. (There can be at most one such mapping.)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html#put(K,V)\"\u003e\u003ccode\u003eput(Object, Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#get(java.lang.Object)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html#get(java.lang.Object)\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html\" title\u003d\"class in java.util\"\u003eDictionary\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key whose associated value is to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null"
        ],
        "return": [
          "the value to which the specified key is mapped, or \n\u003ccode\u003enull\u003c/code\u003e if this map contains no mapping for the key"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "rehash",
      "comment": "Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently. This method is called automatically when the number of keys in the hashtable exceeds this hashtable\u0027s capacity and load factor.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "owner": "java.util.Hashtable",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Hashtable",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Hashtable",
            "name": "V",
            "type": "Variable"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Maps the specified key to the specified value in this hashtable. Neither the key nor the value can be null. The value can be retrieved by calling the get method with a key that is equal to the original key.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html#get(java.lang.Object)\"\u003e\u003ccode\u003eget(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#put(K,V)\"\u003eput\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html#put(K,V)\"\u003eput\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html\" title\u003d\"class in java.util\"\u003eDictionary\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the hashtable key",
          "\u003ccode\u003evalue\u003c/code\u003e - the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the key or value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the previous value of the specified key in this hashtable, or \n\u003ccode\u003enull\u003c/code\u003e if it did not have one"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Hashtable",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "remove",
      "comment": "Removes the key (and its corresponding value) from this hashtable. This method does nothing if the key is not in the hashtable.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#remove(java.lang.Object)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html#remove(java.lang.Object)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Dictionary.html\" title\u003d\"class in java.util\"\u003eDictionary\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key that needs to be removed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the key is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value to which the key had been mapped in this hashtable, or \n\u003ccode\u003enull\u003c/code\u003e if the key did not have a mapping"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "t",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "putAll",
      "comment": "Copies all of the mappings from the specified map to this hashtable. These mappings will replace any mappings that this hashtable had for any of the keys currently in the specified map.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#putAll(java.util.Map)\"\u003eputAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - mappings to be stored in this map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified map is null"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clear",
      "comment": "Clears this hashtable so that it contains no keys.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#clear()\"\u003eclear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates a shallow copy of this hashtable. All the structure of the hashtable itself is copied, but the keys and values are not cloned. This is a relatively expensive operation.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of the hashtable"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters \" , \" (comma and space). Each entry is rendered as the key, an equals sign \u003d, and the associated element, where the toString method is used to convert the key and element to strings.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this hashtable"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "owner": "java.util.Hashtable",
            "name": "K",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "keySet",
      "comment": "Returns a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator\u0027s own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#keySet()\"\u003ekeySet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a set view of the keys contained in this map"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.util.Map$Entry",
            "parameters": [
              {
                "owner": "java.util.Hashtable",
                "name": "K",
                "type": "Variable"
              },
              {
                "owner": "java.util.Hashtable",
                "name": "V",
                "type": "Variable"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "entrySet",
      "comment": "Returns a Set view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator\u0027s own remove operation, or through the setValue operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#entrySet()\"\u003eentrySet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a set view of the mappings contained in this map"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "owner": "java.util.Hashtable",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "values",
      "comment": "Returns a Collection view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator\u0027s own remove operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#values()\"\u003evalues\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a collection view of the values contained in this map"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares the specified Object with this Map for equality, as per the definition in the Map interface.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eMap.equals(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - object to be compared for equality with this hashtable"
        ],
        "return": [
          "true if the specified Object is equal to this Map"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code value for this Map as per the definition in the Map interface.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#hashCode()\"\u003e\u003ccode\u003eMap.hashCode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Hashtable",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Hashtable",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "mappingFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "computeIfAbsent",
      "comment": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null. If the mapping function returns null, no mapping is recorded. If the mapping function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in:  \n map.computeIfAbsent(key, k -\u003e new Value(f(k)));\n Or to implement a multi-value map, Map\u003cK,Collection\u003cV\u003e\u003e, supporting multiple values per key:  \n map.computeIfAbsent(key, k -\u003e new HashSet\u003cV\u003e()).add(v);\n The mapping function should not modify this map during computation. This method will, on a best-effort basis, throw a ConcurrentModificationException if the mapping function modified this map during computation.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#computeIfAbsent(K,java.util.function.Function)\"\u003ecomputeIfAbsent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003emappingFunction\u003c/code\u003e - the mapping function to compute a value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ConcurrentModificationException.html\" title\u003d\"class in java.util\"\u003eConcurrentModificationException\u003c/a\u003e\u003c/code\u003e - if it is detected that the mapping function modified this map"
        ],
        "return": [
          "the current (existing or computed) value associated with the specified key, or null if the computed value is null"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Hashtable",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Hashtable",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "remappingFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "computeIfPresent",
      "comment": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation. This method will, on a best-effort basis, throw a ConcurrentModificationException if the remapping function modified this map during computation.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#computeIfPresent(K,java.util.function.BiFunction)\"\u003ecomputeIfPresent\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003eremappingFunction\u003c/code\u003e - the remapping function to compute a value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ConcurrentModificationException.html\" title\u003d\"class in java.util\"\u003eConcurrentModificationException\u003c/a\u003e\u003c/code\u003e - if it is detected that the remapping function modified this map"
        ],
        "return": [
          "the new value associated with the specified key, or null if none"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Hashtable",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Hashtable",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "remappingFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compute",
      "comment": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). For example, to either create or append a String msg to a value mapping:  \n map.compute(key, (k, v) -\u003e (v \u003d\u003d null) ? msg : v.concat(msg)) (Method merge() is often simpler to use for such purposes.) If the remapping function returns null, the mapping is removed (or remains absent if initially absent). If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation. This method will, on a best-effort basis, throw a ConcurrentModificationException if the remapping function modified this map during computation.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#compute(K,java.util.function.BiFunction)\"\u003ecompute\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003eremappingFunction\u003c/code\u003e - the remapping function to compute a value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ConcurrentModificationException.html\" title\u003d\"class in java.util\"\u003eConcurrentModificationException\u003c/a\u003e\u003c/code\u003e - if it is detected that the remapping function modified this map"
        ],
        "return": [
          "the new value associated with the specified key, or null if none"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Hashtable",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Hashtable",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Hashtable",
            "name": "V",
            "type": "Variable"
          },
          "name": "value",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "remappingFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "merge",
      "comment": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is null. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a String msg to a value mapping:  \n map.merge(key, msg, String::concat)\n If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation. This method will, on a best-effort basis, throw a ConcurrentModificationException if the remapping function modified this map during computation.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#merge(K,V,java.util.function.BiFunction)\"\u003emerge\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"type parameter in Hashtable\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the resulting value is to be associated",
          "\u003ccode\u003evalue\u003c/code\u003e - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key",
          "\u003ccode\u003eremappingFunction\u003c/code\u003e - the remapping function to recompute a value if present"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ConcurrentModificationException.html\" title\u003d\"class in java.util\"\u003eConcurrentModificationException\u003c/a\u003e\u003c/code\u003e - if it is detected that the remapping function modified this map"
        ],
        "return": [
          "the new value associated with the specified key, or null if no value is associated with the key"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "initialCapacity",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "float",
            "type": "Class"
          },
          "name": "loadFactor",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new, empty hashtable with the specified initial capacity and the specified load factor.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einitialCapacity\u003c/code\u003e - the initial capacity of the hashtable.",
          "\u003ccode\u003eloadFactor\u003c/code\u003e - the load factor of the hashtable."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the initial capacity is less than zero, or if the load factor is nonpositive."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "initialCapacity",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new, empty hashtable with the specified initial capacity and default load factor (0.75).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einitialCapacity\u003c/code\u003e - the initial capacity of the hashtable."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the initial capacity is less than zero."
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new, empty hashtable with a default initial capacity (11) and load factor (0.75).",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Hashtable",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "t",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new hashtable with the same mappings as the given Map. The hashtable is created with an initial capacity sufficient to hold the mappings in the given Map and a default load factor (0.75).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the map whose mappings are to be placed in this map."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified map is null."
        ],
        "since": [
          "1.2"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "K",
      "type": "Variable"
    },
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.Hashtable",
  "comment": "This class implements a hash table, which maps keys to values. Any non-\n\u003ccode\u003enull\u003c/code\u003e object can be used as a key or as a value. \n\u003cp\u003e To successfully store and retrieve objects from a hashtable, the objects used as keys must implement the \u003ccode\u003ehashCode\u003c/code\u003e method and the \u003ccode\u003eequals\u003c/code\u003e method. \u003c/p\u003e\n\u003cp\u003e An instance of \u003ccode\u003eHashtable\u003c/code\u003e has two parameters that affect its performance: \u003ci\u003einitial capacity\u003c/i\u003e and \u003ci\u003eload factor\u003c/i\u003e. The \u003ci\u003ecapacity\u003c/i\u003e is the number of \u003ci\u003ebuckets\u003c/i\u003e in the hash table, and the \u003ci\u003einitial capacity\u003c/i\u003e is simply the capacity at the time the hash table is created. Note that the hash table is \u003ci\u003eopen\u003c/i\u003e: in the case of a \"hash collision\", a single bucket stores multiple entries, which must be searched sequentially. The \u003ci\u003eload factor\u003c/i\u003e is a measure of how full the hash table is allowed to get before its capacity is automatically increased. The initial capacity and load factor parameters are merely hints to the implementation. The exact details as to when and whether the rehash method is invoked are implementation-dependent.\u003c/p\u003e\n\u003cp\u003e Generally, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the time cost to look up an entry (which is reflected in most \u003ccode\u003eHashtable\u003c/code\u003e operations, including \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eput\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003e The initial capacity controls a tradeoff between wasted space and the need for \u003ccode\u003erehash\u003c/code\u003e operations, which are time-consuming. No \u003ccode\u003erehash\u003c/code\u003e operations will \u003ci\u003eever\u003c/i\u003e occur if the initial capacity is greater than the maximum number of entries the \u003ccode\u003eHashtable\u003c/code\u003e will contain divided by its load factor. However, setting the initial capacity too high can waste space.\u003c/p\u003e\n\u003cp\u003e If many entries are to be made into a \u003ccode\u003eHashtable\u003c/code\u003e, creating it with a sufficiently large capacity may allow the entries to be inserted more efficiently than letting it perform automatic rehashing as needed to grow the table. \u003c/p\u003e\n\u003cp\u003e This example creates a hashtable of numbers. It uses the names of the numbers as keys: \u003c/p\u003e\n\u003cpre\u003e   \u003ccode\u003e\n   Hashtable\u0026lt;String, Integer\u0026gt; numbers\n     \u003d new Hashtable\u0026lt;String, Integer\u0026gt;();\n   numbers.put(\"one\", 1);\n   numbers.put(\"two\", 2);\n   numbers.put(\"three\", 3);\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eTo retrieve a number, use the following code: \u003c/p\u003e\n\u003cpre\u003e   \u003ccode\u003e\n   Integer n \u003d numbers.get(\"two\");\n   if (n !\u003d null) {\n     System.out.println(\"two \u003d \" + n);\n   }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe iterators returned by the \u003ccode\u003eiterator\u003c/code\u003e method of the collections returned by all of this class\u0027s \"collection view methods\" are \u003cem\u003efail-fast\u003c/em\u003e: if the Hashtable is structurally modified at any time after the iterator is created, in any way except through the iterator\u0027s own \u003ccode\u003eremove\u003c/code\u003e method, the iterator will throw a \u003ca href\u003d\"ConcurrentModificationException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eConcurrentModificationException\u003c/code\u003e\u003c/a\u003e. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. The Enumerations returned by Hashtable\u0027s \u003ca href\u003d\"#keys()\"\u003e\u003ccode\u003ekeys\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#elements()\"\u003e\u003ccode\u003eelements\u003c/code\u003e\u003c/a\u003e methods are \u003cem\u003enot\u003c/em\u003e fail-fast; if the Hashtable is structurally modified at any time after the enumeration is created then the results of enumerating are undefined. \u003c/p\u003e\n\u003cp\u003eNote that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw \u003ccode\u003eConcurrentModificationException\u003c/code\u003e on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: \u003ci\u003ethe fail-fast behavior of iterators should be used only to detect bugs.\u003c/i\u003e \u003c/p\u003e\n\u003cp\u003eAs of the Java 2 platform v1.2, this class was retrofitted to implement the \u003ca href\u003d\"Map.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e interface, making it a member of the \u003ca href\u003d\"../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e. Unlike the new collection implementations, \u003ccode\u003eHashtable\u003c/code\u003e is synchronized. If a thread-safe implementation is not needed, it is recommended to use \u003ca href\u003d\"HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e in place of \u003ccode\u003eHashtable\u003c/code\u003e. If a thread-safe highly-concurrent implementation is desired, then it is recommended to use \u003ca href\u003d\"concurrent/ConcurrentHashMap.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eConcurrentHashMap\u003c/code\u003e\u003c/a\u003e in place of \u003ccode\u003eHashtable\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html#rehash()\"\u003e\u003ccode\u003erehash()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TreeMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTreeMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.Hashtable\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}