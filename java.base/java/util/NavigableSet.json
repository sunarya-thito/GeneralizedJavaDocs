{
  "packageName": "java.util",
  "simpleName": "NavigableSet",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.SortedSet",
    "parameters": [
      {
        "name": "E",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "java.util.NavigableSet",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lower",
      "comment": "Returns the greatest element in this set strictly less than the given element, or null if there is no such element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the value to match"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified element cannot be compared with the elements currently in the set",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this set does not permit null elements"
        ],
        "return": [
          "the greatest element less than \n\u003ccode\u003ee\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such element"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.NavigableSet",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "floor",
      "comment": "Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the value to match"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified element cannot be compared with the elements currently in the set",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this set does not permit null elements"
        ],
        "return": [
          "the greatest element less than or equal to \n\u003ccode\u003ee\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such element"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.NavigableSet",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "ceiling",
      "comment": "Returns the least element in this set greater than or equal to the given element, or null if there is no such element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the value to match"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified element cannot be compared with the elements currently in the set",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this set does not permit null elements"
        ],
        "return": [
          "the least element greater than or equal to \n\u003ccode\u003ee\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such element"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.NavigableSet",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "higher",
      "comment": "Returns the least element in this set strictly greater than the given element, or null if there is no such element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the value to match"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified element cannot be compared with the elements currently in the set",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this set does not permit null elements"
        ],
        "return": [
          "the least element greater than \n\u003ccode\u003ee\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such element"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.NavigableSet",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "pollFirst",
      "comment": "Retrieves and removes the first (lowest) element, or returns null if this set is empty.",
      "tagMap": {
        "return": [
          "the first element, or \n\u003ccode\u003enull\u003c/code\u003e if this set is empty"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.NavigableSet",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "pollLast",
      "comment": "Retrieves and removes the last (highest) element, or returns null if this set is empty.",
      "tagMap": {
        "return": [
          "the last element, or \n\u003ccode\u003enull\u003c/code\u003e if this set is empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "iterator",
      "comment": "Returns an iterator over the elements in this set, in ascending order.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#iterator()\"\u003eiterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableSet.html\" title\u003d\"type parameter in NavigableSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html#iterator()\"\u003eiterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html\" title\u003d\"interface in java.lang\"\u003eIterable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableSet.html\" title\u003d\"type parameter in NavigableSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html#iterator()\"\u003eiterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html\" title\u003d\"interface in java.util\"\u003eSet\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableSet.html\" title\u003d\"type parameter in NavigableSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "an iterator over the elements in this set, in ascending order"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableSet",
        "parameters": [
          {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "descendingSet",
      "comment": "Returns a reverse order view of the elements contained in this set. The descending set is backed by this set, so changes to the set are reflected in the descending set, and vice-versa. If either set is modified while an iteration over either set is in progress (except through the iterator\u0027s own remove operation), the results of the iteration are undefined. The returned set has an ordering equivalent to Collections.reverseOrder(comparator()). The expression s.descendingSet().descendingSet() returns a view of s essentially equivalent to s.",
      "tagMap": {
        "return": [
          "a reverse order view of this set"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "descendingIterator",
      "comment": "Returns an iterator over the elements in this set, in descending order. Equivalent in effect to descendingSet().iterator().",
      "tagMap": {
        "return": [
          "an iterator over the elements in this set, in descending order"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableSet",
        "parameters": [
          {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "fromElement"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "fromInclusive"
          }
        },
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "toElement"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "toInclusive"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subSet",
      "comment": "Returns a view of the portion of this set whose elements range from fromElement to toElement. If fromElement and toElement are equal, the returned set is empty unless fromInclusive and toInclusive are both true. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromElement\u003c/code\u003e - low endpoint of the returned set",
          "\u003ccode\u003efromInclusive\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the low endpoint is to be included in the returned view",
          "\u003ccode\u003etoElement\u003c/code\u003e - high endpoint of the returned set",
          "\u003ccode\u003etoInclusive\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the high endpoint is to be included in the returned view"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e and \n\u003ccode\u003etoElement\u003c/code\u003e cannot be compared to one another using this set\u0027s comparator (or, if the set has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromElement\u003c/code\u003e or \n\u003ccode\u003etoElement\u003c/code\u003e cannot be compared to elements currently in the set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e or \n\u003ccode\u003etoElement\u003c/code\u003e is null and this set does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e is greater than \n\u003ccode\u003etoElement\u003c/code\u003e; or if this set itself has a restricted range, and \n\u003ccode\u003efromElement\u003c/code\u003e or \n\u003ccode\u003etoElement\u003c/code\u003e lies outside the bounds of the range."
        ],
        "return": [
          "a view of the portion of this set whose elements range from \n\u003ccode\u003efromElement\u003c/code\u003e, inclusive, to \n\u003ccode\u003etoElement\u003c/code\u003e, exclusive"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableSet",
        "parameters": [
          {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "toElement"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "inclusive"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "headSet",
      "comment": "Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etoElement\u003c/code\u003e - high endpoint of the returned set",
          "\u003ccode\u003einclusive\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the high endpoint is to be included in the returned view"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoElement\u003c/code\u003e is not compatible with this set\u0027s comparator (or, if the set has no comparator, if \n\u003ccode\u003etoElement\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003etoElement\u003c/code\u003e cannot be compared to elements currently in the set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoElement\u003c/code\u003e is null and this set does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this set itself has a restricted range, and \n\u003ccode\u003etoElement\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this set whose elements are less than (or equal to, if \n\u003ccode\u003einclusive\u003c/code\u003e is true) \n\u003ccode\u003etoElement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableSet",
        "parameters": [
          {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "fromElement"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "inclusive"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "tailSet",
      "comment": "Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromElement\u003c/code\u003e - low endpoint of the returned set",
          "\u003ccode\u003einclusive\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the low endpoint is to be included in the returned view"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e is not compatible with this set\u0027s comparator (or, if the set has no comparator, if \n\u003ccode\u003efromElement\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromElement\u003c/code\u003e cannot be compared to elements currently in the set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e is null and this set does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this set itself has a restricted range, and \n\u003ccode\u003efromElement\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this set whose elements are greater than or equal to \n\u003ccode\u003efromElement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedSet",
        "parameters": [
          {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "fromElement"
          }
        },
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "toElement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subSet",
      "comment": "Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive. (If fromElement and toElement are equal, the returned set is empty.) The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range. Equivalent to subSet(fromElement, true, toElement, false).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html#subSet(E,E)\"\u003esubSet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"interface in java.util\"\u003eSortedSet\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableSet.html\" title\u003d\"type parameter in NavigableSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efromElement\u003c/code\u003e - low endpoint (inclusive) of the returned set",
          "\u003ccode\u003etoElement\u003c/code\u003e - high endpoint (exclusive) of the returned set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e and \n\u003ccode\u003etoElement\u003c/code\u003e cannot be compared to one another using this set\u0027s comparator (or, if the set has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromElement\u003c/code\u003e or \n\u003ccode\u003etoElement\u003c/code\u003e cannot be compared to elements currently in the set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e or \n\u003ccode\u003etoElement\u003c/code\u003e is null and this set does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e is greater than \n\u003ccode\u003etoElement\u003c/code\u003e; or if this set itself has a restricted range, and \n\u003ccode\u003efromElement\u003c/code\u003e or \n\u003ccode\u003etoElement\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this set whose elements range from \n\u003ccode\u003efromElement\u003c/code\u003e, inclusive, to \n\u003ccode\u003etoElement\u003c/code\u003e, exclusive"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedSet",
        "parameters": [
          {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "toElement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "headSet",
      "comment": "Returns a view of the portion of this set whose elements are strictly less than toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range. Equivalent to headSet(toElement, false).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html#headSet(E)\"\u003eheadSet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"interface in java.util\"\u003eSortedSet\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableSet.html\" title\u003d\"type parameter in NavigableSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etoElement\u003c/code\u003e - high endpoint (exclusive) of the returned set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoElement\u003c/code\u003e is not compatible with this set\u0027s comparator (or, if the set has no comparator, if \n\u003ccode\u003etoElement\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003etoElement\u003c/code\u003e cannot be compared to elements currently in the set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoElement\u003c/code\u003e is null and this set does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this set itself has a restricted range, and \n\u003ccode\u003etoElement\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this set whose elements are strictly less than \n\u003ccode\u003etoElement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedSet",
        "parameters": [
          {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "fromElement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "tailSet",
      "comment": "Returns a view of the portion of this set whose elements are greater than or equal to fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range. Equivalent to tailSet(fromElement, true).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html#tailSet(E)\"\u003etailSet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"interface in java.util\"\u003eSortedSet\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableSet.html\" title\u003d\"type parameter in NavigableSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efromElement\u003c/code\u003e - low endpoint (inclusive) of the returned set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e is not compatible with this set\u0027s comparator (or, if the set has no comparator, if \n\u003ccode\u003efromElement\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromElement\u003c/code\u003e cannot be compared to elements currently in the set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e is null and this set does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this set itself has a restricted range, and \n\u003ccode\u003efromElement\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this set whose elements are greater than or equal to \n\u003ccode\u003efromElement\u003c/code\u003e"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.NavigableSet",
  "comment": "A \n\u003ca href\u003d\"SortedSet.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedSet\u003c/code\u003e\u003c/a\u003e extended with navigation methods reporting closest matches for given search targets. Methods \n\u003ca href\u003d\"#lower(E)\"\u003e\u003ccode\u003elower(E)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"#floor(E)\"\u003e\u003ccode\u003efloor(E)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"#ceiling(E)\"\u003e\u003ccode\u003eceiling(E)\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"#higher(E)\"\u003e\u003ccode\u003ehigher(E)\u003c/code\u003e\u003c/a\u003e return elements respectively less than, less than or equal, greater than or equal, and greater than a given element, returning \n\u003ccode\u003enull\u003c/code\u003e if there is no such element. \n\u003cp\u003eA \u003ccode\u003eNavigableSet\u003c/code\u003e may be accessed and traversed in either ascending or descending order. The \u003ca href\u003d\"#descendingSet()\"\u003e\u003ccode\u003edescendingSet()\u003c/code\u003e\u003c/a\u003e method returns a view of the set with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. This interface additionally defines methods \u003ca href\u003d\"#pollFirst()\"\u003e\u003ccode\u003epollFirst()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#pollLast()\"\u003e\u003ccode\u003epollLast()\u003c/code\u003e\u003c/a\u003e that return and remove the lowest and highest element, if one exists, else returning \u003ccode\u003enull\u003c/code\u003e. Methods \u003ca href\u003d\"#subSet(E,boolean,E,boolean)\"\u003e\u003ccode\u003esubSet(E, boolean, E, boolean)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#headSet(E,boolean)\"\u003e\u003ccode\u003eheadSet(E, boolean)\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#tailSet(E,boolean)\"\u003e\u003ccode\u003etailSet(E, boolean)\u003c/code\u003e\u003c/a\u003e differ from the like-named \u003ccode\u003eSortedSet\u003c/code\u003e methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Subsets of any \u003ccode\u003eNavigableSet\u003c/code\u003e must implement the \u003ccode\u003eNavigableSet\u003c/code\u003e interface. \u003c/p\u003e\n\u003cp\u003eThe return values of navigation methods may be ambiguous in implementations that permit \u003ccode\u003enull\u003c/code\u003e elements. However, even in this case the result can be disambiguated by checking \u003ccode\u003econtains(null)\u003c/code\u003e. To avoid such issues, implementations of this interface are encouraged to \u003cem\u003enot\u003c/em\u003e permit insertion of \u003ccode\u003enull\u003c/code\u003e elements. (Note that sorted sets of \u003ca href\u003d\"../lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e elements intrinsically do not permit \u003ccode\u003enull\u003c/code\u003e.) \u003c/p\u003e\n\u003cp\u003eMethods \u003ca href\u003d\"#subSet(E,E)\"\u003e\u003ccode\u003esubSet(E, E)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#headSet(E)\"\u003e\u003ccode\u003eheadSet(E)\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#tailSet(E)\"\u003e\u003ccode\u003etailSet(E)\u003c/code\u003e\u003c/a\u003e are specified to return \u003ccode\u003eSortedSet\u003c/code\u003e to allow existing implementations of \u003ccode\u003eSortedSet\u003c/code\u003e to be compatibly retrofitted to implement \u003ccode\u003eNavigableSet\u003c/code\u003e, but extensions and implementations of this interface are encouraged to override these methods to return \u003ccode\u003eNavigableSet\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThis interface is a member of the \u003ca href\u003d\"../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}