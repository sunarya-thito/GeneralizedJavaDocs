{
  "packageName": "java.util",
  "simpleName": "Collections",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.util.Set",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EMPTY_SET",
      "comment": "The empty set (immutable). This set is serializable.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collections.html#emptySet()\"\u003e\u003ccode\u003eemptySet()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.util.List",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EMPTY_LIST",
      "comment": "The empty list (immutable). This list is serializable.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collections.html#emptyList()\"\u003e\u003ccode\u003eemptyList()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.util.Map",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "EMPTY_MAP",
      "comment": "The empty map (immutable). This map is serializable.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collections.html#emptyMap()\"\u003e\u003ccode\u003eemptyMap()\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.lang.Comparable",
              "parameters": [
                {
                  "lowerBounds": [
                    {
                      "name": "T",
                      "type": "Class"
                    }
                  ],
                  "type": "Wildcard"
                }
              ],
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "sort",
      "comment": "Sorts the specified list into ascending order, according to the natural ordering of its elements. All elements in the list must implement the Comparable interface. Furthermore, all elements in the list must be mutually comparable (that is, e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the list). This sort is guaranteed to be stable: equal elements will not be reordered as a result of the sort. The specified list must be modifiable, but need not be resizable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the list"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#sort(java.util.Comparator)\"\u003e\u003ccode\u003eList.sort(Comparator)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list to be sorted."
        ],
        "implNote": [
          "This implementation defers to the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#sort(java.util.Comparator)\"\u003e\u003ccode\u003eList.sort(Comparator)\u003c/code\u003e\u003c/a\u003e method using the specified list and a \n\u003ccode\u003enull\u003c/code\u003e comparator."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the list contains elements that are not \n\u003ci\u003emutually comparable\u003c/i\u003e (for example, strings and integers).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the specified list\u0027s list-iterator does not support the \n\u003ccode\u003eset\u003c/code\u003e operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - (optional) if the implementation detects that the natural ordering of the list elements is found to violate the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e contract"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Comparator",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "sort",
      "comment": "Sorts the specified list according to the order induced by the specified comparator. All elements in the list must be mutually comparable using the specified comparator (that is, c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list). This sort is guaranteed to be stable: equal elements will not be reordered as a result of the sort. The specified list must be modifiable, but need not be resizable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the list"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#sort(java.util.Comparator)\"\u003e\u003ccode\u003eList.sort(Comparator)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list to be sorted.",
          "\u003ccode\u003ec\u003c/code\u003e - the comparator to determine the order of the list. A \n\u003ccode\u003enull\u003c/code\u003e value indicates that the elements\u0027 \n\u003ci\u003enatural ordering\u003c/i\u003e should be used."
        ],
        "implNote": [
          "This implementation defers to the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#sort(java.util.Comparator)\"\u003e\u003ccode\u003eList.sort(Comparator)\u003c/code\u003e\u003c/a\u003e method using the specified list and comparator."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the list contains elements that are not \n\u003ci\u003emutually comparable\u003c/i\u003e using the specified comparator.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the specified list\u0027s list-iterator does not support the \n\u003ccode\u003eset\u003c/code\u003e operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - (optional) if the comparator is found to violate the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eComparator\u003c/code\u003e\u003c/a\u003e contract"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.lang.Comparable",
                    "parameters": [
                      {
                        "lowerBounds": [
                          {
                            "name": "T",
                            "type": "Class"
                          }
                        ],
                        "type": "Wildcard"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "binarySearch",
      "comment": "Searches the specified list for the specified object using the binary search algorithm. The list must be sorted into ascending order according to the natural ordering of its elements (as by the sort(List) method) prior to making this call. If it is not sorted, the results are undefined. If the list contains multiple elements equal to the specified object, there is no guarantee which one will be found. This method runs in log(n) time for a \"random access\" list (which provides near-constant-time positional access). If the specified list does not implement the RandomAccess interface and is large, this method will do an iterator-based binary search that performs O(n) link traversals and O(log n) element comparisons.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the list"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list to be searched.",
          "\u003ccode\u003ekey\u003c/code\u003e - the key to be searched for."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the list contains elements that are not \n\u003ci\u003emutually comparable\u003c/i\u003e (for example, strings and integers), or the search key is not mutually comparable with the elements of the list."
        ],
        "return": [
          "the index of the search key, if it is contained in the list; otherwise, \n\u003ccode\u003e(-(\u003ci\u003einsertion point\u003c/i\u003e) - 1)\u003c/code\u003e. The \n\u003ci\u003einsertion point\u003c/i\u003e is defined as the point at which the key would be inserted into the list: the index of the first element greater than the key, or \n\u003ccode\u003elist.size()\u003c/code\u003e if all elements in the list are less than the specified key. Note that this guarantees that the return value will be \u0026gt;\u003d 0 if and only if the key is found."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Comparator",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "binarySearch",
      "comment": "Searches the specified list for the specified object using the binary search algorithm. The list must be sorted into ascending order according to the specified comparator (as by the sort(List, Comparator) method), prior to making this call. If it is not sorted, the results are undefined. If the list contains multiple elements equal to the specified object, there is no guarantee which one will be found. This method runs in log(n) time for a \"random access\" list (which provides near-constant-time positional access). If the specified list does not implement the RandomAccess interface and is large, this method will do an iterator-based binary search that performs O(n) link traversals and O(log n) element comparisons.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the list"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list to be searched.",
          "\u003ccode\u003ekey\u003c/code\u003e - the key to be searched for.",
          "\u003ccode\u003ec\u003c/code\u003e - the comparator by which the list is ordered. A \n\u003ccode\u003enull\u003c/code\u003e value indicates that the elements\u0027 \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003enatural ordering\u003c/a\u003e should be used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the list contains elements that are not \n\u003ci\u003emutually comparable\u003c/i\u003e using the specified comparator, or the search key is not mutually comparable with the elements of the list using this comparator."
        ],
        "return": [
          "the index of the search key, if it is contained in the list; otherwise, \n\u003ccode\u003e(-(\u003ci\u003einsertion point\u003c/i\u003e) - 1)\u003c/code\u003e. The \n\u003ci\u003einsertion point\u003c/i\u003e is defined as the point at which the key would be inserted into the list: the index of the first element greater than the key, or \n\u003ccode\u003elist.size()\u003c/code\u003e if all elements in the list are less than the specified key. Note that this guarantees that the return value will be \u0026gt;\u003d 0 if and only if the key is found."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "reverse",
      "comment": "Reverses the order of the elements in the specified list. This method runs in linear time.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list whose elements are to be reversed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the specified list or its list-iterator does not support the \n\u003ccode\u003eset\u003c/code\u003e operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "shuffle",
      "comment": "Randomly permutes the specified list using a default source of randomness. All permutations occur with approximately equal likelihood. The hedge \"approximately\" is used in the foregoing description because default source of randomness is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm would choose permutations with perfect uniformity. This implementation traverses the list backwards, from the last element up to the second, repeatedly swapping a randomly selected element into the \"current position\". Elements are randomly selected from the portion of the list that runs from the first element to the current position, inclusive. This method runs in linear time. If the specified list does not implement the RandomAccess interface and is large, this implementation dumps the specified list into an array before shuffling it, and dumps the shuffled array back into the list. This avoids the quadratic behavior that would result from shuffling a \"sequential access\" list in place.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list to be shuffled."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the specified list or its list-iterator does not support the \n\u003ccode\u003eset\u003c/code\u003e operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Random",
            "type": "Class"
          },
          "name": "rnd",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "shuffle",
      "comment": "Randomly permute the specified list using the specified source of randomness. All permutations occur with equal likelihood assuming that the source of randomness is fair. This implementation traverses the list backwards, from the last element up to the second, repeatedly swapping a randomly selected element into the \"current position\". Elements are randomly selected from the portion of the list that runs from the first element to the current position, inclusive. This method runs in linear time. If the specified list does not implement the RandomAccess interface and is large, this implementation dumps the specified list into an array before shuffling it, and dumps the shuffled array back into the list. This avoids the quadratic behavior that would result from shuffling a \"sequential access\" list in place.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list to be shuffled.",
          "\u003ccode\u003ernd\u003c/code\u003e - the source of randomness to use to shuffle the list."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the specified list or its list-iterator does not support the \n\u003ccode\u003eset\u003c/code\u003e operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "i",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "j",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "swap",
      "comment": "Swaps the elements at the specified positions in the specified list. (If the specified positions are equal, invoking this method leaves the list unchanged.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - The list in which to swap elements.",
          "\u003ccode\u003ei\u003c/code\u003e - the index of one element to be swapped.",
          "\u003ccode\u003ej\u003c/code\u003e - the index of the other element to be swapped."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if either \n\u003ccode\u003ei\u003c/code\u003e or \n\u003ccode\u003ej\u003c/code\u003e is out of range (i \u0026lt; 0 || i \u0026gt;\u003d list.size() || j \u0026lt; 0 || j \u0026gt;\u003d list.size())."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fill",
      "comment": "Replaces all of the elements of the specified list with the specified element. This method runs in linear time.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the list"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list to be filled with the specified element.",
          "\u003ccode\u003eobj\u003c/code\u003e - The element with which to fill the specified list."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the specified list or its list-iterator does not support the \n\u003ccode\u003eset\u003c/code\u003e operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "dest",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "src",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "copy",
      "comment": "Copies all of the elements from one list into another. After the operation, the index of each copied element in the destination list will be identical to its index in the source list. The destination list\u0027s size must be greater than or equal to the source list\u0027s size. If it is greater, the remaining elements in the destination list are unaffected. This method runs in linear time.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the lists"
        ],
        "param": [
          "\u003ccode\u003edest\u003c/code\u003e - The destination list.",
          "\u003ccode\u003esrc\u003c/code\u003e - The source list."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the destination list is too small to contain the entire source List.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the destination list\u0027s list-iterator does not support the \n\u003ccode\u003eset\u003c/code\u003e operation."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "coll",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.lang.Object",
              "type": "Class"
            },
            {
              "name": "java.lang.Comparable",
              "parameters": [
                {
                  "lowerBounds": [
                    {
                      "name": "T",
                      "type": "Class"
                    }
                  ],
                  "type": "Wildcard"
                }
              ],
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "min",
      "comment": "Returns the minimum element of the given collection, according to the natural ordering of its elements. All elements in the collection must implement the Comparable interface. Furthermore, all elements in the collection must be mutually comparable (that is, e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the collection). This method iterates over the entire collection, hence it requires time proportional to the size of the collection.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the collection"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecoll\u003c/code\u003e - the collection whose minimum element is to be determined."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the collection contains elements that are not \n\u003ci\u003emutually comparable\u003c/i\u003e (for example, strings and integers).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if the collection is empty."
        ],
        "return": [
          "the minimum element of the given collection, according to the \n\u003ci\u003enatural ordering\u003c/i\u003e of its elements."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "coll",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Comparator",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "comp",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "min",
      "comment": "Returns the minimum element of the given collection, according to the order induced by the specified comparator. All elements in the collection must be mutually comparable by the specified comparator (that is, comp.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the collection). This method iterates over the entire collection, hence it requires time proportional to the size of the collection.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the collection"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecoll\u003c/code\u003e - the collection whose minimum element is to be determined.",
          "\u003ccode\u003ecomp\u003c/code\u003e - the comparator with which to determine the minimum element. A \n\u003ccode\u003enull\u003c/code\u003e value indicates that the elements\u0027 \n\u003ci\u003enatural ordering\u003c/i\u003e should be used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the collection contains elements that are not \n\u003ci\u003emutually comparable\u003c/i\u003e using the specified comparator.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if the collection is empty."
        ],
        "return": [
          "the minimum element of the given collection, according to the specified comparator."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "coll",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.lang.Object",
              "type": "Class"
            },
            {
              "name": "java.lang.Comparable",
              "parameters": [
                {
                  "lowerBounds": [
                    {
                      "name": "T",
                      "type": "Class"
                    }
                  ],
                  "type": "Wildcard"
                }
              ],
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "max",
      "comment": "Returns the maximum element of the given collection, according to the natural ordering of its elements. All elements in the collection must implement the Comparable interface. Furthermore, all elements in the collection must be mutually comparable (that is, e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the collection). This method iterates over the entire collection, hence it requires time proportional to the size of the collection.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the collection"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecoll\u003c/code\u003e - the collection whose maximum element is to be determined."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the collection contains elements that are not \n\u003ci\u003emutually comparable\u003c/i\u003e (for example, strings and integers).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if the collection is empty."
        ],
        "return": [
          "the maximum element of the given collection, according to the \n\u003ci\u003enatural ordering\u003c/i\u003e of its elements."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "coll",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Comparator",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "comp",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "max",
      "comment": "Returns the maximum element of the given collection, according to the order induced by the specified comparator. All elements in the collection must be mutually comparable by the specified comparator (that is, comp.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the collection). This method iterates over the entire collection, hence it requires time proportional to the size of the collection.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the collection"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecoll\u003c/code\u003e - the collection whose maximum element is to be determined.",
          "\u003ccode\u003ecomp\u003c/code\u003e - the comparator with which to determine the maximum element. A \n\u003ccode\u003enull\u003c/code\u003e value indicates that the elements\u0027 \n\u003ci\u003enatural ordering\u003c/i\u003e should be used."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the collection contains elements that are not \n\u003ci\u003emutually comparable\u003c/i\u003e using the specified comparator.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if the collection is empty."
        ],
        "return": [
          "the maximum element of the given collection, according to the specified comparator."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "distance",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "rotate",
      "comment": "Rotates the elements in the specified list by the specified distance. After calling this method, the element at index i will be the element previously at index (i - distance) mod list.size(), for all values of i between 0 and list.size()-1, inclusive. (This method has no effect on the size of the list.) For example, suppose list comprises [t, a, n, k, s]. After invoking Collections.rotate(list, 1) (or Collections.rotate(list, -4)), list will comprise [s, t, a, n, k]. Note that this method can usefully be applied to sublists to move one or more elements within a list while preserving the order of the remaining elements. For example, the following idiom moves the element at index j forward to position k (which must be greater than or equal to j):      Collections.rotate(list.subList(j, k+1), -1);\n To make this concrete, suppose list comprises [a, b, c, d, e]. To move the element at index 1 (b) forward two positions, perform the following invocation:      Collections.rotate(l.subList(1, 4), -1);\n The resulting list is [a, c, d, b, e]. To move more than one element forward, increase the absolute value of the rotation distance. To move elements backward, use a positive shift distance. If the specified list is small or implements the RandomAccess interface, this implementation exchanges the first element into the location it should go, and then repeatedly exchanges the displaced element into the location it should go until a displaced element is swapped into the first element. If necessary, the process is repeated on the second and successive elements, until the rotation is complete. If the specified list is large and doesn\u0027t implement the RandomAccess interface, this implementation breaks the list into two sublist views around index -distance mod size. Then the reverse(List) method is invoked on each sublist view, and finally it is invoked on the entire list. For a more complete description of both algorithms, see Section 2.3 of Jon Bentley\u0027s Programming Pearls (Addison-Wesley, 1986).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list to be rotated.",
          "\u003ccode\u003edistance\u003c/code\u003e - the distance to rotate the list. There are no constraints on this value; it may be zero, negative, or greater than \n\u003ccode\u003elist.size()\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the specified list or its list-iterator does not support the \n\u003ccode\u003eset\u003c/code\u003e operation."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "oldVal",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "newVal",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "replaceAll",
      "comment": "Replaces all occurrences of one specified value in a list with another. More formally, replaces with newVal each element e in list such that (oldVal\u003d\u003dnull ? e\u003d\u003dnull : oldVal.equals(e)). (This method has no effect on the size of the list.)",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the list"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list in which replacement is to occur.",
          "\u003ccode\u003eoldVal\u003c/code\u003e - the old value to be replaced.",
          "\u003ccode\u003enewVal\u003c/code\u003e - the new value with which \n\u003ccode\u003eoldVal\u003c/code\u003e is to be replaced."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the specified list or its list-iterator does not support the \n\u003ccode\u003eset\u003c/code\u003e operation."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if \n\u003ccode\u003elist\u003c/code\u003e contained one or more elements \n\u003ccode\u003ee\u003c/code\u003e such that \n\u003ccode\u003e(oldVal\u003d\u003dnull ? e\u003d\u003dnull : oldVal.equals(e))\u003c/code\u003e."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "indexOfSubList",
      "comment": "Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence. More formally, returns the lowest index i such that source.subList(i, i+target.size()).equals(target), or -1 if there is no such index. (Returns -1 if target.size() \u003e source.size()) This implementation uses the \"brute force\" technique of scanning over the source list, looking for a match with the target at each location in turn.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the list in which to search for the first occurrence of \n\u003ccode\u003etarget\u003c/code\u003e.",
          "\u003ccode\u003etarget\u003c/code\u003e - the list to search for as a subList of \n\u003ccode\u003esource\u003c/code\u003e."
        ],
        "return": [
          "the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "source",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "target",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "lastIndexOfSubList",
      "comment": "Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence. More formally, returns the highest index i such that source.subList(i, i+target.size()).equals(target), or -1 if there is no such index. (Returns -1 if target.size() \u003e source.size()) This implementation uses the \"brute force\" technique of iterating over the source list, looking for a match with the target at each location in turn.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the list in which to search for the last occurrence of \n\u003ccode\u003etarget\u003c/code\u003e.",
          "\u003ccode\u003etarget\u003c/code\u003e - the list to search for as a subList of \n\u003ccode\u003esource\u003c/code\u003e."
        ],
        "return": [
          "the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unmodifiableCollection",
      "comment": "Returns an unmodifiable view of the specified collection. Query operations on the returned collection \"read through\" to the specified collection, and attempts to modify the returned collection, whether direct or via its iterator, result in an UnsupportedOperationException. The returned collection does not pass the hashCode and equals operations through to the backing collection, but relies on Object\u0027s equals and hashCode methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list. The returned collection will be serializable if the specified collection is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the collection"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the collection for which an unmodifiable view is to be returned."
        ],
        "return": [
          "an unmodifiable view of the specified collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unmodifiableSet",
      "comment": "Returns an unmodifiable view of the specified set. Query operations on the returned set \"read through\" to the specified set, and attempts to modify the returned set, whether direct or via its iterator, result in an UnsupportedOperationException. The returned set will be serializable if the specified set is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the set"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the set for which an unmodifiable view is to be returned."
        ],
        "return": [
          "an unmodifiable view of the specified set."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedSet",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.SortedSet",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unmodifiableSortedSet",
      "comment": "Returns an unmodifiable view of the specified sorted set. Query operations on the returned sorted set \"read through\" to the specified sorted set. Attempts to modify the returned sorted set, whether direct, via its iterator, or via its subSet, headSet, or tailSet views, result in an UnsupportedOperationException. The returned sorted set will be serializable if the specified sorted set is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the set"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the sorted set for which an unmodifiable view is to be returned."
        ],
        "return": [
          "an unmodifiable view of the specified sorted set."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableSet",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.NavigableSet",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unmodifiableNavigableSet",
      "comment": "Returns an unmodifiable view of the specified navigable set. Query operations on the returned navigable set \"read through\" to the specified navigable set. Attempts to modify the returned navigable set, whether direct, via its iterator, or via its subSet, headSet, or tailSet views, result in an UnsupportedOperationException. The returned navigable set will be serializable if the specified navigable set is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the set"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the navigable set for which an unmodifiable view is to be returned"
        ],
        "return": [
          "an unmodifiable view of the specified navigable set"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unmodifiableList",
      "comment": "Returns an unmodifiable view of the specified list. Query operations on the returned list \"read through\" to the specified list, and attempts to modify the returned list, whether direct or via its iterator, result in an UnsupportedOperationException. The returned list will be serializable if the specified list is serializable. Similarly, the returned list will implement RandomAccess if the specified list does.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the list"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list for which an unmodifiable view is to be returned."
        ],
        "return": [
          "an unmodifiable view of the specified list."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "K",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "V",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unmodifiableMap",
      "comment": "Returns an unmodifiable view of the specified map. Query operations on the returned map \"read through\" to the specified map, and attempts to modify the returned map, whether direct or via its collection views, result in an UnsupportedOperationException. The returned map will be serializable if the specified map is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the map for which an unmodifiable view is to be returned."
        ],
        "return": [
          "an unmodifiable view of the specified map."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.SortedMap",
            "parameters": [
              {
                "name": "K",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "name": "V",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unmodifiableSortedMap",
      "comment": "Returns an unmodifiable view of the specified sorted map. Query operations on the returned sorted map \"read through\" to the specified sorted map. Attempts to modify the returned sorted map, whether direct, via its collection views, or via its subMap, headMap, or tailMap views, result in an UnsupportedOperationException. The returned sorted map will be serializable if the specified sorted map is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the sorted map for which an unmodifiable view is to be returned."
        ],
        "return": [
          "an unmodifiable view of the specified sorted map."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableMap",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.NavigableMap",
            "parameters": [
              {
                "name": "K",
                "type": "Class"
              },
              {
                "upperBounds": [
                  {
                    "name": "V",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "unmodifiableNavigableMap",
      "comment": "Returns an unmodifiable view of the specified navigable map. Query operations on the returned navigable map \"read through\" to the specified navigable map. Attempts to modify the returned navigable map, whether direct, via its collection views, or via its subMap, headMap, or tailMap views, result in an UnsupportedOperationException. The returned navigable map will be serializable if the specified navigable map is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the navigable map for which an unmodifiable view is to be returned"
        ],
        "return": [
          "an unmodifiable view of the specified navigable map"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "synchronizedCollection",
      "comment": "Returns a synchronized (thread-safe) collection backed by the specified collection. In order to guarantee serial access, it is critical that all access to the backing collection is accomplished through the returned collection. It is imperative that the user manually synchronize on the returned collection when traversing it via Iterator, Spliterator or Stream:   Collection c \u003d Collections.synchronizedCollection(myCollection);\n     ...\n  synchronized (c) {\n      Iterator i \u003d c.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n         foo(i.next());\n  }\n Failure to follow this advice may result in non-deterministic behavior. The returned collection does not pass the hashCode and equals operations through to the backing collection, but relies on Object\u0027s equals and hashCode methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list. The returned collection will be serializable if the specified collection is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the collection"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the collection to be \"wrapped\" in a synchronized collection."
        ],
        "return": [
          "a synchronized view of the specified collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "synchronizedSet",
      "comment": "Returns a synchronized (thread-safe) set backed by the specified set. In order to guarantee serial access, it is critical that all access to the backing set is accomplished through the returned set. It is imperative that the user manually synchronize on the returned collection when traversing it via Iterator, Spliterator or Stream:   Set s \u003d Collections.synchronizedSet(new HashSet());\n      ...\n  synchronized (s) {\n      Iterator i \u003d s.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n Failure to follow this advice may result in non-deterministic behavior. The returned set will be serializable if the specified set is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the set"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the set to be \"wrapped\" in a synchronized set."
        ],
        "return": [
          "a synchronized view of the specified set."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedSet",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.SortedSet",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "synchronizedSortedSet",
      "comment": "Returns a synchronized (thread-safe) sorted set backed by the specified sorted set. In order to guarantee serial access, it is critical that all access to the backing sorted set is accomplished through the returned sorted set (or its views). It is imperative that the user manually synchronize on the returned sorted set when traversing it or any of its subSet, headSet, or tailSet views via Iterator, Spliterator or Stream:   SortedSet s \u003d Collections.synchronizedSortedSet(new TreeSet());\n      ...\n  synchronized (s) {\n      Iterator i \u003d s.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n or:   SortedSet s \u003d Collections.synchronizedSortedSet(new TreeSet());\n  SortedSet s2 \u003d s.headSet(foo);\n      ...\n  synchronized (s) {  // Note: s, not s2!!!\n      Iterator i \u003d s2.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n Failure to follow this advice may result in non-deterministic behavior. The returned sorted set will be serializable if the specified sorted set is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the set"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the sorted set to be \"wrapped\" in a synchronized sorted set."
        ],
        "return": [
          "a synchronized view of the specified sorted set."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableSet",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.NavigableSet",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "synchronizedNavigableSet",
      "comment": "Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In order to guarantee serial access, it is critical that all access to the backing navigable set is accomplished through the returned navigable set (or its views). It is imperative that the user manually synchronize on the returned navigable set when traversing it, or any of its subSet, headSet, or tailSet views, via Iterator, Spliterator or Stream:   NavigableSet s \u003d Collections.synchronizedNavigableSet(new TreeSet());\n      ...\n  synchronized (s) {\n      Iterator i \u003d s.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n or:   NavigableSet s \u003d Collections.synchronizedNavigableSet(new TreeSet());\n  NavigableSet s2 \u003d s.headSet(foo, true);\n      ...\n  synchronized (s) {  // Note: s, not s2!!!\n      Iterator i \u003d s2.iterator(); // Must be in the synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n Failure to follow this advice may result in non-deterministic behavior. The returned navigable set will be serializable if the specified navigable set is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the set"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the navigable set to be \"wrapped\" in a synchronized navigable set"
        ],
        "return": [
          "a synchronized view of the specified navigable set"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "synchronizedList",
      "comment": "Returns a synchronized (thread-safe) list backed by the specified list. In order to guarantee serial access, it is critical that all access to the backing list is accomplished through the returned list. It is imperative that the user manually synchronize on the returned list when traversing it via Iterator, Spliterator or Stream:   List list \u003d Collections.synchronizedList(new ArrayList());\n      ...\n  synchronized (list) {\n      Iterator i \u003d list.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n Failure to follow this advice may result in non-deterministic behavior. The returned list will be serializable if the specified list is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the list"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list to be \"wrapped\" in a synchronized list."
        ],
        "return": [
          "a synchronized view of the specified list."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "K",
                "type": "Class"
              },
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "synchronizedMap",
      "comment": "Returns a synchronized (thread-safe) map backed by the specified map. In order to guarantee serial access, it is critical that all access to the backing map is accomplished through the returned map. It is imperative that the user manually synchronize on the returned map when traversing any of its collection views via Iterator, Spliterator or Stream:   Map m \u003d Collections.synchronizedMap(new HashMap());\n      ...\n  Set s \u003d m.keySet();  // Needn\u0027t be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not s!\n      Iterator i \u003d s.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n Failure to follow this advice may result in non-deterministic behavior. The returned map will be serializable if the specified map is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the map to be \"wrapped\" in a synchronized map."
        ],
        "return": [
          "a synchronized view of the specified map."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.SortedMap",
            "parameters": [
              {
                "name": "K",
                "type": "Class"
              },
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "synchronizedSortedMap",
      "comment": "Returns a synchronized (thread-safe) sorted map backed by the specified sorted map. In order to guarantee serial access, it is critical that all access to the backing sorted map is accomplished through the returned sorted map (or its views). It is imperative that the user manually synchronize on the returned sorted map when traversing any of its collection views, or the collections views of any of its subMap, headMap or tailMap views, via Iterator, Spliterator or Stream:   SortedMap m \u003d Collections.synchronizedSortedMap(new TreeMap());\n      ...\n  Set s \u003d m.keySet();  // Needn\u0027t be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not s!\n      Iterator i \u003d s.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n or:   SortedMap m \u003d Collections.synchronizedSortedMap(new TreeMap());\n  SortedMap m2 \u003d m.subMap(foo, bar);\n      ...\n  Set s2 \u003d m2.keySet();  // Needn\u0027t be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not m2 or s2!\n      Iterator i \u003d s2.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n Failure to follow this advice may result in non-deterministic behavior. The returned sorted map will be serializable if the specified sorted map is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the sorted map to be \"wrapped\" in a synchronized sorted map."
        ],
        "return": [
          "a synchronized view of the specified sorted map."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableMap",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.NavigableMap",
            "parameters": [
              {
                "name": "K",
                "type": "Class"
              },
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "synchronizedNavigableMap",
      "comment": "Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In order to guarantee serial access, it is critical that all access to the backing navigable map is accomplished through the returned navigable map (or its views). It is imperative that the user manually synchronize on the returned navigable map when traversing any of its collection views, or the collections views of any of its subMap, headMap or tailMap views, via Iterator, Spliterator or Stream:   NavigableMap m \u003d Collections.synchronizedNavigableMap(new TreeMap());\n      ...\n  Set s \u003d m.keySet();  // Needn\u0027t be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not s!\n      Iterator i \u003d s.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n or:   NavigableMap m \u003d Collections.synchronizedNavigableMap(new TreeMap());\n  NavigableMap m2 \u003d m.subMap(foo, true, bar, false);\n      ...\n  Set s2 \u003d m2.keySet();  // Needn\u0027t be in synchronized block\n      ...\n  synchronized (m) {  // Synchronizing on m, not m2 or s2!\n      Iterator i \u003d s.iterator(); // Must be in synchronized block\n      while (i.hasNext())\n          foo(i.next());\n  }\n Failure to follow this advice may result in non-deterministic behavior. The returned navigable map will be serializable if the specified navigable map is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the navigable map to be \"wrapped\" in a synchronized navigable map"
        ],
        "return": [
          "a synchronized view of the specified navigable map."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkedCollection",
      "comment": "Returns a dynamically typesafe view of the specified collection. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a collection contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the collection takes place through the view, it is guaranteed that the collection cannot contain an incorrectly typed element. The generics mechanism in the language provides compile-time (static) type checking, but it is possible to defeat this mechanism with unchecked casts. Usually this is not a problem, as the compiler issues warnings on all such unchecked operations. There are, however, times when static type checking alone is not sufficient. For example, suppose a collection is passed to a third-party library and it is imperative that the library code not corrupt the collection by inserting an element of the wrong type. Another use of dynamically typesafe views is debugging. Suppose a program fails with a ClassCastException, indicating that an incorrectly typed element was put into a parameterized collection. Unfortunately, the exception can occur at any time after the erroneous element is inserted, so it typically provides little or no information as to the real source of the problem. If the problem is reproducible, one can quickly determine its source by temporarily modifying the program to wrap the collection with a dynamically typesafe view. For example, this declaration:  \n     Collection\u003cString\u003e c \u003d new HashSet\u003c\u003e();\n may be replaced temporarily by this one:  \n     Collection\u003cString\u003e c \u003d Collections.checkedCollection(\n         new HashSet\u003c\u003e(), String.class);\n Running the program again will cause it to fail at the point where an incorrectly typed element is inserted into the collection, clearly identifying the source of the problem. Once the problem is fixed, the modified declaration may be reverted back to the original. The returned collection does not pass the hashCode and equals operations through to the backing collection, but relies on Object\u0027s equals and hashCode methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list. The returned collection will be serializable if the specified collection is serializable. Since null is considered to be a value of any reference type, the returned collection permits insertion of null elements whenever the backing collection does.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the class of the objects in the collection"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the collection for which a dynamically typesafe view is to be returned",
          "\u003ccode\u003etype\u003c/code\u003e - the type of element that \n\u003ccode\u003ec\u003c/code\u003e is permitted to hold"
        ],
        "return": [
          "a dynamically typesafe view of the specified collection"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Queue",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Queue",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "queue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkedQueue",
      "comment": "Returns a dynamically typesafe view of the specified queue. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a queue contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the queue takes place through the view, it is guaranteed that the queue cannot contain an incorrectly typed element. A discussion of the use of dynamically typesafe views may be found in the documentation for the checkedCollection method. The returned queue will be serializable if the specified queue is serializable. Since null is considered to be a value of any reference type, the returned queue permits insertion of null elements whenever the backing queue does.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the class of the objects in the queue"
        ],
        "param": [
          "\u003ccode\u003equeue\u003c/code\u003e - the queue for which a dynamically typesafe view is to be returned",
          "\u003ccode\u003etype\u003c/code\u003e - the type of element that \n\u003ccode\u003equeue\u003c/code\u003e is permitted to hold"
        ],
        "return": [
          "a dynamically typesafe view of the specified queue"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkedSet",
      "comment": "Returns a dynamically typesafe view of the specified set. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the set takes place through the view, it is guaranteed that the set cannot contain an incorrectly typed element. A discussion of the use of dynamically typesafe views may be found in the documentation for the checkedCollection method. The returned set will be serializable if the specified set is serializable. Since null is considered to be a value of any reference type, the returned set permits insertion of null elements whenever the backing set does.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the class of the objects in the set"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the set for which a dynamically typesafe view is to be returned",
          "\u003ccode\u003etype\u003c/code\u003e - the type of element that \n\u003ccode\u003es\u003c/code\u003e is permitted to hold"
        ],
        "return": [
          "a dynamically typesafe view of the specified set"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedSet",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.SortedSet",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkedSortedSet",
      "comment": "Returns a dynamically typesafe view of the specified sorted set. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a sorted set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the sorted set takes place through the view, it is guaranteed that the sorted set cannot contain an incorrectly typed element. A discussion of the use of dynamically typesafe views may be found in the documentation for the checkedCollection method. The returned sorted set will be serializable if the specified sorted set is serializable. Since null is considered to be a value of any reference type, the returned sorted set permits insertion of null elements whenever the backing sorted set does.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the class of the objects in the set"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the sorted set for which a dynamically typesafe view is to be returned",
          "\u003ccode\u003etype\u003c/code\u003e - the type of element that \n\u003ccode\u003es\u003c/code\u003e is permitted to hold"
        ],
        "return": [
          "a dynamically typesafe view of the specified sorted set"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableSet",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.NavigableSet",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "s",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkedNavigableSet",
      "comment": "Returns a dynamically typesafe view of the specified navigable set. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a navigable set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the navigable set takes place through the view, it is guaranteed that the navigable set cannot contain an incorrectly typed element. A discussion of the use of dynamically typesafe views may be found in the documentation for the checkedCollection method. The returned navigable set will be serializable if the specified navigable set is serializable. Since null is considered to be a value of any reference type, the returned navigable set permits insertion of null elements whenever the backing sorted set does.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the class of the objects in the set"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - the navigable set for which a dynamically typesafe view is to be returned",
          "\u003ccode\u003etype\u003c/code\u003e - the type of element that \n\u003ccode\u003es\u003c/code\u003e is permitted to hold"
        ],
        "return": [
          "a dynamically typesafe view of the specified navigable set"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "list",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkedList",
      "comment": "Returns a dynamically typesafe view of the specified list. Any attempt to insert an element of the wrong type will result in an immediate ClassCastException. Assuming a list contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the list takes place through the view, it is guaranteed that the list cannot contain an incorrectly typed element. A discussion of the use of dynamically typesafe views may be found in the documentation for the checkedCollection method. The returned list will be serializable if the specified list is serializable. Since null is considered to be a value of any reference type, the returned list permits insertion of null elements whenever the backing list does.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the class of the objects in the list"
        ],
        "param": [
          "\u003ccode\u003elist\u003c/code\u003e - the list for which a dynamically typesafe view is to be returned",
          "\u003ccode\u003etype\u003c/code\u003e - the type of element that \n\u003ccode\u003elist\u003c/code\u003e is permitted to hold"
        ],
        "return": [
          "a dynamically typesafe view of the specified list"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "K",
                "type": "Class"
              },
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "K",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "keyType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "valueType",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkedMap",
      "comment": "Returns a dynamically typesafe view of the specified map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate ClassCastException. Similarly, any attempt to modify the value currently associated with a key will result in an immediate ClassCastException, whether the modification is attempted directly through the map itself, or through a Map.Entry instance obtained from the map\u0027s entry set view. Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is guaranteed that the map cannot contain an incorrectly typed key or value. A discussion of the use of dynamically typesafe views may be found in the documentation for the checkedCollection method. The returned map will be serializable if the specified map is serializable. Since null is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the map for which a dynamically typesafe view is to be returned",
          "\u003ccode\u003ekeyType\u003c/code\u003e - the type of key that \n\u003ccode\u003em\u003c/code\u003e is permitted to hold",
          "\u003ccode\u003evalueType\u003c/code\u003e - the type of value that \n\u003ccode\u003em\u003c/code\u003e is permitted to hold"
        ],
        "return": [
          "a dynamically typesafe view of the specified map"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.SortedMap",
            "parameters": [
              {
                "name": "K",
                "type": "Class"
              },
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "K",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "keyType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "valueType",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkedSortedMap",
      "comment": "Returns a dynamically typesafe view of the specified sorted map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate ClassCastException. Similarly, any attempt to modify the value currently associated with a key will result in an immediate ClassCastException, whether the modification is attempted directly through the map itself, or through a Map.Entry instance obtained from the map\u0027s entry set view. Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is guaranteed that the map cannot contain an incorrectly typed key or value. A discussion of the use of dynamically typesafe views may be found in the documentation for the checkedCollection method. The returned map will be serializable if the specified map is serializable. Since null is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the map for which a dynamically typesafe view is to be returned",
          "\u003ccode\u003ekeyType\u003c/code\u003e - the type of key that \n\u003ccode\u003em\u003c/code\u003e is permitted to hold",
          "\u003ccode\u003evalueType\u003c/code\u003e - the type of value that \n\u003ccode\u003em\u003c/code\u003e is permitted to hold"
        ],
        "return": [
          "a dynamically typesafe view of the specified map"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableMap",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.NavigableMap",
            "parameters": [
              {
                "name": "K",
                "type": "Class"
              },
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "K",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "keyType",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "valueType",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkedNavigableMap",
      "comment": "Returns a dynamically typesafe view of the specified navigable map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate ClassCastException. Similarly, any attempt to modify the value currently associated with a key will result in an immediate ClassCastException, whether the modification is attempted directly through the map itself, or through a Map.Entry instance obtained from the map\u0027s entry set view. Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is guaranteed that the map cannot contain an incorrectly typed key or value. A discussion of the use of dynamically typesafe views may be found in the documentation for the checkedCollection method. The returned map will be serializable if the specified map is serializable. Since null is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - type of map keys",
          "\u003ccode\u003eV\u003c/code\u003e - type of map values"
        ],
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - the map for which a dynamically typesafe view is to be returned",
          "\u003ccode\u003ekeyType\u003c/code\u003e - the type of key that \n\u003ccode\u003em\u003c/code\u003e is permitted to hold",
          "\u003ccode\u003evalueType\u003c/code\u003e - the type of value that \n\u003ccode\u003em\u003c/code\u003e is permitted to hold"
        ],
        "return": [
          "a dynamically typesafe view of the specified map"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "emptyIterator",
      "comment": "Returns an iterator that has no elements. More precisely, hasNext always returns false. next always throws NoSuchElementException. remove always throws IllegalStateException. Implementations of this method are permitted, but not required, to return the same object from multiple invocations.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of elements, if there were any, in the iterator"
        ],
        "return": [
          "an empty iterator"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ListIterator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "emptyListIterator",
      "comment": "Returns a list iterator that has no elements. More precisely, hasNext and hasPrevious always return false. next and previous always throw NoSuchElementException. remove and set always throw IllegalStateException. add always throws UnsupportedOperationException. nextIndex always returns 0. previousIndex always returns -1. Implementations of this method are permitted, but not required, to return the same object from multiple invocations.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of elements, if there were any, in the iterator"
        ],
        "return": [
          "an empty list iterator"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "emptyEnumeration",
      "comment": "Returns an enumeration that has no elements. More precisely, hasMoreElements always returns false. nextElement always throws NoSuchElementException. Implementations of this method are permitted, but not required, to return the same object from multiple invocations.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the enumeration"
        ],
        "return": [
          "an empty enumeration"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "emptySet",
      "comment": "Returns an empty set (immutable). This set is serializable. Unlike the like-named field, this method is parameterized. This example illustrates the type-safe way to obtain an empty set:      Set\u003cString\u003e s \u003d Collections.emptySet();",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the set"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collections.html#EMPTY_SET\"\u003e\u003ccode\u003eEMPTY_SET\u003c/code\u003e\u003c/a\u003e"
        ],
        "implNote": [
          "Implementations of this method need not create a separate \n\u003ccode\u003eSet\u003c/code\u003e object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)"
        ],
        "return": [
          "the empty set"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedSet",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "emptySortedSet",
      "comment": "Returns an empty sorted set (immutable). This set is serializable. This example illustrates the type-safe way to obtain an empty sorted set:  \n     SortedSet\u003cString\u003e s \u003d Collections.emptySortedSet();",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - type of elements, if there were any, in the set"
        ],
        "implNote": [
          "Implementations of this method need not create a separate \n\u003ccode\u003eSortedSet\u003c/code\u003e object for each call."
        ],
        "return": [
          "the empty sorted set"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableSet",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "emptyNavigableSet",
      "comment": "Returns an empty navigable set (immutable). This set is serializable. This example illustrates the type-safe way to obtain an empty navigable set:  \n     NavigableSet\u003cString\u003e s \u003d Collections.emptyNavigableSet();",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - type of elements, if there were any, in the set"
        ],
        "implNote": [
          "Implementations of this method need not create a separate \n\u003ccode\u003eNavigableSet\u003c/code\u003e object for each call."
        ],
        "return": [
          "the empty navigable set"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "emptyList",
      "comment": "Returns an empty list (immutable). This list is serializable. This example illustrates the type-safe way to obtain an empty list:      List\u003cString\u003e s \u003d Collections.emptyList();",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - type of elements, if there were any, in the list"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collections.html#EMPTY_LIST\"\u003e\u003ccode\u003eEMPTY_LIST\u003c/code\u003e\u003c/a\u003e"
        ],
        "implNote": [
          "Implementations of this method need not create a separate \n\u003ccode\u003eList\u003c/code\u003e object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)"
        ],
        "return": [
          "an empty immutable list"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "emptyMap",
      "comment": "Returns an empty map (immutable). This map is serializable. This example illustrates the type-safe way to obtain an empty map:      Map\u003cString, Date\u003e s \u003d Collections.emptyMap();",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collections.html#EMPTY_MAP\"\u003e\u003ccode\u003eEMPTY_MAP\u003c/code\u003e\u003c/a\u003e"
        ],
        "implNote": [
          "Implementations of this method need not create a separate \n\u003ccode\u003eMap\u003c/code\u003e object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)"
        ],
        "return": [
          "an empty map"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "emptySortedMap",
      "comment": "Returns an empty sorted map (immutable). This map is serializable. This example illustrates the type-safe way to obtain an empty map:  \n     SortedMap\u003cString, Date\u003e s \u003d Collections.emptySortedMap();",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "implNote": [
          "Implementations of this method need not create a separate \n\u003ccode\u003eSortedMap\u003c/code\u003e object for each call."
        ],
        "return": [
          "an empty sorted map"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableMap",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "emptyNavigableMap",
      "comment": "Returns an empty navigable map (immutable). This map is serializable. This example illustrates the type-safe way to obtain an empty map:  \n     NavigableMap\u003cString, Date\u003e s \u003d Collections.emptyNavigableMap();",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "implNote": [
          "Implementations of this method need not create a separate \n\u003ccode\u003eNavigableMap\u003c/code\u003e object for each call."
        ],
        "return": [
          "an empty navigable map"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "singleton",
      "comment": "Returns an immutable set containing only the specified object. The returned set is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the set"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - the sole object to be stored in the returned set."
        ],
        "return": [
          "an immutable set containing only the specified object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "singletonList",
      "comment": "Returns an immutable list containing only the specified object. The returned list is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the list"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - the sole object to be stored in the returned list."
        ],
        "return": [
          "an immutable list containing only the specified object."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "singletonMap",
      "comment": "Returns an immutable map, mapping only the specified key to the specified value. The returned map is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the class of the map keys",
          "\u003ccode\u003eV\u003c/code\u003e - the class of the map values"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the sole key to be stored in the returned map.",
          "\u003ccode\u003evalue\u003c/code\u003e - the value to which the returned map maps \n\u003ccode\u003ekey\u003c/code\u003e."
        ],
        "return": [
          "an immutable map containing only the specified key-value mapping."
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "n",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "nCopies",
      "comment": "Returns an immutable list consisting of n copies of the specified object. The newly allocated data object is tiny (it contains a single reference to the data object). This method is useful in combination with the List.addAll method to grow lists. The returned list is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the object to copy and of the objects in the returned list."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#addAll(java.util.Collection)\"\u003e\u003ccode\u003eList.addAll(Collection)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#addAll(int,java.util.Collection)\"\u003e\u003ccode\u003eList.addAll(int, Collection)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - the number of elements in the returned list.",
          "\u003ccode\u003eo\u003c/code\u003e - the element to appear repeatedly in the returned list."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003en \u0026lt; 0\u003c/code\u003e"
        ],
        "return": [
          "an immutable list consisting of \n\u003ccode\u003en\u003c/code\u003e copies of the specified object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "reverseOrder",
      "comment": "Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface. (The natural ordering is the ordering imposed by the objects\u0027 own compareTo method.) This enables a simple idiom for sorting (or maintaining) collections (or arrays) of objects that implement the Comparable interface in reverse-natural-order. For example, suppose a is an array of strings. Then:           Arrays.sort(a, Collections.reverseOrder());\n sorts the array in reverse-lexicographic (alphabetical) order. The returned comparator is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects compared by the comparator"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "A comparator that imposes the reverse of the \n\u003ci\u003enatural ordering\u003c/i\u003e on a collection of objects that implement the \n\u003ccode\u003eComparable\u003c/code\u003e interface."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Comparator",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "cmp",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "reverseOrder",
      "comment": "Returns a comparator that imposes the reverse ordering of the specified comparator. If the specified comparator is null, this method is equivalent to reverseOrder() (in other words, it returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface). The returned comparator is serializable (assuming the specified comparator is also serializable or null).",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects compared by the comparator"
        ],
        "param": [
          "\u003ccode\u003ecmp\u003c/code\u003e - a comparator who\u0027s ordering is to be reversed by the returned comparator or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A comparator that imposes the reverse ordering of the specified comparator."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "enumeration",
      "comment": "Returns an enumeration over the specified collection. This provides interoperability with legacy APIs that require an enumeration as input. The iterator returned from a call to Enumeration.asIterator() does not support removal of elements from the specified collection. This is necessary to avoid unintentionally increasing the capabilities of the returned enumeration.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the collection"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eEnumeration\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the collection for which an enumeration is to be returned."
        ],
        "return": [
          "an enumeration over the specified collection."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ArrayList",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Enumeration",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "e",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "list",
      "comment": "Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration. This method provides interoperability between legacy APIs that return enumerations and new APIs that require collections.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects returned by the enumeration"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eEnumeration\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ArrayList.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - enumeration providing elements for the returned array list"
        ],
        "return": [
          "an array list containing the elements returned by the specified enumeration."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "frequency",
      "comment": "Returns the number of elements in the specified collection equal to the specified object. More formally, returns the number of elements e in the collection such that Objects.equals(o, e).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the collection in which to determine the frequency of \n\u003ccode\u003eo\u003c/code\u003e",
          "\u003ccode\u003eo\u003c/code\u003e - the object whose frequency is to be determined"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e is null"
        ],
        "return": [
          "the number of elements in \n\u003ccode\u003ec\u003c/code\u003e equal to \n\u003ccode\u003eo\u003c/code\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c2",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "disjoint",
      "comment": "Returns true if the two specified collections have no elements in common. Care must be exercised if this method is used on collections that do not comply with the general contract for Collection. Implementations may elect to iterate over either collection and test for containment in the other collection (or to perform any equivalent computation). If either collection uses a nonstandard equality test (as does a SortedSet whose ordering is not compatible with equals, or the key set of an IdentityHashMap), both collections must use the same nonstandard equality test, or the result of this method is undefined. Care must also be exercised when using collections that have restrictions on the elements that they may contain. Collection implementations are allowed to throw exceptions for any operation involving elements they deem ineligible. For absolute safety the specified collections should contain only elements which are eligible elements for both collections. Note that it is permissible to pass the same collection in both parameters, in which case the method will return true if and only if the collection is empty.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec1\u003c/code\u003e - a collection",
          "\u003ccode\u003ec2\u003c/code\u003e - a collection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either collection is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if one collection contains a \n\u003ccode\u003enull\u003c/code\u003e element and \n\u003ccode\u003enull\u003c/code\u003e is not an eligible element for the other collection. (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if one collection contains an element that is of a type which is ineligible for the other collection. (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the two specified collections have no elements in common."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class"
          },
          "name": "elements",
          "varargs": true
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "addAll",
      "comment": "Adds all of the specified elements to the specified collection. Elements to be added may be specified individually or as an array. The behavior of this convenience method is identical to that of c.addAll(Arrays.asList(elements)), but this method is likely to run significantly faster under most implementations. When elements are specified individually, this method provides a convenient way to add a few elements to an existing collection:      Collections.addAll(flavors, \"Peaches \u0027n Plutonium\", \"Rocky Racoon\");",
      "annotations": [
        {
          "type": {
            "name": "SafeVarargs",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the elements to add and of the collection"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#addAll(java.util.Collection)\"\u003e\u003ccode\u003eCollection.addAll(Collection)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the collection into which \n\u003ccode\u003eelements\u003c/code\u003e are to be inserted",
          "\u003ccode\u003eelements\u003c/code\u003e - the elements to insert into \n\u003ccode\u003ec\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ec\u003c/code\u003e does not support the \n\u003ccode\u003eadd\u003c/code\u003e operation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eelements\u003c/code\u003e contains one or more null values and \n\u003ccode\u003ec\u003c/code\u003e does not permit null elements, or if \n\u003ccode\u003ec\u003c/code\u003e or \n\u003ccode\u003eelements\u003c/code\u003e are \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of a value in \n\u003ccode\u003eelements\u003c/code\u003e prevents it from being added to \n\u003ccode\u003ec\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the collection changed as a result of the call"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "E",
                "type": "Class"
              },
              {
                "name": "java.lang.Boolean",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "map",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newSetFromMap",
      "comment": "Returns a set backed by the specified map. The resulting set displays the same ordering, concurrency, and performance characteristics as the backing map. In essence, this factory method provides a Set implementation corresponding to any Map implementation. There is no need to use this method on a Map implementation that already has a corresponding Set implementation (such as HashMap or TreeMap). Each method invocation on the set returned by this method results in exactly one method invocation on the backing map or its keySet view, with one exception. The addAll method is implemented as a sequence of put invocations on the backing map. The specified map must be empty at the time this method is invoked, and should not be accessed directly after this method returns. These conditions are ensured if the map is created empty, passed directly to this method, and no reference to the map is retained, as illustrated in the following code fragment:     Set\u003cObject\u003e weakHashSet \u003d Collections.newSetFromMap(\n        new WeakHashMap\u003cObject, Boolean\u003e());",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the class of the map keys and of the objects in the returned set"
        ],
        "param": [
          "\u003ccode\u003emap\u003c/code\u003e - the backing map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emap\u003c/code\u003e is not empty"
        ],
        "return": [
          "the set backed by the map"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Queue",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Deque",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "deque",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "asLifoQueue",
      "comment": "Returns a view of a Deque as a Last-in-first-out (Lifo) Queue. Method add is mapped to push, remove is mapped to pop and so on. This view can be useful when you would like to use a method requiring a Queue but you need Lifo ordering. Each method invocation on the queue returned by this method results in exactly one method invocation on the backing deque, with one exception. The addAll method is implemented as a sequence of addFirst invocations on the backing deque.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the class of the objects in the deque"
        ],
        "param": [
          "\u003ccode\u003edeque\u003c/code\u003e - the deque"
        ],
        "return": [
          "the queue"
        ],
        "since": [
          "1.6"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.Collections",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eList\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}