{
  "packageName": "java.util",
  "simpleName": "Map",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "size",
      "comment": "Returns the number of key-value mappings in this map. If the map contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of key-value mappings in this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEmpty",
      "comment": "Returns true if this map contains no key-value mappings.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this map contains no key-value mappings"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "containsKey",
      "comment": "Returns true if this map contains a mapping for the specified key. More formally, returns true if and only if this map contains a mapping for a key k such that Objects.equals(key, k). (There can be at most one such mapping.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key whose presence in this map is to be tested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the key is of an inappropriate type for this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this map contains a mapping for the specified key"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "containsValue",
      "comment": "Returns true if this map maps one or more keys to the specified value. More formally, returns true if and only if this map contains at least one mapping to a value v such that Objects.equals(value, v). This operation will probably require time linear in the map size for most implementations of the Map interface.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - value whose presence in this map is to be tested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the value is of an inappropriate type for this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified value is null and this map does not permit null values (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this map maps one or more keys to the specified value"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Map",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that Objects.equals(key, k), then this method returns v; otherwise it returns null. (There can be at most one such mapping.) If this map permits null values, then a return value of null does not necessarily indicate that the map contains no mapping for the key; it\u0027s also possible that the map explicitly maps the key to null. The containsKey operation may be used to distinguish these two cases.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key whose associated value is to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the key is of an inappropriate type for this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "the value to which the specified key is mapped, or \n\u003ccode\u003enull\u003c/code\u003e if this map contains no mapping for the key"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Map",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "V",
            "type": "Variable"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "put",
      "comment": "Associates the specified value with the specified key in this map (optional operation). If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map m is said to contain a mapping for a key k if and only if m.containsKey(k) would return true.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003evalue\u003c/code\u003e - value to be associated with the specified key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eput\u003c/code\u003e operation is not supported by this map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified key or value prevents it from being stored in this map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key or value is null and this map does not permit null keys or values",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified key or value prevents it from being stored in this map"
        ],
        "return": [
          "the previous value associated with \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there was no mapping for \n\u003ccode\u003ekey\u003c/code\u003e. (A \n\u003ccode\u003enull\u003c/code\u003e return can also indicate that the map previously associated \n\u003ccode\u003enull\u003c/code\u003e with \n\u003ccode\u003ekey\u003c/code\u003e, if the implementation supports \n\u003ccode\u003enull\u003c/code\u003e values.)"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Map",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Removes the mapping for a key from this map if it is present (optional operation). More formally, if this map contains a mapping from key k to value v such that Objects.equals(key, k), that mapping is removed. (The map can contain at most one such mapping.) Returns the value to which this map previously associated the key, or null if the map contained no mapping for the key. If this map permits null values, then a return value of null does not necessarily indicate that the map contained no mapping for the key; it\u0027s also possible that the map explicitly mapped the key to null. The map will not contain a mapping for the specified key once the call returns.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key whose mapping is to be removed from the map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eremove\u003c/code\u003e operation is not supported by this map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the key is of an inappropriate type for this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "the previous value associated with \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there was no mapping for \n\u003ccode\u003ekey\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "m",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "putAll",
      "comment": "Copies all of the mappings from the specified map to this map (optional operation). The effect of this call is equivalent to that of calling put(k, v) on this map once for each mapping from key k to value v in the specified map. The behavior of this operation is undefined if the specified map is modified while the operation is in progress.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003em\u003c/code\u003e - mappings to be stored in this map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eputAll\u003c/code\u003e operation is not supported by this map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of a key or value in the specified map prevents it from being stored in this map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified map is null, or if this map does not permit null keys or values, and the specified map contains null keys or values",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of a key or value in the specified map prevents it from being stored in this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clear",
      "comment": "Removes all of the mappings from this map (optional operation). The map will be empty after this call returns.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eclear\u003c/code\u003e operation is not supported by this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "owner": "java.util.Map",
            "name": "K",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "keySet",
      "comment": "Returns a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator\u0027s own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a set view of the keys contained in this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "owner": "java.util.Map",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "values",
      "comment": "Returns a Collection view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator\u0027s own remove operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a collection view of the values contained in this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.util.Map$Entry",
            "parameters": [
              {
                "owner": "java.util.Map",
                "name": "K",
                "type": "Variable"
              },
              {
                "owner": "java.util.Map",
                "name": "V",
                "type": "Variable"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "entrySet",
      "comment": "Returns a Set view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator\u0027s own remove operation, or through the setValue operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a set view of the mappings contained in this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Compares the specified object with this map for equality. Returns true if the given object is also a map and the two maps represent the same mappings. More formally, two maps m1 and m2 represent the same mappings if m1.entrySet().equals(m2.entrySet()). This ensures that the equals method works properly across different implementations of the Map interface.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - object to be compared for equality with this map"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified object is equal to this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hashCode",
      "comment": "Returns the hash code value for this map. The hash code of a map is defined to be the sum of the hash codes of each entry in the map\u0027s entrySet() view. This ensures that m1.equals(m2) implies that m1.hashCode()\u003d\u003dm2.hashCode() for any two maps m1 and m2, as required by the general contract of Object.hashCode().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.Entry.html#hashCode()\"\u003e\u003ccode\u003eMap.Entry.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the hash code value for this map"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Map",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "V",
            "type": "Variable"
          },
          "name": "defaultValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getOrDefault",
      "comment": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties."
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key whose associated value is to be returned",
          "\u003ccode\u003edefaultValue\u003c/code\u003e - the default mapping of the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the key is of an inappropriate type for this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "the value to which the specified key is mapped, or \n\u003ccode\u003edefaultValue\u003c/code\u003e if this map contains no mapping for the key"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiConsumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "action",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "forEach",
      "comment": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is equivalent to, for this \n\u003ccode\u003emap\u003c/code\u003e: \n\u003cpre\u003e \u003ccode\u003e\n for (Map.Entry\u0026lt;K, V\u0026gt; entry : map.entrySet())\n     action.accept(entry.getKey(), entry.getValue());\n \u003c/code\u003e\u003c/pre\u003e The default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties."
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - The action to be performed for each entry"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified action is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ConcurrentModificationException.html\" title\u003d\"class in java.util\"\u003eConcurrentModificationException\u003c/a\u003e\u003c/code\u003e - if an entry is found to be removed during iteration"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "function",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "replaceAll",
      "comment": "Replaces each entry\u0027s value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "\u003cp\u003eThe default implementation is equivalent to, for this \u003ccode\u003emap\u003c/code\u003e: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n for (Map.Entry\u0026lt;K, V\u0026gt; entry : map.entrySet())\n     entry.setValue(function.apply(entry.getKey(), entry.getValue()));\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003efunction\u003c/code\u003e - the function to apply to each entry"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eset\u003c/code\u003e operation is not supported by this map\u0027s entry set iterator.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of a replacement value prevents it from being stored in this map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified function is null, or the specified replacement value is null, and this map does not permit null values",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if a replacement value is of an inappropriate type for this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if function or a replacement value is null, and this map does not permit null keys or values (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of a replacement value prevents it from being stored in this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ConcurrentModificationException.html\" title\u003d\"class in java.util\"\u003eConcurrentModificationException\u003c/a\u003e\u003c/code\u003e - if an entry is found to be removed during iteration"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Map",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "V",
            "type": "Variable"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "putIfAbsent",
      "comment": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is equivalent to, for this \n\u003ccode\u003emap\u003c/code\u003e: \n\u003cpre\u003e \u003ccode\u003e\n V v \u003d map.get(key);\n if (v \u003d\u003d null)\n     v \u003d map.put(key, value);\n\n return v;\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003eThe default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003evalue\u003c/code\u003e - value to be associated with the specified key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eput\u003c/code\u003e operation is not supported by this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the key or value is of an inappropriate type for this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key or value is null, and this map does not permit null keys or values (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified key or value prevents it from being stored in this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "the previous value associated with the specified key, or \n\u003ccode\u003enull\u003c/code\u003e if there was no mapping for the key. (A \n\u003ccode\u003enull\u003c/code\u003e return can also indicate that the map previously associated \n\u003ccode\u003enull\u003c/code\u003e with the key, if the implementation supports null values.)"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Removes the entry for the specified key only if it is currently mapped to the specified value.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is equivalent to, for this \n\u003ccode\u003emap\u003c/code\u003e: \n\u003cpre\u003e \u003ccode\u003e\n if (map.containsKey(key) \u0026amp;\u0026amp; Objects.equals(map.get(key), value)) {\n     map.remove(key);\n     return true;\n } else\n     return false;\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003eThe default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is associated",
          "\u003ccode\u003evalue\u003c/code\u003e - value expected to be associated with the specified key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eremove\u003c/code\u003e operation is not supported by this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the key or value is of an inappropriate type for this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key or value is null, and this map does not permit null keys or values (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the value was removed"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "V",
            "type": "Variable"
          },
          "name": "oldValue",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "V",
            "type": "Variable"
          },
          "name": "newValue",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "replace",
      "comment": "Replaces the entry for the specified key only if currently mapped to the specified value.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is equivalent to, for this \n\u003ccode\u003emap\u003c/code\u003e: \n\u003cpre\u003e \u003ccode\u003e\n if (map.containsKey(key) \u0026amp;\u0026amp; Objects.equals(map.get(key), oldValue)) {\n     map.put(key, newValue);\n     return true;\n } else\n     return false;\n \u003c/code\u003e\u003c/pre\u003e The default implementation does not throw NullPointerException for maps that do not support null values if oldValue is null unless newValue is also null. \n\u003cp\u003eThe default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is associated",
          "\u003ccode\u003eoldValue\u003c/code\u003e - value expected to be associated with the specified key",
          "\u003ccode\u003enewValue\u003c/code\u003e - value to be associated with the specified key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eput\u003c/code\u003e operation is not supported by this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of a specified key or value prevents it from being stored in this map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if a specified key or newValue is null, and this map does not permit null keys or values",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if oldValue is null and this map does not permit null values (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of a specified key or value prevents it from being stored in this map"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the value was replaced"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Map",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "V",
            "type": "Variable"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "replace",
      "comment": "Replaces the entry for the specified key only if it is currently mapped to some value.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is equivalent to, for this \n\u003ccode\u003emap\u003c/code\u003e: \n\u003cpre\u003e \u003ccode\u003e\n if (map.containsKey(key)) {\n     return map.put(key, value);\n } else\n     return null;\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003eThe default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is associated",
          "\u003ccode\u003evalue\u003c/code\u003e - value to be associated with the specified key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eput\u003c/code\u003e operation is not supported by this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified key or value prevents it from being stored in this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key or value is null, and this map does not permit null keys or values",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified key or value prevents it from being stored in this map"
        ],
        "return": [
          "the previous value associated with the specified key, or \n\u003ccode\u003enull\u003c/code\u003e if there was no mapping for the key. (A \n\u003ccode\u003enull\u003c/code\u003e return can also indicate that the map previously associated \n\u003ccode\u003enull\u003c/code\u003e with the key, if the implementation supports null values.)"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Map",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "mappingFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "computeIfAbsent",
      "comment": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null. If the mapping function returns null, no mapping is recorded. If the mapping function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in:  \n map.computeIfAbsent(key, k -\u003e new Value(f(k)));\n Or to implement a multi-value map, Map\u003cK,Collection\u003cV\u003e\u003e, supporting multiple values per key:  \n map.computeIfAbsent(key, k -\u003e new HashSet\u003cV\u003e()).add(v);\n The mapping function should not modify this map during computation.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is equivalent to the following steps for this \n\u003ccode\u003emap\u003c/code\u003e, then returning the current value or \n\u003ccode\u003enull\u003c/code\u003e if now absent: \n\u003cpre\u003e \u003ccode\u003e\n if (map.get(key) \u003d\u003d null) {\n     V newValue \u003d mappingFunction.apply(key);\n     if (newValue !\u003d null)\n         map.put(key, newValue);\n }\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003eThe default implementation makes no guarantees about detecting if the mapping function modifies this map during computation and, if appropriate, reporting an error. Non-concurrent implementations should override this method and, on a best-effort basis, throw a \u003ccode\u003eConcurrentModificationException\u003c/code\u003e if it is detected that the mapping function modifies this map during computation. Concurrent implementations should override this method and, on a best-effort basis, throw an \u003ccode\u003eIllegalStateException\u003c/code\u003e if it is detected that the mapping function modifies this map during computation and as a result computation would never complete. \u003c/p\u003e\n\u003cp\u003eThe default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties. In particular, all implementations of subinterface \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eConcurrentMap\u003c/code\u003e\u003c/a\u003e must document whether the mapping function is applied once atomically only if the value is not present.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003emappingFunction\u003c/code\u003e - the mapping function to compute a value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not support null keys, or the mappingFunction is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eput\u003c/code\u003e operation is not supported by this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified key or value prevents it from being stored in this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified key or value prevents it from being stored in this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "the current (existing or computed) value associated with the specified key, or null if the computed value is null"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Map",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "remappingFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "computeIfPresent",
      "comment": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is equivalent to performing the following steps for this \n\u003ccode\u003emap\u003c/code\u003e, then returning the current value or \n\u003ccode\u003enull\u003c/code\u003e if now absent: \n\u003cpre\u003e \u003ccode\u003e\n if (map.get(key) !\u003d null) {\n     V oldValue \u003d map.get(key);\n     V newValue \u003d remappingFunction.apply(key, oldValue);\n     if (newValue !\u003d null)\n         map.put(key, newValue);\n     else\n         map.remove(key);\n }\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003eThe default implementation makes no guarantees about detecting if the remapping function modifies this map during computation and, if appropriate, reporting an error. Non-concurrent implementations should override this method and, on a best-effort basis, throw a \u003ccode\u003eConcurrentModificationException\u003c/code\u003e if it is detected that the remapping function modifies this map during computation. Concurrent implementations should override this method and, on a best-effort basis, throw an \u003ccode\u003eIllegalStateException\u003c/code\u003e if it is detected that the remapping function modifies this map during computation and as a result computation would never complete. \u003c/p\u003e\n\u003cp\u003eThe default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties. In particular, all implementations of subinterface \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eConcurrentMap\u003c/code\u003e\u003c/a\u003e must document whether the remapping function is applied once atomically only if the value is not present.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003eremappingFunction\u003c/code\u003e - the remapping function to compute a value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not support null keys, or the remappingFunction is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eput\u003c/code\u003e operation is not supported by this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified key or value prevents it from being stored in this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified key or value prevents it from being stored in this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "the new value associated with the specified key, or null if none"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Map",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "K",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "remappingFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "compute",
      "comment": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). For example, to either create or append a String msg to a value mapping:  \n map.compute(key, (k, v) -\u003e (v \u003d\u003d null) ? msg : v.concat(msg)) (Method merge() is often simpler to use for such purposes.) If the remapping function returns null, the mapping is removed (or remains absent if initially absent). If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is equivalent to performing the following steps for this \n\u003ccode\u003emap\u003c/code\u003e, then returning the current value or \n\u003ccode\u003enull\u003c/code\u003e if absent: \n\u003cpre\u003e \u003ccode\u003e\n V oldValue \u003d map.get(key);\n V newValue \u003d remappingFunction.apply(key, oldValue);\n if (oldValue !\u003d null) {\n    if (newValue !\u003d null)\n       map.put(key, newValue);\n    else\n       map.remove(key);\n } else {\n    if (newValue !\u003d null)\n       map.put(key, newValue);\n    else\n       return null;\n }\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003eThe default implementation makes no guarantees about detecting if the remapping function modifies this map during computation and, if appropriate, reporting an error. Non-concurrent implementations should override this method and, on a best-effort basis, throw a \u003ccode\u003eConcurrentModificationException\u003c/code\u003e if it is detected that the remapping function modifies this map during computation. Concurrent implementations should override this method and, on a best-effort basis, throw an \u003ccode\u003eIllegalStateException\u003c/code\u003e if it is detected that the remapping function modifies this map during computation and as a result computation would never complete. \u003c/p\u003e\n\u003cp\u003eThe default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties. In particular, all implementations of subinterface \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eConcurrentMap\u003c/code\u003e\u003c/a\u003e must document whether the remapping function is applied once atomically only if the value is not present.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the specified value is to be associated",
          "\u003ccode\u003eremappingFunction\u003c/code\u003e - the remapping function to compute a value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not support null keys, or the remappingFunction is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eput\u003c/code\u003e operation is not supported by this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified key or value prevents it from being stored in this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified key or value prevents it from being stored in this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "the new value associated with the specified key, or null if none"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Map",
        "name": "V",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "K",
            "type": "Variable"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Map",
            "name": "V",
            "type": "Variable"
          },
          "name": "value",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.BiFunction",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Map",
                    "name": "V",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "remappingFunction",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "merge",
      "comment": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is null. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a String msg to a value mapping:  \n map.merge(key, msg, String::concat)\n If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is equivalent to performing the following steps for this \n\u003ccode\u003emap\u003c/code\u003e, then returning the current value or \n\u003ccode\u003enull\u003c/code\u003e if absent: \n\u003cpre\u003e \u003ccode\u003e\n V oldValue \u003d map.get(key);\n V newValue \u003d (oldValue \u003d\u003d null) ? value :\n              remappingFunction.apply(oldValue, value);\n if (newValue \u003d\u003d null)\n     map.remove(key);\n else\n     map.put(key, newValue);\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003eThe default implementation makes no guarantees about detecting if the remapping function modifies this map during computation and, if appropriate, reporting an error. Non-concurrent implementations should override this method and, on a best-effort basis, throw a \u003ccode\u003eConcurrentModificationException\u003c/code\u003e if it is detected that the remapping function modifies this map during computation. Concurrent implementations should override this method and, on a best-effort basis, throw an \u003ccode\u003eIllegalStateException\u003c/code\u003e if it is detected that the remapping function modifies this map during computation and as a result computation would never complete. \u003c/p\u003e\n\u003cp\u003eThe default implementation makes no guarantees about synchronization or atomicity properties of this method. Any implementation providing atomicity guarantees must override this method and document its concurrency properties. In particular, all implementations of subinterface \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/ConcurrentMap.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eConcurrentMap\u003c/code\u003e\u003c/a\u003e must document whether the remapping function is applied once atomically only if the value is not present.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - key with which the resulting value is to be associated",
          "\u003ccode\u003evalue\u003c/code\u003e - the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key",
          "\u003ccode\u003eremappingFunction\u003c/code\u003e - the remapping function to recompute a value if present"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eput\u003c/code\u003e operation is not supported by this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified key or value prevents it from being stored in this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified key or value prevents it from being stored in this map (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not support null keys or the value or remappingFunction is null"
        ],
        "return": [
          "the new value associated with the specified key, or null if no value is associated with the key"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable map containing zero mappings. See Unmodifiable Maps for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "return": [
          "an empty \n\u003ccode\u003eMap\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v1",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable map containing a single mapping. See Unmodifiable Maps for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "param": [
          "\u003ccode\u003ek1\u003c/code\u003e - the mapping\u0027s key",
          "\u003ccode\u003ev1\u003c/code\u003e - the mapping\u0027s value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the key or the value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the specified mapping"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v2",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable map containing two mappings. See Unmodifiable Maps for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "param": [
          "\u003ccode\u003ek1\u003c/code\u003e - the first mapping\u0027s key",
          "\u003ccode\u003ev1\u003c/code\u003e - the first mapping\u0027s value",
          "\u003ccode\u003ek2\u003c/code\u003e - the second mapping\u0027s key",
          "\u003ccode\u003ev2\u003c/code\u003e - the second mapping\u0027s value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the keys are duplicates",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any key or value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the specified mappings"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v3",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable map containing three mappings. See Unmodifiable Maps for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "param": [
          "\u003ccode\u003ek1\u003c/code\u003e - the first mapping\u0027s key",
          "\u003ccode\u003ev1\u003c/code\u003e - the first mapping\u0027s value",
          "\u003ccode\u003ek2\u003c/code\u003e - the second mapping\u0027s key",
          "\u003ccode\u003ev2\u003c/code\u003e - the second mapping\u0027s value",
          "\u003ccode\u003ek3\u003c/code\u003e - the third mapping\u0027s key",
          "\u003ccode\u003ev3\u003c/code\u003e - the third mapping\u0027s value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if there are any duplicate keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any key or value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the specified mappings"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v4",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable map containing four mappings. See Unmodifiable Maps for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "param": [
          "\u003ccode\u003ek1\u003c/code\u003e - the first mapping\u0027s key",
          "\u003ccode\u003ev1\u003c/code\u003e - the first mapping\u0027s value",
          "\u003ccode\u003ek2\u003c/code\u003e - the second mapping\u0027s key",
          "\u003ccode\u003ev2\u003c/code\u003e - the second mapping\u0027s value",
          "\u003ccode\u003ek3\u003c/code\u003e - the third mapping\u0027s key",
          "\u003ccode\u003ev3\u003c/code\u003e - the third mapping\u0027s value",
          "\u003ccode\u003ek4\u003c/code\u003e - the fourth mapping\u0027s key",
          "\u003ccode\u003ev4\u003c/code\u003e - the fourth mapping\u0027s value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if there are any duplicate keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any key or value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the specified mappings"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v5",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable map containing five mappings. See Unmodifiable Maps for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "param": [
          "\u003ccode\u003ek1\u003c/code\u003e - the first mapping\u0027s key",
          "\u003ccode\u003ev1\u003c/code\u003e - the first mapping\u0027s value",
          "\u003ccode\u003ek2\u003c/code\u003e - the second mapping\u0027s key",
          "\u003ccode\u003ev2\u003c/code\u003e - the second mapping\u0027s value",
          "\u003ccode\u003ek3\u003c/code\u003e - the third mapping\u0027s key",
          "\u003ccode\u003ev3\u003c/code\u003e - the third mapping\u0027s value",
          "\u003ccode\u003ek4\u003c/code\u003e - the fourth mapping\u0027s key",
          "\u003ccode\u003ev4\u003c/code\u003e - the fourth mapping\u0027s value",
          "\u003ccode\u003ek5\u003c/code\u003e - the fifth mapping\u0027s key",
          "\u003ccode\u003ev5\u003c/code\u003e - the fifth mapping\u0027s value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if there are any duplicate keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any key or value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the specified mappings"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v6",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable map containing six mappings. See Unmodifiable Maps for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "param": [
          "\u003ccode\u003ek1\u003c/code\u003e - the first mapping\u0027s key",
          "\u003ccode\u003ev1\u003c/code\u003e - the first mapping\u0027s value",
          "\u003ccode\u003ek2\u003c/code\u003e - the second mapping\u0027s key",
          "\u003ccode\u003ev2\u003c/code\u003e - the second mapping\u0027s value",
          "\u003ccode\u003ek3\u003c/code\u003e - the third mapping\u0027s key",
          "\u003ccode\u003ev3\u003c/code\u003e - the third mapping\u0027s value",
          "\u003ccode\u003ek4\u003c/code\u003e - the fourth mapping\u0027s key",
          "\u003ccode\u003ev4\u003c/code\u003e - the fourth mapping\u0027s value",
          "\u003ccode\u003ek5\u003c/code\u003e - the fifth mapping\u0027s key",
          "\u003ccode\u003ev5\u003c/code\u003e - the fifth mapping\u0027s value",
          "\u003ccode\u003ek6\u003c/code\u003e - the sixth mapping\u0027s key",
          "\u003ccode\u003ev6\u003c/code\u003e - the sixth mapping\u0027s value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if there are any duplicate keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any key or value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the specified mappings"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k7",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v7",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable map containing seven mappings. See Unmodifiable Maps for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "param": [
          "\u003ccode\u003ek1\u003c/code\u003e - the first mapping\u0027s key",
          "\u003ccode\u003ev1\u003c/code\u003e - the first mapping\u0027s value",
          "\u003ccode\u003ek2\u003c/code\u003e - the second mapping\u0027s key",
          "\u003ccode\u003ev2\u003c/code\u003e - the second mapping\u0027s value",
          "\u003ccode\u003ek3\u003c/code\u003e - the third mapping\u0027s key",
          "\u003ccode\u003ev3\u003c/code\u003e - the third mapping\u0027s value",
          "\u003ccode\u003ek4\u003c/code\u003e - the fourth mapping\u0027s key",
          "\u003ccode\u003ev4\u003c/code\u003e - the fourth mapping\u0027s value",
          "\u003ccode\u003ek5\u003c/code\u003e - the fifth mapping\u0027s key",
          "\u003ccode\u003ev5\u003c/code\u003e - the fifth mapping\u0027s value",
          "\u003ccode\u003ek6\u003c/code\u003e - the sixth mapping\u0027s key",
          "\u003ccode\u003ev6\u003c/code\u003e - the sixth mapping\u0027s value",
          "\u003ccode\u003ek7\u003c/code\u003e - the seventh mapping\u0027s key",
          "\u003ccode\u003ev7\u003c/code\u003e - the seventh mapping\u0027s value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if there are any duplicate keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any key or value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the specified mappings"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k7",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v7",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k8",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v8",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable map containing eight mappings. See Unmodifiable Maps for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "param": [
          "\u003ccode\u003ek1\u003c/code\u003e - the first mapping\u0027s key",
          "\u003ccode\u003ev1\u003c/code\u003e - the first mapping\u0027s value",
          "\u003ccode\u003ek2\u003c/code\u003e - the second mapping\u0027s key",
          "\u003ccode\u003ev2\u003c/code\u003e - the second mapping\u0027s value",
          "\u003ccode\u003ek3\u003c/code\u003e - the third mapping\u0027s key",
          "\u003ccode\u003ev3\u003c/code\u003e - the third mapping\u0027s value",
          "\u003ccode\u003ek4\u003c/code\u003e - the fourth mapping\u0027s key",
          "\u003ccode\u003ev4\u003c/code\u003e - the fourth mapping\u0027s value",
          "\u003ccode\u003ek5\u003c/code\u003e - the fifth mapping\u0027s key",
          "\u003ccode\u003ev5\u003c/code\u003e - the fifth mapping\u0027s value",
          "\u003ccode\u003ek6\u003c/code\u003e - the sixth mapping\u0027s key",
          "\u003ccode\u003ev6\u003c/code\u003e - the sixth mapping\u0027s value",
          "\u003ccode\u003ek7\u003c/code\u003e - the seventh mapping\u0027s key",
          "\u003ccode\u003ev7\u003c/code\u003e - the seventh mapping\u0027s value",
          "\u003ccode\u003ek8\u003c/code\u003e - the eighth mapping\u0027s key",
          "\u003ccode\u003ev8\u003c/code\u003e - the eighth mapping\u0027s value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if there are any duplicate keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any key or value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the specified mappings"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k7",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v7",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k8",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v8",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k9",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v9",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable map containing nine mappings. See Unmodifiable Maps for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "param": [
          "\u003ccode\u003ek1\u003c/code\u003e - the first mapping\u0027s key",
          "\u003ccode\u003ev1\u003c/code\u003e - the first mapping\u0027s value",
          "\u003ccode\u003ek2\u003c/code\u003e - the second mapping\u0027s key",
          "\u003ccode\u003ev2\u003c/code\u003e - the second mapping\u0027s value",
          "\u003ccode\u003ek3\u003c/code\u003e - the third mapping\u0027s key",
          "\u003ccode\u003ev3\u003c/code\u003e - the third mapping\u0027s value",
          "\u003ccode\u003ek4\u003c/code\u003e - the fourth mapping\u0027s key",
          "\u003ccode\u003ev4\u003c/code\u003e - the fourth mapping\u0027s value",
          "\u003ccode\u003ek5\u003c/code\u003e - the fifth mapping\u0027s key",
          "\u003ccode\u003ev5\u003c/code\u003e - the fifth mapping\u0027s value",
          "\u003ccode\u003ek6\u003c/code\u003e - the sixth mapping\u0027s key",
          "\u003ccode\u003ev6\u003c/code\u003e - the sixth mapping\u0027s value",
          "\u003ccode\u003ek7\u003c/code\u003e - the seventh mapping\u0027s key",
          "\u003ccode\u003ev7\u003c/code\u003e - the seventh mapping\u0027s value",
          "\u003ccode\u003ek8\u003c/code\u003e - the eighth mapping\u0027s key",
          "\u003ccode\u003ev8\u003c/code\u003e - the eighth mapping\u0027s value",
          "\u003ccode\u003ek9\u003c/code\u003e - the ninth mapping\u0027s key",
          "\u003ccode\u003ev9\u003c/code\u003e - the ninth mapping\u0027s value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if there are any duplicate keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any key or value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the specified mappings"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k7",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v7",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k8",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v8",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k9",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v9",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k10",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v10",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable map containing ten mappings. See Unmodifiable Maps for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "param": [
          "\u003ccode\u003ek1\u003c/code\u003e - the first mapping\u0027s key",
          "\u003ccode\u003ev1\u003c/code\u003e - the first mapping\u0027s value",
          "\u003ccode\u003ek2\u003c/code\u003e - the second mapping\u0027s key",
          "\u003ccode\u003ev2\u003c/code\u003e - the second mapping\u0027s value",
          "\u003ccode\u003ek3\u003c/code\u003e - the third mapping\u0027s key",
          "\u003ccode\u003ev3\u003c/code\u003e - the third mapping\u0027s value",
          "\u003ccode\u003ek4\u003c/code\u003e - the fourth mapping\u0027s key",
          "\u003ccode\u003ev4\u003c/code\u003e - the fourth mapping\u0027s value",
          "\u003ccode\u003ek5\u003c/code\u003e - the fifth mapping\u0027s key",
          "\u003ccode\u003ev5\u003c/code\u003e - the fifth mapping\u0027s value",
          "\u003ccode\u003ek6\u003c/code\u003e - the sixth mapping\u0027s key",
          "\u003ccode\u003ev6\u003c/code\u003e - the sixth mapping\u0027s value",
          "\u003ccode\u003ek7\u003c/code\u003e - the seventh mapping\u0027s key",
          "\u003ccode\u003ev7\u003c/code\u003e - the seventh mapping\u0027s value",
          "\u003ccode\u003ek8\u003c/code\u003e - the eighth mapping\u0027s key",
          "\u003ccode\u003ev8\u003c/code\u003e - the eighth mapping\u0027s value",
          "\u003ccode\u003ek9\u003c/code\u003e - the ninth mapping\u0027s key",
          "\u003ccode\u003ev9\u003c/code\u003e - the ninth mapping\u0027s value",
          "\u003ccode\u003ek10\u003c/code\u003e - the tenth mapping\u0027s key",
          "\u003ccode\u003ev10\u003c/code\u003e - the tenth mapping\u0027s value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if there are any duplicate keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any key or value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the specified mappings"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map$Entry",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "K",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "V",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "entries",
          "varargs": true
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "ofEntries",
      "comment": "Returns an unmodifiable map containing keys and values extracted from the given entries. The entries themselves are not stored in the map. See Unmodifiable Maps for details.",
      "annotations": [
        {
          "type": {
            "name": "SafeVarargs",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#entry(K,V)\"\u003e\u003ccode\u003eMap.entry()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "It is convenient to create the map entries using the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#entry(K,V)\"\u003e\u003ccode\u003eMap.entry()\u003c/code\u003e\u003c/a\u003e method. For example, \n\u003cpre\u003e\u003ccode\u003e\n     import static java.util.Map.entry;\n\n     Map\u0026lt;Integer,String\u0026gt; map \u003d Map.ofEntries(\n         entry(1, \"a\"),\n         entry(2, \"b\"),\n         entry(3, \"c\"),\n         ...\n         entry(26, \"z\"));\n \u003c/code\u003e\u003c/pre\u003e"
        ],
        "param": [
          "\u003ccode\u003eentries\u003c/code\u003e - \n\u003ccode\u003eMap.Entry\u003c/code\u003es containing the keys and values from which the map is populated"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if there are any duplicate keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any entry, key, or value is \n\u003ccode\u003enull\u003c/code\u003e, or if the \n\u003ccode\u003eentries\u003c/code\u003e array is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the specified mappings"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map$Entry",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "K",
            "type": "Class"
          },
          "name": "k",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "V",
            "type": "Class"
          },
          "name": "v",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "entry",
      "comment": "Returns an unmodifiable Map.Entry containing the given key and value. These entries are suitable for populating Map instances using the Map.ofEntries() method. The Entry instances created by this method have the following characteristics: They disallow null keys and values. Attempts to create them using a null key or value result in NullPointerException. They are unmodifiable. Calls to Entry.setValue() on a returned Entry result in UnsupportedOperationException. They are not serializable. They are value-based. Programmers should treat instances that are equal as interchangeable and should not use them for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail. Callers should make no assumptions about the identity of the returned instances. This method is free to create new instances or reuse existing ones.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the key\u0027s type",
          "\u003ccode\u003eV\u003c/code\u003e - the value\u0027s type"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#ofEntries(java.util.Map.Entry...)\"\u003e\u003ccode\u003eMap.ofEntries()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "For a serializable \n\u003ccode\u003eEntry\u003c/code\u003e, see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.SimpleEntry.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eAbstractMap.SimpleEntry\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractMap.SimpleImmutableEntry.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eAbstractMap.SimpleImmutableEntry\u003c/code\u003e\u003c/a\u003e."
        ],
        "param": [
          "\u003ccode\u003ek\u003c/code\u003e - the key",
          "\u003ccode\u003ev\u003c/code\u003e - the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the key or value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eEntry\u003c/code\u003e containing the specified key and value"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "K",
            "type": "Class"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "K",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "V",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "map",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "K",
          "type": "Variable"
        },
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "copyOf",
      "comment": "Returns an unmodifiable Map containing the entries of the given Map. The given Map must not be null, and it must not contain any null keys or values. If the given Map is subsequently modified, the returned Map will not reflect such modifications.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eK\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s key type",
          "\u003ccode\u003eV\u003c/code\u003e - the \n\u003ccode\u003eMap\u003c/code\u003e\u0027s value type"
        ],
        "param": [
          "\u003ccode\u003emap\u003c/code\u003e - a \n\u003ccode\u003eMap\u003c/code\u003e from which entries are drawn, must be non-null"
        ],
        "implNote": [
          "If the given Map is an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#unmodifiable\"\u003eunmodifiable Map\u003c/a\u003e, calling copyOf will generally not create a copy."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if map is null, or if it contains any null keys or values"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing the entries of the given \n\u003ccode\u003eMap\u003c/code\u003e"
        ],
        "since": [
          "10"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.Map$Entry"
  ],
  "genericParameters": [
    {
      "name": "K",
      "type": "Variable"
    },
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.Map",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TreeMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTreeMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashtable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSet\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}