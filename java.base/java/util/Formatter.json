{
  "packageName": "java.util",
  "simpleName": "Formatter",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "locale",
      "comment": "Returns the locale set by the construction of this formatter. The format method for this object which has a locale argument does not change this value.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormatterClosedException.html\" title\u003d\"class in java.util\"\u003eFormatterClosedException\u003c/a\u003e\u003c/code\u003e - If this formatter has been closed by invoking its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e method"
        ],
        "return": [
          "\u003ccode\u003enull\u003c/code\u003e if no localization is applied, otherwise a locale"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Appendable",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "out",
      "comment": "Returns the destination for the output.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormatterClosedException.html\" title\u003d\"class in java.util\"\u003eFormatterClosedException\u003c/a\u003e\u003c/code\u003e - If this formatter has been closed by invoking its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e method"
        ],
        "return": [
          "The destination for the output"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the result of invoking toString() on the destination for the output. For example, the following code formats text into a StringBuilder then retrieves the resultant string:    Formatter f \u003d new Formatter();\n   f.format(\"Last reboot at %tc\", lastRebootDate);\n   String s \u003d f.toString();\n   // -\u003e s \u003d\u003d \"Last reboot at Sat Jan 01 00:00:00 PST 2000\"\n An invocation of this method behaves in exactly the same way as the invocation      out().toString() Depending on the specification of toString for the Appendable, the returned string may or may not contain the characters written to the destination. For instance, buffers typically return their contents in toString(), but streams cannot since the data is discarded.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormatterClosedException.html\" title\u003d\"class in java.util\"\u003eFormatterClosedException\u003c/a\u003e\u003c/code\u003e - If this formatter has been closed by invoking its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e method"
        ],
        "return": [
          "The result of invoking \n\u003ccode\u003etoString()\u003c/code\u003e on the destination for the output"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "flush",
      "comment": "Flushes this formatter. If the destination implements the Flushable interface, its flush method will be invoked. Flushing a formatter writes any buffered output in the destination to the underlying stream.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Flushable.html#flush()\"\u003eflush\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Flushable.html\" title\u003d\"interface in java.io\"\u003eFlushable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormatterClosedException.html\" title\u003d\"class in java.util\"\u003eFormatterClosedException\u003c/a\u003e\u003c/code\u003e - If this formatter has been closed by invoking its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e method"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "close",
      "comment": "Closes this formatter. If the destination implements the Closeable interface, its close method will be invoked. Closing a formatter allows it to release resources it may be holding (such as open files). If the formatter is already closed, then invoking this method has no effect. Attempting to invoke any methods except ioException() in this formatter after it has been closed will result in a FormatterClosedException.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html\" title\u003d\"interface in java.io\"\u003eCloseable\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.IOException",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ioException",
      "comment": "Returns the IOException last thrown by this formatter\u0027s Appendable. If the destination\u0027s append() method never throws IOException, then this method will always return null.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The last exception thrown by the Appendable or \n\u003ccode\u003enull\u003c/code\u003e if no such exception exists."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Formatter",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "format",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "args",
          "varargs": true
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Writes a formatted string to this object\u0027s destination using the specified format string and arguments. The locale used is the one defined during the construction of this formatter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eformat\u003c/code\u003e - A format string as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eFormat string syntax\u003c/a\u003e.",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormatterClosedException.html\" title\u003d\"class in java.util\"\u003eFormatterClosedException\u003c/a\u003e\u003c/code\u003e - If this formatter has been closed by invoking its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e method"
        ],
        "return": [
          "This formatter"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Formatter",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "format",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "args",
          "varargs": true
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Writes a formatted string to this object\u0027s destination using the specified locale, format string, and arguments.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied. This does not change this object\u0027s locale that was set during construction.",
          "\u003ccode\u003eformat\u003c/code\u003e - A format string as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eFormat string syntax\u003c/a\u003e",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormatterClosedException.html\" title\u003d\"class in java.util\"\u003eFormatterClosedException\u003c/a\u003e\u003c/code\u003e - If this formatter has been closed by invoking its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e method"
        ],
        "return": [
          "This formatter"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter. The destination of the formatted output is a StringBuilder which may be retrieved by invoking out() and whose current content may be converted into a string by invoking toString(). The locale used is the default locale for formatting for this instance of the Java virtual machine.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Appendable",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified destination. The locale used is the default locale for formatting for this instance of the Java virtual machine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - Destination for the formatted output. If \n\u003ccode\u003ea\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringBuilder.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e\u003c/a\u003e will be created."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified locale. The destination of the formatted output is a StringBuilder which may be retrieved by invoking out() and whose current content may be converted into a string by invoking toString().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Appendable",
            "type": "Class"
          },
          "name": "a",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified destination and locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - Destination for the formatted output. If \n\u003ccode\u003ea\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/StringBuilder.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eStringBuilder\u003c/code\u003e\u003c/a\u003e will be created.",
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "fileName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified file name. The charset used is the default charset for this instance of the Java virtual machine. The locale used is the default locale for formatting for this instance of the Java virtual machine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efileName\u003c/code\u003e - The name of the file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(fileName)\u003c/code\u003e\u003c/a\u003e denies write access to the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - If the given file name does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        },
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "fileName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "csn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified file name and charset. The locale used is the default locale for formatting for this instance of the Java virtual machine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efileName\u003c/code\u003e - The name of the file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.",
          "\u003ccode\u003ecsn\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - If the given file name does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(fileName)\u003c/code\u003e\u003c/a\u003e denies write access to the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named charset is not supported"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        },
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "fileName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "csn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified file name, charset, and locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efileName\u003c/code\u003e - The name of the file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.",
          "\u003ccode\u003ecsn\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e",
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - If the given file name does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(fileName)\u003c/code\u003e\u003c/a\u003e denies write access to the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named charset is not supported"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "fileName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "charset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified file name, charset, and locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efileName\u003c/code\u003e - The name of the file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.",
          "\u003ccode\u003echarset\u003c/code\u003e - A \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e",
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(fileName)\u003c/code\u003e\u003c/a\u003e denies write access to the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efileName\u003c/code\u003e or \n\u003ccode\u003echarset\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "file",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified file. The charset used is the default charset for this instance of the Java virtual machine. The locale used is the default locale for formatting for this instance of the Java virtual machine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(file.getPath())\u003c/code\u003e\u003c/a\u003e denies write access to the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        },
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "file",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "csn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified file and charset. The locale used is the default locale for formatting for this instance of the Java virtual machine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.",
          "\u003ccode\u003ecsn\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(file.getPath())\u003c/code\u003e\u003c/a\u003e denies write access to the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named charset is not supported"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        },
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "file",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "csn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified file, charset, and locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.",
          "\u003ccode\u003ecsn\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e",
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(file.getPath())\u003c/code\u003e\u003c/a\u003e denies write access to the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named charset is not supported"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "file",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "charset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified file, charset, and locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The file to use as the destination of this formatter. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.",
          "\u003ccode\u003echarset\u003c/code\u003e - A \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e",
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(file.getPath())\u003c/code\u003e\u003c/a\u003e denies write access to the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efile\u003c/code\u003e or \n\u003ccode\u003echarset\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.PrintStream",
            "type": "Class"
          },
          "name": "ps",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified print stream. The locale used is the default locale for formatting for this instance of the Java virtual machine. Characters are written to the given PrintStream object and are therefore encoded using that object\u0027s charset.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eps\u003c/code\u003e - The stream to use as the destination of this formatter."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "name": "os",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified output stream. The charset used is the default charset for this instance of the Java virtual machine. The locale used is the default locale for formatting for this instance of the Java virtual machine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eos\u003c/code\u003e - The output stream to use as the destination of this formatter. The output will be buffered."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "name": "os",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "csn",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified output stream and charset. The locale used is the default locale for formatting for this instance of the Java virtual machine.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eos\u003c/code\u003e - The output stream to use as the destination of this formatter. The output will be buffered.",
          "\u003ccode\u003ecsn\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named charset is not supported"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "name": "os",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "csn",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified output stream, charset, and locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eos\u003c/code\u003e - The output stream to use as the destination of this formatter. The output will be buffered.",
          "\u003ccode\u003ecsn\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e",
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named charset is not supported"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "name": "os",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "charset",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "l",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new formatter with the specified output stream, charset, and locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eos\u003c/code\u003e - The output stream to use as the destination of this formatter. The output will be buffered.",
          "\u003ccode\u003echarset\u003c/code\u003e - A \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e",
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eos\u003c/code\u003e or \n\u003ccode\u003echarset\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.Formatter$BigDecimalLayoutForm"
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.util.Formatter",
  "comment": "An interpreter for printf-style format strings. This class provides support for layout justification and alignment, common formats for numeric, string, and date/time data, and locale-specific output. Common Java types such as \n\u003ccode\u003ebyte\u003c/code\u003e, \n\u003ca href\u003d\"../math/BigDecimal.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eBigDecimal\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"Calendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eCalendar\u003c/code\u003e\u003c/a\u003e are supported. Limited formatting customization for arbitrary user types is provided through the \n\u003ca href\u003d\"Formattable.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eFormattable\u003c/code\u003e\u003c/a\u003e interface. \n\u003cp\u003e Formatters are not necessarily safe for multithreaded access. Thread safety is optional and is the responsibility of users of methods in this class. \u003c/p\u003e\n\u003cp\u003e Formatted printing for the Java language is heavily inspired by C\u0027s \u003ccode\u003eprintf\u003c/code\u003e. Although the format strings are similar to C, some customizations have been made to accommodate the Java language and exploit some of its features. Also, Java formatting is more strict than C\u0027s; for example, if a conversion is incompatible with a flag, an exception will be thrown. In C inapplicable flags are silently ignored. The format strings are thus intended to be recognizable to C programmers but not necessarily completely compatible with those in C. \u003c/p\u003e\n\u003cp\u003e Examples of expected usage: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e   StringBuilder sb \u003d new StringBuilder();\n   // Send all output to the Appendable object sb\n   Formatter formatter \u003d new Formatter(sb, Locale.US);\n\n   // Explicit argument indices may be used to re-order output.\n   formatter.format(\"%4$2s %3$2s %2$2s %1$2s\", \"a\", \"b\", \"c\", \"d\")\n   // -\u0026gt; \" d  c  b  a\"\n\n   // Optional locale as the first argument can be used to get\n   // locale-specific formatting of numbers.  The precision and width can be\n   // given to round and align the value.\n   formatter.format(Locale.FRANCE, \"e \u003d %+10.4f\", Math.E);\n   // -\u0026gt; \"e \u003d    +2,7183\"\n\n   // The \u0027(\u0027 numeric flag may be used to format negative numbers with\n   // parentheses rather than a minus sign.  Group separators are\n   // automatically inserted.\n   formatter.format(\"Amount gained or lost since last statement: $ %(,.2f\",\n                    balanceDelta);\n   // -\u0026gt; \"Amount gained or lost since last statement: $ (6,217.58)\"\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Convenience methods for common formatting requests exist as illustrated by the following invocations: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e   // Writes a formatted string to System.out.\n   System.out.format(\"Local time: %tT\", Calendar.getInstance());\n   // -\u0026gt; \"Local time: 13:34:18\"\n\n   // Writes formatted output to System.err.\n   System.err.printf(\"Unable to open file \u0027%1$s\u0027: %2$s\",\n                     fileName, exception.getMessage());\n   // -\u0026gt; \"Unable to open file \u0027food\u0027: No such file or directory\"\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Like C\u0027s \u003ccode\u003esprintf(3)\u003c/code\u003e, Strings may be formatted using the static method \u003ca href\u003d\"../lang/String.html#format(java.lang.String,java.lang.Object...)\"\u003e\u003ccode\u003eString.format\u003c/code\u003e\u003c/a\u003e: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e   // Format a string containing a date.\n   import java.util.Calendar;\n   import java.util.GregorianCalendar;\n   import static java.util.Calendar.*;\n\n   Calendar c \u003d new GregorianCalendar(1995, MAY, 23);\n   String s \u003d String.format(\"Duke\u0027s Birthday: %1$tb %1$te, %1$tY\", c);\n   // -\u0026gt; s \u003d\u003d \"Duke\u0027s Birthday: May 23, 1995\"\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"org\"\u003eOrganization\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e This specification is divided into two sections. The first section, \u003ca href\u003d\"#summary\"\u003eSummary\u003c/a\u003e, covers the basic formatting concepts. This section is intended for users who want to get started quickly and are familiar with formatted printing in other programming languages. The second section, \u003ca href\u003d\"#detail\"\u003eDetails\u003c/a\u003e, covers the specific implementation details. It is intended for users who want more precise specification of formatting behavior. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"summary\"\u003eSummary\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e This section is intended to provide a brief overview of formatting concepts. For precise behavioral details, refer to the \u003ca href\u003d\"#detail\"\u003eDetails\u003c/a\u003e section. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"syntax\"\u003eFormat String Syntax\u003c/a\u003e\u003c/h3\u003e \n\u003cp\u003e Every method which produces formatted output requires a \u003ci\u003eformat string\u003c/i\u003e and an \u003ci\u003eargument list\u003c/i\u003e. The format string is a \u003ca href\u003d\"../lang/String.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eString\u003c/code\u003e\u003c/a\u003e which may contain fixed text and one or more embedded \u003ci\u003eformat specifiers\u003c/i\u003e. Consider the following example: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e   Calendar c \u003d ...;\n   String s \u003d String.format(\"Duke\u0027s Birthday: %1$tm %1$te,%1$tY\", c);\n \u003c/pre\u003e\n\u003c/blockquote\u003e This format string is the first argument to the \n\u003ccode\u003eformat\u003c/code\u003e method. It contains three format specifiers \"\n\u003ccode\u003e%1$tm\u003c/code\u003e\", \"\n\u003ccode\u003e%1$te\u003c/code\u003e\", and \"\n\u003ccode\u003e%1$tY\u003c/code\u003e\" which indicate how the arguments should be processed and where they should be inserted in the text. The remaining portions of the format string are fixed text including \n\u003ccode\u003e\"Dukes Birthday: \"\u003c/code\u003e and any other spaces or punctuation. The argument list consists of all arguments passed to the method after the format string. In the above example, the argument list is of size one and consists of the \n\u003ca href\u003d\"Calendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eCalendar\u003c/code\u003e\u003c/a\u003e object \n\u003ccode\u003ec\u003c/code\u003e. \n\u003cul\u003e \n \u003cli\u003e The format specifiers for general, character, and numeric types have the following syntax: \n  \u003cblockquote\u003e\n   \u003cpre\u003e   %[argument_index$][flags][width][.precision]conversion\n \u003c/pre\u003e\n  \u003c/blockquote\u003e \u003cp\u003e The optional \u003ci\u003eargument_index\u003c/i\u003e is a decimal integer indicating the position of the argument in the argument list. The first argument is referenced by \"\u003ccode\u003e1$\u003c/code\u003e\", the second by \"\u003ccode\u003e2$\u003c/code\u003e\", etc. \u003c/p\u003e\u003cp\u003e The optional \u003ci\u003eflags\u003c/i\u003e is a set of characters that modify the output format. The set of valid flags depends on the conversion. \u003c/p\u003e\u003cp\u003e The optional \u003ci\u003ewidth\u003c/i\u003e is a positive decimal integer indicating the minimum number of characters to be written to the output. \u003c/p\u003e\u003cp\u003e The optional \u003ci\u003eprecision\u003c/i\u003e is a non-negative decimal integer usually used to restrict the number of characters. The specific behavior depends on the conversion. \u003c/p\u003e\u003cp\u003e The required \u003ci\u003econversion\u003c/i\u003e is a character indicating how the argument should be formatted. The set of valid conversions for a given argument depends on the argument\u0027s data type. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e The format specifiers for types which are used to represents dates and times have the following syntax: \n  \u003cblockquote\u003e\n   \u003cpre\u003e   %[argument_index$][flags][width]conversion\n \u003c/pre\u003e\n  \u003c/blockquote\u003e \u003cp\u003e The optional \u003ci\u003eargument_index\u003c/i\u003e, \u003ci\u003eflags\u003c/i\u003e and \u003ci\u003ewidth\u003c/i\u003e are defined as above. \u003c/p\u003e\u003cp\u003e The required \u003ci\u003econversion\u003c/i\u003e is a two character sequence. The first character is \u003ccode\u003e\u0027t\u0027\u003c/code\u003e or \u003ccode\u003e\u0027T\u0027\u003c/code\u003e. The second character indicates the format to be used. These characters are similar to but not completely identical to those defined by GNU \u003ccode\u003edate\u003c/code\u003e and POSIX \u003ccode\u003estrftime(3c)\u003c/code\u003e. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e The format specifiers which do not correspond to arguments have the following syntax: \n  \u003cblockquote\u003e\n   \u003cpre\u003e   %[flags][width]conversion\n \u003c/pre\u003e\n  \u003c/blockquote\u003e \u003cp\u003e The optional \u003ci\u003eflags\u003c/i\u003e and \u003ci\u003ewidth\u003c/i\u003e is defined as above. \u003c/p\u003e\u003cp\u003e The required \u003ci\u003econversion\u003c/i\u003e is a character indicating content to be inserted in the output. \u003c/p\u003e\u003c/li\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch3\u003e Conversions \u003c/h3\u003e \n\u003cp\u003e Conversions are divided into the following categories: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e \u003cb\u003eGeneral\u003c/b\u003e - may be applied to any argument type \u003c/li\u003e\n \u003cli\u003e \u003cb\u003eCharacter\u003c/b\u003e - may be applied to basic types which represent Unicode characters: \u003ccode\u003echar\u003c/code\u003e, \u003ca href\u003d\"../lang/Character.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eCharacter\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003ebyte\u003c/code\u003e, \u003ca href\u003d\"../lang/Byte.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eByte\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003eshort\u003c/code\u003e, and \u003ca href\u003d\"../lang/Short.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eShort\u003c/code\u003e\u003c/a\u003e. This conversion may also be applied to the types \u003ccode\u003eint\u003c/code\u003e and \u003ca href\u003d\"../lang/Integer.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eInteger\u003c/code\u003e\u003c/a\u003e when \u003ca href\u003d\"../lang/Character.html#isValidCodePoint(int)\"\u003e\u003ccode\u003eCharacter.isValidCodePoint(int)\u003c/code\u003e\u003c/a\u003e returns \u003ccode\u003etrue\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e \u003cb\u003eNumeric\u003c/b\u003e \n  \u003col\u003e \n   \u003cli\u003e \u003cb\u003eIntegral\u003c/b\u003e - may be applied to Java integral types: \u003ccode\u003ebyte\u003c/code\u003e, \u003ca href\u003d\"../lang/Byte.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eByte\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003eshort\u003c/code\u003e, \u003ca href\u003d\"../lang/Short.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eShort\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003eint\u003c/code\u003e and \u003ca href\u003d\"../lang/Integer.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eInteger\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003elong\u003c/code\u003e, \u003ca href\u003d\"../lang/Long.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eLong\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"../math/BigInteger.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eBigInteger\u003c/code\u003e\u003c/a\u003e (but not \u003ccode\u003echar\u003c/code\u003e or \u003ca href\u003d\"../lang/Character.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eCharacter\u003c/code\u003e\u003c/a\u003e) \u003c/li\u003e\n   \u003cli\u003e\u003cb\u003eFloating Point\u003c/b\u003e - may be applied to Java floating-point types: \u003ccode\u003efloat\u003c/code\u003e, \u003ca href\u003d\"../lang/Float.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eFloat\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003edouble\u003c/code\u003e, \u003ca href\u003d\"../lang/Double.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eDouble\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"../math/BigDecimal.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eBigDecimal\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n  \u003c/ol\u003e \u003c/li\u003e\n \u003cli\u003e \u003cb\u003eDate/Time\u003c/b\u003e - may be applied to Java types which are capable of encoding a date or time: \u003ccode\u003elong\u003c/code\u003e, \u003ca href\u003d\"../lang/Long.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eLong\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"Calendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eCalendar\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"Date.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"../time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003e\u003ccode\u003eTemporalAccessor\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003cb\u003ePercent\u003c/b\u003e - produces a literal \u003ccode\u003e\u0027%\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0025\u0027\u003c/code\u003e) \u003c/li\u003e\n \u003cli\u003e \u003cb\u003eLine Separator\u003c/b\u003e - produces the platform-specific line separator \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e For category \u003ci\u003eGeneral\u003c/i\u003e, \u003ci\u003eCharacter\u003c/i\u003e, \u003ci\u003eNumeric\u003c/i\u003e, \u003ci\u003eIntegral\u003c/i\u003e and \u003ci\u003eDate/Time\u003c/i\u003e conversion, unless otherwise specified, if the argument \u003ci\u003earg\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e, then the result is \"\u003ccode\u003enull\u003c/code\u003e\". \u003c/p\u003e\n\u003cp\u003e The following table summarizes the supported conversions. Conversions denoted by an upper-case character (i.e. \u003ccode\u003e\u0027B\u0027\u003c/code\u003e, \u003ccode\u003e\u0027H\u0027\u003c/code\u003e, \u003ccode\u003e\u0027S\u0027\u003c/code\u003e, \u003ccode\u003e\u0027C\u0027\u003c/code\u003e, \u003ccode\u003e\u0027X\u0027\u003c/code\u003e, \u003ccode\u003e\u0027E\u0027\u003c/code\u003e, \u003ccode\u003e\u0027G\u0027\u003c/code\u003e, \u003ccode\u003e\u0027A\u0027\u003c/code\u003e, and \u003ccode\u003e\u0027T\u0027\u003c/code\u003e) are the same as those for the corresponding lower-case conversion characters except that the result is converted to upper case according to the rules of the prevailing \u003ca href\u003d\"Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e. If there is no explicit locale specified, either at the construction of the instance or as a parameter to its method invocation, then the \u003ca href\u003d\"Locale.Category.html#FORMAT\"\u003e\u003ccode\u003edefault locale\u003c/code\u003e\u003c/a\u003e is used. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  genConv\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"col\" style\u003d\"vertical-align:bottom\"\u003e Conversion \u003c/th\u003e\n   \u003cth scope\u003d\"col\" style\u003d\"vertical-align:bottom\"\u003e Argument Category \u003c/th\u003e\n   \u003cth scope\u003d\"col\" style\u003d\"vertical-align:bottom\"\u003e Description \u003c/th\u003e\n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027b\u0027\u003c/code\u003e, \u003ccode\u003e\u0027B\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e general \u003c/td\u003e\n   \u003ctd\u003e If the argument \u003ci\u003earg\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e, then the result is \"\u003ccode\u003efalse\u003c/code\u003e\". If \u003ci\u003earg\u003c/i\u003e is a \u003ccode\u003eboolean\u003c/code\u003e or \u003ca href\u003d\"../lang/Boolean.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eBoolean\u003c/code\u003e\u003c/a\u003e, then the result is the string returned by \u003ca href\u003d\"../lang/String.html#valueOf(boolean)\"\u003e\u003ccode\u003eString.valueOf(arg)\u003c/code\u003e\u003c/a\u003e. Otherwise, the result is \"true\". \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027h\u0027\u003c/code\u003e, \u003ccode\u003e\u0027H\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e general \u003c/td\u003e\n   \u003ctd\u003e The result is obtained by invoking \u003ccode\u003eInteger.toHexString(arg.hashCode())\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027s\u0027\u003c/code\u003e, \u003ccode\u003e\u0027S\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e general \u003c/td\u003e\n   \u003ctd\u003e If \u003ci\u003earg\u003c/i\u003e implements \u003ca href\u003d\"Formattable.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eFormattable\u003c/code\u003e\u003c/a\u003e, then \u003ca href\u003d\"Formattable.html#formatTo(java.util.Formatter,int,int,int)\"\u003e\u003ccode\u003earg.formatTo\u003c/code\u003e\u003c/a\u003e is invoked. Otherwise, the result is obtained by invoking \u003ccode\u003earg.toString()\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027c\u0027\u003c/code\u003e, \u003ccode\u003e\u0027C\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e character \u003c/td\u003e\n   \u003ctd\u003e The result is a Unicode character \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027d\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e integral \u003c/td\u003e\n   \u003ctd\u003e The result is formatted as a decimal integer \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027o\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e integral \u003c/td\u003e\n   \u003ctd\u003e The result is formatted as an octal integer \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027x\u0027\u003c/code\u003e, \u003ccode\u003e\u0027X\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e integral \u003c/td\u003e\n   \u003ctd\u003e The result is formatted as a hexadecimal integer \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027e\u0027\u003c/code\u003e, \u003ccode\u003e\u0027E\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e floating point \u003c/td\u003e\n   \u003ctd\u003e The result is formatted as a decimal number in computerized scientific notation \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027f\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e floating point \u003c/td\u003e\n   \u003ctd\u003e The result is formatted as a decimal number \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027g\u0027\u003c/code\u003e, \u003ccode\u003e\u0027G\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e floating point \u003c/td\u003e\n   \u003ctd\u003e The result is formatted using computerized scientific notation or decimal format, depending on the precision and the value after rounding. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027a\u0027\u003c/code\u003e, \u003ccode\u003e\u0027A\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e floating point \u003c/td\u003e\n   \u003ctd\u003e The result is formatted as a hexadecimal floating-point number with a significand and an exponent. This conversion is \u003cb\u003enot\u003c/b\u003e supported for the \u003ccode\u003eBigDecimal\u003c/code\u003e type despite the latter\u0027s being in the \u003ci\u003efloating point\u003c/i\u003e argument category. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027t\u0027\u003c/code\u003e, \u003ccode\u003e\u0027T\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e date/time \u003c/td\u003e\n   \u003ctd\u003e Prefix for date and time conversion characters. See \u003ca href\u003d\"#dt\"\u003eDate/Time Conversions\u003c/a\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027%\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e percent \u003c/td\u003e\n   \u003ctd\u003e The result is a literal \u003ccode\u003e\u0027%\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0025\u0027\u003c/code\u003e) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027n\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e line separator \u003c/td\u003e\n   \u003ctd\u003e The result is the platform-specific line separator \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Any characters not explicitly defined as conversions are illegal and are reserved for future extensions. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"dt\"\u003eDate/Time Conversions\u003c/a\u003e\u003c/h3\u003e \n\u003cp\u003e The following date and time conversion suffix characters are defined for the \u003ccode\u003e\u0027t\u0027\u003c/code\u003e and \u003ccode\u003e\u0027T\u0027\u003c/code\u003e conversions. The types are similar to but not completely identical to those defined by GNU \u003ccode\u003edate\u003c/code\u003e and POSIX \u003ccode\u003estrftime(3c)\u003c/code\u003e. Additional conversion types are provided to access Java-specific functionality (e.g. \u003ccode\u003e\u0027L\u0027\u003c/code\u003e for milliseconds within the second). \u003c/p\u003e\n\u003cp\u003e The following conversion characters are used for formatting times: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  time\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027H\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Hour of the day for the 24-hour clock, formatted as two digits with a leading zero as necessary i.e. \u003ccode\u003e00 - 23\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027I\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Hour for the 12-hour clock, formatted as two digits with a leading zero as necessary, i.e. \u003ccode\u003e01 - 12\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027k\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Hour of the day for the 24-hour clock, i.e. \u003ccode\u003e0 - 23\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027l\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Hour for the 12-hour clock, i.e. \u003ccode\u003e1 - 12\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027M\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Minute within the hour formatted as two digits with a leading zero as necessary, i.e. \u003ccode\u003e00 - 59\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027S\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Seconds within the minute, formatted as two digits with a leading zero as necessary, i.e. \u003ccode\u003e00 - 60\u003c/code\u003e (\"\u003ccode\u003e60\u003c/code\u003e\" is a special value required to support leap seconds). \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027L\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Millisecond within the second formatted as three digits with leading zeros as necessary, i.e. \u003ccode\u003e000 - 999\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027N\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Nanosecond within the second, formatted as nine digits with leading zeros as necessary, i.e. \u003ccode\u003e000000000 - 999999999\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027p\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Locale-specific \u003ca href\u003d\"../text/DateFormatSymbols.html#getAmPmStrings()\"\u003emorning or afternoon\u003c/a\u003e marker in lower case, e.g.\"\u003ccode\u003eam\u003c/code\u003e\" or \"\u003ccode\u003epm\u003c/code\u003e\". Use of the conversion prefix \u003ccode\u003e\u0027T\u0027\u003c/code\u003e forces this output to upper case. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027z\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e \u003ca href\u003d\"http://www.ietf.org/rfc/rfc0822.txt\"\u003eRFC\u0026nbsp;822\u003c/a\u003e style numeric time zone offset from GMT, e.g. \u003ccode\u003e-0800\u003c/code\u003e. This value will be adjusted as necessary for Daylight Saving Time. For \u003ccode\u003elong\u003c/code\u003e, \u003ca href\u003d\"../lang/Long.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eLong\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"Date.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e the time zone used is the \u003ca href\u003d\"TimeZone.html#getDefault()\"\u003edefault time zone\u003c/a\u003e for this instance of the Java virtual machine. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027Z\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e A string representing the abbreviation for the time zone. This value will be adjusted as necessary for Daylight Saving Time. For \u003ccode\u003elong\u003c/code\u003e, \u003ca href\u003d\"../lang/Long.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eLong\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"Date.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e the time zone used is the \u003ca href\u003d\"TimeZone.html#getDefault()\"\u003edefault time zone\u003c/a\u003e for this instance of the Java virtual machine. The Formatter\u0027s locale will supersede the locale of the argument (if any). \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027s\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Seconds since the beginning of the epoch starting at 1 January 1970 \u003ccode\u003e00:00:00\u003c/code\u003e UTC, i.e. \u003ccode\u003eLong.MIN_VALUE/1000\u003c/code\u003e to \u003ccode\u003eLong.MAX_VALUE/1000\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027Q\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Milliseconds since the beginning of the epoch starting at 1 January 1970 \u003ccode\u003e00:00:00\u003c/code\u003e UTC, i.e. \u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e to \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following conversion characters are used for formatting dates: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  date\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027B\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Locale-specific \u003ca href\u003d\"../text/DateFormatSymbols.html#getMonths()\"\u003efull month name\u003c/a\u003e, e.g. \u003ccode\u003e\"January\"\u003c/code\u003e, \u003ccode\u003e\"February\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027b\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Locale-specific \u003ca href\u003d\"../text/DateFormatSymbols.html#getShortMonths()\"\u003eabbreviated month name\u003c/a\u003e, e.g. \u003ccode\u003e\"Jan\"\u003c/code\u003e, \u003ccode\u003e\"Feb\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027h\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Same as \u003ccode\u003e\u0027b\u0027\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027A\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Locale-specific full name of the \u003ca href\u003d\"../text/DateFormatSymbols.html#getWeekdays()\"\u003eday of the week\u003c/a\u003e, e.g. \u003ccode\u003e\"Sunday\"\u003c/code\u003e, \u003ccode\u003e\"Monday\"\u003c/code\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027a\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Locale-specific short name of the \u003ca href\u003d\"../text/DateFormatSymbols.html#getShortWeekdays()\"\u003eday of the week\u003c/a\u003e, e.g. \u003ccode\u003e\"Sun\"\u003c/code\u003e, \u003ccode\u003e\"Mon\"\u003c/code\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027C\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Four-digit year divided by \u003ccode\u003e100\u003c/code\u003e, formatted as two digits with leading zero as necessary, i.e. \u003ccode\u003e00 - 99\u003c/code\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027Y\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Year, formatted as at least four digits with leading zeros as necessary, e.g. \u003ccode\u003e0092\u003c/code\u003e equals \u003ccode\u003e92\u003c/code\u003e CE for the Gregorian calendar. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027y\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Last two digits of the year, formatted with leading zeros as necessary, i.e. \u003ccode\u003e00 - 99\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027j\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Day of year, formatted as three digits with leading zeros as necessary, e.g. \u003ccode\u003e001 - 366\u003c/code\u003e for the Gregorian calendar. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027m\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Month, formatted as two digits with leading zeros as necessary, i.e. \u003ccode\u003e01 - 13\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027d\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Day of month, formatted as two digits with leading zeros as necessary, i.e. \u003ccode\u003e01 - 31\u003c/code\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027e\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Day of month, formatted as two digits, i.e. \u003ccode\u003e1 - 31\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following conversion characters are used for formatting common date/time compositions. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  composites\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027R\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Time formatted for the 24-hour clock as \u003ccode\u003e\"%tH:%tM\"\u003c/code\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027T\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Time formatted for the 24-hour clock as \u003ccode\u003e\"%tH:%tM:%tS\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027r\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Time formatted for the 12-hour clock as \u003ccode\u003e\"%tI:%tM:%tS %Tp\"\u003c/code\u003e. The location of the morning or afternoon marker (\u003ccode\u003e\u0027%Tp\u0027\u003c/code\u003e) may be locale-dependent. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027D\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Date formatted as \u003ccode\u003e\"%tm/%td/%ty\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027F\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e \u003ca href\u003d\"http://www.w3.org/TR/NOTE-datetime\"\u003eISO\u0026nbsp;8601\u003c/a\u003e complete date formatted as \u003ccode\u003e\"%tY-%tm-%td\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027c\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e Date and time formatted as \u003ccode\u003e\"%ta %tb %td %tT %tZ %tY\"\u003c/code\u003e, e.g. \u003ccode\u003e\"Sun Jul 20 16:17:00 EDT 1969\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Any characters not explicitly defined as date/time conversion suffixes are illegal and are reserved for future extensions. \u003c/p\u003e\n\u003ch3\u003e Flags \u003c/h3\u003e \n\u003cp\u003e The following table summarizes the supported flags. \u003ci\u003ey\u003c/i\u003e means the flag is supported for the indicated argument types. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  genConv\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"col\" style\u003d\"vertical-align:bottom\"\u003e Flag \u003c/th\u003e\n   \u003cth scope\u003d\"col\" style\u003d\"vertical-align:bottom\"\u003e General \u003c/th\u003e\n   \u003cth scope\u003d\"col\" style\u003d\"vertical-align:bottom\"\u003e Character \u003c/th\u003e\n   \u003cth scope\u003d\"col\" style\u003d\"vertical-align:bottom\"\u003e Integral \u003c/th\u003e\n   \u003cth scope\u003d\"col\" style\u003d\"vertical-align:bottom\"\u003e Floating Point \u003c/th\u003e\n   \u003cth scope\u003d\"col\" style\u003d\"vertical-align:bottom\"\u003e Date/Time \u003c/th\u003e\n   \u003cth scope\u003d\"col\" style\u003d\"vertical-align:bottom\"\u003e Description \u003c/th\u003e\n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e \u0027-\u0027 \u003c/th\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y \u003c/td\u003e\n   \u003ctd\u003e The result will be left-justified. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e \u0027#\u0027 \u003c/th\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y\u003csup\u003e1\u003c/sup\u003e \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y\u003csup\u003e3\u003c/sup\u003e \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd\u003e The result should use a conversion-dependent alternate form \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e \u0027+\u0027 \u003c/th\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y\u003csup\u003e4\u003c/sup\u003e \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd\u003e The result will always include a sign \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e \u0027\u0026nbsp;\u0026nbsp;\u0027 \u003c/th\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y\u003csup\u003e4\u003c/sup\u003e \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd\u003e The result will include a leading space for positive values \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e \u00270\u0027 \u003c/th\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd\u003e The result will be zero-padded \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e \u0027,\u0027 \u003c/th\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y\u003csup\u003e2\u003c/sup\u003e \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y\u003csup\u003e5\u003c/sup\u003e \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd\u003e The result will include locale-specific \u003ca href\u003d\"../text/DecimalFormatSymbols.html#getGroupingSeparator()\"\u003egrouping separators\u003c/a\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e \u0027(\u0027 \u003c/th\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e - \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y\u003csup\u003e4\u003c/sup\u003e \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center; vertical-align:top\"\u003e y\u003csup\u003e5\u003c/sup\u003e \u003c/td\u003e\n   \u003ctd style\u003d\"text-align:center\"\u003e - \u003c/td\u003e\n   \u003ctd\u003e The result will enclose negative numbers in parentheses \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003csup\u003e1\u003c/sup\u003e Depends on the definition of \u003ca href\u003d\"Formattable.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eFormattable\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003csup\u003e2\u003c/sup\u003e For \u003ccode\u003e\u0027d\u0027\u003c/code\u003e conversion only. \u003c/p\u003e\n\u003cp\u003e \u003csup\u003e3\u003c/sup\u003e For \u003ccode\u003e\u0027o\u0027\u003c/code\u003e, \u003ccode\u003e\u0027x\u0027\u003c/code\u003e, and \u003ccode\u003e\u0027X\u0027\u003c/code\u003e conversions only. \u003c/p\u003e\n\u003cp\u003e \u003csup\u003e4\u003c/sup\u003e For \u003ccode\u003e\u0027d\u0027\u003c/code\u003e, \u003ccode\u003e\u0027o\u0027\u003c/code\u003e, \u003ccode\u003e\u0027x\u0027\u003c/code\u003e, and \u003ccode\u003e\u0027X\u0027\u003c/code\u003e conversions applied to \u003ca href\u003d\"../math/BigInteger.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eBigInteger\u003c/code\u003e\u003c/a\u003e or \u003ccode\u003e\u0027d\u0027\u003c/code\u003e applied to \u003ccode\u003ebyte\u003c/code\u003e, \u003ca href\u003d\"../lang/Byte.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eByte\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003eshort\u003c/code\u003e, \u003ca href\u003d\"../lang/Short.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eShort\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003eint\u003c/code\u003e and \u003ca href\u003d\"../lang/Integer.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eInteger\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003elong\u003c/code\u003e, and \u003ca href\u003d\"../lang/Long.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eLong\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003csup\u003e5\u003c/sup\u003e For \u003ccode\u003e\u0027e\u0027\u003c/code\u003e, \u003ccode\u003e\u0027E\u0027\u003c/code\u003e, \u003ccode\u003e\u0027f\u0027\u003c/code\u003e, \u003ccode\u003e\u0027g\u0027\u003c/code\u003e, and \u003ccode\u003e\u0027G\u0027\u003c/code\u003e conversions only. \u003c/p\u003e\n\u003cp\u003e Any characters not explicitly defined as flags are illegal and are reserved for future extensions. \u003c/p\u003e\n\u003ch3\u003e Width \u003c/h3\u003e \n\u003cp\u003e The width is the minimum number of characters to be written to the output. For the line separator conversion, width is not applicable; if it is provided, an exception will be thrown. \u003c/p\u003e\n\u003ch3\u003e Precision \u003c/h3\u003e \n\u003cp\u003e For general argument types, the precision is the maximum number of characters to be written to the output. \u003c/p\u003e\n\u003cp\u003e For the floating-point conversions \u003ccode\u003e\u0027a\u0027\u003c/code\u003e, \u003ccode\u003e\u0027A\u0027\u003c/code\u003e, \u003ccode\u003e\u0027e\u0027\u003c/code\u003e, \u003ccode\u003e\u0027E\u0027\u003c/code\u003e, and \u003ccode\u003e\u0027f\u0027\u003c/code\u003e the precision is the number of digits after the radix point. If the conversion is \u003ccode\u003e\u0027g\u0027\u003c/code\u003e or \u003ccode\u003e\u0027G\u0027\u003c/code\u003e, then the precision is the total number of digits in the resulting magnitude after rounding. \u003c/p\u003e\n\u003cp\u003e For character, integral, and date/time argument types and the percent and line separator conversions, the precision is not applicable; if a precision is provided, an exception will be thrown. \u003c/p\u003e\n\u003ch3\u003e Argument Index \u003c/h3\u003e \n\u003cp\u003e The argument index is a decimal integer indicating the position of the argument in the argument list. The first argument is referenced by \"\u003ccode\u003e1$\u003c/code\u003e\", the second by \"\u003ccode\u003e2$\u003c/code\u003e\", etc. \u003c/p\u003e\n\u003cp\u003e Another way to reference arguments by position is to use the \u003ccode\u003e\u0027\u0026lt;\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u003c\u0027\u003c/code\u003e) flag, which causes the argument for the previous format specifier to be re-used. For example, the following two statements would produce identical strings: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e   Calendar c \u003d ...;\n   String s1 \u003d String.format(\"Duke\u0027s Birthday: %1$tm %1$te,%1$tY\", c);\n\n   String s2 \u003d String.format(\"Duke\u0027s Birthday: %1$tm %\u0026lt;te,%\u0026lt;tY\", c);\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003chr\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"detail\"\u003eDetails\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e This section is intended to provide behavioral details for formatting, including conditions and exceptions, supported data types, localization, and interactions between flags, conversions, and data types. For an overview of formatting concepts, refer to the \u003ca href\u003d\"#summary\"\u003eSummary\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e Any characters not explicitly defined as conversions, date/time conversion suffixes, or flags are illegal and are reserved for future extensions. Use of such a character in a format string will cause an \u003ca href\u003d\"UnknownFormatConversionException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eUnknownFormatConversionException\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"UnknownFormatFlagsException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eUnknownFormatFlagsException\u003c/code\u003e\u003c/a\u003e to be thrown. \u003c/p\u003e\n\u003cp\u003e If the format specifier contains a width or precision with an invalid value or which is otherwise unsupported, then a \u003ca href\u003d\"IllegalFormatWidthException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatWidthException\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"IllegalFormatPrecisionException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatPrecisionException\u003c/code\u003e\u003c/a\u003e respectively will be thrown. Similarly, values of zero for an argument index will result in an \u003ca href\u003d\"IllegalFormatException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatException\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e If a format specifier contains a conversion character that is not applicable to the corresponding argument, then an \u003ca href\u003d\"IllegalFormatConversionException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatConversionException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\n\u003cp\u003e Values of \u003ci\u003eprecision\u003c/i\u003e must be in the range zero to \u003ca href\u003d\"../lang/Integer.html#MAX_VALUE\"\u003e\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e\u003c/a\u003e, inclusive, otherwise \u003ca href\u003d\"IllegalFormatPrecisionException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatPrecisionException\u003c/code\u003e\u003c/a\u003e is thrown.\u003c/p\u003e \n\u003cp\u003e Values of \u003ci\u003ewidth\u003c/i\u003e must be in the range one to \u003ca href\u003d\"../lang/Integer.html#MAX_VALUE\"\u003e\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e\u003c/a\u003e, inclusive, otherwise \u003ca href\u003d\"IllegalFormatWidthException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatWidthException\u003c/code\u003e\u003c/a\u003e will be thrown Note that widths can appear to have a negative value, but the negative sign is a \u003ci\u003eflag\u003c/i\u003e. For example in the format string \u003ccode\u003e\"%-20s\"\u003c/code\u003e the \u003ci\u003ewidth\u003c/i\u003e is \u003ci\u003e20\u003c/i\u003e and the \u003ci\u003eflag\u003c/i\u003e is \"-\".\u003c/p\u003e \n\u003cp\u003e Values of \u003ci\u003eindex\u003c/i\u003e must be in the range one to \u003ca href\u003d\"../lang/Integer.html#MAX_VALUE\"\u003e\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e\u003c/a\u003e, inclusive, otherwise \u003ca href\u003d\"IllegalFormatException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatException\u003c/code\u003e\u003c/a\u003e will be thrown.\u003c/p\u003e \n\u003cp\u003e All specified exceptions may be thrown by any of the \u003ccode\u003eformat\u003c/code\u003e methods of \u003ccode\u003eFormatter\u003c/code\u003e as well as by any \u003ccode\u003eformat\u003c/code\u003e convenience methods such as \u003ca href\u003d\"../lang/String.html#format(java.lang.String,java.lang.Object...)\"\u003e\u003ccode\u003eString.format\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"../io/PrintStream.html#printf(java.lang.String,java.lang.Object...)\"\u003e\u003ccode\u003ePrintStream.printf\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e For category \u003ci\u003eGeneral\u003c/i\u003e, \u003ci\u003eCharacter\u003c/i\u003e, \u003ci\u003eNumeric\u003c/i\u003e, \u003ci\u003eIntegral\u003c/i\u003e and \u003ci\u003eDate/Time\u003c/i\u003e conversion, unless otherwise specified, if the argument \u003ci\u003earg\u003c/i\u003e is \u003ccode\u003enull\u003c/code\u003e, then the result is \"\u003ccode\u003enull\u003c/code\u003e\". \u003c/p\u003e\n\u003cp\u003e Conversions denoted by an upper-case character (i.e. \u003ccode\u003e\u0027B\u0027\u003c/code\u003e, \u003ccode\u003e\u0027H\u0027\u003c/code\u003e, \u003ccode\u003e\u0027S\u0027\u003c/code\u003e, \u003ccode\u003e\u0027C\u0027\u003c/code\u003e, \u003ccode\u003e\u0027X\u0027\u003c/code\u003e, \u003ccode\u003e\u0027E\u0027\u003c/code\u003e, \u003ccode\u003e\u0027G\u0027\u003c/code\u003e, \u003ccode\u003e\u0027A\u0027\u003c/code\u003e, and \u003ccode\u003e\u0027T\u0027\u003c/code\u003e) are the same as those for the corresponding lower-case conversion characters except that the result is converted to upper case according to the rules of the prevailing \u003ca href\u003d\"Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e. If there is no explicit locale specified, either at the construction of the instance or as a parameter to its method invocation, then the \u003ca href\u003d\"Locale.Category.html#FORMAT\"\u003e\u003ccode\u003edefault locale\u003c/code\u003e\u003c/a\u003e is used. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"dgen\"\u003eGeneral\u003c/a\u003e\u003c/h3\u003e \n\u003cp\u003e The following general conversions may be applied to any argument type: \u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  dgConv\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027b\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0062\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Produces either \"\u003ccode\u003etrue\u003c/code\u003e\" or \"\u003ccode\u003efalse\u003c/code\u003e\" as returned by \u003ca href\u003d\"../lang/Boolean.html#toString(boolean)\"\u003e\u003ccode\u003eBoolean.toString(boolean)\u003c/code\u003e\u003c/a\u003e. \u003cp\u003e If the argument is \u003ccode\u003enull\u003c/code\u003e, then the result is \"\u003ccode\u003efalse\u003c/code\u003e\". If the argument is a \u003ccode\u003eboolean\u003c/code\u003e or \u003ca href\u003d\"../lang/Boolean.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eBoolean\u003c/code\u003e\u003c/a\u003e, then the result is the string returned by \u003ca href\u003d\"../lang/String.html#valueOf(boolean)\"\u003e\u003ccode\u003eString.valueOf()\u003c/code\u003e\u003c/a\u003e. Otherwise, the result is \"\u003ccode\u003etrue\u003c/code\u003e\". \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given, then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027B\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0042\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027b\u0027\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027h\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0068\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Produces a string representing the hash code value of the object. \u003cp\u003e The result is obtained by invoking \u003ccode\u003eInteger.toHexString(arg.hashCode())\u003c/code\u003e. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given, then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027H\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0048\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027h\u0027\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027s\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0073\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Produces a string. \u003cp\u003e If the argument implements \u003ca href\u003d\"Formattable.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eFormattable\u003c/code\u003e\u003c/a\u003e, then its \u003ca href\u003d\"Formattable.html#formatTo(java.util.Formatter,int,int,int)\"\u003e\u003ccode\u003eformatTo\u003c/code\u003e\u003c/a\u003e method is invoked. Otherwise, the result is obtained by invoking the argument\u0027s \u003ccode\u003etoString()\u003c/code\u003e method. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given and the argument is not a \u003ca href\u003d\"Formattable.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eFormattable\u003c/code\u003e\u003c/a\u003e, then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027S\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0053\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027s\u0027\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following \u003ca id\u003d\"dFlags\"\u003eflags\u003c/a\u003e apply to general conversions: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  dFlags\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027-\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u002d\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Left justifies the output. Spaces (\u003ccode\u003e\u0027\\u0020\u0027\u003c/code\u003e) will be added at the end of the converted value as required to fill the minimum width of the field. If the width is not provided, then a \u003ca href\u003d\"MissingFormatWidthException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eMissingFormatWidthException\u003c/code\u003e\u003c/a\u003e will be thrown. If this flag is not given then the output will be right-justified. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027#\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0023\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output use an alternate form. The definition of the form is specified by the conversion. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ca id\u003d\"genWidth\"\u003ewidth\u003c/a\u003e is the minimum number of characters to be written to the output. If the length of the converted value is less than the width then the output will be padded by \u003ccode\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0020\u0027\u003c/code\u003e) until the total number of characters equals the width. The padding is on the left by default. If the \u003ccode\u003e\u0027-\u0027\u003c/code\u003e flag is given, then the padding will be on the right. If the width is not specified then there is no minimum. \u003c/p\u003e\n\u003cp\u003e The precision is the maximum number of characters to be written to the output. The precision is applied before the width, thus the output will be truncated to \u003ccode\u003eprecision\u003c/code\u003e characters even if the width is greater than the precision. If the precision is not specified then there is no explicit limit on the number of characters. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"dchar\"\u003eCharacter\u003c/a\u003e\u003c/h3\u003e This conversion may be applied to \n\u003ccode\u003echar\u003c/code\u003e and \n\u003ca href\u003d\"../lang/Character.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eCharacter\u003c/code\u003e\u003c/a\u003e. It may also be applied to the types \n\u003ccode\u003ebyte\u003c/code\u003e, \n\u003ca href\u003d\"../lang/Byte.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eByte\u003c/code\u003e\u003c/a\u003e, \n\u003ccode\u003eshort\u003c/code\u003e, and \n\u003ca href\u003d\"../lang/Short.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eShort\u003c/code\u003e\u003c/a\u003e, \n\u003ccode\u003eint\u003c/code\u003e and \n\u003ca href\u003d\"../lang/Integer.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eInteger\u003c/code\u003e\u003c/a\u003e when \n\u003ca href\u003d\"../lang/Character.html#isValidCodePoint(int)\"\u003e\u003ccode\u003eCharacter.isValidCodePoint(int)\u003c/code\u003e\u003c/a\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e. If it returns \n\u003ccode\u003efalse\u003c/code\u003e then an \n\u003ca href\u003d\"IllegalFormatCodePointException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatCodePointException\u003c/code\u003e\u003c/a\u003e will be thrown. \n\u003cp\u003e\u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  charConv\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027c\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0063\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Formats the argument as a Unicode character as described in \u003ca href\u003d\"../lang/Character.html#unicode\"\u003eUnicode Character Representation\u003c/a\u003e. This may be more than one 16-bit \u003ccode\u003echar\u003c/code\u003e in the case where the argument represents a supplementary character. \u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given, then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027C\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0043\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027c\u0027\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e The \u003ccode\u003e\u0027-\u0027\u003c/code\u003e flag defined for \u003ca href\u003d\"#dFlags\"\u003eGeneral conversions\u003c/a\u003e applies. If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given, then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\n\u003cp\u003e The width is defined as for \u003ca href\u003d\"#genWidth\"\u003eGeneral conversions\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e The precision is not applicable. If the precision is specified then an \u003ca href\u003d\"IllegalFormatPrecisionException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatPrecisionException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"dnum\"\u003eNumeric\u003c/a\u003e\u003c/h3\u003e \n\u003cp\u003e Numeric conversions are divided into the following categories: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e \u003ca href\u003d\"#dnint\"\u003e\u003cb\u003eByte, Short, Integer, and Long\u003c/b\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"#dnbint\"\u003e\u003cb\u003eBigInteger\u003c/b\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"#dndec\"\u003e\u003cb\u003eFloat and Double\u003c/b\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e \u003ca href\u003d\"#dnbdec\"\u003e\u003cb\u003eBigDecimal\u003c/b\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Numeric types will be formatted according to the following algorithm: \u003c/p\u003e\n\u003cp\u003e\u003cb\u003e\u003ca id\u003d\"L10nAlgorithm\"\u003e Number Localization Algorithm\u003c/a\u003e\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003e After digits are obtained for the integer part, fractional part, and exponent (as appropriate for the data type), the following transformation is applied: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e Each digit character \u003ci\u003ed\u003c/i\u003e in the string is replaced by a locale-specific digit computed relative to the current locale\u0027s \u003ca href\u003d\"../text/DecimalFormatSymbols.html#getZeroDigit()\"\u003ezero digit\u003c/a\u003e \u003ci\u003ez\u003c/i\u003e; that is \u003ci\u003ed\u0026nbsp;-\u0026nbsp;\u003c/i\u003e \u003ccode\u003e\u00270\u0027\u003c/code\u003e \u003ci\u003e\u0026nbsp;+\u0026nbsp;z\u003c/i\u003e. \u003c/li\u003e\n \u003cli\u003e If a decimal separator is present, a locale-specific \u003ca href\u003d\"../text/DecimalFormatSymbols.html#getDecimalSeparator()\"\u003edecimal separator\u003c/a\u003e is substituted. \u003c/li\u003e\n \u003cli\u003e If the \u003ccode\u003e\u0027,\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002c\u0027\u003c/code\u003e) \u003ca id\u003d\"L10nGroup\"\u003eflag\u003c/a\u003e is given, then the locale-specific \u003ca href\u003d\"../text/DecimalFormatSymbols.html#getGroupingSeparator()\"\u003egrouping separator\u003c/a\u003e is inserted by scanning the integer part of the string from least significant to most significant digits and inserting a separator at intervals defined by the locale\u0027s \u003ca href\u003d\"../text/DecimalFormat.html#getGroupingSize()\"\u003egrouping size\u003c/a\u003e. \u003c/li\u003e\n \u003cli\u003e If the \u003ccode\u003e\u00270\u0027\u003c/code\u003e flag is given, then the locale-specific \u003ca href\u003d\"../text/DecimalFormatSymbols.html#getZeroDigit()\"\u003ezero digits\u003c/a\u003e are inserted after the sign character, if any, and before the first non-zero digit, until the length of the string is equal to the requested field width. \u003c/li\u003e\n \u003cli\u003e If the value is negative and the \u003ccode\u003e\u0027(\u0027\u003c/code\u003e flag is given, then a \u003ccode\u003e\u0027(\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0028\u0027\u003c/code\u003e) is prepended and a \u003ccode\u003e\u0027)\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0029\u0027\u003c/code\u003e) is appended. \u003c/li\u003e\n \u003cli\u003e If the value is negative (or floating-point negative zero) and \u003ccode\u003e\u0027(\u0027\u003c/code\u003e flag is not given, then a \u003ccode\u003e\u0027-\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002d\u0027\u003c/code\u003e) is prepended. \u003c/li\u003e\n \u003cli\u003e If the \u003ccode\u003e\u0027+\u0027\u003c/code\u003e flag is given and the value is positive or zero (or floating-point positive zero), then a \u003ccode\u003e\u0027+\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002b\u0027\u003c/code\u003e) will be prepended. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If the value is NaN or positive infinity the literal strings \"NaN\" or \"Infinity\" respectively, will be output. If the value is negative infinity, then the output will be \"(Infinity)\" if the \u003ccode\u003e\u0027(\u0027\u003c/code\u003e flag is given otherwise the output will be \"-Infinity\". These values are not localized. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"dnint\"\u003e\u003cb\u003e Byte, Short, Integer, and Long \u003c/b\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e The following conversions may be applied to \u003ccode\u003ebyte\u003c/code\u003e, \u003ca href\u003d\"../lang/Byte.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eByte\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003eshort\u003c/code\u003e, \u003ca href\u003d\"../lang/Short.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eShort\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003eint\u003c/code\u003e and \u003ca href\u003d\"../lang/Integer.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eInteger\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003elong\u003c/code\u003e, and \u003ca href\u003d\"../lang/Long.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eLong\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  IntConv\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027d\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0064\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Formats the argument as a decimal integer. The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied. \u003cp\u003e If the \u003ccode\u003e\u00270\u0027\u003c/code\u003e flag is given and the value is negative, then the zero padding will occur after the sign. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027o\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u006f\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Formats the argument as an integer in base eight. No localization is applied. \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is negative then the result will be an unsigned value generated by adding 2\u003csup\u003en\u003c/sup\u003e to the value where \u003ccode\u003en\u003c/code\u003e is the number of bits in the type as returned by the static \u003ccode\u003eSIZE\u003c/code\u003e field in the \u003ca href\u003d\"../lang/Byte.html#SIZE\"\u003eByte\u003c/a\u003e, \u003ca href\u003d\"../lang/Short.html#SIZE\"\u003eShort\u003c/a\u003e, \u003ca href\u003d\"../lang/Integer.html#SIZE\"\u003eInteger\u003c/a\u003e, or \u003ca href\u003d\"../lang/Long.html#SIZE\"\u003eLong\u003c/a\u003e classes as appropriate. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given then the output will always begin with the radix indicator \u003ccode\u003e\u00270\u0027\u003c/code\u003e. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u00270\u0027\u003c/code\u003e flag is given then the output will be padded with leading zeros to the field width following any indication of sign. \u003c/p\u003e\u003cp\u003e If \u003ccode\u003e\u0027(\u0027\u003c/code\u003e, \u003ccode\u003e\u0027+\u0027\u003c/code\u003e, \u0027\u0026nbsp;\u0026nbsp;\u0027, or \u003ccode\u003e\u0027,\u0027\u003c/code\u003e flags are given then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027x\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0078\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Formats the argument as an integer in base sixteen. No localization is applied. \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is negative then the result will be an unsigned value generated by adding 2\u003csup\u003en\u003c/sup\u003e to the value where \u003ccode\u003en\u003c/code\u003e is the number of bits in the type as returned by the static \u003ccode\u003eSIZE\u003c/code\u003e field in the \u003ca href\u003d\"../lang/Byte.html#SIZE\"\u003eByte\u003c/a\u003e, \u003ca href\u003d\"../lang/Short.html#SIZE\"\u003eShort\u003c/a\u003e, \u003ca href\u003d\"../lang/Integer.html#SIZE\"\u003eInteger\u003c/a\u003e, or \u003ca href\u003d\"../lang/Long.html#SIZE\"\u003eLong\u003c/a\u003e classes as appropriate. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given then the output will always begin with the radix indicator \u003ccode\u003e\"0x\"\u003c/code\u003e. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u00270\u0027\u003c/code\u003e flag is given then the output will be padded to the field width with leading zeros after the radix indicator or sign (if present). \u003c/p\u003e\u003cp\u003e If \u003ccode\u003e\u0027(\u0027\u003c/code\u003e, \u003ccode\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/code\u003e, \u003ccode\u003e\u0027+\u0027\u003c/code\u003e, or \u003ccode\u003e\u0027,\u0027\u003c/code\u003e flags are given then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027X\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0058\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027x\u0027\u003c/code\u003e. The entire string representing the number will be converted to \u003ca href\u003d\"../lang/String.html#toUpperCase(java.util.Locale)\"\u003eupper case\u003c/a\u003e including the \u003ccode\u003e\u0027x\u0027\u003c/code\u003e (if any) and all hexadecimal digits \u003ccode\u003e\u0027a\u0027\u003c/code\u003e - \u003ccode\u003e\u0027f\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0061\u0027\u003c/code\u003e - \u003ccode\u003e\u0027\\u0066\u0027\u003c/code\u003e). \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If the conversion is \u003ccode\u003e\u0027o\u0027\u003c/code\u003e, \u003ccode\u003e\u0027x\u0027\u003c/code\u003e, or \u003ccode\u003e\u0027X\u0027\u003c/code\u003e and both the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e and the \u003ccode\u003e\u00270\u0027\u003c/code\u003e flags are given, then result will contain the radix indicator (\u003ccode\u003e\u00270\u0027\u003c/code\u003e for octal and \u003ccode\u003e\"0x\"\u003c/code\u003e or \u003ccode\u003e\"0X\"\u003c/code\u003e for hexadecimal), some number of zeros (based on the width), and the value. \u003c/p\u003e\n\u003cp\u003e If the \u003ccode\u003e\u0027-\u0027\u003c/code\u003e flag is not given, then the space padding will occur before the sign. \u003c/p\u003e\n\u003cp\u003e The following \u003ca id\u003d\"intFlags\"\u003eflags\u003c/a\u003e apply to numeric integral conversions: \u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  intFlags\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027+\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u002b\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to include a positive sign for all positive numbers. If this flag is not given then only negative values will include a sign. \u003cp\u003e If both the \u003ccode\u003e\u0027+\u0027\u003c/code\u003e and \u003ccode\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/code\u003e flags are given then an \u003ca href\u003d\"IllegalFormatFlagsException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatFlagsException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0020\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to include a single extra space (\u003ccode\u003e\u0027\\u0020\u0027\u003c/code\u003e) for non-negative values. \u003cp\u003e If both the \u003ccode\u003e\u0027+\u0027\u003c/code\u003e and \u003ccode\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/code\u003e flags are given then an \u003ca href\u003d\"IllegalFormatFlagsException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatFlagsException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u00270\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0030\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to be padded with leading \u003ca href\u003d\"../text/DecimalFormatSymbols.html#getZeroDigit()\"\u003ezeros\u003c/a\u003e to the minimum field width following any sign or radix indicator except when converting NaN or infinity. If the width is not provided, then a \u003ca href\u003d\"MissingFormatWidthException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eMissingFormatWidthException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003cp\u003e If both the \u003ccode\u003e\u0027-\u0027\u003c/code\u003e and \u003ccode\u003e\u00270\u0027\u003c/code\u003e flags are given then an \u003ca href\u003d\"IllegalFormatFlagsException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatFlagsException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027,\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u002c\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to include the locale-specific \u003ca href\u003d\"../text/DecimalFormatSymbols.html#getGroupingSeparator()\"\u003egroup separators\u003c/a\u003e as described in the \u003ca href\u003d\"#L10nGroup\"\u003e\"group\" section\u003c/a\u003e of the localization algorithm. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027(\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0028\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to prepend a \u003ccode\u003e\u0027(\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0028\u0027\u003c/code\u003e) and append a \u003ccode\u003e\u0027)\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0029\u0027\u003c/code\u003e) to negative values. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If no \u003ca id\u003d\"intdFlags\"\u003eflags\u003c/a\u003e are given the default formatting is as follows: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e The output is right-justified within the \u003ccode\u003ewidth\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e Negative numbers begin with a \u003ccode\u003e\u0027-\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002d\u0027\u003c/code\u003e) \u003c/li\u003e\n \u003cli\u003e Positive numbers and zero do not include a sign or extra leading space \u003c/li\u003e\n \u003cli\u003e No grouping separators are included \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ca id\u003d\"intWidth\"\u003ewidth\u003c/a\u003e is the minimum number of characters to be written to the output. This includes any signs, digits, grouping separators, radix indicator, and parentheses. If the length of the converted value is less than the width then the output will be padded by spaces (\u003ccode\u003e\u0027\\u0020\u0027\u003c/code\u003e) until the total number of characters equals width. The padding is on the left by default. If \u003ccode\u003e\u0027-\u0027\u003c/code\u003e flag is given then the padding will be on the right. If width is not specified then there is no minimum. \u003c/p\u003e\n\u003cp\u003e The precision is not applicable. If precision is specified then an \u003ca href\u003d\"IllegalFormatPrecisionException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatPrecisionException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"dnbint\"\u003e\u003cb\u003e BigInteger \u003c/b\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e The following conversions may be applied to \u003ca href\u003d\"../math/BigInteger.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eBigInteger\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  bIntConv\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027d\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0064\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to be formatted as a decimal integer. The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied. \u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027o\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u006f\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to be formatted as an integer in base eight. No localization is applied. \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is negative then the result will be a signed value beginning with \u003ccode\u003e\u0027-\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002d\u0027\u003c/code\u003e). Signed output is allowed for this type because unlike the primitive types it is not possible to create an unsigned equivalent without assuming an explicit data-type size. \u003c/p\u003e\u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is positive or zero and the \u003ccode\u003e\u0027+\u0027\u003c/code\u003e flag is given then the result will begin with \u003ccode\u003e\u0027+\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002b\u0027\u003c/code\u003e). \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given then the output will always begin with \u003ccode\u003e\u00270\u0027\u003c/code\u003e prefix. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u00270\u0027\u003c/code\u003e flag is given then the output will be padded with leading zeros to the field width following any indication of sign. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027,\u0027\u003c/code\u003e flag is given then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027x\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0078\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to be formatted as an integer in base sixteen. No localization is applied. \u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is negative then the result will be a signed value beginning with \u003ccode\u003e\u0027-\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002d\u0027\u003c/code\u003e). Signed output is allowed for this type because unlike the primitive types it is not possible to create an unsigned equivalent without assuming an explicit data-type size. \u003c/p\u003e\u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is positive or zero and the \u003ccode\u003e\u0027+\u0027\u003c/code\u003e flag is given then the result will begin with \u003ccode\u003e\u0027+\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002b\u0027\u003c/code\u003e). \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given then the output will always begin with the radix indicator \u003ccode\u003e\"0x\"\u003c/code\u003e. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u00270\u0027\u003c/code\u003e flag is given then the output will be padded to the field width with leading zeros after the radix indicator or sign (if present). \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027,\u0027\u003c/code\u003e flag is given then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027X\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0058\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027x\u0027\u003c/code\u003e. The entire string representing the number will be converted to \u003ca href\u003d\"../lang/String.html#toUpperCase(java.util.Locale)\"\u003eupper case\u003c/a\u003e including the \u003ccode\u003e\u0027x\u0027\u003c/code\u003e (if any) and all hexadecimal digits \u003ccode\u003e\u0027a\u0027\u003c/code\u003e - \u003ccode\u003e\u0027f\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0061\u0027\u003c/code\u003e - \u003ccode\u003e\u0027\\u0066\u0027\u003c/code\u003e). \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If the conversion is \u003ccode\u003e\u0027o\u0027\u003c/code\u003e, \u003ccode\u003e\u0027x\u0027\u003c/code\u003e, or \u003ccode\u003e\u0027X\u0027\u003c/code\u003e and both the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e and the \u003ccode\u003e\u00270\u0027\u003c/code\u003e flags are given, then result will contain the base indicator (\u003ccode\u003e\u00270\u0027\u003c/code\u003e for octal and \u003ccode\u003e\"0x\"\u003c/code\u003e or \u003ccode\u003e\"0X\"\u003c/code\u003e for hexadecimal), some number of zeros (based on the width), and the value. \u003c/p\u003e\n\u003cp\u003e If the \u003ccode\u003e\u00270\u0027\u003c/code\u003e flag is given and the value is negative, then the zero padding will occur after the sign. \u003c/p\u003e\n\u003cp\u003e If the \u003ccode\u003e\u0027-\u0027\u003c/code\u003e flag is not given, then the space padding will occur before the sign. \u003c/p\u003e\n\u003cp\u003e All \u003ca href\u003d\"#intFlags\"\u003eflags\u003c/a\u003e defined for Byte, Short, Integer, and Long apply. The \u003ca href\u003d\"#intdFlags\"\u003edefault behavior\u003c/a\u003e when no flags are given is the same as for Byte, Short, Integer, and Long. \u003c/p\u003e\n\u003cp\u003e The specification of \u003ca href\u003d\"#intWidth\"\u003ewidth\u003c/a\u003e is the same as defined for Byte, Short, Integer, and Long. \u003c/p\u003e\n\u003cp\u003e The precision is not applicable. If precision is specified then an \u003ca href\u003d\"IllegalFormatPrecisionException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatPrecisionException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"dndec\"\u003e\u003cb\u003e Float and Double\u003c/b\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e The following conversions may be applied to \u003ccode\u003efloat\u003c/code\u003e, \u003ca href\u003d\"../lang/Float.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eFloat\u003c/code\u003e\u003c/a\u003e, \u003ccode\u003edouble\u003c/code\u003e and \u003ca href\u003d\"../lang/Double.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eDouble\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  floatConv\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027e\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0065\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to be formatted using \u003ca id\u003d\"scientific\"\u003ecomputerized scientific notation\u003c/a\u003e. The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied. \u003cp\u003e The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its value. \u003c/p\u003e\u003cp\u003e If \u003ci\u003em\u003c/i\u003e is NaN or infinite, the literal strings \"NaN\" or \"Infinity\", respectively, will be output. These values are not localized. \u003c/p\u003e\u003cp\u003e If \u003ci\u003em\u003c/i\u003e is positive-zero or negative-zero, then the exponent will be \u003ccode\u003e\"+00\"\u003c/code\u003e. \u003c/p\u003e\u003cp\u003e Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. The formatting of the sign is described in the \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e. The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its value. \u003c/p\u003e\u003cp\u003e Let \u003ci\u003en\u003c/i\u003e be the unique integer such that 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e \u0026lt;\u003d \u003ci\u003em\u003c/i\u003e \u0026lt; 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e+1\u003c/sup\u003e; then let \u003ci\u003ea\u003c/i\u003e be the mathematically exact quotient of \u003ci\u003em\u003c/i\u003e and 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e so that 1 \u0026lt;\u003d \u003ci\u003ea\u003c/i\u003e \u0026lt; 10. The magnitude is then represented as the integer part of \u003ci\u003ea\u003c/i\u003e, as a single decimal digit, followed by the decimal separator followed by decimal digits representing the fractional part of \u003ci\u003ea\u003c/i\u003e, followed by the exponent symbol \u003ccode\u003e\u0027e\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0065\u0027\u003c/code\u003e), followed by the sign of the exponent, followed by a representation of \u003ci\u003en\u003c/i\u003e as a decimal integer, as produced by the method \u003ca href\u003d\"../lang/Long.html#toString(long,int)\"\u003e\u003ccode\u003eLong.toString(long, int)\u003c/code\u003e\u003c/a\u003e, and zero-padded to include at least two digits. \u003c/p\u003e\u003cp\u003e The number of digits in the result for the fractional part of \u003ci\u003em\u003c/i\u003e or \u003ci\u003ea\u003c/i\u003e is equal to the precision. If the precision is not specified then the default value is \u003ccode\u003e6\u003c/code\u003e. If the precision is less than the number of digits which would appear after the decimal point in the string returned by \u003ca href\u003d\"../lang/Float.html#toString(float)\"\u003e\u003ccode\u003eFloat.toString(float)\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"../lang/Double.html#toString(double)\"\u003e\u003ccode\u003eDouble.toString(double)\u003c/code\u003e\u003c/a\u003e respectively, then the value will be rounded using the \u003ca href\u003d\"../math/RoundingMode.html#HALF_UP\"\u003eround half up algorithm\u003c/a\u003e. Otherwise, zeros may be appended to reach the precision. For a canonical representation of the value, use \u003ca href\u003d\"../lang/Float.html#toString(float)\"\u003e\u003ccode\u003eFloat.toString(float)\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"../lang/Double.html#toString(double)\"\u003e\u003ccode\u003eDouble.toString(double)\u003c/code\u003e\u003c/a\u003e as appropriate. \u003c/p\u003e\u003cp\u003eIf the \u003ccode\u003e\u0027,\u0027\u003c/code\u003e flag is given, then an \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027E\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0045\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027e\u0027\u003c/code\u003e. The exponent symbol will be \u003ccode\u003e\u0027E\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0045\u0027\u003c/code\u003e). \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027g\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0067\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to be formatted in general scientific notation as described below. The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied. \u003cp\u003e After rounding for the precision, the formatting of the resulting magnitude \u003ci\u003em\u003c/i\u003e depends on its value. \u003c/p\u003e\u003cp\u003e If \u003ci\u003em\u003c/i\u003e is greater than or equal to 10\u003csup\u003e-4\u003c/sup\u003e but less than 10\u003csup\u003eprecision\u003c/sup\u003e then it is represented in \u003ci\u003e\u003ca href\u003d\"#decimal\"\u003edecimal format\u003c/a\u003e\u003c/i\u003e. \u003c/p\u003e\u003cp\u003e If \u003ci\u003em\u003c/i\u003e is less than 10\u003csup\u003e-4\u003c/sup\u003e or greater than or equal to 10\u003csup\u003eprecision\u003c/sup\u003e, then it is represented in \u003ci\u003e\u003ca href\u003d\"#scientific\"\u003ecomputerized scientific notation\u003c/a\u003e\u003c/i\u003e. \u003c/p\u003e\u003cp\u003e The total number of significant digits in \u003ci\u003em\u003c/i\u003e is equal to the precision. If the precision is not specified, then the default value is \u003ccode\u003e6\u003c/code\u003e. If the precision is \u003ccode\u003e0\u003c/code\u003e, then it is taken to be \u003ccode\u003e1\u003c/code\u003e. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given then an \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027G\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0047\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027g\u0027\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027f\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0066\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to be formatted using \u003ca id\u003d\"decimal\"\u003edecimal format\u003c/a\u003e. The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied. \u003cp\u003e The result is a string that represents the sign and magnitude (absolute value) of the argument. The formatting of the sign is described in the \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e. The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its value. \u003c/p\u003e\u003cp\u003e If \u003ci\u003em\u003c/i\u003e NaN or infinite, the literal strings \"NaN\" or \"Infinity\", respectively, will be output. These values are not localized. \u003c/p\u003e\u003cp\u003e The magnitude is formatted as the integer part of \u003ci\u003em\u003c/i\u003e, with no leading zeroes, followed by the decimal separator followed by one or more decimal digits representing the fractional part of \u003ci\u003em\u003c/i\u003e. \u003c/p\u003e\u003cp\u003e The number of digits in the result for the fractional part of \u003ci\u003em\u003c/i\u003e or \u003ci\u003ea\u003c/i\u003e is equal to the precision. If the precision is not specified then the default value is \u003ccode\u003e6\u003c/code\u003e. If the precision is less than the number of digits which would appear after the decimal point in the string returned by \u003ca href\u003d\"../lang/Float.html#toString(float)\"\u003e\u003ccode\u003eFloat.toString(float)\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"../lang/Double.html#toString(double)\"\u003e\u003ccode\u003eDouble.toString(double)\u003c/code\u003e\u003c/a\u003e respectively, then the value will be rounded using the \u003ca href\u003d\"../math/RoundingMode.html#HALF_UP\"\u003eround half up algorithm\u003c/a\u003e. Otherwise, zeros may be appended to reach the precision. For a canonical representation of the value, use \u003ca href\u003d\"../lang/Float.html#toString(float)\"\u003e\u003ccode\u003eFloat.toString(float)\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"../lang/Double.html#toString(double)\"\u003e\u003ccode\u003eDouble.toString(double)\u003c/code\u003e\u003c/a\u003e as appropriate. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027a\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0061\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to be formatted in hexadecimal exponential form. No localization is applied. \u003cp\u003e The result is a string that represents the sign and magnitude (absolute value) of the argument \u003ci\u003ex\u003c/i\u003e. \u003c/p\u003e\u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is negative or a negative-zero value then the result will begin with \u003ccode\u003e\u0027-\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002d\u0027\u003c/code\u003e). \u003c/p\u003e\u003cp\u003e If \u003ci\u003ex\u003c/i\u003e is positive or a positive-zero value and the \u003ccode\u003e\u0027+\u0027\u003c/code\u003e flag is given then the result will begin with \u003ccode\u003e\u0027+\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002b\u0027\u003c/code\u003e). \u003c/p\u003e\u003cp\u003e The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its value. \u003c/p\u003e\n    \u003cul\u003e \n     \u003cli\u003e If the value is NaN or infinite, the literal strings \"NaN\" or \"Infinity\", respectively, will be output. \u003c/li\u003e\n     \u003cli\u003e If \u003ci\u003em\u003c/i\u003e is zero then it is represented by the string \u003ccode\u003e\"0x0.0p0\"\u003c/code\u003e. \u003c/li\u003e\n     \u003cli\u003e If \u003ci\u003em\u003c/i\u003e is a \u003ccode\u003edouble\u003c/code\u003e value with a normalized representation then substrings are used to represent the significand and exponent fields. The significand is represented by the characters \u003ccode\u003e\"0x1.\"\u003c/code\u003e followed by the hexadecimal representation of the rest of the significand as a fraction. The exponent is represented by \u003ccode\u003e\u0027p\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0070\u0027\u003c/code\u003e) followed by a decimal string of the unbiased exponent as if produced by invoking \u003ca href\u003d\"../lang/Integer.html#toString(int)\"\u003e\u003ccode\u003eInteger.toString\u003c/code\u003e\u003c/a\u003e on the exponent value. If the precision is specified, the value is rounded to the given number of hexadecimal digits. \u003c/li\u003e\n     \u003cli\u003e If \u003ci\u003em\u003c/i\u003e is a \u003ccode\u003edouble\u003c/code\u003e value with a subnormal representation then, unless the precision is specified to be in the range 1 through 12, inclusive, the significand is represented by the characters \u003ccode\u003e\u00270x0.\u0027\u003c/code\u003e followed by the hexadecimal representation of the rest of the significand as a fraction, and the exponent represented by \u003ccode\u003e\u0027p-1022\u0027\u003c/code\u003e. If the precision is in the interval [1,\u0026nbsp;12], the subnormal value is normalized such that it begins with the characters \u003ccode\u003e\u00270x1.\u0027\u003c/code\u003e, rounded to the number of hexadecimal digits of precision, and the exponent adjusted accordingly. Note that there must be at least one nonzero digit in a subnormal significand. \u003c/li\u003e\n    \u003c/ul\u003e \u003cp\u003e\u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027(\u0027\u003c/code\u003e or \u003ccode\u003e\u0027,\u0027\u003c/code\u003e flags are given, then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027A\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0041\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027a\u0027\u003c/code\u003e. The entire string representing the number will be converted to upper case including the \u003ccode\u003e\u0027x\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0078\u0027\u003c/code\u003e) and \u003ccode\u003e\u0027p\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0070\u0027\u003c/code\u003e and all hexadecimal digits \u003ccode\u003e\u0027a\u0027\u003c/code\u003e - \u003ccode\u003e\u0027f\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0061\u0027\u003c/code\u003e - \u003ccode\u003e\u0027\\u0066\u0027\u003c/code\u003e). \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e All \u003ca href\u003d\"#intFlags\"\u003eflags\u003c/a\u003e defined for Byte, Short, Integer, and Long apply. \u003c/p\u003e\n\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given, then the decimal separator will always be present. \u003c/p\u003e\n\u003cp\u003e If no \u003ca id\u003d\"floatdFlags\"\u003eflags\u003c/a\u003e are given the default formatting is as follows: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e The output is right-justified within the \u003ccode\u003ewidth\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e Negative numbers begin with a \u003ccode\u003e\u0027-\u0027\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e Positive numbers and positive zero do not include a sign or extra leading space \u003c/li\u003e\n \u003cli\u003e No grouping separators are included \u003c/li\u003e\n \u003cli\u003e The decimal separator will only appear if a digit follows it \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ca id\u003d\"floatDWidth\"\u003ewidth\u003c/a\u003e is the minimum number of characters to be written to the output. This includes any signs, digits, grouping separators, decimal separators, exponential symbol, radix indicator, parentheses, and strings representing infinity and NaN as applicable. If the length of the converted value is less than the width then the output will be padded by spaces (\u003ccode\u003e\u0027\\u0020\u0027\u003c/code\u003e) until the total number of characters equals width. The padding is on the left by default. If the \u003ccode\u003e\u0027-\u0027\u003c/code\u003e flag is given then the padding will be on the right. If width is not specified then there is no minimum. \u003c/p\u003e\n\u003cp\u003e If the \u003ca id\u003d\"floatDPrec\"\u003econversion\u003c/a\u003e is \u003ccode\u003e\u0027e\u0027\u003c/code\u003e, \u003ccode\u003e\u0027E\u0027\u003c/code\u003e or \u003ccode\u003e\u0027f\u0027\u003c/code\u003e, then the precision is the number of digits after the decimal separator. If the precision is not specified, then it is assumed to be \u003ccode\u003e6\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e If the conversion is \u003ccode\u003e\u0027g\u0027\u003c/code\u003e or \u003ccode\u003e\u0027G\u0027\u003c/code\u003e, then the precision is the total number of significant digits in the resulting magnitude after rounding. If the precision is not specified, then the default value is \u003ccode\u003e6\u003c/code\u003e. If the precision is \u003ccode\u003e0\u003c/code\u003e, then it is taken to be \u003ccode\u003e1\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e If the conversion is \u003ccode\u003e\u0027a\u0027\u003c/code\u003e or \u003ccode\u003e\u0027A\u0027\u003c/code\u003e, then the precision is the number of hexadecimal digits after the radix point. If the precision is not provided, then all of the digits as returned by \u003ca href\u003d\"../lang/Double.html#toHexString(double)\"\u003e\u003ccode\u003eDouble.toHexString(double)\u003c/code\u003e\u003c/a\u003e will be output. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"dnbdec\"\u003e\u003cb\u003e BigDecimal \u003c/b\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e The following conversions may be applied \u003ca href\u003d\"../math/BigDecimal.html\" title\u003d\"class in java.math\"\u003e\u003ccode\u003eBigDecimal\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  floatConv\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027e\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0065\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to be formatted using \u003ca id\u003d\"bscientific\"\u003ecomputerized scientific notation\u003c/a\u003e. The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied. \u003cp\u003e The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its value. \u003c/p\u003e\u003cp\u003e If \u003ci\u003em\u003c/i\u003e is positive-zero or negative-zero, then the exponent will be \u003ccode\u003e\"+00\"\u003c/code\u003e. \u003c/p\u003e\u003cp\u003e Otherwise, the result is a string that represents the sign and magnitude (absolute value) of the argument. The formatting of the sign is described in the \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e. The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its value. \u003c/p\u003e\u003cp\u003e Let \u003ci\u003en\u003c/i\u003e be the unique integer such that 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e \u0026lt;\u003d \u003ci\u003em\u003c/i\u003e \u0026lt; 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e+1\u003c/sup\u003e; then let \u003ci\u003ea\u003c/i\u003e be the mathematically exact quotient of \u003ci\u003em\u003c/i\u003e and 10\u003csup\u003e\u003ci\u003en\u003c/i\u003e\u003c/sup\u003e so that 1 \u0026lt;\u003d \u003ci\u003ea\u003c/i\u003e \u0026lt; 10. The magnitude is then represented as the integer part of \u003ci\u003ea\u003c/i\u003e, as a single decimal digit, followed by the decimal separator followed by decimal digits representing the fractional part of \u003ci\u003ea\u003c/i\u003e, followed by the exponent symbol \u003ccode\u003e\u0027e\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0065\u0027\u003c/code\u003e), followed by the sign of the exponent, followed by a representation of \u003ci\u003en\u003c/i\u003e as a decimal integer, as produced by the method \u003ca href\u003d\"../lang/Long.html#toString(long,int)\"\u003e\u003ccode\u003eLong.toString(long, int)\u003c/code\u003e\u003c/a\u003e, and zero-padded to include at least two digits. \u003c/p\u003e\u003cp\u003e The number of digits in the result for the fractional part of \u003ci\u003em\u003c/i\u003e or \u003ci\u003ea\u003c/i\u003e is equal to the precision. If the precision is not specified then the default value is \u003ccode\u003e6\u003c/code\u003e. If the precision is less than the number of digits to the right of the decimal point then the value will be rounded using the \u003ca href\u003d\"../math/RoundingMode.html#HALF_UP\"\u003eround half up algorithm\u003c/a\u003e. Otherwise, zeros may be appended to reach the precision. For a canonical representation of the value, use \u003ca href\u003d\"../math/BigDecimal.html#toString()\"\u003e\u003ccode\u003eBigDecimal.toString()\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027,\u0027\u003c/code\u003e flag is given, then an \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027E\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0045\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027e\u0027\u003c/code\u003e. The exponent symbol will be \u003ccode\u003e\u0027E\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0045\u0027\u003c/code\u003e). \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027g\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0067\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to be formatted in general scientific notation as described below. The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied. \u003cp\u003e After rounding for the precision, the formatting of the resulting magnitude \u003ci\u003em\u003c/i\u003e depends on its value. \u003c/p\u003e\u003cp\u003e If \u003ci\u003em\u003c/i\u003e is greater than or equal to 10\u003csup\u003e-4\u003c/sup\u003e but less than 10\u003csup\u003eprecision\u003c/sup\u003e then it is represented in \u003ci\u003e\u003ca href\u003d\"#bdecimal\"\u003edecimal format\u003c/a\u003e\u003c/i\u003e. \u003c/p\u003e\u003cp\u003e If \u003ci\u003em\u003c/i\u003e is less than 10\u003csup\u003e-4\u003c/sup\u003e or greater than or equal to 10\u003csup\u003eprecision\u003c/sup\u003e, then it is represented in \u003ci\u003e\u003ca href\u003d\"#bscientific\"\u003ecomputerized scientific notation\u003c/a\u003e\u003c/i\u003e. \u003c/p\u003e\u003cp\u003e The total number of significant digits in \u003ci\u003em\u003c/i\u003e is equal to the precision. If the precision is not specified, then the default value is \u003ccode\u003e6\u003c/code\u003e. If the precision is \u003ccode\u003e0\u003c/code\u003e, then it is taken to be \u003ccode\u003e1\u003c/code\u003e. \u003c/p\u003e\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given then an \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027G\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0047\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027g\u0027\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027f\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0066\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Requires the output to be formatted using \u003ca id\u003d\"bdecimal\"\u003edecimal format\u003c/a\u003e. The \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e is applied. \u003cp\u003e The result is a string that represents the sign and magnitude (absolute value) of the argument. The formatting of the sign is described in the \u003ca href\u003d\"#L10nAlgorithm\"\u003elocalization algorithm\u003c/a\u003e. The formatting of the magnitude \u003ci\u003em\u003c/i\u003e depends upon its value. \u003c/p\u003e\u003cp\u003e The magnitude is formatted as the integer part of \u003ci\u003em\u003c/i\u003e, with no leading zeroes, followed by the decimal separator followed by one or more decimal digits representing the fractional part of \u003ci\u003em\u003c/i\u003e. \u003c/p\u003e\u003cp\u003e The number of digits in the result for the fractional part of \u003ci\u003em\u003c/i\u003e or \u003ci\u003ea\u003c/i\u003e is equal to the precision. If the precision is not specified then the default value is \u003ccode\u003e6\u003c/code\u003e. If the precision is less than the number of digits to the right of the decimal point then the value will be rounded using the \u003ca href\u003d\"../math/RoundingMode.html#HALF_UP\"\u003eround half up algorithm\u003c/a\u003e. Otherwise, zeros may be appended to reach the precision. For a canonical representation of the value, use \u003ca href\u003d\"../math/BigDecimal.html#toString()\"\u003e\u003ccode\u003eBigDecimal.toString()\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e All \u003ca href\u003d\"#intFlags\"\u003eflags\u003c/a\u003e defined for Byte, Short, Integer, and Long apply. \u003c/p\u003e\n\u003cp\u003e If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given, then the decimal separator will always be present. \u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"#floatdFlags\"\u003edefault behavior\u003c/a\u003e when no flags are given is the same as for Float and Double. \u003c/p\u003e\n\u003cp\u003e The specification of \u003ca href\u003d\"#floatDWidth\"\u003ewidth\u003c/a\u003e and \u003ca href\u003d\"#floatDPrec\"\u003eprecision\u003c/a\u003e is the same as defined for Float and Double. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"ddt\"\u003eDate/Time\u003c/a\u003e\u003c/h3\u003e \n\u003cp\u003e This conversion may be applied to \u003ccode\u003elong\u003c/code\u003e, \u003ca href\u003d\"../lang/Long.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eLong\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"Calendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eCalendar\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"Date.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"../time/temporal/TemporalAccessor.html\" title\u003d\"interface in java.time.temporal\"\u003e\u003ccode\u003eTemporalAccessor\u003c/code\u003e\u003c/a\u003e \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  DTConv\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027t\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0074\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Prefix for date and time conversion characters. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027T\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0054\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e The upper-case variant of \u003ccode\u003e\u0027t\u0027\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following date and time conversion character suffixes are defined for the \u003ccode\u003e\u0027t\u0027\u003c/code\u003e and \u003ccode\u003e\u0027T\u0027\u003c/code\u003e conversions. The types are similar to but not completely identical to those defined by GNU \u003ccode\u003edate\u003c/code\u003e and POSIX \u003ccode\u003estrftime(3c)\u003c/code\u003e. Additional conversion types are provided to access Java-specific functionality (e.g. \u003ccode\u003e\u0027L\u0027\u003c/code\u003e for milliseconds within the second). \u003c/p\u003e\n\u003cp\u003e The following conversion characters are used for formatting times: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  time\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027H\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0048\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Hour of the day for the 24-hour clock, formatted as two digits with a leading zero as necessary i.e. \u003ccode\u003e00 - 23\u003c/code\u003e. \u003ccode\u003e00\u003c/code\u003e corresponds to midnight. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027I\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0049\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Hour for the 12-hour clock, formatted as two digits with a leading zero as necessary, i.e. \u003ccode\u003e01 - 12\u003c/code\u003e. \u003ccode\u003e01\u003c/code\u003e corresponds to one o\u0027clock (either morning or afternoon). \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027k\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u006b\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Hour of the day for the 24-hour clock, i.e. \u003ccode\u003e0 - 23\u003c/code\u003e. \u003ccode\u003e0\u003c/code\u003e corresponds to midnight. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027l\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u006c\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Hour for the 12-hour clock, i.e. \u003ccode\u003e1 - 12\u003c/code\u003e. \u003ccode\u003e1\u003c/code\u003e corresponds to one o\u0027clock (either morning or afternoon). \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027M\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u004d\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Minute within the hour formatted as two digits with a leading zero as necessary, i.e. \u003ccode\u003e00 - 59\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027S\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0053\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Seconds within the minute, formatted as two digits with a leading zero as necessary, i.e. \u003ccode\u003e00 - 60\u003c/code\u003e (\"\u003ccode\u003e60\u003c/code\u003e\" is a special value required to support leap seconds). \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027L\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u004c\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Millisecond within the second formatted as three digits with leading zeros as necessary, i.e. \u003ccode\u003e000 - 999\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027N\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u004e\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Nanosecond within the second, formatted as nine digits with leading zeros as necessary, i.e. \u003ccode\u003e000000000 - 999999999\u003c/code\u003e. The precision of this value is limited by the resolution of the underlying operating system or hardware. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027p\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0070\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Locale-specific \u003ca href\u003d\"../text/DateFormatSymbols.html#getAmPmStrings()\"\u003emorning or afternoon\u003c/a\u003e marker in lower case, e.g.\"\u003ccode\u003eam\u003c/code\u003e\" or \"\u003ccode\u003epm\u003c/code\u003e\". Use of the conversion prefix \u003ccode\u003e\u0027T\u0027\u003c/code\u003e forces this output to upper case. (Note that \u003ccode\u003e\u0027p\u0027\u003c/code\u003e produces lower-case output. This is different from GNU \u003ccode\u003edate\u003c/code\u003e and POSIX \u003ccode\u003estrftime(3c)\u003c/code\u003e which produce upper-case output.) \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027z\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u007a\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e \u003ca href\u003d\"http://www.ietf.org/rfc/rfc0822.txt\"\u003eRFC\u0026nbsp;822\u003c/a\u003e style numeric time zone offset from GMT, e.g. \u003ccode\u003e-0800\u003c/code\u003e. This value will be adjusted as necessary for Daylight Saving Time. For \u003ccode\u003elong\u003c/code\u003e, \u003ca href\u003d\"../lang/Long.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eLong\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"Date.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e the time zone used is the \u003ca href\u003d\"TimeZone.html#getDefault()\"\u003edefault time zone\u003c/a\u003e for this instance of the Java virtual machine. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027Z\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u005a\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e A string representing the abbreviation for the time zone. This value will be adjusted as necessary for Daylight Saving Time. For \u003ccode\u003elong\u003c/code\u003e, \u003ca href\u003d\"../lang/Long.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eLong\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"Date.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e the time zone used is the \u003ca href\u003d\"TimeZone.html#getDefault()\"\u003edefault time zone\u003c/a\u003e for this instance of the Java virtual machine. The Formatter\u0027s locale will supersede the locale of the argument (if any). \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027s\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0073\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Seconds since the beginning of the epoch starting at 1 January 1970 \u003ccode\u003e00:00:00\u003c/code\u003e UTC, i.e. \u003ccode\u003eLong.MIN_VALUE/1000\u003c/code\u003e to \u003ccode\u003eLong.MAX_VALUE/1000\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027Q\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u004f\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Milliseconds since the beginning of the epoch starting at 1 January 1970 \u003ccode\u003e00:00:00\u003c/code\u003e UTC, i.e. \u003ccode\u003eLong.MIN_VALUE\u003c/code\u003e to \u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e. The precision of this value is limited by the resolution of the underlying operating system or hardware. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following conversion characters are used for formatting dates: \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  date\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027B\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0042\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Locale-specific \u003ca href\u003d\"../text/DateFormatSymbols.html#getMonths()\"\u003efull month name\u003c/a\u003e, e.g. \u003ccode\u003e\"January\"\u003c/code\u003e, \u003ccode\u003e\"February\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027b\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0062\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Locale-specific \u003ca href\u003d\"../text/DateFormatSymbols.html#getShortMonths()\"\u003eabbreviated month name\u003c/a\u003e, e.g. \u003ccode\u003e\"Jan\"\u003c/code\u003e, \u003ccode\u003e\"Feb\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027h\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0068\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Same as \u003ccode\u003e\u0027b\u0027\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027A\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0041\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Locale-specific full name of the \u003ca href\u003d\"../text/DateFormatSymbols.html#getWeekdays()\"\u003eday of the week\u003c/a\u003e, e.g. \u003ccode\u003e\"Sunday\"\u003c/code\u003e, \u003ccode\u003e\"Monday\"\u003c/code\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027a\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0061\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Locale-specific short name of the \u003ca href\u003d\"../text/DateFormatSymbols.html#getShortWeekdays()\"\u003eday of the week\u003c/a\u003e, e.g. \u003ccode\u003e\"Sun\"\u003c/code\u003e, \u003ccode\u003e\"Mon\"\u003c/code\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027C\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0043\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Four-digit year divided by \u003ccode\u003e100\u003c/code\u003e, formatted as two digits with leading zero as necessary, i.e. \u003ccode\u003e00 - 99\u003c/code\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027Y\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0059\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Year, formatted to at least four digits with leading zeros as necessary, e.g. \u003ccode\u003e0092\u003c/code\u003e equals \u003ccode\u003e92\u003c/code\u003e CE for the Gregorian calendar. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027y\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0079\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Last two digits of the year, formatted with leading zeros as necessary, i.e. \u003ccode\u003e00 - 99\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027j\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u006a\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Day of year, formatted as three digits with leading zeros as necessary, e.g. \u003ccode\u003e001 - 366\u003c/code\u003e for the Gregorian calendar. \u003ccode\u003e001\u003c/code\u003e corresponds to the first day of the year. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027m\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u006d\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Month, formatted as two digits with leading zeros as necessary, i.e. \u003ccode\u003e01 - 13\u003c/code\u003e, where \"\u003ccode\u003e01\u003c/code\u003e\" is the first month of the year and (\"\u003ccode\u003e13\u003c/code\u003e\" is a special value required to support lunar calendars). \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027d\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0064\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Day of month, formatted as two digits with leading zeros as necessary, i.e. \u003ccode\u003e01 - 31\u003c/code\u003e, where \"\u003ccode\u003e01\u003c/code\u003e\" is the first day of the month. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027e\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0065\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Day of month, formatted as two digits, i.e. \u003ccode\u003e1 - 31\u003c/code\u003e where \"\u003ccode\u003e1\u003c/code\u003e\" is the first day of the month. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following conversion characters are used for formatting common date/time compositions. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  composites\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027R\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0052\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Time formatted for the 24-hour clock as \u003ccode\u003e\"%tH:%tM\"\u003c/code\u003e \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027T\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0054\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Time formatted for the 24-hour clock as \u003ccode\u003e\"%tH:%tM:%tS\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027r\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0072\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Time formatted for the 12-hour clock as \u003ccode\u003e\"%tI:%tM:%tS %Tp\"\u003c/code\u003e. The location of the morning or afternoon marker (\u003ccode\u003e\u0027%Tp\u0027\u003c/code\u003e) may be locale-dependent. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027D\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0044\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Date formatted as \u003ccode\u003e\"%tm/%td/%ty\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027F\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0046\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e \u003ca href\u003d\"http://www.w3.org/TR/NOTE-datetime\"\u003eISO\u0026nbsp;8601\u003c/a\u003e complete date formatted as \u003ccode\u003e\"%tY-%tm-%td\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027c\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd style\u003d\"vertical-align:top\"\u003e \u003ccode\u003e\u0027\\u0063\u0027\u003c/code\u003e \u003c/td\u003e\n   \u003ctd\u003e Date and time formatted as \u003ccode\u003e\"%ta %tb %td %tT %tZ %tY\"\u003c/code\u003e, e.g. \u003ccode\u003e\"Sun Jul 20 16:17:00 EDT 1969\"\u003c/code\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003e\u0027-\u0027\u003c/code\u003e flag defined for \u003ca href\u003d\"#dFlags\"\u003eGeneral conversions\u003c/a\u003e applies. If the \u003ccode\u003e\u0027#\u0027\u003c/code\u003e flag is given, then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\n\u003cp\u003e The width is the minimum number of characters to be written to the output. If the length of the converted value is less than the \u003ccode\u003ewidth\u003c/code\u003e then the output will be padded by spaces (\u003ccode\u003e\u0027\\u0020\u0027\u003c/code\u003e) until the total number of characters equals width. The padding is on the left by default. If the \u003ccode\u003e\u0027-\u0027\u003c/code\u003e flag is given then the padding will be on the right. If width is not specified then there is no minimum. \u003c/p\u003e\n\u003cp\u003e The precision is not applicable. If the precision is specified then an \u003ca href\u003d\"IllegalFormatPrecisionException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatPrecisionException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"dper\"\u003ePercent\u003c/a\u003e\u003c/h3\u003e \n\u003cp\u003e The conversion does not correspond to any argument. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  DTConv\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027%\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e The result is a literal \u003ccode\u003e\u0027%\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0025\u0027\u003c/code\u003e) \u003cp\u003e The width is the minimum number of characters to be written to the output including the \u003ccode\u003e\u0027%\u0027\u003c/code\u003e. If the length of the converted value is less than the \u003ccode\u003ewidth\u003c/code\u003e then the output will be padded by spaces (\u003ccode\u003e\u0027\\u0020\u0027\u003c/code\u003e) until the total number of characters equals width. The padding is on the left. If width is not specified then just the \u003ccode\u003e\u0027%\u0027\u003c/code\u003e is output. \u003c/p\u003e\u003cp\u003e The \u003ccode\u003e\u0027-\u0027\u003c/code\u003e flag defined for \u003ca href\u003d\"#dFlags\"\u003eGeneral conversions\u003c/a\u003e applies. If any other flags are provided, then a \u003ca href\u003d\"FormatFlagsConversionMismatchException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatFlagsConversionMismatchException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003cp\u003e The precision is not applicable. If the precision is specified an \u003ca href\u003d\"IllegalFormatPrecisionException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatPrecisionException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e\u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"dls\"\u003eLine Separator\u003c/a\u003e\u003c/h3\u003e \n\u003cp\u003e The conversion does not correspond to any argument. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  DTConv\n \u003c/caption\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003e\u0027n\u0027\u003c/code\u003e \u003c/th\u003e\n   \u003ctd\u003e the platform-specific line separator as returned by \u003ca href\u003d\"../lang/System.html#lineSeparator()\"\u003e\u003ccode\u003eSystem.lineSeparator()\u003c/code\u003e\u003c/a\u003e. \u003c/td\u003e\n  \u003c/tr\u003e\n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Flags, width, and precision are not applicable. If any are provided an \u003ca href\u003d\"IllegalFormatFlagsException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatFlagsException\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"IllegalFormatWidthException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatWidthException\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"IllegalFormatPrecisionException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eIllegalFormatPrecisionException\u003c/code\u003e\u003c/a\u003e, respectively will be thrown. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"dpos\"\u003eArgument Index\u003c/a\u003e\u003c/h3\u003e \n\u003cp\u003e Format specifiers can reference arguments in three ways: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e \u003ci\u003eExplicit indexing\u003c/i\u003e is used when the format specifier contains an argument index. The argument index is a decimal integer indicating the position of the argument in the argument list. The first argument is referenced by \"\u003ccode\u003e1$\u003c/code\u003e\", the second by \"\u003ccode\u003e2$\u003c/code\u003e\", etc. An argument may be referenced more than once. \u003cp\u003e For example: \u003c/p\u003e\n  \u003cblockquote\u003e\n   \u003cpre\u003e   formatter.format(\"%4$s %3$s %2$s %1$s %4$s %3$s %2$s %1$s\",\n                    \"a\", \"b\", \"c\", \"d\")\n   // -\u0026gt; \"d c b a d c b a\"\n \u003c/pre\u003e\n  \u003c/blockquote\u003e \u003c/li\u003e\n \u003cli\u003e \u003ci\u003eRelative indexing\u003c/i\u003e is used when the format specifier contains a \u003ccode\u003e\u0027\u0026lt;\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u003c\u0027\u003c/code\u003e) flag which causes the argument for the previous format specifier to be re-used. If there is no previous argument, then a \u003ca href\u003d\"MissingFormatArgumentException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eMissingFormatArgumentException\u003c/code\u003e\u003c/a\u003e is thrown. \n  \u003cblockquote\u003e\n   \u003cpre\u003e    formatter.format(\"%s %s %\u0026lt;s %\u0026lt;s\", \"a\", \"b\", \"c\", \"d\")\n    // -\u0026gt; \"a b b b\"\n    // \"c\" and \"d\" are ignored because they are not referenced\n \u003c/pre\u003e\n  \u003c/blockquote\u003e \u003c/li\u003e\n \u003cli\u003e \u003ci\u003eOrdinary indexing\u003c/i\u003e is used when the format specifier contains neither an argument index nor a \u003ccode\u003e\u0027\u0026lt;\u0027\u003c/code\u003e flag. Each format specifier which uses ordinary indexing is assigned a sequential implicit index into argument list which is independent of the indices used by explicit or relative indexing. \n  \u003cblockquote\u003e\n   \u003cpre\u003e   formatter.format(\"%s %s %s %s\", \"a\", \"b\", \"c\", \"d\")\n   // -\u0026gt; \"a b c d\"\n \u003c/pre\u003e\n  \u003c/blockquote\u003e \u003c/li\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e It is possible to have a format string which uses all forms of indexing, for example: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e   formatter.format(\"%2$s %s %\u0026lt;s %s\", \"a\", \"b\", \"c\", \"d\")\n   // -\u0026gt; \"b a a b\"\n   // \"c\" and \"d\" are ignored because they are not referenced\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e. If the argument index does not correspond to an available argument, then a \u003ca href\u003d\"MissingFormatArgumentException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eMissingFormatArgumentException\u003c/code\u003e\u003c/a\u003e is thrown. \u003c/p\u003e\n\u003cp\u003e If there are more arguments than format specifiers, the extra arguments are ignored. \u003c/p\u003e\n\u003cp\u003e Unless otherwise specified, passing a \u003ccode\u003enull\u003c/code\u003e argument to any method or constructor in this class will cause a \u003ca href\u003d\"../lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}