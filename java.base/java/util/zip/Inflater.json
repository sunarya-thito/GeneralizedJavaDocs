{
  "packageName": "java.util.zip",
  "simpleName": "Inflater",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "input",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "off",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "len",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInput",
      "comment": "Sets input data for decompression. One of the setInput() methods should be called whenever needsInput() returns true indicating that more input data is required.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsInput()\"\u003e\u003ccode\u003eneedsInput()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - the input data bytes",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset of the input data",
          "\u003ccode\u003elen\u003c/code\u003e - the length of the input data"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "input",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInput",
      "comment": "Sets input data for decompression. One of the setInput() methods should be called whenever needsInput() returns true indicating that more input data is required.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsInput()\"\u003e\u003ccode\u003eneedsInput()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - the input data bytes"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "name": "input",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInput",
      "comment": "Sets input data for decompression. One of the setInput() methods should be called whenever needsInput() returns true indicating that more input data is required. The given buffer\u0027s position will be advanced as inflate operations are performed, up to the buffer\u0027s limit. The input buffer may be modified (refilled) between inflate operations; doing so is equivalent to creating a new buffer and setting it with this method. Modifying the input buffer\u0027s contents, position, or limit concurrently with an inflate operation will result in undefined behavior, which may include incorrect operation results or operation failure.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsInput()\"\u003e\u003ccode\u003eneedsInput()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - the input data bytes"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "dictionary",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "off",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "len",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDictionary",
      "comment": "Sets the preset dictionary to the given array of bytes. Should be called when inflate() returns 0 and needsDictionary() returns true indicating that a preset dictionary is required. The method getAdler() can be used to get the Adler-32 value of the dictionary needed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsDictionary()\"\u003e\u003ccode\u003eneedsDictionary()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#getAdler()\"\u003e\u003ccode\u003egetAdler()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edictionary\u003c/code\u003e - the dictionary data bytes",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset of the data",
          "\u003ccode\u003elen\u003c/code\u003e - the length of the data"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "dictionary",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDictionary",
      "comment": "Sets the preset dictionary to the given array of bytes. Should be called when inflate() returns 0 and needsDictionary() returns true indicating that a preset dictionary is required. The method getAdler() can be used to get the Adler-32 value of the dictionary needed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsDictionary()\"\u003e\u003ccode\u003eneedsDictionary()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#getAdler()\"\u003e\u003ccode\u003egetAdler()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edictionary\u003c/code\u003e - the dictionary data bytes"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "name": "dictionary",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDictionary",
      "comment": "Sets the preset dictionary to the bytes in the given buffer. Should be called when inflate() returns 0 and needsDictionary() returns true indicating that a preset dictionary is required. The method getAdler() can be used to get the Adler-32 value of the dictionary needed. The bytes in given byte buffer will be fully consumed by this method. On return, its position will equal its limit.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsDictionary()\"\u003e\u003ccode\u003eneedsDictionary()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#getAdler()\"\u003e\u003ccode\u003egetAdler()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edictionary\u003c/code\u003e - the dictionary data bytes"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getRemaining",
      "comment": "Returns the total number of bytes remaining in the input buffer. This can be used to find out what bytes still remain in the input buffer after decompression has finished.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the total number of bytes remaining in the input buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "needsInput",
      "comment": "Returns true if no data remains in the input buffer. This can be used to determine if one of the setInput() methods should be called in order to provide more input.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if no data remains in the input buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "needsDictionary",
      "comment": "Returns true if a preset dictionary is needed for decompression.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#setDictionary(byte%5B%5D,int,int)\"\u003e\u003ccode\u003esetDictionary(byte[], int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "true if a preset dictionary is needed for decompression"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "finished",
      "comment": "Returns true if the end of the compressed data stream has been reached.",
      "annotations": [],
      "tagMap": {
        "return": [
          "true if the end of the compressed data stream has been reached"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.util.zip.DataFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "output",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "off",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "len",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "inflate",
      "comment": "Uncompresses bytes into specified buffer. Returns actual number of bytes uncompressed. A return value of 0 indicates that needsInput() or needsDictionary() should be called in order to determine if more input data or a preset dictionary is required. In the latter case, getAdler() can be used to get the Adler-32 value of the dictionary required. If the setInput(ByteBuffer) method was called to provide a buffer for input, the input buffer\u0027s position will be advanced by the number of bytes consumed by this operation, even in the event that a DataFormatException is thrown. The remaining byte count will be reduced by the number of consumed input bytes. If the setInput(ByteBuffer) method was called to provide a buffer for input, the input buffer\u0027s position will be advanced the number of consumed bytes. These byte totals, as well as the total bytes read and the total bytes written values, will be updated even in the event that a DataFormatException is thrown to reflect the amount of data consumed and produced before the exception occurred.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsInput()\"\u003e\u003ccode\u003eneedsInput()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsDictionary()\"\u003e\u003ccode\u003eneedsDictionary()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eoutput\u003c/code\u003e - the buffer for the uncompressed data",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset of the data",
          "\u003ccode\u003elen\u003c/code\u003e - the maximum number of uncompressed bytes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/DataFormatException.html\" title\u003d\"class in java.util.zip\"\u003eDataFormatException\u003c/a\u003e\u003c/code\u003e - if the compressed data format is invalid"
        ],
        "return": [
          "the actual number of uncompressed bytes"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.util.zip.DataFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "output",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "inflate",
      "comment": "Uncompresses bytes into specified buffer. Returns actual number of bytes uncompressed. A return value of 0 indicates that needsInput() or needsDictionary() should be called in order to determine if more input data or a preset dictionary is required. In the latter case, getAdler() can be used to get the Adler-32 value of the dictionary required. The remaining byte count will be reduced by the number of consumed input bytes. If the setInput(ByteBuffer) method was called to provide a buffer for input, the input buffer\u0027s position will be advanced the number of consumed bytes. These byte totals, as well as the total bytes read and the total bytes written values, will be updated even in the event that a DataFormatException is thrown to reflect the amount of data consumed and produced before the exception occurred.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsInput()\"\u003e\u003ccode\u003eneedsInput()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsDictionary()\"\u003e\u003ccode\u003eneedsDictionary()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eoutput\u003c/code\u003e - the buffer for the uncompressed data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/DataFormatException.html\" title\u003d\"class in java.util.zip\"\u003eDataFormatException\u003c/a\u003e\u003c/code\u003e - if the compressed data format is invalid"
        ],
        "return": [
          "the actual number of uncompressed bytes"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.util.zip.DataFormatException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "name": "output",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "inflate",
      "comment": "Uncompresses bytes into specified buffer. Returns actual number of bytes uncompressed. A return value of 0 indicates that needsInput() or needsDictionary() should be called in order to determine if more input data or a preset dictionary is required. In the latter case, getAdler() can be used to get the Adler-32 value of the dictionary required. On success, the position of the given output byte buffer will be advanced by as many bytes as were produced by the operation, which is equal to the number returned by this method. Note that the position of the output buffer will be advanced even in the event that a DataFormatException is thrown. The remaining byte count will be reduced by the number of consumed input bytes. If the setInput(ByteBuffer) method was called to provide a buffer for input, the input buffer\u0027s position will be advanced the number of consumed bytes. These byte totals, as well as the total bytes read and the total bytes written values, will be updated even in the event that a DataFormatException is thrown to reflect the amount of data consumed and produced before the exception occurred.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsInput()\"\u003e\u003ccode\u003eneedsInput()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#needsDictionary()\"\u003e\u003ccode\u003eneedsDictionary()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eoutput\u003c/code\u003e - the buffer for the uncompressed data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/DataFormatException.html\" title\u003d\"class in java.util.zip\"\u003eDataFormatException\u003c/a\u003e\u003c/code\u003e - if the compressed data format is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - if the given output buffer is read-only"
        ],
        "return": [
          "the actual number of uncompressed bytes"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAdler",
      "comment": "Returns the ADLER-32 value of the uncompressed data.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the ADLER-32 value of the uncompressed data"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTotalIn",
      "comment": "Returns the total number of compressed bytes input so far. Since the number of bytes may be greater than Integer.MAX_VALUE, the getBytesRead() method is now the preferred means of obtaining this information.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the total number of compressed bytes input so far"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBytesRead",
      "comment": "Returns the total number of compressed bytes input so far.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the total (non-negative) number of compressed bytes input so far"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTotalOut",
      "comment": "Returns the total number of uncompressed bytes output so far. Since the number of bytes may be greater than Integer.MAX_VALUE, the getBytesWritten() method is now the preferred means of obtaining this information.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the total number of uncompressed bytes output so far"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBytesWritten",
      "comment": "Returns the total number of uncompressed bytes output so far.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the total (non-negative) number of uncompressed bytes output so far"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reset",
      "comment": "Resets inflater so that a new set of input data can be processed.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "end",
      "comment": "Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used. Once this method is called, the behavior of the Inflater object is undefined.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "nowrap",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new decompressor. If the parameter \u0027nowrap\u0027 is true then the ZLIB header and checksum fields will not be used. This provides compatibility with the compression format used by both GZIP and PKZIP. Note: When using the \u0027nowrap\u0027 option it is also necessary to provide an extra \"dummy\" byte as input. This is required by the ZLIB native library in order to support certain optimizations.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enowrap\u003c/code\u003e - if true then support GZIP compatible compression"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new decompressor.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.zip.Inflater",
  "comment": "This class provides support for general purpose decompression using the popular ZLIB compression library. The ZLIB compression library was initially developed as part of the PNG graphics standard and is not protected by patents. It is fully described in the specifications at the \n\u003ca href\u003d\"package-summary.html#package.description\"\u003ejava.util.zip package description\u003c/a\u003e. \n\u003cp\u003e This class inflates sequences of ZLIB compressed bytes. The input byte sequence is provided in either byte array or byte buffer, via one of the \u003ccode\u003esetInput()\u003c/code\u003e methods. The output byte sequence is written to the output byte array or byte buffer passed to the \u003ccode\u003edeflate()\u003c/code\u003e methods. \u003c/p\u003e\n\u003cp\u003e The following code fragment demonstrates a trivial compression and decompression of a string using \u003ccode\u003eDeflater\u003c/code\u003e and \u003ccode\u003eInflater\u003c/code\u003e. \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e try {\n     // Encode a String into bytes\n     String inputString \u003d \"blahblahblah€€\";\n     byte[] input \u003d inputString.getBytes(\"UTF-8\");\n\n     // Compress the bytes\n     byte[] output \u003d new byte[100];\n     Deflater compresser \u003d new Deflater();\n     compresser.setInput(input);\n     compresser.finish();\n     int compressedDataLength \u003d compresser.deflate(output);\n\n     // Decompress the bytes\n     Inflater decompresser \u003d new Inflater();\n     decompresser.setInput(output, 0, compressedDataLength);\n     byte[] result \u003d new byte[100];\n     int resultLength \u003d decompresser.inflate(result);\n     decompresser.end();\n\n     // Decode the bytes into a String\n     String outputString \u003d new String(result, 0, resultLength, \"UTF-8\");\n } catch (java.io.UnsupportedEncodingException ex) {\n     // handle\n } catch (java.util.zip.DataFormatException ex) {\n     // handle\n }\n \u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Deflater.html\" title\u003d\"class in java.util.zip\"\u003e\u003ccode\u003eDeflater\u003c/code\u003e\u003c/a\u003e"
    ],
    "apiNote": [
      "To release resources used by this \n\u003ccode\u003eInflater\u003c/code\u003e, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/Inflater.html#end()\"\u003e\u003ccode\u003eend()\u003c/code\u003e\u003c/a\u003e method should be called explicitly. Subclasses are responsible for the cleanup of resources acquired by the subclass. Subclasses that override \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#finalize()\"\u003e\u003ccode\u003eObject.finalize()\u003c/code\u003e\u003c/a\u003e in order to perform cleanup should be modified to use alternative cleanup mechanisms such as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ref/Cleaner.html\" title\u003d\"class in java.lang.ref\"\u003e\u003ccode\u003eCleaner\u003c/code\u003e\u003c/a\u003e and remove the overriding \n\u003ccode\u003efinalize\u003c/code\u003e method."
    ],
    "since": [
      "1.1"
    ]
  }
}