{
  "packageName": "java.util",
  "simpleName": "Provider",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.function.Supplier",
    "parameters": [
      {
        "name": "S",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.Class",
        "parameters": [
          {
            "upperBounds": [
              {
                "owner": "java.util.ServiceLoader$Provider",
                "name": "S",
                "type": "Variable"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "type",
      "comment": "Returns the provider type. There is no guarantee that this type is accessible or that it has a public no-args constructor. The get() method should be used to obtain the provider instance. When a module declares that the provider class is created by a provider factory then this method returns the return type of its public static \"provider()\" method.",
      "tagMap": {
        "return": [
          "The provider type"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.ServiceLoader$Provider",
        "name": "S",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Returns an instance of the provider.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/Supplier.html#get()\"\u003eget\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/Supplier.html\" title\u003d\"interface in java.util.function\"\u003eSupplier\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceLoader.Provider.html\" title\u003d\"type parameter in ServiceLoader.Provider\"\u003eS\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceConfigurationError.html\" title\u003d\"class in java.util\"\u003eServiceConfigurationError\u003c/a\u003e\u003c/code\u003e - If the service provider cannot be instantiated, or in the case of a provider factory, the public static \"\n\u003ccode\u003eprovider()\u003c/code\u003e\" method returns \n\u003ccode\u003enull\u003c/code\u003e or throws an error or exception. The \n\u003ccode\u003eServiceConfigurationError\u003c/code\u003e will carry an appropriate cause where possible."
        ],
        "return": [
          "An instance of the provider."
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "S",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 521,
  "name": "java.util.ServiceLoader$Provider",
  "comment": "Represents a service provider located by \n\u003ccode\u003eServiceLoader\u003c/code\u003e. \n\u003cp\u003e When using a loader\u0027s \u003ca href\u003d\"ServiceLoader.html#stream()\"\u003e\u003ccode\u003estream()\u003c/code\u003e\u003c/a\u003e method then the elements are of type \u003ccode\u003eProvider\u003c/code\u003e. This allows processing to select or filter on the provider class without instantiating the provider. \u003c/p\u003e",
  "tagMap": {
    "since": [
      "9"
    ]
  }
}