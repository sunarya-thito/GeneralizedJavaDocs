{
  "packageName": "java.util",
  "simpleName": "List",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.Collection",
    "parameters": [
      {
        "name": "E",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "size",
      "comment": "Returns the number of elements in this list. If this list contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#size()\"\u003esize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the number of elements in this list"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEmpty",
      "comment": "Returns true if this list contains no elements.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#isEmpty()\"\u003eisEmpty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this list contains no elements"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "contains",
      "comment": "Returns true if this list contains the specified element. More formally, returns true if and only if this list contains at least one element e such that Objects.equals(o, e).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#contains(java.lang.Object)\"\u003econtains\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - element whose presence in this list is to be tested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the type of the specified element is incompatible with this list (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this list contains the specified element"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "owner": "java.util.List",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "iterator",
      "comment": "Returns an iterator over the elements in this list in proper sequence.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#iterator()\"\u003eiterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html#iterator()\"\u003eiterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html\" title\u003d\"interface in java.lang\"\u003eIterable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "an iterator over the elements in this list in proper sequence"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toArray",
      "comment": "Returns an array containing all of the elements in this list in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this list. (In other words, this method must allocate a new array even if this list is backed by an array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#asList(T...)\"\u003e\u003ccode\u003eArrays.asList(Object[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#toArray()\"\u003etoArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "an array containing all of the elements in this list in proper sequence"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "a",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toArray",
      "comment": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the list fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list. If the list fits in the specified array with room to spare (i.e., the array has more elements than the list), the element in the array immediately following the end of the list is set to null. (This is useful in determining the length of the list only if the caller knows that the list does not contain any null elements.) Like the toArray() method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a list known to contain only strings. The following code can be used to dump the list into a newly allocated array of String: \n     String[] y \u003d x.toArray(new String[0]);\n Note that toArray(new Object[0]) is identical in function to toArray().",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the component type of the array to contain the collection"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#toArray(T%5B%5D)\"\u003etoArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the array into which the elements of this list are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayStoreException.html\" title\u003d\"class in java.lang\"\u003eArrayStoreException\u003c/a\u003e\u003c/code\u003e - if the runtime type of the specified array is not a supertype of the runtime type of every element in this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified array is null"
        ],
        "return": [
          "an array containing the elements of this list"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.List",
            "name": "E",
            "type": "Variable"
          },
          "name": "e",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "add",
      "comment": "Appends the specified element to the end of this list (optional operation). Lists that support this operation may place limitations on what elements may be added to this list. In particular, some lists will refuse to add null elements, and others will impose restrictions on the type of elements that may be added. List classes should clearly specify in their documentation any restrictions on what elements may be added.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#add(E)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - element to be appended to this list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eadd\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of this element prevents it from being added to this list"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e (as specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#add(E)\"\u003e\u003ccode\u003eCollection.add(E)\u003c/code\u003e\u003c/a\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Removes the first occurrence of the specified element from this list, if it is present (optional operation). If this list does not contain the element, it is unchanged. More formally, removes the element with the lowest index i such that Objects.equals(o, get(i)) (if such an element exists). Returns true if this list contained the specified element (or equivalently, if this list changed as a result of the call).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#remove(java.lang.Object)\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - element to be removed from this list, if present"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the type of the specified element is incompatible with this list (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eremove\u003c/code\u003e operation is not supported by this list"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this list contained the specified element"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "containsAll",
      "comment": "Returns true if this list contains all of the elements of the specified collection.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#contains(java.lang.Object)\"\u003e\u003ccode\u003econtains(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#containsAll(java.util.Collection)\"\u003econtainsAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - collection to be checked for containment in this list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the types of one or more elements in the specified collection are incompatible with this list (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified collection contains one or more null elements and this list does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e), or if the specified collection is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this list contains all of the elements of the specified collection"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.List",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addAll",
      "comment": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection\u0027s iterator (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it\u0027s nonempty.)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#add(E)\"\u003e\u003ccode\u003eadd(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#addAll(java.util.Collection)\"\u003eaddAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - collection containing elements to be added to this list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eaddAll\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of an element of the specified collection prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of an element of the specified collection prevents it from being added to this list"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this list changed as a result of the call"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.List",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addAll",
      "comment": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection\u0027s iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it\u0027s nonempty.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - index at which to insert the first element from the specified collection",
          "\u003ccode\u003ec\u003c/code\u003e - collection containing elements to be added to this list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eaddAll\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of an element of the specified collection prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of an element of the specified collection prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this list changed as a result of the call"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeAll",
      "comment": "Removes from this list all of its elements that are contained in the specified collection (optional operation).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#remove(java.lang.Object)\"\u003e\u003ccode\u003eremove(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#contains(java.lang.Object)\"\u003e\u003ccode\u003econtains(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#removeAll(java.util.Collection)\"\u003eremoveAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - collection containing elements to be removed from this list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eremoveAll\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of an element of this list is incompatible with the specified collection (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if this list contains a null element and the specified collection does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e), or if the specified collection is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this list changed as a result of the call"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "retainAll",
      "comment": "Retains only the elements in this list that are contained in the specified collection (optional operation). In other words, removes from this list all of its elements that are not contained in the specified collection.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#remove(java.lang.Object)\"\u003e\u003ccode\u003eremove(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#contains(java.lang.Object)\"\u003e\u003ccode\u003econtains(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#retainAll(java.util.Collection)\"\u003eretainAll\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - collection containing elements to be retained in this list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eretainAll\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of an element of this list is incompatible with the specified collection (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if this list contains a null element and the specified collection does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e), or if the specified collection is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this list changed as a result of the call"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.UnaryOperator",
            "parameters": [
              {
                "owner": "java.util.List",
                "name": "E",
                "type": "Variable"
              }
            ],
            "type": "Class"
          },
          "name": "operator",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "replaceAll",
      "comment": "Replaces each element of this list with the result of applying the operator to that element. Errors or runtime exceptions thrown by the operator are relayed to the caller.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation is equivalent to, for this \n\u003ccode\u003elist\u003c/code\u003e: \n\u003cpre\u003e\u003ccode\u003e\n     final ListIterator\u0026lt;E\u0026gt; li \u003d list.listIterator();\n     while (li.hasNext()) {\n         li.set(operator.apply(li.next()));\n     }\n \u003c/code\u003e\u003c/pre\u003e If the list\u0027s list-iterator does not support the \n\u003ccode\u003eset\u003c/code\u003e operation then an \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e will be thrown when replacing the first element."
        ],
        "param": [
          "\u003ccode\u003eoperator\u003c/code\u003e - the operator to apply to each element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this list is unmodifiable. Implementations may throw this exception if an element cannot be replaced or if, in general, modification is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified operator is null or if the operator result is a null value and this list does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Comparator",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.List",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "sort",
      "comment": "Sorts this list according to the order induced by the specified Comparator. The sort is stable: this method must not reorder equal elements. All elements in this list must be mutually comparable using the specified comparator (that is, c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list). If the specified comparator is null then all elements in this list must implement the Comparable interface and the elements\u0027 natural ordering should be used. This list must be modifiable, but need not be resizable.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation obtains an array containing all elements in this list, sorts the array, and iterates over this list resetting each element from the corresponding position in the array. (This avoids the n\n\u003csup\u003e2\u003c/sup\u003e log(n) performance that would result from attempting to sort a linked list in place.)"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the \n\u003ccode\u003eComparator\u003c/code\u003e used to compare list elements. A \n\u003ccode\u003enull\u003c/code\u003e value indicates that the elements\u0027 \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003enatural ordering\u003c/a\u003e should be used"
        ],
        "implNote": [
          "This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays. \n\u003cp\u003eThe implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array. \u003c/p\u003e\n\u003cp\u003eThe implementation was adapted from Tim Peters\u0027s list sort for Python (\u003ca href\u003d\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\"\u003e TimSort\u003c/a\u003e). It uses techniques from Peter McIlroy\u0027s \"Optimistic Sorting and Information Theoretic Complexity\", in Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, January 1993.\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the list contains elements that are not \n\u003ci\u003emutually comparable\u003c/i\u003e using the specified comparator",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the list\u0027s list-iterator does not support the \n\u003ccode\u003eset\u003c/code\u003e operation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e) if the comparator is found to violate the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eComparator\u003c/code\u003e\u003c/a\u003e contract"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clear",
      "comment": "Removes all of the elements from this list (optional operation). The list will be empty after this call returns.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#clear()\"\u003eclear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eclear\u003c/code\u003e operation is not supported by this list"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Compares the specified object with this list for equality. Returns true if and only if the specified object is also a list, both lists have the same size, and all corresponding pairs of elements in the two lists are equal. (Two elements e1 and e2 are equal if Objects.equals(e1, e2).) In other words, two lists are defined to be equal if they contain the same elements in the same order. This definition ensures that the equals method works properly across different implementations of the List interface.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - the object to be compared for equality with this list"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified object is equal to this list"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hashCode",
      "comment": "Returns the hash code value for this list. The hash code of a list is defined to be the result of the following calculation: \n     int hashCode \u003d 1;\n     for (E e : list)\n         hashCode \u003d 31*hashCode + (e\u003d\u003dnull ? 0 : e.hashCode());\n This ensures that list1.equals(list2) implies that list1.hashCode()\u003d\u003dlist2.hashCode() for any two lists, list1 and list2, as required by the general contract of Object.hashCode().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the hash code value for this list"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.List",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "get",
      "comment": "Returns the element at the specified position in this list.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - index of the element to return"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e)"
        ],
        "return": [
          "the element at the specified position in this list"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.List",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.List",
            "name": "E",
            "type": "Variable"
          },
          "name": "element",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "set",
      "comment": "Replaces the element at the specified position in this list with the specified element (optional operation).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - index of the element to replace",
          "\u003ccode\u003eelement\u003c/code\u003e - element to be stored at the specified position"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eset\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e)"
        ],
        "return": [
          "the element previously at the specified position"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "owner": "java.util.List",
            "name": "E",
            "type": "Variable"
          },
          "name": "element",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "add",
      "comment": "Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - index at which the specified element is to be inserted",
          "\u003ccode\u003eelement\u003c/code\u003e - element to be inserted"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eadd\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.List",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Removes the element at the specified position in this list (optional operation). Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index of the element to be removed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eremove\u003c/code\u003e operation is not supported by this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt;\u003d size()\u003c/code\u003e)"
        ],
        "return": [
          "the element previously at the specified position"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "indexOf",
      "comment": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the lowest index i such that Objects.equals(o, get(i)), or -1 if there is no such index.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - element to search for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the type of the specified element is incompatible with this list (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lastIndexOf",
      "comment": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the highest index i such that Objects.equals(o, get(i)), or -1 if there is no such index.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - element to search for"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the type of the specified element is incompatible with this list (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this list does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ListIterator",
        "parameters": [
          {
            "owner": "java.util.List",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "listIterator",
      "comment": "Returns a list iterator over the elements in this list (in proper sequence).",
      "annotations": [],
      "tagMap": {
        "return": [
          "a list iterator over the elements in this list (in proper sequence)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ListIterator",
        "parameters": [
          {
            "owner": "java.util.List",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "listIterator",
      "comment": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. The specified index indicates the first element that would be returned by an initial call to next. An initial call to previous would return the element with the specified index minus one.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - index of the first element to be returned from the list iterator (by a call to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ListIterator.html#next()\"\u003e\u003ccode\u003enext\u003c/code\u003e\u003c/a\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the index is out of range (\n\u003ccode\u003eindex \u0026lt; 0 || index \u0026gt; size()\u003c/code\u003e)"
        ],
        "return": [
          "a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "owner": "java.util.List",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "fromIndex",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "toIndex",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subList",
      "comment": "Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive. (If fromIndex and toIndex are equal, the returned list is empty.) The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations supported by this list. This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list: \n      list.subList(from, to).clear();\n Similar idioms may be constructed for indexOf and lastIndexOf, and all of the algorithms in the Collections class can be applied to a subList. The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is structurally modified in any way other than via the returned list. (Structural modifications are those that change the size of this list, or otherwise perturb it in such a fashion that iterations in progress may yield incorrect results.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efromIndex\u003c/code\u003e - low endpoint (inclusive) of the subList",
          "\u003ccode\u003etoIndex\u003c/code\u003e - high endpoint (exclusive) of the subList"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - for an illegal endpoint index value (\n\u003ccode\u003efromIndex \u0026lt; 0 || toIndex \u0026gt; size || fromIndex \u0026gt; toIndex\u003c/code\u003e)"
        ],
        "return": [
          "a view of the specified range within this list"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator",
        "parameters": [
          {
            "owner": "java.util.List",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spliterator",
      "comment": "Creates a Spliterator over the elements in this list. The Spliterator reports Spliterator.SIZED and Spliterator.ORDERED. Implementations should document the reporting of additional characteristic values.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation creates a \n\u003cem\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e spliterator as follows: \n\u003cul\u003e \n \u003cli\u003eIf the list is an instance of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/RandomAccess.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eRandomAccess\u003c/code\u003e\u003c/a\u003e then the default implementation creates a spliterator that traverses elements by invoking the method \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#get(int)\"\u003e\u003ccode\u003eget(int)\u003c/code\u003e\u003c/a\u003e. If such invocation results or would result in an \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e then the spliterator will \u003cem\u003efail-fast\u003c/em\u003e and throw a \u003ccode\u003eConcurrentModificationException\u003c/code\u003e. If the list is also an instance of \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eAbstractList\u003c/code\u003e\u003c/a\u003e then the spliterator will use the list\u0027s \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html#modCount\"\u003e\u003ccode\u003emodCount\u003c/code\u003e\u003c/a\u003e field to provide additional \u003cem\u003efail-fast\u003c/em\u003e behavior. \u003c/li\u003e\n \u003cli\u003eOtherwise, the default implementation creates a spliterator from the list\u0027s \u003ccode\u003eIterator\u003c/code\u003e. The spliterator inherits the \u003cem\u003efail-fast\u003c/em\u003e of the list\u0027s iterator. \u003c/li\u003e\n\u003c/ul\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#spliterator()\"\u003espliterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html#spliterator()\"\u003espliterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html\" title\u003d\"interface in java.lang\"\u003eIterable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"type parameter in List\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "implNote": [
          "The created \n\u003ccode\u003eSpliterator\u003c/code\u003e additionally reports \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#SUBSIZED\"\u003e\u003ccode\u003eSpliterator.SUBSIZED\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eSpliterator\u003c/code\u003e over the elements in this list"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing zero elements. See Unmodifiable Lists for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "return": [
          "an empty \n\u003ccode\u003eList\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e1",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing one element. See Unmodifiable Lists for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "param": [
          "\u003ccode\u003ee1\u003c/code\u003e - the single element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the element is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the specified element"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e2",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing two elements. See Unmodifiable Lists for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "param": [
          "\u003ccode\u003ee1\u003c/code\u003e - the first element",
          "\u003ccode\u003ee2\u003c/code\u003e - the second element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the specified elements"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e3",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing three elements. See Unmodifiable Lists for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "param": [
          "\u003ccode\u003ee1\u003c/code\u003e - the first element",
          "\u003ccode\u003ee2\u003c/code\u003e - the second element",
          "\u003ccode\u003ee3\u003c/code\u003e - the third element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the specified elements"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e4",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing four elements. See Unmodifiable Lists for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "param": [
          "\u003ccode\u003ee1\u003c/code\u003e - the first element",
          "\u003ccode\u003ee2\u003c/code\u003e - the second element",
          "\u003ccode\u003ee3\u003c/code\u003e - the third element",
          "\u003ccode\u003ee4\u003c/code\u003e - the fourth element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the specified elements"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e5",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing five elements. See Unmodifiable Lists for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "param": [
          "\u003ccode\u003ee1\u003c/code\u003e - the first element",
          "\u003ccode\u003ee2\u003c/code\u003e - the second element",
          "\u003ccode\u003ee3\u003c/code\u003e - the third element",
          "\u003ccode\u003ee4\u003c/code\u003e - the fourth element",
          "\u003ccode\u003ee5\u003c/code\u003e - the fifth element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the specified elements"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e6",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing six elements. See Unmodifiable Lists for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "param": [
          "\u003ccode\u003ee1\u003c/code\u003e - the first element",
          "\u003ccode\u003ee2\u003c/code\u003e - the second element",
          "\u003ccode\u003ee3\u003c/code\u003e - the third element",
          "\u003ccode\u003ee4\u003c/code\u003e - the fourth element",
          "\u003ccode\u003ee5\u003c/code\u003e - the fifth element",
          "\u003ccode\u003ee6\u003c/code\u003e - the sixth element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the specified elements"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e7",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing seven elements. See Unmodifiable Lists for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "param": [
          "\u003ccode\u003ee1\u003c/code\u003e - the first element",
          "\u003ccode\u003ee2\u003c/code\u003e - the second element",
          "\u003ccode\u003ee3\u003c/code\u003e - the third element",
          "\u003ccode\u003ee4\u003c/code\u003e - the fourth element",
          "\u003ccode\u003ee5\u003c/code\u003e - the fifth element",
          "\u003ccode\u003ee6\u003c/code\u003e - the sixth element",
          "\u003ccode\u003ee7\u003c/code\u003e - the seventh element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the specified elements"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e7",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e8",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing eight elements. See Unmodifiable Lists for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "param": [
          "\u003ccode\u003ee1\u003c/code\u003e - the first element",
          "\u003ccode\u003ee2\u003c/code\u003e - the second element",
          "\u003ccode\u003ee3\u003c/code\u003e - the third element",
          "\u003ccode\u003ee4\u003c/code\u003e - the fourth element",
          "\u003ccode\u003ee5\u003c/code\u003e - the fifth element",
          "\u003ccode\u003ee6\u003c/code\u003e - the sixth element",
          "\u003ccode\u003ee7\u003c/code\u003e - the seventh element",
          "\u003ccode\u003ee8\u003c/code\u003e - the eighth element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the specified elements"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e7",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e8",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e9",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing nine elements. See Unmodifiable Lists for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "param": [
          "\u003ccode\u003ee1\u003c/code\u003e - the first element",
          "\u003ccode\u003ee2\u003c/code\u003e - the second element",
          "\u003ccode\u003ee3\u003c/code\u003e - the third element",
          "\u003ccode\u003ee4\u003c/code\u003e - the fourth element",
          "\u003ccode\u003ee5\u003c/code\u003e - the fifth element",
          "\u003ccode\u003ee6\u003c/code\u003e - the sixth element",
          "\u003ccode\u003ee7\u003c/code\u003e - the seventh element",
          "\u003ccode\u003ee8\u003c/code\u003e - the eighth element",
          "\u003ccode\u003ee9\u003c/code\u003e - the ninth element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the specified elements"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e1",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e2",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e3",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e4",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e5",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e6",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e7",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e8",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e9",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "e10",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing ten elements. See Unmodifiable Lists for details.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "param": [
          "\u003ccode\u003ee1\u003c/code\u003e - the first element",
          "\u003ccode\u003ee2\u003c/code\u003e - the second element",
          "\u003ccode\u003ee3\u003c/code\u003e - the third element",
          "\u003ccode\u003ee4\u003c/code\u003e - the fourth element",
          "\u003ccode\u003ee5\u003c/code\u003e - the fifth element",
          "\u003ccode\u003ee6\u003c/code\u003e - the sixth element",
          "\u003ccode\u003ee7\u003c/code\u003e - the seventh element",
          "\u003ccode\u003ee8\u003c/code\u003e - the eighth element",
          "\u003ccode\u003ee9\u003c/code\u003e - the ninth element",
          "\u003ccode\u003ee10\u003c/code\u003e - the tenth element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the specified elements"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "E",
            "type": "Class"
          },
          "name": "elements",
          "varargs": true
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns an unmodifiable list containing an arbitrary number of elements. See Unmodifiable Lists for details.",
      "annotations": [
        {
          "type": {
            "name": "SafeVarargs",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "apiNote": [
          "This method also accepts a single array as an argument. The element type of the resulting list will be the component type of the array, and the size of the list will be equal to the length of the array. To create a list with a single element that is an array, do the following: \n\u003cpre\u003e\u003ccode\u003e\n     String[] array \u003d ... ;\n     List\u0026lt;String[]\u0026gt; list \u003d List.\u0026lt;String[]\u0026gt;of(array);\n \u003c/code\u003e\u003c/pre\u003e This will cause the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#of(E)\"\u003e\u003ccode\u003eList.of(E)\u003c/code\u003e\u003c/a\u003e method to be invoked instead."
        ],
        "param": [
          "\u003ccode\u003eelements\u003c/code\u003e - the elements to be contained in the list"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an element is \n\u003ccode\u003enull\u003c/code\u003e or if the array is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the specified elements"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "E",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "E",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "coll",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "E",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "copyOf",
      "comment": "Returns an unmodifiable List containing the elements of the given Collection, in its iteration order. The given Collection must not be null, and it must not contain any null elements. If the given Collection is subsequently modified, the returned List will not reflect such modifications.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eE\u003c/code\u003e - the \n\u003ccode\u003eList\u003c/code\u003e\u0027s element type"
        ],
        "param": [
          "\u003ccode\u003ecoll\u003c/code\u003e - a \n\u003ccode\u003eCollection\u003c/code\u003e from which elements are drawn, must be non-null"
        ],
        "implNote": [
          "If the given Collection is an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#unmodifiable\"\u003eunmodifiable List\u003c/a\u003e, calling copyOf will generally not create a copy."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if coll is null, or if it contains any nulls"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e containing the elements of the given \n\u003ccode\u003eCollection\u003c/code\u003e"
        ],
        "since": [
          "10"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.List",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ArrayList.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedList.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLinkedList\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Vector.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#asList(T...)\"\u003e\u003ccode\u003eArrays.asList(Object[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collections.html#nCopies(int,T)\"\u003e\u003ccode\u003eCollections.nCopies(int, Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collections.html#EMPTY_LIST\"\u003e\u003ccode\u003eCollections.EMPTY_LIST\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractList.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eAbstractList\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractSequentialList.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eAbstractSequentialList\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}