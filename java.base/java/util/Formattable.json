{
  "packageName": "java.util",
  "simpleName": "Formattable",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Formatter",
            "type": "Class"
          },
          "name": "formatter",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "flags",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "precision",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "formatTo",
      "comment": "Formats the object using the provided formatter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eformatter\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eformatter\u003c/code\u003e\u003c/a\u003e. Implementing classes may call \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#out()\"\u003e\u003ccode\u003eformatter.out()\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#locale()\"\u003e\u003ccode\u003eformatter.locale()\u003c/code\u003e\u003c/a\u003e to obtain the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eAppendable\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e used by this \n\u003ccode\u003eformatter\u003c/code\u003e respectively.",
          "\u003ccode\u003eflags\u003c/code\u003e - The flags modify the output format. The value is interpreted as a bitmask. Any combination of the following flags may be set: \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormattableFlags.html#LEFT_JUSTIFY\"\u003e\u003ccode\u003eFormattableFlags.LEFT_JUSTIFY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormattableFlags.html#UPPERCASE\"\u003e\u003ccode\u003eFormattableFlags.UPPERCASE\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormattableFlags.html#ALTERNATE\"\u003e\u003ccode\u003eFormattableFlags.ALTERNATE\u003c/code\u003e\u003c/a\u003e. If no flags are set, the default formatting of the implementing class will apply.",
          "\u003ccode\u003ewidth\u003c/code\u003e - The minimum number of characters to be written to the output. If the length of the converted value is less than the \n\u003ccode\u003ewidth\u003c/code\u003e then the output will be padded by \n\u003ccode\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/code\u003e until the total number of characters equals width. The padding is at the beginning by default. If the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormattableFlags.html#LEFT_JUSTIFY\"\u003e\u003ccode\u003eFormattableFlags.LEFT_JUSTIFY\u003c/code\u003e\u003c/a\u003e flag is set then the padding will be at the end. If \n\u003ccode\u003ewidth\u003c/code\u003e is \n\u003ccode\u003e-1\u003c/code\u003e then there is no minimum.",
          "\u003ccode\u003eprecision\u003c/code\u003e - The maximum number of characters to be written to the output. The precision is applied before the width, thus the output will be truncated to \n\u003ccode\u003eprecision\u003c/code\u003e characters even if the \n\u003ccode\u003ewidth\u003c/code\u003e is greater than the \n\u003ccode\u003eprecision\u003c/code\u003e. If \n\u003ccode\u003eprecision\u003c/code\u003e is \n\u003ccode\u003e-1\u003c/code\u003e then there is no explicit limit on the number of characters."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If any of the parameters are invalid. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.Formattable",
  "comment": "The \n\u003ccode\u003eFormattable\u003c/code\u003e interface must be implemented by any class that needs to perform custom formatting using the \n\u003ccode\u003e\u0027s\u0027\u003c/code\u003e conversion specifier of \n\u003ca href\u003d\"Formatter.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatter\u003c/code\u003e\u003c/a\u003e. This interface allows basic control for formatting arbitrary objects. For example, the following class prints out different representations of a stock\u0027s name depending on the flags and length constraints: \n\u003cpre\u003e \u003ccode\u003e\n   import java.nio.CharBuffer;\n   import java.util.Formatter;\n   import java.util.Formattable;\n   import java.util.Locale;\n   import static java.util.FormattableFlags.*;\n\n   ...\n\n   public class StockName implements Formattable {\n       private String symbol, companyName, frenchCompanyName;\n       public StockName(String symbol, String companyName,\n                        String frenchCompanyName) {\n           ...\n       }\n\n       ...\n\n       public void formatTo(Formatter fmt, int f, int width, int precision) {\n           StringBuilder sb \u003d new StringBuilder();\n\n           // decide form of name\n           String name \u003d companyName;\n           if (fmt.locale().equals(Locale.FRANCE))\n               name \u003d frenchCompanyName;\n           boolean alternate \u003d (f \u0026amp; ALTERNATE) \u003d\u003d ALTERNATE;\n           boolean usesymbol \u003d alternate || (precision !\u003d -1 \u0026amp;\u0026amp; precision \u0026lt; 10);\n           String out \u003d (usesymbol ? symbol : name);\n\n           // apply precision\n           if (precision \u003d\u003d -1 || out.length() \u0026lt; precision) {\n               // write it all\n               sb.append(out);\n           } else {\n               sb.append(out.substring(0, precision - 1)).append(\u0027*\u0027);\n           }\n\n           // apply width and justification\n           int len \u003d sb.length();\n           if (len \u0026lt; width)\n               for (int i \u003d 0; i \u0026lt; width - len; i++)\n                   if ((f \u0026amp; LEFT_JUSTIFY) \u003d\u003d LEFT_JUSTIFY)\n                       sb.append(\u0027 \u0027);\n                   else\n                       sb.insert(0, \u0027 \u0027);\n\n           fmt.format(sb.toString());\n       }\n\n       public String toString() {\n           return String.format(\"%s - %s\", symbol, companyName);\n       }\n   }\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e When used in conjunction with the \u003ca href\u003d\"Formatter.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eFormatter\u003c/code\u003e\u003c/a\u003e, the above class produces the following output for various format strings. \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n   Formatter fmt \u003d new Formatter();\n   StockName sn \u003d new StockName(\"HUGE\", \"Huge Fruit, Inc.\",\n                                \"Fruit Titanesque, Inc.\");\n   fmt.format(\"%s\", sn);                   //   -\u0026gt; \"Huge Fruit, Inc.\"\n   fmt.format(\"%s\", sn.toString());        //   -\u0026gt; \"HUGE - Huge Fruit, Inc.\"\n   fmt.format(\"%#s\", sn);                  //   -\u0026gt; \"HUGE\"\n   fmt.format(\"%-10.8s\", sn);              //   -\u0026gt; \"HUGE      \"\n   fmt.format(\"%.12s\", sn);                //   -\u0026gt; \"Huge Fruit,*\"\n   fmt.format(Locale.FRANCE, \"%25s\", sn);  //   -\u0026gt; \"   Fruit Titanesque, Inc.\"\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Formattables are not necessarily safe for multithreaded access. Thread safety is optional and may be enforced by classes that extend and implement this interface. \u003c/p\u003e\n\u003cp\u003e Unless otherwise specified, passing a \u003ccode\u003enull\u003c/code\u003e argument to any method in this interface will cause a \u003ca href\u003d\"../lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}