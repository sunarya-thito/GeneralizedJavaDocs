{
  "packageName": "java.util",
  "simpleName": "Formattable",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Formatter",
            "type": "Class"
          },
          "name": "formatter",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "flags",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "width",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "precision",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "formatTo",
      "comment": "Formats the object using the provided formatter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eformatter\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eformatter\u003c/code\u003e\u003c/a\u003e. Implementing classes may call \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#out()\"\u003e\u003ccode\u003eformatter.out()\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#locale()\"\u003e\u003ccode\u003eformatter.locale()\u003c/code\u003e\u003c/a\u003e to obtain the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eAppendable\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e used by this \n\u003ccode\u003eformatter\u003c/code\u003e respectively.",
          "\u003ccode\u003eflags\u003c/code\u003e - The flags modify the output format. The value is interpreted as a bitmask. Any combination of the following flags may be set: \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormattableFlags.html#LEFT_JUSTIFY\"\u003e\u003ccode\u003eFormattableFlags.LEFT_JUSTIFY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormattableFlags.html#UPPERCASE\"\u003e\u003ccode\u003eFormattableFlags.UPPERCASE\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormattableFlags.html#ALTERNATE\"\u003e\u003ccode\u003eFormattableFlags.ALTERNATE\u003c/code\u003e\u003c/a\u003e. If no flags are set, the default formatting of the implementing class will apply.",
          "\u003ccode\u003ewidth\u003c/code\u003e - The minimum number of characters to be written to the output. If the length of the converted value is less than the \n\u003ccode\u003ewidth\u003c/code\u003e then the output will be padded by \n\u003ccode\u003e\u0027\u0026nbsp;\u0026nbsp;\u0027\u003c/code\u003e until the total number of characters equals width. The padding is at the beginning by default. If the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/FormattableFlags.html#LEFT_JUSTIFY\"\u003e\u003ccode\u003eFormattableFlags.LEFT_JUSTIFY\u003c/code\u003e\u003c/a\u003e flag is set then the padding will be at the end. If \n\u003ccode\u003ewidth\u003c/code\u003e is \n\u003ccode\u003e-1\u003c/code\u003e then there is no minimum.",
          "\u003ccode\u003eprecision\u003c/code\u003e - The maximum number of characters to be written to the output. The precision is applied before the width, thus the output will be truncated to \n\u003ccode\u003eprecision\u003c/code\u003e characters even if the \n\u003ccode\u003ewidth\u003c/code\u003e is greater than the \n\u003ccode\u003eprecision\u003c/code\u003e. If \n\u003ccode\u003eprecision\u003c/code\u003e is \n\u003ccode\u003e-1\u003c/code\u003e then there is no explicit limit on the number of characters."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If any of the parameters are invalid. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.Formattable",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}