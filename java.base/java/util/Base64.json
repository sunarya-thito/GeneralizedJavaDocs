{
  "packageName": "java.util",
  "simpleName": "Base64",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Base64$Encoder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getEncoder",
      "comment": "Returns a Base64.Encoder that encodes using the Basic type base64 encoding scheme.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A Base64 encoder."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Base64$Encoder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getUrlEncoder",
      "comment": "Returns a Base64.Encoder that encodes using the URL and Filename safe type base64 encoding scheme.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A Base64 encoder."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Base64$Encoder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getMimeEncoder",
      "comment": "Returns a Base64.Encoder that encodes using the MIME type base64 encoding scheme.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A Base64 encoder."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Base64$Encoder",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "lineLength",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "lineSeparator",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getMimeEncoder",
      "comment": "Returns a Base64.Encoder that encodes using the MIME type base64 encoding scheme with specified line length and line separators.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elineLength\u003c/code\u003e - the length of each output line (rounded down to nearest multiple of 4). If the rounded down line length is not a positive value, the output will not be separated in lines",
          "\u003ccode\u003elineSeparator\u003c/code\u003e - the line separator for each output line"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elineSeparator\u003c/code\u003e includes any character of \"The Base64 Alphabet\" as specified in Table 1 of RFC 2045."
        ],
        "return": [
          "A Base64 encoder."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Base64$Decoder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDecoder",
      "comment": "Returns a Base64.Decoder that decodes using the Basic type base64 encoding scheme.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A Base64 decoder."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Base64$Decoder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getUrlDecoder",
      "comment": "Returns a Base64.Decoder that decodes using the URL and Filename safe type base64 encoding scheme.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A Base64 decoder."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Base64$Decoder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getMimeDecoder",
      "comment": "Returns a Base64.Decoder that decodes using the MIME type base64 decoding scheme.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A Base64 decoder."
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.Base64$Decoder",
    "java.util.Base64$Encoder"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.Base64",
  "comment": "This class consists exclusively of static methods for obtaining encoders and decoders for the Base64 encoding scheme. The implementation of this class supports the following types of Base64 as specified in \n\u003ca href\u003d\"http://www.ietf.org/rfc/rfc4648.txt\"\u003eRFC 4648\u003c/a\u003e and \n\u003ca href\u003d\"http://www.ietf.org/rfc/rfc2045.txt\"\u003eRFC 2045\u003c/a\u003e. \n\u003cul\u003e \n \u003cli\u003e\u003ca id\u003d\"basic\"\u003e\u003cb\u003eBasic\u003c/b\u003e\u003c/a\u003e \u003cp\u003e Uses \"The Base64 Alphabet\" as specified in Table 1 of RFC 4648 and RFC 2045 for encoding and decoding operation. The encoder does not add any line feed (line separator) character. The decoder rejects data that contains characters outside the base64 alphabet.\u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003ca id\u003d\"url\"\u003e\u003cb\u003eURL and Filename safe\u003c/b\u003e\u003c/a\u003e \u003cp\u003e Uses the \"URL and Filename safe Base64 Alphabet\" as specified in Table 2 of RFC 4648 for encoding and decoding. The encoder does not add any line feed (line separator) character. The decoder rejects data that contains characters outside the base64 alphabet.\u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003ca id\u003d\"mime\"\u003e\u003cb\u003eMIME\u003c/b\u003e\u003c/a\u003e \u003cp\u003e Uses \"The Base64 Alphabet\" as specified in Table 1 of RFC 2045 for encoding and decoding operation. The encoded output must be represented in lines of no more than 76 characters each and uses a carriage return \u003ccode\u003e\u0027\\r\u0027\u003c/code\u003e followed immediately by a linefeed \u003ccode\u003e\u0027\\n\u0027\u003c/code\u003e as the line separator. No line separator is added to the end of the encoded output. All line separators or other characters not found in the base64 alphabet table are ignored in decoding operation.\u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e Unless otherwise noted, passing a \u003ccode\u003enull\u003c/code\u003e argument to a method of this class will cause a \u003ca href\u003d\"../lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.8"
    ]
  }
}