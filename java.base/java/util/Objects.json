{
  "packageName": "java.util",
  "simpleName": "Objects",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "equals",
      "comment": "Returns true if the arguments are equal to each other and false otherwise. Consequently, if both arguments are null, true is returned. Otherwise, if the first argument is not null, equality is determined by calling the equals method of the first argument with the second argument of this method. Otherwise, false is returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an object",
          "\u003ccode\u003eb\u003c/code\u003e - an object to be compared with \n\u003ccode\u003ea\u003c/code\u003e for equality"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the arguments are equal to each other and \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "deepEquals",
      "comment": "Returns true if the arguments are deeply equal to each other and false otherwise. Two null values are deeply equal. If both arguments are arrays, the algorithm in Arrays.deepEquals is used to determine equality. Otherwise, equality is determined by using the equals method of the first argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#deepEquals(java.lang.Object%5B%5D,java.lang.Object%5B%5D)\"\u003e\u003ccode\u003eArrays.deepEquals(Object[], Object[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Objects.html#equals(java.lang.Object,java.lang.Object)\"\u003e\u003ccode\u003eequals(Object, Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an object",
          "\u003ccode\u003eb\u003c/code\u003e - an object to be compared with \n\u003ccode\u003ea\u003c/code\u003e for deep equality"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the arguments are deeply equal to each other and \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "hashCode",
      "comment": "Returns the hash code of a non-null argument and 0 for a null argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - an object"
        ],
        "return": [
          "the hash code of a non-\n\u003ccode\u003enull\u003c/code\u003e argument and 0 for a \n\u003ccode\u003enull\u003c/code\u003e argument"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "values"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "hash",
      "comment": "Generates a hash code for a sequence of input values. The hash code is generated as if all the input values were placed into an array, and that array were hashed by calling Arrays.hashCode(Object[]). This method is useful for implementing Object.hashCode() on objects containing multiple fields. For example, if an object that has three fields, x, y, and z, one could write:  @Override public int hashCode() {\n     return Objects.hash(x, y, z);\n }\n Warning: When a single object reference is supplied, the returned value does not equal the hash code of that object reference. This value can be computed by calling hashCode(Object).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#hashCode(java.lang.Object%5B%5D)\"\u003e\u003ccode\u003eArrays.hashCode(Object[])\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#hashCode()\"\u003e\u003ccode\u003eList.hashCode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalues\u003c/code\u003e - the values to be hashed"
        ],
        "return": [
          "a hash value of the sequence of input values"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toString",
      "comment": "Returns the result of calling toString for a non- null argument and \"null\" for a null argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003e\u003ccode\u003eObject.toString()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#valueOf(java.lang.Object)\"\u003e\u003ccode\u003eString.valueOf(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - an object"
        ],
        "return": [
          "the result of calling \n\u003ccode\u003etoString\u003c/code\u003e for a non-\n\u003ccode\u003e null\u003c/code\u003e argument and \n\u003ccode\u003e\"null\"\u003c/code\u003e for a \n\u003ccode\u003enull\u003c/code\u003e argument"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "nullDefault"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "toString",
      "comment": "Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Objects.html#toString(java.lang.Object)\"\u003e\u003ccode\u003etoString(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - an object",
          "\u003ccode\u003enullDefault\u003c/code\u003e - string to return if the first argument is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the result of calling \n\u003ccode\u003etoString\u003c/code\u003e on the first argument if it is not \n\u003ccode\u003enull\u003c/code\u003e and the second argument otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "a"
          }
        },
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        },
        {
          "type": {
            "name": "java.util.Comparator",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "compare",
      "comment": "Returns 0 if the arguments are identical and c.compare(a, b) otherwise. Consequently, if both arguments are null 0 is returned. Note that if one of the arguments is null, a NullPointerException may or may not be thrown depending on what ordering policy, if any, the Comparator chooses to have for null values.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the objects being compared"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eComparator\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - an object",
          "\u003ccode\u003eb\u003c/code\u003e - an object to be compared with \n\u003ccode\u003ea\u003c/code\u003e",
          "\u003ccode\u003ec\u003c/code\u003e - the \n\u003ccode\u003eComparator\u003c/code\u003e to compare the first two arguments"
        ],
        "return": [
          "0 if the arguments are identical and \n\u003ccode\u003e c.compare(a, b)\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "requireNonNull",
      "comment": "Checks that the specified object reference is not null. This method is designed primarily for doing parameter validation in methods and constructors, as demonstrated below:  public Foo(Bar bar) {\n     this.bar \u003d Objects.requireNonNull(bar);\n }",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the reference"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object reference to check for nullity"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eobj\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003eobj\u003c/code\u003e if not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "message"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "requireNonNull",
      "comment": "Checks that the specified object reference is not null and throws a customized NullPointerException if it is. This method is designed primarily for doing parameter validation in methods and constructors with multiple parameters, as demonstrated below:  public Foo(Bar bar, Baz baz) {\n     this.bar \u003d Objects.requireNonNull(bar, \"bar must not be null\");\n     this.baz \u003d Objects.requireNonNull(baz, \"baz must not be null\");\n }",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the reference"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object reference to check for nullity",
          "\u003ccode\u003emessage\u003c/code\u003e - detail message to be used in the event that a \n\u003ccode\u003e NullPointerException\u003c/code\u003e is thrown"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eobj\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003eobj\u003c/code\u003e if not \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isNull",
      "comment": "Returns true if the provided reference is null otherwise returns false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/Predicate.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003ePredicate\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method exists to be used as a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/Predicate.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003ePredicate\u003c/code\u003e\u003c/a\u003e, \n\u003ccode\u003efilter(Objects::isNull)\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - a reference to be checked against \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the provided reference is \n\u003ccode\u003enull\u003c/code\u003e otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "nonNull",
      "comment": "Returns true if the provided reference is non-null otherwise returns false.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/Predicate.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003ePredicate\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method exists to be used as a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/Predicate.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003ePredicate\u003c/code\u003e\u003c/a\u003e, \n\u003ccode\u003efilter(Objects::nonNull)\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - a reference to be checked against \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the provided reference is non-\n\u003ccode\u003enull\u003c/code\u003e otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "defaultObj"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "requireNonNullElse",
      "comment": "Returns the first argument if it is non-null and otherwise returns the non-null second argument.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the reference"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - an object",
          "\u003ccode\u003edefaultObj\u003c/code\u003e - a non-\n\u003ccode\u003enull\u003c/code\u003e object to return if the first argument is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if both \n\u003ccode\u003eobj\u003c/code\u003e is null and \n\u003ccode\u003edefaultObj\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the first argument if it is non-\n\u003ccode\u003enull\u003c/code\u003e and otherwise the second argument if it is non-\n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "supplier"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "requireNonNullElseGet",
      "comment": "Returns the first argument if it is non-null and otherwise returns the non-null value of supplier.get().",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the first argument and return type"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - an object",
          "\u003ccode\u003esupplier\u003c/code\u003e - of a non-\n\u003ccode\u003enull\u003c/code\u003e object to return if the first argument is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if both \n\u003ccode\u003eobj\u003c/code\u003e is null and either the \n\u003ccode\u003esupplier\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or the \n\u003ccode\u003esupplier.get()\u003c/code\u003e value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the first argument if it is non-\n\u003ccode\u003enull\u003c/code\u003e and otherwise the value from \n\u003ccode\u003esupplier.get()\u003c/code\u003e if it is non-\n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        },
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "messageSupplier"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "requireNonNull",
      "comment": "Checks that the specified object reference is not null and throws a customized NullPointerException if it is. Unlike the method requireNonNull(Object, String), this method allows creation of the message to be deferred until after the null check is made. While this may confer a performance advantage in the non-null case, when deciding to call this method care should be taken that the costs of creating the message supplier are less than the cost of just creating the string message directly.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the reference"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object reference to check for nullity",
          "\u003ccode\u003emessageSupplier\u003c/code\u003e - supplier of the detail message to be used in the event that a \n\u003ccode\u003eNullPointerException\u003c/code\u003e is thrown"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eobj\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003eobj\u003c/code\u003e if not \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkIndex",
      "comment": "Checks if the index is within the bounds of the range from 0 (inclusive) to length (exclusive). The index is defined to be out of bounds if any of the following inequalities is true: index \u003c 0 index \u003e\u003d length length \u003c 0, which is implied from the former inequalities",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index",
          "\u003ccode\u003elength\u003c/code\u003e - the upper-bound (exclusive) of the range"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e is out of bounds"
        ],
        "return": [
          "\u003ccode\u003eindex\u003c/code\u003e if it is within bounds of the range"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "toIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkFromToIndex",
      "comment": "Checks if the sub-range from fromIndex (inclusive) to toIndex (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive). The sub-range is defined to be out of bounds if any of the following inequalities is true: fromIndex \u003c 0 fromIndex \u003e toIndex toIndex \u003e length length \u003c 0, which is implied from the former inequalities",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromIndex\u003c/code\u003e - the lower-bound (inclusive) of the sub-range",
          "\u003ccode\u003etoIndex\u003c/code\u003e - the upper-bound (exclusive) of the sub-range",
          "\u003ccode\u003elength\u003c/code\u003e - the upper-bound (exclusive) the range"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the sub-range is out of bounds"
        ],
        "return": [
          "\u003ccode\u003efromIndex\u003c/code\u003e if the sub-range within bounds of the range"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkFromIndexSize",
      "comment": "Checks if the sub-range from fromIndex (inclusive) to fromIndex + size (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive). The sub-range is defined to be out of bounds if any of the following inequalities is true: fromIndex \u003c 0 size \u003c 0 fromIndex + size \u003e length, taking into account integer overflow length \u003c 0, which is implied from the former inequalities",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromIndex\u003c/code\u003e - the lower-bound (inclusive) of the sub-interval",
          "\u003ccode\u003esize\u003c/code\u003e - the size of the sub-range",
          "\u003ccode\u003elength\u003c/code\u003e - the upper-bound (exclusive) of the range"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the sub-range is out of bounds"
        ],
        "return": [
          "\u003ccode\u003efromIndex\u003c/code\u003e if the sub-range within bounds of the range"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkIndex",
      "comment": "Checks if the index is within the bounds of the range from 0 (inclusive) to length (exclusive). The index is defined to be out of bounds if any of the following inequalities is true: index \u003c 0 index \u003e\u003d length length \u003c 0, which is implied from the former inequalities",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - the index",
          "\u003ccode\u003elength\u003c/code\u003e - the upper-bound (exclusive) of the range"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eindex\u003c/code\u003e is out of bounds"
        ],
        "return": [
          "\u003ccode\u003eindex\u003c/code\u003e if it is within bounds of the range"
        ],
        "since": [
          "16"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "toIndex"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkFromToIndex",
      "comment": "Checks if the sub-range from fromIndex (inclusive) to toIndex (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive). The sub-range is defined to be out of bounds if any of the following inequalities is true: fromIndex \u003c 0 fromIndex \u003e toIndex toIndex \u003e length length \u003c 0, which is implied from the former inequalities",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromIndex\u003c/code\u003e - the lower-bound (inclusive) of the sub-range",
          "\u003ccode\u003etoIndex\u003c/code\u003e - the upper-bound (exclusive) of the sub-range",
          "\u003ccode\u003elength\u003c/code\u003e - the upper-bound (exclusive) the range"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the sub-range is out of bounds"
        ],
        "return": [
          "\u003ccode\u003efromIndex\u003c/code\u003e if the sub-range within bounds of the range"
        ],
        "since": [
          "16"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkFromIndexSize",
      "comment": "Checks if the sub-range from fromIndex (inclusive) to fromIndex + size (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive). The sub-range is defined to be out of bounds if any of the following inequalities is true: fromIndex \u003c 0 size \u003c 0 fromIndex + size \u003e length, taking into account integer overflow length \u003c 0, which is implied from the former inequalities",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromIndex\u003c/code\u003e - the lower-bound (inclusive) of the sub-interval",
          "\u003ccode\u003esize\u003c/code\u003e - the size of the sub-range",
          "\u003ccode\u003elength\u003c/code\u003e - the upper-bound (exclusive) of the range"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the sub-range is out of bounds"
        ],
        "return": [
          "\u003ccode\u003efromIndex\u003c/code\u003e if the sub-range within bounds of the range"
        ],
        "since": [
          "16"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.util.Objects",
  "comment": "This class consists of \n\u003ccode\u003estatic\u003c/code\u003e utility methods for operating on objects, or checking certain conditions before operation. These utilities include \n\u003ccode\u003enull\u003c/code\u003e-safe or \n\u003ccode\u003enull\u003c/code\u003e-tolerant methods for computing the hash code of an object, returning a string for an object, comparing two objects, and checking if indexes or sub-range values are out of bounds.",
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}