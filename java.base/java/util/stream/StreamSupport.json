{
  "packageName": "java.util.stream",
  "simpleName": "StreamSupport",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Spliterator",
            "parameters": [
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "spliterator"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "parallel"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "stream",
      "comment": "Creates a new sequential or parallel Stream from a Spliterator. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be late-binding. Otherwise, stream(java.util.function.Supplier, int, boolean) should be used to reduce the scope of potential interference with the source. See Non-Interference for more details.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of stream elements"
        ],
        "param": [
          "\u003ccode\u003espliterator\u003c/code\u003e - a \n\u003ccode\u003eSpliterator\u003c/code\u003e describing the stream elements",
          "\u003ccode\u003eparallel\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e then the returned stream is a parallel stream; if \n\u003ccode\u003efalse\u003c/code\u003e the returned stream is a sequential stream."
        ],
        "return": [
          "a new sequential or parallel \n\u003ccode\u003eStream\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.util.Spliterator",
                    "parameters": [
                      {
                        "name": "T",
                        "type": "Class"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "supplier"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "parallel"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "stream",
      "comment": "Creates a new sequential or parallel Stream from a Supplier of Spliterator. The Supplier.get() method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are late-binding, it is likely more efficient to use stream(java.util.Spliterator, boolean) instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See Non-Interference for more details.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of stream elements"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/StreamSupport.html#stream(java.util.Spliterator,boolean)\"\u003e\u003ccode\u003estream(java.util.Spliterator, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esupplier\u003c/code\u003e - a \n\u003ccode\u003eSupplier\u003c/code\u003e of a \n\u003ccode\u003eSpliterator\u003c/code\u003e",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Spliterator characteristics of the supplied \n\u003ccode\u003eSpliterator\u003c/code\u003e. The characteristics must be equal to \n\u003ccode\u003esupplier.get().characteristics()\u003c/code\u003e, otherwise undefined behavior may occur when terminal operation commences.",
          "\u003ccode\u003eparallel\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e then the returned stream is a parallel stream; if \n\u003ccode\u003efalse\u003c/code\u003e the returned stream is a sequential stream."
        ],
        "return": [
          "a new sequential or parallel \n\u003ccode\u003eStream\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Spliterator$OfInt",
            "type": "Class"
          },
          "field": {
            "name": "spliterator"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "parallel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "intStream",
      "comment": "Creates a new sequential or parallel IntStream from a Spliterator.OfInt. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be late-binding. Otherwise, intStream(java.util.function.Supplier, int, boolean) should be used to reduce the scope of potential interference with the source. See Non-Interference for more details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003espliterator\u003c/code\u003e - a \n\u003ccode\u003eSpliterator.OfInt\u003c/code\u003e describing the stream elements",
          "\u003ccode\u003eparallel\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e then the returned stream is a parallel stream; if \n\u003ccode\u003efalse\u003c/code\u003e the returned stream is a sequential stream."
        ],
        "return": [
          "a new sequential or parallel \n\u003ccode\u003eIntStream\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.util.Spliterator$OfInt",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "supplier"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "parallel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "intStream",
      "comment": "Creates a new sequential or parallel IntStream from a Supplier of Spliterator.OfInt. The Supplier.get() method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are late-binding, it is likely more efficient to use intStream(java.util.Spliterator.OfInt, boolean) instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See Non-Interference for more details.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/StreamSupport.html#intStream(java.util.Spliterator.OfInt,boolean)\"\u003e\u003ccode\u003eintStream(java.util.Spliterator.OfInt, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esupplier\u003c/code\u003e - a \n\u003ccode\u003eSupplier\u003c/code\u003e of a \n\u003ccode\u003eSpliterator.OfInt\u003c/code\u003e",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Spliterator characteristics of the supplied \n\u003ccode\u003eSpliterator.OfInt\u003c/code\u003e. The characteristics must be equal to \n\u003ccode\u003esupplier.get().characteristics()\u003c/code\u003e, otherwise undefined behavior may occur when terminal operation commences.",
          "\u003ccode\u003eparallel\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e then the returned stream is a parallel stream; if \n\u003ccode\u003efalse\u003c/code\u003e the returned stream is a sequential stream."
        ],
        "return": [
          "a new sequential or parallel \n\u003ccode\u003eIntStream\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.LongStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Spliterator$OfLong",
            "type": "Class"
          },
          "field": {
            "name": "spliterator"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "parallel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "longStream",
      "comment": "Creates a new sequential or parallel LongStream from a Spliterator.OfLong. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be late-binding. Otherwise, longStream(java.util.function.Supplier, int, boolean) should be used to reduce the scope of potential interference with the source. See Non-Interference for more details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003espliterator\u003c/code\u003e - a \n\u003ccode\u003eSpliterator.OfLong\u003c/code\u003e describing the stream elements",
          "\u003ccode\u003eparallel\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e then the returned stream is a parallel stream; if \n\u003ccode\u003efalse\u003c/code\u003e the returned stream is a sequential stream."
        ],
        "return": [
          "a new sequential or parallel \n\u003ccode\u003eLongStream\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.LongStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.util.Spliterator$OfLong",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "supplier"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "parallel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "longStream",
      "comment": "Creates a new sequential or parallel LongStream from a Supplier of Spliterator.OfLong. The Supplier.get() method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are late-binding, it is likely more efficient to use longStream(java.util.Spliterator.OfLong, boolean) instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See Non-Interference for more details.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/StreamSupport.html#longStream(java.util.Spliterator.OfLong,boolean)\"\u003e\u003ccode\u003elongStream(java.util.Spliterator.OfLong, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esupplier\u003c/code\u003e - a \n\u003ccode\u003eSupplier\u003c/code\u003e of a \n\u003ccode\u003eSpliterator.OfLong\u003c/code\u003e",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Spliterator characteristics of the supplied \n\u003ccode\u003eSpliterator.OfLong\u003c/code\u003e. The characteristics must be equal to \n\u003ccode\u003esupplier.get().characteristics()\u003c/code\u003e, otherwise undefined behavior may occur when terminal operation commences.",
          "\u003ccode\u003eparallel\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e then the returned stream is a parallel stream; if \n\u003ccode\u003efalse\u003c/code\u003e the returned stream is a sequential stream."
        ],
        "return": [
          "a new sequential or parallel \n\u003ccode\u003eLongStream\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.DoubleStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Spliterator$OfDouble",
            "type": "Class"
          },
          "field": {
            "name": "spliterator"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "parallel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doubleStream",
      "comment": "Creates a new sequential or parallel DoubleStream from a Spliterator.OfDouble. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be late-binding. Otherwise, doubleStream(java.util.function.Supplier, int, boolean) should be used to reduce the scope of potential interference with the source. See Non-Interference for more details.",
      "tagMap": {
        "param": [
          "\u003ccode\u003espliterator\u003c/code\u003e - A \n\u003ccode\u003eSpliterator.OfDouble\u003c/code\u003e describing the stream elements",
          "\u003ccode\u003eparallel\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e then the returned stream is a parallel stream; if \n\u003ccode\u003efalse\u003c/code\u003e the returned stream is a sequential stream."
        ],
        "return": [
          "a new sequential or parallel \n\u003ccode\u003eDoubleStream\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.DoubleStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.util.Spliterator$OfDouble",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "supplier"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "parallel"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doubleStream",
      "comment": "Creates a new sequential or parallel DoubleStream from a Supplier of Spliterator.OfDouble. The Supplier.get() method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are late-binding, it is likely more efficient to use doubleStream(java.util.Spliterator.OfDouble, boolean) instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See Non-Interference for more details.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/StreamSupport.html#doubleStream(java.util.Spliterator.OfDouble,boolean)\"\u003e\u003ccode\u003edoubleStream(java.util.Spliterator.OfDouble, boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esupplier\u003c/code\u003e - A \n\u003ccode\u003eSupplier\u003c/code\u003e of a \n\u003ccode\u003eSpliterator.OfDouble\u003c/code\u003e",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Spliterator characteristics of the supplied \n\u003ccode\u003eSpliterator.OfDouble\u003c/code\u003e. The characteristics must be equal to \n\u003ccode\u003esupplier.get().characteristics()\u003c/code\u003e, otherwise undefined behavior may occur when terminal operation commences.",
          "\u003ccode\u003eparallel\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e then the returned stream is a parallel stream; if \n\u003ccode\u003efalse\u003c/code\u003e the returned stream is a sequential stream."
        ],
        "return": [
          "a new sequential or parallel \n\u003ccode\u003eDoubleStream\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.util.stream.StreamSupport",
  "comment": "Low-level utility methods for creating and manipulating streams. \n\u003cp\u003eThis class is mostly for library writers presenting stream views of data structures; most static stream methods intended for end users are in the various \u003ccode\u003eStream\u003c/code\u003e classes.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.8"
    ]
  }
}