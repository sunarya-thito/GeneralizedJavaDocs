{
  "packageName": "java.util.stream",
  "simpleName": "Collector",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.function.Supplier",
        "parameters": [
          {
            "owner": "java.util.stream.Collector",
            "name": "A",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "supplier",
      "comment": "A function that creates and returns a new mutable result container.",
      "tagMap": {
        "return": [
          "a function which returns a new, mutable result container"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.BiConsumer",
        "parameters": [
          {
            "owner": "java.util.stream.Collector",
            "name": "A",
            "type": "Variable"
          },
          {
            "owner": "java.util.stream.Collector",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "accumulator",
      "comment": "A function that folds a value into a mutable result container.",
      "tagMap": {
        "return": [
          "a function which folds a value into a mutable result container"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.BinaryOperator",
        "parameters": [
          {
            "owner": "java.util.stream.Collector",
            "name": "A",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "combiner",
      "comment": "A function that accepts two partial results and merges them. The combiner function may fold state from one argument into the other and return that, or may return a new result container.",
      "tagMap": {
        "return": [
          "a function which combines two partial results into a combined result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Function",
        "parameters": [
          {
            "owner": "java.util.stream.Collector",
            "name": "A",
            "type": "Variable"
          },
          {
            "owner": "java.util.stream.Collector",
            "name": "R",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "finisher",
      "comment": "Perform the final transformation from the intermediate accumulation type A to the final result type R. If the characteristic IDENTITY_FINISH is set, this function may be presumed to be an identity transform with an unchecked cast from A to R.",
      "tagMap": {
        "return": [
          "a function which transforms the intermediate result to the final result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.util.stream.Collector$Characteristics",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "characteristics",
      "comment": "Returns a Set of Collector.Characteristics indicating the characteristics of this Collector. This set should be immutable.",
      "tagMap": {
        "return": [
          "an immutable set of collector characteristics"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Collector",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          },
          {
            "name": "R",
            "type": "Class"
          },
          {
            "name": "R",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "R",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "supplier"
          }
        },
        {
          "type": {
            "name": "java.util.function.BiConsumer",
            "parameters": [
              {
                "name": "R",
                "type": "Class"
              },
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "accumulator"
          }
        },
        {
          "type": {
            "name": "java.util.function.BinaryOperator",
            "parameters": [
              {
                "name": "R",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "combiner"
          }
        },
        {
          "type": {
            "name": "java.util.stream.Collector$Characteristics",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          },
          "varArgs": {}
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        },
        {
          "name": "R",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns a new Collector described by the given supplier, accumulator, and combiner functions. The resulting Collector has the Collector.Characteristics.IDENTITY_FINISH characteristic.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of input elements for the new collector",
          "\u003ccode\u003eR\u003c/code\u003e - The type of intermediate accumulation result, and final result, for the new collector"
        ],
        "param": [
          "\u003ccode\u003esupplier\u003c/code\u003e - The supplier function for the new collector",
          "\u003ccode\u003eaccumulator\u003c/code\u003e - The accumulator function for the new collector",
          "\u003ccode\u003ecombiner\u003c/code\u003e - The combiner function for the new collector",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - The collector characteristics for the new collector"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any argument is null"
        ],
        "return": [
          "the new \n\u003ccode\u003eCollector\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Collector",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          },
          {
            "name": "A",
            "type": "Class"
          },
          {
            "name": "R",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "supplier"
          }
        },
        {
          "type": {
            "name": "java.util.function.BiConsumer",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              },
              {
                "name": "T",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "accumulator"
          }
        },
        {
          "type": {
            "name": "java.util.function.BinaryOperator",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "combiner"
          }
        },
        {
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              },
              {
                "name": "R",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "finisher"
          }
        },
        {
          "type": {
            "name": "java.util.stream.Collector$Characteristics",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          },
          "varArgs": {}
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        },
        {
          "name": "A",
          "type": "Variable"
        },
        {
          "name": "R",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "of",
      "comment": "Returns a new Collector described by the given supplier, accumulator, combiner, and finisher functions.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of input elements for the new collector",
          "\u003ccode\u003eA\u003c/code\u003e - The intermediate accumulation type of the new collector",
          "\u003ccode\u003eR\u003c/code\u003e - The final result type of the new collector"
        ],
        "param": [
          "\u003ccode\u003esupplier\u003c/code\u003e - The supplier function for the new collector",
          "\u003ccode\u003eaccumulator\u003c/code\u003e - The accumulator function for the new collector",
          "\u003ccode\u003ecombiner\u003c/code\u003e - The combiner function for the new collector",
          "\u003ccode\u003efinisher\u003c/code\u003e - The finisher function for the new collector",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - The collector characteristics for the new collector"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if any argument is null"
        ],
        "return": [
          "the new \n\u003ccode\u003eCollector\u003c/code\u003e"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.stream.Collector$Characteristics"
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    },
    {
      "name": "A",
      "type": "Variable"
    },
    {
      "name": "R",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.stream.Collector",
  "comment": "A \n\u003ca href\u003d\"package-summary.html#Reduction\"\u003emutable reduction operation\u003c/a\u003e that accumulates input elements into a mutable result container, optionally transforming the accumulated result into a final representation after all input elements have been processed. Reduction operations can be performed either sequentially or in parallel. \n\u003cp\u003eExamples of mutable reduction operations include: accumulating elements into a \u003ccode\u003eCollection\u003c/code\u003e; concatenating strings using a \u003ccode\u003eStringBuilder\u003c/code\u003e; computing summary information about elements such as sum, min, max, or average; computing \"pivot table\" summaries such as \"maximum valued transaction by seller\", etc. The class \u003ca href\u003d\"Collectors.html\" title\u003d\"class in java.util.stream\"\u003e\u003ccode\u003eCollectors\u003c/code\u003e\u003c/a\u003e provides implementations of many common mutable reductions. \u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eCollector\u003c/code\u003e is specified by four functions that work together to accumulate entries into a mutable result container, and optionally perform a final transform on the result. They are: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003ecreation of a new result container (\u003ca href\u003d\"#supplier()\"\u003e\u003ccode\u003esupplier()\u003c/code\u003e\u003c/a\u003e)\u003c/li\u003e \n \u003cli\u003eincorporating a new data element into a result container (\u003ca href\u003d\"#accumulator()\"\u003e\u003ccode\u003eaccumulator()\u003c/code\u003e\u003c/a\u003e)\u003c/li\u003e \n \u003cli\u003ecombining two result containers into one (\u003ca href\u003d\"#combiner()\"\u003e\u003ccode\u003ecombiner()\u003c/code\u003e\u003c/a\u003e)\u003c/li\u003e \n \u003cli\u003eperforming an optional final transform on the container (\u003ca href\u003d\"#finisher()\"\u003e\u003ccode\u003efinisher()\u003c/code\u003e\u003c/a\u003e)\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eCollectors also have a set of characteristics, such as \u003ca href\u003d\"Collector.Characteristics.html#CONCURRENT\"\u003e\u003ccode\u003eCollector.Characteristics.CONCURRENT\u003c/code\u003e\u003c/a\u003e, that provide hints that can be used by a reduction implementation to provide better performance. \u003c/p\u003e\n\u003cp\u003eA sequential implementation of a reduction using a collector would create a single result container using the supplier function, and invoke the accumulator function once for each input element. A parallel implementation would partition the input, create a result container for each partition, accumulate the contents of each partition into a subresult for that partition, and then use the combiner function to merge the subresults into a combined result. \u003c/p\u003e\n\u003cp\u003eTo ensure that sequential and parallel executions produce equivalent results, the collector functions must satisfy an \u003cem\u003eidentity\u003c/em\u003e and an \u003ca href\u003d\"package-summary.html#Associativity\"\u003eassociativity\u003c/a\u003e constraints. \u003c/p\u003e\n\u003cp\u003eThe identity constraint says that for any partially accumulated result, combining it with an empty result container must produce an equivalent result. That is, for a partially accumulated result \u003ccode\u003ea\u003c/code\u003e that is the result of any series of accumulator and combiner invocations, \u003ccode\u003ea\u003c/code\u003e must be equivalent to \u003ccode\u003ecombiner.apply(a, supplier.get())\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThe associativity constraint says that splitting the computation must produce an equivalent result. That is, for any input elements \u003ccode\u003et1\u003c/code\u003e and \u003ccode\u003et2\u003c/code\u003e, the results \u003ccode\u003er1\u003c/code\u003e and \u003ccode\u003er2\u003c/code\u003e in the computation below must be equivalent: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n     A a1 \u003d supplier.get();\n     accumulator.accept(a1, t1);\n     accumulator.accept(a1, t2);\n     R r1 \u003d finisher.apply(a1);  // result without splitting\n\n     A a2 \u003d supplier.get();\n     accumulator.accept(a2, t1);\n     A a3 \u003d supplier.get();\n     accumulator.accept(a3, t2);\n     R r2 \u003d finisher.apply(combiner.apply(a2, a3));  // result with splitting\n \u003c/code\u003e \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eFor collectors that do not have the \u003ccode\u003eUNORDERED\u003c/code\u003e characteristic, two accumulated results \u003ccode\u003ea1\u003c/code\u003e and \u003ccode\u003ea2\u003c/code\u003e are equivalent if \u003ccode\u003efinisher.apply(a1).equals(finisher.apply(a2))\u003c/code\u003e. For unordered collectors, equivalence is relaxed to allow for non-equality related to differences in order. (For example, an unordered collector that accumulated elements to a \u003ccode\u003eList\u003c/code\u003e would consider two lists equivalent if they contained the same elements, ignoring order.) \u003c/p\u003e\n\u003cp\u003eLibraries that implement reduction based on \u003ccode\u003eCollector\u003c/code\u003e, such as \u003ca href\u003d\"Stream.html#collect(java.util.stream.Collector)\"\u003e\u003ccode\u003eStream.collect(Collector)\u003c/code\u003e\u003c/a\u003e, must adhere to the following constraints: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe first argument passed to the accumulator function, both arguments passed to the combiner function, and the argument passed to the finisher function must be the result of a previous invocation of the result supplier, accumulator, or combiner functions.\u003c/li\u003e \n \u003cli\u003eThe implementation should not do anything with the result of any of the result supplier, accumulator, or combiner functions other than to pass them again to the accumulator, combiner, or finisher functions, or return them to the caller of the reduction operation.\u003c/li\u003e \n \u003cli\u003eIf a result is passed to the combiner or finisher function, and the same object is not returned from that function, it is never used again.\u003c/li\u003e \n \u003cli\u003eOnce a result is passed to the combiner or finisher function, it is never passed to the accumulator function again.\u003c/li\u003e \n \u003cli\u003eFor non-concurrent collectors, any result returned from the result supplier, accumulator, or combiner functions must be serially thread-confined. This enables collection to occur in parallel without the \u003ccode\u003eCollector\u003c/code\u003e needing to implement any additional synchronization. The reduction implementation must manage that the input is properly partitioned, that partitions are processed in isolation, and combining happens only after accumulation is complete.\u003c/li\u003e \n \u003cli\u003eFor concurrent collectors, an implementation is free to (but not required to) implement reduction concurrently. A concurrent reduction is one where the accumulator function is called concurrently from multiple threads, using the same concurrently-modifiable result container, rather than keeping the result isolated during accumulation. A concurrent reduction should only be applied if the collector has the \u003ca href\u003d\"Collector.Characteristics.html#UNORDERED\"\u003e\u003ccode\u003eCollector.Characteristics.UNORDERED\u003c/code\u003e\u003c/a\u003e characteristics or if the originating data is unordered.\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIn addition to the predefined implementations in \u003ca href\u003d\"Collectors.html\" title\u003d\"class in java.util.stream\"\u003e\u003ccode\u003eCollectors\u003c/code\u003e\u003c/a\u003e, the static factory methods \u003ca href\u003d\"#of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector.Characteristics...)\"\u003e\u003ccode\u003eof(Supplier, BiConsumer, BinaryOperator, Characteristics...)\u003c/code\u003e\u003c/a\u003e can be used to construct collectors. For example, you could create a collector that accumulates widgets into a \u003ccode\u003eTreeSet\u003c/code\u003e with: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n     Collector\u0026lt;Widget, ?, TreeSet\u0026lt;Widget\u0026gt;\u0026gt; intoSet \u003d\n         Collector.of(TreeSet::new, TreeSet::add,\n                      (left, right) -\u0026gt; { left.addAll(right); return left; });\n \u003c/code\u003e\u003c/pre\u003e (This behavior is also implemented by the predefined collector \n\u003ca href\u003d\"Collectors.html#toCollection(java.util.function.Supplier)\"\u003e\u003ccode\u003eCollectors.toCollection(Supplier)\u003c/code\u003e\u003c/a\u003e).\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Stream.html#collect(java.util.stream.Collector)\"\u003e\u003ccode\u003eStream.collect(Collector)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Collectors.html\" title\u003d\"class in java.util.stream\"\u003e\u003ccode\u003eCollectors\u003c/code\u003e\u003c/a\u003e"
    ],
    "apiNote": [
      "Performing a reduction operation with a \n\u003ccode\u003eCollector\u003c/code\u003e should produce a result equivalent to: \n\u003cpre\u003e\u003ccode\u003e\n     A container \u003d collector.supplier().get();\n     for (T t : data)\n         collector.accumulator().accept(container, t);\n     return collector.finisher().apply(container);\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003eHowever, the library is free to partition the input, perform the reduction on the partitions, and then use the combiner function to combine the partial results to achieve a parallel reduction. (Depending on the specific reduction operation, this may perform better or worse, depending on the relative cost of the accumulator and combiner functions.) \u003c/p\u003e\n\u003cp\u003eCollectors are designed to be \u003cem\u003ecomposed\u003c/em\u003e; many of the methods in \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Collectors.html\" title\u003d\"class in java.util.stream\"\u003e\u003ccode\u003eCollectors\u003c/code\u003e\u003c/a\u003e are functions that take a collector and produce a new collector. For example, given the following collector that computes the sum of the salaries of a stream of employees: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n     Collector\u0026lt;Employee, ?, Integer\u0026gt; summingSalaries\n         \u003d Collectors.summingInt(Employee::getSalary))\n \u003c/code\u003e\u003c/pre\u003e If we wanted to create a collector to tabulate the sum of salaries by department, we could reuse the \"sum of salaries\" logic using \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Collectors.html#groupingBy(java.util.function.Function,java.util.stream.Collector)\"\u003e\u003ccode\u003eCollectors.groupingBy(Function, Collector)\u003c/code\u003e\u003c/a\u003e: \n\u003cpre\u003e\u003ccode\u003e\n     Collector\u0026lt;Employee, ?, Map\u0026lt;Department, Integer\u0026gt;\u0026gt; summingSalariesByDept\n         \u003d Collectors.groupingBy(Employee::getDepartment, summingSalaries);\n \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}