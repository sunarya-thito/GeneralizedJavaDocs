{
  "packageName": "java.util",
  "simpleName": "SplittableRandom",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.SplittableRandom",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "split",
      "comment": "Constructs and returns a new SplittableRandom instance that shares no mutable state with this instance. However, with very high probability, the set of values collectively generated by the two objects has the same statistical properties as if the same quantity of values were generated by a single thread using a single SplittableRandom object. Either or both of the two objects may be further split using the split() method, and the same expected statistical properties apply to the entire set of generators constructed by such recursive splitting.",
      "tagMap": {
        "return": [
          "the new SplittableRandom instance"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextBytes",
      "comment": "Fills a user-supplied byte array with generated pseudorandom bytes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - the byte array to fill with pseudorandom bytes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if bytes is null"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextInt",
      "comment": "Returns a pseudorandom int value.",
      "tagMap": {
        "return": [
          "a pseudorandom \n\u003ccode\u003eint\u003c/code\u003e value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextInt",
      "comment": "Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive). Must be positive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebound\u003c/code\u003e is not positive"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003eint\u003c/code\u003e value between zero (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextInt",
      "comment": "Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the least value returned",
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eorigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003ebound\u003c/code\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003eint\u003c/code\u003e value between the origin (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextLong",
      "comment": "Returns a pseudorandom long value.",
      "tagMap": {
        "return": [
          "a pseudorandom \n\u003ccode\u003elong\u003c/code\u003e value"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextLong",
      "comment": "Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive). Must be positive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebound\u003c/code\u003e is not positive"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003elong\u003c/code\u003e value between zero (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextLong",
      "comment": "Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the least value returned",
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eorigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003ebound\u003c/code\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003elong\u003c/code\u003e value between the origin (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextDouble",
      "comment": "Returns a pseudorandom double value between zero (inclusive) and one (exclusive).",
      "tagMap": {
        "return": [
          "a pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e value between zero (inclusive) and one (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextDouble",
      "comment": "Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive). Must be positive."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebound\u003c/code\u003e is not positive"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e value between zero (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "origin"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "bound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextDouble",
      "comment": "Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003eorigin\u003c/code\u003e - the least value returned",
          "\u003ccode\u003ebound\u003c/code\u003e - the upper bound (exclusive)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eorigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003ebound\u003c/code\u003e"
        ],
        "return": [
          "a pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e value between the origin (inclusive) and the bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextBoolean",
      "comment": "Returns a pseudorandom boolean value.",
      "tagMap": {
        "return": [
          "a pseudorandom \n\u003ccode\u003eboolean\u003c/code\u003e value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ints",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003eint\u003c/code\u003e values"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ints",
      "comment": "Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it.",
      "tagMap": {
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e ints(Long.MAX_VALUE)\u003c/code\u003e."
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003eint\u003c/code\u003e values"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ints",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate",
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero, or \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003eint\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.IntStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ints",
      "comment": "Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e ints(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003eint\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.LongStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longs",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003elong\u003c/code\u003e values"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.LongStream",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longs",
      "comment": "Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it.",
      "tagMap": {
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e longs(Long.MAX_VALUE)\u003c/code\u003e."
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003elong\u003c/code\u003e values"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.LongStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longs",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate",
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero, or \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003elong\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.LongStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "longs",
      "comment": "Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e longs(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003elong\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.DoubleStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubles",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero"
        ],
        "return": [
          "a stream of \n\u003ccode\u003edouble\u003c/code\u003e values"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.DoubleStream",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubles",
      "comment": "Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).",
      "tagMap": {
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e doubles(Long.MAX_VALUE)\u003c/code\u003e."
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e values"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.DoubleStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "streamSize"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubles",
      "comment": "Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003estreamSize\u003c/code\u003e - the number of values to generate",
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estreamSize\u003c/code\u003e is less than zero, or \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.DoubleStream",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberOrigin"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "randomNumberBound"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "doubles",
      "comment": "Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).",
      "tagMap": {
        "param": [
          "\u003ccode\u003erandomNumberOrigin\u003c/code\u003e - the origin (inclusive) of each random value",
          "\u003ccode\u003erandomNumberBound\u003c/code\u003e - the bound (exclusive) of each random value"
        ],
        "implNote": [
          "This method is implemented to be equivalent to \n\u003ccode\u003e doubles(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound)\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003erandomNumberOrigin\u003c/code\u003e is greater than or equal to \n\u003ccode\u003erandomNumberBound\u003c/code\u003e"
        ],
        "return": [
          "a stream of pseudorandom \n\u003ccode\u003edouble\u003c/code\u003e values, each with the given origin (inclusive) and bound (exclusive)"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "seed"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new SplittableRandom instance using the specified initial seed. SplittableRandom instances created with the same seed in the same program generate identical sequences of values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eseed\u003c/code\u003e - the initial seed"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new SplittableRandom instance that is likely to generate sequences of values that are statistically independent of those of any other instances in the current program; and may, and typically does, vary across program invocations.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.util.SplittableRandom",
  "comment": "A generator of uniform pseudorandom values applicable for use in (among other contexts) isolated parallel computations that may generate subtasks. Class \n\u003ccode\u003eSplittableRandom\u003c/code\u003e supports methods for producing pseudorandom numbers of type \n\u003ccode\u003eint\u003c/code\u003e, \n\u003ccode\u003elong\u003c/code\u003e, and \n\u003ccode\u003edouble\u003c/code\u003e with similar usages as for class \n\u003ca href\u003d\"Random.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eRandom\u003c/code\u003e\u003c/a\u003e but differs in the following ways: \n\u003cul\u003e \n \u003cli\u003eSeries of generated values pass the DieHarder suite testing independence and uniformity properties of random number generators. (Most recently validated with \u003ca href\u003d\"http://www.phy.duke.edu/~rgb/General/dieharder.php\"\u003e version 3.31.1\u003c/a\u003e.) These tests validate only the methods for certain types and ranges, but similar properties are expected to hold, at least approximately, for others as well. The \u003cem\u003eperiod\u003c/em\u003e (length of any series of generated values before it repeats) is at least 2\u003csup\u003e64\u003c/sup\u003e. \u003c/li\u003e\n \u003cli\u003eMethod \u003ca href\u003d\"#split()\"\u003e\u003ccode\u003esplit()\u003c/code\u003e\u003c/a\u003e constructs and returns a new SplittableRandom instance that shares no mutable state with the current instance. However, with very high probability, the values collectively generated by the two objects have the same statistical properties as if the same quantity of values were generated by a single thread using a single \u003ccode\u003e SplittableRandom\u003c/code\u003e object. \u003c/li\u003e\n \u003cli\u003eInstances of SplittableRandom are \u003cem\u003enot\u003c/em\u003e thread-safe. They are designed to be split, not shared, across threads. For example, a \u003ca href\u003d\"concurrent/ForkJoinTask.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003efork/join-style\u003c/code\u003e\u003c/a\u003e computation using random numbers might include a construction of the form \u003ccode\u003enew Subtask(aSplittableRandom.split()).fork()\u003c/code\u003e. \u003c/li\u003e\n \u003cli\u003eThis class provides additional methods for generating random streams, that employ the above techniques when used in \u003ccode\u003e stream.parallel()\u003c/code\u003e mode. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003eInstances of \u003ccode\u003eSplittableRandom\u003c/code\u003e are not cryptographically secure. Consider instead using \u003ca href\u003d\"../security/SecureRandom.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSecureRandom\u003c/code\u003e\u003c/a\u003e in security-sensitive applications. Additionally, default-constructed instances do not use a cryptographically random seed unless the \u003ca href\u003d\"../lang/System.html#getProperty(java.lang.String)\"\u003esystem property\u003c/a\u003e \u003ccode\u003e\u003cspan id\u003d\"java.util.secureRandomSeed\" class\u003d\"search-tag-result\"\u003ejava.util.secureRandomSeed\u003c/span\u003e\u003c/code\u003e is set to \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.8"
    ]
  }
}