{
  "packageName": "java.util",
  "simpleName": "Builder",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "instant"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInstant",
      "comment": "Sets the instant parameter to the given instant value that is a millisecond offset from the Epoch.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setTime(java.util.Date)\"\u003e\u003ccode\u003eCalendar.setTime(Date)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setTimeInMillis(long)\"\u003e\u003ccode\u003eCalendar.setTimeInMillis(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#time\"\u003e\u003ccode\u003eCalendar.time\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einstant\u003c/code\u003e - a millisecond offset from the Epoch"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if any of the field parameters have already been set"
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "instant"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setInstant",
      "comment": "Sets the instant parameter to the instant value given by a Date. This method is equivalent to a call to setInstant(instant.getTime()).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setTime(java.util.Date)\"\u003e\u003ccode\u003eCalendar.setTime(Date)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setTimeInMillis(long)\"\u003e\u003ccode\u003eCalendar.setTimeInMillis(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#time\"\u003e\u003ccode\u003eCalendar.time\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einstant\u003c/code\u003e - a \n\u003ccode\u003eDate\u003c/code\u003e representing a millisecond offset from the Epoch"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einstant\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if any of the field parameters have already been set"
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "field"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "set",
      "comment": "Sets the field parameter to the given value. field is an index to the Calendar.fields, such as DAY_OF_MONTH. Field value validation is not performed in this method. Any out of range values are either normalized in lenient mode or detected as an invalid value in non-lenient mode when building a Calendar.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int)\"\u003e\u003ccode\u003eCalendar.set(int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - an index to the \n\u003ccode\u003eCalendar\u003c/code\u003e fields",
          "\u003ccode\u003evalue\u003c/code\u003e - the field value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efield\u003c/code\u003e is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the instant value has already been set, or if fields have been set too many (approximately \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#MAX_VALUE\"\u003e\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e\u003c/a\u003e) times."
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fieldValuePairs"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFields",
      "comment": "Sets field parameters to their values given by fieldValuePairs that are pairs of a field and its value. For example,    setFields(Calendar.YEAR, 2013,\n             Calendar.MONTH, Calendar.DECEMBER,\n             Calendar.DAY_OF_MONTH, 23); is equivalent to the sequence of the following set calls:    set(Calendar.YEAR, 2013)\n   .set(Calendar.MONTH, Calendar.DECEMBER)\n   .set(Calendar.DAY_OF_MONTH, 23);",
      "tagMap": {
        "param": [
          "\u003ccode\u003efieldValuePairs\u003c/code\u003e - field-value pairs"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efieldValuePairs\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of fields are invalid, or if \n\u003ccode\u003efieldValuePairs.length\u003c/code\u003e is an odd number.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the instant value has been set, or if fields have been set too many (approximately \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#MAX_VALUE\"\u003e\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e\u003c/a\u003e) times."
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "year"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "month"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dayOfMonth"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setDate",
      "comment": "Sets the date field parameters to the values given by year, month, and dayOfMonth. This method is equivalent to a call to:    setFields(Calendar.YEAR, year,\n             Calendar.MONTH, month,\n             Calendar.DAY_OF_MONTH, dayOfMonth);",
      "tagMap": {
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#YEAR\"\u003e\u003ccode\u003eYEAR\u003c/code\u003e\u003c/a\u003e value",
          "\u003ccode\u003emonth\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#MONTH\"\u003e\u003ccode\u003eMONTH\u003c/code\u003e\u003c/a\u003e value (the month numbering is \n\u003cem\u003e0-based\u003c/em\u003e).",
          "\u003ccode\u003edayOfMonth\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#DAY_OF_MONTH\"\u003e\u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e\u003c/a\u003e value"
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hourOfDay"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "minute"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "second"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTimeOfDay",
      "comment": "Sets the time of day field parameters to the values given by hourOfDay, minute, and second. This method is equivalent to a call to:    setTimeOfDay(hourOfDay, minute, second, 0);",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehourOfDay\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#HOUR_OF_DAY\"\u003e\u003ccode\u003eHOUR_OF_DAY\u003c/code\u003e\u003c/a\u003e value (24-hour clock)",
          "\u003ccode\u003eminute\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#MINUTE\"\u003e\u003ccode\u003eMINUTE\u003c/code\u003e\u003c/a\u003e value",
          "\u003ccode\u003esecond\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SECOND\"\u003e\u003ccode\u003eSECOND\u003c/code\u003e\u003c/a\u003e value"
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "hourOfDay"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "minute"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "second"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "millis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTimeOfDay",
      "comment": "Sets the time of day field parameters to the values given by hourOfDay, minute, second, and millis. This method is equivalent to a call to:    setFields(Calendar.HOUR_OF_DAY, hourOfDay,\n             Calendar.MINUTE, minute,\n             Calendar.SECOND, second,\n             Calendar.MILLISECOND, millis);",
      "tagMap": {
        "param": [
          "\u003ccode\u003ehourOfDay\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#HOUR_OF_DAY\"\u003e\u003ccode\u003eHOUR_OF_DAY\u003c/code\u003e\u003c/a\u003e value (24-hour clock)",
          "\u003ccode\u003eminute\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#MINUTE\"\u003e\u003ccode\u003eMINUTE\u003c/code\u003e\u003c/a\u003e value",
          "\u003ccode\u003esecond\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SECOND\"\u003e\u003ccode\u003eSECOND\u003c/code\u003e\u003c/a\u003e value",
          "\u003ccode\u003emillis\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#MILLISECOND\"\u003e\u003ccode\u003eMILLISECOND\u003c/code\u003e\u003c/a\u003e value"
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "weekYear"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "weekOfYear"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dayOfWeek"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setWeekDate",
      "comment": "Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week. If the specified calendar doesn\u0027t support week dates, the build method will throw an IllegalArgumentException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setWeekDate(int,int,int)\"\u003e\u003ccode\u003eCalendar.setWeekDate(int, int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#isWeekDateSupported()\"\u003e\u003ccode\u003eCalendar.isWeekDateSupported()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eweekYear\u003c/code\u003e - the week year",
          "\u003ccode\u003eweekOfYear\u003c/code\u003e - the week number based on \n\u003ccode\u003eweekYear\u003c/code\u003e",
          "\u003ccode\u003edayOfWeek\u003c/code\u003e - the day of week value: one of the constants for the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#DAY_OF_WEEK\"\u003e\u003ccode\u003eDAY_OF_WEEK\u003c/code\u003e\u003c/a\u003e field: \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SUNDAY\"\u003e\u003ccode\u003eSUNDAY\u003c/code\u003e\u003c/a\u003e, ..., \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SATURDAY\"\u003e\u003ccode\u003eSATURDAY\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.TimeZone",
            "type": "Class"
          },
          "field": {
            "name": "zone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTimeZone",
      "comment": "Sets the time zone parameter to the given zone. If no time zone parameter is given to this Calendar.Builder, the default {@code TimeZone} will be used in the build method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setTimeZone(java.util.TimeZone)\"\u003e\u003ccode\u003eCalendar.setTimeZone(TimeZone)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTimeZone\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ezone\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "lenient"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLenient",
      "comment": "Sets the lenient mode parameter to the value given by lenient. If no lenient parameter is given to this Calendar.Builder, lenient mode will be used in the build method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setLenient(boolean)\"\u003e\u003ccode\u003eCalendar.setLenient(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elenient\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e for lenient mode; \n\u003ccode\u003efalse\u003c/code\u003e for non-lenient mode"
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCalendarType",
      "comment": "Sets the calendar type parameter to the given type. The calendar type given by this method has precedence over any explicit or implicit calendar type given by the locale. In addition to the available calendar types returned by the Calendar.getAvailableCalendarTypes method, \"gregorian\" and \"iso8601\" as aliases of \"gregory\" can be used with this method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getCalendarType()\"\u003e\u003ccode\u003eCalendar.getCalendarType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getAvailableCalendarTypes()\"\u003e\u003ccode\u003eCalendar.getAvailableCalendarTypes()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the calendar type"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is unknown",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if another calendar type has already been set"
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLocale",
      "comment": "Sets the locale parameter to the given locale. If no locale is given to this Calendar.Builder, the default {@code Locale} for Locale.Category.FORMAT will be used. If no calendar type is explicitly given by a call to the setCalendarType method, the Locale value is used to determine what type of Calendar to be built. If no week definition parameters are explicitly given by a call to the setWeekDefinition method, the Locale\u0027s default values are used.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getInstance(java.util.Locale)\"\u003e\u003ccode\u003eCalendar.getInstance(Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar$Builder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "firstDayOfWeek"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "minimalDaysInFirstWeek"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setWeekDefinition",
      "comment": "Sets the week definition parameters to the values given by firstDayOfWeek and minimalDaysInFirstWeek that are used to determine the first week of a year. The parameters given by this method have precedence over the default values given by the locale.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getFirstDayOfWeek()\"\u003e\u003ccode\u003eCalendar.getFirstDayOfWeek()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimalDaysInFirstWeek()\"\u003e\u003ccode\u003eCalendar.getMinimalDaysInFirstWeek()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efirstDayOfWeek\u003c/code\u003e - the first day of a week; one of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SUNDAY\"\u003e\u003ccode\u003eCalendar.SUNDAY\u003c/code\u003e\u003c/a\u003e to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SATURDAY\"\u003e\u003ccode\u003eCalendar.SATURDAY\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003eminimalDaysInFirstWeek\u003c/code\u003e - the minimal number of days in the first week (1..7)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efirstDayOfWeek\u003c/code\u003e or \n\u003ccode\u003eminimalDaysInFirstWeek\u003c/code\u003e is invalid"
        ],
        "return": [
          "this \n\u003ccode\u003eCalendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "build",
      "comment": "Returns a Calendar built from the parameters set by the setter methods. The calendar type given by the setCalendarType method or the locale is used to determine what Calendar to be created. If no explicit calendar type is given, the locale\u0027s default calendar is created. If the calendar type is \"iso8601\", the Gregorian change date of a GregorianCalendar is set to Date(Long.MIN_VALUE) to be the proleptic Gregorian calendar. Its week definition parameters are also set to be compatible with the ISO 8601 standard. Note that the getCalendarType method of a GregorianCalendar created with \"iso8601\" returns \"gregory\". The default values are used for locale and time zone if these parameters haven\u0027t been given explicitly. If the locale contains the time zone with \"tz\" Unicode extension, and time zone hasn\u0027t been given explicitly, time zone in the locale is used. Any out of range field values are either normalized in lenient mode or detected as an invalid value in non-lenient mode.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getInstance(java.util.TimeZone,java.util.Locale)\"\u003e\u003ccode\u003eCalendar.getInstance(TimeZone, Locale)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#getDefault()\"\u003e\u003ccode\u003eTimeZone.getDefault()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the calendar type is unknown, or if any invalid field values are given in non-lenient mode, or if a week date is given for the calendar type that doesn\u0027t support week dates."
        ],
        "return": [
          "a \n\u003ccode\u003eCalendar\u003c/code\u003e built with parameters of this \n\u003ccode\u003e Calendar.Builder\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a Calendar.Builder.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "java.util.Calendar$Builder",
  "comment": "\u003ccode\u003eCalendar.Builder\u003c/code\u003e is used for creating a \n\u003ccode\u003eCalendar\u003c/code\u003e from various date-time parameters. \n\u003cp\u003eThere are two ways to set a \u003ccode\u003eCalendar\u003c/code\u003e to a date-time value. One is to set the instant parameter to a millisecond offset from the \u003ca href\u003d\"Calendar.html#Epoch\"\u003eEpoch\u003c/a\u003e. The other is to set individual field parameters, such as \u003ca href\u003d\"Calendar.html#YEAR\"\u003e\u003ccode\u003eYEAR\u003c/code\u003e\u003c/a\u003e, to their desired values. These two ways can\u0027t be mixed. Trying to set both the instant and individual fields will cause an \u003ca href\u003d\"../lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eIllegalStateException\u003c/code\u003e\u003c/a\u003e to be thrown. However, it is permitted to override previous values of the instant or field parameters. \u003c/p\u003e\n\u003cp\u003eIf no enough field parameters are given for determining date and/or time, calendar specific default values are used when building a \u003ccode\u003eCalendar\u003c/code\u003e. For example, if the \u003ca href\u003d\"Calendar.html#YEAR\"\u003e\u003ccode\u003eYEAR\u003c/code\u003e\u003c/a\u003e value isn\u0027t given for the Gregorian calendar, 1970 will be used. If there are any conflicts among field parameters, the \u003ca href\u003d\"Calendar.html#resolution\"\u003e resolution rules\u003c/a\u003e are applied. Therefore, the order of field setting matters. \u003c/p\u003e\n\u003cp\u003eIn addition to the date-time parameters, the \u003ca href\u003d\"#setLocale(java.util.Locale)\"\u003elocale\u003c/a\u003e, \u003ca href\u003d\"#setTimeZone(java.util.TimeZone)\"\u003etime zone\u003c/a\u003e, \u003ca href\u003d\"#setWeekDefinition(int,int)\"\u003eweek definition\u003c/a\u003e, and \u003ca href\u003d\"#setLenient(boolean)\"\u003eleniency mode\u003c/a\u003e parameters can be set. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExamples\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003eThe following are sample usages. Sample code assumes that the \u003ccode\u003eCalendar\u003c/code\u003e constants are statically imported. \u003c/p\u003e\n\u003cp\u003eThe following code produces a \u003ccode\u003eCalendar\u003c/code\u003e with date 2012-12-31 (Gregorian) because Monday is the first day of a week with the \u003ca href\u003d\"GregorianCalendar.html#iso8601_compatible_setting\"\u003e ISO 8601 compatible week parameters\u003c/a\u003e. \u003c/p\u003e\n\u003cpre\u003e   Calendar cal \u003d new Calendar.Builder().setCalendarType(\"iso8601\")\n                        .setWeekDate(2013, 1, MONDAY).build();\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe following code produces a Japanese \u003ccode\u003eCalendar\u003c/code\u003e with date 1989-01-08 (Gregorian), assuming that the default \u003ca href\u003d\"Calendar.html#ERA\"\u003e\u003ccode\u003eERA\u003c/code\u003e\u003c/a\u003e is \u003cem\u003eHeisei\u003c/em\u003e that started on that day. \u003c/p\u003e\n\u003cpre\u003e   Calendar cal \u003d new Calendar.Builder().setCalendarType(\"japanese\")\n                        .setFields(YEAR, 1, DAY_OF_YEAR, 1).build();\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getInstance(java.util.TimeZone,java.util.Locale)\"\u003e\u003ccode\u003eCalendar.getInstance(TimeZone, Locale)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#fields\"\u003e\u003ccode\u003eCalendar.fields\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}