{
  "packageName": "java.util",
  "simpleName": "TimeZone",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SHORT",
      "comment": "A style specifier for getDisplayName() indicating a short name, such as \"PST.\"",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#LONG\"\u003e\u003ccode\u003eLONG\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.TimeZone.SHORT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LONG",
      "comment": "A style specifier for getDisplayName() indicating a long name, such as \"Pacific Standard Time.\"",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#SHORT\"\u003e\u003ccode\u003eSHORT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.TimeZone.LONG\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "era"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "year"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "month"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "day"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "dayOfWeek"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "milliseconds"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getOffset",
      "comment": "Gets the time zone offset, for current date, modified in case of daylight savings. This is the offset to add to UTC to get local time. This method returns a historically correct offset if an underlying TimeZone implementation subclass supports historical Daylight Saving Time schedule and GMT offset changes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#ZONE_OFFSET\"\u003e\u003ccode\u003eCalendar.ZONE_OFFSET\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#DST_OFFSET\"\u003e\u003ccode\u003eCalendar.DST_OFFSET\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eera\u003c/code\u003e - the era of the given date.",
          "\u003ccode\u003eyear\u003c/code\u003e - the year in the given date.",
          "\u003ccode\u003emonth\u003c/code\u003e - the month in the given date. Month is 0-based. e.g., 0 for January.",
          "\u003ccode\u003eday\u003c/code\u003e - the day-in-month of the given date.",
          "\u003ccode\u003edayOfWeek\u003c/code\u003e - the day-of-week of the given date.",
          "\u003ccode\u003emilliseconds\u003c/code\u003e - the milliseconds in day in \n\u003cem\u003estandard\u003c/em\u003e local time."
        ],
        "return": [
          "the offset in milliseconds to add to GMT to get local time."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "date"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getOffset",
      "comment": "Returns the offset of this time zone from UTC at the specified date. If Daylight Saving Time is in effect at the specified date, the offset value is adjusted with the amount of daylight saving. This method returns a historically correct offset value if an underlying TimeZone implementation subclass supports historical Daylight Saving Time schedule and GMT offset changes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#ZONE_OFFSET\"\u003e\u003ccode\u003eCalendar.ZONE_OFFSET\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#DST_OFFSET\"\u003e\u003ccode\u003eCalendar.DST_OFFSET\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edate\u003c/code\u003e - the date represented in milliseconds since January 1, 1970 00:00:00 GMT"
        ],
        "return": [
          "the amount of time in milliseconds to add to UTC to get local time."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offsetMillis"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "setRawOffset",
      "comment": "Sets the base time zone offset to GMT. This is the offset to add to UTC to get local time. If an underlying TimeZone implementation subclass supports historical GMT offset changes, the specified GMT offset is set as the latest GMT offset and the difference from the known latest GMT offset value is used to adjust all historical GMT offset values.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoffsetMillis\u003c/code\u003e - the given base time zone offset to GMT."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRawOffset",
      "comment": "Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone. Because this value is not affected by daylight saving time, it is called raw offset. If an underlying TimeZone implementation subclass supports historical GMT offset changes, the method returns the raw offset value of the current date. In Honolulu, for example, its raw offset changed from GMT-10:30 to GMT-10:00 in 1947, and this method always returns -36000000 milliseconds (i.e., -10 hours).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#ZONE_OFFSET\"\u003e\u003ccode\u003eCalendar.ZONE_OFFSET\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the amount of raw offset time in milliseconds to add to UTC."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getID",
      "comment": "Gets the ID of this time zone.",
      "tagMap": {
        "return": [
          "the ID of this time zone."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "ID"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setID",
      "comment": "Sets the time zone ID. This does not change any other data in the time zone object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eID\u003c/code\u003e - the new time zone ID."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDisplayName",
      "comment": "Returns a long standard time name of this TimeZone suitable for presentation to the user in the default locale. This method is equivalent to:  getDisplayName(false, LONG,\n                Locale.getDefault(Locale.Category.DISPLAY))",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#getDisplayName(boolean,int,java.util.Locale)\"\u003e\u003ccode\u003egetDisplayName(boolean, int, Locale)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html\" title\u003d\"enum class in java.util\"\u003e\u003ccode\u003eLocale.Category\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the human-readable name of this time zone in the default locale."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDisplayName",
      "comment": "Returns a long standard time name of this TimeZone suitable for presentation to the user in the specified locale. This method is equivalent to:  getDisplayName(false, LONG, locale)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#getDisplayName(boolean,int,java.util.Locale)\"\u003e\u003ccode\u003egetDisplayName(boolean, int, Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - the locale in which to supply the display name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "the human-readable name of this time zone in the given locale."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "daylight"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "style"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDisplayName",
      "comment": "Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale. If the specified daylight is true, a Daylight Saving Time name is returned (even if this TimeZone doesn\u0027t observe Daylight Saving Time). Otherwise, a Standard Time name is returned. This method is equivalent to:  getDisplayName(daylight, style,\n                Locale.getDefault(Locale.Category.DISPLAY))",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#getDisplayName(boolean,int,java.util.Locale)\"\u003e\u003ccode\u003egetDisplayName(boolean, int, Locale)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003eLocale.getDefault(Locale.Category)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html\" title\u003d\"enum class in java.util\"\u003e\u003ccode\u003eLocale.Category\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormatSymbols.html#getZoneStrings()\"\u003e\u003ccode\u003eDateFormatSymbols.getZoneStrings()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edaylight\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e specifying a Daylight Saving Time name, or \n\u003ccode\u003efalse\u003c/code\u003e specifying a Standard Time name",
          "\u003ccode\u003estyle\u003c/code\u003e - either \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#LONG\"\u003e\u003ccode\u003eLONG\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#SHORT\"\u003e\u003ccode\u003eSHORT\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estyle\u003c/code\u003e is invalid."
        ],
        "return": [
          "the human-readable name of this time zone in the default locale."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "daylight"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "style"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayName",
      "comment": "Returns a name in the specified style of this TimeZone suitable for presentation to the user in the specified locale. If the specified daylight is true, a Daylight Saving Time name is returned (even if this TimeZone doesn\u0027t observe Daylight Saving Time). Otherwise, a Standard Time name is returned. When looking up a time zone name, the default {@code Locale} search path of {@code ResourceBundle} derived from the specified locale is used. (No fallback {@code Locale} search is performed.) If a time zone name in any Locale of the search path, including Locale.ROOT, is found, the name is returned. Otherwise, a string in the normalized custom ID format is returned.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormatSymbols.html#getZoneStrings()\"\u003e\u003ccode\u003eDateFormatSymbols.getZoneStrings()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edaylight\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e specifying a Daylight Saving Time name, or \n\u003ccode\u003efalse\u003c/code\u003e specifying a Standard Time name",
          "\u003ccode\u003estyle\u003c/code\u003e - either \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#LONG\"\u003e\u003ccode\u003eLONG\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#SHORT\"\u003e\u003ccode\u003eSHORT\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale in which to supply the display name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estyle\u003c/code\u003e is invalid.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "the human-readable name of this time zone in the given locale."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDSTSavings",
      "comment": "Returns the amount of time to be added to local standard time to get local wall clock time. The default implementation returns 3600000 milliseconds (i.e., one hour) if a call to useDaylightTime() returns true. Otherwise, 0 (zero) is returned. If an underlying TimeZone implementation subclass supports historical and future Daylight Saving Time schedule changes, this method returns the amount of saving time of the last known Daylight Saving Time rule that can be a future prediction. If the amount of saving time at any given time stamp is required, construct a Calendar with this TimeZone and the time stamp, and call Calendar.get(Calendar.DST_OFFSET).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#inDaylightTime(java.util.Date)\"\u003e\u003ccode\u003einDaylightTime(Date)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#getOffset(long)\"\u003e\u003ccode\u003egetOffset(long)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#getOffset(int,int,int,int,int,int)\"\u003e\u003ccode\u003egetOffset(int,int,int,int,int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#ZONE_OFFSET\"\u003e\u003ccode\u003eCalendar.ZONE_OFFSET\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the amount of saving time in milliseconds"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "useDaylightTime",
      "comment": "Queries if this TimeZone uses Daylight Saving Time. If an underlying TimeZone implementation subclass supports historical and future Daylight Saving Time schedule changes, this method refers to the last known Daylight Saving Time rule that can be a future prediction and may not be the same as the current rule. Consider calling observesDaylightTime() if the current rule should also be taken into account.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#inDaylightTime(java.util.Date)\"\u003e\u003ccode\u003einDaylightTime(Date)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#DST_OFFSET\"\u003e\u003ccode\u003eCalendar.DST_OFFSET\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eTimeZone\u003c/code\u003e uses Daylight Saving Time, \n\u003ccode\u003efalse\u003c/code\u003e, otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "observesDaylightTime",
      "comment": "Returns true if this TimeZone is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time. The default implementation returns true if useDaylightTime() or inDaylightTime(new Date()) returns true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#useDaylightTime()\"\u003e\u003ccode\u003euseDaylightTime()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#inDaylightTime(java.util.Date)\"\u003e\u003ccode\u003einDaylightTime(Date)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#DST_OFFSET\"\u003e\u003ccode\u003eCalendar.DST_OFFSET\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eTimeZone\u003c/code\u003e is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "date"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "inDaylightTime",
      "comment": "Queries if the given date is in Daylight Saving Time in this time zone.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edate\u003c/code\u003e - the given Date."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given date is in Daylight Saving Time, \n\u003ccode\u003efalse\u003c/code\u003e, otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.TimeZone",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "ID"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getTimeZone",
      "comment": "Gets the TimeZone for the given ID.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eID\u003c/code\u003e - the ID for a \n\u003ccode\u003eTimeZone\u003c/code\u003e, either an abbreviation such as \"PST\", a full name such as \"America/Los_Angeles\", or a custom ID such as \"GMT-8:00\". Note that the support of abbreviations is for JDK 1.1.x compatibility only and full names should be used."
        ],
        "return": [
          "the specified \n\u003ccode\u003eTimeZone\u003c/code\u003e, or the GMT zone if the given ID cannot be understood."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.TimeZone",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.ZoneId",
            "type": "Class"
          },
          "field": {
            "name": "zoneId"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getTimeZone",
      "comment": "Gets the TimeZone for the given zoneId.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ezoneId\u003c/code\u003e - a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/time/ZoneId.html\" title\u003d\"class in java.time\"\u003e\u003ccode\u003eZoneId\u003c/code\u003e\u003c/a\u003e from which the time zone ID is obtained"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ezoneId\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the specified \n\u003ccode\u003eTimeZone\u003c/code\u003e, or the GMT zone if the given ID cannot be understood."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.ZoneId",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toZoneId",
      "comment": "Converts this TimeZone object to a ZoneId.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eZoneId\u003c/code\u003e representing the same time zone as this \n\u003ccode\u003eTimeZone\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "rawOffset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAvailableIDs",
      "comment": "Gets the available IDs according to the given time zone offset in milliseconds.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#getRawOffset()\"\u003e\u003ccode\u003egetRawOffset()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003erawOffset\u003c/code\u003e - the given time zone GMT offset in milliseconds."
        ],
        "return": [
          "an array of IDs, where the time zone for that ID has the specified GMT offset. For example, \"America/Phoenix\" and \"America/Denver\" both have GMT-07:00, but differ in daylight saving behavior."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAvailableIDs",
      "comment": "Gets all the available IDs supported.",
      "tagMap": {
        "return": [
          "an array of IDs."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.TimeZone",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefault",
      "comment": "Gets the default TimeZone of the Java virtual machine. If the cached default TimeZone is available, its clone is returned. Otherwise, the method takes the following steps to determine the default time zone. Use the user.timezone property value as the default time zone ID if it\u0027s available. Detect the platform time zone ID. The source of the platform time zone and ID mapping may vary with implementation. Use GMT as the last resort if the given or detected time zone ID is unknown. The default TimeZone created from the ID is cached, and its clone is returned. The user.timezone property value is set to the ID upon return.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#setDefault(java.util.TimeZone)\"\u003e\u003ccode\u003esetDefault(TimeZone)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default \n\u003ccode\u003eTimeZone\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.TimeZone",
            "type": "Class"
          },
          "field": {
            "name": "zone"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDefault",
      "comment": "Sets the TimeZone that is returned by the getDefault method. zone is cached. If zone is null, the cached default TimeZone is cleared. This method doesn\u0027t change the value of the user.timezone property.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#getDefault()\"\u003e\u003ccode\u003egetDefault()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/PropertyPermission.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003ePropertyPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the new default \n\u003ccode\u003eTimeZone\u003c/code\u003e, or null"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the security manager\u0027s \n\u003ccode\u003echeckPermission\u003c/code\u003e denies \n\u003ccode\u003ePropertyPermission(\"user.timezone\", \"write\")\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.TimeZone",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasSameRules",
      "comment": "Returns true if this zone has the same rule and offset as another zone. That is, if this zone differs only in ID, if at all. Returns false if the other zone is null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the \n\u003ccode\u003eTimeZone\u003c/code\u003e object to be compared with"
        ],
        "return": [
          "true if the other zone is not null and is the same as this one, with the possible exception of the ID"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates a copy of this TimeZone.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this \n\u003ccode\u003eTimeZone\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Sole constructor. (For invocation by subclass constructors, typically implicit.)",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.TimeZone",
  "comment": "\u003ccode\u003eTimeZone\u003c/code\u003e represents a time zone offset, and also figures out daylight savings. \n\u003cp\u003e Typically, you get a \u003ccode\u003eTimeZone\u003c/code\u003e using \u003ccode\u003egetDefault\u003c/code\u003e which creates a \u003ccode\u003eTimeZone\u003c/code\u003e based on the time zone where the program is running. For example, for a program running in Japan, \u003ccode\u003egetDefault\u003c/code\u003e creates a \u003ccode\u003eTimeZone\u003c/code\u003e object based on Japanese Standard Time. \u003c/p\u003e\n\u003cp\u003e You can also get a \u003ccode\u003eTimeZone\u003c/code\u003e using \u003ccode\u003egetTimeZone\u003c/code\u003e along with a time zone ID. For instance, the time zone ID for the U.S. Pacific Time zone is \"America/Los_Angeles\". So, you can get a U.S. Pacific Time \u003ccode\u003eTimeZone\u003c/code\u003e object with: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e TimeZone tz \u003d TimeZone.getTimeZone(\"America/Los_Angeles\");\n \u003c/pre\u003e\n\u003c/blockquote\u003e You can use the \n\u003ccode\u003egetAvailableIDs\u003c/code\u003e method to iterate through all the supported time zone IDs. You can then choose a supported ID to get a \n\u003ccode\u003eTimeZone\u003c/code\u003e. If the time zone you want is not represented by one of the supported IDs, then a custom time zone ID can be specified to produce a TimeZone. The syntax of a custom time zone ID is: \n\u003cblockquote\u003e\n \u003cpre\u003e \u003ca id\u003d\"CustomID\"\u003e\u003ci\u003eCustomID:\u003c/i\u003e\u003c/a\u003e\n         \u003ccode\u003eGMT\u003c/code\u003e \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eHours\u003c/i\u003e \u003ccode\u003e:\u003c/code\u003e \u003ci\u003eMinutes\u003c/i\u003e\n         \u003ccode\u003eGMT\u003c/code\u003e \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eHours\u003c/i\u003e \u003ci\u003eMinutes\u003c/i\u003e\n         \u003ccode\u003eGMT\u003c/code\u003e \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eHours\u003c/i\u003e\n \u003ci\u003eSign:\u003c/i\u003e one of\n         \u003ccode\u003e+ -\u003c/code\u003e\n \u003ci\u003eHours:\u003c/i\u003e\n         \u003ci\u003eDigit\u003c/i\u003e\n         \u003ci\u003eDigit\u003c/i\u003e \u003ci\u003eDigit\u003c/i\u003e\n \u003ci\u003eMinutes:\u003c/i\u003e\n         \u003ci\u003eDigit\u003c/i\u003e \u003ci\u003eDigit\u003c/i\u003e\n \u003ci\u003eDigit:\u003c/i\u003e one of\n         \u003ccode\u003e0 1 2 3 4 5 6 7 8 9\u003c/code\u003e\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003ci\u003eHours\u003c/i\u003e must be between 0 to 23 and \n\u003ci\u003eMinutes\u003c/i\u003e must be between 00 to 59. For example, \"GMT+10\" and \"GMT+0010\" mean ten hours and ten minutes ahead of GMT, respectively. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The format is locale independent and digits must be taken from the Basic Latin block of the Unicode standard. No daylight saving time transition schedule can be specified with a custom time zone ID. If the specified string doesn\u0027t match the syntax, \u003ccode\u003e\"GMT\"\u003c/code\u003e is used. \u003c/p\u003e\n\u003cp\u003e When creating a \u003ccode\u003eTimeZone\u003c/code\u003e, the specified custom time zone ID is normalized in the following syntax: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e \u003ca id\u003d\"NormalizedCustomID\"\u003e\u003ci\u003eNormalizedCustomID:\u003c/i\u003e\u003c/a\u003e\n         \u003ccode\u003eGMT\u003c/code\u003e \u003ci\u003eSign\u003c/i\u003e \u003ci\u003eTwoDigitHours\u003c/i\u003e \u003ccode\u003e:\u003c/code\u003e \u003ci\u003eMinutes\u003c/i\u003e\n \u003ci\u003eSign:\u003c/i\u003e one of\n         \u003ccode\u003e+ -\u003c/code\u003e\n \u003ci\u003eTwoDigitHours:\u003c/i\u003e\n         \u003ci\u003eDigit\u003c/i\u003e \u003ci\u003eDigit\u003c/i\u003e\n \u003ci\u003eMinutes:\u003c/i\u003e\n         \u003ci\u003eDigit\u003c/i\u003e \u003ci\u003eDigit\u003c/i\u003e\n \u003ci\u003eDigit:\u003c/i\u003e one of\n         \u003ccode\u003e0 1 2 3 4 5 6 7 8 9\u003c/code\u003e\n \u003c/pre\u003e\n\u003c/blockquote\u003e For example, TimeZone.getTimeZone(\"GMT-8\").getID() returns \"GMT-08:00\". \n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003eThree-letter time zone IDs\u003c/h2\u003e For compatibility with JDK 1.1.x, some other three-letter time zone IDs (such as \"PST\", \"CTT\", \"AST\") are also supported. However, \n\u003cstrong\u003etheir use is deprecated\u003c/strong\u003e because the same abbreviation is often used for multiple time zones (for example, \"CST\" could be U.S. \"Central Standard Time\" and \"China Standard Time\"), and the Java platform can then only recognize one of them.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eCalendar\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/GregorianCalendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eGregorianCalendar\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SimpleTimeZone.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eSimpleTimeZone\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.TimeZone\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}