{
  "packageName": "java.util.regex",
  "simpleName": "Pattern",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNIX_LINES",
      "comment": "Enables Unix lines mode. In this mode, only the \u0027\\n\u0027 line terminator is recognized in the behavior of ., ^, and $. Unix lines mode can also be enabled via the embedded flag expression (?d).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.regex.Pattern.UNIX_LINES\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CASE_INSENSITIVE",
      "comment": "Enables case-insensitive matching. By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched. Unicode-aware case-insensitive matching can be enabled by specifying the UNICODE_CASE flag in conjunction with this flag. Case-insensitive matching can also be enabled via the embedded flag expression (?i). Specifying this flag may impose a slight performance penalty.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.regex.Pattern.CASE_INSENSITIVE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "COMMENTS",
      "comment": "Permits whitespace and comments in pattern. In this mode, whitespace is ignored, and embedded comments starting with # are ignored until the end of a line. Comments mode can also be enabled via the embedded flag expression (?x).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.regex.Pattern.COMMENTS\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MULTILINE",
      "comment": "Enables multiline mode. In multiline mode the expressions ^ and $ match just after or just before, respectively, a line terminator or the end of the input sequence. By default these expressions only match at the beginning and the end of the entire input sequence. Multiline mode can also be enabled via the embedded flag expression (?m).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.regex.Pattern.MULTILINE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LITERAL",
      "comment": "Enables literal parsing of the pattern. When this flag is specified then the input string that specifies the pattern is treated as a sequence of literal characters. Metacharacters or escape sequences in the input sequence will be given no special meaning. The flags CASE_INSENSITIVE and UNICODE_CASE retain their impact on matching when used in conjunction with this flag. The other flags become superfluous. There is no embedded flag character for enabling literal parsing.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.regex.Pattern.LITERAL\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DOTALL",
      "comment": "Enables dotall mode. In dotall mode, the expression . matches any character, including a line terminator. By default this expression does not match line terminators. Dotall mode can also be enabled via the embedded flag expression (?s). (The s is a mnemonic for \"single-line\" mode, which is what this is called in Perl.)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.regex.Pattern.DOTALL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNICODE_CASE",
      "comment": "Enables Unicode-aware case folding. When this flag is specified then case-insensitive matching, when enabled by the CASE_INSENSITIVE flag, is done in a manner consistent with the Unicode Standard. By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched. Unicode-aware case folding can also be enabled via the embedded flag expression (?u). Specifying this flag may impose a performance penalty.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.regex.Pattern.UNICODE_CASE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CANON_EQ",
      "comment": "Enables canonical equivalence. When this flag is specified then two characters will be considered to match if, and only if, their full canonical decompositions match. The expression \"a\\u030A\", for example, will match the string \"\\u00E5\" when this flag is specified. By default, matching does not take canonical equivalence into account. There is no embedded flag character for enabling canonical equivalence. Specifying this flag may impose a performance penalty.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.regex.Pattern.CANON_EQ\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNICODE_CHARACTER_CLASS",
      "comment": "Enables the Unicode version of Predefined character classes and POSIX character classes. When this flag is specified then the (US-ASCII only) Predefined character classes and POSIX character classes are in conformance with Unicode Technical Standard #18: Unicode Regular Expression Annex C: Compatibility Properties. The UNICODE_CHARACTER_CLASS mode can also be enabled via the embedded flag expression (?U). The flag implies UNICODE_CASE, that is, it enables Unicode-aware case folding. Specifying this flag may impose a performance penalty.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.regex.Pattern.UNICODE_CHARACTER_CLASS\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.regex.Pattern",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "regex"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "compile",
      "comment": "Compiles the given regular expression into a pattern.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eregex\u003c/code\u003e - The expression to be compiled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/PatternSyntaxException.html\" title\u003d\"class in java.util.regex\"\u003ePatternSyntaxException\u003c/a\u003e\u003c/code\u003e - If the expression\u0027s syntax is invalid"
        ],
        "return": [
          "the given regular expression compiled into a pattern"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.regex.Pattern",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "regex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "flags"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "compile",
      "comment": "Compiles the given regular expression into a pattern with the given flags.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eregex\u003c/code\u003e - The expression to be compiled",
          "\u003ccode\u003eflags\u003c/code\u003e - Match flags, a bit mask that may include \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html#CASE_INSENSITIVE\"\u003e\u003ccode\u003eCASE_INSENSITIVE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html#MULTILINE\"\u003e\u003ccode\u003eMULTILINE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html#DOTALL\"\u003e\u003ccode\u003eDOTALL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html#UNICODE_CASE\"\u003e\u003ccode\u003eUNICODE_CASE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html#CANON_EQ\"\u003e\u003ccode\u003eCANON_EQ\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html#UNIX_LINES\"\u003e\u003ccode\u003eUNIX_LINES\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html#LITERAL\"\u003e\u003ccode\u003eLITERAL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html#UNICODE_CHARACTER_CLASS\"\u003e\u003ccode\u003eUNICODE_CHARACTER_CLASS\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html#COMMENTS\"\u003e\u003ccode\u003eCOMMENTS\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If bit values other than those corresponding to the defined match flags are set in \n\u003ccode\u003eflags\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/PatternSyntaxException.html\" title\u003d\"class in java.util.regex\"\u003ePatternSyntaxException\u003c/a\u003e\u003c/code\u003e - If the expression\u0027s syntax is invalid"
        ],
        "return": [
          "the given regular expression compiled into a pattern with the given flags"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "pattern",
      "comment": "Returns the regular expression from which this pattern was compiled.",
      "tagMap": {
        "return": [
          "The source of this pattern"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the string representation of this pattern. This is the regular expression from which this pattern was compiled.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The string representation of this pattern"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.regex.Matcher",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "matcher",
      "comment": "Creates a matcher that will match the given input against this pattern.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - The character sequence to be matched"
        ],
        "return": [
          "A new matcher for this pattern"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "flags",
      "comment": "Returns this pattern\u0027s match flags.",
      "tagMap": {
        "return": [
          "The match flags specified when this pattern was compiled"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "regex"
          }
        },
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "matches",
      "comment": "Compiles the given regular expression and attempts to match the given input against it. An invocation of this convenience method of the form  Pattern.matches(regex, input); behaves in exactly the same way as the expression  Pattern.compile(regex).matcher(input).matches() If a pattern is to be used multiple times, compiling it once and reusing it will be more efficient than invoking this method each time.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eregex\u003c/code\u003e - The expression to be compiled",
          "\u003ccode\u003einput\u003c/code\u003e - The character sequence to be matched"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/PatternSyntaxException.html\" title\u003d\"class in java.util.regex\"\u003ePatternSyntaxException\u003c/a\u003e\u003c/code\u003e - If the expression\u0027s syntax is invalid"
        ],
        "return": [
          "whether or not the regular expression matches on the input"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "limit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "split",
      "comment": "Splits the given input sequence around matches of this pattern. The array returned by this method contains each substring of the input sequence that is terminated by another subsequence that matches this pattern or is terminated by the end of the input sequence. The substrings in the array are in the order in which they occur in the input. If this pattern does not match any subsequence of the input then the resulting array has just one element, namely the input sequence in string form. When there is a positive-width match at the beginning of the input sequence then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring. The limit parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit is positive then the pattern will be applied at most limit - 1 times, the array\u0027s length will be no greater than limit, and the array\u0027s last entry will contain all input beyond the last matched delimiter. If the limit is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded. If the limit is negative then the pattern will be applied as many times as possible and the array can have any length. The input \"boo:and:foo\", for example, yields the following results with these parameters: Split example showing regex, limit, and result Regex Limit Result : 2 { \"boo\", \"and:foo\" } 5 { \"boo\", \"and\", \"foo\" } -2 { \"boo\", \"and\", \"foo\" } o 5 { \"b\", \"\", \":and:f\", \"\", \"\" } -2 { \"b\", \"\", \":and:f\", \"\", \"\" } 0 { \"b\", \"\", \":and:f\" }",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - The character sequence to be split",
          "\u003ccode\u003elimit\u003c/code\u003e - The result threshold, as described above"
        ],
        "return": [
          "The array of strings computed by splitting the input around matches of this pattern"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "split",
      "comment": "Splits the given input sequence around matches of this pattern. This method works as if by invoking the two-argument split method with the given input sequence and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array. The input \"boo:and:foo\", for example, yields the following results with these expressions: Split examples showing regex and result Regex Result : { \"boo\", \"and\", \"foo\" } o { \"b\", \"\", \":and:f\" }",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - The character sequence to be split"
        ],
        "return": [
          "The array of strings computed by splitting the input around matches of this pattern"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "quote",
      "comment": "Returns a literal pattern String for the specified String. This method produces a String that can be used to create a Pattern that would match the string s as if it were a literal pattern. Metacharacters or escape sequences in the input sequence will be given no special meaning.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - The string to be literalized"
        ],
        "return": [
          "A literal string replacement"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Predicate",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "asPredicate",
      "comment": "Creates a predicate that tests if this pattern is found in a given input string.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Matcher.html#find()\"\u003e\u003ccode\u003eMatcher.find()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method creates a predicate that behaves as if it creates a matcher from the input sequence and then calls \n\u003ccode\u003efind\u003c/code\u003e, for example a predicate of the form: \n\u003cpre\u003e\u003ccode\u003e\n   s -\u0026gt; matcher(s).find();\n \u003c/code\u003e\u003c/pre\u003e"
        ],
        "return": [
          "The predicate which can be used for finding a match on a subsequence of a string"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Predicate",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "asMatchPredicate",
      "comment": "Creates a predicate that tests if this pattern matches a given input string.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Matcher.html#matches()\"\u003e\u003ccode\u003eMatcher.matches()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method creates a predicate that behaves as if it creates a matcher from the input sequence and then calls \n\u003ccode\u003ematches\u003c/code\u003e, for example a predicate of the form: \n\u003cpre\u003e\u003ccode\u003e\n   s -\u0026gt; matcher(s).matches();\n \u003c/code\u003e\u003c/pre\u003e"
        ],
        "return": [
          "The predicate which can be used for matching an input string against this pattern."
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "splitAsStream",
      "comment": "Creates a stream from the given input sequence around matches of this pattern. The stream returned by this method contains each substring of the input sequence that is terminated by another subsequence that matches this pattern or is terminated by the end of the input sequence. The substrings in the stream are in the order in which they occur in the input. Trailing empty strings will be discarded and not encountered in the stream. If this pattern does not match any subsequence of the input then the resulting stream has just one element, namely the input sequence in string form. When there is a positive-width match at the beginning of the input sequence then an empty leading substring is included at the beginning of the stream. A zero-width match at the beginning however never produces such empty leading substring. If the input sequence is mutable, it must remain constant during the execution of the terminal stream operation. Otherwise, the result of the terminal stream operation is undefined.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/Pattern.html#split(java.lang.CharSequence)\"\u003e\u003ccode\u003esplit(CharSequence)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - The character sequence to be split"
        ],
        "return": [
          "The stream of strings computed by splitting the input around matches of this pattern"
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.util.regex.Pattern",
  "comment": "A compiled representation of a regular expression. \n\u003cp\u003e A regular expression, specified as a string, must first be compiled into an instance of this class. The resulting pattern can then be used to create a \u003ca href\u003d\"Matcher.html\" title\u003d\"class in java.util.regex\"\u003e\u003ccode\u003eMatcher\u003c/code\u003e\u003c/a\u003e object that can match arbitrary \u003ca href\u003d\"../../lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003echaracter sequences\u003c/a\u003e against the regular expression. All of the state involved in performing a match resides in the matcher, so many matchers can share the same pattern. \u003c/p\u003e\n\u003cp\u003e A typical invocation sequence is thus \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e Pattern p \u003d Pattern.\u003ca href\u003d\"#compile(java.lang.String)\"\u003e\u003ccode\u003ecompile\u003c/code\u003e\u003c/a\u003e(\"a*b\");\n Matcher m \u003d p.\u003ca href\u003d\"#matcher(java.lang.CharSequence)\"\u003e\u003ccode\u003ematcher\u003c/code\u003e\u003c/a\u003e(\"aaaaab\");\n boolean b \u003d m.\u003ca href\u003d\"Matcher.html#matches()\"\u003e\u003ccode\u003ematches\u003c/code\u003e\u003c/a\u003e();\u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A \u003ca href\u003d\"#matches(java.lang.String,java.lang.CharSequence)\"\u003e\u003ccode\u003ematches\u003c/code\u003e\u003c/a\u003e method is defined by this class as a convenience for when a regular expression is used just once. This method compiles an expression and matches an input sequence against it in a single invocation. The statement \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e boolean b \u003d Pattern.matches(\"a*b\", \"aaaaab\");\u003c/pre\u003e\n\u003c/blockquote\u003e is equivalent to the three statements above, though for repeated matches it is less efficient since it does not allow the compiled pattern to be reused. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Instances of this class are immutable and are safe for use by multiple concurrent threads. Instances of the \u003ca href\u003d\"Matcher.html\" title\u003d\"class in java.util.regex\"\u003e\u003ccode\u003eMatcher\u003c/code\u003e\u003c/a\u003e class are not safe for such use. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"sum\"\u003eSummary of regular-expression constructs\u003c/a\u003e\u003c/h2\u003e \n\u003ctable class\u003d\"borderless\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  Regular expression constructs, and what they match\n \u003c/caption\u003e \n \u003cthead style\u003d\"text-align:left\"\u003e \n  \u003ctr\u003e \n   \u003cth id\u003d\"construct\"\u003eConstruct\u003c/th\u003e \n   \u003cth id\u003d\"matches\"\u003eMatches\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody style\u003d\"text-align:left\"\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"characters\"\u003eCharacters\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight: normal\" id\u003d\"x\"\u003e\u003ci\u003ex\u003c/i\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters x\"\u003eThe character \u003ci\u003ex\u003c/i\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight: normal\" id\u003d\"backslash\"\u003e\u003ccode\u003e\\\\\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters backslash\"\u003eThe backslash character\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight: normal\" id\u003d\"octal_n\"\u003e\u003ccode\u003e\\0\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters octal_n\"\u003eThe character with octal value \u003ccode\u003e0\u003c/code\u003e\u003ci\u003en\u003c/i\u003e (0\u0026nbsp;\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e\u0026nbsp;7)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight: normal\" id\u003d\"octal_nn\"\u003e\u003ccode\u003e\\0\u003c/code\u003e\u003ci\u003enn\u003c/i\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters octal_nn\"\u003eThe character with octal value \u003ccode\u003e0\u003c/code\u003e\u003ci\u003enn\u003c/i\u003e (0\u0026nbsp;\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e\u0026nbsp;7)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight: normal\" id\u003d\"octal_nnn\"\u003e\u003ccode\u003e\\0\u003c/code\u003e\u003ci\u003emnn\u003c/i\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters octal_nnn\"\u003eThe character with octal value \u003ccode\u003e0\u003c/code\u003e\u003ci\u003emnn\u003c/i\u003e (0\u0026nbsp;\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e\u0026nbsp;\u003ci\u003em\u003c/i\u003e\u0026nbsp;\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e\u0026nbsp;3, 0\u0026nbsp;\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e\u0026nbsp;\u003ci\u003en\u003c/i\u003e\u0026nbsp;\u003ccode\u003e\u0026lt;\u003d\u003c/code\u003e\u0026nbsp;7)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight: normal\" id\u003d\"hex_hh\"\u003e\u003ccode\u003e\\x\u003c/code\u003e\u003ci\u003ehh\u003c/i\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters hex_hh\"\u003eThe character with hexadecimal value \u003ccode\u003e0x\u003c/code\u003e\u003ci\u003ehh\u003c/i\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight: normal\" id\u003d\"hex_hhhh\"\u003e\u003ccode\u003e\\u\u003c/code\u003e\u003ci\u003ehhhh\u003c/i\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters hex_hhhh\"\u003eThe character with hexadecimal\u0026nbsp;value\u0026nbsp;\u003ccode\u003e0x\u003c/code\u003e\u003ci\u003ehhhh\u003c/i\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight: normal\" id\u003d\"hex_h_h\"\u003e\u003ccode\u003e\\x\u003c/code\u003e\u003ci\u003e{h...h}\u003c/i\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters hex_h_h\"\u003eThe character with hexadecimal value \u003ccode\u003e0x\u003c/code\u003e\u003ci\u003eh...h\u003c/i\u003e (\u003ca href\u003d\"../../lang/Character.html#MIN_CODE_POINT\"\u003e\u003ccode\u003eCharacter.MIN_CODE_POINT\u003c/code\u003e\u003c/a\u003e \u0026nbsp;\u0026lt;\u003d\u0026nbsp;\u003ccode\u003e0x\u003c/code\u003e\u003ci\u003eh...h\u003c/i\u003e\u0026nbsp;\u0026lt;\u003d\u0026nbsp; \u003ca href\u003d\"../../lang/Character.html#MAX_CODE_POINT\"\u003e\u003ccode\u003eCharacter.MAX_CODE_POINT\u003c/code\u003e\u003c/a\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight: normal\" id\u003d\"unicode_name\"\u003e\u003ccode\u003e\\N{\u003c/code\u003e\u003ci\u003ename\u003c/i\u003e\u003ccode\u003e}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters unicode_name\"\u003eThe character with Unicode character name \u003ci\u003e\u0027name\u0027\u003c/i\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"tab\"\u003e\u003ccode\u003e\\t\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters tab\"\u003eThe tab character (\u003ccode\u003e\u0027\\u0009\u0027\u003c/code\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"newline\"\u003e\u003ccode\u003e\\n\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters newline\"\u003eThe newline (line feed) character (\u003ccode\u003e\u0027\\u000A\u0027\u003c/code\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"return\"\u003e\u003ccode\u003e\\r\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters return\"\u003eThe carriage-return character (\u003ccode\u003e\u0027\\u000D\u0027\u003c/code\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"form_feed\"\u003e\u003ccode\u003e\\f\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters form_feed\"\u003eThe form-feed character (\u003ccode\u003e\u0027\\u000C\u0027\u003c/code\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"bell\"\u003e\u003ccode\u003e\\a\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters bell\"\u003eThe alert (bell) character (\u003ccode\u003e\u0027\\u0007\u0027\u003c/code\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"escape\"\u003e\u003ccode\u003e\\e\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters escape\"\u003eThe escape character (\u003ccode\u003e\u0027\\u001B\u0027\u003c/code\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"ctrl_x\"\u003e\u003ccode\u003e\\c\u003c/code\u003e\u003ci\u003ex\u003c/i\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches characters ctrl_x\"\u003eThe control character corresponding to \u003ci\u003ex\u003c/i\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"classes\"\u003eCharacter classes\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"simple\"\u003e\u003ccode\u003e[abc]\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches classes simple\"\u003e\u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003eb\u003c/code\u003e, or \u003ccode\u003ec\u003c/code\u003e (simple class)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"negation\"\u003e\u003ccode\u003e[^abc]\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches classes negation\"\u003eAny character except \u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003eb\u003c/code\u003e, or \u003ccode\u003ec\u003c/code\u003e (negation)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"range\"\u003e\u003ccode\u003e[a-zA-Z]\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches classes range\"\u003e\u003ccode\u003ea\u003c/code\u003e through \u003ccode\u003ez\u003c/code\u003e or \u003ccode\u003eA\u003c/code\u003e through \u003ccode\u003eZ\u003c/code\u003e, inclusive (range)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"union\"\u003e\u003ccode\u003e[a-d[m-p]]\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches classes union\"\u003e\u003ccode\u003ea\u003c/code\u003e through \u003ccode\u003ed\u003c/code\u003e, or \u003ccode\u003em\u003c/code\u003e through \u003ccode\u003ep\u003c/code\u003e: \u003ccode\u003e[a-dm-p]\u003c/code\u003e (union)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"intersection\"\u003e\u003ccode\u003e[a-z\u0026amp;\u0026amp;[def]]\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches classes intersection\"\u003e\u003ccode\u003ed\u003c/code\u003e, \u003ccode\u003ee\u003c/code\u003e, or \u003ccode\u003ef\u003c/code\u003e (intersection)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"subtraction1\"\u003e\u003ccode\u003e[a-z\u0026amp;\u0026amp;[^bc]]\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches classes subtraction1\"\u003e\u003ccode\u003ea\u003c/code\u003e through \u003ccode\u003ez\u003c/code\u003e, except for \u003ccode\u003eb\u003c/code\u003e and \u003ccode\u003ec\u003c/code\u003e: \u003ccode\u003e[ad-z]\u003c/code\u003e (subtraction)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"subtraction2\"\u003e\u003ccode\u003e[a-z\u0026amp;\u0026amp;[^m-p]]\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches classes subtraction2\"\u003e\u003ccode\u003ea\u003c/code\u003e through \u003ccode\u003ez\u003c/code\u003e, and not \u003ccode\u003em\u003c/code\u003e through \u003ccode\u003ep\u003c/code\u003e: \u003ccode\u003e[a-lq-z]\u003c/code\u003e(subtraction)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"predef\"\u003ePredefined character classes\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"any\"\u003e\u003ccode\u003e.\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches predef any\"\u003eAny character (may or may not match \u003ca href\u003d\"#lt\"\u003eline terminators\u003c/a\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"digit\"\u003e\u003ccode\u003e\\d\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches predef digit\"\u003eA digit: \u003ccode\u003e[0-9]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"non_digit\"\u003e\u003ccode\u003e\\D\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches predef non_digit\"\u003eA non-digit: \u003ccode\u003e[^0-9]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"horiz_white\"\u003e\u003ccode\u003e\\h\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches predef horiz_white\"\u003eA horizontal whitespace character: \u003ccode\u003e[ \\t\\xA0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"non_horiz_white\"\u003e\u003ccode\u003e\\H\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches predef non_horiz_white\"\u003eA non-horizontal whitespace character: \u003ccode\u003e[^\\h]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"white\"\u003e\u003ccode\u003e\\s\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches predef white\"\u003eA whitespace character: \u003ccode\u003e[ \\t\\n\\x0B\\f\\r]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"non_white\"\u003e\u003ccode\u003e\\S\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches predef non_white\"\u003eA non-whitespace character: \u003ccode\u003e[^\\s]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"vert_white\"\u003e\u003ccode\u003e\\v\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches predef vert_white\"\u003eA vertical whitespace character: \u003ccode\u003e[\\n\\x0B\\f\\r\\x85\\u2028\\u2029]\u003c/code\u003e \u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"non_vert_white\"\u003e\u003ccode\u003e\\V\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches predef non_vert_white\"\u003eA non-vertical whitespace character: \u003ccode\u003e[^\\v]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"word\"\u003e\u003ccode\u003e\\w\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches predef word\"\u003eA word character: \u003ccode\u003e[a-zA-Z_0-9]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"non_word\"\u003e\u003ccode\u003e\\W\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches predef non_word\"\u003eA non-word character: \u003ccode\u003e[^\\w]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"posix\"\u003e\u003cb\u003ePOSIX character classes (US-ASCII only)\u003c/b\u003e\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Lower\"\u003e\u003ccode\u003e\\p{Lower}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix Lower\"\u003eA lower-case alphabetic character: \u003ccode\u003e[a-z]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Upper\"\u003e\u003ccode\u003e\\p{Upper}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix Upper\"\u003eAn upper-case alphabetic character:\u003ccode\u003e[A-Z]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"ASCII\"\u003e\u003ccode\u003e\\p{ASCII}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix ASCII\"\u003eAll ASCII:\u003ccode\u003e[\\x00-\\x7F]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Alpha\"\u003e\u003ccode\u003e\\p{Alpha}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix Alpha\"\u003eAn alphabetic character:\u003ccode\u003e[\\p{Lower}\\p{Upper}]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Digit\"\u003e\u003ccode\u003e\\p{Digit}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix Digit\"\u003eA decimal digit: \u003ccode\u003e[0-9]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Alnum\"\u003e\u003ccode\u003e\\p{Alnum}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix Alnum\"\u003eAn alphanumeric character:\u003ccode\u003e[\\p{Alpha}\\p{Digit}]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Punct\"\u003e\u003ccode\u003e\\p{Punct}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix Punct\"\u003ePunctuation: One of \u003ccode\u003e!\"#$%\u0026amp;\u0027()*+,-./:;\u0026lt;\u003d\u0026gt;?@[\\]^_`{|}~\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003c!-- {@code [\\!\"#\\$%\u0026\u0027\\(\\)\\*\\+,\\-\\./:;\\\u003c\u003d\\\u003e\\?@\\[\\\\\\]\\^_`\\{\\|\\}~]}\n          {@code [\\X21-\\X2F\\X31-\\X40\\X5B-\\X60\\X7B-\\X7E]} --\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Graph\"\u003e\u003ccode\u003e\\p{Graph}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix Graph\"\u003eA visible character: \u003ccode\u003e[\\p{Alnum}\\p{Punct}]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Print\"\u003e\u003ccode\u003e\\p{Print}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix Print\"\u003eA printable character: \u003ccode\u003e[\\p{Graph}\\x20]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Blank\"\u003e\u003ccode\u003e\\p{Blank}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix Blank\"\u003eA space or a tab: \u003ccode\u003e[ \\t]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Cntrl\"\u003e\u003ccode\u003e\\p{Cntrl}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix Cntrl\"\u003eA control character: \u003ccode\u003e[\\x00-\\x1F\\x7F]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"XDigit\"\u003e\u003ccode\u003e\\p{XDigit}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix XDigit\"\u003eA hexadecimal digit: \u003ccode\u003e[0-9a-fA-F]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Space\"\u003e\u003ccode\u003e\\p{Space}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches posix Space\"\u003eA whitespace character: \u003ccode\u003e[ \\t\\n\\x0B\\f\\r]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"java\"\u003ejava.lang.Character classes (simple \u003ca href\u003d\"#jcc\"\u003ejava character type\u003c/a\u003e)\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"javaLowerCase\"\u003e\u003ccode\u003e\\p{javaLowerCase}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches java javaLowerCase\"\u003eEquivalent to java.lang.Character.isLowerCase()\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"javaUpperCase\"\u003e\u003ccode\u003e\\p{javaUpperCase}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches java javaUpperCase\"\u003eEquivalent to java.lang.Character.isUpperCase()\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"javaWhitespace\"\u003e\u003ccode\u003e\\p{javaWhitespace}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches java javaWhitespace\"\u003eEquivalent to java.lang.Character.isWhitespace()\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"javaMirrored\"\u003e\u003ccode\u003e\\p{javaMirrored}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches java javaMirrored\"\u003eEquivalent to java.lang.Character.isMirrored()\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"unicode\"\u003eClasses for Unicode scripts, blocks, categories and binary properties\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"IsLatin\"\u003e\u003ccode\u003e\\p{IsLatin}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches unicode IsLatin\"\u003eA Latin\u0026nbsp;script character (\u003ca href\u003d\"#usc\"\u003escript\u003c/a\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"InGreek\"\u003e\u003ccode\u003e\\p{InGreek}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches unicode InGreek\"\u003eA character in the Greek\u0026nbsp;block (\u003ca href\u003d\"#ubc\"\u003eblock\u003c/a\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Lu\"\u003e\u003ccode\u003e\\p{Lu}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches unicode Lu\"\u003eAn uppercase letter (\u003ca href\u003d\"#ucc\"\u003ecategory\u003c/a\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"IsAlphabetic\"\u003e\u003ccode\u003e\\p{IsAlphabetic}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches unicode IsAlphabetic\"\u003eAn alphabetic character (\u003ca href\u003d\"#ubpc\"\u003ebinary property\u003c/a\u003e)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"Sc\"\u003e\u003ccode\u003e\\p{Sc}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches unicode Sc\"\u003eA currency symbol\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"not_InGreek\"\u003e\u003ccode\u003e\\P{InGreek}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches unicode not_InGreek\"\u003eAny character except one in the Greek block (negation)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"not_uppercase\"\u003e\u003ccode\u003e[\\p{L}\u0026amp;\u0026amp;[^\\p{Lu}]]\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches unicode not_uppercase\"\u003eAny letter except an uppercase letter (subtraction)\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"bounds\"\u003eBoundary matchers\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"begin_line\"\u003e\u003ccode\u003e^\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches bounds begin_line\"\u003eThe beginning of a line\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"end_line\"\u003e\u003ccode\u003e$\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches bounds end_line\"\u003eThe end of a line\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"word_boundary\"\u003e\u003ccode\u003e\\b\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches bounds word_boundary\"\u003eA word boundary\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"grapheme_cluster_boundary\"\u003e\u003ccode\u003e\\b{g}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches bounds grapheme_cluster_boundary\"\u003eA Unicode extended grapheme cluster boundary\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"non_word_boundary\"\u003e\u003ccode\u003e\\B\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches bounds non_word_boundary\"\u003eA non-word boundary\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"begin_input\"\u003e\u003ccode\u003e\\A\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches bounds begin_input\"\u003eThe beginning of the input\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"end_prev_match\"\u003e\u003ccode\u003e\\G\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches bounds end_prev_match\"\u003eThe end of the previous match\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"end_input_except_term\"\u003e\u003ccode\u003e\\Z\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches bounds end_input_except_term\"\u003eThe end of the input but for the final \u003ca href\u003d\"#lt\"\u003eterminator\u003c/a\u003e, if\u0026nbsp;any\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"end_input\"\u003e\u003ccode\u003e\\z\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches bounds end_input\"\u003eThe end of the input\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"linebreak\"\u003eLinebreak matcher\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"any_unicode_linebreak\"\u003e\u003ccode\u003e\\R\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches linebreak any_unicode_linebreak\"\u003eAny Unicode linebreak sequence, is equivalent to \u003ccode\u003e\\u000D\\u000A|[\\u000A\\u000B\\u000C\\u000D\\u0085\\u2028\\u2029] \u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"grapheme\"\u003eUnicode Extended Grapheme matcher\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"grapheme_any\"\u003e\u003ccode\u003e\\X\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches grapheme grapheme_any\"\u003eAny Unicode extended grapheme cluster\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"greedy\"\u003eGreedy quantifiers\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"greedy_once_or_not\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e?\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches greedy greedy_once_or_not\"\u003e\u003ci\u003eX\u003c/i\u003e, once or not at all\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"greedy_zero_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches greedy greedy_zero_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e, zero or more times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"greedy_one_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches greedy greedy_one_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e, one or more times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"greedy_exactly\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e{\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003ccode\u003e}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches greedy greedy_exactly\"\u003e\u003ci\u003eX\u003c/i\u003e, exactly \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"greedy_at_least\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e{\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003ccode\u003e,\u003c/code\u003e}\u003c/th\u003e \n   \u003ctd headers\u003d\"matches greedy greedy_at_least\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"greedy_at_least_up_to\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e{\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003ccode\u003e,\u003c/code\u003e\u003ci\u003em\u003c/i\u003e\u003ccode\u003e}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches greedy greedy_at_least_up_to\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e but not more than \u003ci\u003em\u003c/i\u003e times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"reluc\"\u003eReluctant quantifiers\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"reluc_once_or_not\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e??\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches reluc reluc_once_or_not\"\u003e\u003ci\u003eX\u003c/i\u003e, once or not at all\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"reluc_zero_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e*?\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches reluc reluc_zero_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e, zero or more times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"reluc_one_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e+?\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches reluc reluc_one_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e, one or more times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"reluc_exactly\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e{\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003ccode\u003e}?\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches reluc reluc_exactly\"\u003e\u003ci\u003eX\u003c/i\u003e, exactly \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"reluc_at_least\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e{\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003ccode\u003e,}?\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches reluc reluc_at_least\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"reluc_at_least_up_to\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e{\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003ccode\u003e,\u003c/code\u003e\u003ci\u003em\u003c/i\u003e\u003ccode\u003e}?\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches reluc reluc_at_least_up_to\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e but not more than \u003ci\u003em\u003c/i\u003e times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"poss\"\u003ePossessive quantifiers\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"poss_once_or_not\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e?+\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches poss poss_once_or_not\"\u003e\u003ci\u003eX\u003c/i\u003e, once or not at all\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"poss_zero_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e*+\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches poss poss_zero_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e, zero or more times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"poss_one_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e++\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches poss poss_one_or_more\"\u003e\u003ci\u003eX\u003c/i\u003e, one or more times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"poss_exactly\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e{\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003ccode\u003e}+\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches poss poss_exactly\"\u003e\u003ci\u003eX\u003c/i\u003e, exactly \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"poss_at_least\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e{\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003ccode\u003e,}+\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches poss poss_at_least\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"poss_at_least_up_to\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e{\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003ccode\u003e,\u003c/code\u003e\u003ci\u003em\u003c/i\u003e\u003ccode\u003e}+\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches poss poss_at_least_up_to\"\u003e\u003ci\u003eX\u003c/i\u003e, at least \u003ci\u003en\u003c/i\u003e but not more than \u003ci\u003em\u003c/i\u003e times\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"logical\"\u003eLogical operators\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"concat\"\u003e\u003ci\u003eXY\u003c/i\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches logical concat\"\u003e\u003ci\u003eX\u003c/i\u003e followed by \u003ci\u003eY\u003c/i\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"alternate\"\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e|\u003c/code\u003e\u003ci\u003eY\u003c/i\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches logical alternate\"\u003eEither \u003ci\u003eX\u003c/i\u003e or \u003ci\u003eY\u003c/i\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"group\"\u003e\u003ccode\u003e(\u003c/code\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches logical group\"\u003eX, as a \u003ca href\u003d\"#cg\"\u003ecapturing group\u003c/a\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"backref\"\u003eBack references\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"back_nth\"\u003e\u003ccode\u003e\\\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches backref back_nth\"\u003eWhatever the \u003ci\u003en\u003c/i\u003e\u003csup\u003eth\u003c/sup\u003e \u003ca href\u003d\"#cg\"\u003ecapturing group\u003c/a\u003e matched\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"back_named\"\u003e\u003ccode\u003e\\\u003c/code\u003e\u003ci\u003ek\u003c/i\u003e\u0026lt;\u003ci\u003ename\u003c/i\u003e\u0026gt;\u003c/th\u003e \n   \u003ctd headers\u003d\"matches backref back_named\"\u003eWhatever the \u003ca href\u003d\"#groupname\"\u003enamed-capturing group\u003c/a\u003e \"name\" matched\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"quote\"\u003eQuotation\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"quote_follow\"\u003e\u003ccode\u003e\\\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches quote quote_follow\"\u003eNothing, but quotes the following character\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"quote_begin\"\u003e\u003ccode\u003e\\Q\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches quote quote_begin\"\u003eNothing, but quotes all characters until \u003ccode\u003e\\E\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"quote_end\"\u003e\u003ccode\u003e\\E\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches quote quote_end\"\u003eNothing, but ends quoting started by \u003ccode\u003e\\Q\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003c!-- Metachars: !$()*+.\u003c\u003e?[\\]^{|} --\u003e \n  \u003ctr\u003e\n   \u003cth colspan\u003d\"2\" style\u003d\"padding-top:20px\" id\u003d\"special\"\u003eSpecial constructs (named-capturing and non-capturing)\u003c/th\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"named_group\"\u003e\u003ccode\u003e(?\u0026lt;\u003ca href\u003d\"#groupname\"\u003ename\u003c/a\u003e\u0026gt;\u003c/code\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches special named_group\"\u003e\u003ci\u003eX\u003c/i\u003e, as a named-capturing group\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"non_capture_group\"\u003e\u003ccode\u003e(?:\u003c/code\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches special non_capture_group\"\u003e\u003ci\u003eX\u003c/i\u003e, as a non-capturing group\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"flags\"\u003e\u003ccode\u003e(?idmsuxU-idmsuxU)\u0026nbsp;\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches special flags\"\u003eNothing, but turns match flags \u003ca href\u003d\"#CASE_INSENSITIVE\"\u003ei\u003c/a\u003e \u003ca href\u003d\"#UNIX_LINES\"\u003ed\u003c/a\u003e \u003ca href\u003d\"#MULTILINE\"\u003em\u003c/a\u003e \u003ca href\u003d\"#DOTALL\"\u003es\u003c/a\u003e \u003ca href\u003d\"#UNICODE_CASE\"\u003eu\u003c/a\u003e \u003ca href\u003d\"#COMMENTS\"\u003ex\u003c/a\u003e \u003ca href\u003d\"#UNICODE_CHARACTER_CLASS\"\u003eU\u003c/a\u003e on - off\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"non_capture_group_flags\"\u003e\u003ccode\u003e(?idmsuxU-idmsuxU:\u003c/code\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e\u0026nbsp;\u0026nbsp;\u003c/th\u003e \n   \u003ctd headers\u003d\"matches special non_capture_group_flags\"\u003e\u003ci\u003eX\u003c/i\u003e, as a \u003ca href\u003d\"#cg\"\u003enon-capturing group\u003c/a\u003e with the given flags \u003ca href\u003d\"#CASE_INSENSITIVE\"\u003ei\u003c/a\u003e \u003ca href\u003d\"#UNIX_LINES\"\u003ed\u003c/a\u003e \u003ca href\u003d\"#MULTILINE\"\u003em\u003c/a\u003e \u003ca href\u003d\"#DOTALL\"\u003es\u003c/a\u003e \u003ca href\u003d\"#UNICODE_CASE\"\u003eu\u003c/a\u003e \u003ca href\u003d\"#COMMENTS\"\u003ex\u003c/a\u003e \u003ca href\u003d\"#UNICODE_CHARACTER_CLASS\"\u003eU\u003c/a\u003e on - off\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"pos_lookahead\"\u003e\u003ccode\u003e(?\u003d\u003c/code\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches special pos_lookahead\"\u003e\u003ci\u003eX\u003c/i\u003e, via zero-width positive lookahead\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"neg_lookahead\"\u003e\u003ccode\u003e(?!\u003c/code\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches special neg_lookahead\"\u003e\u003ci\u003eX\u003c/i\u003e, via zero-width negative lookahead\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"pos_lookbehind\"\u003e\u003ccode\u003e(?\u0026lt;\u003d\u003c/code\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches special pos_lookbehind\"\u003e\u003ci\u003eX\u003c/i\u003e, via zero-width positive lookbehind\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"neg_lookbehind\"\u003e\u003ccode\u003e(?\u0026lt;!\u003c/code\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches special neg_lookbehind\"\u003e\u003ci\u003eX\u003c/i\u003e, via zero-width negative lookbehind\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth style\u003d\"vertical-align:top; font-weight:normal\" id\u003d\"indep_non_capture_group\"\u003e\u003ccode\u003e(?\u0026gt;\u003c/code\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e\u003c/th\u003e \n   \u003ctd headers\u003d\"matches special indep_non_capture_group\"\u003e\u003ci\u003eX\u003c/i\u003e, as an independent, non-capturing group\u003c/td\u003e\n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003chr\u003e \n\u003ch2\u003e\u003ca id\u003d\"bs\"\u003eBackslashes, escapes, and quoting\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e The backslash character (\u003ccode\u003e\u0027\\\u0027\u003c/code\u003e) serves to introduce escaped constructs, as defined in the table above, as well as to quote characters that otherwise would be interpreted as unescaped constructs. Thus the expression \u003ccode\u003e\\\\\u003c/code\u003e matches a single backslash and \u003ccode\u003e\\{\u003c/code\u003e matches a left brace. \u003c/p\u003e\n\u003cp\u003e It is an error to use a backslash prior to any alphabetic character that does not denote an escaped construct; these are reserved for future extensions to the regular-expression language. A backslash may be used prior to a non-alphabetic character regardless of whether that character is part of an unescaped construct. \u003c/p\u003e\n\u003cp\u003e Backslashes within string literals in Java source code are interpreted as required by \u003ccite\u003eThe Java Language Specification\u003c/cite\u003e as either Unicode escapes (section \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.3\"\u003e3.3\u003c/a\u003e) or other character escapes (section \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.10.6\"\u003e3.10.6\u003c/a\u003e) It is therefore necessary to double backslashes in string literals that represent regular expressions to protect them from interpretation by the Java bytecode compiler. The string literal \u003ccode\u003e\"\\b\"\u003c/code\u003e, for example, matches a single backspace character when interpreted as a regular expression, while \u003ccode\u003e\"\\\\b\"\u003c/code\u003e matches a word boundary. The string literal \u003ccode\u003e\"\\(hello\\)\"\u003c/code\u003e is illegal and leads to a compile-time error; in order to match the string \u003ccode\u003e(hello)\u003c/code\u003e the string literal \u003ccode\u003e\"\\\\(hello\\\\)\"\u003c/code\u003e must be used. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"cc\"\u003eCharacter Classes\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e Character classes may appear within other character classes, and may be composed by the union operator (implicit) and the intersection operator (\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e). The union operator denotes a class that contains every character that is in at least one of its operand classes. The intersection operator denotes a class that contains every character that is in both of its operand classes. \u003c/p\u003e\n\u003cp\u003e The precedence of character-class operators is as follows, from highest to lowest: \u003c/p\u003e\n\u003ctable class\u003d\"striped\" style\u003d\"margin-left: 2em;\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  Precedence of character class operators.\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"col\"\u003ePrecedence\u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eName\u003c/th\u003e\n   \u003cth scope\u003d\"col\"\u003eExample \u003c/th\u003e\n  \u003c/tr\u003e\n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e1\u003c/th\u003e \n   \u003ctd\u003eLiteral escape\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003e\\x\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e2\u003c/th\u003e \n   \u003ctd\u003eGrouping\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003e[...]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e3\u003c/th\u003e \n   \u003ctd\u003eRange\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003ea-z\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e4\u003c/th\u003e \n   \u003ctd\u003eUnion\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003e[a-e][i-u]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e5\u003c/th\u003e \n   \u003ctd\u003eIntersection\u003c/td\u003e \n   \u003ctd\u003e\u003ccode\u003e[a-z\u0026amp;\u0026amp;[aeiou]]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Note that a different set of metacharacters are in effect inside a character class than outside a character class. For instance, the regular expression \u003ccode\u003e.\u003c/code\u003e loses its special meaning inside a character class, while the expression \u003ccode\u003e-\u003c/code\u003e becomes a range forming metacharacter. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"lt\"\u003eLine terminators\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e A \u003ci\u003eline terminator\u003c/i\u003e is a one- or two-character sequence that marks the end of a line of the input character sequence. The following are recognized as line terminators: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e A newline (line feed) character (\u003ccode\u003e\u0027\\n\u0027\u003c/code\u003e), \u003c/li\u003e\n \u003cli\u003e A carriage-return character followed immediately by a newline character (\u003ccode\u003e\"\\r\\n\"\u003c/code\u003e), \u003c/li\u003e\n \u003cli\u003e A standalone carriage-return character (\u003ccode\u003e\u0027\\r\u0027\u003c/code\u003e), \u003c/li\u003e\n \u003cli\u003e A next-line character (\u003ccode\u003e\u0027\\u0085\u0027\u003c/code\u003e), \u003c/li\u003e\n \u003cli\u003e A line-separator character (\u003ccode\u003e\u0027\\u2028\u0027\u003c/code\u003e), or \u003c/li\u003e\n \u003cli\u003e A paragraph-separator character (\u003ccode\u003e\u0027\\u2029\u0027\u003c/code\u003e). \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIf \u003ca href\u003d\"#UNIX_LINES\"\u003e\u003ccode\u003eUNIX_LINES\u003c/code\u003e\u003c/a\u003e mode is activated, then the only line terminators recognized are newline characters. \u003c/p\u003e\n\u003cp\u003e The regular expression \u003ccode\u003e.\u003c/code\u003e matches any character except a line terminator unless the \u003ca href\u003d\"#DOTALL\"\u003e\u003ccode\u003eDOTALL\u003c/code\u003e\u003c/a\u003e flag is specified. \u003c/p\u003e\n\u003cp\u003e By default, the regular expressions \u003ccode\u003e^\u003c/code\u003e and \u003ccode\u003e$\u003c/code\u003e ignore line terminators and only match at the beginning and the end, respectively, of the entire input sequence. If \u003ca href\u003d\"#MULTILINE\"\u003e\u003ccode\u003eMULTILINE\u003c/code\u003e\u003c/a\u003e mode is activated then \u003ccode\u003e^\u003c/code\u003e matches at the beginning of input and after any line terminator except at the end of input. When in \u003ca href\u003d\"#MULTILINE\"\u003e\u003ccode\u003eMULTILINE\u003c/code\u003e\u003c/a\u003e mode \u003ccode\u003e$\u003c/code\u003e matches just before a line terminator or the end of the input sequence. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"cg\"\u003eGroups and capturing\u003c/a\u003e\u003c/h2\u003e \n\u003ch3\u003e\u003ca id\u003d\"gnumber\"\u003eGroup number\u003c/a\u003e\u003c/h3\u003e \n\u003cp\u003e Capturing groups are numbered by counting their opening parentheses from left to right. In the expression \u003ccode\u003e((A)(B(C)))\u003c/code\u003e, for example, there are four such groups: \u003c/p\u003e \n\u003col style\u003d\"margin-left:2em;\"\u003e \n \u003cli\u003e \u003ccode\u003e((A)(B(C)))\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003e(A)\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003e(B(C))\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e \u003ccode\u003e(C)\u003c/code\u003e \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e Group zero always stands for the entire expression. \u003c/p\u003e\n\u003cp\u003e Capturing groups are so named because, during a match, each subsequence of the input sequence that matches such a group is saved. The captured subsequence may be used later in the expression, via a back reference, and may also be retrieved from the matcher once the match operation is complete. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"groupname\"\u003eGroup name\u003c/a\u003e\u003c/h3\u003e \n\u003cp\u003eA capturing group can also be assigned a \"name\", a \u003ccode\u003enamed-capturing group\u003c/code\u003e, and then be back-referenced later by the \"name\". Group names are composed of the following characters. The first character must be a \u003ccode\u003eletter\u003c/code\u003e. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e The uppercase letters \u003ccode\u003e\u0027A\u0027\u003c/code\u003e through \u003ccode\u003e\u0027Z\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0041\u0027\u003c/code\u003e\u0026nbsp;through\u0026nbsp;\u003ccode\u003e\u0027\\u005a\u0027\u003c/code\u003e), \u003c/li\u003e\n \u003cli\u003e The lowercase letters \u003ccode\u003e\u0027a\u0027\u003c/code\u003e through \u003ccode\u003e\u0027z\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0061\u0027\u003c/code\u003e\u0026nbsp;through\u0026nbsp;\u003ccode\u003e\u0027\\u007a\u0027\u003c/code\u003e), \u003c/li\u003e\n \u003cli\u003e The digits \u003ccode\u003e\u00270\u0027\u003c/code\u003e through \u003ccode\u003e\u00279\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0030\u0027\u003c/code\u003e\u0026nbsp;through\u0026nbsp;\u003ccode\u003e\u0027\\u0039\u0027\u003c/code\u003e), \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003enamed-capturing group\u003c/code\u003e is still numbered as described in \u003ca href\u003d\"#gnumber\"\u003eGroup number\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e The captured input associated with a group is always the subsequence that the group most recently matched. If a group is evaluated a second time because of quantification then its previously-captured value, if any, will be retained if the second evaluation fails. Matching the string \u003ccode\u003e\"aba\"\u003c/code\u003e against the expression \u003ccode\u003e(a(b)?)+\u003c/code\u003e, for example, leaves group two set to \u003ccode\u003e\"b\"\u003c/code\u003e. All captured input is discarded at the beginning of each match. \u003c/p\u003e\n\u003cp\u003e Groups beginning with \u003ccode\u003e(?\u003c/code\u003e are either pure, \u003ci\u003enon-capturing\u003c/i\u003e groups that do not capture text and do not count towards the group total, or \u003ci\u003enamed-capturing\u003c/i\u003e group. \u003c/p\u003e\n\u003ch2\u003e Unicode support \u003c/h2\u003e \n\u003cp\u003e This class is in conformance with Level 1 of \u003ca href\u003d\"http://www.unicode.org/reports/tr18/\"\u003e\u003ci\u003eUnicode Technical Standard #18: Unicode Regular Expression\u003c/i\u003e\u003c/a\u003e, plus RL2.1 Canonical Equivalents and RL2.2 Extended Grapheme Clusters. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eUnicode escape sequences\u003c/b\u003e such as \u003ccode\u003e\\u2014\u003c/code\u003e in Java source code are processed as described in section \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.3\"\u003e3.3\u003c/a\u003e of \u003ccite\u003eThe Java Language Specification\u003c/cite\u003e. Such escape sequences are also implemented directly by the regular-expression parser so that Unicode escapes can be used in expressions that are read from files or from the keyboard. Thus the strings \u003ccode\u003e\"\\u2014\"\u003c/code\u003e and \u003ccode\u003e\"\\\\u2014\"\u003c/code\u003e, while not equal, compile into the same pattern, which matches the character with hexadecimal value \u003ccode\u003e0x2014\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e A Unicode character can also be represented by using its \u003cb\u003eHex notation\u003c/b\u003e (hexadecimal code point value) directly as described in construct \u003ccode\u003e\\x{...}\u003c/code\u003e, for example a supplementary character U+2011F can be specified as \u003ccode\u003e\\x{2011F}\u003c/code\u003e, instead of two consecutive Unicode escape sequences of the surrogate pair \u003ccode\u003e\\uD840\u003c/code\u003e\u003ccode\u003e\\uDD1F\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eUnicode character names\u003c/b\u003e are supported by the named character construct \u003ccode\u003e\\N{\u003c/code\u003e...\u003ccode\u003e}\u003c/code\u003e, for example, \u003ccode\u003e\\N{WHITE SMILING FACE}\u003c/code\u003e specifies character \u003ccode\u003e\\u263A\u003c/code\u003e. The character names supported by this class are the valid Unicode character names matched by \u003ca href\u003d\"../../lang/Character.html#codePointOf(java.lang.String)\"\u003e\u003ccode\u003eCharacter.codePointOf(name)\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003ca href\u003d\"http://www.unicode.org/reports/tr18/#Default_Grapheme_Clusters\"\u003e \u003cb\u003eUnicode extended grapheme clusters\u003c/b\u003e\u003c/a\u003e are supported by the grapheme cluster matcher \u003ccode\u003e\\X\u003c/code\u003e and the corresponding boundary matcher \u003ccode\u003e\\b{g}\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Unicode scripts, blocks, categories and binary properties are written with the \u003ccode\u003e\\p\u003c/code\u003e and \u003ccode\u003e\\P\u003c/code\u003e constructs as in Perl. \u003ccode\u003e\\p{\u003c/code\u003e\u003ci\u003eprop\u003c/i\u003e\u003ccode\u003e}\u003c/code\u003e matches if the input has the property \u003ci\u003eprop\u003c/i\u003e, while \u003ccode\u003e\\P{\u003c/code\u003e\u003ci\u003eprop\u003c/i\u003e\u003ccode\u003e}\u003c/code\u003e does not match if the input has that property. \u003c/p\u003e\n\u003cp\u003e Scripts, blocks, categories and binary properties can be used both inside and outside of a character class. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003e\u003ca id\u003d\"usc\"\u003eScripts\u003c/a\u003e\u003c/b\u003e are specified either with the prefix \u003ccode\u003eIs\u003c/code\u003e, as in \u003ccode\u003eIsHiragana\u003c/code\u003e, or by using the \u003ccode\u003escript\u003c/code\u003e keyword (or its short form \u003ccode\u003esc\u003c/code\u003e) as in \u003ccode\u003escript\u003dHiragana\u003c/code\u003e or \u003ccode\u003esc\u003dHiragana\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The script names supported by \u003ccode\u003ePattern\u003c/code\u003e are the valid script names accepted and defined by \u003ca href\u003d\"../../lang/Character.UnicodeScript.html#forName(java.lang.String)\"\u003e\u003ccode\u003eUnicodeScript.forName\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003e\u003ca id\u003d\"ubc\"\u003eBlocks\u003c/a\u003e\u003c/b\u003e are specified with the prefix \u003ccode\u003eIn\u003c/code\u003e, as in \u003ccode\u003eInMongolian\u003c/code\u003e, or by using the keyword \u003ccode\u003eblock\u003c/code\u003e (or its short form \u003ccode\u003eblk\u003c/code\u003e) as in \u003ccode\u003eblock\u003dMongolian\u003c/code\u003e or \u003ccode\u003eblk\u003dMongolian\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The block names supported by \u003ccode\u003ePattern\u003c/code\u003e are the valid block names accepted and defined by \u003ca href\u003d\"../../lang/Character.UnicodeBlock.html#forName(java.lang.String)\"\u003e\u003ccode\u003eUnicodeBlock.forName\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003e\u003ca id\u003d\"ucc\"\u003eCategories\u003c/a\u003e\u003c/b\u003e may be specified with the optional prefix \u003ccode\u003eIs\u003c/code\u003e: Both \u003ccode\u003e\\p{L}\u003c/code\u003e and \u003ccode\u003e\\p{IsL}\u003c/code\u003e denote the category of Unicode letters. Same as scripts and blocks, categories can also be specified by using the keyword \u003ccode\u003egeneral_category\u003c/code\u003e (or its short form \u003ccode\u003egc\u003c/code\u003e) as in \u003ccode\u003egeneral_category\u003dLu\u003c/code\u003e or \u003ccode\u003egc\u003dLu\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The supported categories are those of \u003ca href\u003d\"http://www.unicode.org/unicode/standard/standard.html\"\u003e \u003ci\u003eThe Unicode Standard\u003c/i\u003e\u003c/a\u003e in the version specified by the \u003ca href\u003d\"../../lang/Character.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eCharacter\u003c/code\u003e\u003c/a\u003e class. The category names are those defined in the Standard, both normative and informative. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003e\u003ca id\u003d\"ubpc\"\u003eBinary properties\u003c/a\u003e\u003c/b\u003e are specified with the prefix \u003ccode\u003eIs\u003c/code\u003e, as in \u003ccode\u003eIsAlphabetic\u003c/code\u003e. The supported binary properties by \u003ccode\u003ePattern\u003c/code\u003e are \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e Alphabetic \u003c/li\u003e\n \u003cli\u003e Ideographic \u003c/li\u003e\n \u003cli\u003e Letter \u003c/li\u003e\n \u003cli\u003e Lowercase \u003c/li\u003e\n \u003cli\u003e Uppercase \u003c/li\u003e\n \u003cli\u003e Titlecase \u003c/li\u003e\n \u003cli\u003e Punctuation \u003c/li\u003e\n \u003cli\u003e Control \u003c/li\u003e\n \u003cli\u003e White_Space \u003c/li\u003e\n \u003cli\u003e Digit \u003c/li\u003e\n \u003cli\u003e Hex_Digit \u003c/li\u003e\n \u003cli\u003e Join_Control \u003c/li\u003e\n \u003cli\u003e Noncharacter_Code_Point \u003c/li\u003e\n \u003cli\u003e Assigned \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following \u003cb\u003ePredefined Character classes\u003c/b\u003e and \u003cb\u003ePOSIX character classes\u003c/b\u003e are in conformance with the recommendation of \u003ci\u003eAnnex C: Compatibility Properties\u003c/i\u003e of \u003ca href\u003d\"http://www.unicode.org/reports/tr18/\"\u003e\u003ci\u003eUnicode Regular Expression \u003c/i\u003e\u003c/a\u003e, when \u003ca href\u003d\"#UNICODE_CHARACTER_CLASS\"\u003e\u003ccode\u003eUNICODE_CHARACTER_CLASS\u003c/code\u003e\u003c/a\u003e flag is specified. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  predefined and posix character classes in Unicode mode\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\" id\u003d\"predef_classes\"\u003eClasses\u003c/th\u003e \n   \u003cth scope\u003d\"col\" id\u003d\"predef_matches\"\u003eMatches\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{Lower}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA lowercase character:\u003ccode\u003e\\p{IsLowercase}\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{Upper}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eAn uppercase character:\u003ccode\u003e\\p{IsUppercase}\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{ASCII}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eAll ASCII:\u003ccode\u003e[\\x00-\\x7F]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{Alpha}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eAn alphabetic character:\u003ccode\u003e\\p{IsAlphabetic}\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{Digit}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA decimal digit character:\u003ccode\u003e\\p{IsDigit}\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{Alnum}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eAn alphanumeric character:\u003ccode\u003e[\\p{IsAlphabetic}\\p{IsDigit}]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{Punct}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA punctuation character:\u003ccode\u003e\\p{IsPunctuation}\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{Graph}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA visible character: \u003ccode\u003e[^\\p{IsWhite_Space}\\p{gc\u003dCc}\\p{gc\u003dCs}\\p{gc\u003dCn}]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{Print}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA printable character: \u003ccode\u003e[\\p{Graph}\\p{Blank}\u0026amp;\u0026amp;[^\\p{Cntrl}]]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{Blank}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA space or a tab: \u003ccode\u003e[\\p{IsWhite_Space}\u0026amp;\u0026amp;[^\\p{gc\u003dZl}\\p{gc\u003dZp}\\x0a\\x0b\\x0c\\x0d\\x85]]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{Cntrl}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA control character: \u003ccode\u003e\\p{gc\u003dCc}\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{XDigit}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA hexadecimal digit: \u003ccode\u003e[\\p{gc\u003dNd}\\p{IsHex_Digit}]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\p{Space}\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA whitespace character:\u003ccode\u003e\\p{IsWhite_Space}\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\d\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA digit: \u003ccode\u003e\\p{IsDigit}\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\D\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA non-digit: \u003ccode\u003e[^\\d]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\s\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA whitespace character: \u003ccode\u003e\\p{IsWhite_Space}\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\S\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA non-whitespace character: \u003ccode\u003e[^\\s]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\w\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA word character: \u003ccode\u003e[\\p{Alpha}\\p{gc\u003dMn}\\p{gc\u003dMe}\\p{gc\u003dMc}\\p{Digit}\\p{gc\u003dPc}\\p{IsJoin_Control}]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n  \u003ctr\u003e\n   \u003cth scope\u003d\"row\"\u003e\u003ccode\u003e\\W\u003c/code\u003e\u003c/th\u003e \n   \u003ctd\u003eA non-word character: \u003ccode\u003e[^\\w]\u003c/code\u003e\u003c/td\u003e\n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003ca id\u003d\"jcc\"\u003e Categories that behave like the java.lang.Character boolean is\u003ci\u003emethodname\u003c/i\u003e methods (except for the deprecated ones) are available through the same \u003ccode\u003e\\p{\u003c/code\u003e\u003ci\u003eprop\u003c/i\u003e\u003ccode\u003e}\u003c/code\u003e syntax where the specified property has the name \u003ccode\u003ejava\u003ci\u003emethodname\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003ch2\u003e Comparison to Perl 5 \u003c/h2\u003e \n\u003cp\u003eThe \u003ccode\u003ePattern\u003c/code\u003e engine performs traditional NFA-based matching with ordered alternation as occurs in Perl 5. \u003c/p\u003e\n\u003cp\u003e Perl constructs not supported by this class: \u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e The backreference constructs, \u003ccode\u003e\\g{\u003c/code\u003e\u003ci\u003en\u003c/i\u003e\u003ccode\u003e}\u003c/code\u003e for the \u003ci\u003en\u003c/i\u003e\u003csup\u003eth\u003c/sup\u003e\u003ca href\u003d\"#cg\"\u003ecapturing group\u003c/a\u003e and \u003ccode\u003e\\g{\u003c/code\u003e\u003ci\u003ename\u003c/i\u003e\u003ccode\u003e}\u003c/code\u003e for \u003ca href\u003d\"#groupname\"\u003enamed-capturing group\u003c/a\u003e. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The conditional constructs \u003ccode\u003e(?(\u003c/code\u003e\u003ci\u003econdition\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e and \u003ccode\u003e(?(\u003c/code\u003e\u003ci\u003econdition\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e\u003ci\u003eX\u003c/i\u003e\u003ccode\u003e|\u003c/code\u003e\u003ci\u003eY\u003c/i\u003e\u003ccode\u003e)\u003c/code\u003e, \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The embedded code constructs \u003ccode\u003e(?{\u003c/code\u003e\u003ci\u003ecode\u003c/i\u003e\u003ccode\u003e})\u003c/code\u003e and \u003ccode\u003e(??{\u003c/code\u003e\u003ci\u003ecode\u003c/i\u003e\u003ccode\u003e})\u003c/code\u003e,\u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The embedded comment syntax \u003ccode\u003e(?#comment)\u003c/code\u003e, and \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The preprocessing operations \u003ccode\u003e\\l\u003c/code\u003e \u003ccode\u003e\\u\u003c/code\u003e, \u003ccode\u003e\\L\u003c/code\u003e, and \u003ccode\u003e\\U\u003c/code\u003e. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e Constructs supported by this class but not by Perl: \u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e Character-class union and intersection as described \u003ca href\u003d\"#cc\"\u003eabove\u003c/a\u003e.\u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e Notable differences from Perl: \u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e In Perl, \u003ccode\u003e\\1\u003c/code\u003e through \u003ccode\u003e\\9\u003c/code\u003e are always interpreted as back references; a backslash-escaped number greater than \u003ccode\u003e9\u003c/code\u003e is treated as a back reference if at least that many subexpressions exist, otherwise it is interpreted, if possible, as an octal escape. In this class octal escapes must always begin with a zero. In this class, \u003ccode\u003e\\1\u003c/code\u003e through \u003ccode\u003e\\9\u003c/code\u003e are always interpreted as back references, and a larger number is accepted as a back reference if at least that many subexpressions exist at that point in the regular expression, otherwise the parser will drop digits until the number is smaller or equal to the existing number of groups or it is one digit. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e Perl uses the \u003ccode\u003eg\u003c/code\u003e flag to request a match that resumes where the last match left off. This functionality is provided implicitly by the \u003ca href\u003d\"Matcher.html\" title\u003d\"class in java.util.regex\"\u003e\u003ccode\u003eMatcher\u003c/code\u003e\u003c/a\u003e class: Repeated invocations of the \u003ca href\u003d\"Matcher.html#find()\"\u003e\u003ccode\u003efind\u003c/code\u003e\u003c/a\u003e method will resume where the last match left off, unless the matcher is reset. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e In Perl, embedded flags at the top level of an expression affect the whole expression. In this class, embedded flags always take effect at the point at which they appear, whether they are at the top level or within a group; in the latter case, flags are restored at the end of the group just as in Perl. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e For a more precise description of the behavior of regular expression constructs, please see \u003ca href\u003d\"http://www.oreilly.com/catalog/regex3/\"\u003e \u003ci\u003eMastering Regular Expressions, 3rd Edition\u003c/i\u003e, Jeffrey E. F. Friedl, O\u0027Reilly and Associates, 2006.\u003c/a\u003e \u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#split(java.lang.String,int)\"\u003e\u003ccode\u003eString.split(String, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/String.html#split(java.lang.String)\"\u003e\u003ccode\u003eString.split(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.regex.Pattern\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}