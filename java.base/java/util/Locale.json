{
  "packageName": "java.util",
  "simpleName": "Locale",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ENGLISH",
      "comment": "Useful constant for language.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FRENCH",
      "comment": "Useful constant for language.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GERMAN",
      "comment": "Useful constant for language.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ITALIAN",
      "comment": "Useful constant for language.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JAPANESE",
      "comment": "Useful constant for language.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "KOREAN",
      "comment": "Useful constant for language.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CHINESE",
      "comment": "Useful constant for language.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SIMPLIFIED_CHINESE",
      "comment": "Useful constant for language.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TRADITIONAL_CHINESE",
      "comment": "Useful constant for language.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FRANCE",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "GERMANY",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ITALY",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JAPAN",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "KOREA",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UK",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "US",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CANADA",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CANADA_FRENCH",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ROOT",
      "comment": "Useful constant for the root locale. The root locale is the locale whose language, country, and variant are empty (\"\") strings. This is regarded as the base locale of all locales, and is used as the language/country neutral locale for the locale sensitive operations.",
      "annotations": [],
      "tagMap": {
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "CHINA",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PRC",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TAIWAN",
      "comment": "Useful constant for country.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PRIVATE_USE_EXTENSION",
      "comment": "The key for the private use extension (\u0027x\u0027).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getExtension(char)\"\u003e\u003ccode\u003egetExtension(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Builder.html#setExtension(char,java.lang.String)\"\u003e\u003ccode\u003eLocale.Builder.setExtension(char, String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Locale.PRIVATE_USE_EXTENSION\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNICODE_LOCALE_EXTENSION",
      "comment": "The key for Unicode locale extension (\u0027u\u0027).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getExtension(char)\"\u003e\u003ccode\u003egetExtension(char)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Builder.html#setExtension(char,java.lang.String)\"\u003e\u003ccode\u003eLocale.Builder.setExtension(char, String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Locale.UNICODE_LOCALE_EXTENSION\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefault",
      "comment": "Gets the current value of the default locale for this instance of the Java Virtual Machine. The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the setDefault method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default locale for this instance of the Java Virtual Machine"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale$Category",
            "type": "Class"
          },
          "name": "category",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefault",
      "comment": "Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine. The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the setDefault(Locale.Category, Locale) method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#setDefault(java.util.Locale.Category,java.util.Locale)\"\u003e\u003ccode\u003esetDefault(Locale.Category, Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecategory\u003c/code\u003e - the specified category to get the default locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if category is null"
        ],
        "return": [
          "the default locale for the specified Category for this instance of the Java Virtual Machine"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "newLocale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDefault",
      "comment": "Sets the default locale for this instance of the Java Virtual Machine. This does not affect the host locale. If there is a security manager, its checkPermission method is called with a PropertyPermission(\"user.language\", \"write\") permission before the default locale is changed. The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. Since changing the default locale may affect many different areas of functionality, this method should only be used if the caller is prepared to reinitialize locale-sensitive code running within the same Java Virtual Machine. By setting the default locale with this method, all of the default locales for each Category are also set to the specified default locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/PropertyPermission.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003ePropertyPermission\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enewLocale\u003c/code\u003e - the new default locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enewLocale\u003c/code\u003e is null"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale$Category",
            "type": "Class"
          },
          "name": "category",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "newLocale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setDefault",
      "comment": "Sets the default locale for the specified Category for this instance of the Java Virtual Machine. This does not affect the host locale. If there is a security manager, its checkPermission method is called with a PropertyPermission(\"user.language\", \"write\") permission before the default locale is changed. The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. Since changing the default locale may affect many different areas of functionality, this method should only be used if the caller is prepared to reinitialize locale-sensitive code running within the same Java Virtual Machine.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(java.security.Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/PropertyPermission.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003ePropertyPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDefault(java.util.Locale.Category)\"\u003e\u003ccode\u003egetDefault(Locale.Category)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecategory\u003c/code\u003e - the specified category to set the default locale",
          "\u003ccode\u003enewLocale\u003c/code\u003e - the new default locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its checkPermission method doesn\u0027t allow the operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if category and/or newLocale is null"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAvailableLocales",
      "comment": "Returns an array of all installed locales. The returned array represents the union of locales supported by the Java runtime environment and by installed LocaleServiceProvider implementations. It must contain at least a Locale instance equal to Locale.US.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An array of installed locales."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getISOCountries",
      "comment": "Returns a list of all 2-letter country codes defined in ISO 3166. Can be used to create Locales. This method is equivalent to getISOCountries(Locale.IsoCountryCode type) with type Locale.IsoCountryCode.PART1_ALPHA2. Note: The Locale class also supports other codes for country (region), such as 3-letter numeric UN M.49 area codes. Therefore, the list returned by this method does not contain ALL valid codes that can be used to create Locales. Note that this method does not return obsolete 2-letter country codes. ISO3166-3 codes which designate country codes for those obsolete codes, can be retrieved from getISOCountries(Locale.IsoCountryCode type) with type Locale.IsoCountryCode.PART3.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An array of ISO 3166 two-letter country codes."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale$IsoCountryCode",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getISOCountries",
      "comment": "Returns a Set of ISO3166 country codes for the specified type.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.IsoCountryCode.html\" title\u003d\"enum class in java.util\"\u003e\u003ccode\u003eLocale.IsoCountryCode\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.IsoCountryCode.html\" title\u003d\"enum class in java.util\"\u003e\u003ccode\u003eLocale.IsoCountryCode\u003c/code\u003e\u003c/a\u003e specified ISO code type."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if type is null"
        ],
        "return": [
          "a \n\u003ccode\u003eSet\u003c/code\u003e of ISO country codes for the specified type."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getISOLanguages",
      "comment": "Returns a list of all 2-letter language codes defined in ISO 639. Can be used to create Locales. Note: ISO 639 is not a stable standard— some languages\u0027 codes have changed. The list this function returns includes both the new and the old codes for the languages whose codes have changed. The Locale class also supports language codes up to 8 characters in length. Therefore, the list returned by this method does not contain ALL valid codes that can be used to create Locales.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An array of ISO 639 two-letter language codes."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLanguage",
      "comment": "Returns the language code of this Locale. Note: ISO 639 is not a stable standard— some languages\u0027 codes have changed. Locale\u0027s constructor recognizes both the new and the old codes for the languages whose codes have changed, but this function always returns the old code. If you want to check for a specific language whose code has changed, don\u0027t do  if (locale.getLanguage().equals(\"he\")) // BAD!\n    ...\n Instead, do  if (locale.getLanguage().equals(new Locale(\"he\").getLanguage()))\n    ...",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDisplayLanguage()\"\u003e\u003ccode\u003egetDisplayLanguage()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The language code, or the empty string if none is defined."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getScript",
      "comment": "Returns the script for this locale, which should either be the empty string or an ISO 15924 4-letter script code. The first letter is uppercase and the rest are lowercase, for example, \u0027Latn\u0027, \u0027Cyrl\u0027.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDisplayScript()\"\u003e\u003ccode\u003egetDisplayScript()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The script code, or the empty string if none is defined."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCountry",
      "comment": "Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDisplayCountry()\"\u003e\u003ccode\u003egetDisplayCountry()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The country/region code, or the empty string if none is defined."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getVariant",
      "comment": "Returns the variant code for this locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDisplayVariant()\"\u003e\u003ccode\u003egetDisplayVariant()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The variant code, or the empty string if none is defined."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasExtensions",
      "comment": "Returns true if this Locale has any extensions.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eLocale\u003c/code\u003e has any extensions"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stripExtensions",
      "comment": "Returns a copy of this Locale with no extensions. If this Locale has no extensions, this Locale is returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a copy of this \n\u003ccode\u003eLocale\u003c/code\u003e with no extensions, or \n\u003ccode\u003ethis\u003c/code\u003e if \n\u003ccode\u003ethis\u003c/code\u003e has no extensions"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExtension",
      "comment": "Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key. To be well-formed, the key must be one of [0-9A-Za-z]. Keys are case-insensitive, so for example \u0027z\u0027 and \u0027Z\u0027 represent the same extension.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#PRIVATE_USE_EXTENSION\"\u003e\u003ccode\u003ePRIVATE_USE_EXTENSION\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#UNICODE_LOCALE_EXTENSION\"\u003e\u003ccode\u003eUNICODE_LOCALE_EXTENSION\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the extension key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if key is not well-formed"
        ],
        "return": [
          "The extension, or null if this locale defines no extension for the specified key."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.Character",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExtensionKeys",
      "comment": "Returns the set of extension keys associated with this locale, or the empty set if it has no extensions. The returned set is unmodifiable. The keys will all be lower-case.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The set of extension keys, or the empty set if this locale has no extensions."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUnicodeLocaleAttributes",
      "comment": "Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes. The returned set is unmodifiable.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The set of attributes."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUnicodeLocaleType",
      "comment": "Returns the Unicode locale type associated with the specified Unicode locale key for this locale. Returns the empty string for keys that are defined with no type. Returns null if the key is not defined. Keys are case-insensitive. The key must be two alphanumeric characters ([0-9a-zA-Z]), or an IllegalArgumentException is thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the Unicode locale key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the key is not well-formed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is null"
        ],
        "return": [
          "The Unicode locale type associated with the key, or null if the locale does not define the key."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUnicodeLocaleKeys",
      "comment": "Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none. The returned set is immutable. Keys are all lower case.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The set of Unicode locale keys, or the empty set if this locale has no Unicode locale keywords."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "toString",
      "comment": "Returns a string representation of this Locale object, consisting of language, country, variant, script, and extensions as below: language + \"_\" + country + \"_\" + (variant + \"_#\" | \"#\") + script + \"_\" + extensions Language is always lower case, country is always upper case, script is always title case, and extensions are always lower case. Extensions and private use subtags will be in canonical order as explained in toLanguageTag(). When the locale has neither script nor extensions, the result is the same as in Java 6 and prior. If both the language and country fields are missing, this function will return the empty string, even if the variant, script, or extensions field is present (you can\u0027t have a locale with just a variant, the variant must accompany a well-formed language or country code). If script or extensions are present and variant is missing, no underscore is added before the \"#\". This behavior is designed to support debugging and to be compatible with previous uses of toString that expected language, country, and variant fields only. To represent a Locale as a String for interchange purposes, use toLanguageTag(). Examples: en de_DE _GB en_US_WIN de__POSIX zh_CN_#Hans zh_TW_#Hant_x-java th_TH_TH_#u-nu-thai",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDisplayName()\"\u003e\u003ccode\u003egetDisplayName()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#toLanguageTag()\"\u003e\u003ccode\u003etoLanguageTag()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A string representation of the Locale, for debugging."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toLanguageTag",
      "comment": "Returns a well-formed IETF BCP 47 language tag representing this locale. If this Locale has a language, country, or variant that does not satisfy the IETF BCP 47 language tag syntax requirements, this method handles these fields as described below: Language: If language is empty, or not well-formed (for example \"a\" or \"e2\"), it will be emitted as \"und\" (Undetermined). Country: If country is not well-formed (for example \"12\" or \"USA\"), it will be omitted. Variant: If variant is well-formed, each sub-segment (delimited by \u0027-\u0027 or \u0027_\u0027) is emitted as a subtag. Otherwise: if all sub-segments match [0-9a-zA-Z]{1,8} (for example \"WIN\" or \"Oracle_JDK_Standard_Edition\"), the first ill-formed sub-segment and all following will be appended to the private use subtag. The first appended subtag will be \"lvariant\", followed by the sub-segments in order, separated by hyphen. For example, \"x-lvariant-WIN\", \"Oracle-x-lvariant-JDK-Standard-Edition\". if any sub-segment does not match [0-9a-zA-Z]{1,8}, the variant will be truncated and the problematic sub-segment and all following sub-segments will be omitted. If the remainder is non-empty, it will be emitted as a private use subtag as above (even if the remainder turns out to be well-formed). For example, \"Solaris_isjustthecoolestthing\" is emitted as \"x-lvariant-Solaris\", not as \"solaris\". Special Conversions: Java supports some old locale representations, including deprecated ISO language codes, for compatibility. This method performs the following conversions: Deprecated ISO language codes \"iw\", \"ji\", and \"in\" are converted to \"he\", \"yi\", and \"id\", respectively. A locale with language \"no\", country \"NO\", and variant \"NY\", representing Norwegian Nynorsk (Norway), is converted to a language tag \"nn-NO\". Note: Although the language tag created by this method is well-formed (satisfies the syntax requirements defined by the IETF BCP 47 specification), it is not necessarily a valid BCP 47 language tag. For example,    new Locale(\"xx\", \"YY\").toLanguageTag(); will return \"xx-YY\", but the language subtag \"xx\" and the region subtag \"YY\" are invalid because they are not registered in the IANA Language Subtag Registry.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#forLanguageTag(java.lang.String)\"\u003e\u003ccode\u003eforLanguageTag(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a BCP47 language tag representing the locale"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "languageTag",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "forLanguageTag",
      "comment": "Returns a locale for the specified IETF BCP 47 language tag string. If the specified language tag contains any ill-formed subtags, the first such subtag and all following subtags are ignored. Compare to Locale.Builder.setLanguageTag(java.lang.String) which throws an exception in this case. The following conversions are performed: The language code \"und\" is mapped to language \"\". The language codes \"he\", \"yi\", and \"id\" are mapped to \"iw\", \"ji\", and \"in\" respectively. (This is the same canonicalization that\u0027s done in Locale\u0027s constructors.) The portion of a private use subtag prefixed by \"lvariant\", if any, is removed and appended to the variant field in the result locale (without case normalization). If it is then empty, the private use subtag is discarded:      Locale loc;\n     loc \u003d Locale.forLanguageTag(\"en-US-x-lvariant-POSIX\");\n     loc.getVariant(); // returns \"POSIX\"\n     loc.getExtension(\u0027x\u0027); // returns null\n\n     loc \u003d Locale.forLanguageTag(\"de-POSIX-x-URP-lvariant-Abc-Def\");\n     loc.getVariant(); // returns \"POSIX_Abc_Def\"\n     loc.getExtension(\u0027x\u0027); // returns \"urp\"\n When the languageTag argument contains an extlang subtag, the first such subtag is used as the language, and the primary language subtag and other extlang subtags are ignored:      Locale.forLanguageTag(\"ar-aao\").getLanguage(); // returns \"aao\"\n     Locale.forLanguageTag(\"en-abc-def-us\").toString(); // returns \"abc_US\"\n Case is normalized except for variant tags, which are left unchanged. Language is normalized to lower case, script to title case, country to upper case, and extensions to lower case. If, after processing, the locale would exactly match either ja_JP_JP or th_TH_TH with no extensions, the appropriate extensions are added as though the constructor had been called:     Locale.forLanguageTag(\"ja-JP-x-lvariant-JP\").toLanguageTag();\n    // returns \"ja-JP-u-ca-japanese-x-lvariant-JP\"\n    Locale.forLanguageTag(\"th-TH-x-lvariant-TH\").toLanguageTag();\n    // returns \"th-TH-u-nu-thai-x-lvariant-TH\"\n This implements the \u0027Language-Tag\u0027 production of BCP47, and so supports grandfathered (regular and irregular) as well as private use language tags. Stand alone private use tags are represented as empty language and extension \u0027x-whatever\u0027, and grandfathered tags are converted to their canonical replacements where they exist. Grandfathered tags with canonical replacements are as follows: Grandfathered tags with canonical replacements grandfathered tag modern replacement art-lojban jbo i-ami ami i-bnn bnn i-hak hak i-klingon tlh i-lux lb i-navajo nv i-pwn pwn i-tao tao i-tay tay i-tsu tsu no-bok nb no-nyn nn sgn-BE-FR sfb sgn-BE-NL vgt sgn-CH-DE sgg zh-guoyu cmn zh-hakka hak zh-min-nan nan zh-xiang hsn Grandfathered tags with no modern replacement will be converted as follows: Grandfathered tags with no modern replacement grandfathered tag converts to cel-gaulish xtg-x-cel-gaulish en-GB-oed en-GB-x-oed i-default en-x-i-default i-enochian und-x-i-enochian i-mingo see-x-i-mingo zh-min nan-x-zh-min For a list of all grandfathered tags, see the IANA Language Subtag Registry (search for \"Type: grandfathered\"). Note: there is no guarantee that toLanguageTag and forLanguageTag will round-trip.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#toLanguageTag()\"\u003e\u003ccode\u003etoLanguageTag()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Builder.html#setLanguageTag(java.lang.String)\"\u003e\u003ccode\u003eLocale.Builder.setLanguageTag(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elanguageTag\u003c/code\u003e - the language tag"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elanguageTag\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "The locale that best represents the language tag."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.util.MissingResourceException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getISO3Language",
      "comment": "Returns a three-letter abbreviation of this locale\u0027s language. If the language matches an ISO 639-1 two-letter code, the corresponding ISO 639-2/T three-letter lowercase code is returned. The ISO 639-2 language codes can be found on-line, see \"Codes for the Representation of Names of Languages Part 2: Alpha-3 Code\". If the locale specifies a three-letter language, the language is returned as is. If the locale does not specify a language the empty string is returned.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - Throws MissingResourceException if three-letter language abbreviation is not available for this locale."
        ],
        "return": [
          "A three-letter abbreviation of this locale\u0027s language."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.util.MissingResourceException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getISO3Country",
      "comment": "Returns a three-letter abbreviation for this locale\u0027s country. If the country matches an ISO 3166-1 alpha-2 code, the corresponding ISO 3166-1 alpha-3 uppercase code is returned. If the locale doesn\u0027t specify a country, this will be the empty string. The ISO 3166-1 codes can be found on-line.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - Throws MissingResourceException if the three-letter country abbreviation is not available for this locale."
        ],
        "return": [
          "A three-letter abbreviation of this locale\u0027s country."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDisplayLanguage",
      "comment": "Returns a name for the locale\u0027s language that is appropriate for display to the user. If possible, the name returned will be localized for the default DISPLAY locale. For example, if the locale is fr_FR and the default DISPLAY locale is en_US, getDisplayLanguage() will return \"French\"; if the locale is en_US and the default DISPLAY locale is fr_FR, getDisplayLanguage() will return \"anglais\". If the name returned cannot be localized for the default DISPLAY locale, (say, we don\u0027t have a Japanese name for Croatian), this function falls back on the English name, and uses the ISO code as a last-resort value. If the locale doesn\u0027t specify a language, this function returns the empty string.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The name of the display language."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "inLocale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayLanguage",
      "comment": "Returns a name for the locale\u0027s language that is appropriate for display to the user. If possible, the name returned will be localized according to inLocale. For example, if the locale is fr_FR and inLocale is en_US, getDisplayLanguage() will return \"French\"; if the locale is en_US and inLocale is fr_FR, getDisplayLanguage() will return \"anglais\". If the name returned cannot be localized according to inLocale, (say, we don\u0027t have a Japanese name for Croatian), this function falls back on the English name, and finally on the ISO code as a last-resort value. If the locale doesn\u0027t specify a language, this function returns the empty string.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einLocale\u003c/code\u003e - The locale for which to retrieve the display language."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einLocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "The name of the display language appropriate to the given locale."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayScript",
      "comment": "Returns a name for the locale\u0027s script that is appropriate for display to the user. If possible, the name will be localized for the default DISPLAY locale. Returns the empty string if this locale doesn\u0027t specify a script code.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the display name of the script code for the current default \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#DISPLAY\"\u003e\u003ccode\u003eDISPLAY\u003c/code\u003e\u003c/a\u003e locale"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "inLocale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayScript",
      "comment": "Returns a name for the locale\u0027s script that is appropriate for display to the user. If possible, the name will be localized for the given locale. Returns the empty string if this locale doesn\u0027t specify a script code.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einLocale\u003c/code\u003e - The locale for which to retrieve the display script."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einLocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the display name of the script code for the current default \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Category.html#DISPLAY\"\u003e\u003ccode\u003eDISPLAY\u003c/code\u003e\u003c/a\u003e locale"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDisplayCountry",
      "comment": "Returns a name for the locale\u0027s country that is appropriate for display to the user. If possible, the name returned will be localized for the default DISPLAY locale. For example, if the locale is fr_FR and the default DISPLAY locale is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and the default DISPLAY locale is fr_FR, getDisplayCountry() will return \"Etats-Unis\". If the name returned cannot be localized for the default DISPLAY locale, (say, we don\u0027t have a Japanese name for Croatia), this function falls back on the English name, and uses the ISO code as a last-resort value. If the locale doesn\u0027t specify a country, this function returns the empty string.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The name of the country appropriate to the locale."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "inLocale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayCountry",
      "comment": "Returns a name for the locale\u0027s country that is appropriate for display to the user. If possible, the name returned will be localized according to inLocale. For example, if the locale is fr_FR and inLocale is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and inLocale is fr_FR, getDisplayCountry() will return \"Etats-Unis\". If the name returned cannot be localized according to inLocale. (say, we don\u0027t have a Japanese name for Croatia), this function falls back on the English name, and finally on the ISO code as a last-resort value. If the locale doesn\u0027t specify a country, this function returns the empty string.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einLocale\u003c/code\u003e - The locale for which to retrieve the display country."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einLocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "The name of the country appropriate to the given locale."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDisplayVariant",
      "comment": "Returns a name for the locale\u0027s variant code that is appropriate for display to the user. If possible, the name will be localized for the default DISPLAY locale. If the locale doesn\u0027t specify a variant code, this function returns the empty string.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The name of the display variant code appropriate to the locale."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "inLocale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayVariant",
      "comment": "Returns a name for the locale\u0027s variant code that is appropriate for display to the user. If possible, the name will be localized for inLocale. If the locale doesn\u0027t specify a variant code, this function returns the empty string.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einLocale\u003c/code\u003e - The locale for which to retrieve the display variant code."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einLocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "The name of the display variant code appropriate to the given locale."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDisplayName",
      "comment": "Returns a name for the locale that is appropriate for display to the user. This will be the values returned by getDisplayLanguage(), getDisplayScript(), getDisplayCountry(), getDisplayVariant() and optional Unicode extensions assembled into a single string. The non-empty values are used in order, with the second and subsequent names in parentheses. For example: language (script, country, variant(, extension)*) language (country(, extension)*) language (variant(, extension)*) script (country(, extension)*) country (extension)* depending on which fields are specified in the locale. The field separator in the above parentheses, denoted as a comma character, may be localized depending on the locale. If the language, script, country, and variant fields are all empty, this function returns the empty string.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The name of the locale appropriate to display."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "inLocale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayName",
      "comment": "Returns a name for the locale that is appropriate for display to the user. This will be the values returned by getDisplayLanguage(), getDisplayScript(),getDisplayCountry() getDisplayVariant(), and optional Unicode extensions assembled into a single string. The non-empty values are used in order, with the second and subsequent names in parentheses. For example: language (script, country, variant(, extension)*) language (country(, extension)*) language (variant(, extension)*) script (country(, extension)*) country (extension)* depending on which fields are specified in the locale. The field separator in the above parentheses, denoted as a comma character, may be localized depending on the locale. If the language, script, country, and variant fields are all empty, this function returns the empty string.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einLocale\u003c/code\u003e - The locale for which to retrieve the display name."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003einLocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "The name of the locale appropriate to display."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Overrides Cloneable.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a clone of this instance."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Override hashCode. Since Locales are often used in hashtables, caches the value for speed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Returns true if this Locale is equal to another object. A Locale is deemed equal to another Locale with identical language, script, country, variant and extensions, and unequal to all other objects.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "true if this Locale is equal to the specified object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.util.Locale",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.util.Locale$LanguageRange",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "priorityList",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "java.util.Locale",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "locales",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale$FilteringMode",
            "type": "Class"
          },
          "name": "mode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "filter",
      "comment": "Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647. This filter operation on the given locales ensures that only unique matching locale(s) are returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epriorityList\u003c/code\u003e - user\u0027s Language Priority List in which each language tag is sorted in descending order based on priority or weight",
          "\u003ccode\u003elocales\u003c/code\u003e - \n\u003ccode\u003eLocale\u003c/code\u003e instances used for matching",
          "\u003ccode\u003emode\u003c/code\u003e - filtering mode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epriorityList\u003c/code\u003e or \n\u003ccode\u003elocales\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if one or more extended language ranges are included in the given list when \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.FilteringMode.html#REJECT_EXTENDED_RANGES\"\u003e\u003ccode\u003eLocale.FilteringMode.REJECT_EXTENDED_RANGES\u003c/code\u003e\u003c/a\u003e is specified"
        ],
        "return": [
          "a list of \n\u003ccode\u003eLocale\u003c/code\u003e instances for matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.util.Locale",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.util.Locale$LanguageRange",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "priorityList",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "java.util.Locale",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "locales",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "filter",
      "comment": "Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647. This is equivalent to filter(List, Collection, FilteringMode) when mode is Locale.FilteringMode.AUTOSELECT_FILTERING. This filter operation on the given locales ensures that only unique matching locale(s) are returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epriorityList\u003c/code\u003e - user\u0027s Language Priority List in which each language tag is sorted in descending order based on priority or weight",
          "\u003ccode\u003elocales\u003c/code\u003e - \n\u003ccode\u003eLocale\u003c/code\u003e instances used for matching"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epriorityList\u003c/code\u003e or \n\u003ccode\u003elocales\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a list of \n\u003ccode\u003eLocale\u003c/code\u003e instances for matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.util.Locale$LanguageRange",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "priorityList",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "tags",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale$FilteringMode",
            "type": "Class"
          },
          "name": "mode",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "filterTags",
      "comment": "Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647. This filter operation on the given tags ensures that only unique matching tag(s) are returned with preserved case. In case of duplicate matching tags with the case difference, the first matching tag with preserved case is returned. For example, \"de-ch\" is returned out of the duplicate matching tags \"de-ch\" and \"de-CH\", if \"de-ch\" is checked first for matching in the given tags. Note that if the given tags is an unordered Collection, the returned matching tag out of duplicate tags is subject to change, depending on the implementation of the Collection.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epriorityList\u003c/code\u003e - user\u0027s Language Priority List in which each language tag is sorted in descending order based on priority or weight",
          "\u003ccode\u003etags\u003c/code\u003e - language tags",
          "\u003ccode\u003emode\u003c/code\u003e - filtering mode"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epriorityList\u003c/code\u003e or \n\u003ccode\u003etags\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if one or more extended language ranges are included in the given list when \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.FilteringMode.html#REJECT_EXTENDED_RANGES\"\u003e\u003ccode\u003eLocale.FilteringMode.REJECT_EXTENDED_RANGES\u003c/code\u003e\u003c/a\u003e is specified"
        ],
        "return": [
          "a list of matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.util.Locale$LanguageRange",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "priorityList",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "tags",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "filterTags",
      "comment": "Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647. This is equivalent to filterTags(List, Collection, FilteringMode) when mode is Locale.FilteringMode.AUTOSELECT_FILTERING. This filter operation on the given tags ensures that only unique matching tag(s) are returned with preserved case. In case of duplicate matching tags with the case difference, the first matching tag with preserved case is returned. For example, \"de-ch\" is returned out of the duplicate matching tags \"de-ch\" and \"de-CH\", if \"de-ch\" is checked first for matching in the given tags. Note that if the given tags is an unordered Collection, the returned matching tag out of duplicate tags is subject to change, depending on the implementation of the Collection.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epriorityList\u003c/code\u003e - user\u0027s Language Priority List in which each language tag is sorted in descending order based on priority or weight",
          "\u003ccode\u003etags\u003c/code\u003e - language tags"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epriorityList\u003c/code\u003e or \n\u003ccode\u003etags\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a list of matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.util.Locale$LanguageRange",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "priorityList",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "java.util.Locale",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "locales",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "lookup",
      "comment": "Returns a Locale instance for the best-matching language tag using the lookup mechanism defined in RFC 4647.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epriorityList\u003c/code\u003e - user\u0027s Language Priority List in which each language tag is sorted in descending order based on priority or weight",
          "\u003ccode\u003elocales\u003c/code\u003e - \n\u003ccode\u003eLocale\u003c/code\u003e instances used for matching"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epriorityList\u003c/code\u003e or \n\u003ccode\u003etags\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the best matching \n\u003ccode\u003eLocale\u003c/code\u003e instance chosen based on priority or weight, or \n\u003ccode\u003enull\u003c/code\u003e if nothing matches."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.util.Locale$LanguageRange",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "priorityList",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "tags",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "lookupTag",
      "comment": "Returns the best-matching language tag using the lookup mechanism defined in RFC 4647. This lookup operation on the given tags ensures that the first matching tag with preserved case is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epriorityList\u003c/code\u003e - user\u0027s Language Priority List in which each language tag is sorted in descending order based on priority or weight",
          "\u003ccode\u003etags\u003c/code\u003e - language tangs used for matching"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003epriorityList\u003c/code\u003e or \n\u003ccode\u003etags\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the best matching language tag chosen based on priority or weight, or \n\u003ccode\u003enull\u003c/code\u003e if nothing matches."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "language",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "country",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "variant",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a locale from language, country and variant. This constructor normalizes the language value to lowercase and the country value to uppercase. Note: ISO 639 is not a stable standard; some of the language codes it defines (specifically \"iw\", \"ji\", and \"in\") have changed. This constructor accepts both the old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other API on Locale will return only the OLD codes. For backward compatibility reasons, this constructor does not make any syntactic checks on the input. The two cases (\"ja\", \"JP\", \"JP\") and (\"th\", \"TH\", \"TH\") are handled specially, see Special Cases for more information.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elanguage\u003c/code\u003e - An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length. See the \n\u003ccode\u003eLocale\u003c/code\u003e class description about valid language values.",
          "\u003ccode\u003ecountry\u003c/code\u003e - An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code. See the \n\u003ccode\u003eLocale\u003c/code\u003e class description about valid country values.",
          "\u003ccode\u003evariant\u003c/code\u003e - Any arbitrary value used to indicate a variation of a \n\u003ccode\u003eLocale\u003c/code\u003e. See the \n\u003ccode\u003eLocale\u003c/code\u003e class description for the details."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - thrown if any argument is null."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "language",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "country",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a locale from language and country. This constructor normalizes the language value to lowercase and the country value to uppercase. Note: ISO 639 is not a stable standard; some of the language codes it defines (specifically \"iw\", \"ji\", and \"in\") have changed. This constructor accepts both the old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other API on Locale will return only the OLD codes. For backward compatibility reasons, this constructor does not make any syntactic checks on the input.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elanguage\u003c/code\u003e - An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length. See the \n\u003ccode\u003eLocale\u003c/code\u003e class description about valid language values.",
          "\u003ccode\u003ecountry\u003c/code\u003e - An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code. See the \n\u003ccode\u003eLocale\u003c/code\u003e class description about valid country values."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - thrown if either argument is null."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "language",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a locale from a language code. This constructor normalizes the language value to lowercase. Note: ISO 639 is not a stable standard; some of the language codes it defines (specifically \"iw\", \"ji\", and \"in\") have changed. This constructor accepts both the old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other API on Locale will return only the OLD codes. For backward compatibility reasons, this constructor does not make any syntactic checks on the input.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elanguage\u003c/code\u003e - An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length. See the \n\u003ccode\u003eLocale\u003c/code\u003e class description about valid language values."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - thrown if argument is null."
        ],
        "since": [
          "1.4"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.Locale$FilteringMode",
    "java.util.Locale$LanguageRange",
    "java.util.Locale$Category",
    "java.util.Locale$IsoCountryCode",
    "java.util.Locale$Builder"
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.util.Locale",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Builder.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale.Builder\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Format.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/NumberFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eNumberFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/Collator.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eCollator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.Locale\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}