{
  "packageName": "java.util",
  "simpleName": "Queue",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.Collection",
    "parameters": [
      {
        "name": "E",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.Queue",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "add",
      "comment": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#add(E)\"\u003eadd\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Queue.html\" title\u003d\"type parameter in Queue\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to add"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the element cannot be added at this time due to capacity restrictions",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this queue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this queue does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of this element prevents it from being added to this queue"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e (as specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#add(E)\"\u003e\u003ccode\u003eCollection.add(E)\u003c/code\u003e\u003c/a\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.Queue",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "e"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "offer",
      "comment": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions. When using a capacity-restricted queue, this method is generally preferable to add(E), which can fail to insert an element only by throwing an exception.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to add"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this queue",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this queue does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of this element prevents it from being added to this queue"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the element was added to this queue, else \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Queue",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Retrieves and removes the head of this queue. This method differs from poll() only in that it throws an exception if this queue is empty.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if this queue is empty"
        ],
        "return": [
          "the head of this queue"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Queue",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "poll",
      "comment": "Retrieves and removes the head of this queue, or returns null if this queue is empty.",
      "tagMap": {
        "return": [
          "the head of this queue, or \n\u003ccode\u003enull\u003c/code\u003e if this queue is empty"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Queue",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "element",
      "comment": "Retrieves, but does not remove, the head of this queue. This method differs from peek only in that it throws an exception if this queue is empty.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if this queue is empty"
        ],
        "return": [
          "the head of this queue"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Queue",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "peek",
      "comment": "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.",
      "tagMap": {
        "return": [
          "the head of this queue, or \n\u003ccode\u003enull\u003c/code\u003e if this queue is empty"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.Queue",
  "comment": "A collection designed for holding elements prior to processing. Besides basic \n\u003ca href\u003d\"Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e operations, queues provide additional insertion, extraction, and inspection operations. Each of these methods exists in two forms: one throws an exception if the operation fails, the other returns a special value (either \n\u003ccode\u003enull\u003c/code\u003e or \n\u003ccode\u003efalse\u003c/code\u003e, depending on the operation). The latter form of the insert operation is designed specifically for use with capacity-restricted \n\u003ccode\u003eQueue\u003c/code\u003e implementations; in most implementations, insert operations cannot fail. \n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption\u003e\n  Summary of Queue methods\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003ctd\u003e\u003c/td\u003e \n   \u003cth scope\u003d\"col\" style\u003d\"font-weight:normal; font-style:italic\"\u003eThrows exception\u003c/th\u003e \n   \u003cth scope\u003d\"col\" style\u003d\"font-weight:normal; font-style:italic\"\u003eReturns special value\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eInsert\u003c/th\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#add(E)\"\u003e\u003ccode\u003eadd(e)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#offer(E)\"\u003e\u003ccode\u003eoffer(e)\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eRemove\u003c/th\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#remove()\"\u003e\u003ccode\u003eremove()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#poll()\"\u003e\u003ccode\u003epoll()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eExamine\u003c/th\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#element()\"\u003e\u003ccode\u003eelement()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n   \u003ctd\u003e\u003ca href\u003d\"#peek()\"\u003e\u003ccode\u003epeek()\u003c/code\u003e\u003c/a\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003eQueues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner. Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements\u0027 natural ordering, and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out). Whatever the ordering used, the \u003cem\u003ehead\u003c/em\u003e of the queue is that element which would be removed by a call to \u003ca href\u003d\"#remove()\"\u003e\u003ccode\u003eremove()\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"#poll()\"\u003e\u003ccode\u003epoll()\u003c/code\u003e\u003c/a\u003e. In a FIFO queue, all new elements are inserted at the \u003cem\u003etail\u003c/em\u003e of the queue. Other kinds of queues may use different placement rules. Every \u003ccode\u003eQueue\u003c/code\u003e implementation must specify its ordering properties. \u003c/p\u003e\n\u003cp\u003eThe \u003ca href\u003d\"#offer(E)\"\u003e\u003ccode\u003eoffer\u003c/code\u003e\u003c/a\u003e method inserts an element if possible, otherwise returning \u003ccode\u003efalse\u003c/code\u003e. This differs from the \u003ca href\u003d\"Collection.html#add(E)\"\u003e\u003ccode\u003eCollection.add\u003c/code\u003e\u003c/a\u003e method, which can fail to add an element only by throwing an unchecked exception. The \u003ccode\u003eoffer\u003c/code\u003e method is designed for use when failure is a normal, rather than exceptional occurrence, for example, in fixed-capacity (or \"bounded\") queues. \u003c/p\u003e\n\u003cp\u003eThe \u003ca href\u003d\"#remove()\"\u003e\u003ccode\u003eremove()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#poll()\"\u003e\u003ccode\u003epoll()\u003c/code\u003e\u003c/a\u003e methods remove and return the head of the queue. Exactly which element is removed from the queue is a function of the queue\u0027s ordering policy, which differs from implementation to implementation. The \u003ccode\u003eremove()\u003c/code\u003e and \u003ccode\u003epoll()\u003c/code\u003e methods differ only in their behavior when the queue is empty: the \u003ccode\u003eremove()\u003c/code\u003e method throws an exception, while the \u003ccode\u003epoll()\u003c/code\u003e method returns \u003ccode\u003enull\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThe \u003ca href\u003d\"#element()\"\u003e\u003ccode\u003eelement()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#peek()\"\u003e\u003ccode\u003epeek()\u003c/code\u003e\u003c/a\u003e methods return, but do not remove, the head of the queue. \u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eQueue\u003c/code\u003e interface does not define the \u003ci\u003eblocking queue methods\u003c/i\u003e, which are common in concurrent programming. These methods, which wait for elements to appear or for space to become available, are defined in the \u003ca href\u003d\"concurrent/BlockingQueue.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eBlockingQueue\u003c/code\u003e\u003c/a\u003e interface, which extends this interface. \u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eQueue\u003c/code\u003e implementations generally do not allow insertion of \u003ccode\u003enull\u003c/code\u003e elements, although some implementations, such as \u003ca href\u003d\"LinkedList.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLinkedList\u003c/code\u003e\u003c/a\u003e, do not prohibit insertion of \u003ccode\u003enull\u003c/code\u003e. Even in the implementations that permit it, \u003ccode\u003enull\u003c/code\u003e should not be inserted into a \u003ccode\u003eQueue\u003c/code\u003e, as \u003ccode\u003enull\u003c/code\u003e is also used as a special return value by the \u003ccode\u003epoll\u003c/code\u003e method to indicate that the queue contains no elements. \u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eQueue\u003c/code\u003e implementations generally do not define element-based versions of methods \u003ccode\u003eequals\u003c/code\u003e and \u003ccode\u003ehashCode\u003c/code\u003e but instead inherit the identity based versions from class \u003ccode\u003eObject\u003c/code\u003e, because element-based equality is not always well-defined for queues with the same elements but different ordering properties. \u003c/p\u003e\n\u003cp\u003eThis interface is a member of the \u003ca href\u003d\"../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}