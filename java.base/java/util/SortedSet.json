{
  "packageName": "java.util",
  "simpleName": "SortedSet",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.Set",
    "parameters": [
      {
        "name": "E",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "lowerBounds": [
              {
                "owner": "java.util.SortedSet",
                "name": "E",
                "type": "Variable"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "comparator",
      "comment": "Returns the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements.",
      "tagMap": {
        "return": [
          "the comparator used to order the elements in this set, or \n\u003ccode\u003enull\u003c/code\u003e if this set uses the natural ordering of its elements"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedSet",
        "parameters": [
          {
            "owner": "java.util.SortedSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.SortedSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "fromElement"
          }
        },
        {
          "type": {
            "owner": "java.util.SortedSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "toElement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subSet",
      "comment": "Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive. (If fromElement and toElement are equal, the returned set is empty.) The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromElement\u003c/code\u003e - low endpoint (inclusive) of the returned set",
          "\u003ccode\u003etoElement\u003c/code\u003e - high endpoint (exclusive) of the returned set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e and \n\u003ccode\u003etoElement\u003c/code\u003e cannot be compared to one another using this set\u0027s comparator (or, if the set has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromElement\u003c/code\u003e or \n\u003ccode\u003etoElement\u003c/code\u003e cannot be compared to elements currently in the set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e or \n\u003ccode\u003etoElement\u003c/code\u003e is null and this set does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e is greater than \n\u003ccode\u003etoElement\u003c/code\u003e; or if this set itself has a restricted range, and \n\u003ccode\u003efromElement\u003c/code\u003e or \n\u003ccode\u003etoElement\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this set whose elements range from \n\u003ccode\u003efromElement\u003c/code\u003e, inclusive, to \n\u003ccode\u003etoElement\u003c/code\u003e, exclusive"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedSet",
        "parameters": [
          {
            "owner": "java.util.SortedSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.SortedSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "toElement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "headSet",
      "comment": "Returns a view of the portion of this set whose elements are strictly less than toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etoElement\u003c/code\u003e - high endpoint (exclusive) of the returned set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoElement\u003c/code\u003e is not compatible with this set\u0027s comparator (or, if the set has no comparator, if \n\u003ccode\u003etoElement\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003etoElement\u003c/code\u003e cannot be compared to elements currently in the set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoElement\u003c/code\u003e is null and this set does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this set itself has a restricted range, and \n\u003ccode\u003etoElement\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this set whose elements are strictly less than \n\u003ccode\u003etoElement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedSet",
        "parameters": [
          {
            "owner": "java.util.SortedSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.SortedSet",
            "name": "E",
            "type": "Variable"
          },
          "field": {
            "name": "fromElement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "tailSet",
      "comment": "Returns a view of the portion of this set whose elements are greater than or equal to fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromElement\u003c/code\u003e - low endpoint (inclusive) of the returned set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e is not compatible with this set\u0027s comparator (or, if the set has no comparator, if \n\u003ccode\u003efromElement\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromElement\u003c/code\u003e cannot be compared to elements currently in the set.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromElement\u003c/code\u003e is null and this set does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this set itself has a restricted range, and \n\u003ccode\u003efromElement\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this set whose elements are greater than or equal to \n\u003ccode\u003efromElement\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.SortedSet",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "first",
      "comment": "Returns the first (lowest) element currently in this set.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if this set is empty"
        ],
        "return": [
          "the first (lowest) element currently in this set"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.SortedSet",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "last",
      "comment": "Returns the last (highest) element currently in this set.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if this set is empty"
        ],
        "return": [
          "the last (highest) element currently in this set"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator",
        "parameters": [
          {
            "owner": "java.util.SortedSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spliterator",
      "comment": "Creates a Spliterator over the elements in this sorted set. The Spliterator reports Spliterator.DISTINCT, Spliterator.SORTED and Spliterator.ORDERED. Implementations should document the reporting of additional characteristic values. The spliterator\u0027s comparator (see Spliterator.getComparator()) must be null if the sorted set\u0027s comparator (see comparator()) is null. Otherwise, the spliterator\u0027s comparator must be the same as or impose the same total ordering as the sorted set\u0027s comparator.",
      "tagMap": {
        "implSpec": [
          "The default implementation creates a \n\u003cem\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e spliterator from the sorted set\u0027s \n\u003ccode\u003eIterator\u003c/code\u003e. The spliterator inherits the \n\u003cem\u003efail-fast\u003c/em\u003e properties of the set\u0027s iterator. The spliterator\u0027s comparator is the same as the sorted set\u0027s comparator. \n\u003cp\u003e The created \u003ccode\u003eSpliterator\u003c/code\u003e additionally reports \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#SIZED\"\u003e\u003ccode\u003eSpliterator.SIZED\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#spliterator()\"\u003espliterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"type parameter in SortedSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html#spliterator()\"\u003espliterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html\" title\u003d\"interface in java.lang\"\u003eIterable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"type parameter in SortedSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html#spliterator()\"\u003espliterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html\" title\u003d\"interface in java.util\"\u003eSet\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"type parameter in SortedSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "implNote": [
          "The created \n\u003ccode\u003eSpliterator\u003c/code\u003e additionally reports \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#SUBSIZED\"\u003e\u003ccode\u003eSpliterator.SUBSIZED\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eSpliterator\u003c/code\u003e over the elements in this sorted set"
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.SortedSet",
  "comment": "A \n\u003ca href\u003d\"Set.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSet\u003c/code\u003e\u003c/a\u003e that further provides a \n\u003ci\u003etotal ordering\u003c/i\u003e on its elements. The elements are ordered using their \n\u003ca href\u003d\"../lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003enatural ordering\u003c/a\u003e, or by a \n\u003ca href\u003d\"Comparator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eComparator\u003c/code\u003e\u003c/a\u003e typically provided at sorted set creation time. The set\u0027s iterator will traverse the set in ascending element order. Several additional operations are provided to take advantage of the ordering. (This interface is the set analogue of \n\u003ca href\u003d\"SortedMap.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedMap\u003c/code\u003e\u003c/a\u003e.) \n\u003cp\u003eAll elements inserted into a sorted set must implement the \u003ccode\u003eComparable\u003c/code\u003e interface (or be accepted by the specified comparator). Furthermore, all such elements must be \u003ci\u003emutually comparable\u003c/i\u003e: \u003ccode\u003ee1.compareTo(e2)\u003c/code\u003e (or \u003ccode\u003ecomparator.compare(e1, e2)\u003c/code\u003e) must not throw a \u003ccode\u003eClassCastException\u003c/code\u003e for any elements \u003ccode\u003ee1\u003c/code\u003e and \u003ccode\u003ee2\u003c/code\u003e in the sorted set. Attempts to violate this restriction will cause the offending method or constructor invocation to throw a \u003ccode\u003eClassCastException\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eNote that the ordering maintained by a sorted set (whether or not an explicit comparator is provided) must be \u003ci\u003econsistent with equals\u003c/i\u003e if the sorted set is to correctly implement the \u003ccode\u003eSet\u003c/code\u003e interface. (See the \u003ccode\u003eComparable\u003c/code\u003e interface or \u003ccode\u003eComparator\u003c/code\u003e interface for a precise definition of \u003ci\u003econsistent with equals\u003c/i\u003e.) This is so because the \u003ccode\u003eSet\u003c/code\u003e interface is defined in terms of the \u003ccode\u003eequals\u003c/code\u003e operation, but a sorted set performs all element comparisons using its \u003ccode\u003ecompareTo\u003c/code\u003e (or \u003ccode\u003ecompare\u003c/code\u003e) method, so two elements that are deemed equal by this method are, from the standpoint of the sorted set, equal. The behavior of a sorted set \u003ci\u003eis\u003c/i\u003e well-defined even if its ordering is inconsistent with equals; it just fails to obey the general contract of the \u003ccode\u003eSet\u003c/code\u003e interface. \u003c/p\u003e\n\u003cp\u003eAll general-purpose sorted set implementation classes should provide four \"standard\" constructors: 1) A void (no arguments) constructor, which creates an empty sorted set sorted according to the natural ordering of its elements. 2) A constructor with a single argument of type \u003ccode\u003eComparator\u003c/code\u003e, which creates an empty sorted set sorted according to the specified comparator. 3) A constructor with a single argument of type \u003ccode\u003eCollection\u003c/code\u003e, which creates a new sorted set with the same elements as its argument, sorted according to the natural ordering of the elements. 4) A constructor with a single argument of type \u003ccode\u003eSortedSet\u003c/code\u003e, which creates a new sorted set with the same elements and the same ordering as the input sorted set. There is no way to enforce this recommendation, as interfaces cannot contain constructors. \u003c/p\u003e\n\u003cp\u003eNote: several methods return subsets with restricted ranges. Such ranges are \u003ci\u003ehalf-open\u003c/i\u003e, that is, they include their low endpoint but not their high endpoint (where applicable). If you need a \u003ci\u003eclosed range\u003c/i\u003e (which includes both endpoints), and the element type allows for calculation of the successor of a given value, merely request the subrange from \u003ccode\u003elowEndpoint\u003c/code\u003e to \u003ccode\u003esuccessor(highEndpoint)\u003c/code\u003e. For example, suppose that \u003ccode\u003es\u003c/code\u003e is a sorted set of strings. The following idiom obtains a view containing all of the strings in \u003ccode\u003es\u003c/code\u003e from \u003ccode\u003elow\u003c/code\u003e to \u003ccode\u003ehigh\u003c/code\u003e, inclusive:\u003c/p\u003e\n\u003cpre\u003e   SortedSet\u0026lt;String\u0026gt; sub \u003d s.subSet(low, high+\"\\0\");\u003c/pre\u003e A similar technique can be used to generate an \n\u003ci\u003eopen range\u003c/i\u003e (which contains neither endpoint). The following idiom obtains a view containing all of the Strings in \n\u003ccode\u003es\u003c/code\u003e from \n\u003ccode\u003elow\u003c/code\u003e to \n\u003ccode\u003ehigh\u003c/code\u003e, exclusive:\n\u003cpre\u003e   SortedSet\u0026lt;String\u0026gt; sub \u003d s.subSet(low+\"\\0\", high);\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThis interface is a member of the \u003ca href\u003d\"../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TreeSet.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTreeSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eComparator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClassCastException\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}