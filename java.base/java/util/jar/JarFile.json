{
  "packageName": "java.util.jar",
  "simpleName": "JarFile",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.zip.ZipFile",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MANIFEST_NAME",
      "comment": "The JAR manifest file name.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.MANIFEST_NAME\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOCSIG",
      "comment": "Local file (LOC) header signature.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.LOCSIG\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "EXTSIG",
      "comment": "Extra local (EXT) header signature.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.EXTSIG\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENSIG",
      "comment": "Central directory (CEN) header signature.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENSIG\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ENDSIG",
      "comment": "End of central directory (END) header signature.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.ENDSIG\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOCHDR",
      "comment": "Local file (LOC) header size in bytes (including signature).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.LOCHDR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "EXTHDR",
      "comment": "Extra local (EXT) header size in bytes (including signature).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.EXTHDR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENHDR",
      "comment": "Central directory (CEN) header size in bytes (including signature).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENHDR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ENDHDR",
      "comment": "End of central directory (END) header size in bytes (including signature).",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.ENDHDR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOCVER",
      "comment": "Local file (LOC) header version needed to extract field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.LOCVER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOCFLG",
      "comment": "Local file (LOC) header general purpose bit flag field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.LOCFLG\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOCHOW",
      "comment": "Local file (LOC) header compression method field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.LOCHOW\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOCTIM",
      "comment": "Local file (LOC) header modification time field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.LOCTIM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOCCRC",
      "comment": "Local file (LOC) header uncompressed file crc-32 value field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.LOCCRC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOCSIZ",
      "comment": "Local file (LOC) header compressed size field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.LOCSIZ\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOCLEN",
      "comment": "Local file (LOC) header uncompressed size field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.LOCLEN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOCNAM",
      "comment": "Local file (LOC) header filename length field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.LOCNAM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "LOCEXT",
      "comment": "Local file (LOC) header extra field length field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.LOCEXT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "EXTCRC",
      "comment": "Extra local (EXT) header uncompressed file crc-32 value field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.EXTCRC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "EXTSIZ",
      "comment": "Extra local (EXT) header compressed size field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.EXTSIZ\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "EXTLEN",
      "comment": "Extra local (EXT) header uncompressed size field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.EXTLEN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENVEM",
      "comment": "Central directory (CEN) header version made by field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENVEM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENVER",
      "comment": "Central directory (CEN) header version needed to extract field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENVER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENFLG",
      "comment": "Central directory (CEN) header encrypt, decrypt flags field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENFLG\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENHOW",
      "comment": "Central directory (CEN) header compression method field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENHOW\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENTIM",
      "comment": "Central directory (CEN) header modification time field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENTIM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENCRC",
      "comment": "Central directory (CEN) header uncompressed file crc-32 value field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENCRC\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENSIZ",
      "comment": "Central directory (CEN) header compressed size field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENSIZ\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENLEN",
      "comment": "Central directory (CEN) header uncompressed size field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENLEN\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENNAM",
      "comment": "Central directory (CEN) header filename length field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENNAM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENEXT",
      "comment": "Central directory (CEN) header extra field length field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENEXT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENCOM",
      "comment": "Central directory (CEN) header comment length field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENCOM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENDSK",
      "comment": "Central directory (CEN) header disk number start field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENDSK\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENATT",
      "comment": "Central directory (CEN) header internal file attributes field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENATT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENATX",
      "comment": "Central directory (CEN) header external file attributes field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENATX\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "CENOFF",
      "comment": "Central directory (CEN) header LOC header offset field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.CENOFF\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ENDSUB",
      "comment": "End of central directory (END) header number of entries on this disk field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.ENDSUB\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ENDTOT",
      "comment": "End of central directory (END) header total number of entries field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.ENDTOT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ENDSIZ",
      "comment": "End of central directory (END) header central directory size in bytes field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.ENDSIZ\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ENDOFF",
      "comment": "End of central directory (END) header offset for the first CEN header field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.ENDOFF\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "ENDCOM",
      "comment": "End of central directory (END) header zip file comment length field offset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.jar.JarFile.ENDCOM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Runtime$Version",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "baseVersion",
      "comment": "Returns the version that represents the unversioned configuration of a multi-release jar file.",
      "tagMap": {
        "return": [
          "the version that represents the unversioned configuration"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Runtime$Version",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "runtimeVersion",
      "comment": "Returns the version that represents the effective runtime versioned configuration of a multi-release jar file. By default the feature version number of the returned Version will be equal to the feature version number of Runtime.version(). However, if the jdk.util.jar.version property is set, the returned Version is derived from that property and feature version numbers may not be equal.",
      "tagMap": {
        "return": [
          "the version that represents the runtime versioned configuration"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Runtime$Version",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getVersion",
      "comment": "Returns the maximum version used when searching for versioned entries. If this JarFile is not a multi-release jar file or is not configured to be processed as such, then the version returned will be the same as that returned from baseVersion().",
      "tagMap": {
        "return": [
          "the maximum version"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isMultiRelease",
      "comment": "Indicates whether or not this jar file is a multi-release jar file.",
      "tagMap": {
        "return": [
          "true if this JarFile is a multi-release jar file"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.jar.Manifest",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getManifest",
      "comment": "Returns the jar file manifest, or null if none.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - may be thrown if the jar file has been closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error has occurred"
        ],
        "return": [
          "the jar file manifest, or \n\u003ccode\u003enull\u003c/code\u003e if none"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.jar.JarEntry",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getJarEntry",
      "comment": "Returns the JarEntry for the given base entry name or null if not found. If this JarFile is a multi-release jar file and is configured to be processed as such, then a search is performed to find and return a JarEntry that is the latest versioned entry associated with the given entry name. The returned JarEntry is the versioned entry corresponding to the given base entry name prefixed with the string \"META-INF/versions/{n}/\", for the largest value of n for which an entry exists. If such a versioned entry does not exist, then the JarEntry for the base entry is returned, otherwise null is returned if no entries are found. The initial value for the version n is the maximum version as returned by the method getVersion().",
      "tagMap": {
        "implSpec": [
          "\u003cdiv class\u003d\"block\"\u003e\n  This implementation invokes \n \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/jar/JarFile.html#getEntry(java.lang.String)\"\u003e\u003ccode\u003egetEntry(String)\u003c/code\u003e\u003c/a\u003e. \n\u003c/div\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/jar/JarEntry.html\" title\u003d\"class in java.util.jar\"\u003e\u003ccode\u003eJarEntry\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the jar file entry name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - may be thrown if the jar file has been closed"
        ],
        "return": [
          "the \n\u003ccode\u003eJarEntry\u003c/code\u003e for the given entry name, or the versioned entry name, or \n\u003ccode\u003enull\u003c/code\u003e if not found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.zip.ZipEntry",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getEntry",
      "comment": "Returns the ZipEntry for the given base entry name or null if not found. If this JarFile is a multi-release jar file and is configured to be processed as such, then a search is performed to find and return a ZipEntry that is the latest versioned entry associated with the given entry name. The returned ZipEntry is the versioned entry corresponding to the given base entry name prefixed with the string \"META-INF/versions/{n}/\", for the largest value of n for which an entry exists. If such a versioned entry does not exist, then the ZipEntry for the base entry is returned, otherwise null is returned if no entries are found. The initial value for the version n is the maximum version as returned by the method getVersion().",
      "tagMap": {
        "implSpec": [
          "\u003cdiv class\u003d\"block\"\u003e\n  This implementation may return a versioned entry for the requested name even if there is not a corresponding base entry. This can occur if there is a private or package-private versioned entry that matches. If a subclass overrides this method, assure that the override method invokes \n \u003ccode\u003esuper.getEntry(name)\u003c/code\u003e to obtain all versioned entries. \n\u003c/div\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/ZipEntry.html\" title\u003d\"class in java.util.zip\"\u003e\u003ccode\u003eZipEntry\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/ZipFile.html#getEntry(java.lang.String)\"\u003egetEntry\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/ZipFile.html\" title\u003d\"class in java.util.zip\"\u003eZipFile\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the jar file entry name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - may be thrown if the jar file has been closed"
        ],
        "return": [
          "the \n\u003ccode\u003eZipEntry\u003c/code\u003e for the given entry name or the versioned entry name or \n\u003ccode\u003enull\u003c/code\u003e if not found"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "java.util.jar.JarEntry",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "entries",
      "comment": "Returns an enumeration of the jar file entries.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/ZipFile.html#entries()\"\u003eentries\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/ZipFile.html\" title\u003d\"class in java.util.zip\"\u003eZipFile\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - may be thrown if the jar file has been closed"
        ],
        "return": [
          "an enumeration of the jar file entries"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.util.jar.JarEntry",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stream",
      "comment": "Returns an ordered Stream over the jar file entries. Entries appear in the Stream in the order they appear in the central directory of the jar file.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/ZipFile.html#stream()\"\u003estream\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/ZipFile.html\" title\u003d\"class in java.util.zip\"\u003eZipFile\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the jar file has been closed"
        ],
        "return": [
          "an ordered \n\u003ccode\u003eStream\u003c/code\u003e of entries in this jar file"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.util.jar.JarEntry",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "versionedStream",
      "comment": "Returns a Stream of the versioned jar file entries. If this JarFile is a multi-release jar file and is configured to be processed as such, then an entry in the stream is the latest versioned entry associated with the corresponding base entry name. The maximum version of the latest versioned entry is the version returned by getVersion(). The returned stream may include an entry that only exists as a versioned entry. If the jar file is not a multi-release jar file or the JarFile is not configured for processing a multi-release jar file, this method returns the same stream that stream() returns.",
      "tagMap": {
        "return": [
          "stream of versioned entries"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.zip.ZipEntry",
            "type": "Class"
          },
          "field": {
            "name": "ze"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getInputStream",
      "comment": "Returns an input stream for reading the contents of the specified zip file entry.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/ZipFile.html#getInputStream(java.util.zip.ZipEntry)\"\u003egetInputStream\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/ZipFile.html\" title\u003d\"class in java.util.zip\"\u003eZipFile\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eze\u003c/code\u003e - the zip file entry"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/ZipException.html\" title\u003d\"class in java.util.zip\"\u003eZipException\u003c/a\u003e\u003c/code\u003e - if a zip file format error has occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error has occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if any of the jar file entries are incorrectly signed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - may be thrown if the jar file has been closed"
        ],
        "return": [
          "an input stream for reading the contents of the specified zip file entry"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JarFile to read from the specified file name. The JarFile will be verified if it is signed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the jar file to be opened for reading"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error has occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if access to the file is denied by the SecurityManager"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "verify"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JarFile to read from the specified file name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the jar file to be opened for reading",
          "\u003ccode\u003everify\u003c/code\u003e - whether or not to verify the jar file if it is signed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error has occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if access to the file is denied by the SecurityManager"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JarFile to read from the specified File object. The JarFile will be verified if it is signed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the jar file to be opened for reading"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error has occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if access to the file is denied by the SecurityManager"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "verify"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JarFile to read from the specified File object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the jar file to be opened for reading",
          "\u003ccode\u003everify\u003c/code\u003e - whether or not to verify the jar file if it is signed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error has occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if access to the file is denied by the SecurityManager."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "verify"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mode"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JarFile to read from the specified File object in the specified mode. The mode argument must be either OPEN_READ or OPEN_READ | OPEN_DELETE.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the jar file to be opened for reading",
          "\u003ccode\u003everify\u003c/code\u003e - whether or not to verify the jar file if it is signed.",
          "\u003ccode\u003emode\u003c/code\u003e - the mode in which the file is to be opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error has occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003emode\u003c/code\u003e argument is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if access to the file is denied by the SecurityManager"
        ],
        "since": [
          "1.3"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "verify"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "mode"
          }
        },
        {
          "type": {
            "name": "java.lang.Runtime$Version",
            "type": "Class"
          },
          "field": {
            "name": "version"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new JarFile to read from the specified File object in the specified mode. The mode argument must be either OPEN_READ or OPEN_READ | OPEN_DELETE. The version argument, after being converted to a canonical form, is used to configure the JarFile for processing multi-release jar files. The canonical form derived from the version parameter is Runtime.Version.parse(Integer.toString(n)) where n is Math.max(version.feature(), JarFile.baseVersion().feature()).",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the jar file to be opened for reading",
          "\u003ccode\u003everify\u003c/code\u003e - whether or not to verify the jar file if it is signed.",
          "\u003ccode\u003emode\u003c/code\u003e - the mode in which the file is to be opened",
          "\u003ccode\u003eversion\u003c/code\u003e - specifies the release version for a multi-release jar file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error has occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003emode\u003c/code\u003e argument is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if access to the file is denied by the SecurityManager",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eversion\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.jar.JarFile",
  "comment": "The \n\u003ccode\u003eJarFile\u003c/code\u003e class is used to read the contents of a jar file from any file that can be opened with \n\u003ccode\u003ejava.io.RandomAccessFile\u003c/code\u003e. It extends the class \n\u003ccode\u003ejava.util.zip.ZipFile\u003c/code\u003e with support for reading an optional \n\u003ccode\u003eManifest\u003c/code\u003e entry, and support for processing multi-release jar files. The \n\u003ccode\u003eManifest\u003c/code\u003e can be used to specify meta-information about the jar file and its entries. \n\u003cp\u003e\u003ca id\u003d\"multirelease\"\u003eA multi-release jar file\u003c/a\u003e is a jar file that contains a manifest with a main attribute named \"Multi-Release\", a set of \"base\" entries, some of which are public classes with public or protected methods that comprise the public interface of the jar file, and a set of \"versioned\" entries contained in subdirectories of the \"META-INF/versions\" directory. The versioned entries are partitioned by the major version of the Java platform. A versioned entry, with a version \u003ccode\u003en\u003c/code\u003e, \u003ccode\u003e8 \u0026lt; n\u003c/code\u003e, in the \"META-INF/versions/{n}\" directory overrides the base entry as well as any entry with a version number \u003ccode\u003ei\u003c/code\u003e where \u003ccode\u003e8 \u0026lt; i \u0026lt; n\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eBy default, a \u003ccode\u003eJarFile\u003c/code\u003e for a multi-release jar file is configured to process the multi-release jar file as if it were a plain (unversioned) jar file, and as such an entry name is associated with at most one base entry. The \u003ccode\u003eJarFile\u003c/code\u003e may be configured to process a multi-release jar file by creating the \u003ccode\u003eJarFile\u003c/code\u003e with the \u003ca href\u003d\"#%3Cinit%3E(java.io.File,boolean,int,java.lang.Runtime.Version)\"\u003e\u003ccode\u003eJarFile(File, boolean, int, Runtime.Version)\u003c/code\u003e\u003c/a\u003e constructor. The \u003ccode\u003eRuntime.Version\u003c/code\u003e object sets a maximum version used when searching for versioned entries. When so configured, an entry name can correspond with at most one base entry and zero or more versioned entries. A search is required to associate the entry name with the latest versioned entry whose version is less than or equal to the maximum version (see \u003ca href\u003d\"#getEntry(java.lang.String)\"\u003e\u003ccode\u003egetEntry(String)\u003c/code\u003e\u003c/a\u003e). \u003c/p\u003e\n\u003cp\u003eClass loaders that utilize \u003ccode\u003eJarFile\u003c/code\u003e to load classes from the contents of \u003ccode\u003eJarFile\u003c/code\u003e entries should construct the \u003ccode\u003eJarFile\u003c/code\u003e by invoking the \u003ca href\u003d\"#%3Cinit%3E(java.io.File,boolean,int,java.lang.Runtime.Version)\"\u003e\u003ccode\u003eJarFile(File, boolean, int, Runtime.Version)\u003c/code\u003e\u003c/a\u003e constructor with the value \u003ccode\u003eRuntime.version()\u003c/code\u003e assigned to the last argument. This assures that classes compatible with the major version of the running JVM are loaded from multi-release jar files. \u003c/p\u003e\n\u003cp\u003e If the \u003ccode\u003everify\u003c/code\u003e flag is on when opening a signed jar file, the content of the jar entry is verified against the signature embedded inside the manifest that is associated with its \u003ca href\u003d\"JarEntry.html#getRealName()\"\u003e\u003ccode\u003epath name\u003c/code\u003e\u003c/a\u003e. For a multi-release jar file, the content of a versioned entry is verfieid against its own signature and \u003ca href\u003d\"JarEntry.html#getCodeSigners()\"\u003e\u003ccode\u003eJarEntry.getCodeSigners()\u003c/code\u003e\u003c/a\u003e returns its own signers. Please note that the verification process does not include validating the signer\u0027s certificate. A caller should inspect the return value of \u003ca href\u003d\"JarEntry.html#getCodeSigners()\"\u003e\u003ccode\u003eJarEntry.getCodeSigners()\u003c/code\u003e\u003c/a\u003e to further determine if the signature can be trusted. \u003c/p\u003e\n\u003cp\u003e Unless otherwise noted, passing a \u003ccode\u003enull\u003c/code\u003e argument to a constructor or method in this class will cause a \u003ca href\u003d\"../../lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/jar/Manifest.html\" title\u003d\"class in java.util.jar\"\u003e\u003ccode\u003eManifest\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/zip/ZipFile.html\" title\u003d\"class in java.util.zip\"\u003e\u003ccode\u003eZipFile\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/jar/JarEntry.html\" title\u003d\"class in java.util.jar\"\u003e\u003ccode\u003eJarEntry\u003c/code\u003e\u003c/a\u003e"
    ],
    "implNote": [
      "\u003cdiv class\u003d\"block\"\u003e\n  If the API can not be used to configure a \n \u003ccode\u003eJarFile\u003c/code\u003e (e.g. to override the configuration of a compiled application or library), two \n \u003ccode\u003eSystem\u003c/code\u003e properties are available. \n \u003cul\u003e \n  \u003cli\u003e \u003ccode\u003ejdk.util.jar.version\u003c/code\u003e can be assigned a value that is the \u003ccode\u003eString\u003c/code\u003e representation of a non-negative integer \u003ccode\u003e\u0026lt;\u003d Runtime.version().feature()\u003c/code\u003e. The value is used to set the effective runtime version to something other than the default value obtained by evaluating \u003ccode\u003eRuntime.version().feature()\u003c/code\u003e. The effective runtime version is the version that the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/jar/JarFile.html#%3Cinit%3E(java.io.File,boolean,int,java.lang.Runtime.Version)\"\u003e\u003ccode\u003eJarFile(File, boolean, int, Runtime.Version)\u003c/code\u003e\u003c/a\u003e constructor uses when the value of the last argument is \u003ccode\u003eJarFile.runtimeVersion()\u003c/code\u003e. \u003c/li\u003e \n  \u003cli\u003e \u003ccode\u003ejdk.util.jar.enableMultiRelease\u003c/code\u003e can be assigned one of the three \u003ccode\u003eString\u003c/code\u003e values \u003cem\u003etrue\u003c/em\u003e, \u003cem\u003efalse\u003c/em\u003e, or \u003cem\u003eforce\u003c/em\u003e. The value \u003cem\u003etrue\u003c/em\u003e, the default value, enables multi-release jar file processing. The value \u003cem\u003efalse\u003c/em\u003e disables multi-release jar processing, ignoring the \"Multi-Release\" manifest attribute, and the versioned directories in a multi-release jar file if they exist. Furthermore, the method \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/jar/JarFile.html#isMultiRelease()\"\u003e\u003ccode\u003eisMultiRelease()\u003c/code\u003e\u003c/a\u003e returns \u003cem\u003efalse\u003c/em\u003e. The value \u003cem\u003eforce\u003c/em\u003e causes the \u003ccode\u003eJarFile\u003c/code\u003e to be initialized to runtime versioning after construction. It effectively does the same as this code: \u003ccode\u003e(new JarFile(File, boolean, int, JarFile.runtimeVersion())\u003c/code\u003e. \u003c/li\u003e \n \u003c/ul\u003e \n\u003c/div\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}