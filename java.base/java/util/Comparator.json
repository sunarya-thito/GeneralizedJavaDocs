{
  "packageName": "java.util",
  "simpleName": "Comparator",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "compare",
      "comment": "Compares its two arguments for order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second. The implementor must ensure that sgn(compare(x, y)) \u003d\u003d -sgn(compare(y, x)) for all x and y. (This implies that compare(x, y) must throw an exception if and only if compare(y, x) throws an exception.) The implementor must also ensure that the relation is transitive: ((compare(x, y)\u003e0) \u0026\u0026 (compare(y, z)\u003e0)) implies compare(x, z)\u003e0. Finally, the implementor must ensure that compare(x, y)\u003d\u003d0 implies that sgn(compare(x, z))\u003d\u003dsgn(compare(y, z)) for all z. It is generally the case, but not strictly required that (compare(x, y)\u003d\u003d0) \u003d\u003d (x.equals(y)). Generally speaking, any comparator that violates this condition should clearly indicate this fact. The recommended language is \"Note: this comparator imposes orderings that are inconsistent with equals.\" In the foregoing description, the notation sgn(expression) designates the mathematical signum function, which is defined to return one of -1, 0, or 1 according to whether the value of expression is negative, zero, or positive, respectively.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eo1\u003c/code\u003e - the first object to be compared.",
          "\u003ccode\u003eo2\u003c/code\u003e - the second object to be compared."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if an argument is null and this comparator does not permit null arguments",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the arguments\u0027 types prevent them from being compared by this comparator."
        ],
        "return": [
          "a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Indicates whether some other object is \"equal to\" this comparator. This method must obey the general contract of Object.equals(Object). Additionally, this method can return true only if the specified object is also a comparator and it imposes the same ordering as this comparator. Thus, comp1.equals(comp2) implies that sgn(comp1.compare(o1, o2))\u003d\u003dsgn(comp2.compare(o1, o2)) for every object reference o1 and o2. Note that it is always safe not to override Object.equals(Object). However, overriding this method may, in some cases, improve performance by allowing programs to determine that two distinct comparators impose the same order.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e only if the specified object is also a comparator and it imposes the same ordering as this comparator."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "owner": "java.util.Comparator",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "reversed",
      "comment": "Returns a comparator that imposes the reverse ordering of this comparator.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a comparator that imposes the reverse ordering of this comparator."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "owner": "java.util.Comparator",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenComparing",
      "comment": "Returns a lexicographic-order comparator with another comparator. If this Comparator considers two elements equal, i.e. compare(a, b) \u003d\u003d 0, other is used to determine the order. The returned comparator is serializable if the specified comparator is also serializable.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "For example, to sort a collection of \n\u003ccode\u003eString\u003c/code\u003e based on the length and then case-insensitive natural ordering, the comparator can be composed using following code, \n\u003cpre\u003e\u003ccode\u003e\n     Comparator\u0026lt;String\u0026gt; cmp \u003d Comparator.comparingInt(String::length)\n             .thenComparing(String.CASE_INSENSITIVE_ORDER);\n \u003c/code\u003e\u003c/pre\u003e"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other comparator to be used when this comparator compares two objects that are equal."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null."
        ],
        "return": [
          "a lexicographic-order comparator composed of this and then the other comparator"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "owner": "java.util.Comparator",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenComparing",
      "comment": "Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the sort key"
        ],
        "implSpec": [
          "This default implementation behaves as if \n\u003ccode\u003e thenComparing(comparing(keyExtractor, cmp))\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#comparing(java.util.function.Function,java.util.Comparator)\"\u003e\u003ccode\u003ecomparing(Function, Comparator)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#thenComparing(java.util.Comparator)\"\u003e\u003ccode\u003ethenComparing(Comparator)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyExtractor\u003c/code\u003e - the function used to extract the sort key",
          "\u003ccode\u003ekeyComparator\u003c/code\u003e - the \n\u003ccode\u003eComparator\u003c/code\u003e used to compare the sort key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either argument is null."
        ],
        "return": [
          "a lexicographic-order comparator composed of this comparator and then comparing on the key extracted by the keyExtractor function"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "owner": "java.util.Comparator",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "U",
          "upperBounds": [
            {
              "name": "java.lang.Comparable",
              "parameters": [
                {
                  "lowerBounds": [
                    {
                      "name": "U",
                      "type": "Class"
                    }
                  ],
                  "type": "Wildcard"
                }
              ],
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenComparing",
      "comment": "Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - the type of the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e sort key"
        ],
        "implSpec": [
          "This default implementation behaves as if \n\u003ccode\u003e thenComparing(comparing(keyExtractor))\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#comparing(java.util.function.Function)\"\u003e\u003ccode\u003ecomparing(Function)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#thenComparing(java.util.Comparator)\"\u003e\u003ccode\u003ethenComparing(Comparator)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyExtractor\u003c/code\u003e - the function used to extract the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e sort key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null."
        ],
        "return": [
          "a lexicographic-order comparator composed of this and then the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e sort key."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "owner": "java.util.Comparator",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenComparingInt",
      "comment": "Returns a lexicographic-order comparator with a function that extracts an int sort key.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This default implementation behaves as if \n\u003ccode\u003e thenComparing(comparingInt(keyExtractor))\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#comparingInt(java.util.function.ToIntFunction)\"\u003e\u003ccode\u003ecomparingInt(ToIntFunction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#thenComparing(java.util.Comparator)\"\u003e\u003ccode\u003ethenComparing(Comparator)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyExtractor\u003c/code\u003e - the function used to extract the integer sort key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null."
        ],
        "return": [
          "a lexicographic-order comparator composed of this and then the \n\u003ccode\u003eint\u003c/code\u003e sort key"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "owner": "java.util.Comparator",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenComparingLong",
      "comment": "Returns a lexicographic-order comparator with a function that extracts a long sort key.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This default implementation behaves as if \n\u003ccode\u003e thenComparing(comparingLong(keyExtractor))\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#comparingLong(java.util.function.ToLongFunction)\"\u003e\u003ccode\u003ecomparingLong(ToLongFunction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#thenComparing(java.util.Comparator)\"\u003e\u003ccode\u003ethenComparing(Comparator)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyExtractor\u003c/code\u003e - the function used to extract the long sort key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null."
        ],
        "return": [
          "a lexicographic-order comparator composed of this and then the \n\u003ccode\u003elong\u003c/code\u003e sort key"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "owner": "java.util.Comparator",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "thenComparingDouble",
      "comment": "Returns a lexicographic-order comparator with a function that extracts a double sort key.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This default implementation behaves as if \n\u003ccode\u003e thenComparing(comparingDouble(keyExtractor))\u003c/code\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#comparingDouble(java.util.function.ToDoubleFunction)\"\u003e\u003ccode\u003ecomparingDouble(ToDoubleFunction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#thenComparing(java.util.Comparator)\"\u003e\u003ccode\u003ethenComparing(Comparator)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyExtractor\u003c/code\u003e - the function used to extract the double sort key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null."
        ],
        "return": [
          "a lexicographic-order comparator composed of this and then the \n\u003ccode\u003edouble\u003c/code\u003e sort key"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.lang.Comparable",
              "parameters": [
                {
                  "lowerBounds": [
                    {
                      "name": "T",
                      "type": "Class"
                    }
                  ],
                  "type": "Wildcard"
                }
              ],
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "reverseOrder",
      "comment": "Returns a comparator that imposes the reverse of the natural ordering. The returned comparator is serializable and throws NullPointerException when comparing null.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e type of element to be compared"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a comparator that imposes the reverse of the \n\u003ci\u003enatural ordering\u003c/i\u003e on \n\u003ccode\u003eComparable\u003c/code\u003e objects."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "upperBounds": [
            {
              "name": "java.lang.Comparable",
              "parameters": [
                {
                  "lowerBounds": [
                    {
                      "name": "T",
                      "type": "Class"
                    }
                  ],
                  "type": "Wildcard"
                }
              ],
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "naturalOrder",
      "comment": "Returns a comparator that compares Comparable objects in natural order. The returned comparator is serializable and throws NullPointerException when comparing null.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e type of element to be compared"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a comparator that imposes the \n\u003ci\u003enatural ordering\u003c/i\u003e on \n\u003ccode\u003e Comparable\u003c/code\u003e objects."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "nullsFirst",
      "comment": "Returns a null-friendly comparator that considers null to be less than non-null. When both are null, they are considered equal. If both are non-null, the specified Comparator is used to determine the order. If the specified comparator is null, then the returned comparator considers all non-null values to be equal. The returned comparator is serializable if the specified comparator is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the elements to be compared"
        ],
        "param": [
          "\u003ccode\u003ecomparator\u003c/code\u003e - a \n\u003ccode\u003eComparator\u003c/code\u003e for comparing non-null values"
        ],
        "return": [
          "a comparator that considers \n\u003ccode\u003enull\u003c/code\u003e to be less than non-null, and compares non-null objects with the supplied \n\u003ccode\u003eComparator\u003c/code\u003e."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "nullsLast",
      "comment": "Returns a null-friendly comparator that considers null to be greater than non-null. When both are null, they are considered equal. If both are non-null, the specified Comparator is used to determine the order. If the specified comparator is null, then the returned comparator considers all non-null values to be equal. The returned comparator is serializable if the specified comparator is serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the elements to be compared"
        ],
        "param": [
          "\u003ccode\u003ecomparator\u003c/code\u003e - a \n\u003ccode\u003eComparator\u003c/code\u003e for comparing non-null values"
        ],
        "return": [
          "a comparator that considers \n\u003ccode\u003enull\u003c/code\u003e to be greater than non-null, and compares non-null objects with the supplied \n\u003ccode\u003eComparator\u003c/code\u003e."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        },
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "comparing",
      "comment": "Accepts a function that extracts a sort key from a type T, and returns a Comparator\u003cT\u003e that compares by that sort key using the specified Comparator. The returned comparator is serializable if the specified function and comparator are both serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of element to be compared",
          "\u003ccode\u003eU\u003c/code\u003e - the type of the sort key"
        ],
        "apiNote": [
          "For example, to obtain a \n\u003ccode\u003eComparator\u003c/code\u003e that compares \n\u003ccode\u003e Person\u003c/code\u003e objects by their last name ignoring case differences, \n\u003cpre\u003e\u003ccode\u003e\n     Comparator\u0026lt;Person\u0026gt; cmp \u003d Comparator.comparing(\n             Person::getLastName,\n             String.CASE_INSENSITIVE_ORDER);\n \u003c/code\u003e\u003c/pre\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyExtractor\u003c/code\u003e - the function used to extract the sort key",
          "\u003ccode\u003ekeyComparator\u003c/code\u003e - the \n\u003ccode\u003eComparator\u003c/code\u003e used to compare the sort key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if either argument is null"
        ],
        "return": [
          "a comparator that compares by an extracted key using the specified \n\u003ccode\u003eComparator\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        },
        {
          "name": "U",
          "upperBounds": [
            {
              "name": "java.lang.Comparable",
              "parameters": [
                {
                  "lowerBounds": [
                    {
                      "name": "U",
                      "type": "Class"
                    }
                  ],
                  "type": "Wildcard"
                }
              ],
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "comparing",
      "comment": "Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator\u003cT\u003e that compares by that sort key. The returned comparator is serializable if the specified function is also serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of element to be compared",
          "\u003ccode\u003eU\u003c/code\u003e - the type of the \n\u003ccode\u003eComparable\u003c/code\u003e sort key"
        ],
        "apiNote": [
          "For example, to obtain a \n\u003ccode\u003eComparator\u003c/code\u003e that compares \n\u003ccode\u003e Person\u003c/code\u003e objects by their last name, \n\u003cpre\u003e\u003ccode\u003e\n     Comparator\u0026lt;Person\u0026gt; byLastName \u003d Comparator.comparing(Person::getLastName);\n \u003c/code\u003e\u003c/pre\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyExtractor\u003c/code\u003e - the function used to extract the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e sort key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null"
        ],
        "return": [
          "a comparator that compares by an extracted key"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "comparingInt",
      "comment": "Accepts a function that extracts an int sort key from a type T, and returns a Comparator\u003cT\u003e that compares by that sort key. The returned comparator is serializable if the specified function is also serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of element to be compared"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#comparing(java.util.function.Function)\"\u003e\u003ccode\u003ecomparing(Function)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyExtractor\u003c/code\u003e - the function used to extract the integer sort key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null"
        ],
        "return": [
          "a comparator that compares by an extracted key"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "comparingLong",
      "comment": "Accepts a function that extracts a long sort key from a type T, and returns a Comparator\u003cT\u003e that compares by that sort key. The returned comparator is serializable if the specified function is also serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of element to be compared"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#comparing(java.util.function.Function)\"\u003e\u003ccode\u003ecomparing(Function)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyExtractor\u003c/code\u003e - the function used to extract the long sort key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null"
        ],
        "return": [
          "a comparator that compares by an extracted key"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "comparingDouble",
      "comment": "Accepts a function that extracts a double sort key from a type T, and returns a Comparator\u003cT\u003e that compares by that sort key. The returned comparator is serializable if the specified function is also serializable.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of element to be compared"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html#comparing(java.util.function.Function)\"\u003e\u003ccode\u003ecomparing(Function)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyExtractor\u003c/code\u003e - the function used to extract the double sort key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the argument is null"
        ],
        "return": [
          "a comparator that compares by an extracted key"
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.Comparator",
  "comment": "A comparison function, which imposes a \n\u003ci\u003etotal ordering\u003c/i\u003e on some collection of objects. Comparators can be passed to a sort method (such as \n\u003ca href\u003d\"Collections.html#sort(java.util.List,java.util.Comparator)\"\u003e\u003ccode\u003eCollections.sort\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"Arrays.html#sort(T%5B%5D,java.util.Comparator)\"\u003e\u003ccode\u003eArrays.sort\u003c/code\u003e\u003c/a\u003e) to allow precise control over the sort order. Comparators can also be used to control the order of certain data structures (such as \n\u003ca href\u003d\"SortedSet.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003esorted sets\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"SortedMap.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003esorted maps\u003c/code\u003e\u003c/a\u003e), or to provide an ordering for collections of objects that don\u0027t have a \n\u003ca href\u003d\"../lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003enatural ordering\u003c/code\u003e\u003c/a\u003e.\n\u003cp\u003e The ordering imposed by a comparator \u003ccode\u003ec\u003c/code\u003e on a set of elements \u003ccode\u003eS\u003c/code\u003e is said to be \u003ci\u003econsistent with equals\u003c/i\u003e if and only if \u003ccode\u003ec.compare(e1, e2)\u003d\u003d0\u003c/code\u003e has the same boolean value as \u003ccode\u003ee1.equals(e2)\u003c/code\u003e for every \u003ccode\u003ee1\u003c/code\u003e and \u003ccode\u003ee2\u003c/code\u003e in \u003ccode\u003eS\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e Caution should be exercised when using a comparator capable of imposing an ordering inconsistent with equals to order a sorted set (or sorted map). Suppose a sorted set (or sorted map) with an explicit comparator \u003ccode\u003ec\u003c/code\u003e is used with elements (or keys) drawn from a set \u003ccode\u003eS\u003c/code\u003e. If the ordering imposed by \u003ccode\u003ec\u003c/code\u003e on \u003ccode\u003eS\u003c/code\u003e is inconsistent with equals, the sorted set (or sorted map) will behave \"strangely.\" In particular the sorted set (or sorted map) will violate the general contract for set (or map), which is defined in terms of \u003ccode\u003eequals\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e For example, suppose one adds two elements \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e such that \u003ccode\u003e(a.equals(b) \u0026amp;\u0026amp; c.compare(a, b) !\u003d 0)\u003c/code\u003e to an empty \u003ccode\u003eTreeSet\u003c/code\u003e with comparator \u003ccode\u003ec\u003c/code\u003e. The second \u003ccode\u003eadd\u003c/code\u003e operation will return true (and the size of the tree set will increase) because \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e are not equivalent from the tree set\u0027s perspective, even though this is contrary to the specification of the \u003ca href\u003d\"Set.html#add(E)\"\u003e\u003ccode\u003eSet.add\u003c/code\u003e\u003c/a\u003e method.\u003c/p\u003e\n\u003cp\u003e Note: It is generally a good idea for comparators to also implement \u003ccode\u003ejava.io.Serializable\u003c/code\u003e, as they may be used as ordering methods in serializable data structures (like \u003ca href\u003d\"TreeSet.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTreeSet\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"TreeMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTreeMap\u003c/code\u003e\u003c/a\u003e). In order for the data structure to serialize successfully, the comparator (if provided) must implement \u003ccode\u003eSerializable\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e For the mathematically inclined, the \u003ci\u003erelation\u003c/i\u003e that defines the \u003ci\u003eimposed ordering\u003c/i\u003e that a given comparator \u003ccode\u003ec\u003c/code\u003e imposes on a given set of objects \u003ccode\u003eS\u003c/code\u003e is:\u003c/p\u003e\n\u003cpre\u003e       {(x, y) such that c.compare(x, y) \u0026lt;\u003d 0}.\n \u003c/pre\u003e The \n\u003ci\u003equotient\u003c/i\u003e for this total order is:\n\u003cpre\u003e       {(x, y) such that c.compare(x, y) \u003d\u003d 0}.\n \u003c/pre\u003e It follows immediately from the contract for \n\u003ccode\u003ecompare\u003c/code\u003e that the quotient is an \n\u003ci\u003eequivalence relation\u003c/i\u003e on \n\u003ccode\u003eS\u003c/code\u003e, and that the imposed ordering is a \n\u003ci\u003etotal order\u003c/i\u003e on \n\u003ccode\u003eS\u003c/code\u003e. When we say that the ordering imposed by \n\u003ccode\u003ec\u003c/code\u003e on \n\u003ccode\u003eS\u003c/code\u003e is \n\u003ci\u003econsistent with equals\u003c/i\u003e, we mean that the quotient for the ordering is the equivalence relation defined by the objects\u0027 \n\u003ca href\u003d\"../lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals(Object)\u003c/code\u003e\u003c/a\u003e method(s):\n\u003cpre\u003e     {(x, y) such that x.equals(y)}. \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eUnlike \u003ccode\u003eComparable\u003c/code\u003e, a comparator may optionally permit comparison of null arguments, while maintaining the requirements for an equivalence relation. \u003c/p\u003e\n\u003cp\u003eThis interface is a member of the \u003ca href\u003d\"../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Serializable.html\" title\u003d\"interface in java.io\"\u003e\u003ccode\u003eSerializable\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}