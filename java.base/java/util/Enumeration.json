{
  "packageName": "java.util",
  "simpleName": "Enumeration",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasMoreElements",
      "comment": "Tests if this enumeration contains more elements.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if this enumeration object contains at least one more element to provide; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Enumeration",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "nextElement",
      "comment": "Returns the next element of this enumeration if this enumeration object has at least one more element to provide.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if no more elements exist."
        ],
        "return": [
          "the next element of this enumeration."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "owner": "java.util.Enumeration",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "asIterator",
      "comment": "Returns an Iterator that traverses the remaining elements covered by this enumeration. Traversal is undefined if any methods are called on this enumeration after the call to asIterator.",
      "tagMap": {
        "implSpec": [
          "The default implementation returns an \n\u003ccode\u003eIterator\u003c/code\u003e whose \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html#hasNext()\"\u003e\u003ccode\u003ehasNext\u003c/code\u003e\u003c/a\u003e method calls this Enumeration\u0027s \n\u003ccode\u003ehasMoreElements\u003c/code\u003e method, whose \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html#next()\"\u003e\u003ccode\u003enext\u003c/code\u003e\u003c/a\u003e method calls this Enumeration\u0027s \n\u003ccode\u003enextElement\u003c/code\u003e method, and whose \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html#remove()\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e method throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e."
        ],
        "apiNote": [
          "This method is intended to help adapt code that produces \n\u003ccode\u003eEnumeration\u003c/code\u003e instances to code that consumes \n\u003ccode\u003eIterator\u003c/code\u003e instances. For example, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/jar/JarFile.html#entries()\"\u003e\u003ccode\u003eJarFile.entries()\u003c/code\u003e\u003c/a\u003e method returns an \n\u003ccode\u003eEnumeration\u0026lt;JarEntry\u0026gt;\u003c/code\u003e. This can be turned into an \n\u003ccode\u003eIterator\u003c/code\u003e, and then the \n\u003ccode\u003eforEachRemaining()\u003c/code\u003e method can be used: \n\u003cpre\u003e\u003ccode\u003e\n     JarFile jarFile \u003d ... ;\n     jarFile.entries().asIterator().forEachRemaining(entry -\u0026gt; { ... });\n \u003c/code\u003e\u003c/pre\u003e (Note that there is also a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/jar/JarFile.html#stream()\"\u003e\u003ccode\u003eJarFile.stream()\u003c/code\u003e\u003c/a\u003e method that returns a \n\u003ccode\u003eStream\u003c/code\u003e of entries, which may be more convenient in some cases.)"
        ],
        "return": [
          "an Iterator representing the remaining elements of this Enumeration"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.Enumeration",
  "comment": "An object that implements the Enumeration interface generates a series of elements, one at a time. Successive calls to the \n\u003ccode\u003enextElement\u003c/code\u003e method return successive elements of the series. \n\u003cp\u003e For example, to print all elements of a \u003ccode\u003eVector\u0026lt;E\u0026gt;\u003c/code\u003e \u003ci\u003ev\u003c/i\u003e: \u003c/p\u003e\n\u003cpre\u003e   for (Enumeration\u0026lt;E\u0026gt; e \u003d v.elements(); e.hasMoreElements();)\n       System.out.println(e.nextElement());\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Methods are provided to enumerate through the elements of a vector, the keys of a hashtable, and the values in a hashtable. Enumerations are also used to specify the input streams to a \u003ccode\u003eSequenceInputStream\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eIterator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/SequenceInputStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eSequenceInputStream\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html#nextElement()\"\u003e\u003ccode\u003enextElement()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashtable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html#elements()\"\u003e\u003ccode\u003eHashtable.elements()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html#keys()\"\u003e\u003ccode\u003eHashtable.keys()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Vector.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Vector.html#elements()\"\u003e\u003ccode\u003eVector.elements()\u003c/code\u003e\u003c/a\u003e"
    ],
    "apiNote": [
      "The functionality of this interface is duplicated by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eIterator\u003c/code\u003e\u003c/a\u003e interface. In addition, \n\u003ccode\u003eIterator\u003c/code\u003e adds an optional remove operation, and has shorter method names. New implementations should consider using \n\u003ccode\u003eIterator\u003c/code\u003e in preference to \n\u003ccode\u003eEnumeration\u003c/code\u003e. It is possible to adapt an \n\u003ccode\u003eEnumeration\u003c/code\u003e to an \n\u003ccode\u003eIterator\u003c/code\u003e by using the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html#asIterator()\"\u003e\u003ccode\u003easIterator()\u003c/code\u003e\u003c/a\u003e method."
    ],
    "since": [
      "1.0"
    ]
  }
}