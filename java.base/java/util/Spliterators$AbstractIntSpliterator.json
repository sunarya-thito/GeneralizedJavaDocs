{
  "packageName": "java.util",
  "simpleName": "AbstractIntSpliterator",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Spliterator$OfInt",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "trySplit",
      "comment": "If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator. If this Spliterator is Spliterator.ORDERED, the returned Spliterator must cover a strict prefix of the elements. Unless this Spliterator covers an infinite number of elements, repeated calls to trySplit() must eventually return null. Upon non-null return: the value reported for estimateSize() before splitting, must, after splitting, be greater than or equal to estimateSize() for this and the returned Spliterator; and if this Spliterator is SUBSIZED, then estimateSize() for this spliterator before splitting must be equal to the sum of estimateSize() for this and the returned Spliterator after splitting. This method may return null for any reason, including emptiness, inability to split after traversal has commenced, data structure constraints, and efficiency considerations. This implementation permits limited parallelism.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#trySplit()\"\u003etrySplit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html\" title\u003d\"interface in java.util\"\u003eSpliterator\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html\" title\u003d\"class in java.lang\"\u003eInteger\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eSpliterator\u003c/code\u003e covering some portion of the elements, or \n\u003ccode\u003enull\u003c/code\u003e if this spliterator cannot be split"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "estimateSize",
      "comment": "Returns an estimate of the number of elements that would be encountered by a Spliterator.forEachRemaining(java.util.function.Consumer\u003c? super T\u003e) traversal, or returns Long.MAX_VALUE if infinite, unknown, or too expensive to compute. If this Spliterator is Spliterator.SIZED and has not yet been partially traversed or split, or this Spliterator is Spliterator.SUBSIZED and has not yet been partially traversed, this estimate must be an accurate count of elements that would be encountered by a complete traversal. Otherwise, this estimate may be arbitrarily inaccurate, but must decrease as specified across invocations of Spliterator.trySplit().",
      "tagMap": {
        "implSpec": [
          "This implementation returns the estimated size as reported when created and, if the estimate size is known, decreases in size when split."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#estimateSize()\"\u003eestimateSize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html\" title\u003d\"interface in java.util\"\u003eSpliterator\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html\" title\u003d\"class in java.lang\"\u003eInteger\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "the estimated size, or \n\u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e if infinite, unknown, or too expensive to compute."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "characteristics",
      "comment": "Returns a set of characteristics of this Spliterator and its elements. The result is represented as ORed values from Spliterator.ORDERED, Spliterator.DISTINCT, Spliterator.SORTED, Spliterator.SIZED, Spliterator.NONNULL, Spliterator.IMMUTABLE, Spliterator.CONCURRENT, Spliterator.SUBSIZED. Repeated calls to characteristics() on a given spliterator, prior to or in-between calls to trySplit, should always return the same result. If a Spliterator reports an inconsistent set of characteristics (either those returned from a single invocation or across multiple invocations), no guarantees can be made about any computation using this Spliterator.",
      "tagMap": {
        "implSpec": [
          "This implementation returns the characteristics as reported when created."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#characteristics()\"\u003echaracteristics\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html\" title\u003d\"interface in java.util\"\u003eSpliterator\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html\" title\u003d\"class in java.lang\"\u003eInteger\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a representation of characteristics"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "est"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "additionalCharacteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a spliterator reporting the given estimated size and characteristics.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eest\u003c/code\u003e - the estimated size of this spliterator if known, otherwise \n\u003ccode\u003eLong.MAX_VALUE\u003c/code\u003e.",
          "\u003ccode\u003eadditionalCharacteristics\u003c/code\u003e - properties of this spliterator\u0027s source or elements. If \n\u003ccode\u003eSIZED\u003c/code\u003e is reported then this spliterator will additionally report \n\u003ccode\u003eSUBSIZED\u003c/code\u003e."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1033,
  "name": "java.util.Spliterators$AbstractIntSpliterator",
  "comment": "An abstract \n\u003ccode\u003eSpliterator.OfInt\u003c/code\u003e that implements \n\u003ccode\u003etrySplit\u003c/code\u003e to permit limited parallelism. \n\u003cp\u003eTo implement a spliterator an extending class need only implement \u003ca href\u003d\"Spliterator.OfPrimitive.html#tryAdvance(T_CONS)\"\u003e\u003ccode\u003etryAdvance\u003c/code\u003e\u003c/a\u003e. The extending class should override \u003ca href\u003d\"Spliterator.OfPrimitive.html#forEachRemaining(T_CONS)\"\u003e\u003ccode\u003eforEachRemaining\u003c/code\u003e\u003c/a\u003e if it can provide a more performant implementation.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterators.html#spliterator(java.util.PrimitiveIterator.OfInt,long,int)\"\u003e\u003ccode\u003eSpliterators.spliterator(java.util.PrimitiveIterator.OfInt, long, int)\u003c/code\u003e\u003c/a\u003e"
    ],
    "apiNote": [
      "This class is a useful aid for creating a spliterator when it is not possible or difficult to efficiently partition elements in a manner allowing balanced parallel computation. \n\u003cp\u003eAn alternative to using this class, that also permits limited parallelism, is to create a spliterator from an iterator (see \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterators.html#spliterator(java.util.PrimitiveIterator.OfInt,long,int)\"\u003e\u003ccode\u003eSpliterators.spliterator(java.util.PrimitiveIterator.OfInt, long, int)\u003c/code\u003e\u003c/a\u003e. Depending on the circumstances using an iterator may be easier or more convenient than extending this class. For example, if there is already an iterator available to use then there is no need to extend this class.\u003c/p\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}