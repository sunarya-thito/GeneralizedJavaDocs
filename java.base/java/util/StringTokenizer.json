{
  "packageName": "java.util",
  "simpleName": "StringTokenizer",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasMoreTokens",
      "comment": "Tests if there are more tokens available from this tokenizer\u0027s string. If this method returns true, then a subsequent call to nextToken with no argument will successfully return a token.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if there is at least one token in the string after the current position; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextToken",
      "comment": "Returns the next token from this string tokenizer.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if there are no more tokens in this tokenizer\u0027s string."
        ],
        "return": [
          "the next token from this string tokenizer."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "delim"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextToken",
      "comment": "Returns the next token in this string tokenizer\u0027s string. First, the set of characters considered to be delimiters by this StringTokenizer object is changed to be the characters in the string delim. Then the next token in the string after the current position is returned. The current position is advanced beyond the recognized token. The new delimiter set remains the default after this call.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edelim\u003c/code\u003e - the new delimiters."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if there are no more tokens in this tokenizer\u0027s string.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if delim is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the next token, after switching to the new delimiter set."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasMoreElements",
      "comment": "Returns the same value as the hasMoreTokens method. It exists so that this class can implement the Enumeration interface.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eEnumeration\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/StringTokenizer.html#hasMoreTokens()\"\u003e\u003ccode\u003ehasMoreTokens()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html#hasMoreElements()\"\u003ehasMoreElements\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html\" title\u003d\"interface in java.util\"\u003eEnumeration\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there are more tokens; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextElement",
      "comment": "Returns the same value as the nextToken method, except that its declared return value is Object rather than String. It exists so that this class can implement the Enumeration interface.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eEnumeration\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/StringTokenizer.html#nextToken()\"\u003e\u003ccode\u003enextToken()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html#nextElement()\"\u003enextElement\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html\" title\u003d\"interface in java.util\"\u003eEnumeration\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if there are no more tokens in this tokenizer\u0027s string."
        ],
        "return": [
          "the next token in the string."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "countTokens",
      "comment": "Calculates the number of times that this tokenizer\u0027s nextToken method can be called before it generates an exception. The current position is not advanced.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/StringTokenizer.html#nextToken()\"\u003e\u003ccode\u003enextToken()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the number of tokens remaining in the string using the current delimiter set."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "delim"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "returnDelims"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a string tokenizer for the specified string. All characters in the delim argument are the delimiters for separating tokens. If the returnDelims flag is true, then the delimiter characters are also returned as tokens. Each delimiter is returned as a string of length one. If the flag is false, the delimiter characters are skipped and only serve as separators between tokens. Note that if delim is null, this constructor does not throw an exception. However, trying to invoke other methods on the resulting StringTokenizer may result in a NullPointerException.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - a string to be parsed.",
          "\u003ccode\u003edelim\u003c/code\u003e - the delimiters.",
          "\u003ccode\u003ereturnDelims\u003c/code\u003e - flag indicating whether to return the delimiters as tokens."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if str is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "delim"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a string tokenizer for the specified string. The characters in the delim argument are the delimiters for separating tokens. Delimiter characters themselves will not be treated as tokens. Note that if delim is null, this constructor does not throw an exception. However, trying to invoke other methods on the resulting StringTokenizer may result in a NullPointerException.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - a string to be parsed.",
          "\u003ccode\u003edelim\u003c/code\u003e - the delimiters."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if str is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "str"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a string tokenizer for the specified string. The tokenizer uses the default delimiter set, which is \" \\t\\n\\r\\f\": the space character, the tab character, the newline character, the carriage-return character, and the form-feed character. Delimiter characters themselves will not be treated as tokens.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - a string to be parsed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if str is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.StringTokenizer",
  "comment": "The string tokenizer class allows an application to break a string into tokens. The tokenization method is much simpler than the one used by the \n\u003ccode\u003eStreamTokenizer\u003c/code\u003e class. The \n\u003ccode\u003eStringTokenizer\u003c/code\u003e methods do not distinguish among identifiers, numbers, and quoted strings, nor do they recognize and skip comments. \n\u003cp\u003e The set of delimiters (the characters that separate tokens) may be specified either at creation time or on a per-token basis. \u003c/p\u003e\n\u003cp\u003e An instance of \u003ccode\u003eStringTokenizer\u003c/code\u003e behaves in one of two ways, depending on whether it was created with the \u003ccode\u003ereturnDelims\u003c/code\u003e flag having the value \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eIf the flag is \u003ccode\u003efalse\u003c/code\u003e, delimiter characters serve to separate tokens. A token is a maximal sequence of consecutive characters that are not delimiters. \u003c/li\u003e\n \u003cli\u003eIf the flag is \u003ccode\u003etrue\u003c/code\u003e, delimiter characters are themselves considered to be tokens. A token is thus either one delimiter character, or a maximal sequence of consecutive characters that are not delimiters. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eStringTokenizer\u003c/code\u003e object internally maintains a current position within the string to be tokenized. Some operations advance this current position past the characters processed.\u003c/p\u003e\n\u003cp\u003e A token is returned by taking a substring of the string that was used to create the \u003ccode\u003eStringTokenizer\u003c/code\u003e object. \u003c/p\u003e\n\u003cp\u003e The following is one example of the use of the tokenizer. The code: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     StringTokenizer st \u003d new StringTokenizer(\"this is a test\");\n     while (st.hasMoreTokens()) {\n         System.out.println(st.nextToken());\n     }\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e prints the following output: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     this\n     is\n     a\n     test\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003ccode\u003eStringTokenizer\u003c/code\u003e is a legacy class that is retained for compatibility reasons although its use is discouraged in new code. It is recommended that anyone seeking this functionality use the \u003ccode\u003esplit\u003c/code\u003e method of \u003ccode\u003eString\u003c/code\u003e or the java.util.regex package instead. \u003c/p\u003e\n\u003cp\u003e The following example illustrates how the \u003ccode\u003eString.split\u003c/code\u003e method can be used to break up a string into its basic tokens: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     String[] result \u003d \"this is a test\".split(\"\\\\s\");\n     for (int x\u003d0; x\u0026lt;result.length; x++)\n         System.out.println(result[x]);\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e prints the following output: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e     this\n     is\n     a\n     test\n \u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/StreamTokenizer.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eStreamTokenizer\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}