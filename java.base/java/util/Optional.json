{
  "packageName": "java.util",
  "simpleName": "Optional",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "empty",
      "comment": "Returns an empty Optional instance. No value is present for this Optional.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - The type of the non-existent value"
        ],
        "apiNote": [
          "Though it may be tempting to do so, avoid testing if an object is empty by comparing with \n\u003ccode\u003e\u003d\u003d\u003c/code\u003e or \n\u003ccode\u003e!\u003d\u003c/code\u003e against instances returned by \n\u003ccode\u003eOptional.empty()\u003c/code\u003e. There is no guarantee that it is a singleton. Instead, use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html#isEmpty()\"\u003e\u003ccode\u003eisEmpty()\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html#isPresent()\"\u003e\u003ccode\u003eisPresent()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "an empty \n\u003ccode\u003eOptional\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "of",
      "comment": "Returns an Optional describing the given non-null value.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value to describe, which must be non-\n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if value is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eOptional\u003c/code\u003e with the value present"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "T",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "ofNullable",
      "comment": "Returns an Optional describing the given value, if non-null, otherwise returns an empty Optional.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the possibly-\n\u003ccode\u003enull\u003c/code\u003e value to describe"
        ],
        "return": [
          "an \n\u003ccode\u003eOptional\u003c/code\u003e with a present value if the specified value is non-\n\u003ccode\u003enull\u003c/code\u003e, otherwise an empty \n\u003ccode\u003eOptional\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Optional",
        "name": "T",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "If a value is present, returns the value, otherwise throws NoSuchElementException.",
      "tagMap": {
        "apiNote": [
          "The preferred alternative to this method is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Optional.html#orElseThrow()\"\u003e\u003ccode\u003eorElseThrow()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if no value is present"
        ],
        "return": [
          "the non-\n\u003ccode\u003enull\u003c/code\u003e value described by this \n\u003ccode\u003eOptional\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isPresent",
      "comment": "If a value is present, returns true, otherwise false.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a value is present, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isEmpty",
      "comment": "If a value is not present, returns true, otherwise false.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a value is not present, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Optional",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ifPresent",
      "comment": "If a value is present, performs the given action with the value, otherwise does nothing.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed, if a value is present"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if value is present and the given action is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Optional",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        },
        {
          "type": {
            "name": "java.lang.Runnable",
            "type": "Class"
          },
          "field": {
            "name": "emptyAction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "ifPresentOrElse",
      "comment": "If a value is present, performs the given action with the value, otherwise performs the given empty-based action.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed, if a value is present",
          "\u003ccode\u003eemptyAction\u003c/code\u003e - the empty-based action to be performed, if no value is present"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if a value is present and the given action is \n\u003ccode\u003enull\u003c/code\u003e, or no value is present and the given empty-based action is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "owner": "java.util.Optional",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Optional",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "predicate"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "filter",
      "comment": "If a value is present, and the value matches the given predicate, returns an Optional describing the value, otherwise returns an empty Optional.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epredicate\u003c/code\u003e - the predicate to apply to a value, if present"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the predicate is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eOptional\u003c/code\u003e describing the value of this \n\u003ccode\u003eOptional\u003c/code\u003e, if a value is present and the value matches the given predicate, otherwise an empty \n\u003ccode\u003eOptional\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Optional",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "U",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mapper"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "map",
      "comment": "If a value is present, returns an Optional describing (as if by ofNullable(T)) the result of applying the given mapping function to the value, otherwise returns an empty Optional. If the mapping function returns a null result then this method returns an empty Optional.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - The type of the value returned from the mapping function"
        ],
        "apiNote": [
          "This method supports post-processing on \n\u003ccode\u003eOptional\u003c/code\u003e values, without the need to explicitly check for a return status. For example, the following code traverses a stream of URIs, selects one that has not yet been processed, and creates a path from that URI, returning an \n\u003ccode\u003eOptional\u0026lt;Path\u0026gt;\u003c/code\u003e: \n\u003cpre\u003e\u003ccode\u003e\n     Optional\u0026lt;Path\u0026gt; p \u003d\n         uris.stream().filter(uri -\u0026gt; !isProcessedYet(uri))\n                       .findFirst()\n                       .map(Paths::get);\n \u003c/code\u003e\u003c/pre\u003e Here, \n\u003ccode\u003efindFirst\u003c/code\u003e returns an \n\u003ccode\u003eOptional\u0026lt;URI\u0026gt;\u003c/code\u003e, and then \n\u003ccode\u003emap\u003c/code\u003e returns an \n\u003ccode\u003eOptional\u0026lt;Path\u0026gt;\u003c/code\u003e for the desired URI if one exists."
        ],
        "param": [
          "\u003ccode\u003emapper\u003c/code\u003e - the mapping function to apply to a value, if present"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the mapping function is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eOptional\u003c/code\u003e describing the result of applying a mapping function to the value of this \n\u003ccode\u003eOptional\u003c/code\u003e, if a value is present, otherwise an empty \n\u003ccode\u003eOptional\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "name": "U",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Optional",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "java.util.Optional",
                    "parameters": [
                      {
                        "upperBounds": [
                          {
                            "name": "U",
                            "type": "Class"
                          }
                        ],
                        "type": "Wildcard"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "mapper"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "U",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "flatMap",
      "comment": "If a value is present, returns the result of applying the given Optional-bearing mapping function to the value, otherwise returns an empty Optional. This method is similar to map(Function), but the mapping function is one whose result is already an Optional, and if invoked, flatMap does not wrap it within an additional Optional.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eU\u003c/code\u003e - The type of value of the \n\u003ccode\u003eOptional\u003c/code\u003e returned by the mapping function"
        ],
        "param": [
          "\u003ccode\u003emapper\u003c/code\u003e - the mapping function to apply to a value, if present"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the mapping function is \n\u003ccode\u003enull\u003c/code\u003e or returns a \n\u003ccode\u003enull\u003c/code\u003e result"
        ],
        "return": [
          "the result of applying an \n\u003ccode\u003eOptional\u003c/code\u003e-bearing mapping function to the value of this \n\u003ccode\u003eOptional\u003c/code\u003e, if a value is present, otherwise an empty \n\u003ccode\u003eOptional\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Optional",
        "parameters": [
          {
            "owner": "java.util.Optional",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.util.Optional",
                    "parameters": [
                      {
                        "upperBounds": [
                          {
                            "owner": "java.util.Optional",
                            "name": "T",
                            "type": "Variable"
                          }
                        ],
                        "type": "Wildcard"
                      }
                    ],
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "supplier"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "or",
      "comment": "If a value is present, returns an Optional describing the value, otherwise returns an Optional produced by the supplying function.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esupplier\u003c/code\u003e - the supplying function that produces an \n\u003ccode\u003eOptional\u003c/code\u003e to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the supplying function is \n\u003ccode\u003enull\u003c/code\u003e or produces a \n\u003ccode\u003enull\u003c/code\u003e result"
        ],
        "return": [
          "returns an \n\u003ccode\u003eOptional\u003c/code\u003e describing the value of this \n\u003ccode\u003eOptional\u003c/code\u003e, if a value is present, otherwise an \n\u003ccode\u003eOptional\u003c/code\u003e produced by the supplying function."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "owner": "java.util.Optional",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "stream",
      "comment": "If a value is present, returns a sequential Stream containing only that value, otherwise returns an empty Stream.",
      "tagMap": {
        "apiNote": [
          "This method can be used to transform a \n\u003ccode\u003eStream\u003c/code\u003e of optional elements to a \n\u003ccode\u003eStream\u003c/code\u003e of present value elements: \n\u003cpre\u003e\u003ccode\u003e\n     Stream\u0026lt;Optional\u0026lt;T\u0026gt;\u0026gt; os \u003d ..\n     Stream\u0026lt;T\u0026gt; s \u003d os.flatMap(Optional::stream)\n \u003c/code\u003e\u003c/pre\u003e"
        ],
        "return": [
          "the optional value as a \n\u003ccode\u003eStream\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Optional",
        "name": "T",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.Optional",
            "name": "T",
            "type": "Variable"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "orElse",
      "comment": "If a value is present, returns the value, otherwise returns other.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the value to be returned, if no value is present. May be \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "the value, if present, otherwise \n\u003ccode\u003eother\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Optional",
        "name": "T",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Optional",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "supplier"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "orElseGet",
      "comment": "If a value is present, returns the value, otherwise returns the result produced by the supplying function.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esupplier\u003c/code\u003e - the supplying function that produces a value to be returned"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if no value is present and the supplying function is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value, if present, otherwise the result produced by the supplying function"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Optional",
        "name": "T",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "orElseThrow",
      "comment": "If a value is present, returns the value, otherwise throws NoSuchElementException.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if no value is present"
        ],
        "return": [
          "the non-\n\u003ccode\u003enull\u003c/code\u003e value described by this \n\u003ccode\u003eOptional\u003c/code\u003e"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.Optional",
        "name": "T",
        "type": "Variable"
      },
      "throwsClasses": [
        {
          "name": "X",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Supplier",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "X",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "exceptionSupplier"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "X",
          "upperBounds": [
            {
              "name": "java.lang.Throwable",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "orElseThrow",
      "comment": "If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eX\u003c/code\u003e - Type of the exception to be thrown"
        ],
        "apiNote": [
          "A method reference to the exception constructor with an empty argument list can be used as the supplier. For example, \n\u003ccode\u003eIllegalStateException::new\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eexceptionSupplier\u003c/code\u003e - the supplying function that produces an exception to be thrown"
        ],
        "throws": [
          "\u003ccode\u003eX\u003c/code\u003e - if no value is present",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if no value is present and the exception supplying function is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value, if present"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Indicates whether some other object is \"equal to\" this Optional. The other object is considered equal if: it is also an Optional and; both instances have no value present or; the present values are \"equal to\" each other via equals().",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - an object to be tested for equality"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the other object is \"equal to\" this object otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "hash code value of the present value or \n\u003ccode\u003e0\u003c/code\u003e if no value is present"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a non-empty string representation of this Optional suitable for debugging. The exact presentation format is unspecified and may vary between implementations and versions.",
      "tagMap": {
        "implSpec": [
          "If a value is present the result must include its string representation in the result. Empty and present \n\u003ccode\u003eOptional\u003c/code\u003es must be unambiguously differentiable."
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string representation of this instance"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.util.Optional",
  "comment": "A container object which may or may not contain a non-\n\u003ccode\u003enull\u003c/code\u003e value. If a value is present, \n\u003ccode\u003eisPresent()\u003c/code\u003e returns \n\u003ccode\u003etrue\u003c/code\u003e. If no value is present, the object is considered \n\u003ci\u003eempty\u003c/i\u003e and \n\u003ccode\u003eisPresent()\u003c/code\u003e returns \n\u003ccode\u003efalse\u003c/code\u003e. \n\u003cp\u003eAdditional methods that depend on the presence or absence of a contained value are provided, such as \u003ca href\u003d\"#orElse(T)\"\u003e\u003ccode\u003eorElse()\u003c/code\u003e\u003c/a\u003e (returns a default value if no value is present) and \u003ca href\u003d\"#ifPresent(java.util.function.Consumer)\"\u003e\u003ccode\u003eifPresent()\u003c/code\u003e\u003c/a\u003e (performs an action if a value is present). \u003c/p\u003e\n\u003cp\u003eThis is a \u003ca href\u003d\"../../../java.base/java/lang/doc-files/ValueBased.html\"\u003evalue-based\u003c/a\u003e class; programmers should treat instances that are \u003ca href\u003d\"#equals(java.lang.Object)\"\u003eequal\u003c/a\u003e as interchangeable and should not use instances for synchronization, or unpredictable behavior may occur. For example, in a future release, synchronization may fail.\u003c/p\u003e",
  "tagMap": {
    "apiNote": [
      "\u003ccode\u003eOptional\u003c/code\u003e is primarily intended for use as a method return type where there is a clear need to represent \"no result,\" and where using \n\u003ccode\u003enull\u003c/code\u003e is likely to cause errors. A variable whose type is \n\u003ccode\u003eOptional\u003c/code\u003e should never itself be \n\u003ccode\u003enull\u003c/code\u003e; it should always point to an \n\u003ccode\u003eOptional\u003c/code\u003e instance."
    ],
    "since": [
      "1.8"
    ]
  }
}