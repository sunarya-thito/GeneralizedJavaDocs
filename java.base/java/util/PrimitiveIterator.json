{
  "packageName": "java.util",
  "simpleName": "PrimitiveIterator",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.Iterator",
    "parameters": [
      {
        "name": "T",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.PrimitiveIterator",
            "name": "T_CONS",
            "type": "Variable"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "forEachRemaining",
      "comment": "Performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception. Errors or runtime exceptions thrown by the action are relayed to the caller.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - The action to be performed for each element"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified action is null"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.PrimitiveIterator$OfInt",
    "java.util.PrimitiveIterator$OfDouble",
    "java.util.PrimitiveIterator$OfLong"
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    },
    {
      "name": "T_CONS",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.PrimitiveIterator",
  "comment": "A base type for primitive specializations of \n\u003ccode\u003eIterator\u003c/code\u003e. Specialized subtypes are provided for \n\u003ca href\u003d\"PrimitiveIterator.OfInt.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eint\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"PrimitiveIterator.OfLong.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003elong\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"PrimitiveIterator.OfDouble.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003edouble\u003c/code\u003e\u003c/a\u003e values. \n\u003cp\u003eThe specialized subtype default implementations of \u003ca href\u003d\"Iterator.html#next()\"\u003e\u003ccode\u003eIterator.next()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"Iterator.html#forEachRemaining(java.util.function.Consumer)\"\u003e\u003ccode\u003eIterator.forEachRemaining(java.util.function.Consumer)\u003c/code\u003e\u003c/a\u003e box primitive values to instances of their corresponding wrapper class. Such boxing may offset any advantages gained when using the primitive specializations. To avoid boxing, the corresponding primitive-based methods should be used. For example, \u003ca href\u003d\"PrimitiveIterator.OfInt.html#nextInt()\"\u003e\u003ccode\u003ePrimitiveIterator.OfInt.nextInt()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"PrimitiveIterator.OfInt.html#forEachRemaining(java.util.function.IntConsumer)\"\u003e\u003ccode\u003ePrimitiveIterator.OfInt.forEachRemaining(java.util.function.IntConsumer)\u003c/code\u003e\u003c/a\u003e should be used in preference to \u003ca href\u003d\"PrimitiveIterator.OfInt.html#next()\"\u003e\u003ccode\u003ePrimitiveIterator.OfInt.next()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"PrimitiveIterator.OfInt.html#forEachRemaining(java.util.function.Consumer)\"\u003e\u003ccode\u003ePrimitiveIterator.OfInt.forEachRemaining(java.util.function.Consumer)\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003eIteration of primitive values using boxing-based methods \u003ca href\u003d\"Iterator.html#next()\"\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"Iterator.html#forEachRemaining(java.util.function.Consumer)\"\u003e\u003ccode\u003eforEachRemaining()\u003c/code\u003e\u003c/a\u003e, does not affect the order in which the values, transformed to boxed values, are encountered.\u003c/p\u003e",
  "tagMap": {
    "implNote": [
      "If the boolean system property \n\u003ccode\u003eorg.openjdk.java.util.stream.tripwire\u003c/code\u003e is set to \n\u003ccode\u003etrue\u003c/code\u003e then diagnostic warnings are reported if boxing of primitive values occur when operating on primitive subtype specializations."
    ],
    "since": [
      "1.8"
    ]
  }
}