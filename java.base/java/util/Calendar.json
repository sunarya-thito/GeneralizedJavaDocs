{
  "packageName": "java.util",
  "simpleName": "Calendar",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ERA",
      "comment": "Field number for get and set indicating the era, e.g., AD or BC in the Julian calendar. This is a calendar-specific value; see subclass documentation.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/GregorianCalendar.html#AD\"\u003e\u003ccode\u003eGregorianCalendar.AD\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/GregorianCalendar.html#BC\"\u003e\u003ccode\u003eGregorianCalendar.BC\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.ERA\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "YEAR",
      "comment": "Field number for get and set indicating the year. This is a calendar-specific value; see subclass documentation.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.YEAR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MONTH",
      "comment": "Field number for get and set indicating the month. This is a calendar-specific value. The first month of the year in the Gregorian and Julian calendars is JANUARY which is 0; the last depends on the number of months in a year.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#JANUARY\"\u003e\u003ccode\u003eJANUARY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#FEBRUARY\"\u003e\u003ccode\u003eFEBRUARY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#MARCH\"\u003e\u003ccode\u003eMARCH\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#APRIL\"\u003e\u003ccode\u003eAPRIL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#MAY\"\u003e\u003ccode\u003eMAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#JUNE\"\u003e\u003ccode\u003eJUNE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#JULY\"\u003e\u003ccode\u003eJULY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#AUGUST\"\u003e\u003ccode\u003eAUGUST\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SEPTEMBER\"\u003e\u003ccode\u003eSEPTEMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#OCTOBER\"\u003e\u003ccode\u003eOCTOBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#NOVEMBER\"\u003e\u003ccode\u003eNOVEMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#DECEMBER\"\u003e\u003ccode\u003eDECEMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#UNDECIMBER\"\u003e\u003ccode\u003eUNDECIMBER\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.MONTH\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEEK_OF_YEAR",
      "comment": "Field number for get and set indicating the week number within the current year. The first week of the year, as defined by getFirstDayOfWeek() and getMinimalDaysInFirstWeek(), has value 1. Subclasses define the value of WEEK_OF_YEAR for days before the first week of the year.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getFirstDayOfWeek()\"\u003e\u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimalDaysInFirstWeek()\"\u003e\u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.WEEK_OF_YEAR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEEK_OF_MONTH",
      "comment": "Field number for get and set indicating the week number within the current month. The first week of the month, as defined by getFirstDayOfWeek() and getMinimalDaysInFirstWeek(), has value 1. Subclasses define the value of WEEK_OF_MONTH for days before the first week of the month.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getFirstDayOfWeek()\"\u003e\u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimalDaysInFirstWeek()\"\u003e\u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.WEEK_OF_MONTH\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DATE",
      "comment": "Field number for get and set indicating the day of the month. This is a synonym for DAY_OF_MONTH. The first day of the month has value 1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#DAY_OF_MONTH\"\u003e\u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.DATE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DAY_OF_MONTH",
      "comment": "Field number for get and set indicating the day of the month. This is a synonym for DATE. The first day of the month has value 1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#DATE\"\u003e\u003ccode\u003eDATE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.DAY_OF_MONTH\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DAY_OF_YEAR",
      "comment": "Field number for get and set indicating the day number within the current year. The first day of the year has value 1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.DAY_OF_YEAR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DAY_OF_WEEK",
      "comment": "Field number for get and set indicating the day of the week. This field takes values SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, and SATURDAY.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SUNDAY\"\u003e\u003ccode\u003eSUNDAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#MONDAY\"\u003e\u003ccode\u003eMONDAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#TUESDAY\"\u003e\u003ccode\u003eTUESDAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#WEDNESDAY\"\u003e\u003ccode\u003eWEDNESDAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#THURSDAY\"\u003e\u003ccode\u003eTHURSDAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#FRIDAY\"\u003e\u003ccode\u003eFRIDAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SATURDAY\"\u003e\u003ccode\u003eSATURDAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.DAY_OF_WEEK\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DAY_OF_WEEK_IN_MONTH",
      "comment": "Field number for get and set indicating the ordinal number of the day of the week within the current month. Together with the DAY_OF_WEEK field, this uniquely specifies a day within a month. Unlike WEEK_OF_MONTH and WEEK_OF_YEAR, this field\u0027s value does not depend on getFirstDayOfWeek() or getMinimalDaysInFirstWeek(). DAY_OF_MONTH 1 through 7 always correspond to DAY_OF_WEEK_IN_MONTH 1; 8 through 14 correspond to DAY_OF_WEEK_IN_MONTH 2, and so on. DAY_OF_WEEK_IN_MONTH 0 indicates the week before DAY_OF_WEEK_IN_MONTH 1. Negative values count back from the end of the month, so the last Sunday of a month is specified as DAY_OF_WEEK \u003d SUNDAY, DAY_OF_WEEK_IN_MONTH \u003d -1. Because negative values count backward they will usually be aligned differently within the month than positive values. For example, if a month has 31 days, DAY_OF_WEEK_IN_MONTH -1 will overlap DAY_OF_WEEK_IN_MONTH 5 and the end of 4.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#DAY_OF_WEEK\"\u003e\u003ccode\u003eDAY_OF_WEEK\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#WEEK_OF_MONTH\"\u003e\u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.DAY_OF_WEEK_IN_MONTH\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AM_PM",
      "comment": "Field number for get and set indicating whether the HOUR is before or after noon. E.g., at 10:04:15.250 PM the AM_PM is PM.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#AM\"\u003e\u003ccode\u003eAM\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#PM\"\u003e\u003ccode\u003ePM\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#HOUR\"\u003e\u003ccode\u003eHOUR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.AM_PM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HOUR",
      "comment": "Field number for get and set indicating the hour of the morning or afternoon. HOUR is used for the 12-hour clock (0 - 11). Noon and midnight are represented by 0, not by 12. E.g., at 10:04:15.250 PM the HOUR is 10.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#AM_PM\"\u003e\u003ccode\u003eAM_PM\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#HOUR_OF_DAY\"\u003e\u003ccode\u003eHOUR_OF_DAY\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.HOUR\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "HOUR_OF_DAY",
      "comment": "Field number for get and set indicating the hour of the day. HOUR_OF_DAY is used for the 24-hour clock. E.g., at 10:04:15.250 PM the HOUR_OF_DAY is 22.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#HOUR\"\u003e\u003ccode\u003eHOUR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.HOUR_OF_DAY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MINUTE",
      "comment": "Field number for get and set indicating the minute within the hour. E.g., at 10:04:15.250 PM the MINUTE is 4.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.MINUTE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SECOND",
      "comment": "Field number for get and set indicating the second within the minute. E.g., at 10:04:15.250 PM the SECOND is 15.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.SECOND\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MILLISECOND",
      "comment": "Field number for get and set indicating the millisecond within the second. E.g., at 10:04:15.250 PM the MILLISECOND is 250.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.MILLISECOND\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ZONE_OFFSET",
      "comment": "Field number for get and set indicating the raw offset from GMT in milliseconds. This field reflects the correct GMT offset value of the time zone of this Calendar if the TimeZone implementation subclass supports historical GMT offset changes.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.ZONE_OFFSET\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DST_OFFSET",
      "comment": "Field number for get and set indicating the daylight saving offset in milliseconds. This field reflects the correct daylight saving offset value of the time zone of this Calendar if the TimeZone implementation subclass supports historical Daylight Saving Time schedule changes.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.DST_OFFSET\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FIELD_COUNT",
      "comment": "The number of distinct fields recognized by get and set. Field numbers range from 0..FIELD_COUNT-1.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.FIELD_COUNT\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SUNDAY",
      "comment": "Value of the DAY_OF_WEEK field indicating Sunday.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.SUNDAY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MONDAY",
      "comment": "Value of the DAY_OF_WEEK field indicating Monday.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.MONDAY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TUESDAY",
      "comment": "Value of the DAY_OF_WEEK field indicating Tuesday.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.TUESDAY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "WEDNESDAY",
      "comment": "Value of the DAY_OF_WEEK field indicating Wednesday.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.WEDNESDAY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "THURSDAY",
      "comment": "Value of the DAY_OF_WEEK field indicating Thursday.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.THURSDAY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FRIDAY",
      "comment": "Value of the DAY_OF_WEEK field indicating Friday.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.FRIDAY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SATURDAY",
      "comment": "Value of the DAY_OF_WEEK field indicating Saturday.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.SATURDAY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JANUARY",
      "comment": "Value of the MONTH field indicating the first month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.JANUARY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FEBRUARY",
      "comment": "Value of the MONTH field indicating the second month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.FEBRUARY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MARCH",
      "comment": "Value of the MONTH field indicating the third month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.MARCH\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "APRIL",
      "comment": "Value of the MONTH field indicating the fourth month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.APRIL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "MAY",
      "comment": "Value of the MONTH field indicating the fifth month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.MAY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JUNE",
      "comment": "Value of the MONTH field indicating the sixth month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.JUNE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "JULY",
      "comment": "Value of the MONTH field indicating the seventh month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.JULY\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AUGUST",
      "comment": "Value of the MONTH field indicating the eighth month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.AUGUST\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SEPTEMBER",
      "comment": "Value of the MONTH field indicating the ninth month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.SEPTEMBER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "OCTOBER",
      "comment": "Value of the MONTH field indicating the tenth month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.OCTOBER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NOVEMBER",
      "comment": "Value of the MONTH field indicating the eleventh month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.NOVEMBER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "DECEMBER",
      "comment": "Value of the MONTH field indicating the twelfth month of the year in the Gregorian and Julian calendars.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.DECEMBER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNDECIMBER",
      "comment": "Value of the MONTH field indicating the thirteenth month of the year. Although GregorianCalendar does not use this value, lunar calendars do.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.UNDECIMBER\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "AM",
      "comment": "Value of the AM_PM field indicating the period of the day from midnight to just before noon.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.AM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "PM",
      "comment": "Value of the AM_PM field indicating the period of the day from noon to just before midnight.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.PM\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "ALL_STYLES",
      "comment": "A style specifier for getDisplayNames indicating names in all styles, such as \"January\" and \"Jan\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_FORMAT\"\u003e\u003ccode\u003eSHORT_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_FORMAT\"\u003e\u003ccode\u003eLONG_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_STANDALONE\"\u003e\u003ccode\u003eSHORT_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_STANDALONE\"\u003e\u003ccode\u003eLONG_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT\"\u003e\u003ccode\u003eSHORT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG\"\u003e\u003ccode\u003eLONG\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.ALL_STYLES\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SHORT",
      "comment": "A style specifier for getDisplayName and getDisplayNames equivalent to SHORT_FORMAT.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_STANDALONE\"\u003e\u003ccode\u003eSHORT_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG\"\u003e\u003ccode\u003eLONG\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.SHORT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LONG",
      "comment": "A style specifier for getDisplayName and getDisplayNames equivalent to LONG_FORMAT.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_STANDALONE\"\u003e\u003ccode\u003eLONG_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT\"\u003e\u003ccode\u003eSHORT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.LONG\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NARROW_FORMAT",
      "comment": "A style specifier for getDisplayName and getDisplayNames indicating a narrow name used for format. Narrow names are typically single character strings, such as \"M\" for Monday.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#NARROW_STANDALONE\"\u003e\u003ccode\u003eNARROW_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_FORMAT\"\u003e\u003ccode\u003eSHORT_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_FORMAT\"\u003e\u003ccode\u003eLONG_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.NARROW_FORMAT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "NARROW_STANDALONE",
      "comment": "A style specifier for getDisplayName and getDisplayNames indicating a narrow name independently. Narrow names are typically single character strings, such as \"M\" for Monday.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#NARROW_FORMAT\"\u003e\u003ccode\u003eNARROW_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_STANDALONE\"\u003e\u003ccode\u003eSHORT_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_STANDALONE\"\u003e\u003ccode\u003eLONG_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.NARROW_STANDALONE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SHORT_FORMAT",
      "comment": "A style specifier for getDisplayName and getDisplayNames indicating a short name used for format.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_STANDALONE\"\u003e\u003ccode\u003eSHORT_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_FORMAT\"\u003e\u003ccode\u003eLONG_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_STANDALONE\"\u003e\u003ccode\u003eLONG_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.SHORT_FORMAT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LONG_FORMAT",
      "comment": "A style specifier for getDisplayName and getDisplayNames indicating a long name used for format.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_STANDALONE\"\u003e\u003ccode\u003eLONG_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_FORMAT\"\u003e\u003ccode\u003eSHORT_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_STANDALONE\"\u003e\u003ccode\u003eSHORT_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.LONG_FORMAT\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "SHORT_STANDALONE",
      "comment": "A style specifier for getDisplayName and getDisplayNames indicating a short name used independently, such as a month abbreviation as calendar headers.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_FORMAT\"\u003e\u003ccode\u003eSHORT_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_FORMAT\"\u003e\u003ccode\u003eLONG_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_STANDALONE\"\u003e\u003ccode\u003eLONG_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.SHORT_STANDALONE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "LONG_STANDALONE",
      "comment": "A style specifier for getDisplayName and getDisplayNames indicating a long name used independently, such as a month name as calendar headers.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_FORMAT\"\u003e\u003ccode\u003eLONG_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_FORMAT\"\u003e\u003ccode\u003eSHORT_FORMAT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_STANDALONE\"\u003e\u003ccode\u003eSHORT_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.Calendar.LONG_STANDALONE\"\u003eConstant Field Values\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "type": {
        "name": "int",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "fields",
      "comment": "The calendar field values for the currently set time for this calendar. This is an array of FIELD_COUNT integers, with index values ERA through DST_OFFSET.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class",
        "arrayDimensions": 1
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "isSet",
      "comment": "The flags which tell if a specified calendar field for the calendar is set. A new object has no fields set. After the first call to a method which generates the fields, they all remain set after that. This is an array of FIELD_COUNT booleans, with index values ERA through DST_OFFSET.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "time",
      "comment": "The currently set time for this calendar, expressed in milliseconds after January 1, 1970, 0:00:00 GMT.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#isTimeSet\"\u003e\u003ccode\u003eisTimeSet\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "isTimeSet",
      "comment": "True if then the value of time is valid. The time is made invalid by a change to an item of field[].",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#time\"\u003e\u003ccode\u003etime\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "boolean",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "areFieldsSet",
      "comment": "True if fields[] are in sync with the currently set time. If false, then the next attempt to get the value of a field will force a recomputation of all fields from the current value of time.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.util.Calendar",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Gets a calendar using the default time zone and locale. The Calendar returned is based on the current time in the default time zone with the default FORMAT locale. If the locale contains the time zone with \"tz\" Unicode extension, that time zone is used instead.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a Calendar."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.TimeZone",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Gets a calendar using the specified time zone and default locale. The Calendar returned is based on the current time in the given time zone with the default FORMAT locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the time zone to use"
        ],
        "return": [
          "a Calendar."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "aLocale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Gets a calendar using the default time zone and specified locale. The Calendar returned is based on the current time in the default time zone with the given locale. If the locale contains the time zone with \"tz\" Unicode extension, that time zone is used instead.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eaLocale\u003c/code\u003e - the locale for the week data"
        ],
        "return": [
          "a Calendar."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Calendar",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.TimeZone",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "aLocale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Gets a calendar with the specified time zone and locale. The Calendar returned is based on the current time in the given time zone with the given locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the time zone to use",
          "\u003ccode\u003eaLocale\u003c/code\u003e - the locale for the week data"
        ],
        "return": [
          "a Calendar."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAvailableLocales",
      "comment": "Returns an array of all locales for which the getInstance methods of this class can return localized instances. The array returned must contain at least a Locale instance equal to Locale.US.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An array of locales for which localized \n\u003ccode\u003eCalendar\u003c/code\u003e instances are available."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "computeTime",
      "comment": "Converts the current calendar field values in fields[] to the millisecond time value time.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#complete()\"\u003e\u003ccode\u003ecomplete()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#computeFields()\"\u003e\u003ccode\u003ecomputeFields()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "computeFields",
      "comment": "Converts the current millisecond time value time to calendar field values in fields[]. This allows you to sync up the calendar field values with a new time that is set for the calendar. The time is not recomputed first; to recompute the time, then the fields, call the complete() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#computeTime()\"\u003e\u003ccode\u003ecomputeTime()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getTime",
      "comment": "Returns a Date object representing this Calendar\u0027s time value (millisecond offset from the Epoch\").",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setTime(java.util.Date)\"\u003e\u003ccode\u003esetTime(Date)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getTimeInMillis()\"\u003e\u003ccode\u003egetTimeInMillis()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eDate\u003c/code\u003e representing the time value."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "name": "date",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setTime",
      "comment": "Sets this Calendar\u0027s time with the given Date. Note: Calling setTime() with Date(Long.MAX_VALUE) or Date(Long.MIN_VALUE) may yield incorrect field values from get().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getTime()\"\u003e\u003ccode\u003egetTime()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setTimeInMillis(long)\"\u003e\u003ccode\u003esetTimeInMillis(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edate\u003c/code\u003e - the given Date."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edate\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTimeInMillis",
      "comment": "Returns this Calendar\u0027s time value in milliseconds.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getTime()\"\u003e\u003ccode\u003egetTime()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setTimeInMillis(long)\"\u003e\u003ccode\u003esetTimeInMillis(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the current time as UTC milliseconds from the epoch."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "millis",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTimeInMillis",
      "comment": "Sets this Calendar\u0027s current time from the given long value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setTime(java.util.Date)\"\u003e\u003ccode\u003esetTime(Date)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getTimeInMillis()\"\u003e\u003ccode\u003egetTimeInMillis()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003emillis\u003c/code\u003e - the new time in UTC milliseconds from the epoch."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Returns the value of the given calendar field. In lenient mode, all calendar fields are normalized. In non-lenient mode, all calendar fields are validated and this method throws an exception if any calendar fields have out-of-range values. The normalization and validation are handled by the complete() method, which process is calendar system dependent.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int)\"\u003e\u003ccode\u003eset(int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#complete()\"\u003e\u003ccode\u003ecomplete()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the given calendar field."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the specified field is out of range (\n\u003ccode\u003efield \u0026lt; 0 || field \u0026gt;\u003d FIELD_COUNT\u003c/code\u003e)."
        ],
        "return": [
          "the value for the given calendar field."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "internalGet",
      "comment": "Returns the value of the given calendar field. This method does not involve normalization or validation of the field value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#get(int)\"\u003e\u003ccode\u003eget(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the given calendar field."
        ],
        "return": [
          "the value for the given calendar field."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "set",
      "comment": "Sets the given calendar field to the given value. The value is not interpreted by this method regardless of the leniency mode.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int,int)\"\u003e\u003ccode\u003eset(int,int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int,int,int,int)\"\u003e\u003ccode\u003eset(int,int,int,int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int,int,int,int,int)\"\u003e\u003ccode\u003eset(int,int,int,int,int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#get(int)\"\u003e\u003ccode\u003eget(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the given calendar field.",
          "\u003ccode\u003evalue\u003c/code\u003e - the value to be set for the given calendar field."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if the specified field is out of range (\n\u003ccode\u003efield \u0026lt; 0 || field \u0026gt;\u003d FIELD_COUNT\u003c/code\u003e). in non-lenient mode."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "year",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "date",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "set",
      "comment": "Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH. Previous values of other calendar fields are retained. If this is not desired, call clear() first.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int)\"\u003e\u003ccode\u003eset(int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int,int,int,int)\"\u003e\u003ccode\u003eset(int,int,int,int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int,int,int,int,int)\"\u003e\u003ccode\u003eset(int,int,int,int,int,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the value used to set the \n\u003ccode\u003eYEAR\u003c/code\u003e calendar field.",
          "\u003ccode\u003emonth\u003c/code\u003e - the value used to set the \n\u003ccode\u003eMONTH\u003c/code\u003e calendar field. Month value is 0-based. e.g., 0 for January.",
          "\u003ccode\u003edate\u003c/code\u003e - the value used to set the \n\u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e calendar field."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "year",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "date",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "hourOfDay",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "minute",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "set",
      "comment": "Sets the values for the calendar fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, and MINUTE. Previous values of other fields are retained. If this is not desired, call clear() first.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int)\"\u003e\u003ccode\u003eset(int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int,int)\"\u003e\u003ccode\u003eset(int,int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int,int,int,int,int)\"\u003e\u003ccode\u003eset(int,int,int,int,int,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the value used to set the \n\u003ccode\u003eYEAR\u003c/code\u003e calendar field.",
          "\u003ccode\u003emonth\u003c/code\u003e - the value used to set the \n\u003ccode\u003eMONTH\u003c/code\u003e calendar field. Month value is 0-based. e.g., 0 for January.",
          "\u003ccode\u003edate\u003c/code\u003e - the value used to set the \n\u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e calendar field.",
          "\u003ccode\u003ehourOfDay\u003c/code\u003e - the value used to set the \n\u003ccode\u003eHOUR_OF_DAY\u003c/code\u003e calendar field.",
          "\u003ccode\u003eminute\u003c/code\u003e - the value used to set the \n\u003ccode\u003eMINUTE\u003c/code\u003e calendar field."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "year",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "month",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "date",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "hourOfDay",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "minute",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "second",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "set",
      "comment": "Sets the values for the fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, and SECOND. Previous values of other fields are retained. If this is not desired, call clear() first.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int)\"\u003e\u003ccode\u003eset(int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int,int)\"\u003e\u003ccode\u003eset(int,int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int,int,int,int)\"\u003e\u003ccode\u003eset(int,int,int,int,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eyear\u003c/code\u003e - the value used to set the \n\u003ccode\u003eYEAR\u003c/code\u003e calendar field.",
          "\u003ccode\u003emonth\u003c/code\u003e - the value used to set the \n\u003ccode\u003eMONTH\u003c/code\u003e calendar field. Month value is 0-based. e.g., 0 for January.",
          "\u003ccode\u003edate\u003c/code\u003e - the value used to set the \n\u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e calendar field.",
          "\u003ccode\u003ehourOfDay\u003c/code\u003e - the value used to set the \n\u003ccode\u003eHOUR_OF_DAY\u003c/code\u003e calendar field.",
          "\u003ccode\u003eminute\u003c/code\u003e - the value used to set the \n\u003ccode\u003eMINUTE\u003c/code\u003e calendar field.",
          "\u003ccode\u003esecond\u003c/code\u003e - the value used to set the \n\u003ccode\u003eSECOND\u003c/code\u003e calendar field."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "clear",
      "comment": "Sets all the calendar field values and the time value (millisecond offset from the Epoch) of this Calendar undefined. This means that isSet() will return false for all the calendar fields, and the date and time calculations will treat the fields as if they had never been set. A Calendar implementation class may use its specific default field values for date/time calculations. For example, GregorianCalendar uses 1970 if the YEAR field value is undefined.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#clear(int)\"\u003e\u003ccode\u003eclear(int)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "clear",
      "comment": "Sets the given calendar field value and the time value (millisecond offset from the Epoch) of this Calendar undefined. This means that isSet(field) will return false, and the date and time calculations will treat the field as if it had never been set. A Calendar implementation class may use the field\u0027s specific default value for date and time calculations. The HOUR_OF_DAY, HOUR and AM_PM fields are handled independently and the the resolution rule for the time of day is applied. Clearing one of the fields doesn\u0027t reset the hour of day value of this Calendar. Use set(Calendar.HOUR_OF_DAY, 0) to reset the hour value.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#clear()\"\u003e\u003ccode\u003eclear()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field to be cleared."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isSet",
      "comment": "Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field to test"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given calendar field has a value set; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "style",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayName",
      "comment": "Returns the string representation of the calendar field value in the given style and locale. If no string representation is applicable, null is returned. This method calls get(field) to get the calendar field value if the string representation is applicable to the given calendar field. For example, if this Calendar is a GregorianCalendar and its date is 2005-01-01, then the string representation of the MONTH field would be \"January\" in the long style in an English locale or \"Jan\" in the short style. However, no string representation would be available for the DAY_OF_MONTH field, and this method would return null. The default implementation supports the calendar fields for which a DateFormatSymbols has names in the given locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field for which the string representation is returned",
          "\u003ccode\u003estyle\u003c/code\u003e - the style applied to the string representation; one of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_FORMAT\"\u003e\u003ccode\u003eSHORT_FORMAT\u003c/code\u003e\u003c/a\u003e (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT\"\u003e\u003ccode\u003eSHORT\u003c/code\u003e\u003c/a\u003e), \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_STANDALONE\"\u003e\u003ccode\u003eSHORT_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_FORMAT\"\u003e\u003ccode\u003eLONG_FORMAT\u003c/code\u003e\u003c/a\u003e (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG\"\u003e\u003ccode\u003eLONG\u003c/code\u003e\u003c/a\u003e), \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_STANDALONE\"\u003e\u003ccode\u003eLONG_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#NARROW_FORMAT\"\u003e\u003ccode\u003eNARROW_FORMAT\u003c/code\u003e\u003c/a\u003e, or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#NARROW_STANDALONE\"\u003e\u003ccode\u003eNARROW_STANDALONE\u003c/code\u003e\u003c/a\u003e.",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale for the string representation (any calendar types specified by \n\u003ccode\u003elocale\u003c/code\u003e are ignored)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efield\u003c/code\u003e or \n\u003ccode\u003estyle\u003c/code\u003e is invalid, or if this \n\u003ccode\u003eCalendar\u003c/code\u003e is non-lenient and any of the calendar fields have invalid values",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e is null"
        ],
        "return": [
          "the string representation of the given \n\u003ccode\u003efield\u003c/code\u003e in the given \n\u003ccode\u003estyle\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if no string representation is applicable."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "style",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayNames",
      "comment": "Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values. For example, if this Calendar is a GregorianCalendar, the returned map would contain \"Jan\" to JANUARY, \"Feb\" to FEBRUARY, and so on, in the short style in an English locale. Narrow names may not be unique due to use of single characters, such as \"S\" for Sunday and Saturday. In that case narrow names are not included in the returned Map. The values of other calendar fields may be taken into account to determine a set of display names. For example, if this Calendar is a lunisolar calendar system and the year value given by the YEAR field has a leap month, this method would return month names containing the leap month name, and month names are mapped to their values specific for the year. The default implementation supports display names contained in a DateFormatSymbols. For example, if field is MONTH and style is ALL_STYLES, this method returns a Map containing all strings returned by DateFormatSymbols.getShortMonths() and DateFormatSymbols.getMonths().",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field for which the display names are returned",
          "\u003ccode\u003estyle\u003c/code\u003e - the style applied to the string representation; one of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_FORMAT\"\u003e\u003ccode\u003eSHORT_FORMAT\u003c/code\u003e\u003c/a\u003e (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT\"\u003e\u003ccode\u003eSHORT\u003c/code\u003e\u003c/a\u003e), \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SHORT_STANDALONE\"\u003e\u003ccode\u003eSHORT_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_FORMAT\"\u003e\u003ccode\u003eLONG_FORMAT\u003c/code\u003e\u003c/a\u003e (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG\"\u003e\u003ccode\u003eLONG\u003c/code\u003e\u003c/a\u003e), \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#LONG_STANDALONE\"\u003e\u003ccode\u003eLONG_STANDALONE\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#NARROW_FORMAT\"\u003e\u003ccode\u003eNARROW_FORMAT\u003c/code\u003e\u003c/a\u003e, or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#NARROW_STANDALONE\"\u003e\u003ccode\u003eNARROW_STANDALONE\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale for the display names"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efield\u003c/code\u003e or \n\u003ccode\u003estyle\u003c/code\u003e is invalid, or if this \n\u003ccode\u003eCalendar\u003c/code\u003e is non-lenient and any of the calendar fields have invalid values",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e is null"
        ],
        "return": [
          "a \n\u003ccode\u003eMap\u003c/code\u003e containing all display names in \n\u003ccode\u003estyle\u003c/code\u003e and \n\u003ccode\u003elocale\u003c/code\u003e and their field values, or \n\u003ccode\u003enull\u003c/code\u003e if no display names are defined for \n\u003ccode\u003efield\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "complete",
      "comment": "Fills in any unset fields in the calendar fields. First, the computeTime() method is called if the time value (millisecond offset from the Epoch) has not been calculated from calendar field values. Then, the computeFields() method is called to calculate all calendar field values.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAvailableCalendarTypes",
      "comment": "Returns an unmodifiable Set containing all calendar types supported by Calendar in the runtime environment. The available calendar types can be used for the Unicode locale extensions. The Set returned contains at least \"gregory\". The calendar types don\u0027t include aliases, such as \"gregorian\" for \"gregory\".",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getCalendarType()\"\u003e\u003ccode\u003egetCalendarType()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.Builder.html#setCalendarType(java.lang.String)\"\u003e\u003ccode\u003eCalendar.Builder.setCalendarType(String)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getUnicodeLocaleType(java.lang.String)\"\u003e\u003ccode\u003eLocale.getUnicodeLocaleType(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an unmodifiable \n\u003ccode\u003eSet\u003c/code\u003e containing all available calendar types"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCalendarType",
      "comment": "Returns the calendar type of this Calendar. Calendar types are defined by the Unicode Locale Data Markup Language (LDML) specification. The default implementation of this method returns the class name of this Calendar instance. Any subclasses that implement LDML-defined calendar systems should override this method to return appropriate calendar types.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#def_extensions\"\u003eLocale extensions\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Builder.html#setLocale(java.util.Locale)\"\u003e\u003ccode\u003eLocale.Builder.setLocale(Locale)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.Builder.html#setUnicodeLocaleKeyword(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003eLocale.Builder.setUnicodeLocaleKeyword(String, String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the LDML-defined calendar type or the class name of this \n\u003ccode\u003eCalendar\u003c/code\u003e instance"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Compares this Calendar to the specified Object. The result is true if and only if the argument is a Calendar object of the same calendar system that represents the same time value (millisecond offset from the Epoch) under the same Calendar parameters as this object. The Calendar parameters are the values represented by the isLenient, getFirstDayOfWeek, getMinimalDaysInFirstWeek and getTimeZone methods. If there is any difference in those parameters between the two Calendars, this method returns false. Use the compareTo method to compare only the time values.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to compare with."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this object is equal to \n\u003ccode\u003eobj\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns a hash code for this calendar.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "when",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "before",
      "comment": "Returns whether this Calendar represents a time before the time represented by the specified Object. This method is equivalent to: \n         compareTo(when) \u003c 0\n if and only if when is a Calendar instance. Otherwise, the method returns false.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#compareTo(java.util.Calendar)\"\u003e\u003ccode\u003ecompareTo(Calendar)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ewhen\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e to be compared"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the time of this \n\u003ccode\u003eCalendar\u003c/code\u003e is before the time represented by \n\u003ccode\u003ewhen\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "when",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "after",
      "comment": "Returns whether this Calendar represents a time after the time represented by the specified Object. This method is equivalent to: \n         compareTo(when) \u003e 0\n if and only if when is a Calendar instance. Otherwise, the method returns false.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#compareTo(java.util.Calendar)\"\u003e\u003ccode\u003ecompareTo(Calendar)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ewhen\u003c/code\u003e - the \n\u003ccode\u003eObject\u003c/code\u003e to be compared"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the time of this \n\u003ccode\u003eCalendar\u003c/code\u003e is after the time represented by \n\u003ccode\u003ewhen\u003c/code\u003e; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Calendar",
            "type": "Class"
          },
          "name": "anotherCalendar",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares the time values (millisecond offsets from the Epoch) represented by two Calendar objects.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html\" title\u003d\"class in java.util\"\u003eCalendar\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eanotherCalendar\u003c/code\u003e - the \n\u003ccode\u003eCalendar\u003c/code\u003e to be compared."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003eCalendar\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the time value of the specified \n\u003ccode\u003eCalendar\u003c/code\u003e object can\u0027t be obtained due to any invalid calendar values."
        ],
        "return": [
          "the value \n\u003ccode\u003e0\u003c/code\u003e if the time represented by the argument is equal to the time represented by this \n\u003ccode\u003eCalendar\u003c/code\u003e; a value less than \n\u003ccode\u003e0\u003c/code\u003e if the time of this \n\u003ccode\u003eCalendar\u003c/code\u003e is before the time represented by the argument; and a value greater than \n\u003ccode\u003e0\u003c/code\u003e if the time of this \n\u003ccode\u003eCalendar\u003c/code\u003e is after the time represented by the argument."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "amount",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "add",
      "comment": "Adds or subtracts the specified amount of time to the given calendar field, based on the calendar\u0027s rules. For example, to subtract 5 days from the current time of the calendar, you can achieve it by calling: add(Calendar.DAY_OF_MONTH, -5).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#roll(int,int)\"\u003e\u003ccode\u003eroll(int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int)\"\u003e\u003ccode\u003eset(int,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field.",
          "\u003ccode\u003eamount\u003c/code\u003e - the amount of date or time to be added to the field."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "up",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "roll",
      "comment": "Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields. For example, to roll the current date up by one day, you can achieve it by calling: roll(Calendar.DATE, true). When rolling on the year or Calendar.YEAR field, it will roll the year value in the range between 1 and the value returned by calling getMaximum(Calendar.YEAR). When rolling on the month or Calendar.MONTH field, other fields like date might conflict and, need to be changed. For instance, rolling the month on the date 01/31/96 will result in 02/29/96. When rolling on the hour-in-day or Calendar.HOUR_OF_DAY field, it will roll the hour value in the range between 0 and 23, which is zero-based.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#add(int,int)\"\u003e\u003ccode\u003eadd(int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int)\"\u003e\u003ccode\u003eset(int,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the time field.",
          "\u003ccode\u003eup\u003c/code\u003e - indicates if the value of the specified time field is to be rolled up or rolled down. Use true if rolling up, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "amount",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "roll",
      "comment": "Adds the specified (signed) amount to the specified calendar field without changing larger fields. A negative amount means to roll down. NOTE: This default implementation on Calendar just repeatedly calls the version of roll() that rolls by one unit. This may not always do the right thing. For example, if the DAY_OF_MONTH field is 31, rolling through February will leave it set to 28. The GregorianCalendar version of this function takes care of this problem. Other subclasses should also provide overrides of this function that do the right thing.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#roll(int,boolean)\"\u003e\u003ccode\u003eroll(int,boolean)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#add(int,int)\"\u003e\u003ccode\u003eadd(int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#set(int,int)\"\u003e\u003ccode\u003eset(int,int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field.",
          "\u003ccode\u003eamount\u003c/code\u003e - the signed amount to add to the calendar \n\u003ccode\u003efield\u003c/code\u003e."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.TimeZone",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setTimeZone",
      "comment": "Sets the time zone with the given time zone value.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the given time zone."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.TimeZone",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTimeZone",
      "comment": "Gets the time zone.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the time zone object associated with this calendar."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "lenient",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLenient",
      "comment": "Specifies whether or not date/time interpretation is to be lenient. With lenient interpretation, a date such as \"February 942, 1996\" will be treated as being equivalent to the 941st day after February 1, 1996. With strict (non-lenient) interpretation, such dates will cause an exception to be thrown. The default is lenient.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#isLenient()\"\u003e\u003ccode\u003eisLenient()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html#setLenient(boolean)\"\u003e\u003ccode\u003eDateFormat.setLenient(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elenient\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the lenient mode is to be turned on; \n\u003ccode\u003efalse\u003c/code\u003e if it is to be turned off."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isLenient",
      "comment": "Tells whether date/time interpretation is to be lenient.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setLenient(boolean)\"\u003e\u003ccode\u003esetLenient(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the interpretation mode of this calendar is lenient; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setFirstDayOfWeek",
      "comment": "Sets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getFirstDayOfWeek()\"\u003e\u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimalDaysInFirstWeek()\"\u003e\u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the given first day of the week."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFirstDayOfWeek",
      "comment": "Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setFirstDayOfWeek(int)\"\u003e\u003ccode\u003esetFirstDayOfWeek(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimalDaysInFirstWeek()\"\u003e\u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the first day of the week."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "value",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMinimalDaysInFirstWeek",
      "comment": "Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1. If it must be a full week, use value 7.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimalDaysInFirstWeek()\"\u003e\u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the given minimal days required in the first week of the year."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMinimalDaysInFirstWeek",
      "comment": "Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1. If the minimal days required must be a full week, this method returns 7.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setMinimalDaysInFirstWeek(int)\"\u003e\u003ccode\u003esetMinimalDaysInFirstWeek(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the minimal days required in the first week of the year."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isWeekDateSupported",
      "comment": "Returns whether this Calendar supports week dates. The default implementation of this method returns false.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getWeekYear()\"\u003e\u003ccode\u003egetWeekYear()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#setWeekDate(int,int,int)\"\u003e\u003ccode\u003esetWeekDate(int,int,int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getWeeksInWeekYear()\"\u003e\u003ccode\u003egetWeeksInWeekYear()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this \n\u003ccode\u003eCalendar\u003c/code\u003e supports week dates; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWeekYear",
      "comment": "Returns the week year represented by this Calendar. The week year is in sync with the week cycle. The first day of the first week is the first day of the week year. The default implementation of this method throws an UnsupportedOperationException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#isWeekDateSupported()\"\u003e\u003ccode\u003eisWeekDateSupported()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getFirstDayOfWeek()\"\u003e\u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimalDaysInFirstWeek()\"\u003e\u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if any week year numbering isn\u0027t supported in this \n\u003ccode\u003eCalendar\u003c/code\u003e."
        ],
        "return": [
          "the week year of this \n\u003ccode\u003eCalendar\u003c/code\u003e"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "weekYear",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "weekOfYear",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "dayOfWeek",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setWeekDate",
      "comment": "Sets the date of this Calendar with the given date specifiers - week year, week of year, and day of week. Unlike the set method, all of the calendar fields and time values are calculated upon return. If weekOfYear is out of the valid week-of-year range in weekYear, the weekYear and weekOfYear values are adjusted in lenient mode, or an IllegalArgumentException is thrown in non-lenient mode. The default implementation of this method throws an UnsupportedOperationException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#isWeekDateSupported()\"\u003e\u003ccode\u003eisWeekDateSupported()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getFirstDayOfWeek()\"\u003e\u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimalDaysInFirstWeek()\"\u003e\u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eweekYear\u003c/code\u003e - the week year",
          "\u003ccode\u003eweekOfYear\u003c/code\u003e - the week number based on \n\u003ccode\u003eweekYear\u003c/code\u003e",
          "\u003ccode\u003edayOfWeek\u003c/code\u003e - the day of week value: one of the constants for the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#DAY_OF_WEEK\"\u003e\u003ccode\u003eDAY_OF_WEEK\u003c/code\u003e\u003c/a\u003e field: \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SUNDAY\"\u003e\u003ccode\u003eSUNDAY\u003c/code\u003e\u003c/a\u003e, ..., \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#SATURDAY\"\u003e\u003ccode\u003eSATURDAY\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if any of the given date specifiers is invalid or any of the calendar fields are inconsistent with the given date specifiers in non-lenient mode",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if any week year numbering isn\u0027t supported in this \n\u003ccode\u003eCalendar\u003c/code\u003e."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getWeeksInWeekYear",
      "comment": "Returns the number of weeks in the week year represented by this Calendar. The default implementation of this method throws an UnsupportedOperationException.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#WEEK_OF_YEAR\"\u003e\u003ccode\u003eWEEK_OF_YEAR\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#isWeekDateSupported()\"\u003e\u003ccode\u003eisWeekDateSupported()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getWeekYear()\"\u003e\u003ccode\u003egetWeekYear()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getActualMaximum(int)\"\u003e\u003ccode\u003egetActualMaximum(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if any week year numbering isn\u0027t supported in this \n\u003ccode\u003eCalendar\u003c/code\u003e."
        ],
        "return": [
          "the number of weeks in the week year."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getMinimum",
      "comment": "Returns the minimum value for the given calendar field of this Calendar instance. The minimum value is defined as the smallest value returned by the get method for any possible time value. The minimum value depends on calendar system specific parameters of the instance.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMaximum(int)\"\u003e\u003ccode\u003egetMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getGreatestMinimum(int)\"\u003e\u003ccode\u003egetGreatestMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getLeastMaximum(int)\"\u003e\u003ccode\u003egetLeastMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getActualMinimum(int)\"\u003e\u003ccode\u003egetActualMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getActualMaximum(int)\"\u003e\u003ccode\u003egetActualMaximum(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field."
        ],
        "return": [
          "the minimum value for the given calendar field."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getMaximum",
      "comment": "Returns the maximum value for the given calendar field of this Calendar instance. The maximum value is defined as the largest value returned by the get method for any possible time value. The maximum value depends on calendar system specific parameters of the instance.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimum(int)\"\u003e\u003ccode\u003egetMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getGreatestMinimum(int)\"\u003e\u003ccode\u003egetGreatestMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getLeastMaximum(int)\"\u003e\u003ccode\u003egetLeastMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getActualMinimum(int)\"\u003e\u003ccode\u003egetActualMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getActualMaximum(int)\"\u003e\u003ccode\u003egetActualMaximum(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field."
        ],
        "return": [
          "the maximum value for the given calendar field."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getGreatestMinimum",
      "comment": "Returns the highest minimum value for the given calendar field of this Calendar instance. The highest minimum value is defined as the largest value returned by getActualMinimum(int) for any possible time value. The greatest minimum value depends on calendar system specific parameters of the instance.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimum(int)\"\u003e\u003ccode\u003egetMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMaximum(int)\"\u003e\u003ccode\u003egetMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getLeastMaximum(int)\"\u003e\u003ccode\u003egetLeastMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getActualMinimum(int)\"\u003e\u003ccode\u003egetActualMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getActualMaximum(int)\"\u003e\u003ccode\u003egetActualMaximum(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field."
        ],
        "return": [
          "the highest minimum value for the given calendar field."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getLeastMaximum",
      "comment": "Returns the lowest maximum value for the given calendar field of this Calendar instance. The lowest maximum value is defined as the smallest value returned by getActualMaximum(int) for any possible time value. The least maximum value depends on calendar system specific parameters of the instance. For example, a Calendar for the Gregorian calendar system returns 28 for the DAY_OF_MONTH field, because the 28th is the last day of the shortest month of this calendar, February in a common year.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimum(int)\"\u003e\u003ccode\u003egetMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMaximum(int)\"\u003e\u003ccode\u003egetMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getGreatestMinimum(int)\"\u003e\u003ccode\u003egetGreatestMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getActualMinimum(int)\"\u003e\u003ccode\u003egetActualMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getActualMaximum(int)\"\u003e\u003ccode\u003egetActualMaximum(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field."
        ],
        "return": [
          "the lowest maximum value for the given calendar field."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActualMinimum",
      "comment": "Returns the minimum value that the specified calendar field could have, given the time value of this Calendar. The default implementation of this method uses an iterative algorithm to determine the actual minimum value for the calendar field. Subclasses should, if possible, override this with a more efficient implementation - in many cases, they can simply return getMinimum().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimum(int)\"\u003e\u003ccode\u003egetMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMaximum(int)\"\u003e\u003ccode\u003egetMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getGreatestMinimum(int)\"\u003e\u003ccode\u003egetGreatestMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getLeastMaximum(int)\"\u003e\u003ccode\u003egetLeastMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getActualMaximum(int)\"\u003e\u003ccode\u003egetActualMaximum(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field"
        ],
        "return": [
          "the minimum of the given calendar field for the time value of this \n\u003ccode\u003eCalendar\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "field",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActualMaximum",
      "comment": "Returns the maximum value that the specified calendar field could have, given the time value of this Calendar. For example, the actual maximum value of the MONTH field is 12 in some years, and 13 in other years in the Hebrew calendar system. The default implementation of this method uses an iterative algorithm to determine the actual maximum value for the calendar field. Subclasses should, if possible, override this with a more efficient implementation.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMinimum(int)\"\u003e\u003ccode\u003egetMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getMaximum(int)\"\u003e\u003ccode\u003egetMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getGreatestMinimum(int)\"\u003e\u003ccode\u003egetGreatestMinimum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getLeastMaximum(int)\"\u003e\u003ccode\u003egetLeastMaximum(int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Calendar.html#getActualMinimum(int)\"\u003e\u003ccode\u003egetActualMinimum(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efield\u003c/code\u003e - the calendar field"
        ],
        "return": [
          "the maximum of the given calendar field for the time value of this \n\u003ccode\u003eCalendar\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Creates and returns a copy of this object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a copy of this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Return a string representation of this calendar. This method is intended to be used only for debugging purposes, and the format of the returned string may vary between implementations. The returned string may be empty but may not be null.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of this calendar."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Instant",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "toInstant",
      "comment": "Converts this object to an Instant. The conversion creates an Instant that represents the same point on the time-line as this Calendar.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the instant representing the same point on the time-line"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a Calendar with the default time zone and the default FORMAT locale.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html#getDefault()\"\u003e\u003ccode\u003eTimeZone.getDefault()\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.TimeZone",
            "type": "Class"
          },
          "name": "zone",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "aLocale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructs a calendar with the specified time zone and locale.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ezone\u003c/code\u003e - the time zone to use",
          "\u003ccode\u003eaLocale\u003c/code\u003e - the locale for the week data"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.Calendar$Builder"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.Calendar",
  "comment": "The \n\u003ccode\u003eCalendar\u003c/code\u003e class is an abstract class that provides methods for converting between a specific instant in time and a set of \n\u003ca href\u003d\"#fields\"\u003e\u003ccode\u003ecalendar fields\u003c/code\u003e\u003c/a\u003e such as \n\u003ccode\u003eYEAR\u003c/code\u003e, \n\u003ccode\u003eMONTH\u003c/code\u003e, \n\u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e, \n\u003ccode\u003eHOUR\u003c/code\u003e, and so on, and for manipulating the calendar fields, such as getting the date of the next week. An instant in time can be represented by a millisecond value that is an offset from the \n\u003ca id\u003d\"Epoch\"\u003e\u003cem\u003eEpoch\u003c/em\u003e\u003c/a\u003e, January 1, 1970 00:00:00.000 GMT (Gregorian). \n\u003cp\u003eThe class also provides additional fields and methods for implementing a concrete calendar system outside the package. Those fields and methods are defined as \u003ccode\u003eprotected\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Like other locale-sensitive classes, \u003ccode\u003eCalendar\u003c/code\u003e provides a class method, \u003ccode\u003egetInstance\u003c/code\u003e, for getting a generally useful object of this type. \u003ccode\u003eCalendar\u003c/code\u003e\u0027s \u003ccode\u003egetInstance\u003c/code\u003e method returns a \u003ccode\u003eCalendar\u003c/code\u003e object whose calendar fields have been initialized with the current date and time: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e     Calendar rightNow \u003d Calendar.getInstance();\n \u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eCalendar\u003c/code\u003e object can produce all the calendar field values needed to implement the date-time formatting for a particular language and calendar style (for example, Japanese-Gregorian, Japanese-Traditional). \u003ccode\u003eCalendar\u003c/code\u003e defines the range of values returned by certain calendar fields, as well as their meaning. For example, the first month of the calendar system has value \u003ccode\u003eMONTH \u003d\u003d JANUARY\u003c/code\u003e for all calendars. Other values are defined by the concrete subclass, such as \u003ccode\u003eERA\u003c/code\u003e. See individual field documentation and subclass documentation for details. \u003c/p\u003e\n\u003ch2\u003eGetting and Setting Calendar Field Values\u003c/h2\u003e \n\u003cp\u003eThe calendar field values can be set by calling the \u003ccode\u003eset\u003c/code\u003e methods. Any field values set in a \u003ccode\u003eCalendar\u003c/code\u003e will not be interpreted until it needs to calculate its time value (milliseconds from the Epoch) or values of the calendar fields. Calling the \u003ccode\u003eget\u003c/code\u003e, \u003ccode\u003egetTimeInMillis\u003c/code\u003e, \u003ccode\u003egetTime\u003c/code\u003e, \u003ccode\u003eadd\u003c/code\u003e and \u003ccode\u003eroll\u003c/code\u003e involves such calculation. \u003c/p\u003e\n\u003ch3\u003eLeniency\u003c/h3\u003e \n\u003cp\u003e\u003ccode\u003eCalendar\u003c/code\u003e has two modes for interpreting the calendar fields, \u003cem\u003elenient\u003c/em\u003e and \u003cem\u003enon-lenient\u003c/em\u003e. When a \u003ccode\u003eCalendar\u003c/code\u003e is in lenient mode, it accepts a wider range of calendar field values than it produces. When a \u003ccode\u003eCalendar\u003c/code\u003e recomputes calendar field values for return by \u003ccode\u003eget()\u003c/code\u003e, all of the calendar fields are normalized. For example, a lenient \u003ccode\u003eGregorianCalendar\u003c/code\u003e interprets \u003ccode\u003eMONTH \u003d\u003d JANUARY\u003c/code\u003e, \u003ccode\u003eDAY_OF_MONTH \u003d\u003d 32\u003c/code\u003e as February 1. \u003c/p\u003e\n\u003cp\u003eWhen a \u003ccode\u003eCalendar\u003c/code\u003e is in non-lenient mode, it throws an exception if there is any inconsistency in its calendar fields. For example, a \u003ccode\u003eGregorianCalendar\u003c/code\u003e always produces \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e values between 1 and the length of the month. A non-lenient \u003ccode\u003eGregorianCalendar\u003c/code\u003e throws an exception upon calculating its time or calendar field values if any out-of-range field value has been set. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"first_week\"\u003eFirst Week\u003c/a\u003e\u003c/h3\u003e \n\u003ccode\u003eCalendar\u003c/code\u003e defines a locale-specific seven day week using two parameters: the first day of the week and the minimal days in first week (from 1 to 7). These numbers are taken from the locale resource data or the locale itself when a \n\u003ccode\u003eCalendar\u003c/code\u003e is constructed. If the designated locale contains \"fw\" and/or \"rg\" \n\u003ca href\u003d\"./Locale.html#def_locale_extension\"\u003e Unicode extensions\u003c/a\u003e, the first day of the week will be obtained according to those extensions. If both \"fw\" and \"rg\" are specified, the value from the \"fw\" extension supersedes the implicit one from the \"rg\" extension. They may also be specified explicitly through the methods for setting their values. \n\u003cp\u003eWhen setting or getting the \u003ccode\u003eWEEK_OF_MONTH\u003c/code\u003e or \u003ccode\u003eWEEK_OF_YEAR\u003c/code\u003e fields, \u003ccode\u003eCalendar\u003c/code\u003e must determine the first week of the month or year as a reference point. The first week of a month or year is defined as the earliest seven day period beginning on \u003ccode\u003egetFirstDayOfWeek()\u003c/code\u003e and containing at least \u003ccode\u003egetMinimalDaysInFirstWeek()\u003c/code\u003e days of that month or year. Weeks numbered ..., -1, 0 precede the first week; weeks numbered 2, 3,... follow it. Note that the normalized numbering returned by \u003ccode\u003eget()\u003c/code\u003e may be different. For example, a specific \u003ccode\u003eCalendar\u003c/code\u003e subclass may designate the week before week 1 of a year as week \u003ccode\u003e\u003ci\u003en\u003c/i\u003e\u003c/code\u003e of the previous year. \u003c/p\u003e\n\u003ch3\u003eCalendar Fields Resolution\u003c/h3\u003e When computing a date and time from the calendar fields, there may be insufficient information for the computation (such as only year and month with no day of month), or there may be inconsistent information (such as Tuesday, July 15, 1996 (Gregorian) -- July 15, 1996 is actually a Monday). \n\u003ccode\u003eCalendar\u003c/code\u003e will resolve calendar field values to determine the date and time in the following way. \n\u003cp\u003e\u003ca id\u003d\"resolution\"\u003eIf there is any conflict in calendar field values, \u003ccode\u003eCalendar\u003c/code\u003e gives priorities to calendar fields that have been set more recently.\u003c/a\u003e The following are the default combinations of the calendar fields. The most recent combination, as determined by the most recently set single field, will be used. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"date_resolution\"\u003eFor the date fields\u003c/a\u003e: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e YEAR + MONTH + DAY_OF_MONTH\n YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK\n YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK\n YEAR + DAY_OF_YEAR\n YEAR + DAY_OF_WEEK + WEEK_OF_YEAR\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003ca id\u003d\"time_resolution\"\u003eFor the time of day fields\u003c/a\u003e: \n\u003cblockquote\u003e \n \u003cpre\u003e HOUR_OF_DAY\n AM_PM + HOUR\n \u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIf there are any calendar fields whose values haven\u0027t been set in the selected field combination, \u003ccode\u003eCalendar\u003c/code\u003e uses their default values. The default value of each field may vary by concrete calendar systems. For example, in \u003ccode\u003eGregorianCalendar\u003c/code\u003e, the default of a field is the same as that of the start of the Epoch: i.e., \u003ccode\u003eYEAR \u003d 1970\u003c/code\u003e, \u003ccode\u003eMONTH \u003d JANUARY\u003c/code\u003e, \u003ccode\u003eDAY_OF_MONTH \u003d 1\u003c/code\u003e, etc. \u003c/p\u003e\n\u003cp\u003e \u003cstrong\u003eNote:\u003c/strong\u003e There are certain possible ambiguities in interpretation of certain singular times, which are resolved in the following ways: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e 23:59 is the last minute of the day and 00:00 is the first minute of the next day. Thus, 23:59 on Dec 31, 1999 \u0026lt; 00:00 on Jan 1, 2000 \u0026lt; 00:01 on Jan 1, 2000. \u003c/li\u003e\n \u003cli\u003e Although historically not precise, midnight also belongs to \"am\", and noon belongs to \"pm\", so on the same day, 12:00 am (midnight) \u0026lt; 12:01 am, and 12:00 pm (noon) \u0026lt; 12:01 pm \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The date or time format strings are not part of the definition of a calendar, as those must be modifiable or overridable by the user at runtime. Use \u003ca href\u003d\"../text/DateFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDateFormat\u003c/code\u003e\u003c/a\u003e to format dates. \u003c/p\u003e\n\u003ch3\u003eField Manipulation\u003c/h3\u003e The calendar fields can be changed using three methods: \n\u003ccode\u003eset()\u003c/code\u003e, \n\u003ccode\u003eadd()\u003c/code\u003e, and \n\u003ccode\u003eroll()\u003c/code\u003e. \n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eset(f, value)\u003c/code\u003e\u003c/strong\u003e changes calendar field \u003ccode\u003ef\u003c/code\u003e to \u003ccode\u003evalue\u003c/code\u003e. In addition, it sets an internal member variable to indicate that calendar field \u003ccode\u003ef\u003c/code\u003e has been changed. Although calendar field \u003ccode\u003ef\u003c/code\u003e is changed immediately, the calendar\u0027s time value in milliseconds is not recomputed until the next call to \u003ccode\u003eget()\u003c/code\u003e, \u003ccode\u003egetTime()\u003c/code\u003e, \u003ccode\u003egetTimeInMillis()\u003c/code\u003e, \u003ccode\u003eadd()\u003c/code\u003e, or \u003ccode\u003eroll()\u003c/code\u003e is made. Thus, multiple calls to \u003ccode\u003eset()\u003c/code\u003e do not trigger multiple, unnecessary computations. As a result of changing a calendar field using \u003ccode\u003eset()\u003c/code\u003e, other calendar fields may also change, depending on the calendar field, the calendar field value, and the calendar system. In addition, \u003ccode\u003eget(f)\u003c/code\u003e will not necessarily return \u003ccode\u003evalue\u003c/code\u003e set by the call to the \u003ccode\u003eset\u003c/code\u003e method after the calendar fields have been recomputed. The specifics are determined by the concrete calendar class.\u003c/p\u003e \n\u003cp\u003e\u003cem\u003eExample\u003c/em\u003e: Consider a \u003ccode\u003eGregorianCalendar\u003c/code\u003e originally set to August 31, 1999. Calling \u003ccode\u003eset(Calendar.MONTH, Calendar.SEPTEMBER)\u003c/code\u003e sets the date to September 31, 1999. This is a temporary internal representation that resolves to October 1, 1999 if \u003ccode\u003egetTime()\u003c/code\u003e is then called. However, a call to \u003ccode\u003eset(Calendar.DAY_OF_MONTH, 30)\u003c/code\u003e before the call to \u003ccode\u003egetTime()\u003c/code\u003e sets the date to September 30, 1999, since no recomputation occurs after \u003ccode\u003eset()\u003c/code\u003e itself.\u003c/p\u003e \n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eadd(f, delta)\u003c/code\u003e\u003c/strong\u003e adds \u003ccode\u003edelta\u003c/code\u003e to field \u003ccode\u003ef\u003c/code\u003e. This is equivalent to calling \u003ccode\u003eset(f, get(f) + delta)\u003c/code\u003e with two adjustments:\u003c/p\u003e \n\u003cblockquote\u003e \n \u003cp\u003e\u003cstrong\u003eAdd rule 1\u003c/strong\u003e. The value of field \u003ccode\u003ef\u003c/code\u003e after the call minus the value of field \u003ccode\u003ef\u003c/code\u003e before the call is \u003ccode\u003edelta\u003c/code\u003e, modulo any overflow that has occurred in field \u003ccode\u003ef\u003c/code\u003e. Overflow occurs when a field value exceeds its range and, as a result, the next larger field is incremented or decremented and the field value is adjusted back into its range.\u003c/p\u003e \n \u003cp\u003e\u003cstrong\u003eAdd rule 2\u003c/strong\u003e. If a smaller field is expected to be invariant, but it is impossible for it to be equal to its prior value because of changes in its minimum or maximum after field \u003ccode\u003ef\u003c/code\u003e is changed or other constraints, such as time zone offset changes, then its value is adjusted to be as close as possible to its expected value. A smaller field represents a smaller unit of time. \u003ccode\u003eHOUR\u003c/code\u003e is a smaller field than \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e. No adjustment is made to smaller fields that are not expected to be invariant. The calendar system determines what fields are expected to be invariant.\u003c/p\u003e \n\u003c/blockquote\u003e \n\u003cp\u003eIn addition, unlike \u003ccode\u003eset()\u003c/code\u003e, \u003ccode\u003eadd()\u003c/code\u003e forces an immediate recomputation of the calendar\u0027s milliseconds and all fields.\u003c/p\u003e \n\u003cp\u003e\u003cem\u003eExample\u003c/em\u003e: Consider a \u003ccode\u003eGregorianCalendar\u003c/code\u003e originally set to August 31, 1999. Calling \u003ccode\u003eadd(Calendar.MONTH, 13)\u003c/code\u003e sets the calendar to September 30, 2000. \u003cstrong\u003eAdd rule 1\u003c/strong\u003e sets the \u003ccode\u003eMONTH\u003c/code\u003e field to September, since adding 13 months to August gives September of the next year. Since \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e cannot be 31 in September in a \u003ccode\u003eGregorianCalendar\u003c/code\u003e, \u003cstrong\u003eadd rule 2\u003c/strong\u003e sets the \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e to 30, the closest possible value. Although it is a smaller field, \u003ccode\u003eDAY_OF_WEEK\u003c/code\u003e is not adjusted by rule 2, since it is expected to change when the month changes in a \u003ccode\u003eGregorianCalendar\u003c/code\u003e.\u003c/p\u003e \n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eroll(f, delta)\u003c/code\u003e\u003c/strong\u003e adds \u003ccode\u003edelta\u003c/code\u003e to field \u003ccode\u003ef\u003c/code\u003e without changing larger fields. This is equivalent to calling \u003ccode\u003eadd(f, delta)\u003c/code\u003e with the following adjustment:\u003c/p\u003e \n\u003cblockquote\u003e \n \u003cp\u003e\u003cstrong\u003eRoll rule\u003c/strong\u003e. Larger fields are unchanged after the call. A larger field represents a larger unit of time. \u003ccode\u003eDAY_OF_MONTH\u003c/code\u003e is a larger field than \u003ccode\u003eHOUR\u003c/code\u003e.\u003c/p\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003cem\u003eExample\u003c/em\u003e: See \u003ca href\u003d\"GregorianCalendar.html#roll(int,int)\"\u003e\u003ccode\u003eGregorianCalendar.roll(int, int)\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUsage model\u003c/strong\u003e. To motivate the behavior of \u003ccode\u003eadd()\u003c/code\u003e and \u003ccode\u003eroll()\u003c/code\u003e, consider a user interface component with increment and decrement buttons for the month, day, and year, and an underlying \u003ccode\u003eGregorianCalendar\u003c/code\u003e. If the interface reads January 31, 1999 and the user presses the month increment button, what should it read? If the underlying implementation uses \u003ccode\u003eset()\u003c/code\u003e, it might read March 3, 1999. A better result would be February 28, 1999. Furthermore, if the user presses the month increment button again, it should read March 31, 1999, not March 28, 1999. By saving the original date and using either \u003ccode\u003eadd()\u003c/code\u003e or \u003ccode\u003eroll()\u003c/code\u003e, depending on whether larger fields should be affected, the user interface can behave as most users will intuitively expect.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#currentTimeMillis()\"\u003e\u003ccode\u003eSystem.currentTimeMillis()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Date.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eDate\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/GregorianCalendar.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eGregorianCalendar\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TimeZone.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTimeZone\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/text/DateFormat.html\" title\u003d\"class in java.text\"\u003e\u003ccode\u003eDateFormat\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.Calendar\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}