{
  "packageName": "java.util",
  "simpleName": "Collection",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Iterable",
    "parameters": [
      {
        "name": "E",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "size",
      "comment": "Returns the number of elements in this collection. If this collection contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of elements in this collection"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isEmpty",
      "comment": "Returns true if this collection contains no elements.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this collection contains no elements"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "contains",
      "comment": "Returns true if this collection contains the specified element. More formally, returns true if and only if this collection contains at least one element e such that Objects.equals(o, e).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - element whose presence in this collection is to be tested"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the type of the specified element is incompatible with this collection (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this collection does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this collection contains the specified element"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "owner": "java.util.Collection",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "iterator",
      "comment": "Returns an iterator over the elements in this collection. There are no guarantees concerning the order in which the elements are returned (unless this collection is an instance of some class that provides a guarantee).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html#iterator()\"\u003eiterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html\" title\u003d\"interface in java.lang\"\u003eIterable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"type parameter in Collection\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "an \n\u003ccode\u003eIterator\u003c/code\u003e over the elements in this collection"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toArray",
      "comment": "Returns an array containing all of the elements in this collection. If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. The returned array\u0027s runtime component type is Object. The returned array will be \"safe\" in that no references to it are maintained by this collection. (In other words, this method must allocate a new array even if this collection is backed by an array). The caller is thus free to modify the returned array.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "This method acts as a bridge between array-based and collection-based APIs. It returns an array whose runtime type is \n\u003ccode\u003eObject[]\u003c/code\u003e. Use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#toArray(T%5B%5D)\"\u003e\u003ccode\u003etoArray(T[])\u003c/code\u003e\u003c/a\u003e to reuse an existing array, or use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#toArray(java.util.function.IntFunction)\"\u003e\u003ccode\u003etoArray(IntFunction)\u003c/code\u003e\u003c/a\u003e to control the runtime type of the array."
        ],
        "return": [
          "an array, whose \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#getComponentType()\"\u003eruntime component type\u003c/a\u003e is \n\u003ccode\u003eObject\u003c/code\u003e, containing all of the elements in this collection"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "T",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "a",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toArray",
      "comment": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this collection. If this collection fits in the specified array with room to spare (i.e., the array has more elements than this collection), the element in the array immediately following the end of the collection is set to null. (This is useful in determining the length of this collection only if the caller knows that this collection does not contain any null elements.) If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the component type of the array to contain the collection"
        ],
        "apiNote": [
          "This method acts as a bridge between array-based and collection-based APIs. It allows an existing array to be reused under certain circumstances. Use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#toArray()\"\u003e\u003ccode\u003etoArray()\u003c/code\u003e\u003c/a\u003e to create an array whose runtime type is \n\u003ccode\u003eObject[]\u003c/code\u003e, or use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#toArray(java.util.function.IntFunction)\"\u003e\u003ccode\u003etoArray(IntFunction)\u003c/code\u003e\u003c/a\u003e to control the runtime type of the array. \n\u003cp\u003eSuppose \u003ccode\u003ex\u003c/code\u003e is a collection known to contain only strings. The following code can be used to dump the collection into a previously allocated \u003ccode\u003eString\u003c/code\u003e array: \u003c/p\u003e\n\u003cpre\u003e     String[] y \u003d new String[SIZE];\n     ...\n     y \u003d x.toArray(y);\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe return value is reassigned to the variable \u003ccode\u003ey\u003c/code\u003e, because a new array will be allocated and returned if the collection \u003ccode\u003ex\u003c/code\u003e has too many elements to fit into the existing array \u003ccode\u003ey\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eNote that \u003ccode\u003etoArray(new Object[0])\u003c/code\u003e is identical in function to \u003ccode\u003etoArray()\u003c/code\u003e.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003ea\u003c/code\u003e - the array into which the elements of this collection are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayStoreException.html\" title\u003d\"class in java.lang\"\u003eArrayStoreException\u003c/a\u003e\u003c/code\u003e - if the runtime type of any element in this collection is not assignable to the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#getComponentType()\"\u003eruntime component type\u003c/a\u003e of the specified array",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified array is null"
        ],
        "return": [
          "an array containing all of the elements in this collection"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.IntFunction",
            "parameters": [
              {
                "name": "T",
                "type": "Class",
                "arrayDimensions": 1
              }
            ],
            "type": "Class"
          },
          "name": "generator",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "toArray",
      "comment": "Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array. If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the component type of the array to contain the collection"
        ],
        "implSpec": [
          "The default implementation calls the generator function with zero and then passes the resulting array to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#toArray(T%5B%5D)\"\u003e\u003ccode\u003etoArray(T[])\u003c/code\u003e\u003c/a\u003e."
        ],
        "apiNote": [
          "This method acts as a bridge between array-based and collection-based APIs. It allows creation of an array of a particular runtime type. Use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#toArray()\"\u003e\u003ccode\u003etoArray()\u003c/code\u003e\u003c/a\u003e to create an array whose runtime type is \n\u003ccode\u003eObject[]\u003c/code\u003e, or use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#toArray(T%5B%5D)\"\u003e\u003ccode\u003etoArray(T[])\u003c/code\u003e\u003c/a\u003e to reuse an existing array. \n\u003cp\u003eSuppose \u003ccode\u003ex\u003c/code\u003e is a collection known to contain only strings. The following code can be used to dump the collection into a newly allocated array of \u003ccode\u003eString\u003c/code\u003e: \u003c/p\u003e\n\u003cpre\u003e     String[] y \u003d x.toArray(String[]::new);\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003egenerator\u003c/code\u003e - a function which produces a new array of the desired type and the provided length"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayStoreException.html\" title\u003d\"class in java.lang\"\u003eArrayStoreException\u003c/a\u003e\u003c/code\u003e - if the runtime type of any element in this collection is not assignable to the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#getComponentType()\"\u003eruntime component type\u003c/a\u003e of the generated array",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the generator function is null"
        ],
        "return": [
          "an array containing all of the elements in this collection"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.Collection",
            "name": "E",
            "type": "Variable"
          },
          "name": "e",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "add",
      "comment": "Ensures that this collection contains the specified element (optional operation). Returns true if this collection changed as a result of the call. (Returns false if this collection does not permit duplicates and already contains the specified element.) Collections that support this operation may place limitations on what elements may be added to this collection. In particular, some collections will refuse to add null elements, and others will impose restrictions on the type of elements that may be added. Collection classes should clearly specify in their documentation any restrictions on what elements may be added. If a collection refuses to add a particular element for any reason other than that it already contains the element, it must throw an exception (rather than returning false). This preserves the invariant that a collection always contains the specified element after this call returns.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - element whose presence in this collection is to be ensured"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eadd\u003c/code\u003e operation is not supported by this collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this collection does not permit null elements",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of the element prevents it from being added to this collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if the element cannot be added at this time due to insertion restrictions"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this collection changed as a result of the call"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Removes a single instance of the specified element from this collection, if it is present (optional operation). More formally, removes an element e such that Objects.equals(o, e), if this collection contains one or more such elements. Returns true if this collection contained the specified element (or equivalently, if this collection changed as a result of the call).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - element to be removed from this collection, if present"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the type of the specified element is incompatible with this collection (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified element is null and this collection does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eremove\u003c/code\u003e operation is not supported by this collection"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if an element was removed as a result of this call"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "containsAll",
      "comment": "Returns true if this collection contains all of the elements in the specified collection.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#contains(java.lang.Object)\"\u003e\u003ccode\u003econtains(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - collection to be checked for containment in this collection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the types of one or more elements in the specified collection are incompatible with this collection (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified collection contains one or more null elements and this collection does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e), or if the specified collection is null."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this collection contains all of the elements in the specified collection"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.Collection",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "addAll",
      "comment": "Adds all of the elements in the specified collection to this collection (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this collection, and this collection is nonempty.)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#add(E)\"\u003e\u003ccode\u003eadd(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - collection containing elements to be added to this collection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eaddAll\u003c/code\u003e operation is not supported by this collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of an element of the specified collection prevents it from being added to this collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified collection contains a null element and this collection does not permit null elements, or if the specified collection is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some property of an element of the specified collection prevents it from being added to this collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if not all the elements can be added at this time due to insertion restrictions"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this collection changed as a result of the call"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeAll",
      "comment": "Removes all of this collection\u0027s elements that are also contained in the specified collection (optional operation). After this call returns, this collection will contain no elements in common with the specified collection.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#remove(java.lang.Object)\"\u003e\u003ccode\u003eremove(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#contains(java.lang.Object)\"\u003e\u003ccode\u003econtains(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - collection containing elements to be removed from this collection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eremoveAll\u003c/code\u003e method is not supported by this collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the types of one or more elements in this collection are incompatible with the specified collection (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if this collection contains one or more null elements and the specified collection does not support null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e), or if the specified collection is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this collection changed as a result of the call"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.Collection",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "removeIf",
      "comment": "Removes all of the elements of this collection that satisfy the given predicate. Errors or runtime exceptions thrown during iteration or by the predicate are relayed to the caller.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation traverses all elements of the collection using its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#iterator()\"\u003e\u003ccode\u003eiterator()\u003c/code\u003e\u003c/a\u003e. Each matching element is removed using \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html#remove()\"\u003e\u003ccode\u003eIterator.remove()\u003c/code\u003e\u003c/a\u003e. If the collection\u0027s iterator does not support removal then an \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e will be thrown on the first matching element."
        ],
        "param": [
          "\u003ccode\u003efilter\u003c/code\u003e - a predicate which returns \n\u003ccode\u003etrue\u003c/code\u003e for elements to be removed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified filter is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if elements cannot be removed from this collection. Implementations may throw this exception if a matching element cannot be removed or if, in general, removal is not supported."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if any elements were removed"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "c",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "retainAll",
      "comment": "Retains only the elements in this collection that are contained in the specified collection (optional operation). In other words, removes from this collection all of its elements that are not contained in the specified collection.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#remove(java.lang.Object)\"\u003e\u003ccode\u003eremove(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#contains(java.lang.Object)\"\u003e\u003ccode\u003econtains(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - collection containing elements to be retained in this collection"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eretainAll\u003c/code\u003e operation is not supported by this collection",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the types of one or more elements in this collection are incompatible with the specified collection (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if this collection contains one or more null elements and the specified collection does not permit null elements (\n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#optional-restrictions\"\u003eoptional\u003c/a\u003e), or if the specified collection is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this collection changed as a result of the call"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "clear",
      "comment": "Removes all of the elements from this collection (optional operation). The collection will be empty after this method returns.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eclear\u003c/code\u003e operation is not supported by this collection"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "o",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "equals",
      "comment": "Compares the specified object with this collection for equality. While the Collection interface adds no stipulations to the general contract for the Object.equals, programmers who implement the Collection interface \"directly\" (in other words, create a class that is a Collection but is not a Set or a List) must exercise care if they choose to override the Object.equals. It is not necessary to do so, and the simplest course of action is to rely on Object\u0027s implementation, but the implementor may wish to implement a \"value comparison\" in place of the default \"reference comparison.\" (The List and Set interfaces mandate such value comparisons.) The general contract for the Object.equals method states that equals must be symmetric (in other words, a.equals(b) if and only if b.equals(a)). The contracts for List.equals and Set.equals state that lists are only equal to other lists, and sets to other sets. Thus, a custom equals method for a collection class that implements neither the List nor Set interface must return false when this collection is compared to any list or set. (By the same logic, it is not possible to write a class that correctly implements both the Set and List interfaces.)",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eSet.equals(Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eList.equals(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - object to be compared for equality with this collection"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified object is equal to this collection"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hashCode",
      "comment": "Returns the hash code value for this collection. While the Collection interface adds no stipulations to the general contract for the Object.hashCode method, programmers should take note that any class that overrides the Object.equals method must also override the Object.hashCode method in order to satisfy the general contract for the Object.hashCode method. In particular, c1.equals(c2) implies that c1.hashCode()\u003d\u003dc2.hashCode().",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the hash code value for this collection"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator",
        "parameters": [
          {
            "owner": "java.util.Collection",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "spliterator",
      "comment": "Creates a Spliterator over the elements in this collection. Implementations should document characteristic values reported by the spliterator. Such characteristic values are not required to be reported if the spliterator reports Spliterator.SIZED and this collection contains no elements. The default implementation should be overridden by subclasses that can return a more efficient spliterator. In order to preserve expected laziness behavior for the stream() and parallelStream() methods, spliterators should either have the characteristic of IMMUTABLE or CONCURRENT, or be late-binding. If none of these is practical, the overriding class should describe the spliterator\u0027s documented policy of binding and structural interference, and should override the stream() and parallelStream() methods to create streams using a Supplier of the spliterator, as in: \n     Stream\u003cE\u003e s \u003d StreamSupport.stream(() -\u003e spliterator(), spliteratorCharacteristics)\n These requirements ensure that streams produced by the stream() and parallelStream() methods will reflect the contents of the collection as of initiation of the terminal stream operation.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation creates a \n\u003cem\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e spliterator from the collection\u0027s \n\u003ccode\u003eIterator\u003c/code\u003e. The spliterator inherits the \n\u003cem\u003efail-fast\u003c/em\u003e properties of the collection\u0027s iterator. \n\u003cp\u003e The created \u003ccode\u003eSpliterator\u003c/code\u003e reports \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#SIZED\"\u003e\u003ccode\u003eSpliterator.SIZED\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html#spliterator()\"\u003espliterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html\" title\u003d\"interface in java.lang\"\u003eIterable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"type parameter in Collection\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "implNote": [
          "The created \n\u003ccode\u003eSpliterator\u003c/code\u003e additionally reports \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#SUBSIZED\"\u003e\u003ccode\u003eSpliterator.SUBSIZED\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003eIf a spliterator covers no elements then the reporting of additional characteristic values, beyond that of \u003ccode\u003eSIZED\u003c/code\u003e and \u003ccode\u003eSUBSIZED\u003c/code\u003e, does not aid clients to control, specialize or simplify computation. However, this does enable shared use of an immutable and empty spliterator instance (see \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterators.html#emptySpliterator()\"\u003e\u003ccode\u003eSpliterators.emptySpliterator()\u003c/code\u003e\u003c/a\u003e) for empty collections, and enables clients to determine if such a spliterator covers no elements.\u003c/p\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eSpliterator\u003c/code\u003e over the elements in this collection"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "owner": "java.util.Collection",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "stream",
      "comment": "Returns a sequential Stream with this collection as its source. This method should be overridden when the spliterator() method cannot return a spliterator that is IMMUTABLE, CONCURRENT, or late-binding. (See spliterator() for details.)",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation creates a sequential \n\u003ccode\u003eStream\u003c/code\u003e from the collection\u0027s \n\u003ccode\u003eSpliterator\u003c/code\u003e."
        ],
        "return": [
          "a sequential \n\u003ccode\u003eStream\u003c/code\u003e over the elements in this collection"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "owner": "java.util.Collection",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "parallelStream",
      "comment": "Returns a possibly parallel Stream with this collection as its source. It is allowable for this method to return a sequential stream. This method should be overridden when the spliterator() method cannot return a spliterator that is IMMUTABLE, CONCURRENT, or late-binding. (See spliterator() for details.)",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation creates a parallel \n\u003ccode\u003eStream\u003c/code\u003e from the collection\u0027s \n\u003ccode\u003eSpliterator\u003c/code\u003e."
        ],
        "return": [
          "a possibly parallel \n\u003ccode\u003eStream\u003c/code\u003e over the elements in this collection"
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.Collection",
  "comment": "The root interface in the \n\u003ci\u003ecollection hierarchy\u003c/i\u003e. A collection represents a group of objects, known as its \n\u003ci\u003eelements\u003c/i\u003e. Some collections allow duplicate elements and others do not. Some are ordered and others unordered. The JDK does not provide any \n\u003ci\u003edirect\u003c/i\u003e implementations of this interface: it provides implementations of more specific subinterfaces like \n\u003ccode\u003eSet\u003c/code\u003e and \n\u003ccode\u003eList\u003c/code\u003e. This interface is typically used to pass collections around and manipulate them where maximum generality is desired. \n\u003cp\u003e\u003ci\u003eBags\u003c/i\u003e or \u003ci\u003emultisets\u003c/i\u003e (unordered collections that may contain duplicate elements) should implement this interface directly. \u003c/p\u003e\n\u003cp\u003eAll general-purpose \u003ccode\u003eCollection\u003c/code\u003e implementation classes (which typically implement \u003ccode\u003eCollection\u003c/code\u003e indirectly through one of its subinterfaces) should provide two \"standard\" constructors: a void (no arguments) constructor, which creates an empty collection, and a constructor with a single argument of type \u003ccode\u003eCollection\u003c/code\u003e, which creates a new collection with the same elements as its argument. In effect, the latter constructor allows the user to copy any collection, producing an equivalent collection of the desired implementation type. There is no way to enforce this convention (as interfaces cannot contain constructors) but all of the general-purpose \u003ccode\u003eCollection\u003c/code\u003e implementations in the Java platform libraries comply. \u003c/p\u003e\n\u003cp\u003eCertain methods are specified to be \u003ci\u003eoptional\u003c/i\u003e. If a collection implementation doesn\u0027t implement a particular operation, it should define the corresponding method to throw \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e. Such methods are marked \"optional operation\" in method specifications of the collections interfaces. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"optional-restrictions\"\u003e\u003c/a\u003eSome collection implementations have restrictions on the elements that they may contain. For example, some implementations prohibit null elements, and some have restrictions on the types of their elements. Attempting to add an ineligible element throws an unchecked exception, typically \u003ccode\u003eNullPointerException\u003c/code\u003e or \u003ccode\u003eClassCastException\u003c/code\u003e. Attempting to query the presence of an ineligible element may throw an exception, or it may simply return false; some implementations will exhibit the former behavior and some will exhibit the latter. More generally, attempting an operation on an ineligible element whose completion would not result in the insertion of an ineligible element into the collection may throw an exception or it may succeed, at the option of the implementation. Such exceptions are marked as \"optional\" in the specification for this interface. \u003c/p\u003e\n\u003cp\u003eIt is up to each collection to determine its own synchronization policy. In the absence of a stronger guarantee by the implementation, undefined behavior may result from the invocation of any method on a collection that is being mutated by another thread; this includes direct invocations, passing the collection to a method that might perform invocations, and using an existing iterator to examine the collection. \u003c/p\u003e\n\u003cp\u003eMany methods in Collections Framework interfaces are defined in terms of the \u003ca href\u003d\"../lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eequals\u003c/code\u003e\u003c/a\u003e method. For example, the specification for the \u003ca href\u003d\"#contains(java.lang.Object)\"\u003e\u003ccode\u003econtains(Object o)\u003c/code\u003e\u003c/a\u003e method says: \"returns \u003ccode\u003etrue\u003c/code\u003e if and only if this collection contains at least one element \u003ccode\u003ee\u003c/code\u003e such that \u003ccode\u003e(o\u003d\u003dnull ? e\u003d\u003dnull : o.equals(e))\u003c/code\u003e.\" This specification should \u003ci\u003enot\u003c/i\u003e be construed to imply that invoking \u003ccode\u003eCollection.contains\u003c/code\u003e with a non-null argument \u003ccode\u003eo\u003c/code\u003e will cause \u003ccode\u003eo.equals(e)\u003c/code\u003e to be invoked for any element \u003ccode\u003ee\u003c/code\u003e. Implementations are free to implement optimizations whereby the \u003ccode\u003eequals\u003c/code\u003e invocation is avoided, for example, by first comparing the hash codes of the two elements. (The \u003ca href\u003d\"../lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying \u003ca href\u003d\"../lang/Object.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eObject\u003c/code\u003e\u003c/a\u003e methods wherever the implementor deems it appropriate. \u003c/p\u003e\n\u003cp\u003eSome collection operations which perform recursive traversal of the collection may fail with an exception for self-referential instances where the collection directly or indirectly contains itself. This includes the \u003ccode\u003eclone()\u003c/code\u003e, \u003ccode\u003eequals()\u003c/code\u003e, \u003ccode\u003ehashCode()\u003c/code\u003e and \u003ccode\u003etoString()\u003c/code\u003e methods. Implementations may optionally handle the self-referential scenario, however most current implementations do not do so. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"view\"\u003eView Collections\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003eMost collections manage storage for elements they contain. By contrast, \u003ci\u003eview collections\u003c/i\u003e themselves do not store elements, but instead they rely on a backing collection to store the actual elements. Operations that are not handled by the view collection itself are delegated to the backing collection. Examples of view collections include the wrapper collections returned by methods such as \u003ca href\u003d\"Collections.html#checkedCollection(java.util.Collection,java.lang.Class)\"\u003e\u003ccode\u003eCollections.checkedCollection\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"Collections.html#synchronizedCollection(java.util.Collection)\"\u003e\u003ccode\u003eCollections.synchronizedCollection\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"Collections.html#unmodifiableCollection(java.util.Collection)\"\u003e\u003ccode\u003eCollections.unmodifiableCollection\u003c/code\u003e\u003c/a\u003e. Other examples of view collections include collections that provide a different representation of the same elements, for example, as provided by \u003ca href\u003d\"List.html#subList(int,int)\"\u003e\u003ccode\u003eList.subList\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"NavigableSet.html#subSet(E,boolean,E,boolean)\"\u003e\u003ccode\u003eNavigableSet.subSet\u003c/code\u003e\u003c/a\u003e, or \u003ca href\u003d\"Map.html#entrySet()\"\u003e\u003ccode\u003eMap.entrySet\u003c/code\u003e\u003c/a\u003e. Any changes made to the backing collection are visible in the view collection. Correspondingly, any changes made to the view collection — if changes are permitted — are written through to the backing collection. Although they technically aren\u0027t collections, instances of \u003ca href\u003d\"Iterator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eIterator\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"ListIterator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eListIterator\u003c/code\u003e\u003c/a\u003e can also allow modifications to be written through to the backing collection, and in some cases, modifications to the backing collection will be visible to the Iterator during iteration. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"unmodifiable\"\u003eUnmodifiable Collections\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003eCertain methods of this interface are considered \"destructive\" and are called \"mutator\" methods in that they modify the group of objects contained within the collection on which they operate. They can be specified to throw \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e if this collection implementation does not support the operation. Such methods should (but are not required to) throw an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e if the invocation would have no effect on the collection. For example, consider a collection that does not support the \u003ca href\u003d\"#add(E)\"\u003e\u003ccode\u003eadd\u003c/code\u003e\u003c/a\u003e operation. What will happen if the \u003ca href\u003d\"#addAll(java.util.Collection)\"\u003e\u003ccode\u003eaddAll\u003c/code\u003e\u003c/a\u003e method is invoked on this collection, with an empty collection as the argument? The addition of zero elements has no effect, so it is permissible for this collection simply to do nothing and not to throw an exception. However, it is recommended that such cases throw an exception unconditionally, as throwing only in certain cases can lead to programming errors. \u003c/p\u003e\n\u003cp\u003eAn \u003ci\u003eunmodifiable collection\u003c/i\u003e is a collection, all of whose mutator methods (as defined above) are specified to throw \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e. Such a collection thus cannot be modified by calling any methods on it. For a collection to be properly unmodifiable, any view collections derived from it must also be unmodifiable. For example, if a List is unmodifiable, the List returned by \u003ca href\u003d\"List.html#subList(int,int)\"\u003e\u003ccode\u003eList.subList\u003c/code\u003e\u003c/a\u003e is also unmodifiable. \u003c/p\u003e\n\u003cp\u003eAn unmodifiable collection is not necessarily immutable. If the contained elements are mutable, the entire collection is clearly mutable, even though it might be unmodifiable. For example, consider two unmodifiable lists containing mutable elements. The result of calling \u003ccode\u003elist1.equals(list2)\u003c/code\u003e might differ from one call to the next if the elements had been mutated, even though both lists are unmodifiable. However, if an unmodifiable collection contains all immutable elements, it can be considered effectively immutable. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"unmodview\"\u003eUnmodifiable View Collections\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003eAn \u003ci\u003eunmodifiable view collection\u003c/i\u003e is a collection that is unmodifiable and that is also a view onto a backing collection. Its mutator methods throw \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e, as described above, while reading and querying methods are delegated to the backing collection. The effect is to provide read-only access to the backing collection. This is useful for a component to provide users with read access to an internal collection, while preventing them from modifying such collections unexpectedly. Examples of unmodifiable view collections are those returned by the \u003ca href\u003d\"Collections.html#unmodifiableCollection(java.util.Collection)\"\u003e\u003ccode\u003eCollections.unmodifiableCollection\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"Collections.html#unmodifiableList(java.util.List)\"\u003e\u003ccode\u003eCollections.unmodifiableList\u003c/code\u003e\u003c/a\u003e, and related methods. \u003c/p\u003e\n\u003cp\u003eNote that changes to the backing collection might still be possible, and if they occur, they are visible through the unmodifiable view. Thus, an unmodifiable view collection is not necessarily immutable. However, if the backing collection of an unmodifiable view is effectively immutable, or if the only reference to the backing collection is through an unmodifiable view, the view can be considered effectively immutable. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"serializable\"\u003eSerializability of Collections\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003eSerializability of collections is optional. As such, none of the collections interfaces are declared to implement the \u003ca href\u003d\"../io/Serializable.html\" title\u003d\"interface in java.io\"\u003e\u003ccode\u003eSerializable\u003c/code\u003e\u003c/a\u003e interface. However, serializability is regarded as being generally useful, so most collection implementations are serializable. \u003c/p\u003e\n\u003cp\u003eThe collection implementations that are public classes (such as \u003ccode\u003eArrayList\u003c/code\u003e or \u003ccode\u003eHashMap\u003c/code\u003e) are declared to implement the \u003ccode\u003eSerializable\u003c/code\u003e interface if they are in fact serializable. Some collections implementations are not public classes, such as the \u003ca href\u003d\"#unmodifiable\"\u003eunmodifiable collections.\u003c/a\u003e In such cases, the serializability of such collections is described in the specification of the method that creates them, or in some other suitable place. In cases where the serializability of a collection is not specified, there is no guarantee about the serializability of such collections. In particular, many \u003ca href\u003d\"#view\"\u003eview collections\u003c/a\u003e are not serializable. \u003c/p\u003e\n\u003cp\u003eA collection implementation that implements the \u003ccode\u003eSerializable\u003c/code\u003e interface cannot be guaranteed to be serializable. The reason is that in general, collections contain elements of other types, and it is not possible to determine statically whether instances of some element type are actually serializable. For example, consider a serializable \u003ccode\u003eCollection\u0026lt;E\u0026gt;\u003c/code\u003e, where \u003ccode\u003eE\u003c/code\u003e does not implement the \u003ccode\u003eSerializable\u003c/code\u003e interface. The collection may be serializable, if it contains only elements of some serializable subtype of \u003ccode\u003eE\u003c/code\u003e, or if it is empty. Collections are thus said to be \u003ci\u003econditionally serializable,\u003c/i\u003e as the serializability of the collection as a whole depends on whether the collection itself is serializable and on whether all contained elements are also serializable. \u003c/p\u003e\n\u003cp\u003eAn additional case occurs with instances of \u003ca href\u003d\"SortedSet.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedSet\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"SortedMap.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedMap\u003c/code\u003e\u003c/a\u003e. These collections can be created with a \u003ca href\u003d\"Comparator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eComparator\u003c/code\u003e\u003c/a\u003e that imposes an ordering on the set elements or map keys. Such a collection is serializable only if the provided \u003ccode\u003eComparator\u003c/code\u003e is also serializable. \u003c/p\u003e\n\u003cp\u003eThis interface is a member of the \u003ca href\u003d\"../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "The default method implementations (inherited or otherwise) do not apply any synchronization protocol. If a \n\u003ccode\u003eCollection\u003c/code\u003e implementation has a specific synchronization protocol, then it must override default implementations to apply that protocol."
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eList\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashSet.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TreeSet.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTreeSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ArrayList.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eArrayList\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedList.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLinkedList\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Vector.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eVector\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collections.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eCollections\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eArrays\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/AbstractCollection.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eAbstractCollection\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}