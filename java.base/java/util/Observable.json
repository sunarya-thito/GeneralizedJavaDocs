{
  "packageName": "java.util",
  "simpleName": "Observable",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Observer",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addObserver",
      "comment": "Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set. The order in which notifications will be delivered to multiple observers is not specified. See the class comment.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - an observer to be added."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the parameter o is null."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Observer",
            "type": "Class"
          },
          "field": {
            "name": "o"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deleteObserver",
      "comment": "Deletes an observer from the set of observers of this object. Passing null to this method will have no effect.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eo\u003c/code\u003e - the observer to be deleted."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "notifyObservers",
      "comment": "If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed. Each observer has its update method called with two arguments: this observable object and null. In other words, this method is equivalent to: notifyObservers(null)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observable.html#clearChanged()\"\u003e\u003ccode\u003eclearChanged()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observable.html#hasChanged()\"\u003e\u003ccode\u003ehasChanged()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observer.html#update(java.util.Observable,java.lang.Object)\"\u003e\u003ccode\u003eObserver.update(java.util.Observable, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "arg"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "notifyObservers",
      "comment": "If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed. Each observer has its update method called with two arguments: this observable object and the arg argument.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observable.html#clearChanged()\"\u003e\u003ccode\u003eclearChanged()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observable.html#hasChanged()\"\u003e\u003ccode\u003ehasChanged()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observer.html#update(java.util.Observable,java.lang.Object)\"\u003e\u003ccode\u003eObserver.update(java.util.Observable, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003earg\u003c/code\u003e - any object."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deleteObservers",
      "comment": "Clears the observer list so that this object no longer has any observers.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setChanged",
      "comment": "Marks this Observable object as having been changed; the hasChanged method will now return true.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "clearChanged",
      "comment": "Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the hasChanged method will now return false. This method is called automatically by the notifyObservers methods.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observable.html#notifyObservers()\"\u003e\u003ccode\u003enotifyObservers()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observable.html#notifyObservers(java.lang.Object)\"\u003e\u003ccode\u003enotifyObservers(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hasChanged",
      "comment": "Tests if this object has changed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observable.html#clearChanged()\"\u003e\u003ccode\u003eclearChanged()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observable.html#setChanged()\"\u003e\u003ccode\u003esetChanged()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the \n\u003ccode\u003esetChanged\u003c/code\u003e method has been called more recently than the \n\u003ccode\u003eclearChanged\u003c/code\u003e method on this object; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "countObservers",
      "comment": "Returns the number of observers of this Observable object.",
      "tagMap": {
        "return": [
          "the number of observers of this object."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct an Observable with zero Observers.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.Observable",
  "comment": "This class represents an observable object, or \"data\" in the model-view paradigm. It can be subclassed to represent an object that the application wants to have observed. \n\u003cp\u003e An observable object can have one or more observers. An observer may be any object that implements interface \u003ccode\u003eObserver\u003c/code\u003e. After an observable instance changes, an application calling the \u003ccode\u003eObservable\u003c/code\u003e\u0027s \u003ccode\u003enotifyObservers\u003c/code\u003e method causes all of its observers to be notified of the change by a call to their \u003ccode\u003eupdate\u003c/code\u003e method. \u003c/p\u003e\n\u003cp\u003e The order in which notifications will be delivered is unspecified. The default implementation provided in the Observable class will notify Observers in the order in which they registered interest, but subclasses may change this order, use no guaranteed order, deliver notifications on separate threads, or may guarantee that their subclass follows this order, as they choose. \u003c/p\u003e\n\u003cp\u003e Note that this notification mechanism has nothing to do with threads and is completely separate from the \u003ccode\u003ewait\u003c/code\u003e and \u003ccode\u003enotify\u003c/code\u003e mechanism of class \u003ccode\u003eObject\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e When an observable object is newly created, its set of observers is empty. Two observers are considered the same if and only if the \u003ccode\u003eequals\u003c/code\u003e method returns true for them.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observable.html#notifyObservers()\"\u003e\u003ccode\u003enotifyObservers()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observable.html#notifyObservers(java.lang.Object)\"\u003e\u003ccode\u003enotifyObservers(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observer.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eObserver\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Observer.html#update(java.util.Observable,java.lang.Object)\"\u003e\u003ccode\u003eObserver.update(java.util.Observable, java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}