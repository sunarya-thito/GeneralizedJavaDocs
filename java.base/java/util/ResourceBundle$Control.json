{
  "packageName": "java.util",
  "simpleName": "Control",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FORMAT_DEFAULT",
      "comment": "The default format List, which contains the strings \"java.class\" and \"java.properties\", in this order. This List is unmodifiable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#getFormats(java.lang.String)\"\u003e\u003ccode\u003egetFormats(String)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FORMAT_CLASS",
      "comment": "The class-only format List containing \"java.class\". This List is unmodifiable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#getFormats(java.lang.String)\"\u003e\u003ccode\u003egetFormats(String)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "FORMAT_PROPERTIES",
      "comment": "The properties-only format List containing \"java.properties\". This List is unmodifiable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#getFormats(java.lang.String)\"\u003e\u003ccode\u003egetFormats(String)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TTL_DONT_CACHE",
      "comment": "The time-to-live constant for not caching loaded resource bundle instances.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#getTimeToLive(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003egetTimeToLive(String, Locale)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.ResourceBundle.Control.TTL_DONT_CACHE\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "TTL_NO_EXPIRATION_CONTROL",
      "comment": "The time-to-live constant for disabling the expiration control for loaded resource bundle instances in the cache.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#getTimeToLive(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003egetTimeToLive(String, Locale)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.util.ResourceBundle.Control.TTL_NO_EXPIRATION_CONTROL\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle$Control",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "formats"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getControl",
      "comment": "Returns a ResourceBundle.Control in which the getFormats method returns the specified formats. The formats must be equal to one of FORMAT_PROPERTIES, FORMAT_CLASS or FORMAT_DEFAULT. ResourceBundle.Control instances returned by this method are singletons and thread-safe. Specifying FORMAT_DEFAULT is equivalent to instantiating the ResourceBundle.Control class, except that this method returns a singleton.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eformats\u003c/code\u003e - the formats to be returned by the \n\u003ccode\u003eResourceBundle.Control.getFormats\u003c/code\u003e method"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eformats\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eformats\u003c/code\u003e is unknown"
        ],
        "return": [
          "a \n\u003ccode\u003eResourceBundle.Control\u003c/code\u003e supporting the specified \n\u003ccode\u003eformats\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle$Control",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "formats"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getNoFallbackControl",
      "comment": "Returns a ResourceBundle.Control in which the getFormats method returns the specified formats and the getFallbackLocale method returns null. The formats must be equal to one of FORMAT_PROPERTIES, FORMAT_CLASS or FORMAT_DEFAULT. ResourceBundle.Control instances returned by this method are singletons and thread-safe.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eformats\u003c/code\u003e - the formats to be returned by the \n\u003ccode\u003eResourceBundle.Control.getFormats\u003c/code\u003e method"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eformats\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eformats\u003c/code\u003e is unknown"
        ],
        "return": [
          "a \n\u003ccode\u003eResourceBundle.Control\u003c/code\u003e supporting the specified \n\u003ccode\u003eformats\u003c/code\u003e with no fallback \n\u003ccode\u003eLocale\u003c/code\u003e support"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFormats",
      "comment": "Returns a List of Strings containing formats to be used to load resource bundles for the given baseName. The ResourceBundle.getBundle factory method tries to load resource bundles with formats in the order specified by the list. The list returned by this method must have at least one String. The predefined formats are \"java.class\" for class-based resource bundles and \"java.properties\" for properties-based ones. Strings starting with \"java.\" are reserved for future extensions and must not be used by application-defined formats. It is not a requirement to return an immutable (unmodifiable) List. However, the returned List must not be mutated after it has been returned by getFormats. The default implementation returns FORMAT_DEFAULT so that the ResourceBundle.getBundle factory method looks up first class-based resource bundles, then properties-based ones.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#FORMAT_DEFAULT\"\u003e\u003ccode\u003eFORMAT_DEFAULT\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#FORMAT_CLASS\"\u003e\u003ccode\u003eFORMAT_CLASS\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#FORMAT_PROPERTIES\"\u003e\u003ccode\u003eFORMAT_PROPERTIES\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e is null"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e of \n\u003ccode\u003eString\u003c/code\u003es containing formats for loading resource bundles."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.util.Locale",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCandidateLocales",
      "comment": "Returns a List of Locales as candidate locales for baseName and locale. This method is called by the ResourceBundle.getBundle factory method each time the factory method tries finding a resource bundle for a target Locale. The sequence of the candidate locales also corresponds to the runtime resource lookup path (also known as the parent chain), if the corresponding resource bundles for the candidate locales exist and their parents are not defined by loaded resource bundles themselves. The last element of the list must be a root locale if it is desired to have the base bundle as the terminal of the parent chain. If the given locale is equal to Locale.ROOT (the root locale), a List containing only the root Locale must be returned. In this case, the ResourceBundle.getBundle factory method loads only the base bundle as the resulting resource bundle. It is not a requirement to return an immutable (unmodifiable) List. However, the returned List must not be mutated after it has been returned by getCandidateLocales. The default implementation returns a List containing Locales using the rules described below. In the description below, L, S, C and V respectively represent non-empty language, script, country, and variant. For example, [L, C] represents a Locale that has non-empty values only for language and country. The form L(\"xx\") represents the (non-empty) language value is \"xx\". For all cases, Locales whose final component values are empty strings are omitted. For an input Locale with an empty script value, append candidate Locales by omitting the final component one by one as below: [L, C, V] [L, C] [L] Locale.ROOT For an input Locale with a non-empty script value, append candidate Locales by omitting the final component up to language, then append candidates generated from the Locale with country and variant restored: [L, S, C, V] [L, S, C] [L, S] [L, C, V] [L, C] [L] Locale.ROOT For an input Locale with a variant value consisting of multiple subtags separated by underscore, generate candidate Locales by omitting the variant subtags one by one, then insert them after every occurrence of Locales with the full variant value in the original list. For example, if the variant consists of two subtags V1 and V2: [L, S, C, V1, V2] [L, S, C, V1] [L, S, C] [L, S] [L, C, V1, V2] [L, C, V1] [L, C] [L] Locale.ROOT Special cases for Chinese. When an input Locale has the language \"zh\" (Chinese) and an empty script value, either \"Hans\" (Simplified) or \"Hant\" (Traditional) might be supplied, depending on the country. When the country is \"CN\" (China) or \"SG\" (Singapore), \"Hans\" is supplied. When the country is \"HK\" (Hong Kong SAR China), \"MO\" (Macau SAR China), or \"TW\" (Taiwan), \"Hant\" is supplied. For all other countries or when the country is empty, no script is supplied. For example, for Locale(\"zh\", \"CN\") , the candidate list will be: [L(\"zh\"), S(\"Hans\"), C(\"CN\")] [L(\"zh\"), S(\"Hans\")] [L(\"zh\"), C(\"CN\")] [L(\"zh\")] Locale.ROOT For Locale(\"zh\", \"TW\"), the candidate list will be: [L(\"zh\"), S(\"Hant\"), C(\"TW\")] [L(\"zh\"), S(\"Hant\")] [L(\"zh\"), C(\"TW\")] [L(\"zh\")] Locale.ROOT Special cases for Norwegian. Both Locale(\"no\", \"NO\", \"NY\") and Locale(\"nn\", \"NO\") represent Norwegian Nynorsk. When a locale\u0027s language is \"nn\", the standard candidate list is generated up to [L(\"nn\")], and then the following candidates are added: [L(\"no\"), C(\"NO\"), V(\"NY\")] [L(\"no\"), C(\"NO\")] [L(\"no\")] Locale.ROOT If the locale is exactly Locale(\"no\", \"NO\", \"NY\"), it is first converted to Locale(\"nn\", \"NO\") and then the above procedure is followed. Also, Java treats the language \"no\" as a synonym of Norwegian Bokmål \"nb\". Except for the single case Locale(\"no\", \"NO\", \"NY\") (handled above), when an input Locale has language \"no\" or \"nb\", candidate Locales with language code \"no\" and \"nb\" are interleaved, first using the requested language, then using its synonym. For example, Locale(\"nb\", \"NO\", \"POSIX\") generates the following candidate list: [L(\"nb\"), C(\"NO\"), V(\"POSIX\")] [L(\"no\"), C(\"NO\"), V(\"POSIX\")] [L(\"nb\"), C(\"NO\")] [L(\"no\"), C(\"NO\")] [L(\"nb\")] [L(\"no\")] Locale.ROOT Locale(\"no\", \"NO\", \"POSIX\") would generate the same list except that locales with \"no\" would appear before the corresponding locales with \"nb\". The default implementation uses an ArrayList that overriding implementations may modify before returning it to the caller. However, a subclass must not modify it after it has been returned by getCandidateLocales. For example, if the given baseName is \"Messages\" and the given locale is Locale(\"ja\", \"\", \"XX\"), then a List of Locales:      Locale(\"ja\", \"\", \"XX\")\n     Locale(\"ja\")\n     Locale.ROOT\n is returned. And if the resource bundles for the \"ja\" and \"\" Locales are found, then the runtime resource lookup path (parent chain) is: \n     Messages_ja -\u003e Messages",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale for which a resource bundle is desired"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e or \n\u003ccode\u003elocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eList\u003c/code\u003e of candidate \n\u003ccode\u003eLocale\u003c/code\u003es for the given \n\u003ccode\u003elocale\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFallbackLocale",
      "comment": "Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle.getBundle factory method. This method is called from the factory method every time when no resulting resource bundle has been found for baseName and locale, where locale is either the parameter for ResourceBundle.getBundle or the previous fallback locale returned by this method. The method returns null if no further fallback search is desired. The default implementation returns the default {@code Locale} if the given locale isn\u0027t the default one. Otherwise, null is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name for which \n\u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e has been unable to find any resource bundles (except for the base bundle)",
          "\u003ccode\u003elocale\u003c/code\u003e - the \n\u003ccode\u003eLocale\u003c/code\u003e for which \n\u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e has been unable to find any resource bundles (except for the base bundle)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e or \n\u003ccode\u003elocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eLocale\u003c/code\u003e for the fallback search, or \n\u003ccode\u003enull\u003c/code\u003e if no further fallback search is desired."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.IllegalAccessException",
          "type": "Class"
        },
        {
          "name": "java.lang.InstantiationException",
          "type": "Class"
        },
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "format"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "loader"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "reload"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "newBundle",
      "comment": "Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary. This method returns null if there is no resource bundle available for the given parameters. If a resource bundle can\u0027t be instantiated due to an unexpected error, the error must be reported by throwing an Error or Exception rather than simply returning null. If the reload flag is true, it indicates that this method is being called because the previously loaded resource bundle has expired.",
      "tagMap": {
        "implSpec": [
          "Resource bundles in named modules are subject to the encapsulation rules specified by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Module.html#getResourceAsStream(java.lang.String)\"\u003e\u003ccode\u003eModule.getResourceAsStream\u003c/code\u003e\u003c/a\u003e. A resource bundle in a named module visible to the given class loader is accessible when the package of the resource file corresponding to the resource bundle is open unconditionally. \n\u003cp\u003eThe default implementation instantiates a \u003ccode\u003eResourceBundle\u003c/code\u003e as follows. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eThe bundle name is obtained by calling \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#toBundleName(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003etoBundleName(baseName, locale)\u003c/code\u003e\u003c/a\u003e.\u003c/li\u003e \n \u003cli\u003eIf \u003ccode\u003eformat\u003c/code\u003e is \u003ccode\u003e\"java.class\"\u003c/code\u003e, the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClass\u003c/code\u003e\u003c/a\u003e specified by the bundle name is loaded with the given class loader. If the \u003ccode\u003eClass\u003c/code\u003e is found and accessible then the \u003ccode\u003eResourceBundle\u003c/code\u003e is instantiated. The resource bundle is accessible if the package of the bundle class file is open unconditionally; otherwise, \u003ccode\u003eIllegalAccessException\u003c/code\u003e will be thrown. Note that the \u003ccode\u003ereload\u003c/code\u003e flag is ignored for loading class-based resource bundles in this default implementation. \u003c/li\u003e \n \u003cli\u003eIf \u003ccode\u003eformat\u003c/code\u003e is \u003ccode\u003e\"java.properties\"\u003c/code\u003e, \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#toResourceName(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003etoResourceName(bundlename, \"properties\")\u003c/code\u003e\u003c/a\u003e is called to get the resource name. If \u003ccode\u003ereload\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#getResource(java.lang.String)\"\u003e\u003ccode\u003eload.getResource\u003c/code\u003e\u003c/a\u003e is called to get a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURL\u003c/code\u003e\u003c/a\u003e for creating a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLConnection.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURLConnection\u003c/code\u003e\u003c/a\u003e. This \u003ccode\u003eURLConnection\u003c/code\u003e is used to \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLConnection.html#setUseCaches(boolean)\"\u003edisable the caches\u003c/a\u003e of the underlying resource loading layers, and to \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URLConnection.html#getInputStream()\"\u003eget an {@code InputStream}\u003c/a\u003e. Otherwise, \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassLoader.html#getResourceAsStream(java.lang.String)\"\u003e\u003ccode\u003eloader.getResourceAsStream\u003c/code\u003e\u003c/a\u003e is called to get an \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/InputStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eInputStream\u003c/code\u003e\u003c/a\u003e. Then, a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/PropertyResourceBundle.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003ePropertyResourceBundle\u003c/code\u003e\u003c/a\u003e is constructed with the \u003ccode\u003eInputStream\u003c/code\u003e.\u003c/li\u003e \n \u003cli\u003eIf \u003ccode\u003eformat\u003c/code\u003e is neither \u003ccode\u003e\"java.class\"\u003c/code\u003e nor \u003ccode\u003e\"java.properties\"\u003c/code\u003e, an \u003ccode\u003eIllegalArgumentException\u003c/code\u003e is thrown.\u003c/li\u003e \n\u003c/ul\u003e\n\u003cp\u003e\u003c/p\u003e"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/ResourceBundleProvider.html#getBundle(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003eResourceBundleProvider.getBundle(String, Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base bundle name of the resource bundle, a fully qualified class name",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale for which the resource bundle should be instantiated",
          "\u003ccode\u003eformat\u003c/code\u003e - the resource bundle format to be loaded",
          "\u003ccode\u003eloader\u003c/code\u003e - the \n\u003ccode\u003eClassLoader\u003c/code\u003e to use to load the bundle",
          "\u003ccode\u003ereload\u003c/code\u003e - the flag to indicate bundle reloading; \n\u003ccode\u003etrue\u003c/code\u003e if reloading an expired resource bundle, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebundleName\u003c/code\u003e, \n\u003ccode\u003elocale\u003c/code\u003e, \n\u003ccode\u003eformat\u003c/code\u003e, or \n\u003ccode\u003eloader\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or if \n\u003ccode\u003enull\u003c/code\u003e is returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#toBundleName(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003etoBundleName\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eformat\u003c/code\u003e is unknown, or if the resource found for the given parameters contains malformed data.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the loaded class cannot be cast to \n\u003ccode\u003eResourceBundle\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalAccessException.html\" title\u003d\"class in java.lang\"\u003eIllegalAccessException\u003c/a\u003e\u003c/code\u003e - if the class or its nullary constructor is not accessible.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InstantiationException.html\" title\u003d\"class in java.lang\"\u003eInstantiationException\u003c/a\u003e\u003c/code\u003e - if the instantiation of a class fails for some other reason.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ExceptionInInitializerError.html\" title\u003d\"class in java.lang\"\u003eExceptionInInitializerError\u003c/a\u003e\u003c/code\u003e - if the initialization provoked by this method fails.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and creation of new instances is denied. See \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Class.html#newInstance()\"\u003e\u003ccode\u003eClass.newInstance()\u003c/code\u003e\u003c/a\u003e for details.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an error occurred when reading resources using any I/O operations"
        ],
        "return": [
          "the resource bundle instance, or \n\u003ccode\u003enull\u003c/code\u003e if none could be found."
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTimeToLive",
      "comment": "Returns the time-to-live (TTL) value for resource bundles that are loaded under this ResourceBundle.Control. Positive time-to-live values specify the number of milliseconds a bundle can remain in the cache without being validated against the source data from which it was constructed. The value 0 indicates that a bundle must be validated each time it is retrieved from the cache. TTL_DONT_CACHE specifies that loaded resource bundles are not put in the cache. TTL_NO_EXPIRATION_CONTROL specifies that loaded resource bundles are put in the cache with no expiration control. The expiration affects only the bundle loading process by the ResourceBundle.getBundle factory method. That is, if the factory method finds a resource bundle in the cache that has expired, the factory method calls the needsReload method to determine whether the resource bundle needs to be reloaded. If needsReload returns true, the cached resource bundle instance is removed from the cache. Otherwise, the instance stays in the cache, updated with the new TTL value returned by this method. All cached resource bundles are subject to removal from the cache due to memory constraints of the runtime environment. Returning a large positive value doesn\u0027t mean to lock loaded resource bundles in the cache. The default implementation returns TTL_NO_EXPIRATION_CONTROL.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle for which the expiration value is specified.",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale of the resource bundle for which the expiration value is specified."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e or \n\u003ccode\u003elocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the time (0 or a positive millisecond offset from the cached time) to get loaded bundles expired in the cache, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#TTL_NO_EXPIRATION_CONTROL\"\u003e\u003ccode\u003eTTL_NO_EXPIRATION_CONTROL\u003c/code\u003e\u003c/a\u003e to disable the expiration control, or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#TTL_DONT_CACHE\"\u003e\u003ccode\u003eTTL_DONT_CACHE\u003c/code\u003e\u003c/a\u003e to disable caching."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "format"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "loader"
          }
        },
        {
          "type": {
            "name": "java.util.ResourceBundle",
            "type": "Class"
          },
          "field": {
            "name": "bundle"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "loadTime"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "needsReload",
      "comment": "Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria. The method returns true if reloading is required; false otherwise. loadTime is a millisecond offset since the Calendar Epoch. The calling ResourceBundle.getBundle factory method calls this method on the ResourceBundle.Control instance used for its current invocation, not on the instance used in the invocation that originally loaded the resource bundle. The default implementation compares loadTime and the last modified time of the source data of the resource bundle. If it\u0027s determined that the source data has been modified since loadTime, true is returned. Otherwise, false is returned. This implementation assumes that the given format is the same string as its file suffix if it\u0027s not one of the default formats, \"java.class\" or \"java.properties\".",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base bundle name of the resource bundle, a fully qualified class name",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale for which the resource bundle should be instantiated",
          "\u003ccode\u003eformat\u003c/code\u003e - the resource bundle format to be loaded",
          "\u003ccode\u003eloader\u003c/code\u003e - the \n\u003ccode\u003eClassLoader\u003c/code\u003e to use to load the bundle",
          "\u003ccode\u003ebundle\u003c/code\u003e - the resource bundle instance that has been expired in the cache",
          "\u003ccode\u003eloadTime\u003c/code\u003e - the time when \n\u003ccode\u003ebundle\u003c/code\u003e was loaded and put in the cache"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e, \n\u003ccode\u003elocale\u003c/code\u003e, \n\u003ccode\u003eformat\u003c/code\u003e, \n\u003ccode\u003eloader\u003c/code\u003e, or \n\u003ccode\u003ebundle\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the expired bundle needs to be reloaded; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toBundleName",
      "comment": "Converts the given baseName and locale to the bundle name. This method is called from the default implementation of the newBundle and needsReload methods. This implementation returns the following value:      baseName + \"_\" + language + \"_\" + script + \"_\" + country + \"_\" + variant\n where language, script, country, and variant are the language, script, country, and variant values of locale, respectively. Final component values that are empty Strings are omitted along with the preceding \u0027_\u0027. When the script is empty, the script value is omitted along with the preceding \u0027_\u0027. If all of the values are empty strings, then baseName is returned. For example, if baseName is \"baseName\" and locale is Locale(\"ja\", \"\", \"XX\"), then \"baseName_ja_ _XX\" is returned. If the given locale is Locale(\"en\"), then \"baseName_en\" is returned. Overriding this method allows applications to use different conventions in the organization and packaging of localized resources.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/AbstractResourceBundleProvider.html#toBundleName(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003eAbstractResourceBundleProvider.toBundleName(String, Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale for which a resource bundle should be loaded"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e or \n\u003ccode\u003elocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the bundle name for the resource bundle"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "bundleName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "suffix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "toResourceName",
      "comment": "Converts the given bundleName to the form required by the ClassLoader.getResource method by replacing all occurrences of \u0027.\u0027 in bundleName with \u0027/\u0027 and appending a \u0027.\u0027 and the given file suffix. For example, if bundleName is \"foo.bar.MyResources_ja_JP\" and suffix is \"properties\", then \"foo/bar/MyResources_ja_JP.properties\" is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebundleName\u003c/code\u003e - the bundle name",
          "\u003ccode\u003esuffix\u003c/code\u003e - the file type suffix"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebundleName\u003c/code\u003e or \n\u003ccode\u003esuffix\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the converted resource name"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Sole constructor. (For invocation by subclass constructors, typically implicit.)",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "java.util.ResourceBundle$Control",
  "comment": "\u003ccode\u003eResourceBundle.Control\u003c/code\u003e defines a set of callback methods that are invoked by the \n\u003ca href\u003d\"ResourceBundle.html#getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle.Control)\"\u003e\u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e\u003c/a\u003e factory methods during the bundle loading process. In other words, a \n\u003ccode\u003eResourceBundle.Control\u003c/code\u003e collaborates with the factory methods for loading resource bundles. The default implementation of the callback methods provides the information necessary for the factory methods to perform the \n\u003ca href\u003d\"./ResourceBundle.html#default_behavior\"\u003edefault behavior\u003c/a\u003e. \n\u003cp\u003e \u003ca href\u003d\"ResourceBundle.Control.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle.Control\u003c/code\u003e\u003c/a\u003e is designed for an application deployed in an unnamed module, for example to support resource bundles in non-standard formats or package localized resources in a non-traditional convention. \u003ca href\u003d\"spi/ResourceBundleProvider.html\" title\u003d\"interface in java.util.spi\"\u003e\u003ccode\u003eResourceBundleProvider\u003c/code\u003e\u003c/a\u003e is the replacement for \u003ccode\u003eResourceBundle.Control\u003c/code\u003e when migrating to modules. \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e will be thrown when a factory method that takes the \u003ccode\u003eResourceBundle.Control\u003c/code\u003e parameter is called. \u003c/p\u003e\n\u003cp\u003eIn addition to the callback methods, the \u003ca href\u003d\"#toBundleName(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003etoBundleName\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#toResourceName(java.lang.String,java.lang.String)\"\u003e\u003ccode\u003etoResourceName\u003c/code\u003e\u003c/a\u003e methods are defined primarily for convenience in implementing the callback methods. However, the \u003ccode\u003etoBundleName\u003c/code\u003e method could be overridden to provide different conventions in the organization and packaging of localized resources. The \u003ccode\u003etoResourceName\u003c/code\u003e method is \u003ccode\u003efinal\u003c/code\u003e to avoid use of wrong resource and class name separators. \u003c/p\u003e\n\u003cp\u003eTwo factory methods, \u003ca href\u003d\"#getControl(java.util.List)\"\u003e\u003ccode\u003egetControl(List)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#getNoFallbackControl(java.util.List)\"\u003e\u003ccode\u003egetNoFallbackControl(List)\u003c/code\u003e\u003c/a\u003e, provide \u003ccode\u003eResourceBundle.Control\u003c/code\u003e instances that implement common variations of the default bundle loading process. \u003c/p\u003e\n\u003cp\u003eThe formats returned by the \u003ca href\u003d\"#getFormats(java.lang.String)\"\u003e\u003ccode\u003egetFormats\u003c/code\u003e\u003c/a\u003e method and candidate locales returned by the \u003ca href\u003d\"#getCandidateLocales(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003egetCandidateLocales\u003c/code\u003e\u003c/a\u003e method must be consistent in all \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e invocations for the same base bundle. Otherwise, the \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e methods may return unintended bundles. For example, if only \u003ccode\u003e\"java.class\"\u003c/code\u003e is returned by the \u003ccode\u003egetFormats\u003c/code\u003e method for the first call to \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e and only \u003ccode\u003e\"java.properties\"\u003c/code\u003e for the second call, then the second call will return the class-based one that has been cached during the first call. \u003c/p\u003e\n\u003cp\u003eA \u003ccode\u003eResourceBundle.Control\u003c/code\u003e instance must be thread-safe if it\u0027s simultaneously used by multiple threads. \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e does not synchronize to call the \u003ccode\u003eResourceBundle.Control\u003c/code\u003e methods. The default implementations of the methods are thread-safe. \u003c/p\u003e\n\u003cp\u003eApplications can specify \u003ccode\u003eResourceBundle.Control\u003c/code\u003e instances returned by the \u003ccode\u003egetControl\u003c/code\u003e factory methods or created from a subclass of \u003ccode\u003eResourceBundle.Control\u003c/code\u003e to customize the bundle loading process. The following are examples of changing the default bundle loading process. \u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample 1\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003eThe following code lets \u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e look up only properties-based resources. \u003c/p\u003e\n\u003cpre\u003e import java.util.*;\n import static java.util.ResourceBundle.Control.*;\n ...\n ResourceBundle bundle \u003d\n   ResourceBundle.getBundle(\"MyResources\", new Locale(\"fr\", \"CH\"),\n                            ResourceBundle.Control.getControl(FORMAT_PROPERTIES));\n \u003c/pre\u003e Given the resource bundles in the \n\u003ca href\u003d\"./ResourceBundle.html#default_behavior_example\"\u003eexample\u003c/a\u003e in the \n\u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e description, this \n\u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e call loads \n\u003ccode\u003eMyResources_fr_CH.properties\u003c/code\u003e whose parent is \n\u003ccode\u003eMyResources_fr.properties\u003c/code\u003e whose parent is \n\u003ccode\u003eMyResources.properties\u003c/code\u003e. (\n\u003ccode\u003eMyResources_fr_CH.properties\u003c/code\u003e is not hidden, but \n\u003ccode\u003eMyResources_fr_CH.class\u003c/code\u003e is.) \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cb\u003eExample 2\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003eThe following is an example of loading XML-based bundles using \u003ca href\u003d\"Properties.html#loadFromXML(java.io.InputStream)\"\u003e\u003ccode\u003eProperties.loadFromXML\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cpre\u003e ResourceBundle rb \u003d ResourceBundle.getBundle(\"Messages\",\n     new ResourceBundle.Control() {\n         public List\u0026lt;String\u0026gt; getFormats(String baseName) {\n             if (baseName \u003d\u003d null)\n                 throw new NullPointerException();\n             return Arrays.asList(\"xml\");\n         }\n         public ResourceBundle newBundle(String baseName,\n                                         Locale locale,\n                                         String format,\n                                         ClassLoader loader,\n                                         boolean reload)\n                          throws IllegalAccessException,\n                                 InstantiationException,\n                                 IOException {\n             if (baseName \u003d\u003d null || locale \u003d\u003d null\n                   || format \u003d\u003d null || loader \u003d\u003d null)\n                 throw new NullPointerException();\n             ResourceBundle bundle \u003d null;\n             if (format.equals(\"xml\")) {\n                 String bundleName \u003d toBundleName(baseName, locale);\n                 String resourceName \u003d toResourceName(bundleName, format);\n                 InputStream stream \u003d null;\n                 if (reload) {\n                     URL url \u003d loader.getResource(resourceName);\n                     if (url !\u003d null) {\n                         URLConnection connection \u003d url.openConnection();\n                         if (connection !\u003d null) {\n                             // Disable caches to get fresh data for\n                             // reloading.\n                             connection.setUseCaches(false);\n                             stream \u003d connection.getInputStream();\n                         }\n                     }\n                 } else {\n                     stream \u003d loader.getResourceAsStream(resourceName);\n                 }\n                 if (stream !\u003d null) {\n                     BufferedInputStream bis \u003d new BufferedInputStream(stream);\n                     bundle \u003d new XMLResourceBundle(bis);\n                     bis.close();\n                 }\n             }\n             return bundle;\n         }\n     });\n\n ...\n\n private static class XMLResourceBundle extends ResourceBundle {\n     private Properties props;\n     XMLResourceBundle(InputStream stream) throws IOException {\n         props \u003d new Properties();\n         props.loadFromXML(stream);\n     }\n     protected Object handleGetObject(String key) {\n         return props.getProperty(key);\n     }\n     public Enumeration\u0026lt;String\u0026gt; getKeys() {\n         ...\n     }\n }\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/ResourceBundleProvider.html\" title\u003d\"interface in java.util.spi\"\u003e\u003ccode\u003eResourceBundleProvider\u003c/code\u003e\u003c/a\u003e"
    ],
    "apiNote": [
      "\u003ccode\u003eResourceBundle.Control\u003c/code\u003e is not supported in named modules. If the \n\u003ccode\u003eResourceBundle.getBundle\u003c/code\u003e method with a \n\u003ccode\u003eResourceBundle.Control\u003c/code\u003e is called in a named module, the method will throw an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e. Any service providers of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/ResourceBundleControlProvider.html\" title\u003d\"interface in java.util.spi\"\u003e\u003ccode\u003eResourceBundleControlProvider\u003c/code\u003e\u003c/a\u003e are ignored in named modules."
    ],
    "since": [
      "1.6"
    ]
  }
}