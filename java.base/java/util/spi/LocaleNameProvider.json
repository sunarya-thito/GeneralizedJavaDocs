{
  "packageName": "java.util.spi",
  "simpleName": "LocaleNameProvider",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.spi.LocaleServiceProvider",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "languageCode",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDisplayLanguage",
      "comment": "Returns a localized name for the given IETF BCP47 language code and the given locale that is appropriate for display to the user. For example, if languageCode is \"fr\" and locale is en_US, getDisplayLanguage() will return \"French\"; if languageCode is \"en\" and locale is fr_FR, getDisplayLanguage() will return \"anglais\". If the name returned cannot be localized according to locale, (say, the provider does not have a Japanese name for Croatian), this method returns null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDisplayLanguage(java.util.Locale)\"\u003e\u003ccode\u003eLocale.getDisplayLanguage(java.util.Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elanguageCode\u003c/code\u003e - the language code string in the form of two to eight lower-case letters between \u0027a\u0027 (U+0061) and \u0027z\u0027 (U+007A)",
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elanguageCode\u003c/code\u003e or \n\u003ccode\u003elocale\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elanguageCode\u003c/code\u003e is not in the form of two or three lower-case letters, or \n\u003ccode\u003elocale\u003c/code\u003e isn\u0027t one of the locales returned from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/LocaleServiceProvider.html#getAvailableLocales()\"\u003e\u003ccode\u003egetAvailableLocales()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the name of the given language code for the specified locale, or null if it\u0027s not available."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "scriptCode",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayScript",
      "comment": "Returns a localized name for the given IETF BCP47 script code and the given locale that is appropriate for display to the user. For example, if scriptCode is \"Latn\" and locale is en_US, getDisplayScript() will return \"Latin\"; if scriptCode is \"Cyrl\" and locale is fr_FR, getDisplayScript() will return \"cyrillique\". If the name returned cannot be localized according to locale, (say, the provider does not have a Japanese name for Cyrillic), this method returns null. The default implementation returns null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDisplayScript(java.util.Locale)\"\u003e\u003ccode\u003eLocale.getDisplayScript(java.util.Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003escriptCode\u003c/code\u003e - the four letter script code string in the form of title-case letters (the first letter is upper-case character between \u0027A\u0027 (U+0041) and \u0027Z\u0027 (U+005A) followed by three lower-case character between \u0027a\u0027 (U+0061) and \u0027z\u0027 (U+007A)).",
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003escriptCode\u003c/code\u003e or \n\u003ccode\u003elocale\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003escriptCode\u003c/code\u003e is not in the form of four title case letters, or \n\u003ccode\u003elocale\u003c/code\u003e isn\u0027t one of the locales returned from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/LocaleServiceProvider.html#getAvailableLocales()\"\u003e\u003ccode\u003egetAvailableLocales()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the name of the given script code for the specified locale, or null if it\u0027s not available."
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "countryCode",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDisplayCountry",
      "comment": "Returns a localized name for the given IETF BCP47 region code (either ISO 3166 country code or UN M.49 area codes) and the given locale that is appropriate for display to the user. For example, if countryCode is \"FR\" and locale is en_US, getDisplayCountry() will return \"France\"; if countryCode is \"US\" and locale is fr_FR, getDisplayCountry() will return \"Etats-Unis\". If the name returned cannot be localized according to locale, (say, the provider does not have a Japanese name for Croatia), this method returns null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDisplayCountry(java.util.Locale)\"\u003e\u003ccode\u003eLocale.getDisplayCountry(java.util.Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecountryCode\u003c/code\u003e - the country(region) code string in the form of two upper-case letters between \u0027A\u0027 (U+0041) and \u0027Z\u0027 (U+005A) or the UN M.49 area code in the form of three digit letters between \u00270\u0027 (U+0030) and \u00279\u0027 (U+0039).",
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecountryCode\u003c/code\u003e or \n\u003ccode\u003elocale\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecountryCode\u003c/code\u003e is not in the form of two upper-case letters or three digit letters, or \n\u003ccode\u003elocale\u003c/code\u003e isn\u0027t one of the locales returned from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/LocaleServiceProvider.html#getAvailableLocales()\"\u003e\u003ccode\u003egetAvailableLocales()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the name of the given country code for the specified locale, or null if it\u0027s not available."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "variant",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDisplayVariant",
      "comment": "Returns a localized name for the given variant code and the given locale that is appropriate for display to the user. If the name returned cannot be localized according to locale, this method returns null.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html#getDisplayVariant(java.util.Locale)\"\u003e\u003ccode\u003eLocale.getDisplayVariant(java.util.Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003evariant\u003c/code\u003e - the variant string",
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003evariant\u003c/code\u003e or \n\u003ccode\u003elocale\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e isn\u0027t one of the locales returned from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/LocaleServiceProvider.html#getAvailableLocales()\"\u003e\u003ccode\u003egetAvailableLocales()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the name of the given variant string for the specified locale, or null if it\u0027s not available."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayUnicodeExtensionKey",
      "comment": "Returns a localized name for the given Unicode extension key, and the given locale that is appropriate for display to the user. If the name returned cannot be localized according to locale, this method returns null.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "the default implementation returns \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the Unicode Extension key, not null.",
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale, not null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e or \n\u003ccode\u003elocale\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e isn\u0027t one of the locales returned from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/LocaleServiceProvider.html#getAvailableLocales()\"\u003e\u003ccode\u003egetAvailableLocales()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the name of the given key string for the specified locale, or null if it\u0027s not available."
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getDisplayUnicodeExtensionType",
      "comment": "Returns a localized name for the given Unicode extension type, and the given locale that is appropriate for display to the user. If the name returned cannot be localized according to locale, this method returns null.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "the default implementation returns \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the Unicode Extension type, not null.",
          "\u003ccode\u003ekey\u003c/code\u003e - the Unicode Extension key for this \n\u003ccode\u003etype\u003c/code\u003e, not null.",
          "\u003ccode\u003elocale\u003c/code\u003e - the desired locale, not null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e, \n\u003ccode\u003etype\u003c/code\u003e or \n\u003ccode\u003elocale\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003elocale\u003c/code\u003e isn\u0027t one of the locales returned from \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/LocaleServiceProvider.html#getAvailableLocales()\"\u003e\u003ccode\u003egetAvailableLocales()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "the name of the given type string for the specified locale, or null if it\u0027s not available."
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Sole constructor. (For invocation by subclass constructors, typically implicit.)",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.spi.LocaleNameProvider",
  "comment": "An abstract class for service providers that provide localized names for the \n\u003ca href\u003d\"../Locale.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eLocale\u003c/code\u003e\u003c/a\u003e class.",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}