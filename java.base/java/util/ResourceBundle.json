{
  "packageName": "java.util",
  "simpleName": "ResourceBundle",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "parent",
      "comment": "The parent bundle of this bundle. The parent bundle is searched by getObject when this bundle does not contain a particular resource.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBaseBundleName",
      "comment": "Returns the base name of this bundle, if known, or null if unknown. If not null, then this is the value of the baseName parameter that was passed to the ResourceBundle.getBundle(...) method when the resource bundle was loaded.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)\"\u003e\u003ccode\u003egetBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The base name of the resource bundle, as provided to and expected by the \n\u003ccode\u003eResourceBundle.getBundle(...)\u003c/code\u003e methods."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getString",
      "comment": "Gets a string for the given key from this resource bundle or one of its parents. Calling this method is equivalent to calling (String) getObject(key).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key for the desired string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if no object for the given key can be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the object found for the given key is not a string"
        ],
        "return": [
          "the string for the given key"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getStringArray",
      "comment": "Gets a string array for the given key from this resource bundle or one of its parents. Calling this method is equivalent to calling (String[]) getObject(key).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key for the desired string array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if no object for the given key can be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the object found for the given key is not a string array"
        ],
        "return": [
          "the string array for the given key"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getObject",
      "comment": "Gets an object for the given key from this resource bundle or one of its parents. This method first tries to obtain the object from this resource bundle using handleGetObject. If not successful, and the parent resource bundle is not null, it calls the parent\u0027s getObject method. If still not successful, it throws a MissingResourceException.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key for the desired object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if no object for the given key can be found"
        ],
        "return": [
          "the object for the given key"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Locale",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLocale",
      "comment": "Returns the locale of this resource bundle. This method can be used after a call to getBundle() to determine whether the resource bundle returned really corresponds to the requested locale or is a fallback.",
      "tagMap": {
        "return": [
          "the locale of this resource bundle"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.ResourceBundle",
            "type": "Class"
          },
          "field": {
            "name": "parent"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setParent",
      "comment": "Sets the parent bundle of this bundle. The parent bundle is searched by getObject when this bundle does not contain a particular resource.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - this bundle\u0027s parent bundle."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getBundle",
      "comment": "Gets a resource bundle using the specified base name, the default locale, and the caller module. Calling this method is equivalent to calling getBundle(baseName, Locale.getDefault(), callerModule),",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#default_behavior\"\u003eResource Bundle Search and Loading Strategy\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#resource-bundle-modules\"\u003eResource Bundles and Named Modules\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if no resource bundle for the specified base name can be found"
        ],
        "return": [
          "a resource bundle for the given base name and the default locale"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.ResourceBundle$Control",
            "type": "Class"
          },
          "field": {
            "name": "control"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getBundle",
      "comment": "Returns a resource bundle using the specified base name, the default locale and the specified control. Calling this method is equivalent to calling  getBundle(baseName, Locale.getDefault(),\n           this.getClass().getClassLoader(), control),\n except that getClassLoader() is run with the security privileges of ResourceBundle. See getBundle for the complete description of the resource bundle loading process with a ResourceBundle.Control.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name",
          "\u003ccode\u003econtrol\u003c/code\u003e - the control which gives information for the resource bundle loading process"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e or \n\u003ccode\u003econtrol\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if no resource bundle for the specified base name can be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003econtrol\u003c/code\u003e doesn\u0027t perform properly (e.g., \n\u003ccode\u003econtrol.getCandidateLocales\u003c/code\u003e returns null.) Note that validation of \n\u003ccode\u003econtrol\u003c/code\u003e is performed as needed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this method is called in a named module"
        ],
        "return": [
          "a resource bundle for the given base name and the default locale"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getBundle",
      "comment": "Gets a resource bundle using the specified base name and locale, and the caller module. Calling this method is equivalent to calling getBundle(baseName, locale, callerModule),",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#default_behavior\"\u003eResource Bundle Search and Loading Strategy\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#resource-bundle-modules\"\u003eResource Bundles and Named Modules\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale for which a resource bundle is desired"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e or \n\u003ccode\u003elocale\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if no resource bundle for the specified base name can be found"
        ],
        "return": [
          "a resource bundle for the given base name and locale"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.lang.Module",
            "type": "Class"
          },
          "field": {
            "name": "module"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBundle",
      "comment": "Gets a resource bundle using the specified base name and the default locale on behalf of the specified module. This method is equivalent to calling getBundle(baseName, Locale.getDefault(), module)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/ResourceBundleProvider.html\" title\u003d\"interface in java.util.spi\"\u003e\u003ccode\u003eResourceBundleProvider\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#default_behavior\"\u003eResource Bundle Search and Loading Strategy\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#resource-bundle-modules\"\u003eResource Bundles and Named Modules\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name",
          "\u003ccode\u003emodule\u003c/code\u003e - the module for which the resource bundle is searched"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e or \n\u003ccode\u003emodule\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller is not the specified module and doesn\u0027t have \n\u003ccode\u003eRuntimePermission(\"getClassLoader\")\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if no resource bundle for the specified base name can be found in the specified module"
        ],
        "return": [
          "a resource bundle for the given base name and the default locale"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "targetLocale"
          }
        },
        {
          "type": {
            "name": "java.lang.Module",
            "type": "Class"
          },
          "field": {
            "name": "module"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBundle",
      "comment": "Gets a resource bundle using the specified base name and locale on behalf of the specified module. Resource bundles in named modules may be encapsulated. When the resource bundle is loaded from a service provider, the caller module must have an appropriate uses clause in its module descriptor to declare that the module uses of ResourceBundleProvider for the named resource bundle. Otherwise, it will load the resource bundles that are local in the given module as if calling Module.getResourceAsStream(String) or that are visible to the class loader of the given module as if calling ClassLoader.getResourceAsStream(String). When the resource bundle is loaded from the specified module, it is subject to the encapsulation rules specified by Module.getResourceAsStream. If the given module is an unnamed module, then this method is equivalent to calling getBundle(baseName, targetLocale, module.getClassLoader() to load resource bundles that are visible to the class loader of the given unnamed module. Custom ResourceBundleControlProvider implementations, if present, will only be invoked if the specified module is an unnamed module.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#default_behavior\"\u003eResource Bundle Search and Loading Strategy\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#resource-bundle-modules\"\u003eResource Bundles and Named Modules\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name",
          "\u003ccode\u003etargetLocale\u003c/code\u003e - the locale for which a resource bundle is desired",
          "\u003ccode\u003emodule\u003c/code\u003e - the module for which the resource bundle is searched"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e, \n\u003ccode\u003etargetLocale\u003c/code\u003e, or \n\u003ccode\u003emodule\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and the caller is not the specified module and doesn\u0027t have \n\u003ccode\u003eRuntimePermission(\"getClassLoader\")\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if no resource bundle for the specified base name and locale can be found in the specified \n\u003ccode\u003emodule\u003c/code\u003e"
        ],
        "return": [
          "a resource bundle for the given base name and locale in the module"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "targetLocale"
          }
        },
        {
          "type": {
            "name": "java.util.ResourceBundle$Control",
            "type": "Class"
          },
          "field": {
            "name": "control"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getBundle",
      "comment": "Returns a resource bundle using the specified base name, target locale and control, and the caller\u0027s class loader. Calling this method is equivalent to calling  getBundle(baseName, targetLocale, this.getClass().getClassLoader(),\n           control),\n except that getClassLoader() is run with the security privileges of ResourceBundle. See getBundle for the complete description of the resource bundle loading process with a ResourceBundle.Control.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name",
          "\u003ccode\u003etargetLocale\u003c/code\u003e - the locale for which a resource bundle is desired",
          "\u003ccode\u003econtrol\u003c/code\u003e - the control which gives information for the resource bundle loading process"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e, \n\u003ccode\u003elocales\u003c/code\u003e or \n\u003ccode\u003econtrol\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if no resource bundle for the specified base name in any of the \n\u003ccode\u003elocales\u003c/code\u003e can be found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003econtrol\u003c/code\u003e doesn\u0027t perform properly (e.g., \n\u003ccode\u003econtrol.getCandidateLocales\u003c/code\u003e returns null.) Note that validation of \n\u003ccode\u003econtrol\u003c/code\u003e is performed as needed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this method is called in a named module"
        ],
        "return": [
          "a resource bundle for the given base name and a \n\u003ccode\u003eLocale\u003c/code\u003e in \n\u003ccode\u003elocales\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "locale"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "loader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBundle",
      "comment": "Gets a resource bundle using the specified base name, locale, and class loader. When this method is called from a named module and the given loader is the class loader of the caller module, this is equivalent to calling:  getBundle(baseName, targetLocale, callerModule)\n otherwise, this is equivalent to calling:  getBundle(baseName, targetLocale, loader, control)\n where control is the default instance of ResourceBundle.Control unless a Control instance is provided by ResourceBundleControlProvider SPI. Refer to the description of modifying the default behavior. The following describes the default behavior. Resource Bundle Search and Loading Strategy getBundle uses the base name, the specified locale, and the default locale (obtained from Locale.getDefault) to generate a sequence of candidate bundle names. If the specified locale\u0027s language, script, country, and variant are all empty strings, then the base name is the only candidate bundle name. Otherwise, a list of candidate locales is generated from the attribute values of the specified locale (language, script, country and variant) and appended to the base name. Typically, this will look like the following:      baseName + \"_\" + language + \"_\" + script + \"_\" + country + \"_\" + variant\n     baseName + \"_\" + language + \"_\" + script + \"_\" + country\n     baseName + \"_\" + language + \"_\" + script\n     baseName + \"_\" + language + \"_\" + country + \"_\" + variant\n     baseName + \"_\" + language + \"_\" + country\n     baseName + \"_\" + language\n Candidate bundle names where the final component is an empty string are omitted, along with the underscore. For example, if country is an empty string, the second and the fifth candidate bundle names above would be omitted. Also, if script is an empty string, the candidate names including script are omitted. For example, a locale with language \"de\" and variant \"JAVA\" will produce candidate names with base name \"MyResource\" below.      MyResource_de__JAVA\n     MyResource_de\n In the case that the variant contains one or more underscores (\u0027_\u0027), a sequence of bundle names generated by truncating the last underscore and the part following it is inserted after a candidate bundle name with the original variant. For example, for a locale with language \"en\", script \"Latn, country \"US\" and variant \"WINDOWS_VISTA\", and bundle base name \"MyResource\", the list of candidate bundle names below is generated:  MyResource_en_Latn_US_WINDOWS_VISTA\n MyResource_en_Latn_US_WINDOWS\n MyResource_en_Latn_US\n MyResource_en_Latn\n MyResource_en_US_WINDOWS_VISTA\n MyResource_en_US_WINDOWS\n MyResource_en_US\n MyResource_en\n Note: For some Locales, the list of candidate bundle names contains extra names, or the order of bundle names is slightly modified. See the description of the default implementation of getCandidateLocales for details. getBundle then iterates over the candidate bundle names to find the first one for which it can instantiate an actual resource bundle. It uses the default controls\u0027 getFormats method, which generates two bundle names for each generated name, the first a class name and the second a properties file name. For each candidate bundle name, it attempts to create a resource bundle: First, it attempts to load a class using the generated class name. If such a class can be found and loaded using the specified class loader, is assignment compatible with ResourceBundle, is accessible from ResourceBundle, and can be instantiated, getBundle creates a new instance of this class and uses it as the result resource bundle. Otherwise, getBundle attempts to locate a property resource file using the generated properties file name. It generates a path name from the candidate bundle name by replacing all \".\" characters with \"/\" and appending the string \".properties\". It attempts to find a \"resource\" with this name using ClassLoader.getResource. (Note that a \"resource\" in the sense of getResource has nothing to do with the contents of a resource bundle, it is just a container of data, such as a file.) If it finds a \"resource\", it attempts to create a new PropertyResourceBundle instance from its contents. If successful, this instance becomes the result resource bundle. This continues until a result resource bundle is instantiated or the list of candidate bundle names is exhausted. If no matching resource bundle is found, the default control\u0027s getFallbackLocale method is called, which returns the current default locale. A new sequence of candidate locale names is generated using this locale and searched again, as above. If still no result bundle is found, the base name alone is looked up. If this still fails, a MissingResourceException is thrown. Once a result resource bundle has been found, its parent chain is instantiated. If the result bundle already has a parent (perhaps because it was returned from a cache) the chain is complete. Otherwise, getBundle examines the remainder of the candidate locale list that was used during the pass that generated the result resource bundle. (As before, candidate bundle names where the final component is an empty string are omitted.) When it comes to the end of the candidate list, it tries the plain bundle name. With each of the candidate bundle names it attempts to instantiate a resource bundle (first looking for a class and then a properties file, as described above). Whenever it succeeds, it calls the previously instantiated resource bundle\u0027s setParent method with the new resource bundle. This continues until the list of names is exhausted or the current bundle already has a non-null parent. Once the parent chain is complete, the bundle is returned. Note: getBundle caches instantiated resource bundles and might return the same resource bundle instance multiple times. Note:The baseName argument should be a fully qualified class name. However, for compatibility with earlier versions, Java SE Runtime Environments do not verify this, and so it is possible to access PropertyResourceBundles by specifying a path name (using \"/\") instead of a fully qualified class name (using \".\"). Example: The following class and property files are provided: MyResources.class MyResources.properties MyResources_fr.properties MyResources_fr_CH.class MyResources_fr_CH.properties MyResources_en.properties MyResources_es_ES.class The contents of all files are valid (that is, public non-abstract subclasses of ResourceBundle for the \".class\" files, syntactically correct \".properties\" files). The default locale is Locale(\"en\", \"GB\"). Calling getBundle with the locale arguments below will instantiate resource bundles as follows: getBundle() locale to resource bundle mapping Locale Resource bundle Locale(\"fr\", \"CH\") MyResources_fr_CH.class, parent MyResources_fr.properties, parent MyResources.class Locale(\"fr\", \"FR\") MyResources_fr.properties, parent MyResources.class Locale(\"de\", \"DE\") MyResources_en.properties, parent MyResources.class Locale(\"en\", \"US\") MyResources_en.properties, parent MyResources.class Locale(\"es\", \"ES\") MyResources_es_ES.class, parent MyResources.class The file MyResources_fr_CH.properties is never used because it is hidden by the MyResources_fr_CH.class. Likewise, MyResources.properties is also hidden by MyResources.class.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#resource-bundle-modules\"\u003eResource Bundles and Named Modules\u003c/a\u003e"
        ],
        "apiNote": [
          "If the caller module is a named module and the given \n\u003ccode\u003eloader\u003c/code\u003e is the caller module\u0027s class loader, this method is equivalent to \n\u003ccode\u003egetBundle(baseName, locale)\u003c/code\u003e; otherwise, it may not find resource bundles from named modules. Use \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.html#getBundle(java.lang.String,java.util.Locale,java.lang.Module)\"\u003e\u003ccode\u003egetBundle(String, Locale, Module)\u003c/code\u003e\u003c/a\u003e to load resource bundles on behalf on a specific module instead."
        ],
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name",
          "\u003ccode\u003elocale\u003c/code\u003e - the locale for which a resource bundle is desired",
          "\u003ccode\u003eloader\u003c/code\u003e - the class loader from which to load the resource bundle"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e, \n\u003ccode\u003elocale\u003c/code\u003e, or \n\u003ccode\u003eloader\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if no resource bundle for the specified base name can be found"
        ],
        "return": [
          "a resource bundle for the given base name and locale"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.ResourceBundle",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "baseName"
          }
        },
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "targetLocale"
          }
        },
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "loader"
          }
        },
        {
          "type": {
            "name": "java.util.ResourceBundle$Control",
            "type": "Class"
          },
          "field": {
            "name": "control"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getBundle",
      "comment": "Returns a resource bundle using the specified base name, target locale, class loader and control. Unlike the getBundle factory methods with no control argument, the given control specifies how to locate and instantiate resource bundles. Conceptually, the bundle loading process with the given control is performed in the following steps. This factory method looks up the resource bundle in the cache for the specified baseName, targetLocale and loader. If the requested resource bundle instance is found in the cache and the time-to-live periods of the instance and all of its parent instances have not expired, the instance is returned to the caller. Otherwise, this factory method proceeds with the loading process below. The control.getFormats method is called to get resource bundle formats to produce bundle or resource names. The strings \"java.class\" and \"java.properties\" designate class-based and property-based resource bundles, respectively. Other strings starting with \"java.\" are reserved for future extensions and must not be used for application-defined formats. Other strings designate application-defined formats. The control.getCandidateLocales method is called with the target locale to get a list of candidate Locales for which resource bundles are searched. The control.newBundle method is called to instantiate a ResourceBundle for the base bundle name, a candidate locale, and a format. (Refer to the note on the cache lookup below.) This step is iterated over all combinations of the candidate locales and formats until the newBundle method returns a ResourceBundle instance or the iteration has used up all the combinations. For example, if the candidate locales are Locale(\"de\", \"DE\"), Locale(\"de\") and Locale(\"\") and the formats are \"java.class\" and \"java.properties\", then the following is the sequence of locale-format combinations to be used to call control.newBundle. locale-format combinations for newBundle Index Locale format 1 Locale(\"de\", \"DE\") java.class 2 Locale(\"de\", \"DE\") java.properties 3 Locale(\"de\") java.class 4 Locale(\"de\") java.properties 5 Locale(\"\") java.class 6 Locale(\"\") java.properties If the previous step has found no resource bundle, proceed to Step 6. If a bundle has been found that is a base bundle (a bundle for Locale(\"\")), and the candidate locale list only contained Locale(\"\"), return the bundle to the caller. If a bundle has been found that is a base bundle, but the candidate locale list contained locales other than Locale(\"\"), put the bundle on hold and proceed to Step 6. If a bundle has been found that is not a base bundle, proceed to Step 7. The control.getFallbackLocale method is called to get a fallback locale (alternative to the current target locale) to try further finding a resource bundle. If the method returns a non-null locale, it becomes the next target locale and the loading process starts over from Step 3. Otherwise, if a base bundle was found and put on hold in a previous Step 5, it is returned to the caller now. Otherwise, a MissingResourceException is thrown. At this point, we have found a resource bundle that\u0027s not the base bundle. If this bundle set its parent during its instantiation, it is returned to the caller. Otherwise, its parent chain is instantiated based on the list of candidate locales from which it was found. Finally, the bundle is returned to the caller. During the resource bundle loading process above, this factory method looks up the cache before calling the control.newBundle method. If the time-to-live period of the resource bundle found in the cache has expired, the factory method calls the control.needsReload method to determine whether the resource bundle needs to be reloaded. If reloading is required, the factory method calls control.newBundle to reload the resource bundle. If control.newBundle returns null, the factory method puts a dummy resource bundle in the cache as a mark of nonexistent resource bundles in order to avoid lookup overhead for subsequent requests. Such dummy resource bundles are under the same expiration control as specified by control. All resource bundles loaded are cached by default. Refer to control.getTimeToLive for details. The following is an example of the bundle loading process with the default ResourceBundle.Control implementation. Conditions: Base bundle name: foo.bar.Messages Requested Locale: Locale.ITALY Default Locale: Locale.FRENCH Available resource bundles: foo/bar/Messages_fr.properties and foo/bar/Messages.properties First, getBundle tries loading a resource bundle in the following sequence. class foo.bar.Messages_it_IT file foo/bar/Messages_it_IT.properties class foo.bar.Messages_it file foo/bar/Messages_it.properties class foo.bar.Messages file foo/bar/Messages.properties At this point, getBundle finds foo/bar/Messages.properties, which is put on hold because it\u0027s the base bundle. getBundle calls control.getFallbackLocale(\"foo.bar.Messages\", Locale.ITALY) which returns Locale.FRENCH. Next, getBundle tries loading a bundle in the following sequence. class foo.bar.Messages_fr file foo/bar/Messages_fr.properties class foo.bar.Messages file foo/bar/Messages.properties getBundle finds foo/bar/Messages_fr.properties and creates a ResourceBundle instance. Then, getBundle sets up its parent chain from the list of the candidate locales. Only foo/bar/Messages.properties is found in the list and getBundle creates a ResourceBundle instance that becomes the parent of the instance for foo/bar/Messages_fr.properties.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebaseName\u003c/code\u003e - the base name of the resource bundle, a fully qualified class name",
          "\u003ccode\u003etargetLocale\u003c/code\u003e - the locale for which a resource bundle is desired",
          "\u003ccode\u003eloader\u003c/code\u003e - the class loader from which to load the resource bundle",
          "\u003ccode\u003econtrol\u003c/code\u003e - the control which gives information for the resource bundle loading process"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebaseName\u003c/code\u003e, \n\u003ccode\u003etargetLocale\u003c/code\u003e, \n\u003ccode\u003eloader\u003c/code\u003e, or \n\u003ccode\u003econtrol\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003eMissingResourceException\u003c/a\u003e\u003c/code\u003e - if no resource bundle for the specified base name can be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003econtrol\u003c/code\u003e doesn\u0027t perform properly (e.g., \n\u003ccode\u003econtrol.getCandidateLocales\u003c/code\u003e returns null.) Note that validation of \n\u003ccode\u003econtrol\u003c/code\u003e is performed as needed.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this method is called in a named module"
        ],
        "return": [
          "a resource bundle for the given base name and locale"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "clearCache",
      "comment": "Removes all resource bundles from the cache that have been loaded by the caller\u0027s module.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#getTimeToLive(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003eResourceBundle.Control.getTimeToLive(String,Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "field": {
            "name": "loader"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "clearCache",
      "comment": "Removes all resource bundles from the cache that have been loaded by the given class loader.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ResourceBundle.Control.html#getTimeToLive(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003eResourceBundle.Control.getTimeToLive(String,Locale)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eloader\u003c/code\u003e - the class loader"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eloader\u003c/code\u003e is null"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "handleGetObject",
      "comment": "Gets an object for the given key from this resource bundle. Returns null if this resource bundle does not contain an object for the given key.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key for the desired object"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the object for the given key, or null"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getKeys",
      "comment": "Returns an enumeration of the keys.",
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eEnumeration\u003c/code\u003e of the keys contained in this \n\u003ccode\u003eResourceBundle\u003c/code\u003e and its parent bundles."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "containsKey",
      "comment": "Determines whether the given key is contained in this ResourceBundle or its parent bundles.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the resource \n\u003ccode\u003ekey\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ekey\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given \n\u003ccode\u003ekey\u003c/code\u003e is contained in this \n\u003ccode\u003eResourceBundle\u003c/code\u003e or its parent bundles; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "keySet",
      "comment": "Returns a Set of all keys contained in this ResourceBundle and its parent bundles.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eSet\u003c/code\u003e of all keys contained in this \n\u003ccode\u003eResourceBundle\u003c/code\u003e and its parent bundles."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "handleKeySet",
      "comment": "Returns a Set of the keys contained only in this ResourceBundle. The default implementation returns a Set of the keys returned by the getKeys method except for the ones for which the handleGetObject method returns null. Once the Set has been created, the value is kept in this ResourceBundle in order to avoid producing the same Set in subsequent calls. Subclasses can override this method for faster handling.",
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eSet\u003c/code\u003e of the keys contained only in this \n\u003ccode\u003eResourceBundle\u003c/code\u003e"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Sole constructor. (For invocation by subclass constructors, typically implicit.)",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "java.util.ResourceBundle$Control"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.util.ResourceBundle",
  "comment": "Resource bundles contain locale-specific objects. When your program needs a locale-specific resource, a \n\u003ccode\u003eString\u003c/code\u003e for example, your program can load it from the resource bundle that is appropriate for the current user\u0027s locale. In this way, you can write program code that is largely independent of the user\u0027s locale isolating most, if not all, of the locale-specific information in resource bundles. \n\u003cp\u003e This allows you to write programs that can: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e be easily localized, or translated, into different languages \u003c/li\u003e\n \u003cli\u003e handle multiple locales at once \u003c/li\u003e\n \u003cli\u003e be easily modified later to support even more locales \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Resource bundles belong to families whose members share a common base name, but whose names also have additional components that identify their locales. For example, the base name of a family of resource bundles might be \"MyResources\". The family should have a default resource bundle which simply has the same name as its family - \"MyResources\" - and will be used as the bundle of last resort if a specific locale is not supported. The family can then provide as many locale-specific members as needed, for example a German one named \"MyResources_de\". \u003c/p\u003e\n\u003cp\u003e Each resource bundle in a family contains the same items, but the items have been translated for the locale represented by that resource bundle. For example, both \"MyResources\" and \"MyResources_de\" may have a \u003ccode\u003eString\u003c/code\u003e that\u0027s used on a button for canceling operations. In \"MyResources\" the \u003ccode\u003eString\u003c/code\u003e may contain \"Cancel\" and in \"MyResources_de\" it may contain \"Abbrechen\". \u003c/p\u003e\n\u003cp\u003e If there are different resources for different countries, you can make specializations: for example, \"MyResources_de_CH\" contains objects for the German language (de) in Switzerland (CH). If you want to only modify some of the resources in the specialization, you can do so. \u003c/p\u003e\n\u003cp\u003e When your program needs a locale-specific object, it loads the \u003ccode\u003eResourceBundle\u003c/code\u003e class using the \u003ca href\u003d\"#getBundle(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003egetBundle\u003c/code\u003e\u003c/a\u003e method: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e ResourceBundle myResources \u003d\n      ResourceBundle.getBundle(\"MyResources\", currentLocale);\n \u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Resource bundles contain key/value pairs. The keys uniquely identify a locale-specific object in the bundle. Here\u0027s an example of a \u003ccode\u003eListResourceBundle\u003c/code\u003e that contains two key/value pairs: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e public class MyResources extends ListResourceBundle {\n     protected Object[][] getContents() {\n         return new Object[][] {\n             // LOCALIZE THE SECOND STRING OF EACH ARRAY (e.g., \"OK\")\n             {\"OkKey\", \"OK\"},\n             {\"CancelKey\", \"Cancel\"},\n             // END OF MATERIAL TO LOCALIZE\n        };\n     }\n }\n \u003c/pre\u003e \n\u003c/blockquote\u003e Keys are always \n\u003ccode\u003eString\u003c/code\u003es. In this example, the keys are \"OkKey\" and \"CancelKey\". In the above example, the values are also \n\u003ccode\u003eString\u003c/code\u003es--\"OK\" and \"Cancel\"--but they don\u0027t have to be. The values can be any type of object. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e You retrieve an object from resource bundle using the appropriate getter method. Because \"OkKey\" and \"CancelKey\" are both strings, you would use \u003ccode\u003egetString\u003c/code\u003e to retrieve them: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e button1 \u003d new Button(myResources.getString(\"OkKey\"));\n button2 \u003d new Button(myResources.getString(\"CancelKey\"));\n \u003c/pre\u003e \n\u003c/blockquote\u003e The getter methods all require the key as an argument and return the object if found. If the object is not found, the getter method throws a \n\u003ccode\u003eMissingResourceException\u003c/code\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Besides \u003ccode\u003egetString\u003c/code\u003e, \u003ccode\u003eResourceBundle\u003c/code\u003e also provides a method for getting string arrays, \u003ccode\u003egetStringArray\u003c/code\u003e, as well as a generic \u003ccode\u003egetObject\u003c/code\u003e method for any other type of object. When using \u003ccode\u003egetObject\u003c/code\u003e, you\u0027ll have to cast the result to the appropriate type. For example: \u003c/p\u003e\n\u003cblockquote\u003e \n \u003cpre\u003e int[] myIntegers \u003d (int[]) myResources.getObject(\"intList\");\n \u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The Java Platform provides two subclasses of \u003ccode\u003eResourceBundle\u003c/code\u003e, \u003ccode\u003eListResourceBundle\u003c/code\u003e and \u003ccode\u003ePropertyResourceBundle\u003c/code\u003e, that provide a fairly simple way to create resources. As you saw briefly in a previous example, \u003ccode\u003eListResourceBundle\u003c/code\u003e manages its resource as a list of key/value pairs. \u003ccode\u003ePropertyResourceBundle\u003c/code\u003e uses a properties file to manage its resources. \u003c/p\u003e\n\u003cp\u003e If \u003ccode\u003eListResourceBundle\u003c/code\u003e or \u003ccode\u003ePropertyResourceBundle\u003c/code\u003e do not suit your needs, you can write your own \u003ccode\u003eResourceBundle\u003c/code\u003e subclass. Your subclasses must override two methods: \u003ccode\u003ehandleGetObject\u003c/code\u003e and \u003ccode\u003egetKeys()\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The implementation of a \u003ccode\u003eResourceBundle\u003c/code\u003e subclass must be thread-safe if it\u0027s simultaneously used by multiple threads. The default implementations of the non-abstract methods in this class, and the methods in the direct known concrete subclasses \u003ccode\u003eListResourceBundle\u003c/code\u003e and \u003ccode\u003ePropertyResourceBundle\u003c/code\u003e are thread-safe. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"resource-bundle-modules\"\u003eResource Bundles and Named Modules\u003c/a\u003e\u003c/h2\u003e Resource bundles can be deployed in modules in the following ways: \n\u003ch3\u003eResource bundles together with an application\u003c/h3\u003e Resource bundles can be deployed together with an application in the same module. In that case, the resource bundles are loaded by code in the module by calling the \n\u003ca href\u003d\"#getBundle(java.lang.String)\"\u003e\u003ccode\u003egetBundle(String)\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"#getBundle(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003egetBundle(String, Locale)\u003c/code\u003e\u003c/a\u003e method. \n\u003ch3\u003e\u003ca id\u003d\"service-providers\"\u003eResource bundles as service providers\u003c/a\u003e\u003c/h3\u003e Resource bundles can be deployed in one or more \n\u003cem\u003eservice provider modules\u003c/em\u003e and they can be located using \n\u003ca href\u003d\"ServiceLoader.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eServiceLoader\u003c/code\u003e\u003c/a\u003e. A \n\u003ca href\u003d\"spi/ResourceBundleProvider.html\" title\u003d\"interface in java.util.spi\"\u003eservice\u003c/a\u003e interface or class must be defined. The caller module declares that it uses the service, the service provider modules declare that they provide implementations of the service. Refer to \n\u003ca href\u003d\"spi/ResourceBundleProvider.html\" title\u003d\"interface in java.util.spi\"\u003e\u003ccode\u003eResourceBundleProvider\u003c/code\u003e\u003c/a\u003e for developing resource bundle services and deploying resource bundle providers. The module obtaining the resource bundle can be a resource bundle provider itself; in which case this module only locates the resource bundle via service provider mechanism. \n\u003cp\u003eA \u003ca href\u003d\"spi/ResourceBundleProvider.html\" title\u003d\"interface in java.util.spi\"\u003eresource bundle provider\u003c/a\u003e can provide resource bundles in any format such XML which replaces the need of \u003ca href\u003d\"ResourceBundle.Control.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle.Control\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003ch3\u003e\u003ca id\u003d\"other-modules\"\u003eResource bundles in other modules and class path\u003c/a\u003e\u003c/h3\u003e Resource bundles in a named module may be \n\u003cem\u003eencapsulated\u003c/em\u003e so that it cannot be located by code in other modules. Resource bundles in unnamed modules and class path are open for any module to access. Resource bundle follows the resource encapsulation rules as specified in \n\u003ca href\u003d\"../lang/Module.html#getResourceAsStream(java.lang.String)\"\u003e\u003ccode\u003eModule.getResourceAsStream(String)\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003eThe \u003ccode\u003egetBundle\u003c/code\u003e factory methods with no \u003ccode\u003eControl\u003c/code\u003e parameter locate and load resource bundles from \u003ca href\u003d\"spi/ResourceBundleProvider.html\" title\u003d\"interface in java.util.spi\"\u003eservice providers\u003c/a\u003e. It may continue the search as if calling \u003ca href\u003d\"../lang/Module.html#getResourceAsStream(java.lang.String)\"\u003e\u003ccode\u003eModule.getResourceAsStream(String)\u003c/code\u003e\u003c/a\u003e to find the named resource from a given module and calling \u003ca href\u003d\"../lang/ClassLoader.html#getResourceAsStream(java.lang.String)\"\u003e\u003ccode\u003eClassLoader.getResourceAsStream(String)\u003c/code\u003e\u003c/a\u003e; refer to the specification of the \u003ccode\u003egetBundle\u003c/code\u003e method for details. Only non-encapsulated resource bundles of \"\u003ccode\u003ejava.class\u003c/code\u003e\" or \"\u003ccode\u003ejava.properties\u003c/code\u003e\" format are searched. \u003c/p\u003e\n\u003cp\u003eIf the caller module is a \u003ca href\u003d\"../../../java.base/java/util/spi/ResourceBundleProvider.html#obtain-resource-bundle\"\u003e resource bundle provider\u003c/a\u003e, it does not fall back to the class loader search. \u003c/p\u003e\n\u003ch3\u003eResource bundles in automatic modules\u003c/h3\u003e A common format of resource bundles is in \n\u003ca href\u003d\"PropertyResourceBundle.html\" title\u003d\"class in java.util\"\u003e.properties\u003c/a\u003e file format. Typically \n\u003ccode\u003e.properties\u003c/code\u003e resource bundles are packaged in a JAR file. Resource bundle only JAR file can be readily deployed as an \n\u003ca href\u003d\"../../../java.base/java/lang/module/ModuleFinder.html#automatic-modules\"\u003e automatic module\u003c/a\u003e. For example, if the JAR file contains the entry \"\n\u003ccode\u003ep/q/Foo_ja.properties\u003c/code\u003e\" and no \n\u003ccode\u003e.class\u003c/code\u003e entry, when resolved and defined as an automatic module, no package is derived for this module. This allows resource bundles in \n\u003ccode\u003e.properties\u003c/code\u003e format packaged in one or more JAR files that may contain entries in the same directory and can be resolved successfully as automatic modules. \n\u003ch3\u003eResourceBundle.Control\u003c/h3\u003e The \n\u003ca href\u003d\"ResourceBundle.Control.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle.Control\u003c/code\u003e\u003c/a\u003e class provides information necessary to perform the bundle loading process by the \n\u003ccode\u003egetBundle\u003c/code\u003e factory methods that take a \n\u003ccode\u003eResourceBundle.Control\u003c/code\u003e instance. You can implement your own subclass in order to enable non-standard resource bundle formats, change the search strategy, or define caching parameters. Refer to the descriptions of the class and the \n\u003ca href\u003d\"#getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle.Control)\"\u003e\u003ccode\u003egetBundle\u003c/code\u003e\u003c/a\u003e factory method for details. \n\u003cp\u003e \u003ca href\u003d\"ResourceBundle.Control.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle.Control\u003c/code\u003e\u003c/a\u003e is designed for an application deployed in an unnamed module, for example to support resource bundles in non-standard formats or package localized resources in a non-traditional convention. \u003ca href\u003d\"spi/ResourceBundleProvider.html\" title\u003d\"interface in java.util.spi\"\u003e\u003ccode\u003eResourceBundleProvider\u003c/code\u003e\u003c/a\u003e is the replacement for \u003ccode\u003eResourceBundle.Control\u003c/code\u003e when migrating to modules. \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e will be thrown when a factory method that takes the \u003ccode\u003eResourceBundle.Control\u003c/code\u003e parameter is called. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"modify_default_behavior\"\u003eFor the \u003ccode\u003egetBundle\u003c/code\u003e factory\u003c/a\u003e methods that take no \u003ca href\u003d\"ResourceBundle.Control.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle.Control\u003c/code\u003e\u003c/a\u003e instance, their \u003ca href\u003d\"#default_behavior\"\u003e default behavior\u003c/a\u003e of resource bundle loading can be modified with custom \u003ca href\u003d\"spi/ResourceBundleControlProvider.html\" title\u003d\"interface in java.util.spi\"\u003e\u003ccode\u003eResourceBundleControlProvider\u003c/code\u003e\u003c/a\u003e implementations. If any of the providers provides a \u003ca href\u003d\"ResourceBundle.Control.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle.Control\u003c/code\u003e\u003c/a\u003e for the given base name, that \u003ca href\u003d\"ResourceBundle.Control.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle.Control\u003c/code\u003e\u003c/a\u003e will be used instead of the default \u003ca href\u003d\"ResourceBundle.Control.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle.Control\u003c/code\u003e\u003c/a\u003e. If there is more than one service provider for supporting the same base name, the first one returned from \u003ca href\u003d\"ServiceLoader.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eServiceLoader\u003c/code\u003e\u003c/a\u003e will be used. A custom \u003ca href\u003d\"ResourceBundle.Control.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eResourceBundle.Control\u003c/code\u003e\u003c/a\u003e implementation is ignored by named modules. \u003c/p\u003e\n\u003ch2\u003eCache Management\u003c/h2\u003e Resource bundle instances created by the \n\u003ccode\u003egetBundle\u003c/code\u003e factory methods are cached by default, and the factory methods return the same resource bundle instance multiple times if it has been cached. \n\u003ccode\u003egetBundle\u003c/code\u003e clients may clear the cache, manage the lifetime of cached resource bundle instances using time-to-live values, or specify not to cache resource bundle instances. Refer to the descriptions of the \n\u003ca href\u003d\"#getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle.Control)\"\u003e{@code getBundle} factory method\u003c/a\u003e, \n\u003ca href\u003d\"#clearCache(java.lang.ClassLoader)\"\u003e\u003ccode\u003eclearCache\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"ResourceBundle.Control.html#getTimeToLive(java.lang.String,java.util.Locale)\"\u003e\u003ccode\u003eResourceBundle.Control.getTimeToLive\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"ResourceBundle.Control.html#needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)\"\u003e\u003ccode\u003eResourceBundle.Control.needsReload\u003c/code\u003e\u003c/a\u003e for details. \n\u003ch2\u003eExample\u003c/h2\u003e The following is a very simple example of a \n\u003ccode\u003eResourceBundle\u003c/code\u003e subclass, \n\u003ccode\u003eMyResources\u003c/code\u003e, that manages two resources (for a larger number of resources you would probably use a \n\u003ccode\u003eMap\u003c/code\u003e). Notice that you don\u0027t need to supply a value if a \"parent-level\" \n\u003ccode\u003eResourceBundle\u003c/code\u003e handles the same key with the same value (as for the okKey below). \n\u003cblockquote\u003e \n \u003cpre\u003e // default (English language, United States)\n public class MyResources extends ResourceBundle {\n     public Object handleGetObject(String key) {\n         if (key.equals(\"okKey\")) return \"Ok\";\n         if (key.equals(\"cancelKey\")) return \"Cancel\";\n         return null;\n     }\n\n     public Enumeration\u0026lt;String\u0026gt; getKeys() {\n         return Collections.enumeration(keySet());\n     }\n\n     // Overrides handleKeySet() so that the getKeys() implementation\n     // can rely on the keySet() value.\n     protected Set\u0026lt;String\u0026gt; handleKeySet() {\n         return new HashSet\u0026lt;String\u0026gt;(Arrays.asList(\"okKey\", \"cancelKey\"));\n     }\n }\n\n // German language\n public class MyResources_de extends MyResources {\n     public Object handleGetObject(String key) {\n         // don\u0027t need okKey, since parent level handles it.\n         if (key.equals(\"cancelKey\")) return \"Abbrechen\";\n         return null;\n     }\n\n     protected Set\u0026lt;String\u0026gt; handleKeySet() {\n         return new HashSet\u0026lt;String\u0026gt;(Arrays.asList(\"cancelKey\"));\n     }\n }\n \u003c/pre\u003e \n\u003c/blockquote\u003e You do not have to restrict yourself to using a single family of \n\u003ccode\u003eResourceBundle\u003c/code\u003es. For example, you could have a set of bundles for exception messages, \n\u003ccode\u003eExceptionResources\u003c/code\u003e (\n\u003ccode\u003eExceptionResources_fr\u003c/code\u003e, \n\u003ccode\u003eExceptionResources_de\u003c/code\u003e, ...), and one for widgets, \n\u003ccode\u003eWidgetResource\u003c/code\u003e (\n\u003ccode\u003eWidgetResources_fr\u003c/code\u003e, \n\u003ccode\u003eWidgetResources_de\u003c/code\u003e, ...); breaking up the resources however you like.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ListResourceBundle.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eListResourceBundle\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/PropertyResourceBundle.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003ePropertyResourceBundle\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/MissingResourceException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eMissingResourceException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/spi/ResourceBundleProvider.html\" title\u003d\"interface in java.util.spi\"\u003e\u003ccode\u003eResourceBundleProvider\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}