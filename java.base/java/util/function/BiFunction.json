{
  "packageName": "java.util.function",
  "simpleName": "BiFunction",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "java.util.function.BiFunction",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.function.BiFunction",
            "name": "T",
            "type": "Variable"
          },
          "field": {
            "name": "t"
          }
        },
        {
          "type": {
            "owner": "java.util.function.BiFunction",
            "name": "U",
            "type": "Variable"
          },
          "field": {
            "name": "u"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "apply",
      "comment": "Applies this function to the given arguments.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the first function argument",
          "\u003ccode\u003eu\u003c/code\u003e - the second function argument"
        ],
        "return": [
          "the function result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.BiFunction",
        "parameters": [
          {
            "owner": "java.util.function.BiFunction",
            "name": "T",
            "type": "Variable"
          },
          {
            "owner": "java.util.function.BiFunction",
            "name": "U",
            "type": "Variable"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.function.BiFunction",
                    "name": "R",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "V",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "after"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "andThen",
      "comment": "Returns a composed function that first applies this function to its input, and then applies the after function to the result. If evaluation of either function throws an exception, it is relayed to the caller of the composed function.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eV\u003c/code\u003e - the type of output of the \n\u003ccode\u003eafter\u003c/code\u003e function, and of the composed function"
        ],
        "param": [
          "\u003ccode\u003eafter\u003c/code\u003e - the function to apply after this function is applied"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if after is null"
        ],
        "return": [
          "a composed function that first applies this function and then applies the \n\u003ccode\u003eafter\u003c/code\u003e function"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    },
    {
      "name": "U",
      "type": "Variable"
    },
    {
      "name": "R",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.function.BiFunction",
  "comment": "Represents a function that accepts two arguments and produces a result. This is the two-arity specialization of \n\u003ca href\u003d\"Function.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003eFunction\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html\"\u003efunctional interface\u003c/a\u003e whose functional method is \u003ca href\u003d\"#apply(T,U)\"\u003e\u003ccode\u003eapply(Object, Object)\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/Function.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003eFunction\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}