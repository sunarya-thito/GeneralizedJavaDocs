{
  "packageName": "java.util.function",
  "simpleName": "Consumer",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.function.Consumer",
            "name": "T",
            "type": "Variable"
          },
          "field": {
            "name": "t"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "accept",
      "comment": "Performs this operation on the given argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the input argument"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Consumer",
        "parameters": [
          {
            "owner": "java.util.function.Consumer",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.function.Consumer",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "after"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "andThen",
      "comment": "Returns a composed Consumer that performs, in sequence, this operation followed by the after operation. If performing either operation throws an exception, it is relayed to the caller of the composed operation. If performing this operation throws an exception, the after operation will not be performed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eafter\u003c/code\u003e - the operation to perform after this operation"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eafter\u003c/code\u003e is null"
        ],
        "return": [
          "a composed \n\u003ccode\u003eConsumer\u003c/code\u003e that performs in sequence this operation followed by the \n\u003ccode\u003eafter\u003c/code\u003e operation"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.function.Consumer",
  "comment": "Represents an operation that accepts a single input argument and returns no result. Unlike most other functional interfaces, \n\u003ccode\u003eConsumer\u003c/code\u003e is expected to operate via side-effects. \n\u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html\"\u003efunctional interface\u003c/a\u003e whose functional method is \u003ca href\u003d\"#accept(T)\"\u003e\u003ccode\u003eaccept(Object)\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.8"
    ]
  }
}