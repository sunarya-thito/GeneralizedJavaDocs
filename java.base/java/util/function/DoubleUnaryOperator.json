{
  "packageName": "java.util.function",
  "simpleName": "DoubleUnaryOperator",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "double",
            "type": "Class"
          },
          "name": "operand",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "applyAsDouble",
      "comment": "Applies this operator to the given operand.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eoperand\u003c/code\u003e - the operand"
        ],
        "return": [
          "the operator result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.DoubleUnaryOperator",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.DoubleUnaryOperator",
            "type": "Class"
          },
          "name": "before",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "compose",
      "comment": "Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result. If evaluation of either operator throws an exception, it is relayed to the caller of the composed operator.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/DoubleUnaryOperator.html#andThen(java.util.function.DoubleUnaryOperator)\"\u003e\u003ccode\u003eandThen(DoubleUnaryOperator)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebefore\u003c/code\u003e - the operator to apply before this operator is applied"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if before is null"
        ],
        "return": [
          "a composed operator that first applies the \n\u003ccode\u003ebefore\u003c/code\u003e operator and then applies this operator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.DoubleUnaryOperator",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.DoubleUnaryOperator",
            "type": "Class"
          },
          "name": "after",
          "varargs": false
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "andThen",
      "comment": "Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result. If evaluation of either operator throws an exception, it is relayed to the caller of the composed operator.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/DoubleUnaryOperator.html#compose(java.util.function.DoubleUnaryOperator)\"\u003e\u003ccode\u003ecompose(DoubleUnaryOperator)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eafter\u003c/code\u003e - the operator to apply after this operator is applied"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if after is null"
        ],
        "return": [
          "a composed operator that first applies this operator and then applies the \n\u003ccode\u003eafter\u003c/code\u003e operator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.DoubleUnaryOperator",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "identity",
      "comment": "Returns a unary operator that always returns its input argument.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a unary operator that always returns its input argument"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.function.DoubleUnaryOperator",
  "comment": "Represents an operation on a single \n\u003ccode\u003edouble\u003c/code\u003e-valued operand that produces a \n\u003ccode\u003edouble\u003c/code\u003e-valued result. This is the primitive type specialization of \n\u003ca href\u003d\"UnaryOperator.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003eUnaryOperator\u003c/code\u003e\u003c/a\u003e for \n\u003ccode\u003edouble\u003c/code\u003e. \n\u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html\"\u003efunctional interface\u003c/a\u003e whose functional method is \u003ca href\u003d\"#applyAsDouble(double)\"\u003e\u003ccode\u003eapplyAsDouble(double)\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/UnaryOperator.html\" title\u003d\"interface in java.util.function\"\u003e\u003ccode\u003eUnaryOperator\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}