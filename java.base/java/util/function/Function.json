{
  "packageName": "java.util.function",
  "simpleName": "Function",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "owner": "java.util.function.Function",
        "name": "R",
        "type": "Variable"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.function.Function",
            "name": "T",
            "type": "Variable"
          },
          "name": "t",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "apply",
      "comment": "Applies this function to the given argument.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the function argument"
        ],
        "return": [
          "the function result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Function",
        "parameters": [
          {
            "name": "V",
            "type": "Class"
          },
          {
            "owner": "java.util.function.Function",
            "name": "R",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "V",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "owner": "java.util.function.Function",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "before",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "compose",
      "comment": "Returns a composed function that first applies the before function to its input, and then applies this function to the result. If evaluation of either function throws an exception, it is relayed to the caller of the composed function.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eV\u003c/code\u003e - the type of input to the \n\u003ccode\u003ebefore\u003c/code\u003e function, and to the composed function"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/Function.html#andThen(java.util.function.Function)\"\u003e\u003ccode\u003eandThen(Function)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebefore\u003c/code\u003e - the function to apply before this function is applied"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if before is null"
        ],
        "return": [
          "a composed function that first applies the \n\u003ccode\u003ebefore\u003c/code\u003e function and then applies this function"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Function",
        "parameters": [
          {
            "owner": "java.util.function.Function",
            "name": "T",
            "type": "Variable"
          },
          {
            "name": "V",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.function.Function",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.function.Function",
                    "name": "R",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              },
              {
                "upperBounds": [
                  {
                    "name": "V",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "after",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "V",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "andThen",
      "comment": "Returns a composed function that first applies this function to its input, and then applies the after function to the result. If evaluation of either function throws an exception, it is relayed to the caller of the composed function.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eV\u003c/code\u003e - the type of output of the \n\u003ccode\u003eafter\u003c/code\u003e function, and of the composed function"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/function/Function.html#compose(java.util.function.Function)\"\u003e\u003ccode\u003ecompose(Function)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eafter\u003c/code\u003e - the function to apply after this function is applied"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if after is null"
        ],
        "return": [
          "a composed function that first applies this function and then applies the \n\u003ccode\u003eafter\u003c/code\u003e function"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Function",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          },
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "identity",
      "comment": "Returns a function that always returns its input argument.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the input and output objects to the function"
        ],
        "return": [
          "a function that always returns its input argument"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    },
    {
      "name": "R",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.function.Function",
  "annotations": [
    {
      "type": {
        "name": "FunctionalInterface",
        "type": "Class"
      }
    }
  ],
  "tagMap": {
    "since": [
      "1.8"
    ]
  }
}