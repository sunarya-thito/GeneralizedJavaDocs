{
  "packageName": "java.util.function",
  "simpleName": "Predicate",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.function.Predicate",
            "name": "T",
            "type": "Variable"
          },
          "field": {
            "name": "t"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "test",
      "comment": "Evaluates this predicate on the given argument.",
      "tagMap": {
        "param": [
          "\u003ccode\u003et\u003c/code\u003e - the input argument"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the input argument matches the predicate, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Predicate",
        "parameters": [
          {
            "owner": "java.util.function.Predicate",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.function.Predicate",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "and",
      "comment": "Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another. When evaluating the composed predicate, if this predicate is false, then the other predicate is not evaluated. Any exceptions thrown during evaluation of either predicate are relayed to the caller; if evaluation of this predicate throws an exception, the other predicate will not be evaluated.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - a predicate that will be logically-ANDed with this predicate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if other is null"
        ],
        "return": [
          "a composed predicate that represents the short-circuiting logical AND of this predicate and the \n\u003ccode\u003eother\u003c/code\u003e predicate"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Predicate",
        "parameters": [
          {
            "owner": "java.util.function.Predicate",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "negate",
      "comment": "Returns a predicate that represents the logical negation of this predicate.",
      "tagMap": {
        "return": [
          "a predicate that represents the logical negation of this predicate"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Predicate",
        "parameters": [
          {
            "owner": "java.util.function.Predicate",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "owner": "java.util.function.Predicate",
                    "name": "T",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "isDefaultMethod": true,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "or",
      "comment": "Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another. When evaluating the composed predicate, if this predicate is true, then the other predicate is not evaluated. Any exceptions thrown during evaluation of either predicate are relayed to the caller; if evaluation of this predicate throws an exception, the other predicate will not be evaluated.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - a predicate that will be logically-ORed with this predicate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if other is null"
        ],
        "return": [
          "a composed predicate that represents the short-circuiting logical OR of this predicate and the \n\u003ccode\u003eother\u003c/code\u003e predicate"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Predicate",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "targetRef"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "isEqual",
      "comment": "Returns a predicate that tests if two arguments are equal according to Objects.equals(Object, Object).",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of arguments to the predicate"
        ],
        "param": [
          "\u003ccode\u003etargetRef\u003c/code\u003e - the object reference with which to compare for equality, which may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a predicate that tests if two arguments are equal according to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Objects.html#equals(java.lang.Object,java.lang.Object)\"\u003e\u003ccode\u003eObjects.equals(Object, Object)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.function.Predicate",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Predicate",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 8,
      "name": "not",
      "comment": "Returns a predicate that is the negation of the supplied predicate. This is accomplished by returning result of the calling target.negate().",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of arguments to the specified predicate"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - predicate to negate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if target is null"
        ],
        "return": [
          "a predicate that negates the results of the supplied predicate"
        ],
        "since": [
          "11"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.function.Predicate",
  "comment": "Represents a predicate (boolean-valued function) of one argument. \n\u003cp\u003eThis is a \u003ca href\u003d\"package-summary.html\"\u003efunctional interface\u003c/a\u003e whose functional method is \u003ca href\u003d\"#test(T)\"\u003e\u003ccode\u003etest(Object)\u003c/code\u003e\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.8"
    ]
  }
}