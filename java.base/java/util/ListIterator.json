{
  "packageName": "java.util",
  "simpleName": "ListIterator",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.Iterator",
    "parameters": [
      {
        "name": "E",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasNext",
      "comment": "Returns true if this list iterator has more elements when traversing the list in the forward direction. (In other words, returns true if next() would return an element rather than throwing an exception.)",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html#hasNext()\"\u003ehasNext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html\" title\u003d\"interface in java.util\"\u003eIterator\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ListIterator.html\" title\u003d\"type parameter in ListIterator\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the list iterator has more elements when traversing the list in the forward direction"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.ListIterator",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "next",
      "comment": "Returns the next element in the list and advances the cursor position. This method may be called repeatedly to iterate through the list, or intermixed with calls to previous() to go back and forth. (Note that alternating calls to next and previous will return the same element repeatedly.)",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html#next()\"\u003enext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html\" title\u003d\"interface in java.util\"\u003eIterator\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ListIterator.html\" title\u003d\"type parameter in ListIterator\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if the iteration has no next element"
        ],
        "return": [
          "the next element in the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasPrevious",
      "comment": "Returns true if this list iterator has more elements when traversing the list in the reverse direction. (In other words, returns true if previous() would return an element rather than throwing an exception.)",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the list iterator has more elements when traversing the list in the reverse direction"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.ListIterator",
        "name": "E",
        "type": "Variable"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "previous",
      "comment": "Returns the previous element in the list and moves the cursor position backwards. This method may be called repeatedly to iterate through the list backwards, or intermixed with calls to next() to go back and forth. (Note that alternating calls to next and previous will return the same element repeatedly.)",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if the iteration has no previous element"
        ],
        "return": [
          "the previous element in the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "nextIndex",
      "comment": "Returns the index of the element that would be returned by a subsequent call to next(). (Returns list size if the list iterator is at the end of the list.)",
      "annotations": [],
      "tagMap": {
        "return": [
          "the index of the element that would be returned by a subsequent call to \n\u003ccode\u003enext\u003c/code\u003e, or list size if the list iterator is at the end of the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "previousIndex",
      "comment": "Returns the index of the element that would be returned by a subsequent call to previous(). (Returns -1 if the list iterator is at the beginning of the list.)",
      "annotations": [],
      "tagMap": {
        "return": [
          "the index of the element that would be returned by a subsequent call to \n\u003ccode\u003eprevious\u003c/code\u003e, or -1 if the list iterator is at the beginning of the list"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "remove",
      "comment": "Removes from the list the last element that was returned by next() or previous() (optional operation). This call can only be made once per call to next or previous. It can be made only if add(E) has not been called after the last call to next or previous.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html#remove()\"\u003eremove\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html\" title\u003d\"interface in java.util\"\u003eIterator\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ListIterator.html\" title\u003d\"type parameter in ListIterator\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eremove\u003c/code\u003e operation is not supported by this list iterator",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if neither \n\u003ccode\u003enext\u003c/code\u003e nor \n\u003ccode\u003eprevious\u003c/code\u003e have been called, or \n\u003ccode\u003eremove\u003c/code\u003e or \n\u003ccode\u003eadd\u003c/code\u003e have been called after the last call to \n\u003ccode\u003enext\u003c/code\u003e or \n\u003ccode\u003eprevious\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.ListIterator",
            "name": "E",
            "type": "Variable"
          },
          "name": "e",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "set",
      "comment": "Replaces the last element returned by next() or previous() with the specified element (optional operation). This call can be made only if neither remove() nor add(E) have been called after the last call to next or previous.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element with which to replace the last element returned by \n\u003ccode\u003enext\u003c/code\u003e or \n\u003ccode\u003eprevious\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eset\u003c/code\u003e operation is not supported by this list iterator",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some aspect of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if neither \n\u003ccode\u003enext\u003c/code\u003e nor \n\u003ccode\u003eprevious\u003c/code\u003e have been called, or \n\u003ccode\u003eremove\u003c/code\u003e or \n\u003ccode\u003eadd\u003c/code\u003e have been called after the last call to \n\u003ccode\u003enext\u003c/code\u003e or \n\u003ccode\u003eprevious\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.util.ListIterator",
            "name": "E",
            "type": "Variable"
          },
          "name": "e",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "add",
      "comment": "Inserts the specified element into the list (optional operation). The element is inserted immediately before the element that would be returned by next(), if any, and after the element that would be returned by previous(), if any. (If the list contains no elements, the new element becomes the sole element on the list.) The new element is inserted before the implicit cursor: a subsequent call to next would be unaffected, and a subsequent call to previous would return the new element. (This call increases by one the value that would be returned by a call to nextIndex or previousIndex.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ee\u003c/code\u003e - the element to insert"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eadd\u003c/code\u003e method is not supported by this list iterator",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the class of the specified element prevents it from being added to this list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if some aspect of this element prevents it from being added to this list"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.ListIterator",
  "comment": "An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator\u0027s current position in the list. A \n\u003ccode\u003eListIterator\u003c/code\u003e has no current element; its \n\u003ci\u003ecursor position\u003c/i\u003e always lies between the element that would be returned by a call to \n\u003ccode\u003eprevious()\u003c/code\u003e and the element that would be returned by a call to \n\u003ccode\u003enext()\u003c/code\u003e. An iterator for a list of length \n\u003ccode\u003en\u003c/code\u003e has \n\u003ccode\u003en+1\u003c/code\u003e possible cursor positions, as illustrated by the carets (\n\u003ccode\u003e^\u003c/code\u003e) below: \n\u003cpre\u003e                      Element(0)   Element(1)   Element(2)   ... Element(n-1)\n cursor positions:  ^            ^            ^            ^                  ^\n \u003c/pre\u003e Note that the \n\u003ca href\u003d\"#remove()\"\u003e\u003ccode\u003eremove()\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"#set(E)\"\u003e\u003ccode\u003eset(Object)\u003c/code\u003e\u003c/a\u003e methods are \n\u003ci\u003enot\u003c/i\u003e defined in terms of the cursor position; they are defined to operate on the last element returned by a call to \n\u003ca href\u003d\"#next()\"\u003e\u003ccode\u003enext()\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"#previous()\"\u003e\u003ccode\u003eprevious()\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003eThis interface is a member of the \u003ca href\u003d\"../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eList\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Iterator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eIterator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Enumeration.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eEnumeration\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/List.html#listIterator()\"\u003e\u003ccode\u003eList.listIterator()\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}