{
  "packageName": "java.util",
  "simpleName": "StringJoiner",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.StringJoiner",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "emptyValue"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setEmptyValue",
      "comment": "Sets the sequence of characters to be used when determining the string representation of this StringJoiner and no elements have been added yet, that is, when it is empty. A copy of the emptyValue parameter is made for this purpose. Note that once an add method has been called, the StringJoiner is no longer considered empty, even if the element(s) added correspond to the empty String.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eemptyValue\u003c/code\u003e - the characters to return as the value of an empty \n\u003ccode\u003eStringJoiner\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - when the \n\u003ccode\u003eemptyValue\u003c/code\u003e parameter is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "this \n\u003ccode\u003eStringJoiner\u003c/code\u003e itself so the calls may be chained"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the current value, consisting of the prefix, the values added so far separated by the delimiter, and the suffix, unless no elements have been added in which case, the prefix + suffix or the emptyValue characters are returned.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string representation of this \n\u003ccode\u003eStringJoiner\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.StringJoiner",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "newElement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "add",
      "comment": "Adds a copy of the given CharSequence value as the next element of the StringJoiner value. If newElement is null, then \"null\" is added.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewElement\u003c/code\u003e - The element to add"
        ],
        "return": [
          "a reference to this \n\u003ccode\u003eStringJoiner\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.StringJoiner",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.StringJoiner",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "merge",
      "comment": "Adds the contents of the given StringJoiner without prefix and suffix as the next element if it is non-empty. If the given StringJoiner is empty, the call has no effect. A StringJoiner is empty if add() has never been called, and if merge() has never been called with a non-empty StringJoiner argument. If the other StringJoiner is using a different delimiter, then elements from the other StringJoiner are concatenated with that delimiter and the result is appended to this StringJoiner as a single element.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - The \n\u003ccode\u003eStringJoiner\u003c/code\u003e whose contents should be merged into this one"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the other \n\u003ccode\u003eStringJoiner\u003c/code\u003e is null"
        ],
        "return": [
          "This \n\u003ccode\u003eStringJoiner\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "length",
      "comment": "Returns the length of the String representation of this StringJoiner. Note that if no add methods have been called, then the length of the String representation (either prefix + suffix or emptyValue) will be returned. The value should be equivalent to toString().length().",
      "tagMap": {
        "return": [
          "the length of the current value of \n\u003ccode\u003eStringJoiner\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "delimiter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a StringJoiner with no characters in it, with no prefix or suffix, and a copy of the supplied delimiter. If no characters are added to the StringJoiner and methods accessing the value of it are invoked, it will not return a prefix or suffix (or properties thereof) in the result, unless setEmptyValue has first been called.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edelimiter\u003c/code\u003e - the sequence of characters to be used between each element added to the \n\u003ccode\u003eStringJoiner\u003c/code\u003e value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edelimiter\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "delimiter"
          }
        },
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "suffix"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a StringJoiner with no characters in it using copies of the supplied prefix, delimiter and suffix. If no characters are added to the StringJoiner and methods accessing the string value of it are invoked, it will return the prefix + suffix (or properties thereof) in the result, unless setEmptyValue has first been called.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edelimiter\u003c/code\u003e - the sequence of characters to be used between each element added to the \n\u003ccode\u003eStringJoiner\u003c/code\u003e",
          "\u003ccode\u003eprefix\u003c/code\u003e - the sequence of characters to be used at the beginning",
          "\u003ccode\u003esuffix\u003c/code\u003e - the sequence of characters to be used at the end"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eprefix\u003c/code\u003e, \n\u003ccode\u003edelimiter\u003c/code\u003e, or \n\u003ccode\u003esuffix\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.util.StringJoiner",
  "comment": "\u003ccode\u003eStringJoiner\u003c/code\u003e is used to construct a sequence of characters separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix. \n\u003cp\u003e Prior to adding something to the \u003ccode\u003eStringJoiner\u003c/code\u003e, its \u003ccode\u003esj.toString()\u003c/code\u003e method will, by default, return \u003ccode\u003eprefix + suffix\u003c/code\u003e. However, if the \u003ccode\u003esetEmptyValue\u003c/code\u003e method is called, the \u003ccode\u003eemptyValue\u003c/code\u003e supplied will be returned instead. This can be used, for example, when creating a string using set notation to indicate an empty set, i.e. \u003ccode\u003e\"{}\"\u003c/code\u003e, where the \u003ccode\u003eprefix\u003c/code\u003e is \u003ccode\u003e\"{\"\u003c/code\u003e, the \u003ccode\u003esuffix\u003c/code\u003e is \u003ccode\u003e\"}\"\u003c/code\u003e and nothing has been added to the \u003ccode\u003eStringJoiner\u003c/code\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence)\"\u003e\u003ccode\u003eCollectors.joining(CharSequence)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)\"\u003e\u003ccode\u003eCollectors.joining(CharSequence, CharSequence, CharSequence)\u003c/code\u003e\u003c/a\u003e"
    ],
    "apiNote": [
      "\u003cp\u003eThe String \u003ccode\u003e\"[George:Sally:Fred]\"\u003c/code\u003e may be constructed as follows: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n StringJoiner sj \u003d new StringJoiner(\":\", \"[\", \"]\");\n sj.add(\"George\").add(\"Sally\").add(\"Fred\");\n String desiredString \u003d sj.toString();\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eStringJoiner\u003c/code\u003e may be employed to create formatted output from a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Stream.html\" title\u003d\"interface in java.util.stream\"\u003e\u003ccode\u003eStream\u003c/code\u003e\u003c/a\u003e using \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Collectors.html#joining(java.lang.CharSequence)\"\u003e\u003ccode\u003eCollectors.joining(CharSequence)\u003c/code\u003e\u003c/a\u003e. For example: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n List\u0026lt;Integer\u0026gt; numbers \u003d Arrays.asList(1, 2, 3, 4);\n String commaSeparatedNumbers \u003d numbers.stream()\n     .map(i -\u0026gt; i.toString())\n     .collect(Collectors.joining(\", \"));\n \u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}