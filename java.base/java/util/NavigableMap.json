{
  "packageName": "java.util",
  "simpleName": "NavigableMap",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.SortedMap",
    "parameters": [
      {
        "name": "K",
        "type": "Class"
      },
      {
        "name": "V",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Map$Entry",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lowerEntry",
      "comment": "Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified key cannot be compared with the keys currently in the map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys"
        ],
        "return": [
          "an entry with the greatest key less than \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such key"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.NavigableMap",
        "name": "K",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lowerKey",
      "comment": "Returns the greatest key strictly less than the given key, or null if there is no such key.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified key cannot be compared with the keys currently in the map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys"
        ],
        "return": [
          "the greatest key less than \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such key"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map$Entry",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "floorEntry",
      "comment": "Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified key cannot be compared with the keys currently in the map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys"
        ],
        "return": [
          "an entry with the greatest key less than or equal to \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such key"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.NavigableMap",
        "name": "K",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "floorKey",
      "comment": "Returns the greatest key less than or equal to the given key, or null if there is no such key.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified key cannot be compared with the keys currently in the map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys"
        ],
        "return": [
          "the greatest key less than or equal to \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such key"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map$Entry",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "ceilingEntry",
      "comment": "Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified key cannot be compared with the keys currently in the map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys"
        ],
        "return": [
          "an entry with the least key greater than or equal to \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such key"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.NavigableMap",
        "name": "K",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "ceilingKey",
      "comment": "Returns the least key greater than or equal to the given key, or null if there is no such key.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified key cannot be compared with the keys currently in the map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys"
        ],
        "return": [
          "the least key greater than or equal to \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such key"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map$Entry",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "higherEntry",
      "comment": "Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified key cannot be compared with the keys currently in the map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys"
        ],
        "return": [
          "an entry with the least key greater than \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such key"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.NavigableMap",
        "name": "K",
        "type": "Variable"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "higherKey",
      "comment": "Returns the least key strictly greater than the given key, or null if there is no such key.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the specified key cannot be compared with the keys currently in the map",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified key is null and this map does not permit null keys"
        ],
        "return": [
          "the least key greater than \n\u003ccode\u003ekey\u003c/code\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such key"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map$Entry",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "firstEntry",
      "comment": "Returns a key-value mapping associated with the least key in this map, or null if the map is empty.",
      "tagMap": {
        "return": [
          "an entry with the least key, or \n\u003ccode\u003enull\u003c/code\u003e if this map is empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map$Entry",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lastEntry",
      "comment": "Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.",
      "tagMap": {
        "return": [
          "an entry with the greatest key, or \n\u003ccode\u003enull\u003c/code\u003e if this map is empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map$Entry",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "pollFirstEntry",
      "comment": "Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.",
      "tagMap": {
        "return": [
          "the removed first entry of this map, or \n\u003ccode\u003enull\u003c/code\u003e if this map is empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map$Entry",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "pollLastEntry",
      "comment": "Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.",
      "tagMap": {
        "return": [
          "the removed last entry of this map, or \n\u003ccode\u003enull\u003c/code\u003e if this map is empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableMap",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "descendingMap",
      "comment": "Returns a reverse order view of the mappings contained in this map. The descending map is backed by this map, so changes to the map are reflected in the descending map, and vice-versa. If either map is modified while an iteration over a collection view of either map is in progress (except through the iterator\u0027s own remove operation), the results of the iteration are undefined. The returned map has an ordering equivalent to Collections.reverseOrder(comparator()). The expression m.descendingMap().descendingMap() returns a view of m essentially equivalent to m.",
      "tagMap": {
        "return": [
          "a reverse order view of this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableSet",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "navigableKeySet",
      "comment": "Returns a NavigableSet view of the keys contained in this map. The set\u0027s iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator\u0027s own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.",
      "tagMap": {
        "return": [
          "a navigable set view of the keys in this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableSet",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "descendingKeySet",
      "comment": "Returns a reverse order NavigableSet view of the keys contained in this map. The set\u0027s iterator returns the keys in descending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator\u0027s own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.",
      "tagMap": {
        "return": [
          "a reverse order navigable set view of the keys in this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableMap",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "fromKey"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "fromInclusive"
          }
        },
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "toKey"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "toInclusive"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subMap",
      "comment": "Returns a view of the portion of this map whose keys range from fromKey to toKey. If fromKey and toKey are equal, the returned map is empty unless fromInclusive and toInclusive are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromKey\u003c/code\u003e - low endpoint of the keys in the returned map",
          "\u003ccode\u003efromInclusive\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the low endpoint is to be included in the returned view",
          "\u003ccode\u003etoKey\u003c/code\u003e - high endpoint of the keys in the returned map",
          "\u003ccode\u003etoInclusive\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the high endpoint is to be included in the returned view"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e and \n\u003ccode\u003etoKey\u003c/code\u003e cannot be compared to one another using this map\u0027s comparator (or, if the map has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromKey\u003c/code\u003e or \n\u003ccode\u003etoKey\u003c/code\u003e cannot be compared to keys currently in the map.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e or \n\u003ccode\u003etoKey\u003c/code\u003e is null and this map does not permit null keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e is greater than \n\u003ccode\u003etoKey\u003c/code\u003e; or if this map itself has a restricted range, and \n\u003ccode\u003efromKey\u003c/code\u003e or \n\u003ccode\u003etoKey\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this map whose keys range from \n\u003ccode\u003efromKey\u003c/code\u003e to \n\u003ccode\u003etoKey\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableMap",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "toKey"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "inclusive"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "headMap",
      "comment": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etoKey\u003c/code\u003e - high endpoint of the keys in the returned map",
          "\u003ccode\u003einclusive\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the high endpoint is to be included in the returned view"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoKey\u003c/code\u003e is not compatible with this map\u0027s comparator (or, if the map has no comparator, if \n\u003ccode\u003etoKey\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003etoKey\u003c/code\u003e cannot be compared to keys currently in the map.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoKey\u003c/code\u003e is null and this map does not permit null keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this map itself has a restricted range, and \n\u003ccode\u003etoKey\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this map whose keys are less than (or equal to, if \n\u003ccode\u003einclusive\u003c/code\u003e is true) \n\u003ccode\u003etoKey\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.NavigableMap",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "fromKey"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "inclusive"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "tailMap",
      "comment": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromKey\u003c/code\u003e - low endpoint of the keys in the returned map",
          "\u003ccode\u003einclusive\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if the low endpoint is to be included in the returned view"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e is not compatible with this map\u0027s comparator (or, if the map has no comparator, if \n\u003ccode\u003efromKey\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromKey\u003c/code\u003e cannot be compared to keys currently in the map.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e is null and this map does not permit null keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this map itself has a restricted range, and \n\u003ccode\u003efromKey\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this map whose keys are greater than (or equal to, if \n\u003ccode\u003einclusive\u003c/code\u003e is true) \n\u003ccode\u003efromKey\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "fromKey"
          }
        },
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "toKey"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subMap",
      "comment": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to subMap(fromKey, true, toKey, false).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html#subMap(K,K)\"\u003esubMap\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"interface in java.util\"\u003eSortedMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableMap.html\" title\u003d\"type parameter in NavigableMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableMap.html\" title\u003d\"type parameter in NavigableMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efromKey\u003c/code\u003e - low endpoint (inclusive) of the keys in the returned map",
          "\u003ccode\u003etoKey\u003c/code\u003e - high endpoint (exclusive) of the keys in the returned map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e and \n\u003ccode\u003etoKey\u003c/code\u003e cannot be compared to one another using this map\u0027s comparator (or, if the map has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromKey\u003c/code\u003e or \n\u003ccode\u003etoKey\u003c/code\u003e cannot be compared to keys currently in the map.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e or \n\u003ccode\u003etoKey\u003c/code\u003e is null and this map does not permit null keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e is greater than \n\u003ccode\u003etoKey\u003c/code\u003e; or if this map itself has a restricted range, and \n\u003ccode\u003efromKey\u003c/code\u003e or \n\u003ccode\u003etoKey\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this map whose keys range from \n\u003ccode\u003efromKey\u003c/code\u003e, inclusive, to \n\u003ccode\u003etoKey\u003c/code\u003e, exclusive"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "toKey"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "headMap",
      "comment": "Returns a view of the portion of this map whose keys are strictly less than toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to headMap(toKey, false).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html#headMap(K)\"\u003eheadMap\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"interface in java.util\"\u003eSortedMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableMap.html\" title\u003d\"type parameter in NavigableMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableMap.html\" title\u003d\"type parameter in NavigableMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etoKey\u003c/code\u003e - high endpoint (exclusive) of the keys in the returned map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoKey\u003c/code\u003e is not compatible with this map\u0027s comparator (or, if the map has no comparator, if \n\u003ccode\u003etoKey\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003etoKey\u003c/code\u003e cannot be compared to keys currently in the map.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoKey\u003c/code\u003e is null and this map does not permit null keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this map itself has a restricted range, and \n\u003ccode\u003etoKey\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this map whose keys are strictly less than \n\u003ccode\u003etoKey\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.NavigableMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.NavigableMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "fromKey"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "tailMap",
      "comment": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to tailMap(fromKey, true).",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html#tailMap(K)\"\u003etailMap\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"interface in java.util\"\u003eSortedMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableMap.html\" title\u003d\"type parameter in NavigableMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NavigableMap.html\" title\u003d\"type parameter in NavigableMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003efromKey\u003c/code\u003e - low endpoint (inclusive) of the keys in the returned map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e is not compatible with this map\u0027s comparator (or, if the map has no comparator, if \n\u003ccode\u003efromKey\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromKey\u003c/code\u003e cannot be compared to keys currently in the map.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e is null and this map does not permit null keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this map itself has a restricted range, and \n\u003ccode\u003efromKey\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this map whose keys are greater than or equal to \n\u003ccode\u003efromKey\u003c/code\u003e"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "K",
      "type": "Variable"
    },
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.NavigableMap",
  "comment": "A \n\u003ca href\u003d\"SortedMap.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedMap\u003c/code\u003e\u003c/a\u003e extended with navigation methods returning the closest matches for given search targets. Methods \n\u003ca href\u003d\"#lowerEntry(K)\"\u003e\u003ccode\u003elowerEntry(K)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"#floorEntry(K)\"\u003e\u003ccode\u003efloorEntry(K)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"#ceilingEntry(K)\"\u003e\u003ccode\u003eceilingEntry(K)\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"#higherEntry(K)\"\u003e\u003ccode\u003ehigherEntry(K)\u003c/code\u003e\u003c/a\u003e return \n\u003ccode\u003eMap.Entry\u003c/code\u003e objects associated with keys respectively less than, less than or equal, greater than or equal, and greater than a given key, returning \n\u003ccode\u003enull\u003c/code\u003e if there is no such key. Similarly, methods \n\u003ca href\u003d\"#lowerKey(K)\"\u003e\u003ccode\u003elowerKey(K)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"#floorKey(K)\"\u003e\u003ccode\u003efloorKey(K)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"#ceilingKey(K)\"\u003e\u003ccode\u003eceilingKey(K)\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"#higherKey(K)\"\u003e\u003ccode\u003ehigherKey(K)\u003c/code\u003e\u003c/a\u003e return only the associated keys. All of these methods are designed for locating, not traversing entries. \n\u003cp\u003eA \u003ccode\u003eNavigableMap\u003c/code\u003e may be accessed and traversed in either ascending or descending key order. The \u003ca href\u003d\"#descendingMap()\"\u003e\u003ccode\u003edescendingMap()\u003c/code\u003e\u003c/a\u003e method returns a view of the map with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. Methods \u003ca href\u003d\"#subMap(K,boolean,K,boolean)\"\u003e\u003ccode\u003esubMap(K, boolean, K, boolean)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#headMap(K,boolean)\"\u003e\u003ccode\u003eheadMap(K, boolean)\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#tailMap(K,boolean)\"\u003e\u003ccode\u003etailMap(K, boolean)\u003c/code\u003e\u003c/a\u003e differ from the like-named \u003ccode\u003eSortedMap\u003c/code\u003e methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Submaps of any \u003ccode\u003eNavigableMap\u003c/code\u003e must implement the \u003ccode\u003eNavigableMap\u003c/code\u003e interface. \u003c/p\u003e\n\u003cp\u003eThis interface additionally defines methods \u003ca href\u003d\"#firstEntry()\"\u003e\u003ccode\u003efirstEntry()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#pollFirstEntry()\"\u003e\u003ccode\u003epollFirstEntry()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#lastEntry()\"\u003e\u003ccode\u003elastEntry()\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#pollLastEntry()\"\u003e\u003ccode\u003epollLastEntry()\u003c/code\u003e\u003c/a\u003e that return and/or remove the least and greatest mappings, if any exist, else returning \u003ccode\u003enull\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eImplementations of entry-returning methods are expected to return \u003ccode\u003eMap.Entry\u003c/code\u003e pairs representing snapshots of mappings at the time they were produced, and thus generally do \u003cem\u003enot\u003c/em\u003e support the optional \u003ccode\u003eEntry.setValue\u003c/code\u003e method. Note however that it is possible to change mappings in the associated map using method \u003ccode\u003eput\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eMethods \u003ca href\u003d\"#subMap(K,K)\"\u003e\u003ccode\u003esubMap(K, K)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#headMap(K)\"\u003e\u003ccode\u003eheadMap(K)\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#tailMap(K)\"\u003e\u003ccode\u003etailMap(K)\u003c/code\u003e\u003c/a\u003e are specified to return \u003ccode\u003eSortedMap\u003c/code\u003e to allow existing implementations of \u003ccode\u003eSortedMap\u003c/code\u003e to be compatibly retrofitted to implement \u003ccode\u003eNavigableMap\u003c/code\u003e, but extensions and implementations of this interface are encouraged to override these methods to return \u003ccode\u003eNavigableMap\u003c/code\u003e. Similarly, \u003ca href\u003d\"SortedMap.html#keySet()\"\u003e\u003ccode\u003eSortedMap.keySet()\u003c/code\u003e\u003c/a\u003e can be overridden to return \u003ca href\u003d\"NavigableSet.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eNavigableSet\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003eThis interface is a member of the \u003ca href\u003d\"../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}