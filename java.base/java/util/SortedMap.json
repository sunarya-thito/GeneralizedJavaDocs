{
  "packageName": "java.util",
  "simpleName": "SortedMap",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.util.Map",
    "parameters": [
      {
        "name": "K",
        "type": "Class"
      },
      {
        "name": "V",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Comparator",
        "parameters": [
          {
            "lowerBounds": [
              {
                "owner": "java.util.SortedMap",
                "name": "K",
                "type": "Variable"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "comparator",
      "comment": "Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys.",
      "tagMap": {
        "return": [
          "the comparator used to order the keys in this map, or \n\u003ccode\u003enull\u003c/code\u003e if this map uses the natural ordering of its keys"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "owner": "java.util.SortedMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.SortedMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.SortedMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "fromKey"
          }
        },
        {
          "type": {
            "owner": "java.util.SortedMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "toKey"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "subMap",
      "comment": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromKey\u003c/code\u003e - low endpoint (inclusive) of the keys in the returned map",
          "\u003ccode\u003etoKey\u003c/code\u003e - high endpoint (exclusive) of the keys in the returned map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e and \n\u003ccode\u003etoKey\u003c/code\u003e cannot be compared to one another using this map\u0027s comparator (or, if the map has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromKey\u003c/code\u003e or \n\u003ccode\u003etoKey\u003c/code\u003e cannot be compared to keys currently in the map.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e or \n\u003ccode\u003etoKey\u003c/code\u003e is null and this map does not permit null keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e is greater than \n\u003ccode\u003etoKey\u003c/code\u003e; or if this map itself has a restricted range, and \n\u003ccode\u003efromKey\u003c/code\u003e or \n\u003ccode\u003etoKey\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this map whose keys range from \n\u003ccode\u003efromKey\u003c/code\u003e, inclusive, to \n\u003ccode\u003etoKey\u003c/code\u003e, exclusive"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "owner": "java.util.SortedMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.SortedMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.SortedMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "toKey"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "headMap",
      "comment": "Returns a view of the portion of this map whose keys are strictly less than toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etoKey\u003c/code\u003e - high endpoint (exclusive) of the keys in the returned map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoKey\u003c/code\u003e is not compatible with this map\u0027s comparator (or, if the map has no comparator, if \n\u003ccode\u003etoKey\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003etoKey\u003c/code\u003e cannot be compared to keys currently in the map.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etoKey\u003c/code\u003e is null and this map does not permit null keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this map itself has a restricted range, and \n\u003ccode\u003etoKey\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this map whose keys are strictly less than \n\u003ccode\u003etoKey\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "owner": "java.util.SortedMap",
            "name": "K",
            "type": "Variable"
          },
          {
            "owner": "java.util.SortedMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "owner": "java.util.SortedMap",
            "name": "K",
            "type": "Variable"
          },
          "field": {
            "name": "fromKey"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "tailMap",
      "comment": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efromKey\u003c/code\u003e - low endpoint (inclusive) of the keys in the returned map"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e is not compatible with this map\u0027s comparator (or, if the map has no comparator, if \n\u003ccode\u003efromKey\u003c/code\u003e does not implement \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e). Implementations may, but are not required to, throw this exception if \n\u003ccode\u003efromKey\u003c/code\u003e cannot be compared to keys currently in the map.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromKey\u003c/code\u003e is null and this map does not permit null keys",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this map itself has a restricted range, and \n\u003ccode\u003efromKey\u003c/code\u003e lies outside the bounds of the range"
        ],
        "return": [
          "a view of the portion of this map whose keys are greater than or equal to \n\u003ccode\u003efromKey\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.SortedMap",
        "name": "K",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "firstKey",
      "comment": "Returns the first (lowest) key currently in this map.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if this map is empty"
        ],
        "return": [
          "the first (lowest) key currently in this map"
        ]
      }
    },
    {
      "returnType": {
        "owner": "java.util.SortedMap",
        "name": "K",
        "type": "Variable"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lastKey",
      "comment": "Returns the last (highest) key currently in this map.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/NoSuchElementException.html\" title\u003d\"class in java.util\"\u003eNoSuchElementException\u003c/a\u003e\u003c/code\u003e - if this map is empty"
        ],
        "return": [
          "the last (highest) key currently in this map"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "owner": "java.util.SortedMap",
            "name": "K",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "keySet",
      "comment": "Returns a Set view of the keys contained in this map. The set\u0027s iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator\u0027s own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#keySet()\"\u003ekeySet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"type parameter in SortedMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"type parameter in SortedMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a set view of the keys contained in this map, sorted in ascending order"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "owner": "java.util.SortedMap",
            "name": "V",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "values",
      "comment": "Returns a Collection view of the values contained in this map. The collection\u0027s iterator returns the values in ascending order of the corresponding keys. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator\u0027s own remove operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#values()\"\u003evalues\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"type parameter in SortedMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"type parameter in SortedMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a collection view of the values contained in this map, sorted in ascending key order"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.util.Map$Entry",
            "parameters": [
              {
                "owner": "java.util.SortedMap",
                "name": "K",
                "type": "Variable"
              },
              {
                "owner": "java.util.SortedMap",
                "name": "V",
                "type": "Variable"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "entrySet",
      "comment": "Returns a Set view of the mappings contained in this map. The set\u0027s iterator returns the entries in ascending key order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator\u0027s own remove operation, or through the setValue operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html#entrySet()\"\u003eentrySet\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003eMap\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"type parameter in SortedMap\"\u003eK\u003c/a\u003e,​\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedMap.html\" title\u003d\"type parameter in SortedMap\"\u003eV\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "return": [
          "a set view of the mappings contained in this map, sorted in ascending key order"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "K",
      "type": "Variable"
    },
    {
      "name": "V",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.util.SortedMap",
  "comment": "A \n\u003ca href\u003d\"Map.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e that further provides a \n\u003cem\u003etotal ordering\u003c/em\u003e on its keys. The map is ordered according to the \n\u003ca href\u003d\"../lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003enatural ordering\u003c/a\u003e of its keys, or by a \n\u003ca href\u003d\"Comparator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eComparator\u003c/code\u003e\u003c/a\u003e typically provided at sorted map creation time. This order is reflected when iterating over the sorted map\u0027s collection views (returned by the \n\u003ccode\u003eentrySet\u003c/code\u003e, \n\u003ccode\u003ekeySet\u003c/code\u003e and \n\u003ccode\u003evalues\u003c/code\u003e methods). Several additional operations are provided to take advantage of the ordering. (This interface is the map analogue of \n\u003ca href\u003d\"SortedSet.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedSet\u003c/code\u003e\u003c/a\u003e.) \n\u003cp\u003eAll keys inserted into a sorted map must implement the \u003ccode\u003eComparable\u003c/code\u003e interface (or be accepted by the specified comparator). Furthermore, all such keys must be \u003cem\u003emutually comparable\u003c/em\u003e: \u003ccode\u003ek1.compareTo(k2)\u003c/code\u003e (or \u003ccode\u003ecomparator.compare(k1, k2)\u003c/code\u003e) must not throw a \u003ccode\u003eClassCastException\u003c/code\u003e for any keys \u003ccode\u003ek1\u003c/code\u003e and \u003ccode\u003ek2\u003c/code\u003e in the sorted map. Attempts to violate this restriction will cause the offending method or constructor invocation to throw a \u003ccode\u003eClassCastException\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eNote that the ordering maintained by a sorted map (whether or not an explicit comparator is provided) must be \u003cem\u003econsistent with equals\u003c/em\u003e if the sorted map is to correctly implement the \u003ccode\u003eMap\u003c/code\u003e interface. (See the \u003ccode\u003eComparable\u003c/code\u003e interface or \u003ccode\u003eComparator\u003c/code\u003e interface for a precise definition of \u003cem\u003econsistent with equals\u003c/em\u003e.) This is so because the \u003ccode\u003eMap\u003c/code\u003e interface is defined in terms of the \u003ccode\u003eequals\u003c/code\u003e operation, but a sorted map performs all key comparisons using its \u003ccode\u003ecompareTo\u003c/code\u003e (or \u003ccode\u003ecompare\u003c/code\u003e) method, so two keys that are deemed equal by this method are, from the standpoint of the sorted map, equal. The behavior of a tree map \u003cem\u003eis\u003c/em\u003e well-defined even if its ordering is inconsistent with equals; it just fails to obey the general contract of the \u003ccode\u003eMap\u003c/code\u003e interface. \u003c/p\u003e\n\u003cp\u003eAll general-purpose sorted map implementation classes should provide four \"standard\" constructors. It is not possible to enforce this recommendation though as required constructors cannot be specified by interfaces. The expected \"standard\" constructors for all sorted map implementations are: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003eA void (no arguments) constructor, which creates an empty sorted map sorted according to the natural ordering of its keys.\u003c/li\u003e \n \u003cli\u003eA constructor with a single argument of type \u003ccode\u003eComparator\u003c/code\u003e, which creates an empty sorted map sorted according to the specified comparator.\u003c/li\u003e \n \u003cli\u003eA constructor with a single argument of type \u003ccode\u003eMap\u003c/code\u003e, which creates a new map with the same key-value mappings as its argument, sorted according to the keys\u0027 natural ordering.\u003c/li\u003e \n \u003cli\u003eA constructor with a single argument of type \u003ccode\u003eSortedMap\u003c/code\u003e, which creates a new sorted map with the same key-value mappings and the same ordering as the input sorted map.\u003c/li\u003e \n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: several methods return submaps with restricted key ranges. Such ranges are \u003cem\u003ehalf-open\u003c/em\u003e, that is, they include their low endpoint but not their high endpoint (where applicable). If you need a \u003cem\u003eclosed range\u003c/em\u003e (which includes both endpoints), and the key type allows for calculation of the successor of a given key, merely request the subrange from \u003ccode\u003elowEndpoint\u003c/code\u003e to \u003ccode\u003esuccessor(highEndpoint)\u003c/code\u003e. For example, suppose that \u003ccode\u003em\u003c/code\u003e is a map whose keys are strings. The following idiom obtains a view containing all of the key-value mappings in \u003ccode\u003em\u003c/code\u003e whose keys are between \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e, inclusive:\u003c/p\u003e\n\u003cpre\u003e   SortedMap\u0026lt;String, V\u0026gt; sub \u003d m.subMap(low, high+\"\\0\");\u003c/pre\u003e A similar technique can be used to generate an \n\u003cem\u003eopen range\u003c/em\u003e (which contains neither endpoint). The following idiom obtains a view containing all of the key-value mappings in \n\u003ccode\u003em\u003c/code\u003e whose keys are between \n\u003ccode\u003elow\u003c/code\u003e and \n\u003ccode\u003ehigh\u003c/code\u003e, exclusive:\n\u003cpre\u003e   SortedMap\u0026lt;String, V\u0026gt; sub \u003d m.subMap(low+\"\\0\", high);\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThis interface is a member of the \u003ca href\u003d\"../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Map.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TreeMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTreeMap\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/SortedSet.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSortedSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Comparator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eComparator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eComparable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eClassCastException\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}