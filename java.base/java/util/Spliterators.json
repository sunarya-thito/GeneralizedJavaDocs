{
  "packageName": "java.util",
  "simpleName": "Spliterators",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Spliterator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "emptySpliterator",
      "comment": "Creates an empty Spliterator The empty spliterator reports Spliterator.SIZED and Spliterator.SUBSIZED. Calls to Spliterator.trySplit() always return null.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - Type of elements"
        ],
        "return": [
          "An empty spliterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfInt",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "emptyIntSpliterator",
      "comment": "Creates an empty Spliterator.OfInt The empty spliterator reports Spliterator.SIZED and Spliterator.SUBSIZED. Calls to Spliterator.trySplit() always return null.",
      "tagMap": {
        "return": [
          "An empty spliterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfLong",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "emptyLongSpliterator",
      "comment": "Creates an empty Spliterator.OfLong The empty spliterator reports Spliterator.SIZED and Spliterator.SUBSIZED. Calls to Spliterator.trySplit() always return null.",
      "tagMap": {
        "return": [
          "An empty spliterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfDouble",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "emptyDoubleSpliterator",
      "comment": "Creates an empty Spliterator.OfDouble The empty spliterator reports Spliterator.SIZED and Spliterator.SUBSIZED. Calls to Spliterator.trySplit() always return null.",
      "tagMap": {
        "return": [
          "An empty spliterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "array"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "additionalCharacteristics"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use Arrays.spliterator(Object[]). The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - Type of elements"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#spliterator(T%5B%5D)\"\u003e\u003ccode\u003eArrays.spliterator(Object[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array, assumed to be unmodified during use",
          "\u003ccode\u003eadditionalCharacteristics\u003c/code\u003e - Additional spliterator characteristics of this spliterator\u0027s source or elements beyond \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e which are always reported"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given array is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator for an array"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "array"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "toIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "additionalCharacteristics"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use Arrays.spliterator(Object[]). The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - Type of elements"
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#spliterator(T%5B%5D,int,int)\"\u003e\u003ccode\u003eArrays.spliterator(Object[], int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array, assumed to be unmodified during use",
          "\u003ccode\u003efromIndex\u003c/code\u003e - The least index (inclusive) to cover",
          "\u003ccode\u003etoIndex\u003c/code\u003e - One past the greatest index to cover",
          "\u003ccode\u003eadditionalCharacteristics\u003c/code\u003e - Additional spliterator characteristics of this spliterator\u0027s source or elements beyond \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e which are always reported"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given array is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromIndex\u003c/code\u003e is negative, \n\u003ccode\u003etoIndex\u003c/code\u003e is less than \n\u003ccode\u003efromIndex\u003c/code\u003e, or \n\u003ccode\u003etoIndex\u003c/code\u003e is greater than the array size"
        ],
        "return": [
          "A spliterator for an array"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfInt",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "array"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "additionalCharacteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator.OfInt covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use Arrays.spliterator(int[]). The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#spliterator(int%5B%5D)\"\u003e\u003ccode\u003eArrays.spliterator(int[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array, assumed to be unmodified during use",
          "\u003ccode\u003eadditionalCharacteristics\u003c/code\u003e - Additional spliterator characteristics of this spliterator\u0027s source or elements beyond \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e which are always reported"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given array is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator for an array"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfInt",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "array"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "toIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "additionalCharacteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator.OfInt covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use Arrays.spliterator(int[], int, int). The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#spliterator(int%5B%5D,int,int)\"\u003e\u003ccode\u003eArrays.spliterator(int[], int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array, assumed to be unmodified during use",
          "\u003ccode\u003efromIndex\u003c/code\u003e - The least index (inclusive) to cover",
          "\u003ccode\u003etoIndex\u003c/code\u003e - One past the greatest index to cover",
          "\u003ccode\u003eadditionalCharacteristics\u003c/code\u003e - Additional spliterator characteristics of this spliterator\u0027s source or elements beyond \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e which are always reported"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given array is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromIndex\u003c/code\u003e is negative, \n\u003ccode\u003etoIndex\u003c/code\u003e is less than \n\u003ccode\u003efromIndex\u003c/code\u003e, or \n\u003ccode\u003etoIndex\u003c/code\u003e is greater than the array size"
        ],
        "return": [
          "A spliterator for an array"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfLong",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "array"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "additionalCharacteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator.OfLong covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use Arrays.spliterator(long[]). The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#spliterator(long%5B%5D)\"\u003e\u003ccode\u003eArrays.spliterator(long[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array, assumed to be unmodified during use",
          "\u003ccode\u003eadditionalCharacteristics\u003c/code\u003e - Additional spliterator characteristics of this spliterator\u0027s source or elements beyond \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e which are always reported"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given array is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator for an array"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfLong",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "array"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "toIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "additionalCharacteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator.OfLong covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use Arrays.spliterator(long[], int, int). The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify IMMUTABLE; if the array data is considered to have an encounter order, specify ORDERED). The method Arrays.spliterator(long[], int, int) can often be used instead, which returns a spliterator that reports SIZED, SUBSIZED, IMMUTABLE, and ORDERED.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#spliterator(long%5B%5D,int,int)\"\u003e\u003ccode\u003eArrays.spliterator(long[], int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array, assumed to be unmodified during use",
          "\u003ccode\u003efromIndex\u003c/code\u003e - The least index (inclusive) to cover",
          "\u003ccode\u003etoIndex\u003c/code\u003e - One past the greatest index to cover",
          "\u003ccode\u003eadditionalCharacteristics\u003c/code\u003e - Additional spliterator characteristics of this spliterator\u0027s source or elements beyond \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e which are always reported"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given array is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromIndex\u003c/code\u003e is negative, \n\u003ccode\u003etoIndex\u003c/code\u003e is less than \n\u003ccode\u003efromIndex\u003c/code\u003e, or \n\u003ccode\u003etoIndex\u003c/code\u003e is greater than the array size"
        ],
        "return": [
          "A spliterator for an array"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfDouble",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "array"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "additionalCharacteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator.OfDouble covering the elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use Arrays.spliterator(double[]). The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report; it is common to additionally specify IMMUTABLE and ORDERED.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#spliterator(double%5B%5D)\"\u003e\u003ccode\u003eArrays.spliterator(double[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array, assumed to be unmodified during use",
          "\u003ccode\u003eadditionalCharacteristics\u003c/code\u003e - Additional spliterator characteristics of this spliterator\u0027s source or elements beyond \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e which are always reported"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given array is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator for an array"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfDouble",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "array"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "fromIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "toIndex"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "additionalCharacteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator.OfDouble covering a range of elements of a given array, using a customized set of spliterator characteristics. This method is provided as an implementation convenience for Spliterators which store portions of their elements in arrays, and need fine control over Spliterator characteristics. Most other situations in which a Spliterator for an array is needed should use Arrays.spliterator(double[], int, int). The returned spliterator always reports the characteristics SIZED and SUBSIZED. The caller may provide additional characteristics for the spliterator to report. (For example, if it is known the array will not be further modified, specify IMMUTABLE; if the array data is considered to have an encounter order, specify ORDERED). The method Arrays.spliterator(long[], int, int) can often be used instead, which returns a spliterator that reports SIZED, SUBSIZED, IMMUTABLE, and ORDERED.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Arrays.html#spliterator(double%5B%5D,int,int)\"\u003e\u003ccode\u003eArrays.spliterator(double[], int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array, assumed to be unmodified during use",
          "\u003ccode\u003efromIndex\u003c/code\u003e - The least index (inclusive) to cover",
          "\u003ccode\u003etoIndex\u003c/code\u003e - One past the greatest index to cover",
          "\u003ccode\u003eadditionalCharacteristics\u003c/code\u003e - Additional spliterator characteristics of this spliterator\u0027s source or elements beyond \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e which are always reported"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given array is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eArrayIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003efromIndex\u003c/code\u003e is negative, \n\u003ccode\u003etoIndex\u003c/code\u003e is less than \n\u003ccode\u003efromIndex\u003c/code\u003e, or \n\u003ccode\u003etoIndex\u003c/code\u003e is greater than the array size"
        ],
        "return": [
          "A spliterator for an array"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator using the given collection\u0027s Collection.iterator() as the source of elements, and reporting its Collection.size() as its initial size. The spliterator is late-binding, inherits the fail-fast properties of the collection\u0027s iterator, and implements trySplit to permit limited parallelism.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - Type of elements"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - The collection",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Characteristics of this spliterator\u0027s source or elements. The characteristics \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e are additionally reported unless \n\u003ccode\u003eCONCURRENT\u003c/code\u003e is supplied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given collection is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator from an iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Iterator",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "iterator"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator using a given Iterator as the source of elements, and with a given initially reported size. The spliterator is not late-binding, inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - Type of elements"
        ],
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - The iterator for the source",
          "\u003ccode\u003esize\u003c/code\u003e - The number of elements in the source, to be reported as initial \n\u003ccode\u003eestimateSize\u003c/code\u003e",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Characteristics of this spliterator\u0027s source or elements. The characteristics \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e are additionally reported unless \n\u003ccode\u003eCONCURRENT\u003c/code\u003e is supplied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given iterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator from an iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Iterator",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "iterator"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliteratorUnknownSize",
      "comment": "Creates a Spliterator using a given Iterator as the source of elements, with no initial size estimate. The spliterator is not late-binding, inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - Type of elements"
        ],
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - The iterator for the source",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Characteristics of this spliterator\u0027s source or elements (\n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e, if supplied, are ignored and are not reported.)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given iterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator from an iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfInt",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.PrimitiveIterator$OfInt",
            "type": "Class"
          },
          "field": {
            "name": "iterator"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, and with a given initially reported size. The spliterator is not late-binding, inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - The iterator for the source",
          "\u003ccode\u003esize\u003c/code\u003e - The number of elements in the source, to be reported as initial \n\u003ccode\u003eestimateSize\u003c/code\u003e.",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Characteristics of this spliterator\u0027s source or elements. The characteristics \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e are additionally reported unless \n\u003ccode\u003eCONCURRENT\u003c/code\u003e is supplied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given iterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator from an iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfInt",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.PrimitiveIterator$OfInt",
            "type": "Class"
          },
          "field": {
            "name": "iterator"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliteratorUnknownSize",
      "comment": "Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, with no initial size estimate. The spliterator is not late-binding, inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - The iterator for the source",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Characteristics of this spliterator\u0027s source or elements (\n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e, if supplied, are ignored and are not reported.)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given iterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator from an iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfLong",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.PrimitiveIterator$OfLong",
            "type": "Class"
          },
          "field": {
            "name": "iterator"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, and with a given initially reported size. The spliterator is not late-binding, inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - The iterator for the source",
          "\u003ccode\u003esize\u003c/code\u003e - The number of elements in the source, to be reported as initial \n\u003ccode\u003eestimateSize\u003c/code\u003e.",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Characteristics of this spliterator\u0027s source or elements. The characteristics \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e are additionally reported unless \n\u003ccode\u003eCONCURRENT\u003c/code\u003e is supplied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given iterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator from an iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfLong",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.PrimitiveIterator$OfLong",
            "type": "Class"
          },
          "field": {
            "name": "iterator"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliteratorUnknownSize",
      "comment": "Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, with no initial size estimate. The spliterator is not late-binding, inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - The iterator for the source",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Characteristics of this spliterator\u0027s source or elements (\n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e, if supplied, are ignored and are not reported.)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given iterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator from an iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfDouble",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.PrimitiveIterator$OfDouble",
            "type": "Class"
          },
          "field": {
            "name": "iterator"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliterator",
      "comment": "Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, and with a given initially reported size. The spliterator is not late-binding, inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned, or the initially reported size is not equal to the actual number of elements in the source.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - The iterator for the source",
          "\u003ccode\u003esize\u003c/code\u003e - The number of elements in the source, to be reported as initial \n\u003ccode\u003eestimateSize\u003c/code\u003e",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Characteristics of this spliterator\u0027s source or elements. The characteristics \n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e are additionally reported unless \n\u003ccode\u003eCONCURRENT\u003c/code\u003e is supplied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given iterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator from an iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Spliterator$OfDouble",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.PrimitiveIterator$OfDouble",
            "type": "Class"
          },
          "field": {
            "name": "iterator"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "characteristics"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "spliteratorUnknownSize",
      "comment": "Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, with no initial size estimate. The spliterator is not late-binding, inherits the fail-fast properties of the iterator, and implements trySplit to permit limited parallelism. Traversal of elements should be accomplished through the spliterator. The behaviour of splitting and traversal is undefined if the iterator is operated on after the spliterator is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eiterator\u003c/code\u003e - The iterator for the source",
          "\u003ccode\u003echaracteristics\u003c/code\u003e - Characteristics of this spliterator\u0027s source or elements (\n\u003ccode\u003eSIZED\u003c/code\u003e and \n\u003ccode\u003eSUBSIZED\u003c/code\u003e, if supplied, are ignored and are not reported.)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given iterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "A spliterator from an iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "name": "T",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Spliterator",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "T",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "spliterator"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "iterator",
      "comment": "Creates an Iterator from a Spliterator. Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - Type of elements"
        ],
        "param": [
          "\u003ccode\u003espliterator\u003c/code\u003e - The spliterator"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given spliterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "An iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.PrimitiveIterator$OfInt",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Spliterator$OfInt",
            "type": "Class"
          },
          "field": {
            "name": "spliterator"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "iterator",
      "comment": "Creates an PrimitiveIterator.OfInt from a Spliterator.OfInt. Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003espliterator\u003c/code\u003e - The spliterator"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given spliterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "An iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.PrimitiveIterator$OfLong",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Spliterator$OfLong",
            "type": "Class"
          },
          "field": {
            "name": "spliterator"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "iterator",
      "comment": "Creates an PrimitiveIterator.OfLong from a Spliterator.OfLong. Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003espliterator\u003c/code\u003e - The spliterator"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given spliterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "An iterator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.PrimitiveIterator$OfDouble",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Spliterator$OfDouble",
            "type": "Class"
          },
          "field": {
            "name": "spliterator"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "iterator",
      "comment": "Creates an PrimitiveIterator.OfDouble from a Spliterator.OfDouble. Traversal of elements should be accomplished through the iterator. The behaviour of traversal is undefined if the spliterator is operated after the iterator is returned.",
      "tagMap": {
        "param": [
          "\u003ccode\u003espliterator\u003c/code\u003e - The spliterator"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the given spliterator is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "An iterator"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.util.Spliterators$AbstractSpliterator",
    "java.util.Spliterators$AbstractLongSpliterator",
    "java.util.Spliterators$AbstractIntSpliterator",
    "java.util.Spliterators$AbstractDoubleSpliterator"
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.util.Spliterators",
  "comment": "Static classes and methods for operating on or creating instances of \n\u003ca href\u003d\"Spliterator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSpliterator\u003c/code\u003e\u003c/a\u003e and its primitive specializations \n\u003ca href\u003d\"Spliterator.OfInt.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSpliterator.OfInt\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"Spliterator.OfLong.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSpliterator.OfLong\u003c/code\u003e\u003c/a\u003e, and \n\u003ca href\u003d\"Spliterator.OfDouble.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSpliterator.OfDouble\u003c/code\u003e\u003c/a\u003e.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSpliterator\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.8"
    ]
  }
}