{
  "packageName": "java.util",
  "simpleName": "LinkedHashSet",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.HashSet",
    "parameters": [
      {
        "name": "E",
        "type": "Class"
      }
    ],
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Spliterator",
        "parameters": [
          {
            "owner": "java.util.LinkedHashSet",
            "name": "E",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "spliterator",
      "comment": "Creates a late-binding and fail-fast Spliterator over the elements in this set. The Spliterator reports Spliterator.SIZED, Spliterator.DISTINCT, and ORDERED. Implementations should document the reporting of additional characteristic values.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashSet.html#spliterator()\"\u003espliterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashSet.html\" title\u003d\"class in java.util\"\u003eHashSet\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedHashSet.html\" title\u003d\"type parameter in LinkedHashSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html#spliterator()\"\u003espliterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003eCollection\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedHashSet.html\" title\u003d\"type parameter in LinkedHashSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html#spliterator()\"\u003espliterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html\" title\u003d\"interface in java.lang\"\u003eIterable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedHashSet.html\" title\u003d\"type parameter in LinkedHashSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html#spliterator()\"\u003espliterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html\" title\u003d\"interface in java.util\"\u003eSet\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedHashSet.html\" title\u003d\"type parameter in LinkedHashSet\"\u003eE\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "implNote": [
          "The implementation creates a \n\u003cem\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#binding\"\u003elate-binding\u003c/a\u003e\u003c/em\u003e spliterator from the set\u0027s \n\u003ccode\u003eIterator\u003c/code\u003e. The spliterator inherits the \n\u003cem\u003efail-fast\u003c/em\u003e properties of the set\u0027s iterator. The created \n\u003ccode\u003eSpliterator\u003c/code\u003e additionally reports \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Spliterator.html#SUBSIZED\"\u003e\u003ccode\u003eSpliterator.SUBSIZED\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "a \n\u003ccode\u003eSpliterator\u003c/code\u003e over the elements in this set"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "initialCapacity"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "loadFactor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new, empty linked hash set with the specified initial capacity and load factor.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einitialCapacity\u003c/code\u003e - the initial capacity of the linked hash set",
          "\u003ccode\u003eloadFactor\u003c/code\u003e - the load factor of the linked hash set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the initial capacity is less than zero, or if the load factor is nonpositive"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "initialCapacity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new, empty linked hash set with the specified initial capacity and the default load factor (0.75).",
      "tagMap": {
        "param": [
          "\u003ccode\u003einitialCapacity\u003c/code\u003e - the initial capacity of the LinkedHashSet"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the initial capacity is less than zero"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new, empty linked hash set with the default initial capacity (16) and load factor (0.75).",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "owner": "java.util.LinkedHashSet",
                    "name": "E",
                    "type": "Variable"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a new linked hash set with the same elements as the specified collection. The linked hash set is created with an initial capacity sufficient to hold the elements in the specified collection and the default load factor (0.75).",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - the collection whose elements are to be placed into this set"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified collection is null"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "E",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.util.LinkedHashSet",
  "comment": "\u003cp\u003eHash table and linked list implementation of the \u003ccode\u003eSet\u003c/code\u003e interface, with predictable iteration order. This implementation differs from \u003ccode\u003eHashSet\u003c/code\u003e in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is the order in which elements were inserted into the set (\u003ci\u003einsertion-order\u003c/i\u003e). Note that insertion order is \u003ci\u003enot\u003c/i\u003e affected if an element is \u003ci\u003ere-inserted\u003c/i\u003e into the set. (An element \u003ccode\u003ee\u003c/code\u003e is reinserted into a set \u003ccode\u003es\u003c/code\u003e if \u003ccode\u003es.add(e)\u003c/code\u003e is invoked when \u003ccode\u003es.contains(e)\u003c/code\u003e would return \u003ccode\u003etrue\u003c/code\u003e immediately prior to the invocation.) \u003c/p\u003e\n\u003cp\u003eThis implementation spares its clients from the unspecified, generally chaotic ordering provided by \u003ca href\u003d\"HashSet.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashSet\u003c/code\u003e\u003c/a\u003e, without incurring the increased cost associated with \u003ca href\u003d\"TreeSet.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTreeSet\u003c/code\u003e\u003c/a\u003e. It can be used to produce a copy of a set that has the same order as the original, regardless of the original set\u0027s implementation: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n     void foo(Set\u0026lt;String\u0026gt; s) {\n         Set\u0026lt;String\u0026gt; copy \u003d new LinkedHashSet\u0026lt;\u0026gt;(s);\n         ...\n     }\n \u003c/code\u003e\u003c/pre\u003e This technique is particularly useful if a module takes a set on input, copies it, and later returns results whose order is determined by that of the copy. (Clients generally appreciate having things returned in the same order they were presented.) \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThis class provides all of the optional \u003ccode\u003eSet\u003c/code\u003e operations, and permits null elements. Like \u003ccode\u003eHashSet\u003c/code\u003e, it provides constant-time performance for the basic operations (\u003ccode\u003eadd\u003c/code\u003e, \u003ccode\u003econtains\u003c/code\u003e and \u003ccode\u003eremove\u003c/code\u003e), assuming the hash function disperses elements properly among the buckets. Performance is likely to be just slightly below that of \u003ccode\u003eHashSet\u003c/code\u003e, due to the added expense of maintaining the linked list, with one exception: Iteration over a \u003ccode\u003eLinkedHashSet\u003c/code\u003e requires time proportional to the \u003ci\u003esize\u003c/i\u003e of the set, regardless of its capacity. Iteration over a \u003ccode\u003eHashSet\u003c/code\u003e is likely to be more expensive, requiring time proportional to its \u003ci\u003ecapacity\u003c/i\u003e. \u003c/p\u003e\n\u003cp\u003eA linked hash set has two parameters that affect its performance: \u003ci\u003einitial capacity\u003c/i\u003e and \u003ci\u003eload factor\u003c/i\u003e. They are defined precisely as for \u003ccode\u003eHashSet\u003c/code\u003e. Note, however, that the penalty for choosing an excessively high value for initial capacity is less severe for this class than for \u003ccode\u003eHashSet\u003c/code\u003e, as iteration times for this class are unaffected by capacity. \u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote that this implementation is not synchronized.\u003c/strong\u003e If multiple threads access a linked hash set concurrently, and at least one of the threads modifies the set, it \u003cem\u003emust\u003c/em\u003e be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set. If no such object exists, the set should be \"wrapped\" using the \u003ca href\u003d\"Collections.html#synchronizedSet(java.util.Set)\"\u003e\u003ccode\u003eCollections.synchronizedSet\u003c/code\u003e\u003c/a\u003e method. This is best done at creation time, to prevent accidental unsynchronized access to the set: \u003c/p\u003e\n\u003cpre\u003e   Set s \u003d Collections.synchronizedSet(new LinkedHashSet(...));\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe iterators returned by this class\u0027s \u003ccode\u003eiterator\u003c/code\u003e method are \u003cem\u003efail-fast\u003c/em\u003e: if the set is modified at any time after the iterator is created, in any way except through the iterator\u0027s own \u003ccode\u003eremove\u003c/code\u003e method, the iterator will throw a \u003ca href\u003d\"ConcurrentModificationException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eConcurrentModificationException\u003c/code\u003e\u003c/a\u003e. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. \u003c/p\u003e\n\u003cp\u003eNote that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw \u003ccode\u003eConcurrentModificationException\u003c/code\u003e on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: \u003ci\u003ethe fail-fast behavior of iterators should be used only to detect bugs.\u003c/i\u003e \u003c/p\u003e\n\u003cp\u003eThis class is a member of the \u003ca href\u003d\"../../../java.base/java/util/package-summary.html#CollectionsFramework\"\u003e Java Collections Framework\u003c/a\u003e.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collection.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Set.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashSet.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/TreeSet.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eTreeSet\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Hashtable.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashtable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.util.LinkedHashSet\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}