{
  "packageName": "java.nio.charset",
  "simpleName": "Charset",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "charsetName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isSupported",
      "comment": "Tells whether the named charset is supported.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003echarsetName\u003c/code\u003e - The name of the requested charset; may be either a canonical name or an alias"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/IllegalCharsetNameException.html\" title\u003d\"class in java.nio.charset\"\u003eIllegalCharsetNameException\u003c/a\u003e\u003c/code\u003e - If the given charset name is illegal",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the given \n\u003ccode\u003echarsetName\u003c/code\u003e is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, support for the named charset is available in the current Java virtual machine"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.Charset",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "charsetName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "forName",
      "comment": "Returns a charset object for the named charset.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003echarsetName\u003c/code\u003e - The name of the requested charset; may be either a canonical name or an alias"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/IllegalCharsetNameException.html\" title\u003d\"class in java.nio.charset\"\u003eIllegalCharsetNameException\u003c/a\u003e\u003c/code\u003e - If the given charset name is illegal",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the given \n\u003ccode\u003echarsetName\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/UnsupportedCharsetException.html\" title\u003d\"class in java.nio.charset\"\u003eUnsupportedCharsetException\u003c/a\u003e\u003c/code\u003e - If no support for the named charset is available in this instance of the Java virtual machine"
        ],
        "return": [
          "A charset object for the named charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "availableCharsets",
      "comment": "Constructs a sorted map from canonical charset names to charset objects. The map returned by this method will have one entry for each charset for which support is available in the current Java virtual machine. If two or more supported charsets have the same canonical name then the resulting map will contain just one of them; which one it will contain is not specified. The invocation of this method, and the subsequent use of the resulting map, may cause time-consuming disk or network I/O operations to occur. This method is provided for applications that need to enumerate all of the available charsets, for example to allow user charset selection. This method is not used by the forName method, which instead employs an efficient incremental lookup algorithm. This method may return different results at different times if new charset providers are dynamically made available to the current Java virtual machine. In the absence of such changes, the charsets returned by this method are exactly those that can be retrieved via the forName method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An immutable, case-insensitive map from canonical charset names to charset objects"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.Charset",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "defaultCharset",
      "comment": "Returns the default charset of this Java virtual machine. The default charset is determined during virtual-machine startup and typically depends upon the locale and charset of the underlying operating system.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A charset object for the default charset"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "name",
      "comment": "Returns this charset\u0027s canonical name.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The canonical name of this charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "aliases",
      "comment": "Returns a set containing this charset\u0027s aliases.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An immutable set of this charset\u0027s aliases"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "displayName",
      "comment": "Returns this charset\u0027s human-readable name for the default locale. The default implementation of this method simply returns this charset\u0027s canonical name. Concrete subclasses of this class may override this method in order to provide a localized display name.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The display name of this charset in the default locale"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isRegistered",
      "comment": "Tells whether or not this charset is registered in the IANA Charset Registry.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this charset is known by its implementor to be registered with the IANA"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "displayName",
      "comment": "Returns this charset\u0027s human-readable name for the given locale. The default implementation of this method simply returns this charset\u0027s canonical name. Concrete subclasses of this class may override this method in order to provide a localized display name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - The locale for which the display name is to be retrieved"
        ],
        "return": [
          "The display name of this charset in the given locale"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "cs",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "contains",
      "comment": "Tells whether or not this charset contains the given charset. A charset C is said to contain a charset D if, and only if, every character representable in D is also representable in C. If this relationship holds then it is guaranteed that every string that can be encoded in D can also be encoded in C without performing any replacements. That C contains D does not imply that each character representable in C by a particular byte sequence is represented in D by the same byte sequence, although sometimes this is the case. Every charset contains itself. This method computes an approximation of the containment relation: If it returns true then the given charset is known to be contained by this charset; if it returns false, however, then it is not necessarily the case that the given charset is not contained in this charset.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecs\u003c/code\u003e - The given charset"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given charset is contained in this charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CharsetDecoder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "newDecoder",
      "comment": "Constructs a new decoder for this charset.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A new decoder for this charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CharsetEncoder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "newEncoder",
      "comment": "Constructs a new encoder for this charset.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this charset does not support encoding"
        ],
        "return": [
          "A new encoder for this charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canEncode",
      "comment": "Tells whether or not this charset supports encoding. Nearly all charsets support encoding. The primary exceptions are special-purpose auto-detect charsets whose decoders can determine which of several possible encoding schemes is in use by examining the input byte sequence. Such charsets do not support encoding because there is no way to determine which encoding should be used on output. Implementations of such charsets should override this method to return false.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this charset supports encoding"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "name": "bb",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "decode",
      "comment": "Convenience method that decodes bytes in this charset into Unicode characters. An invocation of this method upon a charset cs returns the same result as the expression      cs.newDecoder()\n       .onMalformedInput(CodingErrorAction.REPLACE)\n       .onUnmappableCharacter(CodingErrorAction.REPLACE)\n       .decode(bb); except that it is potentially more efficient because it can cache decoders between successive invocations. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement byte array. In order to detect such sequences, use the CharsetDecoder.decode(java.nio.ByteBuffer) method directly.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebb\u003c/code\u003e - The byte buffer to be decoded"
        ],
        "return": [
          "A char buffer containing the decoded characters"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.CharBuffer",
            "type": "Class"
          },
          "name": "cb",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "encode",
      "comment": "Convenience method that encodes Unicode characters into bytes in this charset. An invocation of this method upon a charset cs returns the same result as the expression      cs.newEncoder()\n       .onMalformedInput(CodingErrorAction.REPLACE)\n       .onUnmappableCharacter(CodingErrorAction.REPLACE)\n       .encode(bb); except that it is potentially more efficient because it can cache encoders between successive invocations. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. In order to detect such sequences, use the CharsetEncoder.encode(java.nio.CharBuffer) method directly.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecb\u003c/code\u003e - The char buffer to be encoded"
        ],
        "return": [
          "A byte buffer containing the encoded characters"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "encode",
      "comment": "Convenience method that encodes a string into bytes in this charset. An invocation of this method upon a charset cs returns the same result as the expression      cs.encode(CharBuffer.wrap(s));",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - The string to be encoded"
        ],
        "return": [
          "A byte buffer containing the encoded characters"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "that",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compareTo",
      "comment": "Compares this charset to another. Charsets are ordered by their canonical names, without regard to case.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003eCharset\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ethat\u003c/code\u003e - The charset to which this charset is to be compared"
        ],
        "return": [
          "A negative integer, zero, or a positive integer as this charset is less than, equal to, or greater than the specified charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hashCode",
      "comment": "Computes a hashcode for this charset.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "An integer hashcode"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "ob",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "equals",
      "comment": "Tells whether or not this object is equal to another. Two charsets are equal if, and only if, they have the same canonical names. A charset is never equal to any other type of object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eob\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this charset is equal to the given object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "toString",
      "comment": "Returns a string describing this charset.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A string describing this charset"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "canonicalName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "aliases",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initializes a new charset with the given canonical name and alias set.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecanonicalName\u003c/code\u003e - The canonical name of this charset",
          "\u003ccode\u003ealiases\u003c/code\u003e - An array of this charset\u0027s aliases, or null if it has no aliases"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/IllegalCharsetNameException.html\" title\u003d\"class in java.nio.charset\"\u003eIllegalCharsetNameException\u003c/a\u003e\u003c/code\u003e - If the canonical name or any of the aliases are illegal"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.charset.Charset",
  "comment": "A named mapping between sequences of sixteen-bit Unicode \n\u003ca href\u003d\"../../lang/Character.html#unicode\"\u003ecode units\u003c/a\u003e and sequences of bytes. This class defines methods for creating decoders and encoders and for retrieving the various names associated with a charset. Instances of this class are immutable. \n\u003cp\u003e This class also defines static methods for testing whether a particular charset is supported, for locating charset instances by name, and for constructing a map that contains every charset for which support is available in the current Java virtual machine. Support for new charsets can be added via the service-provider interface defined in the \u003ca href\u003d\"spi/CharsetProvider.html\" title\u003d\"class in java.nio.charset.spi\"\u003e\u003ccode\u003eCharsetProvider\u003c/code\u003e\u003c/a\u003e class. \u003c/p\u003e\n\u003cp\u003e All of the methods defined in this class are safe for use by multiple concurrent threads. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"names\"\u003eCharset names\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e Charsets are named by strings composed of the following characters: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e The uppercase letters \u003ccode\u003e\u0027A\u0027\u003c/code\u003e through \u003ccode\u003e\u0027Z\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0041\u0027\u003c/code\u003e\u0026nbsp;through\u0026nbsp;\u003ccode\u003e\u0027\\u005a\u0027\u003c/code\u003e), \u003c/li\u003e\n \u003cli\u003e The lowercase letters \u003ccode\u003e\u0027a\u0027\u003c/code\u003e through \u003ccode\u003e\u0027z\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0061\u0027\u003c/code\u003e\u0026nbsp;through\u0026nbsp;\u003ccode\u003e\u0027\\u007a\u0027\u003c/code\u003e), \u003c/li\u003e\n \u003cli\u003e The digits \u003ccode\u003e\u00270\u0027\u003c/code\u003e through \u003ccode\u003e\u00279\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u0030\u0027\u003c/code\u003e\u0026nbsp;through\u0026nbsp;\u003ccode\u003e\u0027\\u0039\u0027\u003c/code\u003e), \u003c/li\u003e\n \u003cli\u003e The dash character \u003ccode\u003e\u0027-\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002d\u0027\u003c/code\u003e,\u0026nbsp;\u003csmall\u003eHYPHEN-MINUS\u003c/small\u003e), \u003c/li\u003e\n \u003cli\u003e The plus character \u003ccode\u003e\u0027+\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002b\u0027\u003c/code\u003e,\u0026nbsp;\u003csmall\u003ePLUS SIGN\u003c/small\u003e), \u003c/li\u003e\n \u003cli\u003e The period character \u003ccode\u003e\u0027.\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u002e\u0027\u003c/code\u003e,\u0026nbsp;\u003csmall\u003eFULL STOP\u003c/small\u003e), \u003c/li\u003e\n \u003cli\u003e The colon character \u003ccode\u003e\u0027:\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u003a\u0027\u003c/code\u003e,\u0026nbsp;\u003csmall\u003eCOLON\u003c/small\u003e), and \u003c/li\u003e\n \u003cli\u003e The underscore character \u003ccode\u003e\u0027_\u0027\u003c/code\u003e (\u003ccode\u003e\u0027\\u005f\u0027\u003c/code\u003e,\u0026nbsp;\u003csmall\u003eLOW\u0026nbsp;LINE\u003c/small\u003e). \u003c/li\u003e\n\u003c/ul\u003e A charset name must begin with either a letter or a digit. The empty string is not a legal charset name. Charset names are not case-sensitive; that is, case is always ignored when comparing charset names. Charset names generally follow the conventions documented in \n\u003ca href\u003d\"http://www.ietf.org/rfc/rfc2278.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2278:\u0026nbsp;IANA Charset Registration Procedures\u003c/i\u003e\u003c/a\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Every charset has a \u003ci\u003ecanonical name\u003c/i\u003e and may also have one or more \u003ci\u003ealiases\u003c/i\u003e. The canonical name is returned by the \u003ca href\u003d\"#name()\"\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/a\u003e method of this class. Canonical names are, by convention, usually in upper case. The aliases of a charset are returned by the \u003ca href\u003d\"#aliases()\"\u003e\u003ccode\u003ealiases\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"hn\"\u003eSome charsets have an \u003ci\u003ehistorical name\u003c/i\u003e that is defined for compatibility with previous versions of the Java platform.\u003c/a\u003e A charset\u0027s historical name is either its canonical name or one of its aliases. The historical name is returned by the \u003ccode\u003egetEncoding()\u003c/code\u003e methods of the \u003ca href\u003d\"../../io/InputStreamReader.html#getEncoding()\"\u003e\u003ccode\u003eInputStreamReader\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"../../io/OutputStreamWriter.html#getEncoding()\"\u003e\u003ccode\u003eOutputStreamWriter\u003c/code\u003e\u003c/a\u003e classes. \u003c/p\u003e\n\u003cp\u003e\u003ca id\u003d\"iana\"\u003e \u003c/a\u003eIf a charset listed in the \u003ca href\u003d\"http://www.iana.org/assignments/character-sets\"\u003e\u003ci\u003eIANA Charset Registry\u003c/i\u003e\u003c/a\u003e is supported by an implementation of the Java platform then its canonical name must be the name listed in the registry. Many charsets are given more than one name in the registry, in which case the registry identifies one of the names as \u003ci\u003eMIME-preferred\u003c/i\u003e. If a charset has more than one registry name then its canonical name must be the MIME-preferred name and the other names in the registry must be valid aliases. If a supported charset is not listed in the IANA registry then its canonical name must begin with one of the strings \u003ccode\u003e\"X-\"\u003c/code\u003e or \u003ccode\u003e\"x-\"\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The IANA charset registry does change over time, and so the canonical name and the aliases of a particular charset may also change over time. To ensure compatibility it is recommended that no alias ever be removed from a charset, and that if the canonical name of a charset is changed then its previous canonical name be made into an alias. \u003c/p\u003e\n\u003ch2\u003e\u003ca id\u003d\"standard\"\u003eStandard charsets\u003c/a\u003e\u003c/h2\u003e \n\u003cp\u003e Every implementation of the Java platform is required to support the following standard charsets. Consult the release documentation for your implementation to see if any other charsets are supported. The behavior of such optional charsets may differ between implementations. \u003c/p\u003e\n\u003cblockquote\u003e\n \u003ctable class\u003d\"striped\" style\u003d\"width:80%\"\u003e \n  \u003ccaption style\u003d\"display:none\"\u003e\n   Description of standard charsets\n  \u003c/caption\u003e \n  \u003cthead\u003e \n   \u003ctr\u003e\n    \u003cth scope\u003d\"col\" style\u003d\"text-align:left\"\u003eCharset\u003c/th\u003e\n    \u003cth scope\u003d\"col\" style\u003d\"text-align:left\"\u003eDescription\u003c/th\u003e\n   \u003c/tr\u003e \n  \u003c/thead\u003e \n  \u003ctbody\u003e \n   \u003ctr\u003e\n    \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003eUS-ASCII\u003c/code\u003e\u003c/th\u003e \n    \u003ctd\u003eSeven-bit ASCII, a.k.a. \u003ccode\u003eISO646-US\u003c/code\u003e, a.k.a. the Basic Latin block of the Unicode character set\u003c/td\u003e\n   \u003c/tr\u003e \n   \u003ctr\u003e\n    \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003eISO-8859-1\u0026nbsp;\u0026nbsp;\u003c/code\u003e\u003c/th\u003e \n    \u003ctd\u003eISO Latin Alphabet No. 1, a.k.a. \u003ccode\u003eISO-LATIN-1\u003c/code\u003e\u003c/td\u003e\n   \u003c/tr\u003e \n   \u003ctr\u003e\n    \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003eUTF-8\u003c/code\u003e\u003c/th\u003e \n    \u003ctd\u003eEight-bit UCS Transformation Format\u003c/td\u003e\n   \u003c/tr\u003e \n   \u003ctr\u003e\n    \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003eUTF-16BE\u003c/code\u003e\u003c/th\u003e \n    \u003ctd\u003eSixteen-bit UCS Transformation Format, big-endian byte\u0026nbsp;order\u003c/td\u003e\n   \u003c/tr\u003e \n   \u003ctr\u003e\n    \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003eUTF-16LE\u003c/code\u003e\u003c/th\u003e \n    \u003ctd\u003eSixteen-bit UCS Transformation Format, little-endian byte\u0026nbsp;order\u003c/td\u003e\n   \u003c/tr\u003e \n   \u003ctr\u003e\n    \u003cth scope\u003d\"row\" style\u003d\"vertical-align:top\"\u003e\u003ccode\u003eUTF-16\u003c/code\u003e\u003c/th\u003e \n    \u003ctd\u003eSixteen-bit UCS Transformation Format, byte\u0026nbsp;order identified by an optional byte-order mark\u003c/td\u003e\n   \u003c/tr\u003e \n  \u003c/tbody\u003e \n \u003c/table\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eUTF-8\u003c/code\u003e charset is specified by \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2279.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2279\u003c/i\u003e\u003c/a\u003e; the transformation format upon which it is based is specified in Amendment\u0026nbsp;2 of ISO\u0026nbsp;10646-1 and is also described in the \u003ca href\u003d\"http://www.unicode.org/unicode/standard/standard.html\"\u003e\u003ci\u003eUnicode Standard\u003c/i\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eUTF-16\u003c/code\u003e charsets are specified by \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2781.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2781\u003c/i\u003e\u003c/a\u003e; the transformation formats upon which they are based are specified in Amendment\u0026nbsp;1 of ISO\u0026nbsp;10646-1 and are also described in the \u003ca href\u003d\"http://www.unicode.org/unicode/standard/standard.html\"\u003e\u003ci\u003eUnicode Standard\u003c/i\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003eUTF-16\u003c/code\u003e charsets use sixteen-bit quantities and are therefore sensitive to byte order. In these encodings the byte order of a stream may be indicated by an initial \u003ci\u003ebyte-order mark\u003c/i\u003e represented by the Unicode character \u003ccode\u003e\u0027\\uFEFF\u0027\u003c/code\u003e. Byte-order marks are handled as follows: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e When decoding, the \u003ccode\u003eUTF-16BE\u003c/code\u003e and \u003ccode\u003eUTF-16LE\u003c/code\u003e charsets interpret the initial byte-order marks as a \u003csmall\u003eZERO-WIDTH NON-BREAKING SPACE\u003c/small\u003e; when encoding, they do not write byte-order marks. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e When decoding, the \u003ccode\u003eUTF-16\u003c/code\u003e charset interprets the byte-order mark at the beginning of the input stream to indicate the byte-order of the stream but defaults to big-endian if there is no byte-order mark; when encoding, it uses big-endian byte order and writes a big-endian byte-order mark. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e In any case, byte order marks occurring after the first element of an input sequence are not omitted since the same code is used to represent \n\u003csmall\u003eZERO-WIDTH NON-BREAKING SPACE\u003c/small\u003e. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Every instance of the Java virtual machine has a default charset, which may or may not be one of the standard charsets. The default charset is determined during virtual-machine startup and typically depends upon the locale and charset being used by the underlying operating system. \u003c/p\u003e \n\u003cp\u003e The \u003ca href\u003d\"StandardCharsets.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eStandardCharsets\u003c/code\u003e\u003c/a\u003e class defines constants for each of the standard charsets. \u003c/p\u003e\n\u003ch2\u003eTerminology\u003c/h2\u003e \n\u003cp\u003e The name of this class is taken from the terms used in \u003ca href\u003d\"http://www.ietf.org/rfc/rfc2278.txt\"\u003e\u003ci\u003eRFC\u0026nbsp;2278\u003c/i\u003e\u003c/a\u003e. In that document a \u003ci\u003echarset\u003c/i\u003e is defined as the combination of one or more coded character sets and a character-encoding scheme. (This definition is confusing; some other software systems define \u003ci\u003echarset\u003c/i\u003e as a synonym for \u003ci\u003ecoded character set\u003c/i\u003e.) \u003c/p\u003e\n\u003cp\u003e A \u003ci\u003ecoded character set\u003c/i\u003e is a mapping between a set of abstract characters and a set of integers. US-ASCII, ISO\u0026nbsp;8859-1, JIS\u0026nbsp;X\u0026nbsp;0201, and Unicode are examples of coded character sets. \u003c/p\u003e\n\u003cp\u003e Some standards have defined a \u003ci\u003echaracter set\u003c/i\u003e to be simply a set of abstract characters without an associated assigned numbering. An alphabet is an example of such a character set. However, the subtle distinction between \u003ci\u003echaracter set\u003c/i\u003e and \u003ci\u003ecoded character set\u003c/i\u003e is rarely used in practice; the former has become a short form for the latter, including in the Java API specification. \u003c/p\u003e\n\u003cp\u003e A \u003ci\u003echaracter-encoding scheme\u003c/i\u003e is a mapping between one or more coded character sets and a set of octet (eight-bit byte) sequences. UTF-8, UTF-16, ISO\u0026nbsp;2022, and EUC are examples of character-encoding schemes. Encoding schemes are often associated with a particular coded character set; UTF-8, for example, is used only to encode Unicode. Some schemes, however, are associated with multiple coded character sets; EUC, for example, can be used to encode characters in a variety of Asian coded character sets. \u003c/p\u003e\n\u003cp\u003e When a coded character set is used exclusively with a single character-encoding scheme then the corresponding charset is usually named for the coded character set; otherwise a charset is usually named for the encoding scheme and, possibly, the locale of the coded character sets that it supports. Hence \u003ccode\u003eUS-ASCII\u003c/code\u003e is both the name of a coded character set and of the charset that encodes it, while \u003ccode\u003eEUC-JP\u003c/code\u003e is the name of the charset that encodes the JIS\u0026nbsp;X\u0026nbsp;0201, JIS\u0026nbsp;X\u0026nbsp;0208, and JIS\u0026nbsp;X\u0026nbsp;0212 coded character sets for the Japanese language. \u003c/p\u003e\n\u003cp\u003e The native character encoding of the Java programming language is UTF-16. A charset in the Java platform therefore defines a mapping between sequences of sixteen-bit UTF-16 code units (that is, sequences of chars) and sequences of bytes. \u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CharsetDecoder.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharsetDecoder\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CharsetEncoder.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharsetEncoder\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/spi/CharsetProvider.html\" title\u003d\"class in java.nio.charset.spi\"\u003e\u003ccode\u003eCharsetProvider\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eCharacter\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}