{
  "packageName": "java.nio.charset",
  "simpleName": "Charset",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "charsetName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isSupported",
      "comment": "Tells whether the named charset is supported.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003echarsetName\u003c/code\u003e - The name of the requested charset; may be either a canonical name or an alias"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/IllegalCharsetNameException.html\" title\u003d\"class in java.nio.charset\"\u003eIllegalCharsetNameException\u003c/a\u003e\u003c/code\u003e - If the given charset name is illegal",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the given \n\u003ccode\u003echarsetName\u003c/code\u003e is null"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, support for the named charset is available in the current Java virtual machine"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.Charset",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "charsetName",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "forName",
      "comment": "Returns a charset object for the named charset.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003echarsetName\u003c/code\u003e - The name of the requested charset; may be either a canonical name or an alias"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/IllegalCharsetNameException.html\" title\u003d\"class in java.nio.charset\"\u003eIllegalCharsetNameException\u003c/a\u003e\u003c/code\u003e - If the given charset name is illegal",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the given \n\u003ccode\u003echarsetName\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/UnsupportedCharsetException.html\" title\u003d\"class in java.nio.charset\"\u003eUnsupportedCharsetException\u003c/a\u003e\u003c/code\u003e - If no support for the named charset is available in this instance of the Java virtual machine"
        ],
        "return": [
          "A charset object for the named charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.SortedMap",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "availableCharsets",
      "comment": "Constructs a sorted map from canonical charset names to charset objects. The map returned by this method will have one entry for each charset for which support is available in the current Java virtual machine. If two or more supported charsets have the same canonical name then the resulting map will contain just one of them; which one it will contain is not specified. The invocation of this method, and the subsequent use of the resulting map, may cause time-consuming disk or network I/O operations to occur. This method is provided for applications that need to enumerate all of the available charsets, for example to allow user charset selection. This method is not used by the forName method, which instead employs an efficient incremental lookup algorithm. This method may return different results at different times if new charset providers are dynamically made available to the current Java virtual machine. In the absence of such changes, the charsets returned by this method are exactly those that can be retrieved via the forName method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An immutable, case-insensitive map from canonical charset names to charset objects"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.Charset",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "defaultCharset",
      "comment": "Returns the default charset of this Java virtual machine. The default charset is determined during virtual-machine startup and typically depends upon the locale and charset of the underlying operating system.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A charset object for the default charset"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "name",
      "comment": "Returns this charset\u0027s canonical name.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The canonical name of this charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "aliases",
      "comment": "Returns a set containing this charset\u0027s aliases.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An immutable set of this charset\u0027s aliases"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "displayName",
      "comment": "Returns this charset\u0027s human-readable name for the default locale. The default implementation of this method simply returns this charset\u0027s canonical name. Concrete subclasses of this class may override this method in order to provide a localized display name.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The display name of this charset in the default locale"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isRegistered",
      "comment": "Tells whether or not this charset is registered in the IANA Charset Registry.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this charset is known by its implementor to be registered with the IANA"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "name": "locale",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "displayName",
      "comment": "Returns this charset\u0027s human-readable name for the given locale. The default implementation of this method simply returns this charset\u0027s canonical name. Concrete subclasses of this class may override this method in order to provide a localized display name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003elocale\u003c/code\u003e - The locale for which the display name is to be retrieved"
        ],
        "return": [
          "The display name of this charset in the given locale"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "cs",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "contains",
      "comment": "Tells whether or not this charset contains the given charset. A charset C is said to contain a charset D if, and only if, every character representable in D is also representable in C. If this relationship holds then it is guaranteed that every string that can be encoded in D can also be encoded in C without performing any replacements. That C contains D does not imply that each character representable in C by a particular byte sequence is represented in D by the same byte sequence, although sometimes this is the case. Every charset contains itself. This method computes an approximation of the containment relation: If it returns true then the given charset is known to be contained by this charset; if it returns false, however, then it is not necessarily the case that the given charset is not contained in this charset.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecs\u003c/code\u003e - The given charset"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the given charset is contained in this charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CharsetDecoder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "newDecoder",
      "comment": "Constructs a new decoder for this charset.",
      "annotations": [],
      "tagMap": {
        "return": [
          "A new decoder for this charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CharsetEncoder",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "newEncoder",
      "comment": "Constructs a new encoder for this charset.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this charset does not support encoding"
        ],
        "return": [
          "A new encoder for this charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canEncode",
      "comment": "Tells whether or not this charset supports encoding. Nearly all charsets support encoding. The primary exceptions are special-purpose auto-detect charsets whose decoders can determine which of several possible encoding schemes is in use by examining the input byte sequence. Such charsets do not support encoding because there is no way to determine which encoding should be used on output. Implementations of such charsets should override this method to return false.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this charset supports encoding"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "name": "bb",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "decode",
      "comment": "Convenience method that decodes bytes in this charset into Unicode characters. An invocation of this method upon a charset cs returns the same result as the expression      cs.newDecoder()\n       .onMalformedInput(CodingErrorAction.REPLACE)\n       .onUnmappableCharacter(CodingErrorAction.REPLACE)\n       .decode(bb); except that it is potentially more efficient because it can cache decoders between successive invocations. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement byte array. In order to detect such sequences, use the CharsetDecoder.decode(java.nio.ByteBuffer) method directly.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ebb\u003c/code\u003e - The byte buffer to be decoded"
        ],
        "return": [
          "A char buffer containing the decoded characters"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.CharBuffer",
            "type": "Class"
          },
          "name": "cb",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "encode",
      "comment": "Convenience method that encodes Unicode characters into bytes in this charset. An invocation of this method upon a charset cs returns the same result as the expression      cs.newEncoder()\n       .onMalformedInput(CodingErrorAction.REPLACE)\n       .onUnmappableCharacter(CodingErrorAction.REPLACE)\n       .encode(bb); except that it is potentially more efficient because it can cache encoders between successive invocations. This method always replaces malformed-input and unmappable-character sequences with this charset\u0027s default replacement string. In order to detect such sequences, use the CharsetEncoder.encode(java.nio.CharBuffer) method directly.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecb\u003c/code\u003e - The char buffer to be encoded"
        ],
        "return": [
          "A byte buffer containing the encoded characters"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "str",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "encode",
      "comment": "Convenience method that encodes a string into bytes in this charset. An invocation of this method upon a charset cs returns the same result as the expression      cs.encode(CharBuffer.wrap(s));",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estr\u003c/code\u003e - The string to be encoded"
        ],
        "return": [
          "A byte buffer containing the encoded characters"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "name": "that",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "compareTo",
      "comment": "Compares this charset to another. Charsets are ordered by their canonical names, without regard to case.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003eCharset\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ethat\u003c/code\u003e - The charset to which this charset is to be compared"
        ],
        "return": [
          "A negative integer, zero, or a positive integer as this charset is less than, equal to, or greater than the specified charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hashCode",
      "comment": "Computes a hashcode for this charset.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "An integer hashcode"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "ob",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "equals",
      "comment": "Tells whether or not this object is equal to another. Two charsets are equal if, and only if, they have the same canonical names. A charset is never equal to any other type of object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eob\u003c/code\u003e - the reference object with which to compare."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this charset is equal to the given object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "toString",
      "comment": "Returns a string describing this charset.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A string describing this charset"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "canonicalName",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "aliases",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initializes a new charset with the given canonical name and alias set.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecanonicalName\u003c/code\u003e - The canonical name of this charset",
          "\u003ccode\u003ealiases\u003c/code\u003e - An array of this charset\u0027s aliases, or null if it has no aliases"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/IllegalCharsetNameException.html\" title\u003d\"class in java.nio.charset\"\u003eIllegalCharsetNameException\u003c/a\u003e\u003c/code\u003e - If the canonical name or any of the aliases are illegal"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.charset.Charset",
  "annotations": [],
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CharsetDecoder.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharsetDecoder\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CharsetEncoder.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharsetEncoder\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/spi/CharsetProvider.html\" title\u003d\"class in java.nio.charset.spi\"\u003e\u003ccode\u003eCharsetProvider\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Character.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eCharacter\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}