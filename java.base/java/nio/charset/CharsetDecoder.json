{
  "packageName": "java.nio.charset",
  "simpleName": "CharsetDecoder",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.charset.Charset",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "charset",
      "comment": "Returns the charset that created this decoder.",
      "tagMap": {
        "return": [
          "This decoder\u0027s charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "replacement",
      "comment": "Returns this decoder\u0027s replacement value.",
      "tagMap": {
        "return": [
          "This decoder\u0027s current replacement, which is never \n\u003ccode\u003enull\u003c/code\u003e and is never empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CharsetDecoder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "newReplacement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "replaceWith",
      "comment": "Changes this decoder\u0027s replacement value. This method invokes the implReplaceWith method, passing the new replacement, after checking that the new replacement is acceptable.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewReplacement\u003c/code\u003e - The new replacement; must not be \n\u003ccode\u003enull\u003c/code\u003e, must have non-zero length, and must not be longer than the value returned by the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CharsetDecoder.html#maxCharsPerByte()\"\u003e\u003ccode\u003emaxCharsPerByte\u003c/code\u003e\u003c/a\u003e method"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the parameter do not hold"
        ],
        "return": [
          "This decoder"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "newReplacement"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "implReplaceWith",
      "comment": "Reports a change to this decoder\u0027s replacement value. The default implementation of this method does nothing. This method should be overridden by decoders that require notification of changes to the replacement.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewReplacement\u003c/code\u003e - The replacement value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CodingErrorAction",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "malformedInputAction",
      "comment": "Returns this decoder\u0027s current action for malformed-input errors.",
      "tagMap": {
        "return": [
          "The current malformed-input action, which is never \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CharsetDecoder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.charset.CodingErrorAction",
            "type": "Class"
          },
          "field": {
            "name": "newAction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "onMalformedInput",
      "comment": "Changes this decoder\u0027s action for malformed-input errors. This method invokes the implOnMalformedInput method, passing the new action.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewAction\u003c/code\u003e - The new action; must not be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the precondition on the parameter does not hold"
        ],
        "return": [
          "This decoder"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.charset.CodingErrorAction",
            "type": "Class"
          },
          "field": {
            "name": "newAction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "implOnMalformedInput",
      "comment": "Reports a change to this decoder\u0027s malformed-input action. The default implementation of this method does nothing. This method should be overridden by decoders that require notification of changes to the malformed-input action.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewAction\u003c/code\u003e - The new action"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CodingErrorAction",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "unmappableCharacterAction",
      "comment": "Returns this decoder\u0027s current action for unmappable-character errors.",
      "tagMap": {
        "return": [
          "The current unmappable-character action, which is never \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CharsetDecoder",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.charset.CodingErrorAction",
            "type": "Class"
          },
          "field": {
            "name": "newAction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "onUnmappableCharacter",
      "comment": "Changes this decoder\u0027s action for unmappable-character errors. This method invokes the implOnUnmappableCharacter method, passing the new action.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewAction\u003c/code\u003e - The new action; must not be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the precondition on the parameter does not hold"
        ],
        "return": [
          "This decoder"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.charset.CodingErrorAction",
            "type": "Class"
          },
          "field": {
            "name": "newAction"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "implOnUnmappableCharacter",
      "comment": "Reports a change to this decoder\u0027s unmappable-character action. The default implementation of this method does nothing. This method should be overridden by decoders that require notification of changes to the unmappable-character action.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enewAction\u003c/code\u003e - The new action"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "averageCharsPerByte",
      "comment": "Returns the average number of characters that will be produced for each byte of input. This heuristic value may be used to estimate the size of the output buffer required for a given input sequence.",
      "tagMap": {
        "return": [
          "The average number of characters produced per byte of input"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "maxCharsPerByte",
      "comment": "Returns the maximum number of characters that will be produced for each byte of input. This value may be used to compute the worst-case size of the output buffer required for a given input sequence. This value accounts for any necessary content-independent prefix or suffix characters.",
      "tagMap": {
        "return": [
          "The maximum number of characters that will be produced per byte of input"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CoderResult",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "java.nio.CharBuffer",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "endOfInput"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "decode",
      "comment": "Decodes as many bytes as possible from the given input buffer, writing the results to the given output buffer. The buffers are read from, and written to, starting at their current positions. At most in.remaining() bytes will be read and at most out.remaining() characters will be written. The buffers\u0027 positions will be advanced to reflect the bytes read and the characters written, but their marks and limits will not be modified. In addition to reading bytes from the input buffer and writing characters to the output buffer, this method returns a CoderResult object to describe its reason for termination: CoderResult.UNDERFLOW indicates that as much of the input buffer as possible has been decoded. If there is no further input then the invoker can proceed to the next step of the decoding operation. Otherwise this method should be invoked again with further input. CoderResult.OVERFLOW indicates that there is insufficient space in the output buffer to decode any more bytes. This method should be invoked again with an output buffer that has more remaining characters. This is typically done by draining any decoded characters from the output buffer. A malformed-input result indicates that a malformed-input error has been detected. The malformed bytes begin at the input buffer\u0027s (possibly incremented) position; the number of malformed bytes may be determined by invoking the result object\u0027s length method. This case applies only if the malformed action of this decoder is CodingErrorAction.REPORT; otherwise the malformed input will be ignored or replaced, as requested. An unmappable-character result indicates that an unmappable-character error has been detected. The bytes that decode the unmappable character begin at the input buffer\u0027s (possibly incremented) position; the number of such bytes may be determined by invoking the result object\u0027s length method. This case applies only if the unmappable action of this decoder is CodingErrorAction.REPORT; otherwise the unmappable character will be ignored or replaced, as requested. In any case, if this method is to be reinvoked in the same decoding operation then care should be taken to preserve any bytes remaining in the input buffer so that they are available to the next invocation. The endOfInput parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of providing additional input then the invoker should pass false for this parameter; if there is no possibility of providing further input then the invoker should pass true. It is not erroneous, and in fact it is quite common, to pass false in one invocation and later discover that no further input was actually available. It is critical, however, that the final invocation of this method in a sequence of invocations always pass true so that any remaining undecoded input will be treated as being malformed. This method works by invoking the decodeLoop method, interpreting its results, handling error conditions, and reinvoking it as necessary.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - The input byte buffer",
          "\u003ccode\u003eout\u003c/code\u003e - The output character buffer",
          "\u003ccode\u003eendOfInput\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if, and only if, the invoker can provide no additional input bytes beyond those in the given buffer"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If a decoding operation is already in progress and the previous step was an invocation neither of the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CharsetDecoder.html#reset()\"\u003e\u003ccode\u003ereset\u003c/code\u003e\u003c/a\u003e method, nor of this method with a value of \n\u003ccode\u003efalse\u003c/code\u003e for the \n\u003ccode\u003eendOfInput\u003c/code\u003e parameter, nor of this method with a value of \n\u003ccode\u003etrue\u003c/code\u003e for the \n\u003ccode\u003eendOfInput\u003c/code\u003e parameter but a return value indicating an incomplete decoding operation",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CoderMalfunctionError.html\" title\u003d\"class in java.nio.charset\"\u003eCoderMalfunctionError\u003c/a\u003e\u003c/code\u003e - If an invocation of the decodeLoop method threw an unexpected exception"
        ],
        "return": [
          "A coder-result object describing the reason for termination"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CoderResult",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.CharBuffer",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "flush",
      "comment": "Flushes this decoder. Some decoders maintain internal state and may need to write some final characters to the output buffer once the overall input sequence has been read. Any additional output is written to the output buffer beginning at its current position. At most out.remaining() characters will be written. The buffer\u0027s position will be advanced appropriately, but its mark and limit will not be modified. If this method completes successfully then it returns CoderResult.UNDERFLOW. If there is insufficient room in the output buffer then it returns CoderResult.OVERFLOW. If this happens then this method must be invoked again, with an output buffer that has more room, in order to complete the current decoding operation. If this decoder has already been flushed then invoking this method has no effect. This method invokes the implFlush method to perform the actual flushing operation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - The output character buffer"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If the previous step of the current decoding operation was an invocation neither of the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CharsetDecoder.html#flush(java.nio.CharBuffer)\"\u003e\u003ccode\u003eflush\u003c/code\u003e\u003c/a\u003e method nor of the three-argument \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CharsetDecoder.html#decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)\"\u003e\u003ccode\u003edecode\u003c/code\u003e\u003c/a\u003e method with a value of \n\u003ccode\u003etrue\u003c/code\u003e for the \n\u003ccode\u003eendOfInput\u003c/code\u003e parameter"
        ],
        "return": [
          "A coder-result object, either \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CoderResult.html#UNDERFLOW\"\u003e\u003ccode\u003eCoderResult.UNDERFLOW\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CoderResult.html#OVERFLOW\"\u003e\u003ccode\u003eCoderResult.OVERFLOW\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CoderResult",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.CharBuffer",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "implFlush",
      "comment": "Flushes this decoder. The default implementation of this method does nothing, and always returns CoderResult.UNDERFLOW. This method should be overridden by decoders that may need to write final characters to the output buffer once the entire input sequence has been read.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - The output character buffer"
        ],
        "return": [
          "A coder-result object, either \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CoderResult.html#UNDERFLOW\"\u003e\u003ccode\u003eCoderResult.UNDERFLOW\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CoderResult.html#OVERFLOW\"\u003e\u003ccode\u003eCoderResult.OVERFLOW\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.CharsetDecoder",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "reset",
      "comment": "Resets this decoder, clearing any internal state. This method resets charset-independent state and also invokes the implReset method in order to perform any charset-specific reset actions.",
      "tagMap": {
        "return": [
          "This decoder"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "implReset",
      "comment": "Resets this decoder, clearing any charset-specific internal state. The default implementation of this method does nothing. This method should be overridden by decoders that maintain internal state.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.nio.charset.CoderResult",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "java.nio.CharBuffer",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "decodeLoop",
      "comment": "Decodes one or more bytes into one or more characters. This method encapsulates the basic decoding loop, decoding as many bytes as possible until it either runs out of input, runs out of room in the output buffer, or encounters a decoding error. This method is invoked by the decode method, which handles result interpretation and error recovery. The buffers are read from, and written to, starting at their current positions. At most in.remaining() bytes will be read, and at most out.remaining() characters will be written. The buffers\u0027 positions will be advanced to reflect the bytes read and the characters written, but their marks and limits will not be modified. This method returns a CoderResult object to describe its reason for termination, in the same manner as the decode method. Most implementations of this method will handle decoding errors by returning an appropriate result object for interpretation by the decode method. An optimized implementation may instead examine the relevant error action and implement that action itself. An implementation of this method may perform arbitrary lookahead by returning CoderResult.UNDERFLOW until it receives sufficient input.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - The input byte buffer",
          "\u003ccode\u003eout\u003c/code\u003e - The output character buffer"
        ],
        "return": [
          "A coder-result object describing the reason for termination"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.nio.charset.CharacterCodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "decode",
      "comment": "Convenience method that decodes the remaining content of a single input byte buffer into a newly-allocated character buffer. This method implements an entire decoding operation; that is, it resets this decoder, then it decodes the bytes in the given byte buffer, and finally it flushes this decoder. This method should therefore not be invoked if a decoding operation is already in progress.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - The input byte buffer"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If a decoding operation is already in progress",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/MalformedInputException.html\" title\u003d\"class in java.nio.charset\"\u003eMalformedInputException\u003c/a\u003e\u003c/code\u003e - If the byte sequence starting at the input buffer\u0027s current position is not legal for this charset and the current malformed-input action is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CodingErrorAction.html#REPORT\"\u003e\u003ccode\u003eCodingErrorAction.REPORT\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/UnmappableCharacterException.html\" title\u003d\"class in java.nio.charset\"\u003eUnmappableCharacterException\u003c/a\u003e\u003c/code\u003e - If the byte sequence starting at the input buffer\u0027s current position cannot be mapped to an equivalent character sequence and the current unmappable-character action is \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CodingErrorAction.html#REPORT\"\u003e\u003ccode\u003eCodingErrorAction.REPORT\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CharacterCodingException.html\" title\u003d\"class in java.nio.charset\"\u003eCharacterCodingException\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A newly-allocated character buffer containing the result of the decoding operation. The buffer\u0027s position will be zero and its limit will follow the last character written."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAutoDetecting",
      "comment": "Tells whether or not this decoder implements an auto-detecting charset. The default implementation of this method always returns false; it should be overridden by auto-detecting decoders to return true.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this decoder implements an auto-detecting charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isCharsetDetected",
      "comment": "Tells whether or not this decoder has yet detected a charset (optional operation). If this decoder implements an auto-detecting charset then at a single point during a decoding operation this method may start returning true to indicate that a specific charset has been detected in the input byte sequence. Once this occurs, the detectedCharset method may be invoked to retrieve the detected charset. That this method returns false does not imply that no bytes have yet been decoded. Some auto-detecting decoders are capable of decoding some, or even all, of an input byte sequence without fixing on a particular charset. The default implementation of this method always throws an UnsupportedOperationException; it should be overridden by auto-detecting decoders to return true once the input charset has been determined.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this decoder does not implement an auto-detecting charset"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this decoder has detected a specific charset"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.charset.Charset",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "detectedCharset",
      "comment": "Retrieves the charset that was detected by this decoder (optional operation). If this decoder implements an auto-detecting charset then this method returns the actual charset once it has been detected. After that point, this method returns the same value for the duration of the current decoding operation. If not enough input bytes have yet been read to determine the actual charset then this method throws an IllegalStateException. The default implementation of this method always throws an UnsupportedOperationException; it should be overridden by auto-detecting decoders to return the appropriate value.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - If insufficient bytes have been read to determine a charset",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this decoder does not implement an auto-detecting charset"
        ],
        "return": [
          "The charset detected by this auto-detecting decoder, or \n\u003ccode\u003enull\u003c/code\u003e if the charset has not yet been determined"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "cs"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "averageCharsPerByte"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "maxCharsPerByte"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initializes a new decoder. The new decoder will have the given chars-per-byte values and its replacement will be the string \"\\uFFFD\".",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecs\u003c/code\u003e - The charset that created this decoder",
          "\u003ccode\u003eaverageCharsPerByte\u003c/code\u003e - A positive float value indicating the expected number of characters that will be produced for each input byte",
          "\u003ccode\u003emaxCharsPerByte\u003c/code\u003e - A positive float value indicating the maximum number of characters that will be produced for each input byte"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the parameters do not hold"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.charset.CharsetDecoder",
  "comment": "An engine that can transform a sequence of bytes in a specific charset into a sequence of sixteen-bit Unicode characters. \n\u003ca id\u003d\"steps\"\u003e\u003c/a\u003e \n\u003cp\u003e The input byte sequence is provided in a byte buffer or a series of such buffers. The output character sequence is written to a character buffer or a series of such buffers. A decoder should always be used by making the following sequence of method invocations, hereinafter referred to as a \u003ci\u003edecoding operation\u003c/i\u003e: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e\u003cp\u003e Reset the decoder via the \u003ca href\u003d\"#reset()\"\u003e\u003ccode\u003ereset\u003c/code\u003e\u003c/a\u003e method, unless it has not been used before; \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e Invoke the \u003ca href\u003d\"#decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)\"\u003e\u003ccode\u003edecode\u003c/code\u003e\u003c/a\u003e method zero or more times, as long as additional input may be available, passing \u003ccode\u003efalse\u003c/code\u003e for the \u003ccode\u003eendOfInput\u003c/code\u003e argument and filling the input buffer and flushing the output buffer between invocations; \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e Invoke the \u003ca href\u003d\"#decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)\"\u003e\u003ccode\u003edecode\u003c/code\u003e\u003c/a\u003e method one final time, passing \u003ccode\u003etrue\u003c/code\u003e for the \u003ccode\u003eendOfInput\u003c/code\u003e argument; and then \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e Invoke the \u003ca href\u003d\"#flush(java.nio.CharBuffer)\"\u003e\u003ccode\u003eflush\u003c/code\u003e\u003c/a\u003e method so that the decoder can flush any internal state to the output buffer. \u003c/p\u003e\u003c/li\u003e \n\u003c/ol\u003e Each invocation of the \n\u003ca href\u003d\"#decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)\"\u003e\u003ccode\u003edecode\u003c/code\u003e\u003c/a\u003e method will decode as many bytes as possible from the input buffer, writing the resulting characters to the output buffer. The \n\u003ca href\u003d\"#decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)\"\u003e\u003ccode\u003edecode\u003c/code\u003e\u003c/a\u003e method returns when more input is required, when there is not enough room in the output buffer, or when a decoding error has occurred. In each case a \n\u003ca href\u003d\"CoderResult.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCoderResult\u003c/code\u003e\u003c/a\u003e object is returned to describe the reason for termination. An invoker can examine this object and fill the input buffer, flush the output buffer, or attempt to recover from a decoding error, as appropriate, and try again. \n\u003ca id\u003d\"ce\"\u003e\u003c/a\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e There are two general types of decoding errors. If the input byte sequence is not legal for this charset then the input is considered \u003ci\u003emalformed\u003c/i\u003e. If the input byte sequence is legal but cannot be mapped to a valid Unicode character then an \u003ci\u003eunmappable character\u003c/i\u003e has been encountered. \u003ca id\u003d\"cae\"\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e How a decoding error is handled depends upon the action requested for that type of error, which is described by an instance of the \u003ca href\u003d\"CodingErrorAction.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCodingErrorAction\u003c/code\u003e\u003c/a\u003e class. The possible error actions are to \u003ca href\u003d\"CodingErrorAction.html#IGNORE\"\u003eignore\u003c/a\u003e the erroneous input, \u003ca href\u003d\"CodingErrorAction.html#REPORT\"\u003ereport\u003c/a\u003e the error to the invoker via the returned \u003ca href\u003d\"CoderResult.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCoderResult\u003c/code\u003e\u003c/a\u003e object, or \u003ca href\u003d\"CodingErrorAction.html#REPLACE\"\u003ereplace\u003c/a\u003e the erroneous input with the current value of the replacement string. The replacement has the initial value \u003ccode\u003e\"\\uFFFD\"\u003c/code\u003e; its value may be changed via the \u003ca href\u003d\"#replaceWith(java.lang.String)\"\u003e\u003ccode\u003ereplaceWith\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\n\u003cp\u003e The default action for malformed-input and unmappable-character errors is to \u003ca href\u003d\"CodingErrorAction.html#REPORT\"\u003ereport\u003c/a\u003e them. The malformed-input error action may be changed via the \u003ca href\u003d\"#onMalformedInput(java.nio.charset.CodingErrorAction)\"\u003e\u003ccode\u003eonMalformedInput\u003c/code\u003e\u003c/a\u003e method; the unmappable-character action may be changed via the \u003ca href\u003d\"#onUnmappableCharacter(java.nio.charset.CodingErrorAction)\"\u003e\u003ccode\u003eonUnmappableCharacter\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\n\u003cp\u003e This class is designed to handle many of the details of the decoding process, including the implementation of error actions. A decoder for a specific charset, which is a concrete subclass of this class, need only implement the abstract \u003ca href\u003d\"#decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)\"\u003e\u003ccode\u003edecodeLoop\u003c/code\u003e\u003c/a\u003e method, which encapsulates the basic decoding loop. A subclass that maintains internal state should, additionally, override the \u003ca href\u003d\"#implFlush(java.nio.CharBuffer)\"\u003e\u003ccode\u003eimplFlush\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#implReset()\"\u003e\u003ccode\u003eimplReset\u003c/code\u003e\u003c/a\u003e methods. \u003c/p\u003e\n\u003cp\u003e Instances of this class are not safe for use by multiple concurrent threads. \u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ByteBuffer.html\" title\u003d\"class in java.nio\"\u003e\u003ccode\u003eByteBuffer\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/CharBuffer.html\" title\u003d\"class in java.nio\"\u003e\u003ccode\u003eCharBuffer\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharset\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/CharsetEncoder.html\" title\u003d\"class in java.nio.charset\"\u003e\u003ccode\u003eCharsetEncoder\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}