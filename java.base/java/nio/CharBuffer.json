{
  "packageName": "java.nio",
  "simpleName": "CharBuffer",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.nio.Buffer",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "allocate",
      "comment": "Allocates a new char buffer. The new buffer\u0027s position will be zero, its limit will be its capacity, its mark will be undefined, each of its elements will be initialized to zero, and its byte order will be the native order of the underlying hardware. It will have a backing array, and its array offset will be zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecapacity\u003c/code\u003e - The new buffer\u0027s capacity, in chars"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003ecapacity\u003c/code\u003e is a negative integer"
        ],
        "return": [
          "The new char buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "wrap",
      "comment": "Wraps a char array into a buffer. The new buffer will be backed by the given char array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer\u0027s capacity will be array.length, its position will be offset, its limit will be offset + length, its mark will be undefined, and its byte order will be the native order of the underlying hardware. Its backing array will be the given array, and its array offset will be zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array that will back the new buffer",
          "\u003ccode\u003eoffset\u003c/code\u003e - The offset of the subarray to be used; must be non-negative and no larger than \n\u003ccode\u003earray.length\u003c/code\u003e. The new buffer\u0027s position will be set to this value.",
          "\u003ccode\u003elength\u003c/code\u003e - The length of the subarray to be used; must be non-negative and no larger than \n\u003ccode\u003earray.length - offset\u003c/code\u003e. The new buffer\u0027s limit will be set to \n\u003ccode\u003eoffset + length\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eoffset\u003c/code\u003e and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold"
        ],
        "return": [
          "The new char buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "wrap",
      "comment": "Wraps a char array into a buffer. The new buffer will be backed by the given char array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer\u0027s capacity and limit will be array.length, its position will be zero, its mark will be undefined, and its byte order will be the native order of the underlying hardware. Its backing array will be the given array, and its array offset will be zero.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array that will back this buffer"
        ],
        "return": [
          "The new char buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "read",
      "comment": "Attempts to read characters into the specified character buffer. The buffer is used as a repository of characters as-is: the only changes made are the results of a put operation. No flipping or rewinding of the buffer is performed.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Readable.html#read(java.nio.CharBuffer)\"\u003eread\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Readable.html\" title\u003d\"interface in java.lang\"\u003eReadable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003etarget\u003c/code\u003e - the buffer to read characters into"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - if target is a read only buffer"
        ],
        "return": [
          "The number of characters added to the buffer, or -1 if this source of characters is at its end"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "wrap",
      "comment": "Wraps a character sequence into a buffer. The content of the new, read-only buffer will be the content of the given character sequence. The buffer\u0027s capacity will be csq.length(), its position will be start, its limit will be end, and its mark will be undefined.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecsq\u003c/code\u003e - The character sequence from which the new character buffer is to be created",
          "\u003ccode\u003estart\u003c/code\u003e - The index of the first character to be used; must be non-negative and no larger than \n\u003ccode\u003ecsq.length()\u003c/code\u003e. The new buffer\u0027s position will be set to this value.",
          "\u003ccode\u003eend\u003c/code\u003e - The index of the character following the last character to be used; must be no smaller than \n\u003ccode\u003estart\u003c/code\u003e and no larger than \n\u003ccode\u003ecsq.length()\u003c/code\u003e. The new buffer\u0027s limit will be set to this value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003estart\u003c/code\u003e and \n\u003ccode\u003eend\u003c/code\u003e parameters do not hold"
        ],
        "return": [
          "The new character buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "wrap",
      "comment": "Wraps a character sequence into a buffer. The content of the new, read-only buffer will be the content of the given character sequence. The new buffer\u0027s capacity and limit will be csq.length(), its position will be zero, and its mark will be undefined.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecsq\u003c/code\u003e - The character sequence from which the new character buffer is to be created"
        ],
        "return": [
          "The new character buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "slice",
      "comment": "Creates a new char buffer whose content is a shared subsequence of this buffer\u0027s content. The content of the new buffer will start at this buffer\u0027s current position. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be the number of chars remaining in this buffer, its mark will be undefined, and its byte order will be identical to that of this buffer. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#slice()\"\u003eslice\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The new char buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "slice",
      "comment": "Creates a new char buffer whose content is a shared subsequence of this buffer\u0027s content. The content of the new buffer will start at position index in this buffer, and will contain length elements. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be length, its mark will be undefined, and its byte order will be identical to that of this buffer. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#slice(int,int)\"\u003eslice\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The position in this buffer at which the content of the new buffer will start; must be non-negative and no larger than \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#limit()\"\u003e\u003ccode\u003elimit()\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The number of elements the new buffer will contain; must be non-negative and no larger than \n\u003ccode\u003elimit() - index\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or greater than \n\u003ccode\u003elimit()\u003c/code\u003e, \n\u003ccode\u003elength\u003c/code\u003e is negative, or \n\u003ccode\u003elength \u0026gt; limit() - index\u003c/code\u003e"
        ],
        "return": [
          "The new buffer"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "duplicate",
      "comment": "Creates a new char buffer that shares this buffer\u0027s content. The content of the new buffer will be that of this buffer. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s capacity, limit, position, mark values, and byte order will be identical to those of this buffer. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#duplicate()\"\u003eduplicate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The new char buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "asReadOnlyBuffer",
      "comment": "Creates a new, read-only char buffer that shares this buffer\u0027s content. The content of the new buffer will be that of this buffer. Changes to this buffer\u0027s content will be visible in the new buffer; the new buffer itself, however, will be read-only and will not allow the shared content to be modified. The two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s capacity, limit, position, mark values, and byte order will be identical to those of this buffer. If this buffer is itself read-only then this method behaves in exactly the same way as the duplicate method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The new, read-only char buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "get",
      "comment": "Relative get method. Reads the char at this buffer\u0027s current position, and then increments the position.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If the buffer\u0027s current position is not smaller than its limit"
        ],
        "return": [
          "The char at the buffer\u0027s current position"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "put",
      "comment": "Relative put method (optional operation). Writes the given char into this buffer at the current position, and then increments the position.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - The char to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If this buffer\u0027s current position is not smaller than its limit",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "get",
      "comment": "Absolute get method. Reads the char at the given index.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index from which the char will be read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit"
        ],
        "return": [
          "The char at the given index"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "put",
      "comment": "Absolute put method (optional operation). Writes the given char into this buffer at the given index.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index at which the char will be written",
          "\u003ccode\u003ec\u003c/code\u003e - The char value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Relative bulk get method. This method transfers chars from this buffer into the given destination array. If there are fewer chars remaining in the buffer than are required to satisfy the request, that is, if length \u003e remaining(), then no chars are transferred and a BufferUnderflowException is thrown. Otherwise, this method copies length chars from this buffer into the given array, starting at the current position of this buffer and at the given offset in the array. The position of this buffer is then incremented by length. In other words, an invocation of this method of the form src.get(dst, off, len) has exactly the same effect as the loop \n     for (int i \u003d off; i \u003c off + len; i++)\n         dst[i] \u003d src.get();\n except that it first checks that there are sufficient chars in this buffer and it is potentially much more efficient.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edst\u003c/code\u003e - The array into which chars are to be written",
          "\u003ccode\u003eoffset\u003c/code\u003e - The offset within the array of the first char to be written; must be non-negative and no larger than \n\u003ccode\u003edst.length\u003c/code\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The maximum number of chars to be written to the given array; must be non-negative and no larger than \n\u003ccode\u003edst.length - offset\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than \n\u003ccode\u003elength\u003c/code\u003e chars remaining in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eoffset\u003c/code\u003e and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Relative bulk get method. This method transfers chars from this buffer into the given destination array. An invocation of this method of the form src.get(a) behaves in exactly the same way as the invocation      src.get(a, 0, a.length)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edst\u003c/code\u003e - The destination array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than \n\u003ccode\u003elength\u003c/code\u003e chars remaining in this buffer"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Absolute bulk get method. This method transfers length chars from this buffer into the given array, starting at the given index in this buffer and at the given offset in the array. The position of this buffer is unchanged. An invocation of this method of the form src.get(index, dst, offset, length) has exactly the same effect as the following loop except that it first checks the consistency of the supplied parameters and it is potentially much more efficient: \n     for (int i \u003d offset, j \u003d index; i \u003c offset + length; i++, j++)\n         dst[i] \u003d src.get(j);",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index in this buffer from which the first char will be read; must be non-negative and less than \n\u003ccode\u003elimit()\u003c/code\u003e",
          "\u003ccode\u003edst\u003c/code\u003e - The destination array",
          "\u003ccode\u003eoffset\u003c/code\u003e - The offset within the array of the first char to be written; must be non-negative and less than \n\u003ccode\u003edst.length\u003c/code\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The number of chars to be written to the given array; must be non-negative and no larger than the smaller of \n\u003ccode\u003elimit() - index\u003c/code\u003e and \n\u003ccode\u003edst.length - offset\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eindex\u003c/code\u003e, \n\u003ccode\u003eoffset\u003c/code\u003e, and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Absolute bulk get method. This method transfers chars from this buffer into the given destination array. The position of this buffer is unchanged. An invocation of this method of the form src.get(index, dst) behaves in exactly the same way as the invocation:      src.get(index, dst, 0, dst.length)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index in this buffer from which the first char will be read; must be non-negative and less than \n\u003ccode\u003elimit()\u003c/code\u003e",
          "\u003ccode\u003edst\u003c/code\u003e - The destination array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative, not smaller than \n\u003ccode\u003elimit()\u003c/code\u003e, or \n\u003ccode\u003elimit() - index \u0026lt; dst.length\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Relative bulk put method (optional operation). This method transfers the chars remaining in the given source buffer into this buffer. If there are more chars remaining in the source buffer than in this buffer, that is, if src.remaining() \u003e remaining(), then no chars are transferred and a BufferOverflowException is thrown. Otherwise, this method copies n \u003d src.remaining() chars from the given buffer into this buffer, starting at each buffer\u0027s current position. The positions of both buffers are then incremented by n. In other words, an invocation of this method of the form dst.put(src) has exactly the same effect as the loop      while (src.hasRemaining())\n         dst.put(src.get()); except that it first checks that there is sufficient space in this buffer and it is potentially much more efficient. If this buffer and the source buffer share the same backing array or memory, then the result will be as if the source elements were first copied to an intermediate location before being written into this buffer.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The source buffer from which chars are to be read; must not be this buffer"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there is insufficient space in this buffer for the remaining chars in the source buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the source buffer is this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Absolute bulk put method (optional operation). This method transfers length chars into this buffer from the given source buffer, starting at the given offset in the source buffer and the given index in this buffer. The positions of both buffers are unchanged. In other words, an invocation of this method of the form dst.put(index, src, offset, length) has exactly the same effect as the loop \n for (int i \u003d offset, j \u003d index; i \u003c offset + length; i++, j++)\n     dst.put(j, src.get(i));\n except that it first checks the consistency of the supplied parameters and it is potentially much more efficient. If this buffer and the source buffer share the same backing array or memory, then the result will be as if the source elements were first copied to an intermediate location before being written into this buffer.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index in this buffer at which the first char will be written; must be non-negative and less than \n\u003ccode\u003elimit()\u003c/code\u003e",
          "\u003ccode\u003esrc\u003c/code\u003e - The buffer from which chars are to be read",
          "\u003ccode\u003eoffset\u003c/code\u003e - The index within the source buffer of the first char to be read; must be non-negative and less than \n\u003ccode\u003esrc.limit()\u003c/code\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The number of chars to be read from the given buffer; must be non-negative and no larger than the smaller of \n\u003ccode\u003elimit() - index\u003c/code\u003e and \n\u003ccode\u003esrc.limit() - offset\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eindex\u003c/code\u003e, \n\u003ccode\u003eoffset\u003c/code\u003e, and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "16"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Relative bulk put method (optional operation). This method transfers chars into this buffer from the given source array. If there are more chars to be copied from the array than remain in this buffer, that is, if length \u003e remaining(), then no chars are transferred and a BufferOverflowException is thrown. Otherwise, this method copies length chars from the given array into this buffer, starting at the given offset in the array and at the current position of this buffer. The position of this buffer is then incremented by length. In other words, an invocation of this method of the form dst.put(src, off, len) has exactly the same effect as the loop \n     for (int i \u003d off; i \u003c off + len; i++)\n         dst.put(src[i]);\n except that it first checks that there is sufficient space in this buffer and it is potentially much more efficient.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The array from which chars are to be read",
          "\u003ccode\u003eoffset\u003c/code\u003e - The offset within the array of the first char to be read; must be non-negative and no larger than \n\u003ccode\u003esrc.length\u003c/code\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The number of chars to be read from the given array; must be non-negative and no larger than \n\u003ccode\u003esrc.length - offset\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there is insufficient space in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eoffset\u003c/code\u003e and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "put",
      "comment": "Relative bulk put method (optional operation). This method transfers the entire content of the given source char array into this buffer. An invocation of this method of the form dst.put(a) behaves in exactly the same way as the invocation      dst.put(a, 0, a.length)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The source array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there is insufficient space in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Absolute bulk put method (optional operation). This method transfers length chars from the given array, starting at the given offset in the array and at the given index in this buffer. The position of this buffer is unchanged. An invocation of this method of the form dst.put(index, src, offset, length) has exactly the same effect as the following loop except that it first checks the consistency of the supplied parameters and it is potentially much more efficient: \n     for (int i \u003d offset, j \u003d index; i \u003c offset + length; i++, j++)\n         dst.put(j, src[i]);",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index in this buffer at which the first char will be written; must be non-negative and less than \n\u003ccode\u003elimit()\u003c/code\u003e",
          "\u003ccode\u003esrc\u003c/code\u003e - The array from which chars are to be read",
          "\u003ccode\u003eoffset\u003c/code\u003e - The offset within the array of the first char to be read; must be non-negative and less than \n\u003ccode\u003esrc.length\u003c/code\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The number of chars to be read from the given array; must be non-negative and no larger than the smaller of \n\u003ccode\u003elimit() - index\u003c/code\u003e and \n\u003ccode\u003esrc.length - offset\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eindex\u003c/code\u003e, \n\u003ccode\u003eoffset\u003c/code\u003e, and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Absolute bulk put method (optional operation). This method copies chars into this buffer from the given source array. The position of this buffer is unchanged. An invocation of this method of the form dst.put(index, src) behaves in exactly the same way as the invocation:      dst.put(index, src, 0, src.length);",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index in this buffer at which the first char will be written; must be non-negative and less than \n\u003ccode\u003elimit()\u003c/code\u003e",
          "\u003ccode\u003esrc\u003c/code\u003e - The array from which chars are to be read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative, not smaller than \n\u003ccode\u003elimit()\u003c/code\u003e, or \n\u003ccode\u003elimit() - index \u0026lt; src.length\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Relative bulk put method (optional operation). This method transfers chars from the given string into this buffer. If there are more chars to be copied from the string than remain in this buffer, that is, if end - start \u003e remaining(), then no chars are transferred and a BufferOverflowException is thrown. Otherwise, this method copies n \u003d end - start chars from the given string into this buffer, starting at the given start index and at the current position of this buffer. The position of this buffer is then incremented by n. In other words, an invocation of this method of the form dst.put(src, start, end) has exactly the same effect as the loop \n     for (int i \u003d start; i \u003c end; i++)\n         dst.put(src.charAt(i));\n except that it first checks that there is sufficient space in this buffer and it is potentially much more efficient.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The string from which chars are to be read",
          "\u003ccode\u003estart\u003c/code\u003e - The offset within the string of the first char to be read; must be non-negative and no larger than \n\u003ccode\u003estring.length()\u003c/code\u003e",
          "\u003ccode\u003eend\u003c/code\u003e - The offset within the string of the last char to be read, plus one; must be non-negative and no larger than \n\u003ccode\u003estring.length()\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there is insufficient space in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003estart\u003c/code\u003e and \n\u003ccode\u003eend\u003c/code\u003e parameters do not hold",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "put",
      "comment": "Relative bulk put method (optional operation). This method transfers the entire content of the given source string into this buffer. An invocation of this method of the form dst.put(s) behaves in exactly the same way as the invocation      dst.put(s, 0, s.length())",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The source string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there is insufficient space in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hasArray",
      "comment": "Tells whether or not this buffer is backed by an accessible char array. If this method returns true then the array and arrayOffset methods may safely be invoked.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#hasArray()\"\u003ehasArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this buffer is backed by an array and is not read-only"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "array",
      "comment": "Returns the char array that backs this buffer (optional operation). Modifications to this buffer\u0027s content will cause the returned array\u0027s content to be modified, and vice versa. Invoke the hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#array()\"\u003earray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is backed by an array but is read-only",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this buffer is not backed by an accessible array"
        ],
        "return": [
          "The array that backs this buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "arrayOffset",
      "comment": "Returns the offset within this buffer\u0027s backing array of the first element of the buffer (optional operation). If this buffer is backed by an array then buffer position p corresponds to array index p + arrayOffset(). Invoke the hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#arrayOffset()\"\u003earrayOffset\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is backed by an array but is read-only",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this buffer is not backed by an accessible array"
        ],
        "return": [
          "The offset within this buffer\u0027s array of the first element of the buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "position",
      "comment": "Sets this buffer\u0027s position. If the mark is defined and larger than the new position then it is discarded.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#position(int)\"\u003eposition\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewPosition\u003c/code\u003e - The new position value; must be non-negative and no larger than the current limit"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "limit",
      "comment": "Sets this buffer\u0027s limit. If the position is larger than the new limit then it is set to the new limit. If the mark is defined and larger than the new limit then it is discarded.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#limit(int)\"\u003elimit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewLimit\u003c/code\u003e - The new limit value; must be non-negative and no larger than this buffer\u0027s capacity"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "mark",
      "comment": "Sets this buffer\u0027s mark at its position.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#mark()\"\u003emark\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "reset",
      "comment": "Resets this buffer\u0027s position to the previously-marked position. Invoking this method neither changes nor discards the mark\u0027s value.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#reset()\"\u003ereset\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "clear",
      "comment": "Clears this buffer. The position is set to zero, the limit is set to the capacity, and the mark is discarded. Invoke this method before using a sequence of channel-read or put operations to fill this buffer. For example:  buf.clear();     // Prepare buffer for reading\n in.read(buf);    // Read data This method does not actually erase the data in the buffer, but it is named as if it did because it will most often be used in situations in which that might as well be the case.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#clear()\"\u003eclear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "flip",
      "comment": "Flips this buffer. The limit is set to the current position and then the position is set to zero. If the mark is defined then it is discarded. After a sequence of channel-read or put operations, invoke this method to prepare for a sequence of channel-write or relative get operations. For example:  buf.put(magic);    // Prepend header\n in.read(buf);      // Read data into rest of buffer\n buf.flip();        // Flip buffer\n out.write(buf);    // Write header + data to channel This method is often used in conjunction with the compact method when transferring data from one place to another.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#flip()\"\u003eflip\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "rewind",
      "comment": "Rewinds this buffer. The position is set to zero and the mark is discarded. Invoke this method before a sequence of channel-write or get operations, assuming that the limit has already been set appropriately. For example:  out.write(buf);    // Write remaining data\n buf.rewind();      // Rewind buffer\n buf.get(array);    // Copy data into array",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#rewind()\"\u003erewind\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "compact",
      "comment": "Compacts this buffer (optional operation). The chars between the buffer\u0027s current position and its limit, if any, are copied to the beginning of the buffer. That is, the char at index p \u003d position() is copied to index zero, the char at index p + 1 is copied to index one, and so forth until the char at index limit() - 1 is copied to index n \u003d limit() - 1 - p. The buffer\u0027s position is then set to n+1 and its limit is set to its capacity. The mark, if defined, is discarded. The buffer\u0027s position is set to the number of chars copied, rather than to zero, so that an invocation of this method can be followed immediately by an invocation of another relative put method.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isDirect",
      "comment": "Tells whether or not this char buffer is direct.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#isDirect()\"\u003eisDirect\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this buffer is direct"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the current hash code of this buffer. The hash code of a char buffer depends only upon its remaining elements; that is, upon the elements from position() up to, and including, the element at limit() - 1. Because buffer hash codes are content-dependent, it is inadvisable to use buffers as keys in hash maps or similar data structures unless it is known that their contents will not change.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The current hash code of this buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Tells whether or not this buffer is equal to another object. Two char buffers are equal if, and only if, They have the same element type, They have the same number of remaining elements, and The two sequences of remaining elements, considered independently of their starting positions, are pointwise equal. A char buffer is not equal to any other type of object.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eob\u003c/code\u003e - The object to which this buffer is to be compared"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this buffer is equal to the given object"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this buffer to another. Two char buffers are compared by comparing their sequences of remaining elements lexicographically, without regard to the starting position of each sequence within its corresponding buffer. Pairs of char elements are compared as if by invoking Character.compare(char,char). A char buffer is not comparable to any other type of object.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/CharBuffer.html\" title\u003d\"class in java.nio\"\u003eCharBuffer\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ethat\u003c/code\u003e - the object to be compared."
        ],
        "return": [
          "A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mismatch",
      "comment": "Finds and returns the relative index of the first mismatch between this buffer and a given buffer. The index is relative to the position of each buffer and will be in the range of 0 (inclusive) up to the smaller of the remaining elements in each buffer (exclusive). If the two buffers share a common prefix then the returned index is the length of the common prefix and it follows that there is a mismatch between the two buffers at that index within the respective buffers. If one buffer is a proper prefix of the other then the returned index is the smaller of the remaining elements in each buffer, and it follows that the index is only valid for the buffer with the larger number of remaining elements. Otherwise, there is no mismatch.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ethat\u003c/code\u003e - The byte buffer to be tested for a mismatch with this buffer"
        ],
        "return": [
          "The relative index of the first mismatch between this and the given buffer, otherwise -1 if no mismatch."
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string containing the characters in this buffer. The first character of the resulting string will be the character at this buffer\u0027s position, while the last character will be the character at index limit() - 1. Invoking this method does not change the buffer\u0027s position.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The specified string"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "length",
      "comment": "Returns the length of this character buffer. When viewed as a character sequence, the length of a character buffer is simply the number of characters between the position (inclusive) and the limit (exclusive); that is, it is equivalent to remaining().",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#length()\"\u003elength\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The length of this character buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isEmpty",
      "comment": "Returns true if this character buffer is empty.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#isEmpty()\"\u003eisEmpty\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if there are \n\u003ccode\u003e0\u003c/code\u003e remaining characters, otherwise \n\u003ccode\u003efalse\u003c/code\u003e"
        ],
        "since": [
          "15"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "charAt",
      "comment": "Reads the character at the given index relative to the current position.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#charAt(int)\"\u003echarAt\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index of the character to be read, relative to the position; must be non-negative and smaller than \n\u003ccode\u003eremaining()\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on \n\u003ccode\u003eindex\u003c/code\u003e do not hold"
        ],
        "return": [
          "The character at index \n\u003ccode\u003eposition()\u0026nbsp;+\u0026nbsp;index\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "subSequence",
      "comment": "Creates a new character buffer that represents the specified subsequence of this buffer, relative to the current position. The new buffer will share this buffer\u0027s content; that is, if the content of this buffer is mutable then modifications to one buffer will cause the other to be modified. The new buffer\u0027s capacity will be that of this buffer, its position will be position() + start, and its limit will be position() + end. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html#subSequence(int,int)\"\u003esubSequence\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003eCharSequence\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - The index, relative to the current position, of the first character in the subsequence; must be non-negative and no larger than \n\u003ccode\u003eremaining()\u003c/code\u003e",
          "\u003ccode\u003eend\u003c/code\u003e - The index, relative to the current position, of the character following the last character in the subsequence; must be no smaller than \n\u003ccode\u003estart\u003c/code\u003e and no larger than \n\u003ccode\u003eremaining()\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on \n\u003ccode\u003estart\u003c/code\u003e and \n\u003ccode\u003eend\u003c/code\u003e do not hold"
        ],
        "return": [
          "The new character buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the specified character sequence to this buffer (optional operation). An invocation of this method of the form dst.append(csq) behaves in exactly the same way as the invocation      dst.put(csq.toString()) Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking the toString method of a character buffer will return a subsequence whose content depends upon the buffer\u0027s position and limit.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html#append(java.lang.CharSequence)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html\" title\u003d\"interface in java.lang\"\u003eAppendable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecsq\u003c/code\u003e - The character sequence to append. If \n\u003ccode\u003ecsq\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, then the four characters \n\u003ccode\u003e\"null\"\u003c/code\u003e are appended to this character buffer."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there is insufficient space in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends a subsequence of the specified character sequence to this buffer (optional operation). An invocation of this method of the form dst.append(csq, start, end) when csq is not null, behaves in exactly the same way as the invocation      dst.put(csq.subSequence(start, end).toString())",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html#append(java.lang.CharSequence,int,int)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html\" title\u003d\"interface in java.lang\"\u003eAppendable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecsq\u003c/code\u003e - The character sequence from which a subsequence will be appended. If \n\u003ccode\u003ecsq\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, then characters will be appended as if \n\u003ccode\u003ecsq\u003c/code\u003e contained the four characters \n\u003ccode\u003e\"null\"\u003c/code\u003e.",
          "\u003ccode\u003estart\u003c/code\u003e - The index of the first character in the subsequence",
          "\u003ccode\u003eend\u003c/code\u003e - The index of the character following the last character in the subsequence"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there is insufficient space in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003estart\u003c/code\u003e or \n\u003ccode\u003eend\u003c/code\u003e are negative, \n\u003ccode\u003estart\u003c/code\u003e is greater than \n\u003ccode\u003eend\u003c/code\u003e, or \n\u003ccode\u003eend\u003c/code\u003e is greater than \n\u003ccode\u003ecsq.length()\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the specified char to this buffer (optional operation). An invocation of this method of the form dst.append(c) behaves in exactly the same way as the invocation      dst.put(c)",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html#append(char)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html\" title\u003d\"interface in java.lang\"\u003eAppendable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - The 16-bit char to append"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there is insufficient space in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteOrder",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "order",
      "comment": "Retrieves this buffer\u0027s byte order. The byte order of a char buffer created by allocation or by wrapping an existing char array is the native order of the underlying hardware. The byte order of a char buffer created as a view of a byte buffer is that of the byte buffer at the moment that the view is created.",
      "annotations": [],
      "tagMap": {
        "return": [
          "This buffer\u0027s byte order"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.CharBuffer",
  "comment": "A char buffer. \n\u003cp\u003e This class defines four categories of operations upon char buffers: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e Absolute and relative \u003ca href\u003d\"#get()\"\u003e\u003ccode\u003e\u003ci\u003eget\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#put(char)\"\u003e\u003ccode\u003e\u003ci\u003eput\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e methods that read and write single chars; \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e Absolute and relative \u003ca href\u003d\"#get(char%5B%5D)\"\u003e\u003ccode\u003e\u003ci\u003ebulk get\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e methods that transfer contiguous sequences of chars from this buffer into an array; and\u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e Absolute and relative \u003ca href\u003d\"#put(char%5B%5D)\"\u003e\u003ccode\u003e\u003ci\u003ebulk put\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e methods that transfer contiguous sequences of chars from a char array{#if[char]?, a string,} or some other char buffer into this buffer;{#if[!byte]? and} \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e A method for \u003ca href\u003d\"#compact()\"\u003e\u003ccode\u003ecompacting\u003c/code\u003e\u003c/a\u003e a char buffer. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Char buffers can be created either by \u003ca href\u003d\"#allocate(int)\"\u003e\u003ccode\u003e\u003ci\u003eallocation\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e, which allocates space for the buffer\u0027s content, by \u003ca href\u003d\"#wrap(char%5B%5D)\"\u003e\u003ccode\u003e\u003ci\u003ewrapping\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e an existing char array {#if[char]?or string} into a buffer, or by creating a \u003ca href\u003d\"ByteBuffer.html#views\"\u003e\u003ci\u003eview\u003c/i\u003e\u003c/a\u003e of an existing byte buffer. \u003c/p\u003e\n\u003cp\u003e Like a byte buffer, a char buffer is either \u003ca href\u003d\"ByteBuffer.html#direct\"\u003e\u003ci\u003edirect\u003c/i\u003e or \u003ci\u003enon-direct\u003c/i\u003e\u003c/a\u003e. A char buffer created via the \u003ccode\u003ewrap\u003c/code\u003e methods of this class will be non-direct. A char buffer created as a view of a byte buffer will be direct if, and only if, the byte buffer itself is direct. Whether or not a char buffer is direct may be determined by invoking the \u003ca href\u003d\"#isDirect()\"\u003e\u003ccode\u003eisDirect\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e \n\u003cp\u003e This class implements the \u003ca href\u003d\"../lang/CharSequence.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCharSequence\u003c/code\u003e\u003c/a\u003e interface so that character buffers may be used wherever character sequences are accepted, for example in the regular-expression package \u003ca href\u003d\"../util/regex/package-summary.html\"\u003e\u003ccode\u003ejava.util.regex\u003c/code\u003e\u003c/a\u003e. The methods defined by \u003ccode\u003eCharSequence\u003c/code\u003e operate relative to the current position of the buffer when they are invoked. \u003c/p\u003e \n\u003cp\u003e Methods in this class that do not otherwise have a value to return are specified to return the buffer upon which they are invoked. This allows method invocations to be chained. The sequence of statements \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e cb.put(\"text/\");\n cb.put(subtype);\n cb.put(\"; charset\u003d\");\n cb.put(enc);\u003c/pre\u003e\n\u003c/blockquote\u003e can, for example, be replaced by the single statement \n\u003cblockquote\u003e\n \u003cpre\u003e cb.put(\"text/\").put(subtype).put(\"; charset\u003d\").put(enc);\u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}