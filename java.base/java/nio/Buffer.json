{
  "packageName": "java.nio",
  "simpleName": "Buffer",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "capacity",
      "comment": "Returns this buffer\u0027s capacity.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The capacity of this buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "position",
      "comment": "Returns this buffer\u0027s position.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The position of this buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.Buffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newPosition",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "position",
      "comment": "Sets this buffer\u0027s position. If the mark is defined and larger than the new position then it is discarded.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewPosition\u003c/code\u003e - The new position value; must be non-negative and no larger than the current limit"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the preconditions on \n\u003ccode\u003enewPosition\u003c/code\u003e do not hold"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "limit",
      "comment": "Returns this buffer\u0027s limit.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The limit of this buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.Buffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "newLimit",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "limit",
      "comment": "Sets this buffer\u0027s limit. If the position is larger than the new limit then it is set to the new limit. If the mark is defined and larger than the new limit then it is discarded.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003enewLimit\u003c/code\u003e - The new limit value; must be non-negative and no larger than this buffer\u0027s capacity"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the preconditions on \n\u003ccode\u003enewLimit\u003c/code\u003e do not hold"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.Buffer",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mark",
      "comment": "Sets this buffer\u0027s mark at its position.",
      "annotations": [],
      "tagMap": {
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.Buffer",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reset",
      "comment": "Resets this buffer\u0027s position to the previously-marked position. Invoking this method neither changes nor discards the mark\u0027s value.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/InvalidMarkException.html\" title\u003d\"class in java.nio\"\u003eInvalidMarkException\u003c/a\u003e\u003c/code\u003e - If the mark has not been set"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.Buffer",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clear",
      "comment": "Clears this buffer. The position is set to zero, the limit is set to the capacity, and the mark is discarded. Invoke this method before using a sequence of channel-read or put operations to fill this buffer. For example:  buf.clear();     // Prepare buffer for reading\n in.read(buf);    // Read data This method does not actually erase the data in the buffer, but it is named as if it did because it will most often be used in situations in which that might as well be the case.",
      "annotations": [],
      "tagMap": {
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.Buffer",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "flip",
      "comment": "Flips this buffer. The limit is set to the current position and then the position is set to zero. If the mark is defined then it is discarded. After a sequence of channel-read or put operations, invoke this method to prepare for a sequence of channel-write or relative get operations. For example:  buf.put(magic);    // Prepend header\n in.read(buf);      // Read data into rest of buffer\n buf.flip();        // Flip buffer\n out.write(buf);    // Write header + data to channel This method is often used in conjunction with the compact method when transferring data from one place to another.",
      "annotations": [],
      "tagMap": {
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.Buffer",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rewind",
      "comment": "Rewinds this buffer. The position is set to zero and the mark is discarded. Invoke this method before a sequence of channel-write or get operations, assuming that the limit has already been set appropriately. For example:  out.write(buf);    // Write remaining data\n buf.rewind();      // Rewind buffer\n buf.get(array);    // Copy data into array",
      "annotations": [],
      "tagMap": {
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "remaining",
      "comment": "Returns the number of elements between the current position and the limit.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The number of elements remaining in this buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hasRemaining",
      "comment": "Tells whether there are any elements between the current position and the limit.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, there is at least one element remaining in this buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isReadOnly",
      "comment": "Tells whether or not this buffer is read-only.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this buffer is read-only"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "hasArray",
      "comment": "Tells whether or not this buffer is backed by an accessible array. If this method returns true then the array and arrayOffset methods may safely be invoked.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this buffer is backed by an array and is not read-only"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "array",
      "comment": "Returns the array that backs this buffer (optional operation). This method is intended to allow array-backed buffers to be passed to native code more efficiently. Concrete subclasses provide more strongly-typed return values for this method. Modifications to this buffer\u0027s content will cause the returned array\u0027s content to be modified, and vice versa. Invoke the hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is backed by an array but is read-only",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this buffer is not backed by an accessible array"
        ],
        "return": [
          "The array that backs this buffer"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "arrayOffset",
      "comment": "Returns the offset within this buffer\u0027s backing array of the first element of the buffer (optional operation). If this buffer is backed by an array then buffer position p corresponds to array index p + arrayOffset(). Invoke the hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is backed by an array but is read-only",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this buffer is not backed by an accessible array"
        ],
        "return": [
          "The offset within this buffer\u0027s array of the first element of the buffer"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isDirect",
      "comment": "Tells whether or not this buffer is direct.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this buffer is direct"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.Buffer",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "slice",
      "comment": "Creates a new buffer whose content is a shared subsequence of this buffer\u0027s content. The content of the new buffer will start at this buffer\u0027s current position. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be the number of elements remaining in this buffer, its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The new buffer"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.Buffer",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "index",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "length",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "slice",
      "comment": "Creates a new buffer whose content is a shared subsequence of this buffer\u0027s content. The content of the new buffer will start at position index in this buffer, and will contain length elements. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be length, its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The position in this buffer at which the content of the new buffer will start; must be non-negative and no larger than \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#limit()\"\u003e\u003ccode\u003elimit()\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The number of elements the new buffer will contain; must be non-negative and no larger than \n\u003ccode\u003elimit() - index\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or greater than \n\u003ccode\u003elimit()\u003c/code\u003e, \n\u003ccode\u003elength\u003c/code\u003e is negative, or \n\u003ccode\u003elength \u0026gt; limit() - index\u003c/code\u003e"
        ],
        "return": [
          "The new buffer"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.Buffer",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "duplicate",
      "comment": "Creates a new buffer that shares this buffer\u0027s content. The content of the new buffer will be that of this buffer. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s capacity, limit, position and mark values will be identical to those of this buffer. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The new buffer"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.Buffer",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}