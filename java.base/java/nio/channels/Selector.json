{
  "packageName": "java.nio.channels",
  "simpleName": "Selector",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.channels.Selector",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "open",
      "comment": "Opens a selector. The new selector is created by invoking the openSelector method of the system-wide default SelectorProvider object.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ],
        "return": [
          "A new selector"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isOpen",
      "comment": "Tells whether or not this selector is open.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this selector is open"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.spi.SelectorProvider",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "provider",
      "comment": "Returns the provider that created this channel.",
      "tagMap": {
        "return": [
          "The provider that created this channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.nio.channels.SelectionKey",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "keys",
      "comment": "Returns this selector\u0027s key set. The key set is not directly modifiable. A key is removed only after it has been cancelled and its channel has been deregistered. Any attempt to modify the key set will cause an UnsupportedOperationException to be thrown. The set is safe for use by multiple concurrent threads.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedSelectorException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedSelectorException\u003c/a\u003e\u003c/code\u003e - If this selector is closed"
        ],
        "return": [
          "This selector\u0027s key set"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.nio.channels.SelectionKey",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "selectedKeys",
      "comment": "Returns this selector\u0027s selected-key set. Keys may be removed from, but not directly added to, the selected-key set. Any attempt to add an object to the key set will cause an UnsupportedOperationException to be thrown. The selected-key set is not thread-safe.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedSelectorException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedSelectorException\u003c/a\u003e\u003c/code\u003e - If this selector is closed"
        ],
        "return": [
          "This selector\u0027s selected-key set"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "selectNow",
      "comment": "Selects a set of keys whose corresponding channels are ready for I/O operations. This method performs a non-blocking selection operation. If no channels have become selectable since the previous selection operation then this method immediately returns zero. Invoking this method clears the effect of any previous invocations of the wakeup method.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedSelectorException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedSelectorException\u003c/a\u003e\u003c/code\u003e - If this selector is closed"
        ],
        "return": [
          "The number of keys, possibly zero, whose ready-operation sets were updated by the selection operation"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "select",
      "comment": "Selects a set of keys whose corresponding channels are ready for I/O operations. This method performs a blocking selection operation. It returns only after at least one channel is selected, this selector\u0027s wakeup method is invoked, the current thread is interrupted, or the given timeout period expires, whichever comes first. This method does not offer real-time guarantees: It schedules the timeout as if by invoking the Object.wait(long) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - If positive, block for up to \n\u003ccode\u003etimeout\u003c/code\u003e milliseconds, more or less, while waiting for a channel to become ready; if zero, block indefinitely; must not be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedSelectorException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedSelectorException\u003c/a\u003e\u003c/code\u003e - If this selector is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the value of the timeout argument is negative"
        ],
        "return": [
          "The number of keys, possibly zero, whose ready-operation sets were updated"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "select",
      "comment": "Selects a set of keys whose corresponding channels are ready for I/O operations. This method performs a blocking selection operation. It returns only after at least one channel is selected, this selector\u0027s wakeup method is invoked, or the current thread is interrupted, whichever comes first.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedSelectorException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedSelectorException\u003c/a\u003e\u003c/code\u003e - If this selector is closed"
        ],
        "return": [
          "The number of keys, possibly zero, whose ready-operation sets were updated"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "java.nio.channels.SelectionKey",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "select",
      "comment": "Selects and performs an action on the keys whose corresponding channels are ready for I/O operations. This method performs a blocking selection operation. It wakes up from querying the operating system only when at least one channel is selected, this selector\u0027s wakeup method is invoked, the current thread is interrupted, or the given timeout period expires, whichever comes first. The specified action\u0027s accept method is invoked with the key for each channel that is ready to perform an operation identified by its key\u0027s interest set. The accept method may be invoked more than once for the same key but with the ready-operation set containing a subset of the operations for which the channel is ready (as described above). The accept method is invoked while synchronized on the selector and its selected-key set. Great care must be taken to avoid deadlocking with other threads that also synchronize on these objects. Selection operations are not reentrant in general and consequently the action should take great care not to attempt a selection operation on the same selector. The behavior when attempting a reentrant selection operation is implementation specific and therefore not specified. If the action closes the selector then ClosedSelectorException is thrown when the action completes. The action is not prohibited from closing channels registered with the selector, nor prohibited from cancelling keys or changing a key\u0027s interest set. If a channel is selected but its key is cancelled or its interest set changed before the action is performed on the key then it is implementation specific as to whether the action is invoked (it may be invoked with an invalid key). Exceptions thrown by the action are relayed to the caller. This method does not offer real-time guarantees: It schedules the timeout as if by invoking the Object.wait(long) method.",
      "tagMap": {
        "implSpec": [
          "The default implementation removes all keys from the selected-key set, invokes \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/Selector.html#select(long)\"\u003e\u003ccode\u003eselect(long)\u003c/code\u003e\u003c/a\u003e with the given timeout and then performs the action for each key added to the selected-key set. The default implementation does not detect the action performing a reentrant selection operation. The selected-key set may or may not be empty on completion of the default implementation."
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - The action to perform",
          "\u003ccode\u003etimeout\u003c/code\u003e - If positive, block for up to \n\u003ccode\u003etimeout\u003c/code\u003e milliseconds, more or less, while waiting for a channel to become ready; if zero, block indefinitely; must not be negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedSelectorException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedSelectorException\u003c/a\u003e\u003c/code\u003e - If this selector is closed or is closed by the action",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the value of the timeout argument is negative"
        ],
        "return": [
          "The number of unique keys consumed, possibly zero"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "java.nio.channels.SelectionKey",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "select",
      "comment": "Selects and performs an action on the keys whose corresponding channels are ready for I/O operations. This method performs a blocking selection operation. It wakes up from querying the operating system only when at least one channel is selected, this selector\u0027s wakeup method is invoked, or the current thread is interrupted, whichever comes first. This method is equivalent to invoking the 2-arg select method with a timeout of 0 to block indefinitely.",
      "tagMap": {
        "implSpec": [
          "The default implementation invokes the 2-arg \n\u003ccode\u003eselect\u003c/code\u003e method with a timeout of \n\u003ccode\u003e0\u003c/code\u003e."
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - The action to perform"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedSelectorException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedSelectorException\u003c/a\u003e\u003c/code\u003e - If this selector is closed or is closed by the action"
        ],
        "return": [
          "The number of unique keys consumed, possibly zero"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.function.Consumer",
            "parameters": [
              {
                "name": "java.nio.channels.SelectionKey",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "action"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "selectNow",
      "comment": "Selects and performs an action on the keys whose corresponding channels are ready for I/O operations. This method performs a non-blocking selection operation. Invoking this method clears the effect of any previous invocations of the wakeup method.",
      "tagMap": {
        "implSpec": [
          "The default implementation removes all keys from the selected-key set, invokes \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/Selector.html#selectNow()\"\u003e\u003ccode\u003eselectNow()\u003c/code\u003e\u003c/a\u003e and then performs the action for each key added to the selected-key set. The default implementation does not detect the action performing a reentrant selection operation. The selected-key set may or may not be empty on completion of the default implementation."
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - The action to perform"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedSelectorException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedSelectorException\u003c/a\u003e\u003c/code\u003e - If this selector is closed or is closed by the action"
        ],
        "return": [
          "The number of unique keys consumed, possibly zero"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.Selector",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "wakeup",
      "comment": "Causes the first selection operation that has not yet returned to return immediately. If another thread is currently blocked in a selection operation then that invocation will return immediately. If no selection operation is currently in progress then the next invocation of a selection operation will return immediately unless selectNow() or selectNow(Consumer) is invoked in the meantime. In any case the value returned by that invocation may be non-zero. Subsequent selection operations will block as usual unless this method is invoked again in the meantime. Invoking this method more than once between two successive selection operations has the same effect as invoking it just once.",
      "tagMap": {
        "return": [
          "This selector"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "close",
      "comment": "Closes this selector. If a thread is currently blocked in one of this selector\u0027s selection methods then it is interrupted as if by invoking the selector\u0027s wakeup method. Any uncancelled keys still associated with this selector are invalidated, their channels are deregistered, and any other resources associated with this selector are released. If this selector is already closed then invoking this method has no effect. After a selector is closed, any further attempt to use it, except by invoking this method or the wakeup method, will cause a ClosedSelectorException to be thrown.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html\" title\u003d\"interface in java.io\"\u003eCloseable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initializes a new instance of this class.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.channels.Selector",
  "comment": "A multiplexor of \n\u003ca href\u003d\"SelectableChannel.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eSelectableChannel\u003c/code\u003e\u003c/a\u003e objects. \n\u003cp\u003e A selector may be created by invoking the \u003ca href\u003d\"#open()\"\u003e\u003ccode\u003eopen\u003c/code\u003e\u003c/a\u003e method of this class, which will use the system\u0027s default \u003ca href\u003d\"spi/SelectorProvider.html\" title\u003d\"class in java.nio.channels.spi\"\u003e\u003ccode\u003eselector provider\u003c/code\u003e\u003c/a\u003e to create a new selector. A selector may also be created by invoking the \u003ca href\u003d\"spi/SelectorProvider.html#openSelector()\"\u003e\u003ccode\u003eopenSelector\u003c/code\u003e\u003c/a\u003e method of a custom selector provider. A selector remains open until it is closed via its \u003ca href\u003d\"#close()\"\u003e\u003ccode\u003eclose\u003c/code\u003e\u003c/a\u003e method. \u003ca id\u003d\"ks\"\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e A selectable channel\u0027s registration with a selector is represented by a \u003ca href\u003d\"SelectionKey.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eSelectionKey\u003c/code\u003e\u003c/a\u003e object. A selector maintains three sets of selection keys: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e The \u003ci\u003ekey set\u003c/i\u003e contains the keys representing the current channel registrations of this selector. This set is returned by the \u003ca href\u003d\"#keys()\"\u003e\u003ccode\u003ekeys\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The \u003ci\u003eselected-key set\u003c/i\u003e is the set of keys such that each key\u0027s channel was detected to be ready for at least one of the operations identified in the key\u0027s interest set during a prior selection operation that adds keys or updates keys in the set. This set is returned by the \u003ca href\u003d\"#selectedKeys()\"\u003e\u003ccode\u003eselectedKeys\u003c/code\u003e\u003c/a\u003e method. The selected-key set is always a subset of the key set. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The \u003ci\u003ecancelled-key\u003c/i\u003e set is the set of keys that have been cancelled but whose channels have not yet been deregistered. This set is not directly accessible. The cancelled-key set is always a subset of the key set. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e All three sets are empty in a newly-created selector. \u003c/p\u003e\n\u003cp\u003e A key is added to a selector\u0027s key set as a side effect of registering a channel via the channel\u0027s \u003ca href\u003d\"SelectableChannel.html#register(java.nio.channels.Selector,int)\"\u003e\u003ccode\u003eregister\u003c/code\u003e\u003c/a\u003e method. Cancelled keys are removed from the key set during selection operations. The key set itself is not directly modifiable. \u003c/p\u003e\n\u003cp\u003e A key is added to its selector\u0027s cancelled-key set when it is cancelled, whether by closing its channel or by invoking its \u003ca href\u003d\"SelectionKey.html#cancel()\"\u003e\u003ccode\u003ecancel\u003c/code\u003e\u003c/a\u003e method. Cancelling a key will cause its channel to be deregistered during the next selection operation, at which time the key will be removed from all of the selector\u0027s key sets. \u003ca id\u003d\"sks\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e Keys are added to the selected-key set by selection operations. A key may be removed directly from the selected-key set by invoking the set\u0027s \u003ca href\u003d\"../../util/Set.html#remove(java.lang.Object)\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e method or by invoking the \u003ca href\u003d\"../../util/Iterator.html#remove()\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e method of an \u003ca href\u003d\"../../util/Iterator.html\" title\u003d\"interface in java.util\"\u003e\u003ccode\u003eiterator\u003c/code\u003e\u003c/a\u003e obtained from the set. All keys may be removed from the selected-key set by invoking the set\u0027s \u003ca href\u003d\"../../util/Set.html#clear()\"\u003e\u003ccode\u003eclear\u003c/code\u003e\u003c/a\u003e method. Keys may not be added directly to the selected-key set. \u003c/p\u003e \n\u003ca id\u003d\"selop\"\u003e\u003c/a\u003e \n\u003ch2\u003eSelection\u003c/h2\u003e \n\u003cp\u003e A selection operation queries the underlying operating system for an update as to the readiness of each registered channel to perform any of the operations identified by its key\u0027s interest set. There are two forms of selection operation: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e\u003cp\u003e The \u003ca href\u003d\"#select()\"\u003e\u003ccode\u003eselect()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#select(long)\"\u003e\u003ccode\u003eselect(long)\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#selectNow()\"\u003e\u003ccode\u003eselectNow()\u003c/code\u003e\u003c/a\u003e methods add the keys of channels ready to perform an operation to the selected-key set, or update the ready-operation set of keys already in the selected-key set. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The \u003ca href\u003d\"#select(java.util.function.Consumer)\"\u003e\u003ccode\u003eselect(Consumer)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#select(java.util.function.Consumer,long)\"\u003e\u003ccode\u003eselect(Consumer, long)\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#selectNow(java.util.function.Consumer)\"\u003e\u003ccode\u003eselectNow(Consumer)\u003c/code\u003e\u003c/a\u003e methods perform an \u003ci\u003eaction\u003c/i\u003e on the key of each channel that is ready to perform an operation. These methods do not add to the selected-key set. \u003c/p\u003e\u003c/li\u003e \n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003ch3\u003eSelection operations that add to the selected-key set\u003c/h3\u003e \n\u003cp\u003e During each selection operation, keys may be added to and removed from a selector\u0027s selected-key set and may be removed from its key and cancelled-key sets. Selection is performed by the \u003ca href\u003d\"#select()\"\u003e\u003ccode\u003eselect()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#select(long)\"\u003e\u003ccode\u003eselect(long)\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#selectNow()\"\u003e\u003ccode\u003eselectNow()\u003c/code\u003e\u003c/a\u003e methods, and involves three steps: \u003c/p\u003e \n\u003col\u003e \n \u003cli\u003e\u003cp\u003e Each key in the cancelled-key set is removed from each key set of which it is a member, and its channel is deregistered. This step leaves the cancelled-key set empty. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The underlying operating system is queried for an update as to the readiness of each remaining channel to perform any of the operations identified by its key\u0027s interest set as of the moment that the selection operation began. For a channel that is ready for at least one such operation, one of the following two actions is performed: \u003c/p\u003e \n  \u003col\u003e \n   \u003cli\u003e\u003cp\u003e If the channel\u0027s key is not already in the selected-key set then it is added to that set and its ready-operation set is modified to identify exactly those operations for which the channel is now reported to be ready. Any readiness information previously recorded in the ready set is discarded. \u003c/p\u003e\u003c/li\u003e \n   \u003cli\u003e\u003cp\u003e Otherwise the channel\u0027s key is already in the selected-key set, so its ready-operation set is modified to identify any new operations for which the channel is reported to be ready. Any readiness information previously recorded in the ready set is preserved; in other words, the ready set returned by the underlying system is bitwise-disjoined into the key\u0027s current ready set. \u003c/p\u003e\u003c/li\u003e \n  \u003c/ol\u003e If all of the keys in the key set at the start of this step have empty interest sets then neither the selected-key set nor any of the keys\u0027 ready-operation sets will be updated. \u003c/li\u003e\n \u003cli\u003e\u003cp\u003e If any keys were added to the cancelled-key set while step (2) was in progress then they are processed as in step (1). \u003c/p\u003e\u003c/li\u003e \n\u003c/ol\u003e \n\u003cp\u003e Whether or not a selection operation blocks to wait for one or more channels to become ready, and if so for how long, is the only essential difference between the three selection methods. \u003c/p\u003e \n\u003ch3\u003eSelection operations that perform an action on selected keys\u003c/h3\u003e \n\u003cp\u003e During each selection operation, keys may be removed from the selector\u0027s key, selected-key, and cancelled-key sets. Selection is performed by the \u003ca href\u003d\"#select(java.util.function.Consumer)\"\u003e\u003ccode\u003eselect(Consumer)\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#select(java.util.function.Consumer,long)\"\u003e\u003ccode\u003eselect(Consumer,long)\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"#selectNow(java.util.function.Consumer)\"\u003e\u003ccode\u003eselectNow(Consumer)\u003c/code\u003e\u003c/a\u003e methods, and involves three steps: \u003c/p\u003e \n\u003col\u003e \n \u003cli\u003e\u003cp\u003e Each key in the cancelled-key set is removed from each key set of which it is a member, and its channel is deregistered. This step leaves the cancelled-key set empty. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The underlying operating system is queried for an update as to the readiness of each remaining channel to perform any of the operations identified by its key\u0027s interest set as of the moment that the selection operation began. \u003c/p\u003e\u003cp\u003e For a channel that is ready for at least one such operation, the ready-operation set of the channel\u0027s key is set to identify exactly the operations for which the channel is ready and the \u003ci\u003eaction\u003c/i\u003e specified to the \u003ccode\u003eselect\u003c/code\u003e method is invoked to consume the channel\u0027s key. Any readiness information previously recorded in the ready set is discarded prior to invoking the \u003ci\u003eaction\u003c/i\u003e. \u003c/p\u003e\u003cp\u003e Alternatively, where a channel is ready for more than one operation, the \u003ci\u003eaction\u003c/i\u003e may be invoked more than once with the channel\u0027s key and ready-operation set modified to a subset of the operations for which the channel is ready. Where the \u003ci\u003eaction\u003c/i\u003e is invoked more than once for the same key then its ready-operation set never contains operation bits that were contained in the set at previous calls to the \u003ci\u003eaction\u003c/i\u003e in the same selection operation. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e If any keys were added to the cancelled-key set while step (2) was in progress then they are processed as in step (1). \u003c/p\u003e\u003c/li\u003e \n\u003c/ol\u003e \n\u003ch2\u003eConcurrency\u003c/h2\u003e \n\u003cp\u003e A Selector and its key set are safe for use by multiple concurrent threads. Its selected-key set and cancelled-key set, however, are not. \u003c/p\u003e\n\u003cp\u003e The selection operations synchronize on the selector itself, on the selected-key set, in that order. They also synchronize on the cancelled-key set during steps (1) and (3) above. \u003c/p\u003e\n\u003cp\u003e Changes made to the interest sets of a selector\u0027s keys while a selection operation is in progress have no effect upon that operation; they will be seen by the next selection operation. \u003c/p\u003e\n\u003cp\u003e Keys may be cancelled and channels may be closed at any time. Hence the presence of a key in one or more of a selector\u0027s key sets does not imply that the key is valid or that its channel is open. Application code should be careful to synchronize and check these conditions as necessary if there is any possibility that another thread will cancel a key or close a channel. \u003c/p\u003e\n\u003cp\u003e A thread blocked in a selection operation may be interrupted by some other thread in one of three ways: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e By invoking the selector\u0027s \u003ca href\u003d\"#wakeup()\"\u003e\u003ccode\u003ewakeup\u003c/code\u003e\u003c/a\u003e method, \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e By invoking the selector\u0027s \u003ca href\u003d\"#close()\"\u003e\u003ccode\u003eclose\u003c/code\u003e\u003c/a\u003e method, or \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e By invoking the blocked thread\u0027s \u003ca href\u003d\"../../lang/Thread.html#interrupt()\"\u003e\u003ccode\u003einterrupt\u003c/code\u003e\u003c/a\u003e method, in which case its interrupt status will be set and the selector\u0027s \u003ca href\u003d\"#wakeup()\"\u003e\u003ccode\u003ewakeup\u003c/code\u003e\u003c/a\u003e method will be invoked. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"#close()\"\u003e\u003ccode\u003eclose\u003c/code\u003e\u003c/a\u003e method synchronizes on the selector and its selected-key set in the same order as in a selection operation. \u003ca id\u003d\"ksc\"\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e A Selector\u0027s key set is safe for use by multiple concurrent threads. Retrieval operations from the key set do not generally block and so may overlap with new registrations that add to the set, or with the cancellation steps of selection operations that remove keys from the set. Iterators and spliterators return elements reflecting the state of the set at some point at or since the creation of the iterator/spliterator. They do not throw \u003ca href\u003d\"../../util/ConcurrentModificationException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eConcurrentModificationException\u003c/code\u003e\u003c/a\u003e. \u003ca id\u003d\"sksc\"\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e A selector\u0027s selected-key set is not, in general, safe for use by multiple concurrent threads. If such a thread might modify the set directly then access should be controlled by synchronizing on the set itself. The iterators returned by the set\u0027s \u003ca href\u003d\"../../util/Set.html#iterator()\"\u003e\u003ccode\u003eiterator\u003c/code\u003e\u003c/a\u003e methods are \u003ci\u003efail-fast:\u003c/i\u003e If the set is modified after the iterator is created, in any way except by invoking the iterator\u0027s own \u003ca href\u003d\"../../util/Iterator.html#remove()\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e method, then a \u003ca href\u003d\"../../util/ConcurrentModificationException.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eConcurrentModificationException\u003c/code\u003e\u003c/a\u003e will be thrown. \u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/SelectableChannel.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eSelectableChannel\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/SelectionKey.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eSelectionKey\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}