{
  "packageName": "java.nio.channels",
  "simpleName": "Pipe",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.channels.Pipe$SourceChannel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "source",
      "comment": "Returns this pipe\u0027s source channel.",
      "tagMap": {
        "return": [
          "This pipe\u0027s source channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.Pipe$SinkChannel",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "sink",
      "comment": "Returns this pipe\u0027s sink channel.",
      "tagMap": {
        "return": [
          "This pipe\u0027s sink channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.Pipe",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "open",
      "comment": "Opens a pipe. The new pipe is created by invoking the openPipe method of the system-wide default SelectorProvider object.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ],
        "return": [
          "A new pipe"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initializes a new instance of this class.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "java.nio.channels.Pipe$SourceChannel",
    "java.nio.channels.Pipe$SinkChannel"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.channels.Pipe",
  "comment": "A pair of channels that implements a unidirectional pipe. \n\u003cp\u003e A pipe consists of a pair of channels: A writable \u003ca href\u003d\"Pipe.SinkChannel.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003esink\u003c/code\u003e\u003c/a\u003e channel and a readable \u003ca href\u003d\"Pipe.SourceChannel.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003esource\u003c/code\u003e\u003c/a\u003e channel. Once some bytes are written to the sink channel they can be read from the source channel in exactly the order in which they were written. \u003c/p\u003e\n\u003cp\u003e Whether or not a thread writing bytes to a pipe will block until another thread reads those bytes, or some previously-written bytes, from the pipe is system-dependent and therefore unspecified. Many pipe implementations will buffer up to a certain number of bytes between the sink and source channels, but such buffering should not be assumed. \u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}