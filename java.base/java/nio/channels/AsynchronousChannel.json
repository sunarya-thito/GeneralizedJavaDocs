{
  "packageName": "java.nio.channels",
  "simpleName": "AsynchronousChannel",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.nio.channels.Channel",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "close",
      "comment": "Closes this channel. Any outstanding asynchronous operations upon this channel will complete with the exception AsynchronousCloseException. After a channel is closed, further attempts to initiate asynchronous I/O operations complete immediately with cause ClosedChannelException. This method otherwise behaves exactly as specified by the Channel interface.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/Channel.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/Channel.html\" title\u003d\"interface in java.nio.channels\"\u003eChannel\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html\" title\u003d\"interface in java.io\"\u003eCloseable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.nio.channels.AsynchronousChannel",
  "comment": "A channel that supports asynchronous I/O operations. Asynchronous I/O operations will usually take one of two forms: \n\u003col\u003e \n \u003cli\u003e\u003cpre\u003e\u003ca href\u003d\"../../util/concurrent/Future.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eFuture\u003c/code\u003e\u003c/a\u003e\u0026lt;V\u0026gt; \u003cem\u003eoperation\u003c/em\u003e(\u003cem\u003e...\u003c/em\u003e)\u003c/pre\u003e\u003c/li\u003e \n \u003cli\u003e\u003cpre\u003evoid \u003cem\u003eoperation\u003c/em\u003e(\u003cem\u003e...\u003c/em\u003e A attachment, \u003ca href\u003d\"CompletionHandler.html\" title\u003d\"interface in java.nio.channels\"\u003e\u003ccode\u003eCompletionHandler\u003c/code\u003e\u003c/a\u003e\u0026lt;V,? super A\u0026gt; handler)\u003c/pre\u003e\u003c/li\u003e \n\u003c/ol\u003e where \n\u003ci\u003eoperation\u003c/i\u003e is the name of the I/O operation (read or write for example), \n\u003ci\u003eV\u003c/i\u003e is the result type of the I/O operation, and \n\u003ci\u003eA\u003c/i\u003e is the type of an object attached to the I/O operation to provide context when consuming the result. The attachment is important for cases where a \n\u003cem\u003estate-less\u003c/em\u003e \n\u003ccode\u003eCompletionHandler\u003c/code\u003e is used to consume the result of many I/O operations. \n\u003cp\u003e In the first form, the methods defined by the \u003ca href\u003d\"../../util/concurrent/Future.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eFuture\u003c/code\u003e\u003c/a\u003e interface may be used to check if the operation has completed, wait for its completion, and to retrieve the result. In the second form, a \u003ca href\u003d\"CompletionHandler.html\" title\u003d\"interface in java.nio.channels\"\u003e\u003ccode\u003eCompletionHandler\u003c/code\u003e\u003c/a\u003e is invoked to consume the result of the I/O operation when it completes or fails. \u003c/p\u003e\n\u003cp\u003e A channel that implements this interface is \u003cem\u003easynchronously closeable\u003c/em\u003e: If an I/O operation is outstanding on the channel and the channel\u0027s \u003ca href\u003d\"#close()\"\u003e\u003ccode\u003eclose\u003c/code\u003e\u003c/a\u003e method is invoked, then the I/O operation fails with the exception \u003ca href\u003d\"AsynchronousCloseException.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eAsynchronousCloseException\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e Asynchronous channels are safe for use by multiple concurrent threads. Some channel implementations may support concurrent reading and writing, but may not allow more than one read and one write operation to be outstanding at any given time. \u003c/p\u003e\n\u003ch2\u003eCancellation\u003c/h2\u003e \n\u003cp\u003e The \u003ccode\u003eFuture\u003c/code\u003e interface defines the \u003ca href\u003d\"../../util/concurrent/Future.html#cancel(boolean)\"\u003e\u003ccode\u003ecancel\u003c/code\u003e\u003c/a\u003e method to cancel execution. This causes all threads waiting on the result of the I/O operation to throw \u003ca href\u003d\"../../util/concurrent/CancellationException.html\" title\u003d\"class in java.util.concurrent\"\u003e\u003ccode\u003eCancellationException\u003c/code\u003e\u003c/a\u003e. Whether the underlying I/O operation can be cancelled is highly implementation specific and therefore not specified. Where cancellation leaves the channel, or the entity to which it is connected, in an inconsistent state, then the channel is put into an implementation specific \u003cem\u003eerror state\u003c/em\u003e that prevents further attempts to initiate I/O operations that are \u003ci\u003esimilar\u003c/i\u003e to the operation that was cancelled. For example, if a read operation is cancelled but the implementation cannot guarantee that bytes have not been read from the channel then it puts the channel into an error state; further attempts to initiate a \u003ccode\u003eread\u003c/code\u003e operation cause an unspecified runtime exception to be thrown. Similarly, if a write operation is cancelled but the implementation cannot guarantee that bytes have not been written to the channel then subsequent attempts to initiate a \u003ccode\u003ewrite\u003c/code\u003e will fail with an unspecified runtime exception. \u003c/p\u003e\n\u003cp\u003e Where the \u003ca href\u003d\"../../util/concurrent/Future.html#cancel(boolean)\"\u003e\u003ccode\u003ecancel\u003c/code\u003e\u003c/a\u003e method is invoked with the \u003ccode\u003e mayInterruptIfRunning\u003c/code\u003e parameter set to \u003ccode\u003etrue\u003c/code\u003e then the I/O operation may be interrupted by closing the channel. In that case all threads waiting on the result of the I/O operation throw \u003ccode\u003eCancellationException\u003c/code\u003e and any other I/O operations outstanding on the channel complete with the exception \u003ca href\u003d\"AsynchronousCloseException.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eAsynchronousCloseException\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e Where the \u003ccode\u003ecancel\u003c/code\u003e method is invoked to cancel read or write operations then it is recommended that all buffers used in the I/O operations be discarded or care taken to ensure that the buffers are not accessed while the channel remains open.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}