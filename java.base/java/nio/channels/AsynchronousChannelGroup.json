{
  "packageName": "java.nio.channels",
  "simpleName": "AsynchronousChannelGroup",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.channels.spi.AsynchronousChannelProvider",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "provider",
      "comment": "Returns the provider that created this channel group.",
      "tagMap": {
        "return": [
          "The provider that created this channel group"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.AsynchronousChannelGroup",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "nThreads"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.ThreadFactory",
            "type": "Class"
          },
          "field": {
            "name": "threadFactory"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "withFixedThreadPool",
      "comment": "Creates an asynchronous channel group with a fixed thread pool. The resulting asynchronous channel group reuses a fixed number of threads. At any point, at most nThreads threads will be active processing tasks that are submitted to handle I/O events and dispatch completion results for operations initiated on asynchronous channels in the group. The group is created by invoking the openAsynchronousChannelGroup(int,ThreadFactory) method of the system-wide default AsynchronousChannelProvider object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enThreads\u003c/code\u003e - The number of threads in the pool",
          "\u003ccode\u003ethreadFactory\u003c/code\u003e - The factory to use when creating new threads"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003enThreads \u0026lt;\u003d 0\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ],
        "return": [
          "A new asynchronous channel group"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.AsynchronousChannelGroup",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.ExecutorService",
            "type": "Class"
          },
          "field": {
            "name": "executor"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "initialSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "withCachedThreadPool",
      "comment": "Creates an asynchronous channel group with a given thread pool that creates new threads as needed. The executor parameter is an ExecutorService that creates new threads as needed to execute tasks that are submitted to handle I/O events and dispatch completion results for operations initiated on asynchronous channels in the group. It may reuse previously constructed threads when they are available. The initialSize parameter may be used by the implementation as a hint as to the initial number of tasks it may submit. For example, it may be used to indicate the initial number of threads that wait on I/O events. The executor is intended to be used exclusively by the resulting asynchronous channel group. Termination of the group results in the orderly shutdown of the executor service. Shutting down the executor service by other means results in unspecified behavior. The group is created by invoking the openAsynchronousChannelGroup(ExecutorService,int) method of the system-wide default AsynchronousChannelProvider object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/concurrent/Executors.html#newCachedThreadPool()\"\u003e\u003ccode\u003eExecutors.newCachedThreadPool()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eexecutor\u003c/code\u003e - The thread pool for the resulting group",
          "\u003ccode\u003einitialSize\u003c/code\u003e - A value \n\u003ccode\u003e\u0026gt;\u003d0\u003c/code\u003e or a negative value for implementation specific default"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ],
        "return": [
          "A new asynchronous channel group"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.AsynchronousChannelGroup",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.ExecutorService",
            "type": "Class"
          },
          "field": {
            "name": "executor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "withThreadPool",
      "comment": "Creates an asynchronous channel group with a given thread pool. The executor parameter is an ExecutorService that executes tasks submitted to dispatch completion results for operations initiated on asynchronous channels in the group. Care should be taken when configuring the executor service. It should support direct handoff or unbounded queuing of submitted tasks, and the thread that invokes the execute method should never invoke the task directly. An implementation may mandate additional constraints. The executor is intended to be used exclusively by the resulting asynchronous channel group. Termination of the group results in the orderly shutdown of the executor service. Shutting down the executor service by other means results in unspecified behavior. The group is created by invoking the openAsynchronousChannelGroup(ExecutorService,int) method of the system-wide default AsynchronousChannelProvider object with an initialSize of 0.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eexecutor\u003c/code\u003e - The thread pool for the resulting group"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ],
        "return": [
          "A new asynchronous channel group"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isShutdown",
      "comment": "Tells whether or not this asynchronous channel group is shutdown.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this asynchronous channel group is shutdown or has been marked for shutdown."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isTerminated",
      "comment": "Tells whether or not this group has terminated. Where this method returns true, then the associated thread pool has also terminated.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this group has terminated"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "shutdown",
      "comment": "Initiates an orderly shutdown of the group. This method marks the group as shutdown. Further attempts to construct channel that binds to this group will throw ShutdownChannelGroupException. The group terminates when all asynchronous channels in the group are closed, all actively executing completion handlers have run to completion, and all resources have been released. This method has no effect if the group is already shutdown.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "shutdownNow",
      "comment": "Shuts down the group and closes all open channels in the group. In addition to the actions performed by the shutdown method, this method invokes the close method on all open channels in the group. This method does not attempt to stop or interrupt threads that are executing completion handlers. The group terminates when all actively executing completion handlers have run to completion and all resources have been released. This method may be invoked at any time. If some other thread has already invoked it, then another invocation will block until the first invocation is complete, after which it will return without effect.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.InterruptedException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "timeout"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "awaitTermination",
      "comment": "Awaits termination of the group. This method blocks until the group has terminated, or the timeout occurs, or the current thread is interrupted, whichever happens first.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etimeout\u003c/code\u003e - The maximum time to wait, or zero or less to not wait",
          "\u003ccode\u003eunit\u003c/code\u003e - The time unit of the timeout argument"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/InterruptedException.html\" title\u003d\"class in java.lang\"\u003eInterruptedException\u003c/a\u003e\u003c/code\u003e - If interrupted while waiting"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the group has terminated; \n\u003ccode\u003efalse\u003c/code\u003e if the timeout elapsed before termination"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.nio.channels.spi.AsynchronousChannelProvider",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initialize a new instance of this class.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprovider\u003c/code\u003e - The asynchronous channel provider for this group"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.channels.AsynchronousChannelGroup",
  "comment": "A grouping of asynchronous channels for the purpose of resource sharing. \n\u003cp\u003e An asynchronous channel group encapsulates the mechanics required to handle the completion of I/O operations initiated by \u003ca href\u003d\"AsynchronousChannel.html\" title\u003d\"interface in java.nio.channels\"\u003e\u003ccode\u003easynchronous channels\u003c/code\u003e\u003c/a\u003e that are bound to the group. A group has an associated thread pool to which tasks are submitted to handle I/O events and dispatch to \u003ca href\u003d\"CompletionHandler.html\" title\u003d\"interface in java.nio.channels\"\u003e\u003ccode\u003ecompletion-handlers\u003c/code\u003e\u003c/a\u003e that consume the result of asynchronous operations performed on channels in the group. In addition to handling I/O events, the pooled threads may also execute other tasks required to support the execution of asynchronous I/O operations. \u003c/p\u003e\n\u003cp\u003e An asynchronous channel group is created by invoking the \u003ca href\u003d\"#withFixedThreadPool(int,java.util.concurrent.ThreadFactory)\"\u003e\u003ccode\u003ewithFixedThreadPool\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"#withCachedThreadPool(java.util.concurrent.ExecutorService,int)\"\u003e\u003ccode\u003ewithCachedThreadPool\u003c/code\u003e\u003c/a\u003e methods defined here. Channels are bound to a group by specifying the group when constructing the channel. The associated thread pool is \u003cem\u003eowned\u003c/em\u003e by the group; termination of the group results in the shutdown of the associated thread pool. \u003c/p\u003e\n\u003cp\u003e In addition to groups created explicitly, the Java virtual machine maintains a system-wide \u003cem\u003edefault group\u003c/em\u003e that is constructed automatically. Asynchronous channels that do not specify a group at construction time are bound to the default group. The default group has an associated thread pool that creates new threads as needed. The default group may be configured by means of system properties defined in the table below. Where the \u003ca href\u003d\"../../util/concurrent/ThreadFactory.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eThreadFactory\u003c/code\u003e\u003c/a\u003e for the default group is not configured then the pooled threads of the default group are \u003ca href\u003d\"../../lang/Thread.html#isDaemon()\"\u003e\u003ccode\u003edaemon\u003c/code\u003e\u003c/a\u003e threads. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none:\"\u003e\n  System properties\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003eSystem property\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eDescription\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \u003ccode\u003e\u003cspan id\u003d\"java.nio.channels.DefaultThreadPool.threadFactory\" class\u003d\"search-tag-result\"\u003ejava.nio.channels.DefaultThreadPool.threadFactory\u003c/span\u003e\u003c/code\u003e \u003c/th\u003e \n   \u003ctd\u003e The value of this property is taken to be the fully-qualified name of a concrete \u003ca href\u003d\"../../util/concurrent/ThreadFactory.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eThreadFactory\u003c/code\u003e\u003c/a\u003e class. The class is loaded using the system class loader and instantiated. The factory\u0027s \u003ca href\u003d\"../../util/concurrent/ThreadFactory.html#newThread(java.lang.Runnable)\"\u003e\u003ccode\u003enewThread\u003c/code\u003e\u003c/a\u003e method is invoked to create each thread for the default group\u0027s thread pool. If the process to load and instantiate the value of the property fails then an unspecified error is thrown during the construction of the default group. \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003e \u003ccode\u003e\u003cspan id\u003d\"java.nio.channels.DefaultThreadPool.initialSize\" class\u003d\"search-tag-result\"\u003ejava.nio.channels.DefaultThreadPool.initialSize\u003c/span\u003e\u003c/code\u003e \u003c/th\u003e \n   \u003ctd\u003e The value of the \u003ccode\u003einitialSize\u003c/code\u003e parameter for the default group (see \u003ca href\u003d\"#withCachedThreadPool(java.util.concurrent.ExecutorService,int)\"\u003e\u003ccode\u003ewithCachedThreadPool\u003c/code\u003e\u003c/a\u003e). The value of the property is taken to be the \u003ccode\u003eString\u003c/code\u003e representation of an \u003ccode\u003eInteger\u003c/code\u003e that is the initial size parameter. If the value cannot be parsed as an \u003ccode\u003eInteger\u003c/code\u003e it causes an unspecified error to be thrown during the construction of the default group. \u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003ca id\u003d\"threading\"\u003e\u003c/a\u003e\n\u003cp\u003e\u003c/p\u003e\n\u003ch2\u003eThreading\u003c/h2\u003e \n\u003cp\u003e The completion handler for an I/O operation initiated on a channel bound to a group is guaranteed to be invoked by one of the pooled threads in the group. This ensures that the completion handler is run by a thread with the expected \u003cem\u003eidentity\u003c/em\u003e. \u003c/p\u003e\n\u003cp\u003e Where an I/O operation completes immediately, and the initiating thread is one of the pooled threads in the group then the completion handler may be invoked directly by the initiating thread. To avoid stack overflow, an implementation may impose a limit as to the number of activations on the thread stack. Some I/O operations may prohibit invoking the completion handler directly by the initiating thread (see \u003ca href\u003d\"AsynchronousServerSocketChannel.html#accept(A,java.nio.channels.CompletionHandler)\"\u003e\u003ccode\u003eaccept\u003c/code\u003e\u003c/a\u003e). \u003ca id\u003d\"shutdown\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003ch2\u003eShutdown and Termination\u003c/h2\u003e \n\u003cp\u003e The \u003ca href\u003d\"#shutdown()\"\u003e\u003ccode\u003eshutdown\u003c/code\u003e\u003c/a\u003e method is used to initiate an \u003cem\u003eorderly shutdown\u003c/em\u003e of a group. An orderly shutdown marks the group as shutdown; further attempts to construct a channel that binds to the group will throw \u003ca href\u003d\"ShutdownChannelGroupException.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eShutdownChannelGroupException\u003c/code\u003e\u003c/a\u003e. Whether or not a group is shutdown can be tested using the \u003ca href\u003d\"#isShutdown()\"\u003e\u003ccode\u003eisShutdown\u003c/code\u003e\u003c/a\u003e method. Once shutdown, the group \u003cem\u003eterminates\u003c/em\u003e when all asynchronous channels that are bound to the group are closed, all actively executing completion handlers have run to completion, and resources used by the group are released. No attempt is made to stop or interrupt threads that are executing completion handlers. The \u003ca href\u003d\"#isTerminated()\"\u003e\u003ccode\u003eisTerminated\u003c/code\u003e\u003c/a\u003e method is used to test if the group has terminated, and the \u003ca href\u003d\"#awaitTermination(long,java.util.concurrent.TimeUnit)\"\u003e\u003ccode\u003eawaitTermination\u003c/code\u003e\u003c/a\u003e method can be used to block until the group has terminated. \u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"#shutdownNow()\"\u003e\u003ccode\u003eshutdownNow\u003c/code\u003e\u003c/a\u003e method can be used to initiate a \u003cem\u003eforceful shutdown\u003c/em\u003e of the group. In addition to the actions performed by an orderly shutdown, the \u003ccode\u003eshutdownNow\u003c/code\u003e method closes all open channels in the group as if by invoking the \u003ca href\u003d\"AsynchronousChannel.html#close()\"\u003e\u003ccode\u003eclose\u003c/code\u003e\u003c/a\u003e method.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/AsynchronousSocketChannel.html#open(java.nio.channels.AsynchronousChannelGroup)\"\u003e\u003ccode\u003eAsynchronousSocketChannel.open(AsynchronousChannelGroup)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/AsynchronousServerSocketChannel.html#open(java.nio.channels.AsynchronousChannelGroup)\"\u003e\u003ccode\u003eAsynchronousServerSocketChannel.open(AsynchronousChannelGroup)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.7"
    ]
  }
}