{
  "packageName": "java.nio.channels",
  "simpleName": "Channels",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newInputStream",
      "comment": "Constructs a stream that reads bytes from the given channel. The read methods of the resulting stream will throw an IllegalBlockingModeException if invoked while the underlying channel is in non-blocking mode. The stream will not be buffered, and it will not support the mark or reset methods. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - The channel from which bytes will be read"
        ],
        "return": [
          "A new input stream"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.OutputStream",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newOutputStream",
      "comment": "Constructs a stream that writes bytes to the given channel. The write methods of the resulting stream will throw an IllegalBlockingModeException if invoked while the underlying channel is in non-blocking mode. The stream will not be buffered. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - The channel to which bytes will be written"
        ],
        "return": [
          "A new output stream"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newInputStream",
      "comment": "Constructs a stream that reads bytes from the given channel. The stream will not be buffered, and it will not support the mark or reset methods. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - The channel from which bytes will be read"
        ],
        "return": [
          "A new input stream"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.OutputStream",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newOutputStream",
      "comment": "Constructs a stream that writes bytes to the given channel. The stream will not be buffered. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - The channel to which bytes will be written"
        ],
        "return": [
          "A new output stream"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.ReadableByteChannel",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newChannel",
      "comment": "Constructs a channel that reads bytes from the given stream. The resulting channel will not be buffered; it will simply redirect its I/O operations to the given stream. Closing the channel will in turn cause the stream to be closed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - The stream from which bytes are to be read"
        ],
        "return": [
          "A new readable byte channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.WritableByteChannel",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newChannel",
      "comment": "Constructs a channel that writes bytes to the given stream. The resulting channel will not be buffered; it will simply redirect its I/O operations to the given stream. Closing the channel will in turn cause the stream to be closed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - The stream to which bytes are to be written"
        ],
        "return": [
          "A new writable byte channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newReader",
      "comment": "Constructs a reader that decodes bytes from the given channel using the given decoder. The resulting stream will contain an internal input buffer of at least minBufferCap bytes. The stream\u0027s read methods will, as needed, fill the buffer by reading bytes from the underlying channel; if the channel is in non-blocking mode when bytes are to be read then an IllegalBlockingModeException will be thrown. The resulting stream will not otherwise be buffered, and it will not support the mark or reset methods. Closing the stream will in turn cause the channel to be closed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - The channel from which bytes will be read",
          "\u003ccode\u003edec\u003c/code\u003e - The charset decoder to be used",
          "\u003ccode\u003eminBufferCap\u003c/code\u003e - The minimum capacity of the internal byte buffer, or \n\u003ccode\u003e-1\u003c/code\u003e if an implementation-dependent default capacity is to be used"
        ],
        "return": [
          "A new reader"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newReader",
      "comment": "Constructs a reader that decodes bytes from the given channel according to the named charset. An invocation of this method of the form  \n     Channels.newReader(ch, csname)\n  behaves in exactly the same way as the expression  \n     Channels.newReader(ch, Charset.forName(csName))",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - The channel from which bytes will be read",
          "\u003ccode\u003ecsName\u003c/code\u003e - The name of the charset to be used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/UnsupportedCharsetException.html\" title\u003d\"class in java.nio.charset\"\u003eUnsupportedCharsetException\u003c/a\u003e\u003c/code\u003e - If no support for the named charset is available in this instance of the Java virtual machine"
        ],
        "return": [
          "A new reader"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newReader",
      "comment": "Constructs a reader that decodes bytes from the given channel according to the given charset. An invocation of this method of the form  \n     Channels.newReader(ch, charset)\n  behaves in exactly the same way as the expression  \n     Channels.newReader(ch, Charset.forName(csName).newDecoder(), -1)\n  The reader\u0027s default action for malformed-input and unmappable-character errors is to report them. When more control over the error handling is required, the constructor that takes a CharsetDecoder should be used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - The channel from which bytes will be read",
          "\u003ccode\u003echarset\u003c/code\u003e - The charset to be used"
        ],
        "return": [
          "A new reader"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Writer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newWriter",
      "comment": "Constructs a writer that encodes characters using the given encoder and writes the resulting bytes to the given channel. The resulting stream will contain an internal output buffer of at least minBufferCap bytes. The stream\u0027s write methods will, as needed, flush the buffer by writing bytes to the underlying channel; if the channel is in non-blocking mode when bytes are to be written then an IllegalBlockingModeException will be thrown. The resulting stream will not otherwise be buffered. Closing the stream will in turn cause the channel to be closed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - The channel to which bytes will be written",
          "\u003ccode\u003eenc\u003c/code\u003e - The charset encoder to be used",
          "\u003ccode\u003eminBufferCap\u003c/code\u003e - The minimum capacity of the internal byte buffer, or \n\u003ccode\u003e-1\u003c/code\u003e if an implementation-dependent default capacity is to be used"
        ],
        "return": [
          "A new writer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Writer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newWriter",
      "comment": "Constructs a writer that encodes characters according to the named charset and writes the resulting bytes to the given channel. An invocation of this method of the form  \n     Channels.newWriter(ch, csname)\n  behaves in exactly the same way as the expression  \n     Channels.newWriter(ch, Charset.forName(csName))",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - The channel to which bytes will be written",
          "\u003ccode\u003ecsName\u003c/code\u003e - The name of the charset to be used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/UnsupportedCharsetException.html\" title\u003d\"class in java.nio.charset\"\u003eUnsupportedCharsetException\u003c/a\u003e\u003c/code\u003e - If no support for the named charset is available in this instance of the Java virtual machine"
        ],
        "return": [
          "A new writer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Writer",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newWriter",
      "comment": "Constructs a writer that encodes characters according to the given charset and writes the resulting bytes to the given channel. An invocation of this method of the form  \n     Channels.newWriter(ch, charset)\n  behaves in exactly the same way as the expression  \n     Channels.newWriter(ch, Charset.forName(csName).newEncoder(), -1)\n  The writer\u0027s default action for malformed-input and unmappable-character errors is to report them. When more control over the error handling is required, the constructor that takes a CharsetEncoder should be used.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ech\u003c/code\u003e - The channel to which bytes will be written",
          "\u003ccode\u003echarset\u003c/code\u003e - The charset to be used"
        ],
        "return": [
          "A new writer"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.nio.channels.Channels",
  "comment": "Utility methods for channels and streams. \n\u003cp\u003e This class defines static methods that support the interoperation of the stream classes of the \u003ca href\u003d\"../../io/package-summary.html\"\u003e\u003ccode\u003ejava.io\u003c/code\u003e\u003c/a\u003e package with the channel classes of this package. \u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}