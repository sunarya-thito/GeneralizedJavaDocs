{
  "packageName": "java.nio.channels.spi",
  "simpleName": "AbstractInterruptibleChannel",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "close",
      "comment": "Closes this channel. If the channel has already been closed then this method returns immediately. Otherwise it marks the channel as closed and then invokes the implCloseChannel method in order to complete the close operation.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/Channel.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/Channel.html\" title\u003d\"interface in java.nio.channels\"\u003eChannel\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html\" title\u003d\"interface in java.io\"\u003eCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/InterruptibleChannel.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/InterruptibleChannel.html\" title\u003d\"interface in java.nio.channels\"\u003eInterruptibleChannel\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "implCloseChannel",
      "comment": "Closes this channel. This method is invoked by the close method in order to perform the actual work of closing the channel. This method is only invoked if the channel has not yet been closed, and it is never invoked more than once. An implementation of this method must arrange for any other thread that is blocked in an I/O operation upon this channel to return immediately, either by throwing an exception or by returning normally.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs while closing the channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isOpen",
      "comment": "Description copied from interface: Channel",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/Channel.html#isOpen()\"\u003eisOpen\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/Channel.html\" title\u003d\"interface in java.nio.channels\"\u003eChannel\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this channel is open"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "begin",
      "comment": "Marks the beginning of an I/O operation that might block indefinitely. This method should be invoked in tandem with the end method, using a try ... finally block as shown above, in order to implement asynchronous closing and interruption for this channel.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "end",
      "comment": "Marks the end of an I/O operation that might block indefinitely. This method should be invoked in tandem with the begin method, using a try ... finally block as shown above, in order to implement asynchronous closing and interruption for this channel.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecompleted\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e if, and only if, the I/O operation completed successfully, that is, had some effect that would be visible to the operation\u0027s invoker"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/AsynchronousCloseException.html\" title\u003d\"class in java.nio.channels\"\u003eAsynchronousCloseException\u003c/a\u003e\u003c/code\u003e - If the channel was asynchronously closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedByInterruptException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedByInterruptException\u003c/a\u003e\u003c/code\u003e - If the thread blocked in the I/O operation was interrupted"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initializes a new instance of this class.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.channels.spi.AbstractInterruptibleChannel",
  "comment": "Base implementation class for interruptible channels. \n\u003cp\u003e This class encapsulates the low-level machinery required to implement the asynchronous closing and interruption of channels. A concrete channel class must invoke the \u003ca href\u003d\"#begin()\"\u003e\u003ccode\u003ebegin\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#end(boolean)\"\u003e\u003ccode\u003eend\u003c/code\u003e\u003c/a\u003e methods before and after, respectively, invoking an I/O operation that might block indefinitely. In order to ensure that the \u003ca href\u003d\"#end(boolean)\"\u003e\u003ccode\u003eend\u003c/code\u003e\u003c/a\u003e method is always invoked, these methods should be used within a \u003ccode\u003etry\u003c/code\u003e\u0026nbsp;...\u0026nbsp;\u003ccode\u003efinally\u003c/code\u003e block: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre id\u003d\"be\"\u003e boolean completed \u003d false;\n try {\n     begin();\n     completed \u003d ...;    // Perform blocking I/O operation\n     return ...;         // Return result\n } finally {\n     end(completed);\n }\u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003ecompleted\u003c/code\u003e argument to the \u003ca href\u003d\"#end(boolean)\"\u003e\u003ccode\u003eend\u003c/code\u003e\u003c/a\u003e method tells whether or not the I/O operation actually completed, that is, whether it had any effect that would be visible to the invoker. In the case of an operation that reads bytes, for example, this argument should be \u003ccode\u003etrue\u003c/code\u003e if, and only if, some bytes were actually transferred into the invoker\u0027s target buffer. \u003c/p\u003e\n\u003cp\u003e A concrete channel class must also implement the \u003ca href\u003d\"#implCloseChannel()\"\u003e\u003ccode\u003eimplCloseChannel\u003c/code\u003e\u003c/a\u003e method in such a way that if it is invoked while another thread is blocked in a native I/O operation upon the channel then that operation will immediately return, either by throwing an exception or by returning normally. If a thread is interrupted or the channel upon which it is blocked is asynchronously closed then the channel\u0027s \u003ca href\u003d\"#end(boolean)\"\u003e\u003ccode\u003eend\u003c/code\u003e\u003c/a\u003e method will throw the appropriate exception. \u003c/p\u003e\n\u003cp\u003e This class performs the synchronization required to implement the \u003ca href\u003d\"../Channel.html\" title\u003d\"interface in java.nio.channels\"\u003e\u003ccode\u003eChannel\u003c/code\u003e\u003c/a\u003e specification. Implementations of the \u003ca href\u003d\"#implCloseChannel()\"\u003e\u003ccode\u003eimplCloseChannel\u003c/code\u003e\u003c/a\u003e method need not synchronize against other threads that might be attempting to close the channel. \u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}