{
  "packageName": "java.nio.channels",
  "simpleName": "AsynchronousFileChannel",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.channels.AsynchronousFileChannel",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        },
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.nio.file.OpenOption",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "options"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.ExecutorService",
            "type": "Class"
          },
          "field": {
            "name": "executor"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.FileAttribute",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "open",
      "comment": "Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file. The options parameter determines how the file is opened. The READ and WRITE options determines if the file should be opened for reading and/or writing. If neither option is contained in the array then an existing file is opened for reading. In addition to READ and WRITE, the following options may be present: additional options Option Description TRUNCATE_EXISTING When opening an existing file, the file is first truncated to a size of 0 bytes. This option is ignored when the file is opened only for reading. CREATE_NEW If this option is present then a new file is created, failing if the file already exists. When creating a file the check for the existence of the file and the creation of the file if it does not exist is atomic with respect to other file system operations. This option is ignored when the file is opened only for reading. CREATE If this option is present then an existing file is opened if it exists, otherwise a new file is created. When creating a file the check for the existence of the file and the creation of the file if it does not exist is atomic with respect to other file system operations. This option is ignored if the CREATE_NEW option is also present or the file is opened only for reading. DELETE_ON_CLOSE When this option is present then the implementation makes a best effort attempt to delete the file when closed by the close method. If the close method is not invoked then a best effort attempt is made to delete the file when the Java virtual machine terminates. SPARSE When creating a new file this option is a hint that the new file will be sparse. This option is ignored when not creating a new file. SYNC Requires that every update to the file\u0027s content or metadata be written synchronously to the underlying storage device. (see Synchronized I/O file integrity). DSYNC Requires that every update to the file\u0027s content be written synchronously to the underlying storage device. (see Synchronized I/O file integrity). An implementation may also support additional options. The executor parameter is the ExecutorService to which tasks are submitted to handle I/O events and dispatch completion results for operations initiated on resulting channel. The nature of these tasks is highly implementation specific and so care should be taken when configuring the Executor. Minimally it should support an unbounded work queue and should not run tasks on the caller thread of the execute method. Shutting down the executor service while the channel is open results in unspecified behavior. The attrs parameter is an optional array of file file-attributes to set atomically when creating the file. The new channel is created by invoking the newFileChannel method on the provider that created the Path.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The path of the file to open or create",
          "\u003ccode\u003eoptions\u003c/code\u003e - Options specifying how the file is opened",
          "\u003ccode\u003eexecutor\u003c/code\u003e - The thread pool or \n\u003ccode\u003enull\u003c/code\u003e to associate the channel with the default thread pool",
          "\u003ccode\u003eattrs\u003c/code\u003e - An optional list of file attributes to set atomically when creating the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the set contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003efile\u003c/code\u003e is associated with a provider that does not support creating asynchronous file channels, or an unsupported open option is specified, or the array contains an attribute that cannot be set atomically when creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is installed and it denies an unspecified permission required by the implementation. In the case of the default provider, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e method is invoked to check read access if the file is opened for reading. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(String)\u003c/code\u003e\u003c/a\u003e method is invoked to check write access if the file is opened for writing"
        ],
        "return": [
          "A new asynchronous file channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.AsynchronousFileChannel",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "open",
      "comment": "Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file. An invocation of this method behaves in exactly the same way as the invocation      ch.open(file, opts, null, new FileAttribute\u003c?\u003e[0]);\n where opts is a Set containing the options specified to this method. The resulting channel is associated with default thread pool to which tasks are submitted to handle I/O events and dispatch to completion handlers that consume the result of asynchronous operations performed on the resulting channel.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The path of the file to open or create",
          "\u003ccode\u003eoptions\u003c/code\u003e - Options specifying how the file is opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the set contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003efile\u003c/code\u003e is associated with a provider that does not support creating file channels, or an unsupported open option is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is installed and it denies an unspecified permission required by the implementation. In the case of the default provider, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e method is invoked to check read access if the file is opened for reading. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(String)\u003c/code\u003e\u003c/a\u003e method is invoked to check write access if the file is opened for writing"
        ],
        "return": [
          "A new asynchronous file channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "size",
      "comment": "Returns the current size of this channel\u0027s file.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedChannelException\u003c/a\u003e\u003c/code\u003e - If this channel is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If some other I/O error occurs"
        ],
        "return": [
          "The current size of this channel\u0027s file, measured in bytes"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.AsynchronousFileChannel",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "truncate",
      "comment": "Truncates this channel\u0027s file to the given size. If the given size is less than the file\u0027s current size then the file is truncated, discarding any bytes beyond the new end of the file. If the given size is greater than or equal to the file\u0027s current size then the file is not modified.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esize\u003c/code\u003e - The new size, a non-negative byte count"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonWritableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonWritableChannelException\u003c/a\u003e\u003c/code\u003e - If this channel was not opened for writing",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedChannelException\u003c/a\u003e\u003c/code\u003e - If this channel is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the new size is negative",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If some other I/O error occurs"
        ],
        "return": [
          "This file channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "metaData"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "force",
      "comment": "Forces any updates to this channel\u0027s file to be written to the storage device that contains it. If this channel\u0027s file resides on a local storage device then when this method returns it is guaranteed that all changes made to the file since this channel was created, or since this method was last invoked, will have been written to that device. This is useful for ensuring that critical information is not lost in the event of a system crash. If the file does not reside on a local device then no such guarantee is made. The metaData parameter can be used to limit the number of I/O operations that this method is required to perform. Passing false for this parameter indicates that only updates to the file\u0027s content need be written to storage; passing true indicates that updates to both the file\u0027s content and metadata must be written, which generally requires at least one more I/O operation. Whether this parameter actually has any effect is dependent upon the underlying operating system and is therefore unspecified. Invoking this method may cause an I/O operation to occur even if the channel was only opened for reading. Some operating systems, for example, maintain a last-access time as part of a file\u0027s metadata, and this time is updated whenever the file is read. Whether or not this is actually done is system-dependent and is therefore unspecified. This method is only guaranteed to force changes that were made to this channel\u0027s file via the methods defined in this class.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emetaData\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e then this method is required to force changes to both the file\u0027s content and metadata to be written to storage; otherwise, it need only force content changes to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedChannelException\u003c/a\u003e\u003c/code\u003e - If this channel is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If some other I/O error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "shared"
          }
        },
        {
          "type": {
            "name": "A",
            "type": "Class"
          },
          "field": {
            "name": "attachment"
          }
        },
        {
          "type": {
            "name": "java.nio.channels.CompletionHandler",
            "parameters": [
              {
                "name": "java.nio.channels.FileLock",
                "type": "Class"
              },
              {
                "lowerBounds": [
                  {
                    "name": "A",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "lock",
      "comment": "Acquires a lock on the given region of this channel\u0027s file. This method initiates an operation to acquire a lock on the given region of this channel\u0027s file. The handler parameter is a completion handler that is invoked when the lock is acquired (or the operation fails). The result passed to the completion handler is the resulting FileLock. The region specified by the position and size parameters need not be contained within, or even overlap, the actual underlying file. Lock regions are fixed in size; if a locked region initially contains the end of the file and the file grows beyond the region then the new portion of the file will not be covered by the lock. If a file is expected to grow in size and a lock on the entire file is required then a region starting at zero, and no smaller than the expected maximum size of the file, should be locked. The two-argument lock(Object,CompletionHandler) method simply locks a region of size Long.MAX_VALUE. If a lock that overlaps the requested region is already held by this Java virtual machine, or this method has been invoked to lock an overlapping region and that operation has not completed, then this method throws OverlappingFileLockException. Some operating systems do not support a mechanism to acquire a file lock in an asynchronous manner. Consequently an implementation may acquire the file lock in a background thread or from a task executed by a thread in the associated thread pool. If there are many lock operations outstanding then it may consume threads in the Java virtual machine for indefinite periods. Some operating systems do not support shared locks, in which case a request for a shared lock is automatically converted into a request for an exclusive lock. Whether the newly-acquired lock is shared or exclusive may be tested by invoking the resulting lock object\u0027s isShared method. File locks are held on behalf of the entire Java virtual machine. They are not suitable for controlling access to a file by multiple threads within the same virtual machine.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - The type of the attachment"
        ],
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - The position at which the locked region is to start; must be non-negative",
          "\u003ccode\u003esize\u003c/code\u003e - The size of the locked region; must be non-negative, and the sum \n\u003ccode\u003eposition\u003c/code\u003e\u0026nbsp;+\u0026nbsp;\n\u003ccode\u003esize\u003c/code\u003e must be non-negative",
          "\u003ccode\u003eshared\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to request a shared lock, in which case this channel must be open for reading (and possibly writing); \n\u003ccode\u003efalse\u003c/code\u003e to request an exclusive lock, in which case this channel must be open for writing (and possibly reading)",
          "\u003ccode\u003eattachment\u003c/code\u003e - The object to attach to the I/O operation; can be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ehandler\u003c/code\u003e - The handler for consuming the result"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/OverlappingFileLockException.html\" title\u003d\"class in java.nio.channels\"\u003eOverlappingFileLockException\u003c/a\u003e\u003c/code\u003e - If a lock that overlaps the requested region is already held by this Java virtual machine, or there is already a pending attempt to lock an overlapping region",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the parameters do not hold",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonReadableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonReadableChannelException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eshared\u003c/code\u003e is true but this channel was not opened for reading",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonWritableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonWritableChannelException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eshared\u003c/code\u003e is false but this channel was not opened for writing"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "A",
            "type": "Class"
          },
          "field": {
            "name": "attachment"
          }
        },
        {
          "type": {
            "name": "java.nio.channels.CompletionHandler",
            "parameters": [
              {
                "name": "java.nio.channels.FileLock",
                "type": "Class"
              },
              {
                "lowerBounds": [
                  {
                    "name": "A",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lock",
      "comment": "Acquires an exclusive lock on this channel\u0027s file. This method initiates an operation to acquire a lock on the given region of this channel\u0027s file. The handler parameter is a completion handler that is invoked when the lock is acquired (or the operation fails). The result passed to the completion handler is the resulting FileLock. An invocation of this method of the form ch.lock(att,handler) behaves in exactly the same way as the invocation      ch.lock(0L, Long.MAX_VALUE, false, att, handler)",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - The type of the attachment"
        ],
        "param": [
          "\u003ccode\u003eattachment\u003c/code\u003e - The object to attach to the I/O operation; can be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ehandler\u003c/code\u003e - The handler for consuming the result"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/OverlappingFileLockException.html\" title\u003d\"class in java.nio.channels\"\u003eOverlappingFileLockException\u003c/a\u003e\u003c/code\u003e - If a lock is already held by this Java virtual machine, or there is already a pending attempt to lock a region",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonWritableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonWritableChannelException\u003c/a\u003e\u003c/code\u003e - If this channel was not opened for writing"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "name": "java.nio.channels.FileLock",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "shared"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "lock",
      "comment": "Acquires a lock on the given region of this channel\u0027s file. This method initiates an operation to acquire a lock on the given region of this channel\u0027s file. The method behaves in exactly the same manner as the lock(long, long, boolean, Object, CompletionHandler) method except that instead of specifying a completion handler, this method returns a Future representing the pending result. The Future\u0027s get method returns the FileLock on successful completion.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - The position at which the locked region is to start; must be non-negative",
          "\u003ccode\u003esize\u003c/code\u003e - The size of the locked region; must be non-negative, and the sum \n\u003ccode\u003eposition\u003c/code\u003e\u0026nbsp;+\u0026nbsp;\n\u003ccode\u003esize\u003c/code\u003e must be non-negative",
          "\u003ccode\u003eshared\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to request a shared lock, in which case this channel must be open for reading (and possibly writing); \n\u003ccode\u003efalse\u003c/code\u003e to request an exclusive lock, in which case this channel must be open for writing (and possibly reading)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/OverlappingFileLockException.html\" title\u003d\"class in java.nio.channels\"\u003eOverlappingFileLockException\u003c/a\u003e\u003c/code\u003e - If a lock is already held by this Java virtual machine, or there is already a pending attempt to lock a region",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the parameters do not hold",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonReadableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonReadableChannelException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eshared\u003c/code\u003e is true but this channel was not opened for reading",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonWritableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonWritableChannelException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eshared\u003c/code\u003e is false but this channel was not opened for writing"
        ],
        "return": [
          "a \n\u003ccode\u003eFuture\u003c/code\u003e object representing the pending result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "name": "java.nio.channels.FileLock",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "lock",
      "comment": "Acquires an exclusive lock on this channel\u0027s file. This method initiates an operation to acquire an exclusive lock on this channel\u0027s file. The method returns a Future representing the pending result of the operation. The Future\u0027s get method returns the FileLock on successful completion. An invocation of this method behaves in exactly the same way as the invocation      ch.lock(0L, Long.MAX_VALUE, false)",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/OverlappingFileLockException.html\" title\u003d\"class in java.nio.channels\"\u003eOverlappingFileLockException\u003c/a\u003e\u003c/code\u003e - If a lock is already held by this Java virtual machine, or there is already a pending attempt to lock a region",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonWritableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonWritableChannelException\u003c/a\u003e\u003c/code\u003e - If this channel was not opened for writing"
        ],
        "return": [
          "a \n\u003ccode\u003eFuture\u003c/code\u003e object representing the pending result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.FileLock",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "size"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "shared"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "tryLock",
      "comment": "Attempts to acquire a lock on the given region of this channel\u0027s file. This method does not block. An invocation always returns immediately, either having acquired a lock on the requested region or having failed to do so. If it fails to acquire a lock because an overlapping lock is held by another program then it returns null. If it fails to acquire a lock for any other reason then an appropriate exception is thrown.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/AsynchronousFileChannel.html#lock(A,java.nio.channels.CompletionHandler)\"\u003e\u003ccode\u003elock(Object,CompletionHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/AsynchronousFileChannel.html#lock(long,long,boolean,A,java.nio.channels.CompletionHandler)\"\u003e\u003ccode\u003elock(long,long,boolean,Object,CompletionHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/AsynchronousFileChannel.html#tryLock()\"\u003e\u003ccode\u003etryLock()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eposition\u003c/code\u003e - The position at which the locked region is to start; must be non-negative",
          "\u003ccode\u003esize\u003c/code\u003e - The size of the locked region; must be non-negative, and the sum \n\u003ccode\u003eposition\u003c/code\u003e\u0026nbsp;+\u0026nbsp;\n\u003ccode\u003esize\u003c/code\u003e must be non-negative",
          "\u003ccode\u003eshared\u003c/code\u003e - \n\u003ccode\u003etrue\u003c/code\u003e to request a shared lock, \n\u003ccode\u003efalse\u003c/code\u003e to request an exclusive lock"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the parameters do not hold",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedChannelException\u003c/a\u003e\u003c/code\u003e - If this channel is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/OverlappingFileLockException.html\" title\u003d\"class in java.nio.channels\"\u003eOverlappingFileLockException\u003c/a\u003e\u003c/code\u003e - If a lock that overlaps the requested region is already held by this Java virtual machine, or if another thread is already blocked in this method and is attempting to lock an overlapping region of the same file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonReadableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonReadableChannelException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eshared\u003c/code\u003e is true but this channel was not opened for reading",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonWritableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonWritableChannelException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eshared\u003c/code\u003e is false but this channel was not opened for writing",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If some other I/O error occurs"
        ],
        "return": [
          "A lock object representing the newly-acquired lock, or \n\u003ccode\u003enull\u003c/code\u003e if the lock could not be acquired because another program holds an overlapping lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.FileLock",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "tryLock",
      "comment": "Attempts to acquire an exclusive lock on this channel\u0027s file. An invocation of this method of the form ch.tryLock() behaves in exactly the same way as the invocation      ch.tryLock(0L, Long.MAX_VALUE, false)",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/AsynchronousFileChannel.html#lock(A,java.nio.channels.CompletionHandler)\"\u003e\u003ccode\u003elock(Object,CompletionHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/AsynchronousFileChannel.html#lock(long,long,boolean,A,java.nio.channels.CompletionHandler)\"\u003e\u003ccode\u003elock(long,long,boolean,Object,CompletionHandler)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/AsynchronousFileChannel.html#tryLock(long,long,boolean)\"\u003e\u003ccode\u003etryLock(long,long,boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/ClosedChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eClosedChannelException\u003c/a\u003e\u003c/code\u003e - If this channel is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/OverlappingFileLockException.html\" title\u003d\"class in java.nio.channels\"\u003eOverlappingFileLockException\u003c/a\u003e\u003c/code\u003e - If a lock that overlaps the requested region is already held by this Java virtual machine, or if another thread is already blocked in this method and is attempting to lock an overlapping region",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonWritableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonWritableChannelException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eshared\u003c/code\u003e is false but this channel was not opened for writing",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If some other I/O error occurs"
        ],
        "return": [
          "A lock object representing the newly-acquired lock, or \n\u003ccode\u003enull\u003c/code\u003e if the lock could not be acquired because another program holds an overlapping lock"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "dst"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        },
        {
          "type": {
            "name": "A",
            "type": "Class"
          },
          "field": {
            "name": "attachment"
          }
        },
        {
          "type": {
            "name": "java.nio.channels.CompletionHandler",
            "parameters": [
              {
                "name": "java.lang.Integer",
                "type": "Class"
              },
              {
                "lowerBounds": [
                  {
                    "name": "A",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "read",
      "comment": "Reads a sequence of bytes from this channel into the given buffer, starting at the given file position. This method initiates the reading of a sequence of bytes from this channel into the given buffer, starting at the given file position. The result of the read is the number of bytes read or -1 if the given position is greater than or equal to the file\u0027s size at the time that the read is attempted. This method works in the same manner as the AsynchronousByteChannel.read(ByteBuffer,Object,CompletionHandler) method, except that bytes are read starting at the given file position. If the given file position is greater than the file\u0027s size at the time that the read is attempted then no bytes are read.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - The type of the attachment"
        ],
        "param": [
          "\u003ccode\u003edst\u003c/code\u003e - The buffer into which bytes are to be transferred",
          "\u003ccode\u003eposition\u003c/code\u003e - The file position at which the transfer is to begin; must be non-negative",
          "\u003ccode\u003eattachment\u003c/code\u003e - The object to attach to the I/O operation; can be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ehandler\u003c/code\u003e - The handler for consuming the result"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the position is negative or the buffer is read-only",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonReadableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonReadableChannelException\u003c/a\u003e\u003c/code\u003e - If this channel was not opened for reading"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "dst"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "read",
      "comment": "Reads a sequence of bytes from this channel into the given buffer, starting at the given file position. This method initiates the reading of a sequence of bytes from this channel into the given buffer, starting at the given file position. This method returns a Future representing the pending result of the operation. The Future\u0027s get method returns the number of bytes read or -1 if the given position is greater than or equal to the file\u0027s size at the time that the read is attempted. This method works in the same manner as the AsynchronousByteChannel.read(ByteBuffer) method, except that bytes are read starting at the given file position. If the given file position is greater than the file\u0027s size at the time that the read is attempted then no bytes are read.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edst\u003c/code\u003e - The buffer into which bytes are to be transferred",
          "\u003ccode\u003eposition\u003c/code\u003e - The file position at which the transfer is to begin; must be non-negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the position is negative or the buffer is read-only",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonReadableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonReadableChannelException\u003c/a\u003e\u003c/code\u003e - If this channel was not opened for reading"
        ],
        "return": [
          "A \n\u003ccode\u003eFuture\u003c/code\u003e object representing the pending result"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        },
        {
          "type": {
            "name": "A",
            "type": "Class"
          },
          "field": {
            "name": "attachment"
          }
        },
        {
          "type": {
            "name": "java.nio.channels.CompletionHandler",
            "parameters": [
              {
                "name": "java.lang.Integer",
                "type": "Class"
              },
              {
                "lowerBounds": [
                  {
                    "name": "A",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "handler"
          }
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "write",
      "comment": "Writes a sequence of bytes to this channel from the given buffer, starting at the given file position. This method works in the same manner as the AsynchronousByteChannel.write(ByteBuffer,Object,CompletionHandler) method, except that bytes are written starting at the given file position. If the given position is greater than the file\u0027s size, at the time that the write is attempted, then the file will be grown to accommodate the new bytes; the values of any bytes between the previous end-of-file and the newly-written bytes are unspecified.",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - The type of the attachment"
        ],
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The buffer from which bytes are to be transferred",
          "\u003ccode\u003eposition\u003c/code\u003e - The file position at which the transfer is to begin; must be non-negative",
          "\u003ccode\u003eattachment\u003c/code\u003e - The object to attach to the I/O operation; can be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003ehandler\u003c/code\u003e - The handler for consuming the result"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the position is negative",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonWritableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonWritableChannelException\u003c/a\u003e\u003c/code\u003e - If this channel was not opened for writing"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.concurrent.Future",
        "parameters": [
          {
            "name": "java.lang.Integer",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "position"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "write",
      "comment": "Writes a sequence of bytes to this channel from the given buffer, starting at the given file position. This method initiates the writing of a sequence of bytes to this channel from the given buffer, starting at the given file position. The method returns a Future representing the pending result of the write operation. The Future\u0027s get method returns the number of bytes written. This method works in the same manner as the AsynchronousByteChannel.write(ByteBuffer) method, except that bytes are written starting at the given file position. If the given position is greater than the file\u0027s size, at the time that the write is attempted, then the file will be grown to accommodate the new bytes; the values of any bytes between the previous end-of-file and the newly-written bytes are unspecified.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The buffer from which bytes are to be transferred",
          "\u003ccode\u003eposition\u003c/code\u003e - The file position at which the transfer is to begin; must be non-negative"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the position is negative",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/NonWritableChannelException.html\" title\u003d\"class in java.nio.channels\"\u003eNonWritableChannelException\u003c/a\u003e\u003c/code\u003e - If this channel was not opened for writing"
        ],
        "return": [
          "A \n\u003ccode\u003eFuture\u003c/code\u003e object representing the pending result"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initializes a new instance of this class.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.channels.AsynchronousFileChannel",
  "comment": "An asynchronous channel for reading, writing, and manipulating a file. \n\u003cp\u003e An asynchronous file channel is created when a file is opened by invoking one of the \u003ca href\u003d\"#open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute...)\"\u003e\u003ccode\u003eopen\u003c/code\u003e\u003c/a\u003e methods defined by this class. The file contains a variable-length sequence of bytes that can be read and written and whose current size can be \u003ca href\u003d\"#size()\"\u003e\u003ccode\u003equeried\u003c/code\u003e\u003c/a\u003e. The size of the file increases when bytes are written beyond its current size; the size of the file decreases when it is \u003ca href\u003d\"#truncate(long)\"\u003e\u003ccode\u003etruncated\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e An asynchronous file channel does not have a \u003ci\u003ecurrent position\u003c/i\u003e within the file. Instead, the file position is specified to each read and write method that initiates asynchronous operations. A \u003ca href\u003d\"CompletionHandler.html\" title\u003d\"interface in java.nio.channels\"\u003e\u003ccode\u003eCompletionHandler\u003c/code\u003e\u003c/a\u003e is specified as a parameter and is invoked to consume the result of the I/O operation. This class also defines read and write methods that initiate asynchronous operations, returning a \u003ca href\u003d\"../../util/concurrent/Future.html\" title\u003d\"interface in java.util.concurrent\"\u003e\u003ccode\u003eFuture\u003c/code\u003e\u003c/a\u003e to represent the pending result of the operation. The \u003ccode\u003eFuture\u003c/code\u003e may be used to check if the operation has completed, wait for its completion, and retrieve the result. \u003c/p\u003e\n\u003cp\u003e In addition to read and write operations, this class defines the following operations: \u003c/p\u003e \n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e Updates made to a file may be \u003ca href\u003d\"#force(boolean)\"\u003e\u003ccode\u003e\u003ci\u003eforced out\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e to the underlying storage device, ensuring that data are not lost in the event of a system crash. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e A region of a file may be \u003ca href\u003d\"#lock(long,long,boolean,A,java.nio.channels.CompletionHandler)\"\u003e\u003ccode\u003e\u003ci\u003elocked\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e against access by other programs. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e An \u003ccode\u003eAsynchronousFileChannel\u003c/code\u003e is associated with a thread pool to which tasks are submitted to handle I/O events and dispatch to completion handlers that consume the results of I/O operations on the channel. The completion handler for an I/O operation initiated on a channel is guaranteed to be invoked by one of the threads in the thread pool (This ensures that the completion handler is run by a thread with the expected \u003cem\u003eidentity\u003c/em\u003e). Where an I/O operation completes immediately, and the initiating thread is itself a thread in the thread pool, then the completion handler may be invoked directly by the initiating thread. When an \u003ccode\u003eAsynchronousFileChannel\u003c/code\u003e is created without specifying a thread pool then the channel is associated with a system-dependent default thread pool that may be shared with other channels. The default thread pool is configured by the system properties defined by the \u003ca href\u003d\"AsynchronousChannelGroup.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eAsynchronousChannelGroup\u003c/code\u003e\u003c/a\u003e class. \u003c/p\u003e\n\u003cp\u003e Channels of this type are safe for use by multiple concurrent threads. The \u003ca href\u003d\"Channel.html#close()\"\u003e\u003ccode\u003eclose\u003c/code\u003e\u003c/a\u003e method may be invoked at any time, as specified by the \u003ca href\u003d\"Channel.html\" title\u003d\"interface in java.nio.channels\"\u003e\u003ccode\u003eChannel\u003c/code\u003e\u003c/a\u003e interface. This causes all outstanding asynchronous operations on the channel to complete with the exception \u003ca href\u003d\"AsynchronousCloseException.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eAsynchronousCloseException\u003c/code\u003e\u003c/a\u003e. Multiple read and write operations may be outstanding at the same time. When multiple read and write operations are outstanding then the ordering of the I/O operations, and the order that the completion handlers are invoked, is not specified; they are not, in particular, guaranteed to execute in the order that the operations were initiated. The \u003ca href\u003d\"../ByteBuffer.html\" title\u003d\"class in java.nio\"\u003e\u003ccode\u003eByteBuffers\u003c/code\u003e\u003c/a\u003e used when reading or writing are not safe for use by multiple concurrent I/O operations. Furthermore, after an I/O operation is initiated then care should be taken to ensure that the buffer is not accessed until after the operation has completed. \u003c/p\u003e\n\u003cp\u003e As with \u003ca href\u003d\"FileChannel.html\" title\u003d\"class in java.nio.channels\"\u003e\u003ccode\u003eFileChannel\u003c/code\u003e\u003c/a\u003e, the view of a file provided by an instance of this class is guaranteed to be consistent with other views of the same file provided by other instances in the same program. The view provided by an instance of this class may or may not, however, be consistent with the views seen by other concurrently-running programs due to caching performed by the underlying operating system and delays induced by network-filesystem protocols. This is true regardless of the language in which these other programs are written, and whether they are running on the same machine or on some other machine. The exact nature of any such inconsistencies are system-dependent and are therefore unspecified.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}