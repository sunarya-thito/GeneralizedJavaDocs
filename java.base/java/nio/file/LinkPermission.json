{
  "packageName": "java.nio.file",
  "simpleName": "LinkPermission",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.security.BasicPermission",
    "type": "Class"
  },
  "members": [
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a LinkPermission with the specified name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the permission. It must be \"hard\" or \"symbolic\"."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if name is empty or invalid"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "actions",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a LinkPermission with the specified name.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the permission; must be \"hard\" or \"symbolic\".",
          "\u003ccode\u003eactions\u003c/code\u003e - the actions for the permission; must be the empty string or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if name is empty or invalid, or actions is a non-empty string"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.nio.file.LinkPermission",
  "comment": "The \n\u003ccode\u003ePermission\u003c/code\u003e class for link creation operations. \n\u003cp\u003e The following table provides a summary description of what the permission allows, and discusses the risks of granting code the permission. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  Table shows permission target name, what the permission allows, and associated risks\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003ePermission Target Name\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eWhat the Permission Allows\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eRisks of Allowing this Permission\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ehard\u003c/th\u003e \n   \u003ctd\u003e Ability to add an existing file to a directory. This is sometimes known as creating a link, or hard link. \u003c/td\u003e \n   \u003ctd\u003e Extreme care should be taken when granting this permission. It allows linking to any file or directory in the file system thus allowing the attacker access to all files. \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esymbolic\u003c/th\u003e \n   \u003ctd\u003e Ability to create symbolic links. \u003c/td\u003e \n   \u003ctd\u003e Extreme care should be taken when granting this permission. It allows linking to any file or directory in the file system thus allowing the attacker to access to all files. \u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#createLink(java.nio.file.Path,java.nio.file.Path)\"\u003e\u003ccode\u003eFiles.createLink(java.nio.file.Path, java.nio.file.Path)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute...)\"\u003e\u003ccode\u003eFiles.createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute\u0026lt;?\u0026gt;...)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.nio.file.LinkPermission\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.7"
    ]
  }
}