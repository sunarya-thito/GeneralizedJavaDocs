{
  "packageName": "java.nio.file",
  "simpleName": "FileSystem",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.file.spi.FileSystemProvider",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "provider",
      "comment": "Returns the provider that created this file system.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The provider that created this file system."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "close",
      "comment": "Closes this file system. After a file system is closed then all subsequent access to the file system, either by methods defined by this class or on objects associated with this file system, throw ClosedFileSystemException. If the file system is already closed then invoking this method has no effect. Closing a file system will close all open channels, directory-streams, watch-service, and other closeable objects associated with this file system. The default file system cannot be closed.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html\" title\u003d\"interface in java.io\"\u003eCloseable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - Thrown in the case of the default file system"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isOpen",
      "comment": "Tells whether or not this file system is open. File systems created by the default provider are always open.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this file system is open"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isReadOnly",
      "comment": "Tells whether or not this file system allows only read-only access to its file stores.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this file system provides read-only access"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSeparator",
      "comment": "Returns the name separator, represented as a string. The name separator is used to separate names in a path string. An implementation may support multiple name separators in which case this method returns an implementation specific default name separator. This separator is used when creating path strings by invoking the toString() method. In the case of the default provider, this method returns the same separator as File.separator.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The name separator"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Iterable",
        "parameters": [
          {
            "name": "java.nio.file.Path",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getRootDirectories",
      "comment": "Returns an object to iterate over the paths of the root directories. A file system provides access to a file store that may be composed of a number of distinct file hierarchies, each with its own top-level root directory. Unless denied by the security manager, each element in the returned iterator corresponds to the root directory of a distinct file hierarchy. The order of the elements is not defined. The file hierarchies may change during the lifetime of the Java virtual machine. For example, in some implementations, the insertion of removable media may result in the creation of a new file hierarchy with its own top-level directory. When a security manager is installed, it is invoked to check access to the each root directory. If denied, the root directory is not returned by the iterator. In the case of the default provider, the SecurityManager.checkRead(String) method is invoked to check read access to each root directory. It is system dependent if the permission checks are done when the iterator is obtained or during iteration.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An object to iterate over the root directories"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Iterable",
        "parameters": [
          {
            "name": "java.nio.file.FileStore",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFileStores",
      "comment": "Returns an object to iterate over the underlying file stores. The elements of the returned iterator are the FileStores for this file system. The order of the elements is not defined and the file stores may change during the lifetime of the Java virtual machine. When an I/O error occurs, perhaps because a file store is not accessible, then it is not returned by the iterator. In the case of the default provider, and a security manager is installed, the security manager is invoked to check RuntimePermission(\"getFileStoreAttributes\"). If denied, then no file stores are returned by the iterator. In addition, the security manager\u0027s SecurityManager.checkRead(String) method is invoked to check read access to the file store\u0027s top-most directory. If denied, the file store is not returned by the iterator. It is system dependent if the permission checks are done when the iterator is obtained or during iteration. Usage Example: Suppose we want to print the space usage for all file stores:      for (FileStore store: FileSystems.getDefault().getFileStores()) {\n         long total \u003d store.getTotalSpace() / 1024;\n         long used \u003d (store.getTotalSpace() - store.getUnallocatedSpace()) / 1024;\n         long avail \u003d store.getUsableSpace() / 1024;\n         System.out.format(\"%-20s %12d %12d %12d%n\", store, total, used, avail);\n     }",
      "annotations": [],
      "tagMap": {
        "return": [
          "An object to iterate over the backing file stores"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "supportedFileAttributeViews",
      "comment": "Returns the set of the names of the file attribute views supported by this FileSystem. The BasicFileAttributeView is required to be supported and therefore the set contains at least one element, \"basic\". The supportsFileAttributeView(String) method may be used to test if an underlying FileStore supports the file attributes identified by a file attribute view.",
      "annotations": [],
      "tagMap": {
        "return": [
          "An unmodifiable set of the names of the supported file attribute views"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPath",
      "comment": "Converts a path string, or a sequence of strings that when joined form a path string, to a Path. If more does not specify any elements then the value of the first parameter is the path string to convert. If more specifies one or more elements then each non-empty string, including first, is considered to be a sequence of name elements (see Path) and is joined to form a path string. The details as to how the Strings are joined is provider specific but typically they will be joined using the name-separator as the separator. For example, if the name separator is \"/\" and getPath(\"/foo\",\"bar\",\"gus\") is invoked, then the path string \"/foo/bar/gus\" is converted to a Path. A Path representing an empty path is returned if first is the empty string and more does not contain any non-empty strings. The parsing and conversion to a path object is inherently implementation dependent. In the simplest case, the path string is rejected, and InvalidPathException thrown, if the path string contains characters that cannot be converted to characters that are legal to the file store. For example, on UNIX systems, the NUL (\\u0000) character is not allowed to be present in a path. An implementation may choose to reject path strings that contain names that are longer than those allowed by any file store, and where an implementation supports a complex path syntax, it may choose to reject path strings that are badly formed. In the case of the default provider, path strings are parsed based on the definition of paths at the platform or virtual file system level. For example, an operating system may not allow specific characters to be present in a file name, but a specific underlying file store may impose different or additional restrictions on the set of legal characters. This method throws InvalidPathException when the path string cannot be converted to a path. Where possible, and where applicable, the exception is created with an index value indicating the first position in the path parameter that caused the path string to be rejected.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efirst\u003c/code\u003e - the path string or initial part of the path string",
          "\u003ccode\u003emore\u003c/code\u003e - additional strings to be joined to form the path string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/InvalidPathException.html\" title\u003d\"class in java.nio.file\"\u003eInvalidPathException\u003c/a\u003e\u003c/code\u003e - If the path string cannot be converted"
        ],
        "return": [
          "the resulting \n\u003ccode\u003ePath\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.PathMatcher",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getPathMatcher",
      "comment": "Returns a PathMatcher that performs match operations on the String representation of Path objects by interpreting a given pattern. The syntaxAndPattern parameter identifies the syntax and the pattern and takes the form:  syntax:pattern\n where \u0027:\u0027 stands for itself. A FileSystem implementation supports the \"glob\" and \"regex\" syntaxes, and may support others. The value of the syntax component is compared without regard to case. When the syntax is \"glob\" then the String representation of the path is matched using a limited pattern language that resembles regular expressions but with a simpler syntax. For example: Pattern Language Example Description *.java Matches a path that represents a file name ending in .java *.* Matches file names containing a dot *.{java,class} Matches file names ending with .java or .class foo.? Matches file names starting with foo. and a single character extension /home/*/* Matches /home/gus/data on UNIX platforms /home/** Matches /home/gus and /home/gus/data on UNIX platforms C:\\\\* Matches C:\\foo and C:\\bar on the Windows platform (note that the backslash is escaped; as a string literal in the Java Language the pattern would be \"C:\\\\\\\\*\") The following rules are used to interpret glob patterns: The * character matches zero or more characters of a name component without crossing directory boundaries. The ** characters matches zero or more characters crossing directory boundaries. The ? character matches exactly one character of a name component. The backslash character (\\) is used to escape characters that would otherwise be interpreted as special characters. The expression \\\\ matches a single backslash and \"\\{\" matches a left brace for example. The [ ] characters are a bracket expression that match a single character of a name component out of a set of characters. For example, [abc] matches \"a\", \"b\", or \"c\". The hyphen (-) may be used to specify a range so [a-z] specifies a range that matches from \"a\" to \"z\" (inclusive). These forms can be mixed so [abce-g] matches \"a\", \"b\", \"c\", \"e\", \"f\" or \"g\". If the character after the [ is a ! then it is used for negation so [!a-c] matches any character except \"a\", \"b\", or \"c\". Within a bracket expression the *, ? and \\ characters match themselves. The (-) character matches itself if it is the first character within the brackets, or the first character after the ! if negating. The { } characters are a group of subpatterns, where the group matches if any subpattern in the group matches. The \",\" character is used to separate the subpatterns. Groups cannot be nested. Leading period/dot characters in file name are treated as regular characters in match operations. For example, the \"*\" glob pattern matches file name \".login\". The Files.isHidden(java.nio.file.Path) method may be used to test whether a file is considered hidden. All other characters match themselves in an implementation dependent manner. This includes characters representing any name-separators. The matching of root components is highly implementation-dependent and is not specified. When the syntax is \"regex\" then the pattern component is a regular expression as defined by the Pattern class. For both the glob and regex syntaxes, the matching details, such as whether the matching is case sensitive, are implementation-dependent and therefore not specified.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path,java.lang.String)\"\u003e\u003ccode\u003eFiles.newDirectoryStream(Path,String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esyntaxAndPattern\u003c/code\u003e - The syntax and pattern"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the parameter does not take the form: \n\u003ccode\u003esyntax:pattern\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/PatternSyntaxException.html\" title\u003d\"class in java.util.regex\"\u003ePatternSyntaxException\u003c/a\u003e\u003c/code\u003e - If the pattern is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If the pattern syntax is not known to the implementation"
        ],
        "return": [
          "A path matcher that may be used to match paths against the pattern"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.attribute.UserPrincipalLookupService",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getUserPrincipalLookupService",
      "comment": "Returns the UserPrincipalLookupService for this file system (optional operation). The resulting lookup service may be used to lookup user or group names. Usage Example: Suppose we want to make \"joe\" the owner of a file:      UserPrincipalLookupService lookupService \u003d FileSystems.getDefault().getUserPrincipalLookupService();\n     Files.setOwner(path, lookupService.lookupPrincipalByName(\"joe\"));",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this \n\u003ccode\u003eFileSystem\u003c/code\u003e does not does have a lookup service"
        ],
        "return": [
          "The \n\u003ccode\u003eUserPrincipalLookupService\u003c/code\u003e for this file system"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.WatchService",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "newWatchService",
      "comment": "Constructs a new WatchService (optional operation). This method constructs a new watch service that may be used to watch registered objects for changes and events.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this \n\u003ccode\u003eFileSystem\u003c/code\u003e does not support watching file system objects for changes and events. This exception is not thrown by \n\u003ccode\u003eFileSystems\u003c/code\u003e created by the default provider.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ],
        "return": [
          "a new watch service"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initializes a new instance of this class.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.file.FileSystem",
  "comment": "Provides an interface to a file system and is the factory for objects to access files and other objects in the file system. \n\u003cp\u003e The default file system, obtained by invoking the \u003ca href\u003d\"FileSystems.html#getDefault()\"\u003e\u003ccode\u003eFileSystems.getDefault\u003c/code\u003e\u003c/a\u003e method, provides access to the file system that is accessible to the Java virtual machine. The \u003ca href\u003d\"FileSystems.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003eFileSystems\u003c/code\u003e\u003c/a\u003e class defines methods to create file systems that provide access to other types of (custom) file systems. \u003c/p\u003e\n\u003cp\u003e A file system is the factory for several types of objects: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e The \u003ca href\u003d\"#getPath(java.lang.String,java.lang.String...)\"\u003e\u003ccode\u003egetPath\u003c/code\u003e\u003c/a\u003e method converts a system dependent \u003cem\u003epath string\u003c/em\u003e, returning a \u003ca href\u003d\"Path.html\" title\u003d\"interface in java.nio.file\"\u003e\u003ccode\u003ePath\u003c/code\u003e\u003c/a\u003e object that may be used to locate and access a file. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The \u003ca href\u003d\"#getPathMatcher(java.lang.String)\"\u003e\u003ccode\u003egetPathMatcher\u003c/code\u003e\u003c/a\u003e method is used to create a \u003ca href\u003d\"PathMatcher.html\" title\u003d\"interface in java.nio.file\"\u003e\u003ccode\u003ePathMatcher\u003c/code\u003e\u003c/a\u003e that performs match operations on paths. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The \u003ca href\u003d\"#getFileStores()\"\u003e\u003ccode\u003egetFileStores\u003c/code\u003e\u003c/a\u003e method returns an iterator over the underlying \u003ca href\u003d\"FileStore.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003efile-stores\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The \u003ca href\u003d\"#getUserPrincipalLookupService()\"\u003e\u003ccode\u003egetUserPrincipalLookupService\u003c/code\u003e\u003c/a\u003e method returns the \u003ca href\u003d\"attribute/UserPrincipalLookupService.html\" title\u003d\"class in java.nio.file.attribute\"\u003e\u003ccode\u003eUserPrincipalLookupService\u003c/code\u003e\u003c/a\u003e to lookup users or groups by name. \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e The \u003ca href\u003d\"#newWatchService()\"\u003e\u003ccode\u003enewWatchService\u003c/code\u003e\u003c/a\u003e method creates a \u003ca href\u003d\"WatchService.html\" title\u003d\"interface in java.nio.file\"\u003e\u003ccode\u003eWatchService\u003c/code\u003e\u003c/a\u003e that may be used to watch objects for changes and events. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e File systems vary greatly. In some cases the file system is a single hierarchy of files with one top-level root directory. In other cases it may have several distinct file hierarchies, each with its own top-level root directory. The \u003ca href\u003d\"#getRootDirectories()\"\u003e\u003ccode\u003egetRootDirectories\u003c/code\u003e\u003c/a\u003e method may be used to iterate over the root directories in the file system. A file system is typically composed of one or more underlying \u003ca href\u003d\"FileStore.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003efile-stores\u003c/code\u003e\u003c/a\u003e that provide the storage for the files. Theses file stores can also vary in the features they support, and the file attributes or \u003cem\u003emeta-data\u003c/em\u003e that they associate with files. \u003c/p\u003e\n\u003cp\u003e A file system is open upon creation and can be closed by invoking its \u003ca href\u003d\"#close()\"\u003e\u003ccode\u003eclose\u003c/code\u003e\u003c/a\u003e method. Once closed, any further attempt to access objects in the file system cause \u003ca href\u003d\"ClosedFileSystemException.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003eClosedFileSystemException\u003c/code\u003e\u003c/a\u003e to be thrown. File systems created by the default \u003ca href\u003d\"spi/FileSystemProvider.html\" title\u003d\"class in java.nio.file.spi\"\u003e\u003ccode\u003eprovider\u003c/code\u003e\u003c/a\u003e cannot be closed. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eFileSystem\u003c/code\u003e can provide read-only or read-write access to the file system. Whether or not a file system provides read-only access is established when the \u003ccode\u003eFileSystem\u003c/code\u003e is created and can be tested by invoking its \u003ca href\u003d\"#isReadOnly()\"\u003e\u003ccode\u003eisReadOnly\u003c/code\u003e\u003c/a\u003e method. Attempts to write to file stores by means of an object associated with a read-only file system throws \u003ca href\u003d\"ReadOnlyFileSystemException.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003eReadOnlyFileSystemException\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e File systems are safe for use by multiple concurrent threads. The \u003ca href\u003d\"#close()\"\u003e\u003ccode\u003eclose\u003c/code\u003e\u003c/a\u003e method may be invoked at any time to close a file system but whether a file system is \u003ci\u003easynchronously closeable\u003c/i\u003e is provider specific and therefore unspecified. In other words, if a thread is accessing an object in a file system, and another thread invokes the \u003ccode\u003eclose\u003c/code\u003e method then it may require to block until the first operation is complete. Closing a file system causes all open channels, watch services, and other \u003ca href\u003d\"../../io/Closeable.html\" title\u003d\"interface in java.io\"\u003e\u003ccode\u003ecloseable\u003c/code\u003e\u003c/a\u003e objects associated with the file system to be closed.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}