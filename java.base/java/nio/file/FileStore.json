{
  "packageName": "java.nio.file",
  "simpleName": "FileStore",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "name",
      "comment": "Returns the name of this file store. The format of the name is highly implementation specific. It will typically be the name of the storage pool or volume. The string returned by this method may differ from the string returned by the toString method.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the name of this file store"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "type",
      "comment": "Returns the type of this file store. The format of the string returned by this method is highly implementation specific. It may indicate, for example, the format used or if the file store is local or remote.",
      "annotations": [],
      "tagMap": {
        "return": [
          "a string representing the type of this file store"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isReadOnly",
      "comment": "Tells whether this file store is read-only. A file store is read-only if it does not support write operations or other changes to files. Any attempt to create a file, open an existing file for writing etc. causes an IOException to be thrown.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this file store is read-only"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTotalSpace",
      "comment": "Returns the size, in bytes, of the file store. If the total number of bytes in the file store is greater than Long.MAX_VALUE, then Long.MAX_VALUE will be returned.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "the size of the file store, in bytes"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getUsableSpace",
      "comment": "Returns the number of bytes available to this Java virtual machine on the file store. If the number of bytes available is greater than Long.MAX_VALUE, then Long.MAX_VALUE will be returned. The returned number of available bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes. The number of usable bytes is most likely to be accurate immediately after the space attributes are obtained. It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this Java virtual machine.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "the number of bytes available"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getUnallocatedSpace",
      "comment": "Returns the number of unallocated bytes in the file store. If the number of unallocated bytes is greater than Long.MAX_VALUE, then Long.MAX_VALUE will be returned. The returned number of unallocated bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes. The number of unallocated bytes is most likely to be accurate immediately after the space attributes are obtained. It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this virtual machine.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "the number of unallocated bytes"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBlockSize",
      "comment": "Returns the number of bytes per block in this file store. File storage is typically organized into discrete sequences of bytes called blocks. A block is the smallest storage unit of a file store. Every read and write operation is performed on a multiple of blocks.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The implementation in this class throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the operation is not supported"
        ],
        "return": [
          "a positive value representing the block size of this file store, in bytes"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.nio.file.attribute.FileAttributeView",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "supportsFileAttributeView",
      "comment": "Tells whether or not this file store supports the file attributes identified by the given file attribute view. Invoking this method to test if the file store supports BasicFileAttributeView will always return true. In the case of the default provider, this method cannot guarantee to give the correct result when the file store is not a local storage device. The reasons for this are implementation specific and therefore unspecified.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the file attribute view type"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, the file attribute view is supported"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "supportsFileAttributeView",
      "comment": "Tells whether or not this file store supports the file attributes identified by the given file attribute view. Invoking this method to test if the file store supports BasicFileAttributeView, identified by the name \"basic\" will always return true. In the case of the default provider, this method cannot guarantee to give the correct result when the file store is not a local storage device. The reasons for this are implementation specific and therefore unspecified.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/attribute/AttributeView.html#name()\"\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/a\u003e of file attribute view"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, the file attribute view is supported"
        ]
      }
    },
    {
      "returnType": {
        "name": "V",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "genericParameters": [
        {
          "name": "V",
          "upperBounds": [
            {
              "name": "java.nio.file.attribute.FileStoreAttributeView",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFileStoreAttributeView",
      "comment": "Returns a FileStoreAttributeView of the given type. This method is intended to be used where the file store attribute view defines type-safe methods to read or update the file store attributes. The type parameter is the type of the attribute view required and the method returns an instance of that type if supported.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eV\u003c/code\u003e - The \n\u003ccode\u003eFileStoreAttributeView\u003c/code\u003e type"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object corresponding to the attribute view"
        ],
        "return": [
          "a file store attribute view of the specified type or \n\u003ccode\u003enull\u003c/code\u003e if the attribute view is not available"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "attribute",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getAttribute",
      "comment": "Reads the value of a file store attribute. The attribute parameter identifies the attribute to be read and takes the form: view-name:attribute-name where the character \u0027:\u0027 stands for itself. view-name is the name of a AttributeView that identifies a set of file attributes. attribute-name is the name of the attribute. Usage Example: Suppose we want to know if ZFS compression is enabled (assuming the \"zfs\" view is supported):     boolean compression \u003d (Boolean)fs.getAttribute(\"zfs:compression\");",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eattribute\u003c/code\u003e - the attribute to read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the attribute view is not available or it does not support reading the attribute",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "the attribute value; \n\u003ccode\u003enull\u003c/code\u003e may be valid for some attributes"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Initializes a new instance of this class.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.file.FileStore",
  "comment": "Storage for files. A \n\u003ccode\u003eFileStore\u003c/code\u003e represents a storage pool, device, partition, volume, concrete file system or other implementation specific means of file storage. The \n\u003ccode\u003eFileStore\u003c/code\u003e for where a file is stored is obtained by invoking the \n\u003ca href\u003d\"Files.html#getFileStore(java.nio.file.Path)\"\u003e\u003ccode\u003egetFileStore\u003c/code\u003e\u003c/a\u003e method, or all file stores can be enumerated by invoking the \n\u003ca href\u003d\"FileSystem.html#getFileStores()\"\u003e\u003ccode\u003egetFileStores\u003c/code\u003e\u003c/a\u003e method. \n\u003cp\u003e In addition to the methods defined by this class, a file store may support one or more \u003ca href\u003d\"attribute/FileStoreAttributeView.html\" title\u003d\"interface in java.nio.file.attribute\"\u003e\u003ccode\u003eFileStoreAttributeView\u003c/code\u003e\u003c/a\u003e classes that provide a read-only or updatable view of a set of file store attributes.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}