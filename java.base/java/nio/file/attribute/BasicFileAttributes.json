{
  "packageName": "java.nio.file.attribute",
  "simpleName": "BasicFileAttributes",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.file.attribute.FileTime",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lastModifiedTime",
      "comment": "Returns the time of last modification. If the file system implementation does not support a time stamp to indicate the time of last modification then this method returns an implementation specific default value, typically a FileTime representing the epoch (1970-01-01T00:00:00Z).",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eFileTime\u003c/code\u003e representing the time the file was last modified"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.attribute.FileTime",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "lastAccessTime",
      "comment": "Returns the time of last access. If the file system implementation does not support a time stamp to indicate the time of last access then this method returns an implementation specific default value, typically the last-modified-time or a FileTime representing the epoch (1970-01-01T00:00:00Z).",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eFileTime\u003c/code\u003e representing the time of last access"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.attribute.FileTime",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "creationTime",
      "comment": "Returns the creation time. The creation time is the time that the file was created. If the file system implementation does not support a time stamp to indicate the time when the file was created then this method returns an implementation specific default value, typically the last-modified-time or a FileTime representing the epoch (1970-01-01T00:00:00Z).",
      "annotations": [],
      "tagMap": {
        "return": [
          "a \n\u003ccode\u003eFileTime\u003c/code\u003e representing the time the file was created"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isRegularFile",
      "comment": "Tells whether the file is a regular file with opaque content.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file is a regular file with opaque content"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isDirectory",
      "comment": "Tells whether the file is a directory.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file is a directory"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isSymbolicLink",
      "comment": "Tells whether the file is a symbolic link.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file is a symbolic link"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "isOther",
      "comment": "Tells whether the file is something other than a regular file, directory, or symbolic link.",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file something other than a regular file, directory or symbolic link"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "size",
      "comment": "Returns the size of the file (in bytes). The size may differ from the actual size on the file system due to compression, support for sparse files, or other reasons. The size of files that are not regular files is implementation specific and therefore unspecified.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the file size, in bytes"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "fileKey",
      "comment": "Returns an object that uniquely identifies the given file, or null if a file key is not available. On some platforms or file systems it is possible to use an identifier, or a combination of identifiers to uniquely identify a file. Such identifiers are important for operations such as file tree traversal in file systems that support symbolic links or file systems that allow a file to be an entry in more than one directory. On UNIX file systems, for example, the device ID and inode are commonly used for such purposes. The file key returned by this method can only be guaranteed to be unique if the file system and files remain static. Whether a file system re-uses identifiers after a file is deleted is implementation dependent and therefore unspecified. File keys returned by this method can be compared for equality and are suitable for use in collections. If the file system and files remain static, and two files are the same with non-null file keys, then their file keys are equal.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)\"\u003e\u003ccode\u003eFiles.walkFileTree(java.nio.file.Path, java.util.Set\u0026lt;java.nio.file.FileVisitOption\u0026gt;, int, java.nio.file.FileVisitor\u0026lt;? super java.nio.file.Path\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an object that uniquely identifies the given file, or \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.nio.file.attribute.BasicFileAttributes",
  "comment": "Basic attributes associated with a file in a file system. \n\u003cp\u003e Basic file attributes are attributes that are common to many file systems and consist of mandatory and optional file attributes as defined by this interface. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eUsage Example:\u003c/b\u003e \u003c/p\u003e\n\u003cpre\u003e    Path file \u003d ...\n    BasicFileAttributes attrs \u003d Files.readAttributes(file, BasicFileAttributes.class);\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/attribute/BasicFileAttributeView.html\" title\u003d\"interface in java.nio.file.attribute\"\u003e\u003ccode\u003eBasicFileAttributeView\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.7"
    ]
  }
}