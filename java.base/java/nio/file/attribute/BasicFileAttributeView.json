{
  "packageName": "java.nio.file.attribute",
  "simpleName": "BasicFileAttributeView",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.nio.file.attribute.FileAttributeView",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "name",
      "comment": "Returns the name of the attribute view. Attribute views of this type have the name \"basic\".",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/attribute/AttributeView.html#name()\"\u003ename\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/attribute/AttributeView.html\" title\u003d\"interface in java.nio.file.attribute\"\u003eAttributeView\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the name of the attribute view"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.attribute.BasicFileAttributes",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "readAttributes",
      "comment": "Reads the basic file attributes as a bulk operation. It is implementation specific if all file attributes are read as an atomic operation with respect to other file system operations.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file"
        ],
        "return": [
          "the file attributes"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.file.attribute.FileTime",
            "type": "Class"
          },
          "name": "lastModifiedTime",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.file.attribute.FileTime",
            "type": "Class"
          },
          "name": "lastAccessTime",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.file.attribute.FileTime",
            "type": "Class"
          },
          "name": "createTime",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "setTimes",
      "comment": "Updates any or all of the file\u0027s last modified time, last access time, and create time attributes. This method updates the file\u0027s timestamp attributes. The values are converted to the epoch and precision supported by the file system. Converting from finer to coarser granularities result in precision loss. The behavior of this method when attempting to set a timestamp that is not supported or to a value that is outside the range supported by the underlying file store is not defined. It may or not fail by throwing an IOException. If any of the lastModifiedTime, lastAccessTime, or createTime parameters has the value null then the corresponding timestamp is not changed. An implementation may require to read the existing values of the file attributes when only some, but not all, of the timestamp attributes are updated. Consequently, this method may not be an atomic operation with respect to other file system operations. Reading and re-writing existing values may also result in precision loss. If all of the lastModifiedTime, lastAccessTime and createTime parameters are null then this method has no effect. Usage Example: Suppose we want to change a file\u0027s last access time.     Path path \u003d ...\n    FileTime time \u003d ...\n    Files.getFileAttributeView(path, BasicFileAttributeView.class).setTimes(null, time, null);",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#setLastModifiedTime(java.nio.file.Path,java.nio.file.attribute.FileTime)\"\u003e\u003ccode\u003eFiles.setLastModifiedTime(java.nio.file.Path, java.nio.file.attribute.FileTime)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elastModifiedTime\u003c/code\u003e - the new last modified time, or \n\u003ccode\u003enull\u003c/code\u003e to not change the value",
          "\u003ccode\u003elastAccessTime\u003c/code\u003e - the last access time, or \n\u003ccode\u003enull\u003c/code\u003e to not change the value",
          "\u003ccode\u003ecreateTime\u003c/code\u003e - the file\u0027s create time, or \n\u003ccode\u003enull\u003c/code\u003e to not change the value"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.nio.file.attribute.BasicFileAttributeView",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}