{
  "packageName": "java.nio.file.attribute",
  "simpleName": "FileTime",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.file.attribute.FileTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Returns a FileTime representing a value at the given unit of granularity.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value since the epoch (1970-01-01T00:00:00Z); can be negative",
          "\u003ccode\u003eunit\u003c/code\u003e - the unit of granularity to interpret the value"
        ],
        "return": [
          "a \n\u003ccode\u003eFileTime\u003c/code\u003e representing the given value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.attribute.FileTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "fromMillis",
      "comment": "Returns a FileTime representing the given value in milliseconds.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - the value, in milliseconds, since the epoch (1970-01-01T00:00:00Z); can be negative"
        ],
        "return": [
          "a \n\u003ccode\u003eFileTime\u003c/code\u003e representing the given value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.attribute.FileTime",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.time.Instant",
            "type": "Class"
          },
          "field": {
            "name": "instant"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "from",
      "comment": "Returns a FileTime representing the same point of time value on the time-line as the provided Instant object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einstant\u003c/code\u003e - the instant to convert"
        ],
        "return": [
          "a \n\u003ccode\u003eFileTime\u003c/code\u003e representing the same point on the time-line as the provided instant"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.concurrent.TimeUnit",
            "type": "Class"
          },
          "field": {
            "name": "unit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "to",
      "comment": "Returns the value at the given unit of granularity. Conversion from a coarser granularity that would numerically overflow saturate to Long.MIN_VALUE if negative or Long.MAX_VALUE if positive.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eunit\u003c/code\u003e - the unit of granularity for the return value"
        ],
        "return": [
          "value in the given unit of granularity, since the epoch since the epoch (1970-01-01T00:00:00Z); can be negative"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toMillis",
      "comment": "Returns the value in milliseconds. Conversion from a coarser granularity that would numerically overflow saturate to Long.MIN_VALUE if negative or Long.MAX_VALUE if positive.",
      "tagMap": {
        "return": [
          "the value in milliseconds, since the epoch (1970-01-01T00:00:00Z)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.time.Instant",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toInstant",
      "comment": "Converts this FileTime object to an Instant. The conversion creates an Instant that represents the same point on the time-line as this FileTime. FileTime can store points on the time-line further in the future and further in the past than Instant. Conversion from such further time points saturates to Instant.MIN if earlier than Instant.MIN or Instant.MAX if later than Instant.MAX.",
      "tagMap": {
        "return": [
          "an instant representing the same point on the time-line as this \n\u003ccode\u003eFileTime\u003c/code\u003e object"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Tests this FileTime for equality with the given object. The result is true if and only if the argument is not null and is a FileTime that represents the same time. This method satisfies the general contract of the Object.equals method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object to compare with"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, the given object is a \n\u003ccode\u003e FileTime\u003c/code\u003e that represents the same time"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Computes a hash code for this file time. The hash code is based upon the value represented, and satisfies the general contract of the Object.hashCode() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the hash-code value"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.attribute.FileTime",
            "type": "Class"
          },
          "field": {
            "name": "other"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares the value of two FileTime objects for order.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/attribute/FileTime.html\" title\u003d\"class in java.nio.file.attribute\"\u003eFileTime\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eother\u003c/code\u003e - the other \n\u003ccode\u003eFileTime\u003c/code\u003e to be compared"
        ],
        "return": [
          "\u003ccode\u003e0\u003c/code\u003e if this \n\u003ccode\u003eFileTime\u003c/code\u003e is equal to \n\u003ccode\u003eother\u003c/code\u003e, a value less than 0 if this \n\u003ccode\u003eFileTime\u003c/code\u003e represents a time that is before \n\u003ccode\u003eother\u003c/code\u003e, and a value greater than 0 if this \n\u003ccode\u003eFileTime\u003c/code\u003e represents a time that is after \n\u003ccode\u003eother\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the string representation of this FileTime. The string is returned in the ISO 8601 format:      YYYY-MM-DDThh:mm:ss[.s+]Z\n where \"[.s+]\" represents a dot followed by one of more digits for the decimal fraction of a second. It is only present when the decimal fraction of a second is not zero. For example, FileTime.fromMillis(1234567890000L).toString() yields \"2009-02-13T23:31:30Z\", and FileTime.fromMillis(1234567890123L).toString() yields \"2009-02-13T23:31:30.123Z\". A FileTime is primarily intended to represent the value of a file\u0027s time stamp. Where used to represent extreme values, where the year is less than \"0001\" or greater than \"9999\" then this method deviates from ISO 8601 in the same manner as the XML Schema language. That is, the year may be expanded to more than four digits and may be negative-signed. If more than four digits then leading zeros are not present. The year before \"0001\" is \"-0001\".",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string representation of this file time"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.nio.file.attribute.FileTime",
  "comment": "Represents the value of a file\u0027s time stamp attribute. For example, it may represent the time that the file was last \n\u003ca href\u003d\"BasicFileAttributes.html#lastModifiedTime()\"\u003e\u003ccode\u003emodified\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"BasicFileAttributes.html#lastAccessTime()\"\u003e\u003ccode\u003eaccessed\u003c/code\u003e\u003c/a\u003e, or \n\u003ca href\u003d\"BasicFileAttributes.html#creationTime()\"\u003e\u003ccode\u003ecreated\u003c/code\u003e\u003c/a\u003e. \n\u003cp\u003e Instances of this class are immutable.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#setLastModifiedTime(java.nio.file.Path,java.nio.file.attribute.FileTime)\"\u003e\u003ccode\u003eFiles.setLastModifiedTime(java.nio.file.Path, java.nio.file.attribute.FileTime)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption...)\"\u003e\u003ccode\u003eFiles.getLastModifiedTime(java.nio.file.Path, java.nio.file.LinkOption...)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.7"
    ]
  }
}