{
  "packageName": "java.nio.file",
  "simpleName": "Files",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.io.InputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newInputStream",
      "comment": "Opens a file, returning an input stream to read from the file. The stream will not be buffered, and is not required to support the mark or reset methods. The stream will be safe for access by multiple concurrent threads. Reading commences at the beginning of the file. Whether the returned stream is asynchronously closeable and/or interruptible is highly file system provider specific and therefore not specified. The options parameter determines how the file is opened. If no options are present then it is equivalent to opening the file with the READ option. In addition to the READ option, an implementation may also support additional implementation specific options.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to open",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the file is opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if an invalid combination of options is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an unsupported option is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "a new input stream"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.OutputStream",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newOutputStream",
      "comment": "Opens or creates a file, returning an output stream that may be used to write bytes to the file. The resulting stream will not be buffered. The stream will be safe for access by multiple concurrent threads. Whether the returned stream is asynchronously closeable and/or interruptible is highly file system provider specific and therefore not specified. This method opens or creates a file in exactly the manner specified by the newByteChannel method with the exception that the READ option may not be present in the array of options. If no options are present then this method works as if the CREATE, TRUNCATE_EXISTING, and WRITE options are present. In other words, it opens the file for writing, creating the file if it doesn\u0027t exist, or initially truncating an existing regular-file to a size of 0 if it exists. Usage Examples:      Path path \u003d ...\n\n     // truncate and overwrite an existing file, or create the file if\n     // it doesn\u0027t initially exist\n     OutputStream out \u003d Files.newOutputStream(path);\n\n     // append to an existing file, fail if the file does not exist\n     out \u003d Files.newOutputStream(path, APPEND);\n\n     // append to an existing file, create file if it doesn\u0027t initially exist\n     out \u003d Files.newOutputStream(path, CREATE, APPEND);\n\n     // always create new file, failing if it already exists\n     out \u003d Files.newOutputStream(path, CREATE_NEW);",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to open or create",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the file is opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoptions\u003c/code\u003e contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an unsupported option is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003echeckDelete\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access if the file is opened with the \n\u003ccode\u003eDELETE_ON_CLOSE\u003c/code\u003e option."
        ],
        "return": [
          "a new output stream"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.SeekableByteChannel",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.nio.file.OpenOption",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "options"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.FileAttribute",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newByteChannel",
      "comment": "Opens or creates a file, returning a seekable byte channel to access the file. The options parameter determines how the file is opened. The READ and WRITE options determine if the file should be opened for reading and/or writing. If neither option (or the APPEND option) is present then the file is opened for reading. By default reading or writing commence at the beginning of the file. In the addition to READ and WRITE, the following options may be present: Options Option Description APPEND If this option is present then the file is opened for writing and each invocation of the channel\u0027s write method first advances the position to the end of the file and then writes the requested data. Whether the advancement of the position and the writing of the data are done in a single atomic operation is system-dependent and therefore unspecified. This option may not be used in conjunction with the READ or TRUNCATE_EXISTING options. TRUNCATE_EXISTING If this option is present then the existing file is truncated to a size of 0 bytes. This option is ignored when the file is opened only for reading. CREATE_NEW If this option is present then a new file is created, failing if the file already exists or is a symbolic link. When creating a file the check for the existence of the file and the creation of the file if it does not exist is atomic with respect to other file system operations. This option is ignored when the file is opened only for reading. CREATE If this option is present then an existing file is opened if it exists, otherwise a new file is created. This option is ignored if the CREATE_NEW option is also present or the file is opened only for reading. DELETE_ON_CLOSE When this option is present then the implementation makes a best effort attempt to delete the file when closed by the close method. If the close method is not invoked then a best effort attempt is made to delete the file when the Java virtual machine terminates. SPARSE When creating a new file this option is a hint that the new file will be sparse. This option is ignored when not creating a new file. SYNC Requires that every update to the file\u0027s content or metadata be written synchronously to the underlying storage device. (see Synchronized I/O file integrity). DSYNC Requires that every update to the file\u0027s content be written synchronously to the underlying storage device. (see Synchronized I/O file integrity). An implementation may also support additional implementation specific options. The attrs parameter is optional file-attributes to set atomically when a new file is created. In the case of the default provider, the returned seekable byte channel is a FileChannel. Usage Examples: \n     Path path \u003d ...\n\n     // open file for reading\n     ReadableByteChannel rbc \u003d Files.newByteChannel(path, EnumSet.of(READ)));\n\n     // open file for writing to the end of an existing file, creating\n     // the file if it doesn\u0027t already exist\n     WritableByteChannel wbc \u003d Files.newByteChannel(path, EnumSet.of(CREATE,APPEND));\n\n     // create file with initial permissions, opening it for both reading and writing\n     FileAttribute\u003cSet\u003cPosixFilePermission\u003e\u003e perms \u003d ...\n     SeekableByteChannel sbc \u003d\n         Files.newByteChannel(path, EnumSet.of(CREATE_NEW,READ,WRITE), perms);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/FileChannel.html#open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute...)\"\u003e\u003ccode\u003eFileChannel.open(Path,Set,FileAttribute[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to open or create",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the file is opened",
          "\u003ccode\u003eattrs\u003c/code\u003e - an optional list of file attributes to set atomically when creating the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the set contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an unsupported open option is specified or the array contains attributes that cannot be set atomically when creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if a file of that name already exists and the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/StandardOpenOption.html#CREATE_NEW\"\u003e\u003ccode\u003eCREATE_NEW\u003c/code\u003e\u003c/a\u003e option is specified \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the path if the file is opened for reading. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the path if the file is opened for writing. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003echeckDelete\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access if the file is opened with the \n\u003ccode\u003eDELETE_ON_CLOSE\u003c/code\u003e option."
        ],
        "return": [
          "a new seekable byte channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.SeekableByteChannel",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newByteChannel",
      "comment": "Opens or creates a file, returning a seekable byte channel to access the file. This method opens or creates a file in exactly the manner specified by the newByteChannel method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/channels/FileChannel.html#open(java.nio.file.Path,java.nio.file.OpenOption...)\"\u003e\u003ccode\u003eFileChannel.open(Path,OpenOption[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to open or create",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the file is opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the set contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an unsupported open option is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if a file of that name already exists and the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/StandardOpenOption.html#CREATE_NEW\"\u003e\u003ccode\u003eCREATE_NEW\u003c/code\u003e\u003c/a\u003e option is specified \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the path if the file is opened for reading. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the path if the file is opened for writing. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003echeckDelete\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access if the file is opened with the \n\u003ccode\u003eDELETE_ON_CLOSE\u003c/code\u003e option."
        ],
        "return": [
          "a new seekable byte channel"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.DirectoryStream",
        "parameters": [
          {
            "name": "java.nio.file.Path",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newDirectoryStream",
      "comment": "Opens a directory, returning a DirectoryStream to iterate over all entries in the directory. The elements returned by the directory stream\u0027s iterator are of type Path, each one representing an entry in the directory. The Path objects are obtained as if by resolving the name of the directory entry against dir. When not using the try-with-resources construct, then directory stream\u0027s close method should be invoked after iteration is completed so as to free any resources held for the open directory. When an implementation supports operations on entries in the directory that execute in a race-free manner then the returned directory stream is a SecureDirectoryStream.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - the path to the directory"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/NotDirectoryException.html\" title\u003d\"class in java.nio.file\"\u003eNotDirectoryException\u003c/a\u003e\u003c/code\u003e - if the file could not otherwise be opened because it is not a directory \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the directory."
        ],
        "return": [
          "a new and open \n\u003ccode\u003eDirectoryStream\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.DirectoryStream",
        "parameters": [
          {
            "name": "java.nio.file.Path",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "glob"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newDirectoryStream",
      "comment": "Opens a directory, returning a DirectoryStream to iterate over the entries in the directory. The elements returned by the directory stream\u0027s iterator are of type Path, each one representing an entry in the directory. The Path objects are obtained as if by resolving the name of the directory entry against dir. The entries returned by the iterator are filtered by matching the String representation of their file names against the given globbing pattern. For example, suppose we want to iterate over the files ending with \".java\" in a directory:      Path dir \u003d ...\n     try (DirectoryStream\u003cPath\u003e stream \u003d Files.newDirectoryStream(dir, \"*.java\")) {\n         :\n     }\n The globbing pattern is specified by the getPathMatcher method. When not using the try-with-resources construct, then directory stream\u0027s close method should be invoked after iteration is completed so as to free any resources held for the open directory. When an implementation supports operations on entries in the directory that execute in a race-free manner then the returned directory stream is a SecureDirectoryStream.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - the path to the directory",
          "\u003ccode\u003eglob\u003c/code\u003e - the glob pattern"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/regex/PatternSyntaxException.html\" title\u003d\"class in java.util.regex\"\u003ePatternSyntaxException\u003c/a\u003e\u003c/code\u003e - if the pattern is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/NotDirectoryException.html\" title\u003d\"class in java.nio.file\"\u003eNotDirectoryException\u003c/a\u003e\u003c/code\u003e - if the file could not otherwise be opened because it is not a directory \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the directory."
        ],
        "return": [
          "a new and open \n\u003ccode\u003eDirectoryStream\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.DirectoryStream",
        "parameters": [
          {
            "name": "java.nio.file.Path",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        },
        {
          "type": {
            "name": "java.nio.file.DirectoryStream$Filter",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "java.nio.file.Path",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "filter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newDirectoryStream",
      "comment": "Opens a directory, returning a DirectoryStream to iterate over the entries in the directory. The elements returned by the directory stream\u0027s iterator are of type Path, each one representing an entry in the directory. The Path objects are obtained as if by resolving the name of the directory entry against dir. The entries returned by the iterator are filtered by the given filter. When not using the try-with-resources construct, then directory stream\u0027s close method should be invoked after iteration is completed so as to free any resources held for the open directory. Where the filter terminates due to an uncaught error or runtime exception then it is propagated to the hasNext or next method. Where an IOException is thrown, it results in the hasNext or next method throwing a DirectoryIteratorException with the IOException as the cause. When an implementation supports operations on entries in the directory that execute in a race-free manner then the returned directory stream is a SecureDirectoryStream. Usage Example: Suppose we want to iterate over the files in a directory that are larger than 8K.      DirectoryStream.Filter\u003cPath\u003e filter \u003d new DirectoryStream.Filter\u003cPath\u003e() {\n         public boolean accept(Path file) throws IOException {\n             return (Files.size(file) \u003e 8192L);\n         }\n     };\n     Path dir \u003d ...\n     try (DirectoryStream\u003cPath\u003e stream \u003d Files.newDirectoryStream(dir, filter)) {\n         :\n     }",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - the path to the directory",
          "\u003ccode\u003efilter\u003c/code\u003e - the directory stream filter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/NotDirectoryException.html\" title\u003d\"class in java.nio.file\"\u003eNotDirectoryException\u003c/a\u003e\u003c/code\u003e - if the file could not otherwise be opened because it is not a directory \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the directory."
        ],
        "return": [
          "a new and open \n\u003ccode\u003eDirectoryStream\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.FileAttribute",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createFile",
      "comment": "Creates a new and empty file, failing if the file already exists. The check for the existence of the file and the creation of the new file if it does not exist are a single operation that is atomic with respect to all other filesystem activities that might affect the directory. The attrs parameter is optional file-attributes to set atomically when creating the file. Each attribute is identified by its name. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to create",
          "\u003ccode\u003eattrs\u003c/code\u003e - an optional list of file attributes to set atomically when creating the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the array contains an attribute that cannot be set atomically when creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if a file of that name already exists \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs or the parent directory does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the new file."
        ],
        "return": [
          "the file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.FileAttribute",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createDirectory",
      "comment": "Creates a new directory. The check for the existence of the file and the creation of the directory if it does not exist are a single operation that is atomic with respect to all other filesystem activities that might affect the directory. The createDirectories method should be used where it is required to create all nonexistent parent directories first. The attrs parameter is optional file-attributes to set atomically when creating the directory. Each attribute is identified by its name. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - the directory to create",
          "\u003ccode\u003eattrs\u003c/code\u003e - an optional list of file attributes to set atomically when creating the directory"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the array contains an attribute that cannot be set atomically when creating the directory",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if a directory could not otherwise be created because a file of that name already exists \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs or the parent directory does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the new directory."
        ],
        "return": [
          "the directory"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.FileAttribute",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createDirectories",
      "comment": "Creates a directory by creating all nonexistent parent directories first. Unlike the createDirectory method, an exception is not thrown if the directory could not be created because it already exists. The attrs parameter is optional file-attributes to set atomically when creating the nonexistent directories. Each file attribute is identified by its name. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. If this method fails, then it may do so after creating some, but not all, of the parent directories.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - the directory to create",
          "\u003ccode\u003eattrs\u003c/code\u003e - an optional list of file attributes to set atomically when creating the directory"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the array contains an attribute that cannot be set atomically when creating the directory",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003edir\u003c/code\u003e exists but is not a directory \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - in the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked prior to attempting to create a directory and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e is invoked for each parent directory that is checked. If \n\u003ccode\u003e dir\u003c/code\u003e is not an absolute path then its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html#toAbsolutePath()\"\u003e\u003ccode\u003etoAbsolutePath\u003c/code\u003e\u003c/a\u003e may need to be invoked to get its absolute path. This may invoke the security manager\u0027s \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPropertyAccess(java.lang.String)\"\u003e\u003ccode\u003echeckPropertyAccess\u003c/code\u003e\u003c/a\u003e method to check access to the system property \n\u003ccode\u003euser.dir\u003c/code\u003e"
        ],
        "return": [
          "the directory"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "suffix"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.FileAttribute",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createTempFile",
      "comment": "Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name. The resulting Path is associated with the same FileSystem as the given directory. The details as to how the name of the file is constructed is implementation dependent and therefore not specified. Where possible the prefix and suffix are used to construct candidate names in the same manner as the File.createTempFile(String,String,File) method. As with the File.createTempFile methods, this method is only part of a temporary-file facility. Where used as a work files, the resulting file may be opened using the DELETE_ON_CLOSE option so that the file is deleted when the appropriate close method is invoked. Alternatively, a shutdown-hook, or the File.deleteOnExit() mechanism may be used to delete the file automatically. The attrs parameter is optional file-attributes to set atomically when creating the file. Each attribute is identified by its name. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. When no file attributes are specified, then the resulting file may have more restrictive access permissions to files created by the File.createTempFile(String,String,File) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - the path to directory in which to create the file",
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix string to be used in generating the file\u0027s name; may be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003esuffix\u003c/code\u003e - the suffix string to be used in generating the file\u0027s name; may be \n\u003ccode\u003enull\u003c/code\u003e, in which case \"\n\u003ccode\u003e.tmp\u003c/code\u003e\" is used",
          "\u003ccode\u003eattrs\u003c/code\u003e - an optional list of file attributes to set atomically when creating the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the prefix or suffix parameters cannot be used to generate a candidate file name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the array contains an attribute that cannot be set atomically when creating the directory",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs or \n\u003ccode\u003edir\u003c/code\u003e does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file."
        ],
        "return": [
          "the path to the newly created file that did not exist before this method was invoked"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "suffix"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.FileAttribute",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createTempFile",
      "comment": "Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name. The resulting Path is associated with the default FileSystem. This method works in exactly the manner specified by the createTempFile(Path,String,String,FileAttribute[]) method for the case that the dir parameter is the temporary-file directory.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix string to be used in generating the file\u0027s name; may be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003esuffix\u003c/code\u003e - the suffix string to be used in generating the file\u0027s name; may be \n\u003ccode\u003enull\u003c/code\u003e, in which case \"\n\u003ccode\u003e.tmp\u003c/code\u003e\" is used",
          "\u003ccode\u003eattrs\u003c/code\u003e - an optional list of file attributes to set atomically when creating the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the prefix or suffix parameters cannot be used to generate a candidate file name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the array contains an attribute that cannot be set atomically when creating the directory",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs or the temporary-file directory does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file."
        ],
        "return": [
          "the path to the newly created file that did not exist before this method was invoked"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.FileAttribute",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createTempDirectory",
      "comment": "Creates a new directory in the specified directory, using the given prefix to generate its name. The resulting Path is associated with the same FileSystem as the given directory. The details as to how the name of the directory is constructed is implementation dependent and therefore not specified. Where possible the prefix is used to construct candidate names. As with the createTempFile methods, this method is only part of a temporary-file facility. A shutdown-hook, or the File.deleteOnExit() mechanism may be used to delete the directory automatically. The attrs parameter is optional file-attributes to set atomically when creating the directory. Each attribute is identified by its name. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - the path to directory in which to create the directory",
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix string to be used in generating the directory\u0027s name; may be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003eattrs\u003c/code\u003e - an optional list of file attributes to set atomically when creating the directory"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the prefix cannot be used to generate a candidate directory name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the array contains an attribute that cannot be set atomically when creating the directory",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs or \n\u003ccode\u003edir\u003c/code\u003e does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access when creating the directory."
        ],
        "return": [
          "the path to the newly created directory that did not exist before this method was invoked"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "prefix"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.FileAttribute",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createTempDirectory",
      "comment": "Creates a new directory in the default temporary-file directory, using the given prefix to generate its name. The resulting Path is associated with the default FileSystem. This method works in exactly the manner specified by createTempDirectory(Path,String,FileAttribute[]) method for the case that the dir parameter is the temporary-file directory.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - the prefix string to be used in generating the directory\u0027s name; may be \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003eattrs\u003c/code\u003e - an optional list of file attributes to set atomically when creating the directory"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the prefix cannot be used to generate a candidate directory name",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the array contains an attribute that cannot be set atomically when creating the directory",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs or the temporary-file directory does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access when creating the directory."
        ],
        "return": [
          "the path to the newly created directory that did not exist before this method was invoked"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "link"
          }
        },
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.FileAttribute",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attrs"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createSymbolicLink",
      "comment": "Creates a symbolic link to a target (optional operation). The target parameter is the target of the link. It may be an absolute or relative path and may not exist. When the target is a relative path then file system operations on the resulting link are relative to the path of the link. The attrs parameter is optional attributes to set atomically when creating the link. Each attribute is identified by its name. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. Where symbolic links are supported, but the underlying FileStore does not support symbolic links, then this may fail with an IOException. Additionally, some operating systems may require that the Java virtual machine be started with implementation specific privileges to create symbolic links, in which case this method may throw IOException.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elink\u003c/code\u003e - the path of the symbolic link to create",
          "\u003ccode\u003etarget\u003c/code\u003e - the target of the symbolic link",
          "\u003ccode\u003eattrs\u003c/code\u003e - the array of attributes to set atomically when creating the symbolic link"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the implementation does not support symbolic links or the array contains an attribute that cannot be set atomically when creating the symbolic link",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if a file with the name already exists \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/LinkPermission.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003eLinkPermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"symbolic\")\u003c/code\u003e or its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method denies write access to the path of the symbolic link."
        ],
        "return": [
          "the path to the symbolic link"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "link"
          }
        },
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "existing"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createLink",
      "comment": "Creates a new link (directory entry) for an existing file (optional operation). The link parameter locates the directory entry to create. The existing parameter is the path to an existing file. This method creates a new directory entry for the file so that it can be accessed using link as the path. On some file systems this is known as creating a \"hard link\". Whether the file attributes are maintained for the file or for each directory entry is file system specific and therefore not specified. Typically, a file system requires that all links (directory entries) for a file be on the same file system. Furthermore, on some platforms, the Java virtual machine may require to be started with implementation specific privileges to create hard links or to create links to directories.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elink\u003c/code\u003e - the link (directory entry) to create",
          "\u003ccode\u003eexisting\u003c/code\u003e - a path to an existing file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the implementation does not support adding an existing file to a directory",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if the entry could not otherwise be created because a file of that name already exists \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/LinkPermission.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003eLinkPermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"hard\")\u003c/code\u003e or its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method denies write access to either the link or the existing file."
        ],
        "return": [
          "the path to the link (directory entry)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "delete",
      "comment": "Deletes a file. An implementation may require to examine the file to determine if the file is a directory. Consequently this method may not be atomic with respect to other file system operations. If the file is a symbolic link then the symbolic link itself, not the final target of the link, is deleted. If the file is a directory then the directory must be empty. In some implementations a directory has entries for special files or links that are created when the directory is created. In such implementations a directory is considered empty when only the special entries exist. This method can be used with the walkFileTree method to delete a directory and all entries in the directory, or an entire file-tree where required. On some operating systems it may not be possible to remove a file when it is open and in use by this Java virtual machine or other programs.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to delete"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/NoSuchFileException.html\" title\u003d\"class in java.nio.file\"\u003eNoSuchFileException\u003c/a\u003e\u003c/code\u003e - if the file does not exist \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/DirectoryNotEmptyException.html\" title\u003d\"class in java.nio.file\"\u003eDirectoryNotEmptyException\u003c/a\u003e\u003c/code\u003e - if the file is a directory and could not otherwise be deleted because the directory is not empty \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkDelete(String)\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access to the file"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "deleteIfExists",
      "comment": "Deletes a file if it exists. As with the delete(Path) method, an implementation may need to examine the file to determine if the file is a directory. Consequently this method may not be atomic with respect to other file system operations. If the file is a symbolic link, then the symbolic link itself, not the final target of the link, is deleted. If the file is a directory then the directory must be empty. In some implementations a directory has entries for special files or links that are created when the directory is created. In such implementations a directory is considered empty when only the special entries exist. On some operating systems it may not be possible to remove a file when it is open and in use by this Java virtual machine or other programs.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to delete"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/DirectoryNotEmptyException.html\" title\u003d\"class in java.nio.file\"\u003eDirectoryNotEmptyException\u003c/a\u003e\u003c/code\u003e - if the file is a directory and could not otherwise be deleted because the directory is not empty \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkDelete(String)\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access to the file."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file was deleted by this method; \n\u003ccode\u003e false\u003c/code\u003e if the file could not be deleted because it did not exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.nio.file.CopyOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "copy",
      "comment": "Copy a file to a target file. This method copies a file to the target file with the options parameter specifying how the copy is performed. By default, the copy fails if the target file already exists or is a symbolic link, except if the source and target are the same file, in which case the method completes without copying the file. File attributes are not required to be copied to the target file. If symbolic links are supported, and the file is a symbolic link, then the final target of the link is copied. If the file is a directory then it creates an empty directory in the target location (entries in the directory are not copied). This method can be used with the walkFileTree method to copy a directory and all entries in the directory, or an entire file-tree where required. The options parameter may include any of the following: Options Option Description REPLACE_EXISTING If the target file exists, then the target file is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link itself, not the target of the link, is replaced. COPY_ATTRIBUTES Attempts to copy the file attributes associated with this file to the target file. The exact file attributes that are copied is platform and file system dependent and therefore unspecified. Minimally, the last-modified-time is copied to the target file if supported by both the source and target file stores. Copying of file timestamps may result in precision loss. NOFOLLOW_LINKS Symbolic links are not followed. If the file is a symbolic link, then the symbolic link itself, not the target of the link, is copied. It is implementation specific if file attributes can be copied to the new link. In other words, the COPY_ATTRIBUTES option may be ignored when copying a symbolic link. An implementation of this interface may support additional implementation specific options. Copying a file is not an atomic operation. If an IOException is thrown, then it is possible that the target file is incomplete or some of its file attributes have not been copied from the source file. When the REPLACE_EXISTING option is specified and the target file exists, then the target file is replaced. The check for the existence of the file and the creation of the new file may not be atomic with respect to other file system activities. Usage Example: Suppose we want to copy a file into a directory, giving it the same file name as the source file:      Path source \u003d ...\n     Path newdir \u003d ...\n     Files.copy(source, newdir.resolve(source.getFileName());",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the path to the file to copy",
          "\u003ccode\u003etarget\u003c/code\u003e - the path to the target file (may be associated with a different provider to the source path)",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the copy should be done"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the array contains a copy option that is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if the target file exists but cannot be replaced because the \n\u003ccode\u003eREPLACE_EXISTING\u003c/code\u003e option is not specified \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/DirectoryNotEmptyException.html\" title\u003d\"class in java.nio.file\"\u003eDirectoryNotEmptyException\u003c/a\u003e\u003c/code\u003e - the \n\u003ccode\u003eREPLACE_EXISTING\u003c/code\u003e option is specified but the file cannot be replaced because it is a non-empty directory \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the source file, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e is invoked to check write access to the target file. If a symbolic link is copied the security manager is invoked to check \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/LinkPermission.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003eLinkPermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"symbolic\")\u003c/code\u003e."
        ],
        "return": [
          "the path to the target file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.nio.file.CopyOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "move",
      "comment": "Move or rename a file to a target file. By default, this method attempts to move the file to the target file, failing if the target file exists except if the source and target are the same file, in which case this method has no effect. If the file is a symbolic link then the symbolic link itself, not the target of the link, is moved. This method may be invoked to move an empty directory. In some implementations a directory has entries for special files or links that are created when the directory is created. In such implementations a directory is considered empty when only the special entries exist. When invoked to move a directory that is not empty then the directory is moved if it does not require moving the entries in the directory. For example, renaming a directory on the same FileStore will usually not require moving the entries in the directory. When moving a directory requires that its entries be moved then this method fails (by throwing an IOException). To move a file tree may involve copying rather than moving directories and this can be done using the copy method in conjunction with the Files.walkFileTree utility method. The options parameter may include any of the following: Options Option Description REPLACE_EXISTING If the target file exists, then the target file is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link itself, not the target of the link, is replaced. ATOMIC_MOVE The move is performed as an atomic file system operation and all other options are ignored. If the target file exists then it is implementation specific if the existing file is replaced or this method fails by throwing an IOException. If the move cannot be performed as an atomic file system operation then AtomicMoveNotSupportedException is thrown. This can arise, for example, when the target location is on a different FileStore and would require that the file be copied, or target location is associated with a different provider to this object. An implementation of this interface may support additional implementation specific options. Moving a file will copy the last-modified-time to the target file if supported by both source and target file stores. Copying of file timestamps may result in precision loss. An implementation may also attempt to copy other file attributes but is not required to fail if the file attributes cannot be copied. When the move is performed as a non-atomic operation, and an IOException is thrown, then the state of the files is not defined. The original file and the target file may both exist, the target file may be incomplete or some of its file attributes may not been copied from the original file. Usage Examples: Suppose we want to rename a file to \"newname\", keeping the file in the same directory:      Path source \u003d ...\n     Files.move(source, source.resolveSibling(\"newname\"));\n Alternatively, suppose we want to move a file to new directory, keeping the same file name, and replacing any existing file of that name in the directory:      Path source \u003d ...\n     Path newdir \u003d ...\n     Files.move(source, newdir.resolve(source.getFileName()), REPLACE_EXISTING);",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the path to the file to move",
          "\u003ccode\u003etarget\u003c/code\u003e - the path to the target file (may be associated with a different provider to the source path)",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the move should be done"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the array contains a copy option that is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if the target file exists but cannot be replaced because the \n\u003ccode\u003eREPLACE_EXISTING\u003c/code\u003e option is not specified \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/DirectoryNotEmptyException.html\" title\u003d\"class in java.nio.file\"\u003eDirectoryNotEmptyException\u003c/a\u003e\u003c/code\u003e - the \n\u003ccode\u003eREPLACE_EXISTING\u003c/code\u003e option is specified but the file cannot be replaced because it is a non-empty directory, or the source is a non-empty directory containing entries that would be required to be moved \n\u003ci\u003e(optional specific exceptions)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/AtomicMoveNotSupportedException.html\" title\u003d\"class in java.nio.file\"\u003eAtomicMoveNotSupportedException\u003c/a\u003e\u003c/code\u003e - if the options array contains the \n\u003ccode\u003eATOMIC_MOVE\u003c/code\u003e option but the file cannot be moved as an atomic file system operation.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to both the source and target file."
        ],
        "return": [
          "the path to the target file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "link"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "readSymbolicLink",
      "comment": "Reads the target of a symbolic link (optional operation). If the file system supports symbolic links then this method is used to read the target of the link, failing if the file is not a symbolic link. The target of the link need not exist. The returned Path object will be associated with the same file system as link.",
      "tagMap": {
        "param": [
          "\u003ccode\u003elink\u003c/code\u003e - the path to the symbolic link"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the implementation does not support symbolic links",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/NotLinkException.html\" title\u003d\"class in java.nio.file\"\u003eNotLinkException\u003c/a\u003e\u003c/code\u003e - if the target could otherwise not be read because the file is not a symbolic link \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, it checks that \n\u003ccode\u003eFilePermission\u003c/code\u003e has been granted with the \"\n\u003ccode\u003ereadlink\u003c/code\u003e\" action to read the link."
        ],
        "return": [
          "a \n\u003ccode\u003ePath\u003c/code\u003e object representing the target of the link"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.FileStore",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFileStore",
      "comment": "Returns the FileStore representing the file store where a file is located. Once a reference to the FileStore is obtained it is implementation specific if operations on the returned FileStore, or FileStoreAttributeView objects obtained from it, continue to depend on the existence of the file. In particular the behavior is not defined for the case that the file is deleted or moved to a different file store.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file, and in addition it checks \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"getFileStoreAttributes\")\u003c/code\u003e"
        ],
        "return": [
          "the file store where the file is stored"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isSameFile",
      "comment": "Tests if two paths locate the same file. If both Path objects are equal then this method returns true without checking if the file exists. If the two Path objects are associated with different providers then this method returns false. Otherwise, this method checks if both Path objects locate the same file, and depending on the implementation, may require to open or access both files. If the file system and files remain static, then this method implements an equivalence relation for non-null Paths. It is reflexive: for Path f, isSameFile(f,f) should return true. It is symmetric: for two Paths f and g, isSameFile(f,g) will equal isSameFile(g,f). It is transitive: for three Paths f, g, and h, if isSameFile(f,g) returns true and isSameFile(g,h) returns true, then isSameFile(f,h) will return true.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/attribute/BasicFileAttributes.html#fileKey()\"\u003e\u003ccode\u003eBasicFileAttributes.fileKey()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - one path to the file",
          "\u003ccode\u003epath2\u003c/code\u003e - the other path"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to both files."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, the two paths locate the same file"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path2"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "mismatch",
      "comment": "Finds and returns the position of the first mismatched byte in the content of two files, or -1L if there is no mismatch. The position will be in the inclusive range of 0L up to the size (in bytes) of the smaller file. Two files are considered to match if they satisfy one of the following conditions: The two paths locate the same file, even if two equal paths locate a file does not exist, or The two files are the same size, and every byte in the first file is identical to the corresponding byte in the second file. Otherwise there is a mismatch between the two files and the value returned by this method is: The position of the first mismatched byte, or The size of the smaller file (in bytes) when the files are different sizes and every byte of the smaller file is identical to the corresponding byte of the larger file. This method may not be atomic with respect to other file system operations. This method is always reflexive (for Path f, mismatch(f,f) returns -1L). If the file system and files remain static, then this method is symmetric (for two Paths f and g, mismatch(f,g) will return the same value as mismatch(g,f)).",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the first file",
          "\u003ccode\u003epath2\u003c/code\u003e - the path to the second file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to both files."
        ],
        "return": [
          "the position of the first mismatch or \n\u003ccode\u003e-1L\u003c/code\u003e if no mismatch"
        ],
        "since": [
          "12"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isHidden",
      "comment": "Tells whether or not a file is considered hidden.",
      "tagMap": {
        "apiNote": [
          "The exact definition of hidden is platform or provider dependent. On UNIX for example a file is considered to be hidden if its name begins with a period character (\u0027.\u0027). On Windows a file is considered hidden if the DOS \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/attribute/DosFileAttributes.html#isHidden()\"\u003e\u003ccode\u003ehidden\u003c/code\u003e\u003c/a\u003e attribute is set. \n\u003cp\u003e Depending on the implementation this method may require to access the file system to determine if the file is considered hidden.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to test"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file is considered hidden"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "probeContentType",
      "comment": "Probes the content type of a file. This method uses the installed FileTypeDetector implementations to probe the given file to determine its content type. Each file type detector\u0027s probeContentType is invoked, in turn, to probe the file type. If the file is recognized then the content type is returned. If the file is not recognized by any of the installed file type detectors then a system-default file type detector is invoked to guess the content type. A given invocation of the Java virtual machine maintains a system-wide list of file type detectors. Installed file type detectors are loaded using the service-provider loading facility defined by the ServiceLoader class. Installed file type detectors are loaded using the system class loader. If the system class loader cannot be found then the platform class loader is used. File type detectors are typically installed by placing them in a JAR file on the application class path, the JAR file contains a provider-configuration file named java.nio.file.spi.FileTypeDetector in the resource directory META-INF/services, and the file lists one or more fully-qualified names of concrete subclass of FileTypeDetector that have a zero argument constructor. If the process of locating or instantiating the installed file type detectors fails then an unspecified error is thrown. The ordering that installed providers are located is implementation specific. The return value of this method is the string form of the value of a Multipurpose Internet Mail Extension (MIME) content type as defined by RFC 2045: Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies. The string is guaranteed to be parsable according to the grammar in the RFC.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to probe"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is installed and it denies an unspecified permission required by a file type detector implementation."
        ],
        "return": [
          "The content type of the file, or \n\u003ccode\u003enull\u003c/code\u003e if the content type cannot be determined"
        ]
      }
    },
    {
      "returnType": {
        "name": "V",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "V",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "genericParameters": [
        {
          "name": "V",
          "upperBounds": [
            {
              "name": "java.nio.file.attribute.FileAttributeView",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFileAttributeView",
      "comment": "Returns a file attribute view of a given type. A file attribute view provides a read-only or updatable view of a set of file attributes. This method is intended to be used where the file attribute view defines type-safe methods to read or update the file attributes. The type parameter is the type of the attribute view required and the method returns an instance of that type if supported. The BasicFileAttributeView type supports access to the basic attributes of a file. Invoking this method to select a file attribute view of that type will always return an instance of that class. The options array may be used to indicate how symbolic links are handled by the resulting file attribute view for the case that the file is a symbolic link. By default, symbolic links are followed. If the option NOFOLLOW_LINKS is present then symbolic links are not followed. This option is ignored by implementations that do not support symbolic links. Usage Example: Suppose we want read or set a file\u0027s ACL, if supported:      Path path \u003d ...\n     AclFileAttributeView view \u003d Files.getFileAttributeView(path, AclFileAttributeView.class);\n     if (view !\u003d null) {\n         List\u003cAclEntry\u003e acl \u003d view.getAcl();\n         :\n     }",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eV\u003c/code\u003e - The \n\u003ccode\u003eFileAttributeView\u003c/code\u003e type"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003etype\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e object corresponding to the file attribute view",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled"
        ],
        "return": [
          "a file attribute view of the specified type, or \n\u003ccode\u003enull\u003c/code\u003e if the attribute view type is not available"
        ]
      }
    },
    {
      "returnType": {
        "name": "A",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "name": "A",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "genericParameters": [
        {
          "name": "A",
          "upperBounds": [
            {
              "name": "java.nio.file.attribute.BasicFileAttributes",
              "type": "Class"
            }
          ],
          "type": "Variable"
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "readAttributes",
      "comment": "Reads a file\u0027s attributes as a bulk operation. The type parameter is the type of the attributes required and this method returns an instance of that type if supported. All implementations support a basic set of file attributes and so invoking this method with a type parameter of BasicFileAttributes.class will not throw UnsupportedOperationException. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option NOFOLLOW_LINKS is present then symbolic links are not followed. It is implementation specific if all file attributes are read as an atomic operation with respect to other file system operations. Usage Example: Suppose we want to read a file\u0027s attributes in bulk:     Path path \u003d ...\n    BasicFileAttributes attrs \u003d Files.readAttributes(path, BasicFileAttributes.class);\n Alternatively, suppose we want to read file\u0027s POSIX attributes without following symbolic links:     PosixFileAttributes attrs \u003d\n        Files.readAttributes(path, PosixFileAttributes.class, NOFOLLOW_LINKS);",
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eA\u003c/code\u003e - The \n\u003ccode\u003eBasicFileAttributes\u003c/code\u003e type"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003etype\u003c/code\u003e - the \n\u003ccode\u003eClass\u003c/code\u003e of the file attributes required to read",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an attributes of the given type are not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file. If this method is invoked to read security sensitive attributes then the security manager may be invoke to check for additional permissions."
        ],
        "return": [
          "the file attributes"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attribute"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setAttribute",
      "comment": "Sets the value of a file attribute. The attribute parameter identifies the attribute to be set and takes the form: [view-name:]attribute-name where square brackets [...] delineate an optional component and the character \u0027:\u0027 stands for itself. view-name is the name of a FileAttributeView that identifies a set of file attributes. If not specified then it defaults to \"basic\", the name of the file attribute view that identifies the basic set of file attributes common to many file systems. attribute-name is the name of the attribute within the set. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is set. If the option NOFOLLOW_LINKS is present then symbolic links are not followed. Usage Example: Suppose we want to set the DOS \"hidden\" attribute:     Path path \u003d ...\n    Files.setAttribute(path, \"dos:hidden\", true);",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eattribute\u003c/code\u003e - the attribute to set",
          "\u003ccode\u003evalue\u003c/code\u003e - the attribute value",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the attribute view is not available",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the attribute name is not specified, or is not recognized, or the attribute value is of the correct type but has an inappropriate value",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the attribute value is not of the expected type or is a collection containing elements that are not of the expected type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method denies write access to the file. If this method is invoked to set security sensitive attributes then the security manager may be invoked to check for additional permissions."
        ],
        "return": [
          "the given path"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attribute"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getAttribute",
      "comment": "Reads the value of a file attribute. The attribute parameter identifies the attribute to be read and takes the form: [view-name:]attribute-name where square brackets [...] delineate an optional component and the character \u0027:\u0027 stands for itself. view-name is the name of a FileAttributeView that identifies a set of file attributes. If not specified then it defaults to \"basic\", the name of the file attribute view that identifies the basic set of file attributes common to many file systems. attribute-name is the name of the attribute. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option NOFOLLOW_LINKS is present then symbolic links are not followed. Usage Example: Suppose we require the user ID of the file owner on a system that supports a \"unix\" view:     Path path \u003d ...\n    int uid \u003d (Integer)Files.getAttribute(path, \"unix:uid\");",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eattribute\u003c/code\u003e - the attribute to read",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the attribute view is not available",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the attribute name is not specified or is not recognized",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method denies read access to the file. If this method is invoked to read security sensitive attributes then the security manager may be invoked to check for additional permissions."
        ],
        "return": [
          "the attribute value"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Map",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          },
          {
            "name": "java.lang.Object",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "readAttributes",
      "comment": "Reads a set of file attributes as a bulk operation. The attributes parameter identifies the attributes to be read and takes the form: [view-name:]attribute-list where square brackets [...] delineate an optional component and the character \u0027:\u0027 stands for itself. view-name is the name of a FileAttributeView that identifies a set of file attributes. If not specified then it defaults to \"basic\", the name of the file attribute view that identifies the basic set of file attributes common to many file systems. The attribute-list component is a comma separated list of one or more names of attributes to read. If the list contains the value \"*\" then all attributes are read. Attributes that are not supported are ignored and will not be present in the returned map. It is implementation specific if all attributes are read as an atomic operation with respect to other file system operations. The following examples demonstrate possible values for the attributes parameter: Possible values Example Description \"*\" Read all basic-file-attributes. \"size,lastModifiedTime,lastAccessTime\" Reads the file size, last modified time, and last access time attributes. \"posix:*\" Read all POSIX-file-attributes. \"posix:permissions,owner,size\" Reads the POSIX file permissions, owner, and file size. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option NOFOLLOW_LINKS is present then symbolic links are not followed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eattributes\u003c/code\u003e - the attributes to read",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the attribute view is not available",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if no attributes are specified or an unrecognized attribute is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method denies read access to the file. If this method is invoked to read security sensitive attributes then the security manager may be invoke to check for additional permissions."
        ],
        "return": [
          "a map of the attributes returned; The map\u0027s keys are the attribute names, its values are the attribute values"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.nio.file.attribute.PosixFilePermission",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getPosixFilePermissions",
      "comment": "Returns a file\u0027s POSIX file permissions. The path parameter is associated with a FileSystem that supports the PosixFileAttributeView. This attribute view provides access to file attributes commonly associated with files on file systems used by operating systems that implement the Portable Operating System Interface (POSIX) family of standards. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option NOFOLLOW_LINKS is present then symbolic links are not followed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the associated file system does not support the \n\u003ccode\u003e PosixFileAttributeView\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, a security manager is installed, and it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"accessUserInformation\")\u003c/code\u003e or its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method denies read access to the file."
        ],
        "return": [
          "the file permissions"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "java.nio.file.attribute.PosixFilePermission",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "perms"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setPosixFilePermissions",
      "comment": "Sets a file\u0027s POSIX permissions. The path parameter is associated with a FileSystem that supports the PosixFileAttributeView. This attribute view provides access to file attributes commonly associated with files on file systems used by operating systems that implement the Portable Operating System Interface (POSIX) family of standards.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - The path to the file",
          "\u003ccode\u003eperms\u003c/code\u003e - The new set of permissions"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the associated file system does not support the \n\u003ccode\u003e PosixFileAttributeView\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ClassCastException.html\" title\u003d\"class in java.lang\"\u003eClassCastException\u003c/a\u003e\u003c/code\u003e - if the sets contains elements that are not of type \n\u003ccode\u003e PosixFilePermission\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"accessUserInformation\")\u003c/code\u003e or its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method denies write access to the file."
        ],
        "return": [
          "The given path"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.attribute.UserPrincipal",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getOwner",
      "comment": "Returns the owner of a file. The path parameter is associated with a file system that supports FileOwnerAttributeView. This file attribute view provides access to a file attribute that is the owner of the file.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - The path to the file",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the associated file system does not support the \n\u003ccode\u003e FileOwnerAttributeView\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"accessUserInformation\")\u003c/code\u003e or its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method denies read access to the file."
        ],
        "return": [
          "A user principal representing the owner of the file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.UserPrincipal",
            "type": "Class"
          },
          "field": {
            "name": "owner"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setOwner",
      "comment": "Updates the file owner. The path parameter is associated with a file system that supports FileOwnerAttributeView. This file attribute view provides access to a file attribute that is the owner of the file. Usage Example: Suppose we want to make \"joe\" the owner of a file:      Path path \u003d ...\n     UserPrincipalLookupService lookupService \u003d\n         provider(path).getUserPrincipalLookupService();\n     UserPrincipal joe \u003d lookupService.lookupPrincipalByName(\"joe\");\n     Files.setOwner(path, joe);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileSystem.html#getUserPrincipalLookupService()\"\u003e\u003ccode\u003eFileSystem.getUserPrincipalLookupService()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/attribute/UserPrincipalLookupService.html\" title\u003d\"class in java.nio.file.attribute\"\u003e\u003ccode\u003eUserPrincipalLookupService\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - The path to the file",
          "\u003ccode\u003eowner\u003c/code\u003e - The new file owner"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the associated file system does not support the \n\u003ccode\u003e FileOwnerAttributeView\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"accessUserInformation\")\u003c/code\u003e or its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method denies write access to the file."
        ],
        "return": [
          "The given path"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isSymbolicLink",
      "comment": "Tests whether a file is a symbolic link. Where it is required to distinguish an I/O exception from the case that the file is not a symbolic link then the file attributes can be read with the readAttributes method and the file type tested with the BasicFileAttributes.isSymbolicLink() method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - The path to the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method denies read access to the file."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file is a symbolic link; \n\u003ccode\u003efalse\u003c/code\u003e if the file does not exist, is not a symbolic link, or it cannot be determined if the file is a symbolic link or not."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isDirectory",
      "comment": "Tests whether a file is a directory. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option NOFOLLOW_LINKS is present then symbolic links are not followed. Where it is required to distinguish an I/O exception from the case that the file is not a directory then the file attributes can be read with the readAttributes method and the file type tested with the BasicFileAttributes.isDirectory() method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to test",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method denies read access to the file."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file is a directory; \n\u003ccode\u003efalse\u003c/code\u003e if the file does not exist, is not a directory, or it cannot be determined if the file is a directory or not."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isRegularFile",
      "comment": "Tests whether a file is a regular file with opaque content. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option NOFOLLOW_LINKS is present then symbolic links are not followed. Where it is required to distinguish an I/O exception from the case that the file is not a regular file then the file attributes can be read with the readAttributes method and the file type tested with the BasicFileAttributes.isRegularFile() method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method denies read access to the file."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file is a regular file; \n\u003ccode\u003efalse\u003c/code\u003e if the file does not exist, is not a regular file, or it cannot be determined if the file is a regular file or not."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.attribute.FileTime",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getLastModifiedTime",
      "comment": "Returns a file\u0027s last modified time. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option NOFOLLOW_LINKS is present then symbolic links are not followed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/attribute/BasicFileAttributes.html#lastModifiedTime()\"\u003e\u003ccode\u003eBasicFileAttributes.lastModifiedTime()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method denies read access to the file."
        ],
        "return": [
          "a \n\u003ccode\u003eFileTime\u003c/code\u003e representing the time the file was last modified, or an implementation specific default when a time stamp to indicate the time of last modification is not supported by the file system"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.attribute.FileTime",
            "type": "Class"
          },
          "field": {
            "name": "time"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setLastModifiedTime",
      "comment": "Updates a file\u0027s last modified time attribute. The file time is converted to the epoch and precision supported by the file system. Converting from finer to coarser granularities result in precision loss. The behavior of this method when attempting to set the last modified time when it is not supported by the file system or is outside the range supported by the underlying file store is not defined. It may or not fail by throwing an IOException. Usage Example: Suppose we want to set the last modified time to the current time:     Path path \u003d ...\n    FileTime now \u003d FileTime.fromMillis(System.currentTimeMillis());\n    Files.setLastModifiedTime(path, now);",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/attribute/BasicFileAttributeView.html#setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)\"\u003e\u003ccode\u003eBasicFileAttributeView.setTimes(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003etime\u003c/code\u003e - the new last modified time"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method denies write access to the file."
        ],
        "return": [
          "the given path"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "size",
      "comment": "Returns the size of a file (in bytes). The size may differ from the actual size on the file system due to compression, support for sparse files, or other reasons. The size of files that are not regular files is implementation specific and therefore unspecified.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/attribute/BasicFileAttributes.html#size()\"\u003e\u003ccode\u003eBasicFileAttributes.size()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method denies read access to the file."
        ],
        "return": [
          "the file size, in bytes"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "exists",
      "comment": "Tests whether a file exists. The options parameter may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed. If the option NOFOLLOW_LINKS is present then symbolic links are not followed. Note that the result of this method is immediately outdated. If this method indicates the file exists then there is no guarantee that a subsequent access will succeed. Care should be taken when using this method in security sensitive applications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#notExists(java.nio.file.Path,java.nio.file.LinkOption...)\"\u003e\u003ccode\u003enotExists(java.nio.file.Path, java.nio.file.LinkOption...)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to test",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled ."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e is invoked to check read access to the file."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file exists; \n\u003ccode\u003efalse\u003c/code\u003e if the file does not exist or its existence cannot be determined."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.LinkOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "notExists",
      "comment": "Tests whether the file located by this path does not exist. This method is intended for cases where it is required to take action when it can be confirmed that a file does not exist. The options parameter may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed. If the option NOFOLLOW_LINKS is present then symbolic links are not followed. Note that this method is not the complement of the exists method. Where it is not possible to determine if a file exists or not then both methods return false. As with the exists method, the result of this method is immediately outdated. If this method indicates the file does exist then there is no guarantee that a subsequent attempt to create the file will succeed. Care should be taken when using this method in security sensitive applications.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to test",
          "\u003ccode\u003eoptions\u003c/code\u003e - options indicating how symbolic links are handled"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e is invoked to check read access to the file."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file does not exist; \n\u003ccode\u003efalse\u003c/code\u003e if the file exists or its existence cannot be determined"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isReadable",
      "comment": "Tests whether a file is readable. This method checks that a file exists and that this Java virtual machine has appropriate privileges that would allow it open the file for reading. Depending on the implementation, this method may require to read file permissions, access control lists, or other file attributes in order to check the effective access to the file. Consequently, this method may not be atomic with respect to other file system operations. Note that the result of this method is immediately outdated, there is no guarantee that a subsequent attempt to open the file for reading will succeed (or even that it will access the same file). Care should be taken when using this method in security sensitive applications.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to check"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e is invoked to check read access to the file."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file exists and is readable; \n\u003ccode\u003efalse\u003c/code\u003e if the file does not exist, read access would be denied because the Java virtual machine has insufficient privileges, or access cannot be determined"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isWritable",
      "comment": "Tests whether a file is writable. This method checks that a file exists and that this Java virtual machine has appropriate privileges that would allow it open the file for writing. Depending on the implementation, this method may require to read file permissions, access control lists, or other file attributes in order to check the effective access to the file. Consequently, this method may not be atomic with respect to other file system operations. Note that result of this method is immediately outdated, there is no guarantee that a subsequent attempt to open the file for writing will succeed (or even that it will access the same file). Care should be taken when using this method in security sensitive applications.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to check"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e is invoked to check write access to the file."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file exists and is writable; \n\u003ccode\u003efalse\u003c/code\u003e if the file does not exist, write access would be denied because the Java virtual machine has insufficient privileges, or access cannot be determined"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isExecutable",
      "comment": "Tests whether a file is executable. This method checks that a file exists and that this Java virtual machine has appropriate privileges to execute the file. The semantics may differ when checking access to a directory. For example, on UNIX systems, checking for execute access checks that the Java virtual machine has permission to search the directory in order to access file or subdirectories. Depending on the implementation, this method may require to read file permissions, access control lists, or other file attributes in order to check the effective access to the file. Consequently, this method may not be atomic with respect to other file system operations. Note that the result of this method is immediately outdated, there is no guarantee that a subsequent attempt to execute the file will succeed (or even that it will access the same file). Care should be taken when using this method in security sensitive applications.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file to check"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkExec(java.lang.String)\"\u003e\u003ccode\u003echeckExec\u003c/code\u003e\u003c/a\u003e is invoked to check execute access to the file."
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the file exists and is executable; \n\u003ccode\u003efalse\u003c/code\u003e if the file does not exist, execute access would be denied because the Java virtual machine has insufficient privileges, or access cannot be determined"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "java.nio.file.FileVisitOption",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "options"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDepth"
          }
        },
        {
          "type": {
            "name": "java.nio.file.FileVisitor",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "java.nio.file.Path",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "visitor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "walkFileTree",
      "comment": "Walks a file tree. This method walks a file tree rooted at a given starting file. The file tree traversal is depth-first with the given FileVisitor invoked for each file encountered. File tree traversal completes when all accessible files in the tree have been visited, or a visit method returns a result of TERMINATE. Where a visit method terminates due an IOException, an uncaught error, or runtime exception, then the traversal is terminated and the error or exception is propagated to the caller of this method. For each file encountered this method attempts to read its BasicFileAttributes. If the file is not a directory then the visitFile method is invoked with the file attributes. If the file attributes cannot be read, due to an I/O exception, then the visitFileFailed method is invoked with the I/O exception. Where the file is a directory, and the directory could not be opened, then the visitFileFailed method is invoked with the I/O exception, after which, the file tree walk continues, by default, at the next sibling of the directory. Where the directory is opened successfully, then the entries in the directory, and their descendants are visited. When all entries have been visited, or an I/O error occurs during iteration of the directory, then the directory is closed and the visitor\u0027s postVisitDirectory method is invoked. The file tree walk then continues, by default, at the next sibling of the directory. By default, symbolic links are not automatically followed by this method. If the options parameter contains the FOLLOW_LINKS option then symbolic links are followed. When following links, and the attributes of the target cannot be read, then this method attempts to get the BasicFileAttributes of the link. If they can be read then the visitFile method is invoked with the attributes of the link (otherwise the visitFileFailed method is invoked as specified above). If the options parameter contains the FOLLOW_LINKS option then this method keeps track of directories visited so that cycles can be detected. A cycle arises when there is an entry in a directory that is an ancestor of the directory. Cycle detection is done by recording the file-key of directories, or if file keys are not available, by invoking the isSameFile method to test if a directory is the same file as an ancestor. When a cycle is detected it is treated as an I/O error, and the visitFileFailed method is invoked with an instance of FileSystemLoopException. The maxDepth parameter is the maximum number of levels of directories to visit. A value of 0 means that only the starting file is visited, unless denied by the security manager. A value of MAX_VALUE may be used to indicate that all levels should be visited. The visitFile method is invoked for all files, including directories, encountered at maxDepth, unless the basic file attributes cannot be read, in which case the visitFileFailed method is invoked. If a visitor returns a result of null then NullPointerException is thrown. When a security manager is installed and it denies access to a file (or directory), then it is ignored and the visitor is not invoked for that file (or directory).",
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the starting file",
          "\u003ccode\u003eoptions\u003c/code\u003e - options to configure the traversal",
          "\u003ccode\u003emaxDepth\u003c/code\u003e - the maximum number of directory levels to visit",
          "\u003ccode\u003evisitor\u003c/code\u003e - the file visitor to invoke for each file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003emaxDepth\u003c/code\u003e parameter is negative",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If the security manager denies access to the starting file. In the case of the default provider, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the directory.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error is thrown by a visitor method"
        ],
        "return": [
          "the starting file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "java.nio.file.FileVisitor",
            "parameters": [
              {
                "lowerBounds": [
                  {
                    "name": "java.nio.file.Path",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "visitor"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "walkFileTree",
      "comment": "Walks a file tree. This method works as if invoking it were equivalent to evaluating the expression:  walkFileTree(start, EnumSet.noneOf(FileVisitOption.class), Integer.MAX_VALUE, visitor)\n In other words, it does not follow symbolic links, and visits all levels of the file tree.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the starting file",
          "\u003ccode\u003evisitor\u003c/code\u003e - the file visitor to invoke for each file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If the security manager denies access to the starting file. In the case of the default provider, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the directory.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error is thrown by a visitor method"
        ],
        "return": [
          "the starting file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.BufferedReader",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "cs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newBufferedReader",
      "comment": "Opens a file for reading, returning a BufferedReader that may be used to read text from the file in an efficient manner. Bytes from the file are decoded into characters using the specified charset. Reading commences at the beginning of the file. The Reader methods that read from the file throw IOException if a malformed or unmappable byte sequence is read.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#readAllLines(java.nio.file.Path,java.nio.charset.Charset)\"\u003e\u003ccode\u003ereadAllLines(java.nio.file.Path, java.nio.charset.Charset)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003ecs\u003c/code\u003e - the charset to use for decoding"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs opening the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "a new buffered reader, with default buffer size, to read text from the file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.BufferedReader",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newBufferedReader",
      "comment": "Opens a file for reading, returning a BufferedReader to read text from the file in an efficient manner. Bytes from the file are decoded into characters using the UTF-8 charset. This method works as if invoking it were equivalent to evaluating the expression: \n Files.newBufferedReader(path, StandardCharsets.UTF_8)",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs opening the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "a new buffered reader, with default buffer size, to read text from the file"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.BufferedWriter",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "cs"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newBufferedWriter",
      "comment": "Opens or creates a file for writing, returning a BufferedWriter that may be used to write text to the file in an efficient manner. The options parameter specifies how the file is created or opened. If no options are present then this method works as if the CREATE, TRUNCATE_EXISTING, and WRITE options are present. In other words, it opens the file for writing, creating the file if it doesn\u0027t exist, or initially truncating an existing regular-file to a size of 0 if it exists. The Writer methods to write text throw IOException if the text cannot be encoded using the specified charset.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#write(java.nio.file.Path,java.lang.Iterable,java.nio.charset.Charset,java.nio.file.OpenOption...)\"\u003e\u003ccode\u003ewrite(Path,Iterable,Charset,OpenOption[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003ecs\u003c/code\u003e - the charset to use for encoding",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the file is opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoptions\u003c/code\u003e contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an unsupported option is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003echeckDelete\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access if the file is opened with the \n\u003ccode\u003eDELETE_ON_CLOSE\u003c/code\u003e option."
        ],
        "return": [
          "a new buffered writer, with default buffer size, to write text to the file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.BufferedWriter",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newBufferedWriter",
      "comment": "Opens or creates a file for writing, returning a BufferedWriter to write text to the file in an efficient manner. The text is encoded into bytes for writing using the UTF-8 charset. This method works as if invoking it were equivalent to evaluating the expression: \n Files.newBufferedWriter(path, StandardCharsets.UTF_8, options)",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the file is opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoptions\u003c/code\u003e contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an unsupported option is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003echeckDelete\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access if the file is opened with the \n\u003ccode\u003eDELETE_ON_CLOSE\u003c/code\u003e option."
        ],
        "return": [
          "a new buffered writer, with default buffer size, to write text to the file"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "target"
          }
        },
        {
          "type": {
            "name": "java.nio.file.CopyOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "copy",
      "comment": "Copies all bytes from an input stream to a file. On return, the input stream will be at end of stream. By default, the copy fails if the target file already exists or is a symbolic link. If the REPLACE_EXISTING option is specified, and the target file already exists, then it is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link is replaced. In this release, the REPLACE_EXISTING option is the only option required to be supported by this method. Additional options may be supported in future releases. If an I/O error occurs reading from the input stream or writing to the file, then it may do so after the target file has been created and after some bytes have been read or written. Consequently the input stream may not be at end of stream and may be in an inconsistent state. It is strongly recommended that the input stream be promptly closed if an I/O error occurs. This method may block indefinitely reading from the input stream (or writing to the file). The behavior for the case that the input stream is asynchronously closed or the thread interrupted during the copy is highly input stream and file system provider specific and therefore not specified. Usage example: Suppose we want to capture a web page and save it to a file:      Path path \u003d ...\n     URI u \u003d URI.create(\"http://www.example.com/\");\n     try (InputStream in \u003d u.toURL().openStream()) {\n         Files.copy(in, path);\n     }",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - the input stream to read from",
          "\u003ccode\u003etarget\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the copy should be done"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when reading or writing",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if the target file exists but cannot be replaced because the \n\u003ccode\u003eREPLACE_EXISTING\u003c/code\u003e option is not specified \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/DirectoryNotEmptyException.html\" title\u003d\"class in java.nio.file\"\u003eDirectoryNotEmptyException\u003c/a\u003e\u003c/code\u003e - the \n\u003ccode\u003eREPLACE_EXISTING\u003c/code\u003e option is specified but the file cannot be replaced because it is a non-empty directory \n\u003ci\u003e(optional specific exception)\u003c/i\u003e *",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoptions\u003c/code\u003e contains a copy option that is not supported",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file. Where the \n\u003ccode\u003eREPLACE_EXISTING\u003c/code\u003e option is specified, the security manager\u0027s \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003echeckDelete\u003c/code\u003e\u003c/a\u003e method is invoked to check that an existing file can be deleted."
        ],
        "return": [
          "the number of bytes read or written"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "source"
          }
        },
        {
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "copy",
      "comment": "Copies all bytes from a file to an output stream. If an I/O error occurs reading from the file or writing to the output stream, then it may do so after some bytes have been read or written. Consequently the output stream may be in an inconsistent state. It is strongly recommended that the output stream be promptly closed if an I/O error occurs. This method may block indefinitely writing to the output stream (or reading from the file). The behavior for the case that the output stream is asynchronously closed or the thread interrupted during the copy is highly output stream and file system provider specific and therefore not specified. Note that if the given output stream is Flushable then its flush method may need to invoked after this method completes so as to flush any buffered output.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esource\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eout\u003c/code\u003e - the output stream to write to"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when reading or writing",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "the number of bytes read or written"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "readAllBytes",
      "comment": "Reads all the bytes from a file. The method ensures that the file is closed when all bytes have been read or an I/O error, or other runtime exception, is thrown. Note that this method is intended for simple cases where it is convenient to read all bytes into a byte array. It is not intended for reading in large files.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs reading from the stream",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/OutOfMemoryError.html\" title\u003d\"class in java.lang\"\u003eOutOfMemoryError\u003c/a\u003e\u003c/code\u003e - if an array of the required size cannot be allocated, for example the file is larger that \n\u003ccode\u003e2GB\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "a byte array containing the bytes read from the file"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "readString",
      "comment": "Reads all content from a file into a string, decoding from bytes to characters using the UTF-8 charset. The method ensures that the file is closed when all content have been read or an I/O error, or other runtime exception, is thrown. This method is equivalent to: readString(path, StandardCharsets.UTF_8)",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs reading from the file or a malformed or unmappable byte sequence is read",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/OutOfMemoryError.html\" title\u003d\"class in java.lang\"\u003eOutOfMemoryError\u003c/a\u003e\u003c/code\u003e - if the file is extremely large, for example larger than \n\u003ccode\u003e2GB\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "a String containing the content read from the file"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "cs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "readString",
      "comment": "Reads all characters from a file into a string, decoding from bytes to characters using the specified charset. The method ensures that the file is closed when all content have been read or an I/O error, or other runtime exception, is thrown. This method reads all content including the line separators in the middle and/or at the end. The resulting string will contain line separators as they appear in the file.",
      "tagMap": {
        "apiNote": [
          "This method is intended for simple cases where it is appropriate and convenient to read the content of a file into a String. It is not intended for reading very large files."
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003ecs\u003c/code\u003e - the charset to use for decoding"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs reading from the file or a malformed or unmappable byte sequence is read",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/OutOfMemoryError.html\" title\u003d\"class in java.lang\"\u003eOutOfMemoryError\u003c/a\u003e\u003c/code\u003e - if the file is extremely large, for example larger than \n\u003ccode\u003e2GB\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "a String containing the content read from the file"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "cs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "readAllLines",
      "comment": "Read all lines from a file. This method ensures that the file is closed when all bytes have been read or an I/O error, or other runtime exception, is thrown. Bytes from the file are decoded into characters using the specified charset. This method recognizes the following as line terminators: \\u000D followed by \\u000A, CARRIAGE RETURN followed by LINE FEED \\u000A, LINE FEED \\u000D, CARRIAGE RETURN Additional Unicode line terminators may be recognized in future releases. Note that this method is intended for simple cases where it is convenient to read all lines in a single operation. It is not intended for reading in large files.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)\"\u003e\u003ccode\u003enewBufferedReader(java.nio.file.Path, java.nio.charset.Charset)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003ecs\u003c/code\u003e - the charset to use for decoding"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs reading from the file or a malformed or unmappable byte sequence is read",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "the lines from the file as a \n\u003ccode\u003eList\u003c/code\u003e; whether the \n\u003ccode\u003e List\u003c/code\u003e is modifiable or not is implementation dependent and therefore not specified"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "readAllLines",
      "comment": "Read all lines from a file. Bytes from the file are decoded into characters using the UTF-8 charset. This method works as if invoking it were equivalent to evaluating the expression: \n Files.readAllLines(path, StandardCharsets.UTF_8)",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs reading from the file or a malformed or unmappable byte sequence is read",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "the lines from the file as a \n\u003ccode\u003eList\u003c/code\u003e; whether the \n\u003ccode\u003e List\u003c/code\u003e is modifiable or not is implementation dependent and therefore not specified"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "write",
      "comment": "Writes bytes to a file. The options parameter specifies how the file is created or opened. If no options are present then this method works as if the CREATE, TRUNCATE_EXISTING, and WRITE options are present. In other words, it opens the file for writing, creating the file if it doesn\u0027t exist, or initially truncating an existing regular-file to a size of 0. All bytes in the byte array are written to the file. The method ensures that the file is closed when all bytes have been written (or an I/O error or other runtime exception is thrown). If an I/O error occurs then it may do so after the file has been created or truncated, or after some bytes have been written to the file. Usage example: By default the method creates a new file or overwrites an existing file. Suppose you instead want to append bytes to an existing file:      Path path \u003d ...\n     byte[] bytes \u003d ...\n     Files.write(path, bytes, StandardOpenOption.APPEND);",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003ebytes\u003c/code\u003e - the byte array with the bytes to write",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the file is opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoptions\u003c/code\u003e contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs writing to or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an unsupported option is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003echeckDelete\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access if the file is opened with the \n\u003ccode\u003eDELETE_ON_CLOSE\u003c/code\u003e option."
        ],
        "return": [
          "the path"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.lang.Iterable",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.lang.CharSequence",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "lines"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "cs"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "write",
      "comment": "Write lines of text to a file. Each line is a char sequence and is written to the file in sequence with each line terminated by the platform\u0027s line separator, as defined by the system property line.separator. Characters are encoded into bytes using the specified charset. The options parameter specifies how the file is created or opened. If no options are present then this method works as if the CREATE, TRUNCATE_EXISTING, and WRITE options are present. In other words, it opens the file for writing, creating the file if it doesn\u0027t exist, or initially truncating an existing regular-file to a size of 0. The method ensures that the file is closed when all lines have been written (or an I/O error or other runtime exception is thrown). If an I/O error occurs then it may do so after the file has been created or truncated, or after some bytes have been written to the file.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003elines\u003c/code\u003e - an object to iterate over the char sequences",
          "\u003ccode\u003ecs\u003c/code\u003e - the charset to use for encoding",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the file is opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoptions\u003c/code\u003e contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs writing to or creating the file, or the text cannot be encoded using the specified charset",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an unsupported option is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003echeckDelete\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access if the file is opened with the \n\u003ccode\u003eDELETE_ON_CLOSE\u003c/code\u003e option."
        ],
        "return": [
          "the path"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.lang.Iterable",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.lang.CharSequence",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "lines"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "write",
      "comment": "Write lines of text to a file. Characters are encoded into bytes using the UTF-8 charset. This method works as if invoking it were equivalent to evaluating the expression: \n Files.write(path, lines, StandardCharsets.UTF_8, options);",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003elines\u003c/code\u003e - an object to iterate over the char sequences",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the file is opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoptions\u003c/code\u003e contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs writing to or creating the file, or the text cannot be encoded as \n\u003ccode\u003eUTF-8\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an unsupported option is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003echeckDelete\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access if the file is opened with the \n\u003ccode\u003eDELETE_ON_CLOSE\u003c/code\u003e option."
        ],
        "return": [
          "the path"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "csq"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "writeString",
      "comment": "Write a CharSequence to a file. Characters are encoded into bytes using the UTF-8 charset. This method is equivalent to: writeString(path, test, StandardCharsets.UTF_8, options)",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003ecsq\u003c/code\u003e - the CharSequence to be written",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the file is opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoptions\u003c/code\u003e contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs writing to or creating the file, or the text cannot be encoded using the specified charset",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an unsupported option is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003echeckDelete\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access if the file is opened with the \n\u003ccode\u003eDELETE_ON_CLOSE\u003c/code\u003e option."
        ],
        "return": [
          "the path"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "csq"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "cs"
          }
        },
        {
          "type": {
            "name": "java.nio.file.OpenOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "writeString",
      "comment": "Write a CharSequence to a file. Characters are encoded into bytes using the specified charset. All characters are written as they are, including the line separators in the char sequence. No extra characters are added. The options parameter specifies how the file is created or opened. If no options are present then this method works as if the CREATE, TRUNCATE_EXISTING, and WRITE options are present. In other words, it opens the file for writing, creating the file if it doesn\u0027t exist, or initially truncating an existing regular-file to a size of 0.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003ecsq\u003c/code\u003e - the CharSequence to be written",
          "\u003ccode\u003ecs\u003c/code\u003e - the charset to use for encoding",
          "\u003ccode\u003eoptions\u003c/code\u003e - options specifying how the file is opened"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eoptions\u003c/code\u003e contains an invalid combination of options",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs writing to or creating the file, or the text cannot be encoded using the specified charset",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if an unsupported option is specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003echeckWrite\u003c/code\u003e\u003c/a\u003e method is invoked to check write access to the file. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003echeckDelete\u003c/code\u003e\u003c/a\u003e method is invoked to check delete access if the file is opened with the \n\u003ccode\u003eDELETE_ON_CLOSE\u003c/code\u003e option."
        ],
        "return": [
          "the path"
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.nio.file.Path",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "dir"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "list",
      "comment": "Return a lazily populated Stream, the elements of which are the entries in the directory. The listing is not recursive. The elements of the stream are Path objects that are obtained as if by resolving the name of the directory entry against dir. Some file systems maintain special links to the directory itself and the directory\u0027s parent directory. Entries representing these links are not included. The stream is weakly consistent. It is thread safe but does not freeze the directory while iterating, so it may (or may not) reflect updates to the directory that occur after returning from this method. The returned stream contains a reference to an open directory. The directory is closed by closing the stream. Operating on a closed stream behaves as if the end of stream has been reached. Due to read-ahead, one or more elements may be returned after the stream has been closed. If an IOException is thrown when accessing the directory after this method has returned, it is wrapped in an UncheckedIOException which will be thrown from the method that caused the access to take place.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path)\"\u003e\u003ccode\u003enewDirectoryStream(Path)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method must be used within a try-with-resources statement or similar control structure to ensure that the stream\u0027s open directory is closed promptly after the stream\u0027s operations have completed."
        ],
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - The path to the directory"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/NotDirectoryException.html\" title\u003d\"class in java.nio.file\"\u003eNotDirectoryException\u003c/a\u003e\u003c/code\u003e - if the file could not otherwise be opened because it is not a directory \n\u003ci\u003e(optional specific exception)\u003c/i\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs when opening the directory",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the directory."
        ],
        "return": [
          "The \n\u003ccode\u003eStream\u003c/code\u003e describing the content of the directory"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.nio.file.Path",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDepth"
          }
        },
        {
          "type": {
            "name": "java.nio.file.FileVisitOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "walk",
      "comment": "Return a Stream that is lazily populated with Path by walking the file tree rooted at a given starting file. The file tree is traversed depth-first, the elements in the stream are Path objects that are obtained as if by resolving the relative path against start. The stream walks the file tree as elements are consumed. The Stream returned is guaranteed to have at least one element, the starting file itself. For each file visited, the stream attempts to read its BasicFileAttributes. If the file is a directory and can be opened successfully, entries in the directory, and their descendants will follow the directory in the stream as they are encountered. When all entries have been visited, then the directory is closed. The file tree walk then continues at the next sibling of the directory. The stream is weakly consistent. It does not freeze the file tree while iterating, so it may (or may not) reflect updates to the file tree that occur after returned from this method. By default, symbolic links are not automatically followed by this method. If the options parameter contains the FOLLOW_LINKS option then symbolic links are followed. When following links, and the attributes of the target cannot be read, then this method attempts to get the BasicFileAttributes of the link. If the options parameter contains the FOLLOW_LINKS option then the stream keeps track of directories visited so that cycles can be detected. A cycle arises when there is an entry in a directory that is an ancestor of the directory. Cycle detection is done by recording the file-key of directories, or if file keys are not available, by invoking the isSameFile method to test if a directory is the same file as an ancestor. When a cycle is detected it is treated as an I/O error with an instance of FileSystemLoopException. The maxDepth parameter is the maximum number of levels of directories to visit. A value of 0 means that only the starting file is visited, unless denied by the security manager. A value of MAX_VALUE may be used to indicate that all levels should be visited. When a security manager is installed and it denies access to a file (or directory), then it is ignored and not included in the stream. The returned stream contains references to one or more open directories. The directories are closed by closing the stream. If an IOException is thrown when accessing the directory after this method has returned, it is wrapped in an UncheckedIOException which will be thrown from the method that caused the access to take place.",
      "tagMap": {
        "apiNote": [
          "This method must be used within a try-with-resources statement or similar control structure to ensure that the stream\u0027s open directories are closed promptly after the stream\u0027s operations have completed."
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the starting file",
          "\u003ccode\u003emaxDepth\u003c/code\u003e - the maximum number of directory levels to visit",
          "\u003ccode\u003eoptions\u003c/code\u003e - options to configure the traversal"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003emaxDepth\u003c/code\u003e parameter is negative",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If the security manager denies access to the starting file. In the case of the default provider, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the directory.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error is thrown when accessing the starting file."
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Stream.html\" title\u003d\"interface in java.util.stream\"\u003e\u003ccode\u003eStream\u003c/code\u003e\u003c/a\u003e of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html\" title\u003d\"interface in java.nio.file\"\u003e\u003ccode\u003ePath\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.nio.file.Path",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "java.nio.file.FileVisitOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "walk",
      "comment": "Return a Stream that is lazily populated with Path by walking the file tree rooted at a given starting file. The file tree is traversed depth-first, the elements in the stream are Path objects that are obtained as if by resolving the relative path against start. This method works as if invoking it were equivalent to evaluating the expression:  walk(start, Integer.MAX_VALUE, options)\n In other words, it visits all levels of the file tree. The returned stream contains references to one or more open directories. The directories are closed by closing the stream.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#walk(java.nio.file.Path,int,java.nio.file.FileVisitOption...)\"\u003e\u003ccode\u003ewalk(Path, int, FileVisitOption...)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method must be used within a try-with-resources statement or similar control structure to ensure that the stream\u0027s open directories are closed promptly after the stream\u0027s operations have completed."
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the starting file",
          "\u003ccode\u003eoptions\u003c/code\u003e - options to configure the traversal"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If the security manager denies access to the starting file. In the case of the default provider, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the directory.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error is thrown when accessing the starting file."
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Stream.html\" title\u003d\"interface in java.util.stream\"\u003e\u003ccode\u003eStream\u003c/code\u003e\u003c/a\u003e of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html\" title\u003d\"interface in java.nio.file\"\u003e\u003ccode\u003ePath\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.nio.file.Path",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "maxDepth"
          }
        },
        {
          "type": {
            "name": "java.util.function.BiPredicate",
            "parameters": [
              {
                "name": "java.nio.file.Path",
                "type": "Class"
              },
              {
                "name": "java.nio.file.attribute.BasicFileAttributes",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "matcher"
          }
        },
        {
          "type": {
            "name": "java.nio.file.FileVisitOption",
            "type": "Class"
          },
          "field": {
            "name": "options"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "find",
      "comment": "Return a Stream that is lazily populated with Path by searching for files in a file tree rooted at a given starting file. This method walks the file tree in exactly the manner specified by the walk method. For each file encountered, the given BiPredicate is invoked with its Path and BasicFileAttributes. The Path object is obtained as if by resolving the relative path against start and is only included in the returned Stream if the BiPredicate returns true. Compare to calling filter on the Stream returned by walk method, this method may be more efficient by avoiding redundant retrieval of the BasicFileAttributes. The returned stream contains references to one or more open directories. The directories are closed by closing the stream. If an IOException is thrown when accessing the directory after returned from this method, it is wrapped in an UncheckedIOException which will be thrown from the method that caused the access to take place.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#walk(java.nio.file.Path,int,java.nio.file.FileVisitOption...)\"\u003e\u003ccode\u003ewalk(Path, int, FileVisitOption...)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method must be used within a try-with-resources statement or similar control structure to ensure that the stream\u0027s open directories are closed promptly after the stream\u0027s operations have completed."
        ],
        "param": [
          "\u003ccode\u003estart\u003c/code\u003e - the starting file",
          "\u003ccode\u003emaxDepth\u003c/code\u003e - the maximum number of directory levels to search",
          "\u003ccode\u003ematcher\u003c/code\u003e - the function used to decide whether a file should be included in the returned stream",
          "\u003ccode\u003eoptions\u003c/code\u003e - options to configure the traversal"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003emaxDepth\u003c/code\u003e parameter is negative",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If the security manager denies access to the starting file. In the case of the default provider, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the directory.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error is thrown when accessing the starting file."
        ],
        "return": [
          "the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/stream/Stream.html\" title\u003d\"interface in java.util.stream\"\u003e\u003ccode\u003eStream\u003c/code\u003e\u003c/a\u003e of \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html\" title\u003d\"interface in java.nio.file\"\u003e\u003ccode\u003ePath\u003c/code\u003e\u003c/a\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "cs"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "lines",
      "comment": "Read all lines from a file as a Stream. Unlike readAllLines, this method does not read all lines into a List, but instead populates lazily as the stream is consumed. Bytes from the file are decoded into characters using the specified charset and the same line terminators as specified by readAllLines are supported. The returned stream contains a reference to an open file. The file is closed by closing the stream. The file contents should not be modified during the execution of the terminal stream operation. Otherwise, the result of the terminal stream operation is undefined. After this method returns, then any subsequent I/O exception that occurs while reading from the file or when a malformed or unmappable byte sequence is read, is wrapped in an UncheckedIOException that will be thrown from the Stream method that caused the read to take place. In case an IOException is thrown when closing the file, it is also wrapped as an UncheckedIOException.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#readAllLines(java.nio.file.Path,java.nio.charset.Charset)\"\u003e\u003ccode\u003ereadAllLines(Path, Charset)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)\"\u003e\u003ccode\u003enewBufferedReader(Path, Charset)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html#lines()\"\u003e\u003ccode\u003eBufferedReader.lines()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method must be used within a try-with-resources statement or similar control structure to ensure that the stream\u0027s open file is closed promptly after the stream\u0027s operations have completed."
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003ecs\u003c/code\u003e - the charset to use for decoding"
        ],
        "implNote": [
          "This implementation supports good parallel stream performance for the standard charsets \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/StandardCharsets.html#UTF_8\"\u003e\u003ccode\u003eUTF-8\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/StandardCharsets.html#US_ASCII\"\u003e\u003ccode\u003eUS-ASCII\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/StandardCharsets.html#ISO_8859_1\"\u003e\u003ccode\u003eISO-8859-1\u003c/code\u003e\u003c/a\u003e. Such \n\u003cem\u003eline-optimal\u003c/em\u003e charsets have the property that the encoded bytes of a line feed (\u0027\\n\u0027) or a carriage return (\u0027\\r\u0027) are efficiently identifiable from other encoded characters when randomly accessing the bytes of the file. \n\u003cp\u003e For non-\u003cem\u003eline-optimal\u003c/em\u003e charsets the stream source\u0027s spliterator has poor splitting properties, similar to that of a spliterator associated with an iterator or that associated with a stream returned from \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html#lines()\"\u003e\u003ccode\u003eBufferedReader.lines()\u003c/code\u003e\u003c/a\u003e. Poor splitting properties can result in poor parallel stream performance. \u003c/p\u003e\n\u003cp\u003e For \u003cem\u003eline-optimal\u003c/em\u003e charsets the stream source\u0027s spliterator has good splitting properties, assuming the file contains a regular sequence of lines. Good splitting properties can result in good parallel stream performance. The spliterator for a \u003cem\u003eline-optimal\u003c/em\u003e charset takes advantage of the charset properties (a line feed or a carriage return being efficient identifiable) such that when splitting it can approximately divide the number of covered lines in half.\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs opening the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "the lines from the file as a \n\u003ccode\u003eStream\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "lines",
      "comment": "Read all lines from a file as a Stream. Bytes from the file are decoded into characters using the UTF-8 charset. The returned stream contains a reference to an open file. The file is closed by closing the stream. The file contents should not be modified during the execution of the terminal stream operation. Otherwise, the result of the terminal stream operation is undefined. This method works as if invoking it were equivalent to evaluating the expression: \n Files.lines(path, StandardCharsets.UTF_8)",
      "tagMap": {
        "apiNote": [
          "This method must be used within a try-with-resources statement or similar control structure to ensure that the stream\u0027s open file is closed promptly after the stream\u0027s operations have completed."
        ],
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs opening the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - In the case of the default provider, and a security manager is installed, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003echeckRead\u003c/code\u003e\u003c/a\u003e method is invoked to check read access to the file."
        ],
        "return": [
          "the lines from the file as a \n\u003ccode\u003eStream\u003c/code\u003e"
        ],
        "since": [
          "1.8"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.nio.file.Files",
  "comment": "This class consists exclusively of static methods that operate on files, directories, or other types of files. \n\u003cp\u003e In most cases, the methods defined here will delegate to the associated file system provider to perform the file operations.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}