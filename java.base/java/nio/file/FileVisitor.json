{
  "packageName": "java.nio.file",
  "simpleName": "FileVisitor",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.file.FileVisitResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.nio.file.FileVisitor",
            "name": "T",
            "type": "Variable"
          },
          "name": "dir",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.file.attribute.BasicFileAttributes",
            "type": "Class"
          },
          "name": "attrs",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "preVisitDirectory",
      "comment": "Invoked for a directory before entries in the directory are visited. If this method returns CONTINUE, then entries in the directory are visited. If this method returns SKIP_SUBTREE or SKIP_SIBLINGS then entries in the directory (and any descendants) will not be visited.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - a reference to the directory",
          "\u003ccode\u003eattrs\u003c/code\u003e - the directory\u0027s basic attributes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "the visit result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.FileVisitResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.nio.file.FileVisitor",
            "name": "T",
            "type": "Variable"
          },
          "name": "file",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.nio.file.attribute.BasicFileAttributes",
            "type": "Class"
          },
          "name": "attrs",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitFile",
      "comment": "Invoked for a file in a directory.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - a reference to the file",
          "\u003ccode\u003eattrs\u003c/code\u003e - the file\u0027s basic attributes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "the visit result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.FileVisitResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.nio.file.FileVisitor",
            "name": "T",
            "type": "Variable"
          },
          "name": "file",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.io.IOException",
            "type": "Class"
          },
          "name": "exc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "visitFileFailed",
      "comment": "Invoked for a file that could not be visited. This method is invoked if the file\u0027s attributes could not be read, the file is a directory that could not be opened, and other reasons.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - a reference to the file",
          "\u003ccode\u003eexc\u003c/code\u003e - the I/O exception that prevented the file from being visited"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "the visit result"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.FileVisitResult",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "owner": "java.nio.file.FileVisitor",
            "name": "T",
            "type": "Variable"
          },
          "name": "dir",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.io.IOException",
            "type": "Class"
          },
          "name": "exc",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "postVisitDirectory",
      "comment": "Invoked for a directory after entries in the directory, and all of their descendants, have been visited. This method is also invoked when iteration of the directory completes prematurely (by a visitFile method returning SKIP_SIBLINGS, or an I/O error when iterating over the directory).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edir\u003c/code\u003e - a reference to the directory",
          "\u003ccode\u003eexc\u003c/code\u003e - \n\u003ccode\u003enull\u003c/code\u003e if the iteration of the directory completes without an error; otherwise the I/O exception that caused the iteration of the directory to complete prematurely"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs"
        ],
        "return": [
          "the visit result"
        ]
      }
    }
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.nio.file.FileVisitor",
  "comment": "A visitor of files. An implementation of this interface is provided to the \n\u003ca href\u003d\"Files.html#walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)\"\u003e\u003ccode\u003eFiles.walkFileTree\u003c/code\u003e\u003c/a\u003e methods to visit each file in a file tree. \n\u003cp\u003e \u003cb\u003eUsage Examples:\u003c/b\u003e Suppose we want to delete a file tree. In that case, each directory should be deleted after the entries in the directory are deleted. \u003c/p\u003e\n\u003cpre\u003e     Path start \u003d ...\n     Files.walkFileTree(start, new SimpleFileVisitor\u0026lt;Path\u0026gt;() {\n         @Override\n         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n             throws IOException\n         {\n             Files.delete(file);\n             return FileVisitResult.CONTINUE;\n         }\n         @Override\n         public FileVisitResult postVisitDirectory(Path dir, IOException e)\n             throws IOException\n         {\n             if (e \u003d\u003d null) {\n                 Files.delete(dir);\n                 return FileVisitResult.CONTINUE;\n             } else {\n                 // directory iteration failed\n                 throw e;\n             }\n         }\n     });\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Furthermore, suppose we want to copy a file tree to a target location. In that case, symbolic links should be followed and the target directory should be created before the entries in the directory are copied. \u003c/p\u003e\n\u003cpre\u003e     final Path source \u003d ...\n     final Path target \u003d ...\n\n     Files.walkFileTree(source, EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE,\n         new SimpleFileVisitor\u0026lt;Path\u0026gt;() {\n             @Override\n             public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)\n                 throws IOException\n             {\n                 Path targetdir \u003d target.resolve(source.relativize(dir));\n                 try {\n                     Files.copy(dir, targetdir);\n                 } catch (FileAlreadyExistsException e) {\n                      if (!Files.isDirectory(targetdir))\n                          throw e;\n                 }\n                 return CONTINUE;\n             }\n             @Override\n             public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n                 throws IOException\n             {\n                 Files.copy(file, target.resolve(source.relativize(file)));\n                 return CONTINUE;\n             }\n         });\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}