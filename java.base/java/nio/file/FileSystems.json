{
  "packageName": "java.nio.file",
  "simpleName": "FileSystems",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.file.FileSystem",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getDefault",
      "comment": "Returns the default FileSystem. The default file system creates objects that provide access to the file systems accessible to the Java virtual machine. The working directory of the file system is the current user directory, named by the system property user.dir. This allows for interoperability with the java.io.File class. The first invocation of any of the methods defined by this class locates the default provider object. Where the system property java.nio.file.spi.DefaultFileSystemProvider is not defined then the default provider is a system-default provider that is invoked to create the default file system. If the system property java.nio.file.spi.DefaultFileSystemProvider is defined then it is taken to be a list of one or more fully-qualified names of concrete provider classes identified by the URI scheme \"file\". Where the property is a list of more than one name then the names are separated by a comma. Each class is loaded, using the system class loader, and instantiated by invoking a one argument constructor whose formal parameter type is FileSystemProvider. The providers are loaded and instantiated in the order they are listed in the property. If this process fails or a provider\u0027s scheme is not equal to \"file\" then an unspecified error is thrown. URI schemes are normally compared without regard to case but for the default provider, the scheme is required to be \"file\". The first provider class is instantiated by invoking it with a reference to the system-default provider. The second provider class is instantiated by invoking it with a reference to the first provider instance. The third provider class is instantiated by invoking it with a reference to the second instance, and so on. The last provider to be instantiated becomes the default provider; its getFileSystem method is invoked with the URI \"file:///\" to get a reference to the default file system. Subsequent invocations of this method return the file system that was returned by the first invocation.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the default file system"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.FileSystem",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.URI",
            "type": "Class"
          },
          "name": "uri",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getFileSystem",
      "comment": "Returns a reference to an existing FileSystem. This method iterates over the installed providers to locate the provider that is identified by the URI scheme of the given URI. URI schemes are compared without regard to case. The exact form of the URI is highly provider dependent. If found, the provider\u0027s getFileSystem method is invoked to obtain a reference to the FileSystem. Once a file system created by this provider is closed it is provider-dependent if this method returns a reference to the closed file system or throws FileSystemNotFoundException. If the provider allows a new file system to be created with the same URI as a file system it previously created then this method throws the exception if invoked after the file system is closed (and before a new instance is created by the newFileSystem method). If a security manager is installed then a provider implementation may require to check a permission before returning a reference to an existing file system. In the case of the default file system, no permission check is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - the URI to locate the file system"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the pre-conditions for the \n\u003ccode\u003euri\u003c/code\u003e parameter are not met",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileSystemNotFoundException.html\" title\u003d\"class in java.nio.file\"\u003eFileSystemNotFoundException\u003c/a\u003e\u003c/code\u003e - if the file system, identified by the URI, does not exist",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/ProviderNotFoundException.html\" title\u003d\"class in java.nio.file\"\u003eProviderNotFoundException\u003c/a\u003e\u003c/code\u003e - if a provider supporting the URI scheme is not installed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is installed and it denies an unspecified permission"
        ],
        "return": [
          "the reference to the file system"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.FileSystem",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.URI",
            "type": "Class"
          },
          "name": "uri",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "env",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newFileSystem",
      "comment": "Constructs a new file system that is identified by a URI This method iterates over the installed providers to locate the provider that is identified by the URI scheme of the given URI. URI schemes are compared without regard to case. The exact form of the URI is highly provider dependent. If found, the provider\u0027s newFileSystem(URI,Map) method is invoked to construct the new file system. Once a file system is closed it is provider-dependent if the provider allows a new file system to be created with the same URI as a file system it previously created. Usage Example: Suppose there is a provider identified by the scheme \"memory\" installed:   FileSystem fs \u003d FileSystems.newFileSystem(URI.create(\"memory:///?name\u003dlogfs\"),\n                                            Map.of(\"capacity\", \"16G\", \"blockSize\", \"4k\"));",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - the URI identifying the file system",
          "\u003ccode\u003eenv\u003c/code\u003e - a map of provider specific properties to configure the file system; may be empty"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the pre-conditions for the \n\u003ccode\u003euri\u003c/code\u003e parameter are not met, or the \n\u003ccode\u003eenv\u003c/code\u003e parameter does not contain properties required by the provider, or a property value is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileSystemAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileSystemAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if the file system has already been created",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/ProviderNotFoundException.html\" title\u003d\"class in java.nio.file\"\u003eProviderNotFoundException\u003c/a\u003e\u003c/code\u003e - if a provider supporting the URI scheme is not installed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs creating the file system",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is installed and it denies an unspecified permission required by the file system provider implementation"
        ],
        "return": [
          "a new file system"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.FileSystem",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.URI",
            "type": "Class"
          },
          "name": "uri",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "env",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "name": "loader",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newFileSystem",
      "comment": "Constructs a new file system that is identified by a URI This method first attempts to locate an installed provider in exactly the same manner as the newFileSystem(URI,Map) method. If none of the installed providers support the URI scheme then an attempt is made to locate the provider using the given class loader. If a provider supporting the URI scheme is located then its newFileSystem(URI,Map) is invoked to construct the new file system.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - the URI identifying the file system",
          "\u003ccode\u003eenv\u003c/code\u003e - a map of provider specific properties to configure the file system; may be empty",
          "\u003ccode\u003eloader\u003c/code\u003e - the class loader to locate the provider or \n\u003ccode\u003enull\u003c/code\u003e to only attempt to locate an installed provider"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the pre-conditions for the \n\u003ccode\u003euri\u003c/code\u003e parameter are not met, or the \n\u003ccode\u003eenv\u003c/code\u003e parameter does not contain properties required by the provider, or a property value is invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileSystemAlreadyExistsException.html\" title\u003d\"class in java.nio.file\"\u003eFileSystemAlreadyExistsException\u003c/a\u003e\u003c/code\u003e - if the URI scheme identifies an installed provider and the file system has already been created",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/ProviderNotFoundException.html\" title\u003d\"class in java.nio.file\"\u003eProviderNotFoundException\u003c/a\u003e\u003c/code\u003e - if a provider supporting the URI scheme is not found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceConfigurationError.html\" title\u003d\"class in java.util\"\u003eServiceConfigurationError\u003c/a\u003e\u003c/code\u003e - when an error occurs while loading a service provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - an I/O error occurs creating the file system",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is installed and it denies an unspecified permission required by the file system provider implementation"
        ],
        "return": [
          "a new file system"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.FileSystem",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "name": "loader",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newFileSystem",
      "comment": "Constructs a new FileSystem to access the contents of a file as a file system. This method makes use of specialized providers that create pseudo file systems where the contents of one or more files is treated as a file system. This method first attempts to locate an installed provider in exactly the same manner as the newFileSystem(Path, Map, ClassLoader) method with an empty map. If none of the installed providers return a FileSystem then an attempt is made to locate the provider using the given class loader. If a provider returns a file system then the lookup terminates and the file system is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eloader\u003c/code\u003e - the class loader to locate the provider or \n\u003ccode\u003enull\u003c/code\u003e to only attempt to locate an installed provider"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/ProviderNotFoundException.html\" title\u003d\"class in java.nio.file\"\u003eProviderNotFoundException\u003c/a\u003e\u003c/code\u003e - if a provider supporting this file type cannot be located",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceConfigurationError.html\" title\u003d\"class in java.util\"\u003eServiceConfigurationError\u003c/a\u003e\u003c/code\u003e - when an error occurs while loading a service provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is installed and it denies an unspecified permission"
        ],
        "return": [
          "a new file system"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.FileSystem",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "env",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newFileSystem",
      "comment": "Constructs a new FileSystem to access the contents of a file as a file system. This method makes use of specialized providers that create pseudo file systems where the contents of one or more files is treated as a file system. This method first attempts to locate an installed provider in exactly the same manner as the newFileSystem(Path, Map, ClassLoader) method. If found, the provider\u0027s newFileSystem(Path, Map) method is invoked to construct the new file system.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eenv\u003c/code\u003e - a map of provider specific properties to configure the file system; may be empty"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/ProviderNotFoundException.html\" title\u003d\"class in java.nio.file\"\u003eProviderNotFoundException\u003c/a\u003e\u003c/code\u003e - if a provider supporting this file type cannot be located",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceConfigurationError.html\" title\u003d\"class in java.util\"\u003eServiceConfigurationError\u003c/a\u003e\u003c/code\u003e - when an error occurs while loading a service provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is installed and it denies an unspecified permission"
        ],
        "return": [
          "a new file system"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.FileSystem",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newFileSystem",
      "comment": "Constructs a new FileSystem to access the contents of a file as a file system. This method makes use of specialized providers that create pseudo file systems where the contents of one or more files is treated as a file system. This method first attempts to locate an installed provider in exactly the same manner as the newFileSystem(Path, Map, ClassLoader) method. If found, the provider\u0027s newFileSystem(Path, Map) method is invoked with an empty map to construct the new file system.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/ProviderNotFoundException.html\" title\u003d\"class in java.nio.file\"\u003eProviderNotFoundException\u003c/a\u003e\u003c/code\u003e - if a provider supporting this file type cannot be located",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceConfigurationError.html\" title\u003d\"class in java.util\"\u003eServiceConfigurationError\u003c/a\u003e\u003c/code\u003e - when an error occurs while loading a service provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is installed and it denies an unspecified permission"
        ],
        "return": [
          "a new file system"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.FileSystem",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.nio.file.Path",
            "type": "Class"
          },
          "name": "path",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "env",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.ClassLoader",
            "type": "Class"
          },
          "name": "loader",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "newFileSystem",
      "comment": "Constructs a new FileSystem to access the contents of a file as a file system. This method makes use of specialized providers that create pseudo file systems where the contents of one or more files is treated as a file system. This method iterates over the installed providers. It invokes, in turn, each provider\u0027s newFileSystem(Path,Map) method. If a provider returns a file system then the iteration terminates and the file system is returned. If none of the installed providers return a FileSystem then an attempt is made to locate the provider using the given class loader. If a provider returns a file system, then the lookup terminates and the file system is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the path to the file",
          "\u003ccode\u003eenv\u003c/code\u003e - a map of provider specific properties to configure the file system; may be empty",
          "\u003ccode\u003eloader\u003c/code\u003e - the class loader to locate the provider or \n\u003ccode\u003enull\u003c/code\u003e to only attempt to locate an installed provider"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/ProviderNotFoundException.html\" title\u003d\"class in java.nio.file\"\u003eProviderNotFoundException\u003c/a\u003e\u003c/code\u003e - if a provider supporting this file type cannot be located",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ServiceConfigurationError.html\" title\u003d\"class in java.util\"\u003eServiceConfigurationError\u003c/a\u003e\u003c/code\u003e - when an error occurs while loading a service provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is installed and it denies an unspecified permission"
        ],
        "return": [
          "a new file system"
        ],
        "since": [
          "13"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.nio.file.FileSystems",
  "annotations": [],
  "tagMap": {
    "since": [
      "1.7"
    ]
  }
}