{
  "packageName": "java.nio.file",
  "simpleName": "Watchable",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.file.WatchKey",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.WatchService",
            "type": "Class"
          },
          "field": {
            "name": "watcher"
          }
        },
        {
          "type": {
            "name": "java.nio.file.WatchEvent$Kind",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "events"
          }
        },
        {
          "type": {
            "name": "java.nio.file.WatchEvent$Modifier",
            "type": "Class"
          },
          "field": {
            "name": "modifiers"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "register",
      "comment": "Registers an object with a watch service. If the file system object identified by this object is currently registered with the watch service then the watch key, representing that registration, is returned after changing the event set or modifiers to those specified by the events and modifiers parameters. Changing the event set does not cause pending events for the object to be discarded. Objects are automatically registered for the OVERFLOW event. This event is not required to be present in the array of events. Otherwise the file system object has not yet been registered with the given watch service, so it is registered and the resulting new key is returned. Implementations of this interface should specify the events they support.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ewatcher\u003c/code\u003e - the watch service to which this object is to be registered",
          "\u003ccode\u003eevents\u003c/code\u003e - the events for which this object should be registered",
          "\u003ccode\u003emodifiers\u003c/code\u003e - the modifiers, if any, that modify how the object is registered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if unsupported events or modifiers are specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if an invalid of combination of events are modifiers are specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/ClosedWatchServiceException.html\" title\u003d\"class in java.nio.file\"\u003eClosedWatchServiceException\u003c/a\u003e\u003c/code\u003e - if the watch service is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is installed and it denies an unspecified permission required to monitor this object. Implementations of this interface should specify the permission checks."
        ],
        "return": [
          "a key representing the registration of this object with the given watch service"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.WatchKey",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.nio.file.WatchService",
            "type": "Class"
          },
          "field": {
            "name": "watcher"
          }
        },
        {
          "type": {
            "name": "java.nio.file.WatchEvent$Kind",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "events"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "register",
      "comment": "Registers an object with a watch service. An invocation of this method behaves in exactly the same way as the invocation      watchable.register(watcher, events, new WatchEvent.Modifier[0]);",
      "tagMap": {
        "param": [
          "\u003ccode\u003ewatcher\u003c/code\u003e - the watch service to which this object is to be registered",
          "\u003ccode\u003eevents\u003c/code\u003e - the events for which this object should be registered"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if unsupported events are specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if an invalid of combination of events are specified",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/ClosedWatchServiceException.html\" title\u003d\"class in java.nio.file\"\u003eClosedWatchServiceException\u003c/a\u003e\u003c/code\u003e - if the watch service is closed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager is installed and it denies an unspecified permission required to monitor this object. Implementations of this interface should specify the permission checks."
        ],
        "return": [
          "a key representing the registration of this object with the given watch service"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.nio.file.Watchable",
  "comment": "An object that may be registered with a watch service so that it can be \n\u003cem\u003ewatched\u003c/em\u003e for changes and events. \n\u003cp\u003e This interface defines the \u003ca href\u003d\"#register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind%5B%5D,java.nio.file.WatchEvent.Modifier...)\"\u003e\u003ccode\u003eregister\u003c/code\u003e\u003c/a\u003e method to register the object with a \u003ca href\u003d\"WatchService.html\" title\u003d\"interface in java.nio.file\"\u003e\u003ccode\u003eWatchService\u003c/code\u003e\u003c/a\u003e returning a \u003ca href\u003d\"WatchKey.html\" title\u003d\"interface in java.nio.file\"\u003e\u003ccode\u003eWatchKey\u003c/code\u003e\u003c/a\u003e to represent the registration. An object may be registered with more than one watch service. Registration with a watch service is cancelled by invoking the key\u0027s \u003ca href\u003d\"WatchKey.html#cancel()\"\u003e\u003ccode\u003ecancel\u003c/code\u003e\u003c/a\u003e method.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html#register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind%5B%5D,java.nio.file.WatchEvent.Modifier...)\"\u003e\u003ccode\u003ePath.register(java.nio.file.WatchService, java.nio.file.WatchEvent.Kind\u0026lt;?\u0026gt;[], java.nio.file.WatchEvent.Modifier...)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.7"
    ]
  }
}