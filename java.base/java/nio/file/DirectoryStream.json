{
  "packageName": "java.nio.file",
  "simpleName": "DirectoryStream",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.io.Closeable",
      "type": "Class"
    },
    {
      "name": "java.lang.Iterable",
      "parameters": [
        {
          "name": "T",
          "type": "Class"
        }
      ],
      "type": "Class"
    }
  ],
  "members": [
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "owner": "java.nio.file.DirectoryStream",
            "name": "T",
            "type": "Variable"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "iterator",
      "comment": "Returns the iterator associated with this DirectoryStream.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html#iterator()\"\u003eiterator\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Iterable.html\" title\u003d\"interface in java.lang\"\u003eIterable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/DirectoryStream.html\" title\u003d\"type parameter in DirectoryStream\"\u003eT\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalStateException.html\" title\u003d\"class in java.lang\"\u003eIllegalStateException\u003c/a\u003e\u003c/code\u003e - if this directory stream is closed or the iterator has already been returned"
        ],
        "return": [
          "the iterator associated with this \n\u003ccode\u003eDirectoryStream\u003c/code\u003e"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.nio.file.DirectoryStream$Filter"
  ],
  "genericParameters": [
    {
      "name": "T",
      "type": "Variable"
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.nio.file.DirectoryStream",
  "comment": "An object to iterate over the entries in a directory. A directory stream allows for the convenient use of the for-each construct to iterate over a directory. \n\u003cp\u003e \u003cb\u003e While \u003ccode\u003eDirectoryStream\u003c/code\u003e extends \u003ccode\u003eIterable\u003c/code\u003e, it is not a general-purpose \u003ccode\u003eIterable\u003c/code\u003e as it supports only a single \u003ccode\u003e Iterator\u003c/code\u003e; invoking the \u003ca href\u003d\"#iterator()\"\u003e\u003ccode\u003eiterator\u003c/code\u003e\u003c/a\u003e method to obtain a second or subsequent iterator throws \u003ccode\u003eIllegalStateException\u003c/code\u003e. \u003c/b\u003e \u003c/p\u003e\n\u003cp\u003e An important property of the directory stream\u0027s \u003ccode\u003eIterator\u003c/code\u003e is that its \u003ca href\u003d\"../../util/Iterator.html#hasNext()\"\u003e\u003ccode\u003ehasNext\u003c/code\u003e\u003c/a\u003e method is guaranteed to read-ahead by at least one element. If \u003ccode\u003ehasNext\u003c/code\u003e method returns \u003ccode\u003etrue\u003c/code\u003e, and is followed by a call to the \u003ccode\u003enext\u003c/code\u003e method, it is guaranteed that the \u003ccode\u003enext\u003c/code\u003e method will not throw an exception due to an I/O error, or because the stream has been \u003ca href\u003d\"../../io/Closeable.html#close()\"\u003e\u003ccode\u003eclosed\u003c/code\u003e\u003c/a\u003e. The \u003ccode\u003eIterator\u003c/code\u003e does not support the \u003ca href\u003d\"../../util/Iterator.html#remove()\"\u003e\u003ccode\u003eremove\u003c/code\u003e\u003c/a\u003e operation. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eDirectoryStream\u003c/code\u003e is opened upon creation and is closed by invoking the \u003ccode\u003eclose\u003c/code\u003e method. Closing a directory stream releases any resources associated with the stream. Failure to close the stream may result in a resource leak. The try-with-resources statement provides a useful construct to ensure that the stream is closed: \u003c/p\u003e\n\u003cpre\u003e   Path dir \u003d ...\n   try (DirectoryStream\u0026lt;Path\u0026gt; stream \u003d Files.newDirectoryStream(dir)) {\n       for (Path entry: stream) {\n           ...\n       }\n   }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Once a directory stream is closed, then further access to the directory, using the \u003ccode\u003eIterator\u003c/code\u003e, behaves as if the end of stream has been reached. Due to read-ahead, the \u003ccode\u003eIterator\u003c/code\u003e may return one or more elements after the directory stream has been closed. Once these buffered elements have been read, then subsequent calls to the \u003ccode\u003ehasNext\u003c/code\u003e method returns \u003ccode\u003efalse\u003c/code\u003e, and subsequent calls to the \u003ccode\u003enext\u003c/code\u003e method will throw \u003ccode\u003eNoSuchElementException\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e A directory stream is not required to be \u003ci\u003easynchronously closeable\u003c/i\u003e. If a thread is blocked on the directory stream\u0027s iterator reading from the directory, and another thread invokes the \u003ccode\u003eclose\u003c/code\u003e method, then the second thread may block until the read operation is complete. \u003c/p\u003e\n\u003cp\u003e If an I/O error is encountered when accessing the directory then it causes the \u003ccode\u003eIterator\u003c/code\u003e\u0027s \u003ccode\u003ehasNext\u003c/code\u003e or \u003ccode\u003enext\u003c/code\u003e methods to throw \u003ca href\u003d\"DirectoryIteratorException.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003eDirectoryIteratorException\u003c/code\u003e\u003c/a\u003e with the \u003ca href\u003d\"../../io/IOException.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eIOException\u003c/code\u003e\u003c/a\u003e as the cause. As stated above, the \u003ccode\u003ehasNext\u003c/code\u003e method is guaranteed to read-ahead by at least one element. This means that if \u003ccode\u003ehasNext\u003c/code\u003e method returns \u003ccode\u003etrue\u003c/code\u003e, and is followed by a call to the \u003ccode\u003enext\u003c/code\u003e method, then it is guaranteed that the \u003ccode\u003enext\u003c/code\u003e method will not fail with a \u003ccode\u003eDirectoryIteratorException\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The elements returned by the iterator are in no specific order. Some file systems maintain special links to the directory itself and the directory\u0027s parent directory. Entries representing these links are not returned by the iterator. \u003c/p\u003e\n\u003cp\u003e The iterator is \u003ci\u003eweakly consistent\u003c/i\u003e. It is thread safe but does not freeze the directory while iterating, so it may (or may not) reflect updates to the directory that occur after the \u003ccode\u003eDirectoryStream\u003c/code\u003e is created. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eUsage Examples:\u003c/b\u003e Suppose we want a list of the source files in a directory. This example uses both the for-each and try-with-resources constructs. \u003c/p\u003e\n\u003cpre\u003e   List\u0026lt;Path\u0026gt; listSourceFiles(Path dir) throws IOException {\n       List\u0026lt;Path\u0026gt; result \u003d new ArrayList\u0026lt;\u0026gt;();\n       try (DirectoryStream\u0026lt;Path\u0026gt; stream \u003d Files.newDirectoryStream(dir, \"*.{c,h,cpp,hpp,java}\")) {\n           for (Path entry: stream) {\n               result.add(entry);\n           }\n       } catch (DirectoryIteratorException ex) {\n           // I/O error encountered during the iteration, the cause is an IOException\n           throw ex.getCause();\n       }\n       return result;\n   }\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path)\"\u003e\u003ccode\u003eFiles.newDirectoryStream(Path)\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.7"
    ]
  }
}