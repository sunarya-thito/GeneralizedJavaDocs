{
  "packageName": "java.nio",
  "simpleName": "ByteBuffer",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.nio.Buffer",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "capacity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "allocateDirect",
      "comment": "Allocates a new direct byte buffer. The new buffer\u0027s position will be zero, its limit will be its capacity, its mark will be undefined, each of its elements will be initialized to zero, and its byte order will be BIG_ENDIAN. Whether or not it has a backing array is unspecified.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecapacity\u003c/code\u003e - The new buffer\u0027s capacity, in bytes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003ecapacity\u003c/code\u003e is a negative integer"
        ],
        "return": [
          "The new byte buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "capacity"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "allocate",
      "comment": "Allocates a new byte buffer. The new buffer\u0027s position will be zero, its limit will be its capacity, its mark will be undefined, each of its elements will be initialized to zero, and its byte order will be BIG_ENDIAN. It will have a backing array, and its array offset will be zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecapacity\u003c/code\u003e - The new buffer\u0027s capacity, in bytes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003ecapacity\u003c/code\u003e is a negative integer"
        ],
        "return": [
          "The new byte buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "array"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "wrap",
      "comment": "Wraps a byte array into a buffer. The new buffer will be backed by the given byte array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer\u0027s capacity will be array.length, its position will be offset, its limit will be offset + length, its mark will be undefined, and its byte order will be BIG_ENDIAN. Its backing array will be the given array, and its array offset will be zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array that will back the new buffer",
          "\u003ccode\u003eoffset\u003c/code\u003e - The offset of the subarray to be used; must be non-negative and no larger than \n\u003ccode\u003earray.length\u003c/code\u003e. The new buffer\u0027s position will be set to this value.",
          "\u003ccode\u003elength\u003c/code\u003e - The length of the subarray to be used; must be non-negative and no larger than \n\u003ccode\u003earray.length - offset\u003c/code\u003e. The new buffer\u0027s limit will be set to \n\u003ccode\u003eoffset + length\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eoffset\u003c/code\u003e and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold"
        ],
        "return": [
          "The new byte buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "array"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "wrap",
      "comment": "Wraps a byte array into a buffer. The new buffer will be backed by the given byte array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer\u0027s capacity and limit will be array.length, its position will be zero, its mark will be undefined, and its byte order will be BIG_ENDIAN. Its backing array will be the given array, and its array offset will be zero.",
      "tagMap": {
        "param": [
          "\u003ccode\u003earray\u003c/code\u003e - The array that will back this buffer"
        ],
        "return": [
          "The new byte buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "slice",
      "comment": "Creates a new byte buffer whose content is a shared subsequence of this buffer\u0027s content. The content of the new buffer will start at this buffer\u0027s current position. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer, its mark will be undefined, and its byte order will be BIG_ENDIAN. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ByteBuffer.html#alignedSlice(int)\"\u003e\u003ccode\u003ealignedSlice(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#slice()\"\u003eslice\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The new byte buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "slice",
      "comment": "Creates a new byte buffer whose content is a shared subsequence of this buffer\u0027s content. The content of the new buffer will start at position index in this buffer, and will contain length elements. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be length, its mark will be undefined, and its byte order will be BIG_ENDIAN. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#slice(int,int)\"\u003eslice\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The position in this buffer at which the content of the new buffer will start; must be non-negative and no larger than \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#limit()\"\u003e\u003ccode\u003elimit()\u003c/code\u003e\u003c/a\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The number of elements the new buffer will contain; must be non-negative and no larger than \n\u003ccode\u003elimit() - index\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or greater than \n\u003ccode\u003elimit()\u003c/code\u003e, \n\u003ccode\u003elength\u003c/code\u003e is negative, or \n\u003ccode\u003elength \u0026gt; limit() - index\u003c/code\u003e"
        ],
        "return": [
          "The new buffer"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "duplicate",
      "comment": "Creates a new byte buffer that shares this buffer\u0027s content. The content of the new buffer will be that of this buffer. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s capacity, limit, position, and mark values will be identical to those of this buffer, and its byte order will be BIG_ENDIAN. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#duplicate()\"\u003eduplicate\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The new byte buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "asReadOnlyBuffer",
      "comment": "Creates a new, read-only byte buffer that shares this buffer\u0027s content. The content of the new buffer will be that of this buffer. Changes to this buffer\u0027s content will be visible in the new buffer; the new buffer itself, however, will be read-only and will not allow the shared content to be modified. The two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s capacity, limit, position, and mark values will be identical to those of this buffer, and its byte order will be BIG_ENDIAN. If this buffer is itself read-only then this method behaves in exactly the same way as the duplicate method.",
      "tagMap": {
        "return": [
          "The new, read-only byte buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "get",
      "comment": "Relative get method. Reads the byte at this buffer\u0027s current position, and then increments the position.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If the buffer\u0027s current position is not smaller than its limit"
        ],
        "return": [
          "The byte at the buffer\u0027s current position"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "put",
      "comment": "Relative put method (optional operation). Writes the given byte into this buffer at the current position, and then increments the position.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - The byte to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If this buffer\u0027s current position is not smaller than its limit",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "get",
      "comment": "Absolute get method. Reads the byte at the given index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index from which the byte will be read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit"
        ],
        "return": [
          "The byte at the given index"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "put",
      "comment": "Absolute put method (optional operation). Writes the given byte into this buffer at the given index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index at which the byte will be written",
          "\u003ccode\u003eb\u003c/code\u003e - The byte value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "dst"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Relative bulk get method. This method transfers bytes from this buffer into the given destination array. If there are fewer bytes remaining in the buffer than are required to satisfy the request, that is, if length \u003e remaining(), then no bytes are transferred and a BufferUnderflowException is thrown. Otherwise, this method copies length bytes from this buffer into the given array, starting at the current position of this buffer and at the given offset in the array. The position of this buffer is then incremented by length. In other words, an invocation of this method of the form src.get(dst, off, len) has exactly the same effect as the loop \n     for (int i \u003d off; i \u003c off + len; i++)\n         dst[i] \u003d src.get();\n except that it first checks that there are sufficient bytes in this buffer and it is potentially much more efficient.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edst\u003c/code\u003e - The array into which bytes are to be written",
          "\u003ccode\u003eoffset\u003c/code\u003e - The offset within the array of the first byte to be written; must be non-negative and no larger than \n\u003ccode\u003edst.length\u003c/code\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The maximum number of bytes to be written to the given array; must be non-negative and no larger than \n\u003ccode\u003edst.length - offset\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than \n\u003ccode\u003elength\u003c/code\u003e bytes remaining in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eoffset\u003c/code\u003e and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "dst"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Relative bulk get method. This method transfers bytes from this buffer into the given destination array. An invocation of this method of the form src.get(a) behaves in exactly the same way as the invocation      src.get(a, 0, a.length)",
      "tagMap": {
        "param": [
          "\u003ccode\u003edst\u003c/code\u003e - The destination array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than \n\u003ccode\u003elength\u003c/code\u003e bytes remaining in this buffer"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "dst"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Absolute bulk get method. This method transfers length bytes from this buffer into the given array, starting at the given index in this buffer and at the given offset in the array. The position of this buffer is unchanged. An invocation of this method of the form src.get(index, dst, offset, length) has exactly the same effect as the following loop except that it first checks the consistency of the supplied parameters and it is potentially much more efficient: \n     for (int i \u003d offset, j \u003d index; i \u003c offset + length; i++, j++)\n         dst[i] \u003d src.get(j);",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index in this buffer from which the first byte will be read; must be non-negative and less than \n\u003ccode\u003elimit()\u003c/code\u003e",
          "\u003ccode\u003edst\u003c/code\u003e - The destination array",
          "\u003ccode\u003eoffset\u003c/code\u003e - The offset within the array of the first byte to be written; must be non-negative and less than \n\u003ccode\u003edst.length\u003c/code\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The number of bytes to be written to the given array; must be non-negative and no larger than the smaller of \n\u003ccode\u003elimit() - index\u003c/code\u003e and \n\u003ccode\u003edst.length - offset\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eindex\u003c/code\u003e, \n\u003ccode\u003eoffset\u003c/code\u003e, and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "dst"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "get",
      "comment": "Absolute bulk get method. This method transfers bytes from this buffer into the given destination array. The position of this buffer is unchanged. An invocation of this method of the form src.get(index, dst) behaves in exactly the same way as the invocation:      src.get(index, dst, 0, dst.length)",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index in this buffer from which the first byte will be read; must be non-negative and less than \n\u003ccode\u003elimit()\u003c/code\u003e",
          "\u003ccode\u003edst\u003c/code\u003e - The destination array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative, not smaller than \n\u003ccode\u003elimit()\u003c/code\u003e, or \n\u003ccode\u003elimit() - index \u0026lt; dst.length\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Relative bulk put method (optional operation). This method transfers the bytes remaining in the given source buffer into this buffer. If there are more bytes remaining in the source buffer than in this buffer, that is, if src.remaining() \u003e remaining(), then no bytes are transferred and a BufferOverflowException is thrown. Otherwise, this method copies n \u003d src.remaining() bytes from the given buffer into this buffer, starting at each buffer\u0027s current position. The positions of both buffers are then incremented by n. In other words, an invocation of this method of the form dst.put(src) has exactly the same effect as the loop      while (src.hasRemaining())\n         dst.put(src.get()); except that it first checks that there is sufficient space in this buffer and it is potentially much more efficient. If this buffer and the source buffer share the same backing array or memory, then the result will be as if the source elements were first copied to an intermediate location before being written into this buffer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The source buffer from which bytes are to be read; must not be this buffer"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there is insufficient space in this buffer for the remaining bytes in the source buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the source buffer is this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Absolute bulk put method (optional operation). This method transfers length bytes into this buffer from the given source buffer, starting at the given offset in the source buffer and the given index in this buffer. The positions of both buffers are unchanged. In other words, an invocation of this method of the form dst.put(index, src, offset, length) has exactly the same effect as the loop \n for (int i \u003d offset, j \u003d index; i \u003c offset + length; i++, j++)\n     dst.put(j, src.get(i));\n except that it first checks the consistency of the supplied parameters and it is potentially much more efficient. If this buffer and the source buffer share the same backing array or memory, then the result will be as if the source elements were first copied to an intermediate location before being written into this buffer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index in this buffer at which the first byte will be written; must be non-negative and less than \n\u003ccode\u003elimit()\u003c/code\u003e",
          "\u003ccode\u003esrc\u003c/code\u003e - The buffer from which bytes are to be read",
          "\u003ccode\u003eoffset\u003c/code\u003e - The index within the source buffer of the first byte to be read; must be non-negative and less than \n\u003ccode\u003esrc.limit()\u003c/code\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The number of bytes to be read from the given buffer; must be non-negative and no larger than the smaller of \n\u003ccode\u003elimit() - index\u003c/code\u003e and \n\u003ccode\u003esrc.limit() - offset\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eindex\u003c/code\u003e, \n\u003ccode\u003eoffset\u003c/code\u003e, and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "16"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Relative bulk put method (optional operation). This method transfers bytes into this buffer from the given source array. If there are more bytes to be copied from the array than remain in this buffer, that is, if length \u003e remaining(), then no bytes are transferred and a BufferOverflowException is thrown. Otherwise, this method copies length bytes from the given array into this buffer, starting at the given offset in the array and at the current position of this buffer. The position of this buffer is then incremented by length. In other words, an invocation of this method of the form dst.put(src, off, len) has exactly the same effect as the loop \n     for (int i \u003d off; i \u003c off + len; i++)\n         dst.put(src[i]);\n except that it first checks that there is sufficient space in this buffer and it is potentially much more efficient.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The array from which bytes are to be read",
          "\u003ccode\u003eoffset\u003c/code\u003e - The offset within the array of the first byte to be read; must be non-negative and no larger than \n\u003ccode\u003esrc.length\u003c/code\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The number of bytes to be read from the given array; must be non-negative and no larger than \n\u003ccode\u003esrc.length - offset\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there is insufficient space in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eoffset\u003c/code\u003e and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "src"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "put",
      "comment": "Relative bulk put method (optional operation). This method transfers the entire content of the given source byte array into this buffer. An invocation of this method of the form dst.put(a) behaves in exactly the same way as the invocation      dst.put(a, 0, a.length)",
      "tagMap": {
        "param": [
          "\u003ccode\u003esrc\u003c/code\u003e - The source array"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there is insufficient space in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "src"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Absolute bulk put method (optional operation). This method transfers length bytes from the given array, starting at the given offset in the array and at the given index in this buffer. The position of this buffer is unchanged. An invocation of this method of the form dst.put(index, src, offset, length) has exactly the same effect as the following loop except that it first checks the consistency of the supplied parameters and it is potentially much more efficient: \n     for (int i \u003d offset, j \u003d index; i \u003c offset + length; i++, j++)\n         dst.put(j, src[i]);",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index in this buffer at which the first byte will be written; must be non-negative and less than \n\u003ccode\u003elimit()\u003c/code\u003e",
          "\u003ccode\u003esrc\u003c/code\u003e - The array from which bytes are to be read",
          "\u003ccode\u003eoffset\u003c/code\u003e - The offset within the array of the first byte to be read; must be non-negative and less than \n\u003ccode\u003esrc.length\u003c/code\u003e",
          "\u003ccode\u003elength\u003c/code\u003e - The number of bytes to be read from the given array; must be non-negative and no larger than the smaller of \n\u003ccode\u003elimit() - index\u003c/code\u003e and \n\u003ccode\u003esrc.length - offset\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the \n\u003ccode\u003eindex\u003c/code\u003e, \n\u003ccode\u003eoffset\u003c/code\u003e, and \n\u003ccode\u003elength\u003c/code\u003e parameters do not hold",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "src"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "put",
      "comment": "Absolute bulk put method (optional operation). This method copies bytes into this buffer from the given source array. The position of this buffer is unchanged. An invocation of this method of the form dst.put(index, src) behaves in exactly the same way as the invocation:      dst.put(index, src, 0, src.length);",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index in this buffer at which the first byte will be written; must be non-negative and less than \n\u003ccode\u003elimit()\u003c/code\u003e",
          "\u003ccode\u003esrc\u003c/code\u003e - The array from which bytes are to be read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative, not smaller than \n\u003ccode\u003elimit()\u003c/code\u003e, or \n\u003ccode\u003elimit() - index \u0026lt; src.length\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ],
        "since": [
          "13"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "hasArray",
      "comment": "Tells whether or not this buffer is backed by an accessible byte array. If this method returns true then the array and arrayOffset methods may safely be invoked.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#hasArray()\"\u003ehasArray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this buffer is backed by an array and is not read-only"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "array",
      "comment": "Returns the byte array that backs this buffer (optional operation). Modifications to this buffer\u0027s content will cause the returned array\u0027s content to be modified, and vice versa. Invoke the hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#array()\"\u003earray\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is backed by an array but is read-only",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this buffer is not backed by an accessible array"
        ],
        "return": [
          "The array that backs this buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "arrayOffset",
      "comment": "Returns the offset within this buffer\u0027s backing array of the first element of the buffer (optional operation). If this buffer is backed by an array then buffer position p corresponds to array index p + arrayOffset(). Invoke the hasArray method before invoking this method in order to ensure that this buffer has an accessible backing array.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#arrayOffset()\"\u003earrayOffset\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is backed by an array but is read-only",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If this buffer is not backed by an accessible array"
        ],
        "return": [
          "The offset within this buffer\u0027s array of the first element of the buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newPosition"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "position",
      "comment": "Sets this buffer\u0027s position. If the mark is defined and larger than the new position then it is discarded.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#position(int)\"\u003eposition\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewPosition\u003c/code\u003e - The new position value; must be non-negative and no larger than the current limit"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "newLimit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "limit",
      "comment": "Sets this buffer\u0027s limit. If the position is larger than the new limit then it is set to the new limit. If the mark is defined and larger than the new limit then it is discarded.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#limit(int)\"\u003elimit\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enewLimit\u003c/code\u003e - The new limit value; must be non-negative and no larger than this buffer\u0027s capacity"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mark",
      "comment": "Sets this buffer\u0027s mark at its position.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#mark()\"\u003emark\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reset",
      "comment": "Resets this buffer\u0027s position to the previously-marked position. Invoking this method neither changes nor discards the mark\u0027s value.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#reset()\"\u003ereset\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clear",
      "comment": "Clears this buffer. The position is set to zero, the limit is set to the capacity, and the mark is discarded. Invoke this method before using a sequence of channel-read or put operations to fill this buffer. For example:  buf.clear();     // Prepare buffer for reading\n in.read(buf);    // Read data This method does not actually erase the data in the buffer, but it is named as if it did because it will most often be used in situations in which that might as well be the case.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#clear()\"\u003eclear\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "flip",
      "comment": "Flips this buffer. The limit is set to the current position and then the position is set to zero. If the mark is defined then it is discarded. After a sequence of channel-read or put operations, invoke this method to prepare for a sequence of channel-write or relative get operations. For example:  buf.put(magic);    // Prepend header\n in.read(buf);      // Read data into rest of buffer\n buf.flip();        // Flip buffer\n out.write(buf);    // Write header + data to channel This method is often used in conjunction with the compact method when transferring data from one place to another.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#flip()\"\u003eflip\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "rewind",
      "comment": "Rewinds this buffer. The position is set to zero and the mark is discarded. Invoke this method before a sequence of channel-write or get operations, assuming that the limit has already been set appropriately. For example:  out.write(buf);    // Write remaining data\n buf.rewind();      // Rewind buffer\n buf.get(array);    // Copy data into array",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#rewind()\"\u003erewind\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "compact",
      "comment": "Compacts this buffer (optional operation). The bytes between the buffer\u0027s current position and its limit, if any, are copied to the beginning of the buffer. That is, the byte at index p \u003d position() is copied to index zero, the byte at index p + 1 is copied to index one, and so forth until the byte at index limit() - 1 is copied to index n \u003d limit() - 1 - p. The buffer\u0027s position is then set to n+1 and its limit is set to its capacity. The mark, if defined, is discarded. The buffer\u0027s position is set to the number of bytes copied, rather than to zero, so that an invocation of this method can be followed immediately by an invocation of another relative put method. Invoke this method after writing data from a buffer in case the write was incomplete. The following loop, for example, copies bytes from one channel to another via the buffer buf: \n   buf.clear();          // Prepare buffer for use\n   while (in.read(buf) \u003e\u003d 0 || buf.position !\u003d 0) {\n       buf.flip();\n       out.write(buf);\n       buf.compact();    // In case of partial write\n   }",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "isDirect",
      "comment": "Tells whether or not this byte buffer is direct.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html#isDirect()\"\u003eisDirect\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/Buffer.html\" title\u003d\"class in java.nio\"\u003eBuffer\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this buffer is direct"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string summarizing the state of this buffer.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A summary string"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the current hash code of this buffer. The hash code of a byte buffer depends only upon its remaining elements; that is, upon the elements from position() up to, and including, the element at limit() - 1. Because buffer hash codes are content-dependent, it is inadvisable to use buffers as keys in hash maps or similar data structures unless it is known that their contents will not change.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The current hash code of this buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "ob"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Tells whether or not this buffer is equal to another object. Two byte buffers are equal if, and only if, They have the same element type, They have the same number of remaining elements, and The two sequences of remaining elements, considered independently of their starting positions, are pointwise equal. A byte buffer is not equal to any other type of object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eob\u003c/code\u003e - The object to which this buffer is to be compared"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if, and only if, this buffer is equal to the given object"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "that"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares this buffer to another. Two byte buffers are compared by comparing their sequences of remaining elements lexicographically, without regard to the starting position of each sequence within its corresponding buffer. Pairs of byte elements are compared as if by invoking Byte.compare(byte,byte). A byte buffer is not comparable to any other type of object.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ByteBuffer.html\" title\u003d\"class in java.nio\"\u003eByteBuffer\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ethat\u003c/code\u003e - the object to be compared."
        ],
        "return": [
          "A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "that"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mismatch",
      "comment": "Finds and returns the relative index of the first mismatch between this buffer and a given buffer. The index is relative to the position of each buffer and will be in the range of 0 (inclusive) up to the smaller of the remaining elements in each buffer (exclusive). If the two buffers share a common prefix then the returned index is the length of the common prefix and it follows that there is a mismatch between the two buffers at that index within the respective buffers. If one buffer is a proper prefix of the other then the returned index is the smaller of the remaining elements in each buffer, and it follows that the index is only valid for the buffer with the larger number of remaining elements. Otherwise, there is no mismatch.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ethat\u003c/code\u003e - The byte buffer to be tested for a mismatch with this buffer"
        ],
        "return": [
          "The relative index of the first mismatch between this and the given buffer, otherwise -1 if no mismatch."
        ],
        "since": [
          "11"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteOrder",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "order",
      "comment": "Retrieves this buffer\u0027s byte order. The byte order is used when reading or writing multibyte values, and when creating buffers that are views of this byte buffer. The order of a newly-created byte buffer is always BIG_ENDIAN.",
      "tagMap": {
        "return": [
          "This buffer\u0027s byte order"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteOrder",
            "type": "Class"
          },
          "field": {
            "name": "bo"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "order",
      "comment": "Modifies this buffer\u0027s byte order.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebo\u003c/code\u003e - The new byte order, either \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ByteOrder.html#BIG_ENDIAN\"\u003e\u003ccode\u003eBIG_ENDIAN\u003c/code\u003e\u003c/a\u003e or \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ByteOrder.html#LITTLE_ENDIAN\"\u003e\u003ccode\u003eLITTLE_ENDIAN\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "unitSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "alignmentOffset",
      "comment": "Returns the memory address, pointing to the byte at the given index, modulo the given unit size. The return value is non-negative in the range of 0 (inclusive) up to unitSize (exclusive), with zero indicating that the address of the byte at the index is aligned for the unit size, and a positive value that the address is misaligned for the unit size. If the address of the byte at the index is misaligned, the return value represents how much the index should be adjusted to locate a byte at an aligned address. Specifically, the index should either be decremented by the return value if the latter is not greater than index, or be incremented by the unit size minus the return value. Therefore given  int value \u003d alignmentOffset(index, unitSize) then the identities  alignmentOffset(index - value, unitSize) \u003d\u003d 0, value ≤ index and  alignmentOffset(index + (unitSize - value), unitSize) \u003d\u003d 0 must hold.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ByteBuffer.html#alignedSlice(int)\"\u003e\u003ccode\u003ealignedSlice(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method may be utilized to determine if unit size bytes from an index can be accessed atomically, if supported by the native platform."
        ],
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index to query for alignment offset, must be non-negative, no upper bounds check is performed",
          "\u003ccode\u003eunitSize\u003c/code\u003e - The unit size in bytes, must be a power of \n\u003ccode\u003e2\u003c/code\u003e"
        ],
        "implNote": [
          "This implementation throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e for non-direct buffers when the given unit size is greater then \n\u003ccode\u003e8\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the index is negative or the unit size is not a power of \n\u003ccode\u003e2\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If the native platform does not guarantee stable alignment offset values for the given unit size when managing the memory regions of buffers of the same kind as this buffer (direct or non-direct). For example, if garbage collection would result in the moving of a memory region covered by a non-direct buffer from one location to another and both locations have different alignment characteristics."
        ],
        "return": [
          "The indexed byte\u0027s memory address modulo the unit size"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "unitSize"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "alignedSlice",
      "comment": "Creates a new byte buffer whose content is a shared and aligned subsequence of this buffer\u0027s content. The content of the new buffer will start at this buffer\u0027s current position rounded up to the index of the nearest aligned byte for the given unit size, and end at this buffer\u0027s limit rounded down to the index of the nearest aligned byte for the given unit size. If rounding results in out-of-bound values then the new buffer\u0027s capacity and limit will be zero. If rounding is within bounds the following expressions will be true for a new buffer nb and unit size unitSize: \n nb.alignmentOffset(0, unitSize) \u003d\u003d 0\n nb.alignmentOffset(nb.limit(), unitSize) \u003d\u003d 0\n Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer or fewer subject to alignment, its mark will be undefined, and its byte order will be BIG_ENDIAN. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ByteBuffer.html#alignmentOffset(int,int)\"\u003e\u003ccode\u003ealignmentOffset(int, int)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ByteBuffer.html#slice()\"\u003e\u003ccode\u003eslice()\u003c/code\u003e\u003c/a\u003e"
        ],
        "apiNote": [
          "This method may be utilized to create a new buffer where unit size bytes from index, that is a multiple of the unit size, may be accessed atomically, if supported by the native platform."
        ],
        "param": [
          "\u003ccode\u003eunitSize\u003c/code\u003e - The unit size in bytes, must be a power of \n\u003ccode\u003e2\u003c/code\u003e"
        ],
        "implNote": [
          "This implementation throws \n\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e for non-direct buffers when the given unit size is greater then \n\u003ccode\u003e8\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the unit size not a power of \n\u003ccode\u003e2\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - If the native platform does not guarantee stable aligned slices for the given unit size when managing the memory regions of buffers of the same kind as this buffer (direct or non-direct). For example, if garbage collection would result in the moving of a memory region covered by a non-direct buffer from one location to another and both locations have different alignment characteristics."
        ],
        "return": [
          "The new byte buffer"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getChar",
      "comment": "Relative get method for reading a char value. Reads the next two bytes at this buffer\u0027s current position, composing them into a char value according to the current byte order, and then increments the position by two.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than two bytes remaining in this buffer"
        ],
        "return": [
          "The char value at the buffer\u0027s current position"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putChar",
      "comment": "Relative put method for writing a char value (optional operation). Writes two bytes containing the given char value, in the current byte order, into this buffer at the current position, and then increments the position by two.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The char value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than two bytes remaining in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getChar",
      "comment": "Absolute get method for reading a char value. Reads two bytes at the given index, composing them into a char value according to the current byte order.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index from which the bytes will be read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus one"
        ],
        "return": [
          "The char value at the given index"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putChar",
      "comment": "Absolute put method for writing a char value (optional operation). Writes two bytes containing the given char value, in the current byte order, into this buffer at the given index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index at which the bytes will be written",
          "\u003ccode\u003evalue\u003c/code\u003e - The char value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus one",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.CharBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "asCharBuffer",
      "comment": "Creates a view of this byte buffer as a char buffer. The content of the new buffer will start at this buffer\u0027s current position. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by two, its mark will be undefined, and its byte order will be that of the byte buffer at the moment the view is created. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "tagMap": {
        "return": [
          "A new char buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getShort",
      "comment": "Relative get method for reading a short value. Reads the next two bytes at this buffer\u0027s current position, composing them into a short value according to the current byte order, and then increments the position by two.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than two bytes remaining in this buffer"
        ],
        "return": [
          "The short value at the buffer\u0027s current position"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putShort",
      "comment": "Relative put method for writing a short value (optional operation). Writes two bytes containing the given short value, in the current byte order, into this buffer at the current position, and then increments the position by two.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The short value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than two bytes remaining in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "short",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getShort",
      "comment": "Absolute get method for reading a short value. Reads two bytes at the given index, composing them into a short value according to the current byte order.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index from which the bytes will be read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus one"
        ],
        "return": [
          "The short value at the given index"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "short",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putShort",
      "comment": "Absolute put method for writing a short value (optional operation). Writes two bytes containing the given short value, in the current byte order, into this buffer at the given index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index at which the bytes will be written",
          "\u003ccode\u003evalue\u003c/code\u003e - The short value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus one",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ShortBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "asShortBuffer",
      "comment": "Creates a view of this byte buffer as a short buffer. The content of the new buffer will start at this buffer\u0027s current position. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by two, its mark will be undefined, and its byte order will be that of the byte buffer at the moment the view is created. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "tagMap": {
        "return": [
          "A new short buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getInt",
      "comment": "Relative get method for reading an int value. Reads the next four bytes at this buffer\u0027s current position, composing them into an int value according to the current byte order, and then increments the position by four.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than four bytes remaining in this buffer"
        ],
        "return": [
          "The int value at the buffer\u0027s current position"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putInt",
      "comment": "Relative put method for writing an int value (optional operation). Writes four bytes containing the given int value, in the current byte order, into this buffer at the current position, and then increments the position by four.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The int value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than four bytes remaining in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getInt",
      "comment": "Absolute get method for reading an int value. Reads four bytes at the given index, composing them into a int value according to the current byte order.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index from which the bytes will be read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus three"
        ],
        "return": [
          "The int value at the given index"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putInt",
      "comment": "Absolute put method for writing an int value (optional operation). Writes four bytes containing the given int value, in the current byte order, into this buffer at the given index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index at which the bytes will be written",
          "\u003ccode\u003evalue\u003c/code\u003e - The int value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus three",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.IntBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "asIntBuffer",
      "comment": "Creates a view of this byte buffer as an int buffer. The content of the new buffer will start at this buffer\u0027s current position. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by four, its mark will be undefined, and its byte order will be that of the byte buffer at the moment the view is created. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "tagMap": {
        "return": [
          "A new int buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getLong",
      "comment": "Relative get method for reading a long value. Reads the next eight bytes at this buffer\u0027s current position, composing them into a long value according to the current byte order, and then increments the position by eight.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than eight bytes remaining in this buffer"
        ],
        "return": [
          "The long value at the buffer\u0027s current position"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putLong",
      "comment": "Relative put method for writing a long value (optional operation). Writes eight bytes containing the given long value, in the current byte order, into this buffer at the current position, and then increments the position by eight.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The long value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than eight bytes remaining in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getLong",
      "comment": "Absolute get method for reading a long value. Reads eight bytes at the given index, composing them into a long value according to the current byte order.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index from which the bytes will be read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus seven"
        ],
        "return": [
          "The long value at the given index"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putLong",
      "comment": "Absolute put method for writing a long value (optional operation). Writes eight bytes containing the given long value, in the current byte order, into this buffer at the given index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index at which the bytes will be written",
          "\u003ccode\u003evalue\u003c/code\u003e - The long value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus seven",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.LongBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "asLongBuffer",
      "comment": "Creates a view of this byte buffer as a long buffer. The content of the new buffer will start at this buffer\u0027s current position. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by eight, its mark will be undefined, and its byte order will be that of the byte buffer at the moment the view is created. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "tagMap": {
        "return": [
          "A new long buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFloat",
      "comment": "Relative get method for reading a float value. Reads the next four bytes at this buffer\u0027s current position, composing them into a float value according to the current byte order, and then increments the position by four.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than four bytes remaining in this buffer"
        ],
        "return": [
          "The float value at the buffer\u0027s current position"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putFloat",
      "comment": "Relative put method for writing a float value (optional operation). Writes four bytes containing the given float value, in the current byte order, into this buffer at the current position, and then increments the position by four.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The float value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than four bytes remaining in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "float",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getFloat",
      "comment": "Absolute get method for reading a float value. Reads four bytes at the given index, composing them into a float value according to the current byte order.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index from which the bytes will be read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus three"
        ],
        "return": [
          "The float value at the given index"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putFloat",
      "comment": "Absolute put method for writing a float value (optional operation). Writes four bytes containing the given float value, in the current byte order, into this buffer at the given index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index at which the bytes will be written",
          "\u003ccode\u003evalue\u003c/code\u003e - The float value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus three",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.FloatBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "asFloatBuffer",
      "comment": "Creates a view of this byte buffer as a float buffer. The content of the new buffer will start at this buffer\u0027s current position. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by four, its mark will be undefined, and its byte order will be that of the byte buffer at the moment the view is created. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "tagMap": {
        "return": [
          "A new float buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDouble",
      "comment": "Relative get method for reading a double value. Reads the next eight bytes at this buffer\u0027s current position, composing them into a double value according to the current byte order, and then increments the position by eight.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferUnderflowException.html\" title\u003d\"class in java.nio\"\u003eBufferUnderflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than eight bytes remaining in this buffer"
        ],
        "return": [
          "The double value at the buffer\u0027s current position"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putDouble",
      "comment": "Relative put method for writing a double value (optional operation). Writes eight bytes containing the given double value, in the current byte order, into this buffer at the current position, and then increments the position by eight.",
      "tagMap": {
        "param": [
          "\u003ccode\u003evalue\u003c/code\u003e - The double value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/BufferOverflowException.html\" title\u003d\"class in java.nio\"\u003eBufferOverflowException\u003c/a\u003e\u003c/code\u003e - If there are fewer than eight bytes remaining in this buffer",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "double",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getDouble",
      "comment": "Absolute get method for reading a double value. Reads eight bytes at the given index, composing them into a double value according to the current byte order.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index from which the bytes will be read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus seven"
        ],
        "return": [
          "The double value at the given index"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.ByteBuffer",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "index"
          }
        },
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "putDouble",
      "comment": "Absolute put method for writing a double value (optional operation). Writes eight bytes containing the given double value, in the current byte order, into this buffer at the given index.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eindex\u003c/code\u003e - The index at which the bytes will be written",
          "\u003ccode\u003evalue\u003c/code\u003e - The double value to be written"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eindex\u003c/code\u003e is negative or not smaller than the buffer\u0027s limit, minus seven",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/ReadOnlyBufferException.html\" title\u003d\"class in java.nio\"\u003eReadOnlyBufferException\u003c/a\u003e\u003c/code\u003e - If this buffer is read-only"
        ],
        "return": [
          "This buffer"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.DoubleBuffer",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "asDoubleBuffer",
      "comment": "Creates a view of this byte buffer as a double buffer. The content of the new buffer will start at this buffer\u0027s current position. Changes to this buffer\u0027s content will be visible in the new buffer, and vice versa; the two buffers\u0027 position, limit, and mark values will be independent. The new buffer\u0027s position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by eight, its mark will be undefined, and its byte order will be that of the byte buffer at the moment the view is created. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.",
      "tagMap": {
        "return": [
          "A new double buffer"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.nio.ByteBuffer",
  "comment": "A byte buffer. \n\u003cp\u003e This class defines six categories of operations upon byte buffers: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e Absolute and relative \u003ca href\u003d\"#get()\"\u003e\u003ccode\u003e\u003ci\u003eget\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#put(byte)\"\u003e\u003ccode\u003e\u003ci\u003eput\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e methods that read and write single bytes; \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e Absolute and relative \u003ca href\u003d\"#get(byte%5B%5D)\"\u003e\u003ccode\u003e\u003ci\u003ebulk get\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e methods that transfer contiguous sequences of bytes from this buffer into an array; \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e Absolute and relative \u003ca href\u003d\"#put(byte%5B%5D)\"\u003e\u003ccode\u003e\u003ci\u003ebulk put\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e methods that transfer contiguous sequences of bytes from a byte array{#if[char]?, a string,} or some other byte buffer into this buffer;{#if[!byte]? and} \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e Absolute and relative \u003ca href\u003d\"#getChar()\"\u003e\u003ccode\u003e\u003ci\u003eget\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#putChar(char)\"\u003e\u003ccode\u003e\u003ci\u003eput\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e methods that read and write values of other primitive types, translating them to and from sequences of bytes in a particular byte order; \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e Methods for creating \u003ci\u003e\u003ca href\u003d\"#views\"\u003eview buffers\u003c/a\u003e\u003c/i\u003e, which allow a byte buffer to be viewed as a buffer containing values of some other primitive type; and \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e A method for \u003ca href\u003d\"#compact()\"\u003e\u003ccode\u003ecompacting\u003c/code\u003e\u003c/a\u003e a byte buffer. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Byte buffers can be created either by \u003ca href\u003d\"#allocate(int)\"\u003e\u003ccode\u003e\u003ci\u003eallocation\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e, which allocates space for the buffer\u0027s content, or by \u003ca href\u003d\"#wrap(byte%5B%5D)\"\u003e\u003ccode\u003e\u003ci\u003ewrapping\u003c/i\u003e\u003c/code\u003e\u003c/a\u003e an existing byte array {#if[char]?or string} into a buffer. \u003ca id\u003d\"direct\"\u003e\u003c/a\u003e \u003c/p\u003e\n\u003ch2\u003e Direct \u003ci\u003evs.\u003c/i\u003e non-direct buffers \u003c/h2\u003e \n\u003cp\u003e A byte buffer is either \u003ci\u003edirect\u003c/i\u003e or \u003ci\u003enon-direct\u003c/i\u003e. Given a direct byte buffer, the Java virtual machine will make a best effort to perform native I/O operations directly upon it. That is, it will attempt to avoid copying the buffer\u0027s content to (or from) an intermediate buffer before (or after) each invocation of one of the underlying operating system\u0027s native I/O operations. \u003c/p\u003e\n\u003cp\u003e A direct byte buffer may be created by invoking the \u003ca href\u003d\"#allocateDirect(int)\"\u003e\u003ccode\u003eallocateDirect\u003c/code\u003e\u003c/a\u003e factory method of this class. The buffers returned by this method typically have somewhat higher allocation and deallocation costs than non-direct buffers. The contents of direct buffers may reside outside of the normal garbage-collected heap, and so their impact upon the memory footprint of an application might not be obvious. It is therefore recommended that direct buffers be allocated primarily for large, long-lived buffers that are subject to the underlying system\u0027s native I/O operations. In general it is best to allocate direct buffers only when they yield a measurable gain in program performance. \u003c/p\u003e\n\u003cp\u003e A direct byte buffer may also be created by \u003ca href\u003d\"channels/FileChannel.html#map(java.nio.channels.FileChannel.MapMode,long,long)\"\u003e\u003ccode\u003emapping\u003c/code\u003e\u003c/a\u003e a region of a file directly into memory. An implementation of the Java platform may optionally support the creation of direct byte buffers from native code via JNI. If an instance of one of these kinds of buffers refers to an inaccessible region of memory then an attempt to access that region will not change the buffer\u0027s content and will cause an unspecified exception to be thrown either at the time of the access or at some later time. \u003c/p\u003e\n\u003cp\u003e Whether a byte buffer is direct or non-direct may be determined by invoking its \u003ca href\u003d\"#isDirect()\"\u003e\u003ccode\u003eisDirect\u003c/code\u003e\u003c/a\u003e method. This method is provided so that explicit buffer management can be done in performance-critical code. \u003ca id\u003d\"bin\"\u003e\u003c/a\u003e \u003c/p\u003e\n\u003ch2\u003e Access to binary data \u003c/h2\u003e \n\u003cp\u003e This class defines methods for reading and writing values of all other primitive types, except \u003ccode\u003eboolean\u003c/code\u003e. Primitive values are translated to (or from) sequences of bytes according to the buffer\u0027s current byte order, which may be retrieved and modified via the \u003ca href\u003d\"#order()\"\u003e\u003ccode\u003eorder\u003c/code\u003e\u003c/a\u003e methods. Specific byte orders are represented by instances of the \u003ca href\u003d\"ByteOrder.html\" title\u003d\"class in java.nio\"\u003e\u003ccode\u003eByteOrder\u003c/code\u003e\u003c/a\u003e class. The initial order of a byte buffer is always \u003ca href\u003d\"ByteOrder.html#BIG_ENDIAN\"\u003e\u003ccode\u003eBIG_ENDIAN\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e For access to heterogeneous binary data, that is, sequences of values of different types, this class defines a family of absolute and relative \u003ci\u003eget\u003c/i\u003e and \u003ci\u003eput\u003c/i\u003e methods for each type. For 32-bit floating-point values, for example, this class defines: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e float  \u003ca href\u003d\"#getFloat()\"\u003e\u003ccode\u003egetFloat()\u003c/code\u003e\u003c/a\u003e\n float  \u003ca href\u003d\"#getFloat(int)\"\u003e\u003ccode\u003egetFloat(int index)\u003c/code\u003e\u003c/a\u003e\n  void  \u003ca href\u003d\"#putFloat(float)\"\u003e\u003ccode\u003eputFloat(float f)\u003c/code\u003e\u003c/a\u003e\n  void  \u003ca href\u003d\"#putFloat(int,float)\"\u003e\u003ccode\u003eputFloat(int index, float f)\u003c/code\u003e\u003c/a\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Corresponding methods are defined for the types \u003ccode\u003echar, short, int, long\u003c/code\u003e, and \u003ccode\u003edouble\u003c/code\u003e. The index parameters of the absolute \u003ci\u003eget\u003c/i\u003e and \u003ci\u003eput\u003c/i\u003e methods are in terms of bytes rather than of the type being read or written. \u003ca id\u003d\"views\"\u003e\u003c/a\u003e \u003c/p\u003e\n\u003cp\u003e For access to homogeneous binary data, that is, sequences of values of the same type, this class defines methods that can create \u003ci\u003eviews\u003c/i\u003e of a given byte buffer. A \u003ci\u003eview buffer\u003c/i\u003e is simply another buffer whose content is backed by the byte buffer. Changes to the byte buffer\u0027s content will be visible in the view buffer, and vice versa; the two buffers\u0027 position, limit, and mark values are independent. The \u003ca href\u003d\"#asFloatBuffer()\"\u003e\u003ccode\u003easFloatBuffer\u003c/code\u003e\u003c/a\u003e method, for example, creates an instance of the \u003ca href\u003d\"FloatBuffer.html\" title\u003d\"class in java.nio\"\u003e\u003ccode\u003eFloatBuffer\u003c/code\u003e\u003c/a\u003e class that is backed by the byte buffer upon which the method is invoked. Corresponding view-creation methods are defined for the types \u003ccode\u003echar, short, int, long\u003c/code\u003e, and \u003ccode\u003edouble\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e View buffers have three important advantages over the families of type-specific \u003ci\u003eget\u003c/i\u003e and \u003ci\u003eput\u003c/i\u003e methods described above: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003cp\u003e A view buffer is indexed not in terms of bytes but rather in terms of the type-specific size of its values; \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e A view buffer provides relative bulk \u003ci\u003eget\u003c/i\u003e and \u003ci\u003eput\u003c/i\u003e methods that can transfer contiguous sequences of values between a buffer and an array or some other buffer of the same type; and \u003c/p\u003e\u003c/li\u003e \n \u003cli\u003e\u003cp\u003e A view buffer is potentially much more efficient because it will be direct if, and only if, its backing byte buffer is direct. \u003c/p\u003e\u003c/li\u003e \n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The byte order of a view buffer is fixed to be that of its byte buffer at the time that the view is created. \u003c/p\u003e \n\u003ch2\u003e Invocation chaining \u003c/h2\u003e \n\u003cp\u003e Methods in this class that do not otherwise have a value to return are specified to return the buffer upon which they are invoked. This allows method invocations to be chained. The sequence of statements \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e bb.putInt(0xCAFEBABE);\n bb.putShort(3);\n bb.putShort(45);\u003c/pre\u003e\n\u003c/blockquote\u003e can, for example, be replaced by the single statement \n\u003cblockquote\u003e\n \u003cpre\u003e bb.putInt(0xCAFEBABE).putShort(3).putShort(45);\u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}