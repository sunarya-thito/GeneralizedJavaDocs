{
  "packageName": "java.security",
  "simpleName": "KeyStoreSpi",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.security.Key",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.UnrecoverableKeyException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "password",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineGetKey",
      "comment": "Returns the key associated with the given alias, using the given password to recover it. The key must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry with a PrivateKeyEntry or SecretKeyEntry.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name",
          "\u003ccode\u003epassword\u003c/code\u003e - the password for recovering the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the algorithm for recovering the key cannot be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/UnrecoverableKeyException.html\" title\u003d\"class in java.security\"\u003eUnrecoverableKeyException\u003c/a\u003e\u003c/code\u003e - if the key cannot be recovered (e.g., the given password is wrong)."
        ],
        "return": [
          "the requested key, or null if the given alias does not exist or does not identify a key-related entry."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.Certificate",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineGetCertificateChain",
      "comment": "Returns the certificate chain associated with the given alias. The certificate chain must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry with a PrivateKeyEntry.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name"
        ],
        "return": [
          "the certificate chain (ordered with the user\u0027s certificate first and the root certificate authority last), or null if the given alias does not exist or does not contain a certificate chain"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.Certificate",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineGetCertificate",
      "comment": "Returns the certificate associated with the given alias. If the given alias name identifies an entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the trusted certificate contained in that entry is returned. If the given alias name identifies an entry created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the first element of the certificate chain in that entry (if a chain exists) is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name"
        ],
        "return": [
          "the certificate, or null if the given alias does not exist or does not contain a certificate."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineGetCreationDate",
      "comment": "Returns the creation date of the entry identified by the given alias.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name"
        ],
        "return": [
          "the creation date of this entry, or null if the given alias does not exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.KeyStoreException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.Key",
            "type": "Class"
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "password",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.cert.Certificate",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "chain",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineSetKeyEntry",
      "comment": "Assigns the given key to the given alias, protecting it with the given password. If the given key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key. If the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name",
          "\u003ccode\u003ekey\u003c/code\u003e - the key to be associated with the alias",
          "\u003ccode\u003epassword\u003c/code\u003e - the password to protect the key",
          "\u003ccode\u003echain\u003c/code\u003e - the certificate chain for the corresponding public key (only required if the given key is of type \n\u003ccode\u003ejava.security.PrivateKey\u003c/code\u003e)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the given key cannot be protected, or this operation fails for some other reason"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.KeyStoreException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "key",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.cert.Certificate",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "chain",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineSetKeyEntry",
      "comment": "Assigns the given key (that has already been protected) to the given alias. If the protected key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key. If the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name",
          "\u003ccode\u003ekey\u003c/code\u003e - the key (in protected format) to be associated with the alias",
          "\u003ccode\u003echain\u003c/code\u003e - the certificate chain for the corresponding public key (only useful if the protected key is of type \n\u003ccode\u003ejava.security.PrivateKey\u003c/code\u003e)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if this operation fails."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.KeyStoreException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.cert.Certificate",
            "type": "Class"
          },
          "name": "cert",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineSetCertificateEntry",
      "comment": "Assigns the given certificate to the given alias. If the given alias identifies an existing entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, the trusted certificate in the existing entry is overridden by the given certificate.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name",
          "\u003ccode\u003ecert\u003c/code\u003e - the certificate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the given alias already exists and does not identify an entry containing a trusted certificate, or this operation fails for some other reason."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.KeyStoreException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineDeleteEntry",
      "comment": "Deletes the entry identified by the given alias from this keystore.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the entry cannot be removed."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineAliases",
      "comment": "Lists all the alias names of this keystore.",
      "annotations": [],
      "tagMap": {
        "return": [
          "enumeration of the alias names"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineContainsAlias",
      "comment": "Checks if the given alias exists in this keystore.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name"
        ],
        "return": [
          "true if the alias exists, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineSize",
      "comment": "Retrieves the number of entries in this keystore.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the number of entries in this keystore"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineIsKeyEntry",
      "comment": "Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias for the keystore entry to be checked"
        ],
        "return": [
          "true if the entry identified by the given alias is a key-related, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineIsCertificateEntry",
      "comment": "Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias for the keystore entry to be checked"
        ],
        "return": [
          "true if the entry identified by the given alias contains a trusted certificate, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.security.cert.Certificate",
            "type": "Class"
          },
          "name": "cert",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineGetCertificateAlias",
      "comment": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate. This method attempts to match the given certificate with each keystore entry. If the entry being considered was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the given certificate is compared to that entry\u0027s certificate. If the entry being considered was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the given certificate is compared to the first element of that entry\u0027s certificate chain.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecert\u003c/code\u003e - the certificate to match with."
        ],
        "return": [
          "the alias name of the first entry with matching certificate, or null if no such entry exists in this keystore."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.cert.CertificateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "name": "stream",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "password",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineStore",
      "comment": "Stores this keystore to the given output stream, and protects its integrity with the given password.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estream\u003c/code\u003e - the output stream to which this keystore is written.",
          "\u003ccode\u003epassword\u003c/code\u003e - the password to generate the keystore integrity check"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there was an I/O problem with data",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the appropriate data integrity algorithm could not be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if any of the certificates included in the keystore data could not be stored"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.cert.CertificateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.security.KeyStore$LoadStoreParameter",
            "type": "Class"
          },
          "name": "param",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "engineStore",
      "comment": "Stores this keystore using the given KeyStore.LoadStoreParmeter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparam\u003c/code\u003e - the \n\u003ccode\u003eKeyStore.LoadStoreParmeter\u003c/code\u003e that specifies how to store the keystore, which may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003eKeyStore.LoadStoreParmeter\u003c/code\u003e input is not recognized",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there was an I/O problem with data",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the appropriate data integrity algorithm could not be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if any of the certificates included in the keystore data could not be stored"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.cert.CertificateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "name": "stream",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "password",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineLoad",
      "comment": "Loads the keystore from the given input stream. A password may be given to unlock the keystore (e.g. the keystore resides on a hardware token device), or to check the integrity of the keystore data. If a password is not given for integrity checking, then integrity checking is not performed.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estream\u003c/code\u003e - the input stream from which the keystore is loaded, or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003epassword\u003c/code\u003e - the password used to check the integrity of the keystore, the password used to unlock the keystore, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an I/O or format problem with the keystore data, if a password is required but not given, or if the given password was incorrect. If the error is due to a wrong password, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getCause()\"\u003e\u003ccode\u003ecause\u003c/code\u003e\u003c/a\u003e of the \n\u003ccode\u003eIOException\u003c/code\u003e should be an \n\u003ccode\u003eUnrecoverableKeyException\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the algorithm used to check the integrity of the keystore cannot be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if any of the certificates in the keystore could not be loaded"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.cert.CertificateException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.security.KeyStore$LoadStoreParameter",
            "type": "Class"
          },
          "name": "param",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "engineLoad",
      "comment": "Loads the keystore using the given KeyStore.LoadStoreParameter. Note that if this KeyStore has already been loaded, it is reinitialized and loaded again from the given parameter.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "The default implementation examines \n\u003ccode\u003eKeyStore.LoadStoreParameter\u003c/code\u003e to extract its password and pass it to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreSpi.html#engineLoad(java.io.InputStream,char%5B%5D)\"\u003e\u003ccode\u003eengineLoad(InputStream, char[])\u003c/code\u003e\u003c/a\u003e along with a \n\u003ccode\u003enull\u003c/code\u003e \n\u003ccode\u003eInputStream\u003c/code\u003e. \n\u003cp\u003e If \u003ccode\u003eKeyStore.LoadStoreParameter\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e then the password parameter will also be \u003ccode\u003enull\u003c/code\u003e. Otherwise the \u003ccode\u003eKeyStore.ProtectionParameter\u003c/code\u003e of \u003ccode\u003eKeyStore.LoadStoreParameter\u003c/code\u003e must be either a \u003ccode\u003eKeyStore.PasswordProtection\u003c/code\u003e or a \u003ccode\u003eKeyStore.CallbackHandlerProtection\u003c/code\u003e that supports \u003ccode\u003ePasswordCallback\u003c/code\u003e so that the password parameter can be extracted. If the \u003ccode\u003eKeyStore.ProtectionParameter\u003c/code\u003e is neither of those classes then a \u003ccode\u003eNoSuchAlgorithmException\u003c/code\u003e is thrown.\u003c/p\u003e"
        ],
        "param": [
          "\u003ccode\u003eparam\u003c/code\u003e - the \n\u003ccode\u003eKeyStore.LoadStoreParameter\u003c/code\u003e that specifies how to load the keystore, which may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003eKeyStore.LoadStoreParameter\u003c/code\u003e input is not recognized",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an I/O or format problem with the keystore data. If the error is due to an incorrect \n\u003ccode\u003eProtectionParameter\u003c/code\u003e (e.g. wrong password) the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getCause()\"\u003e\u003ccode\u003ecause\u003c/code\u003e\u003c/a\u003e of the \n\u003ccode\u003eIOException\u003c/code\u003e should be an \n\u003ccode\u003eUnrecoverableKeyException\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the algorithm used to check the integrity of the keystore cannot be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if any of the certificates in the keystore could not be loaded"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.KeyStore$Entry",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.KeyStoreException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.UnrecoverableEntryException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.KeyStore$ProtectionParameter",
            "type": "Class"
          },
          "name": "protParam",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "engineGetEntry",
      "comment": "Gets a KeyStore.Entry for the specified alias with the specified protection parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - get the \n\u003ccode\u003eKeyStore.Entry\u003c/code\u003e for this alias",
          "\u003ccode\u003eprotParam\u003c/code\u003e - the \n\u003ccode\u003eProtectionParameter\u003c/code\u003e used to protect the \n\u003ccode\u003eEntry\u003c/code\u003e, which may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the operation failed",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the algorithm for recovering the entry cannot be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/UnrecoverableEntryException.html\" title\u003d\"class in java.security\"\u003eUnrecoverableEntryException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003eprotParam\u003c/code\u003e were insufficient or invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/UnrecoverableKeyException.html\" title\u003d\"class in java.security\"\u003eUnrecoverableKeyException\u003c/a\u003e\u003c/code\u003e - if the entry is a \n\u003ccode\u003ePrivateKeyEntry\u003c/code\u003e or \n\u003ccode\u003eSecretKeyEntry\u003c/code\u003e and the specified \n\u003ccode\u003eprotParam\u003c/code\u003e does not contain the information needed to recover the key (e.g. wrong password)"
        ],
        "return": [
          "the \n\u003ccode\u003eKeyStore.Entry\u003c/code\u003e for the specified alias, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such entry"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.KeyStoreException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.KeyStore$Entry",
            "type": "Class"
          },
          "name": "entry",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.KeyStore$ProtectionParameter",
            "type": "Class"
          },
          "name": "protParam",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "engineSetEntry",
      "comment": "Saves a KeyStore.Entry under the specified alias. The specified protection parameter is used to protect the Entry. If an entry already exists for the specified alias, it is overridden.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - save the \n\u003ccode\u003eKeyStore.Entry\u003c/code\u003e under this alias",
          "\u003ccode\u003eentry\u003c/code\u003e - the \n\u003ccode\u003eEntry\u003c/code\u003e to save",
          "\u003ccode\u003eprotParam\u003c/code\u003e - the \n\u003ccode\u003eProtectionParameter\u003c/code\u003e used to protect the \n\u003ccode\u003eEntry\u003c/code\u003e, which may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if this operation fails"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "alias",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Class",
            "parameters": [
              {
                "upperBounds": [
                  {
                    "name": "java.security.KeyStore$Entry",
                    "type": "Class"
                  }
                ],
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          },
          "name": "entryClass",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "engineEntryInstanceOf",
      "comment": "Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name",
          "\u003ccode\u003eentryClass\u003c/code\u003e - the entry class"
        ],
        "return": [
          "true if the keystore \n\u003ccode\u003eEntry\u003c/code\u003e for the specified \n\u003ccode\u003ealias\u003c/code\u003e is an instance or subclass of the specified \n\u003ccode\u003eentryClass\u003c/code\u003e, false otherwise"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.InputStream",
            "type": "Class"
          },
          "name": "stream",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "engineProbe",
      "comment": "Probes the specified input stream to determine whether it contains a keystore that is supported by this implementation, or not.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "This method returns false by default. Keystore implementations should override this method to peek at the data stream directly or to use other content detection mechanisms."
        ],
        "param": [
          "\u003ccode\u003estream\u003c/code\u003e - the keystore data to be probed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an I/O problem with the keystore data.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if stream is \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "true if the keystore data is supported, otherwise false"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.security.KeyStoreSpi",
  "comment": "This class defines the \n\u003ci\u003eService Provider Interface\u003c/i\u003e (\n\u003cb\u003eSPI\u003c/b\u003e) for the \n\u003ccode\u003eKeyStore\u003c/code\u003e class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a keystore for a particular keystore type.",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStore.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eKeyStore\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}