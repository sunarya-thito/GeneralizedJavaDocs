{
  "packageName": "java.security",
  "simpleName": "SecurityPermission",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.security.BasicPermission",
    "type": "Class"
  },
  "members": [
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new SecurityPermission with the specified name. The name is the symbolic name of the SecurityPermission. An asterisk may appear at the end of the name, following a \".\", or by itself, to signify a wildcard match.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the SecurityPermission"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is empty."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "actions"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new SecurityPermission object with the specified name. The name is the symbolic name of the SecurityPermission, and the actions String is currently unused and should be null.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the SecurityPermission",
          "\u003ccode\u003eactions\u003c/code\u003e - should be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ename\u003c/code\u003e is empty."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.security.SecurityPermission",
  "comment": "This class is for security permissions. A \n\u003ccode\u003eSecurityPermission\u003c/code\u003e contains a name (also referred to as a \"target name\") but no actions list; you either have the named permission or you don\u0027t. \n\u003cp\u003e The target name is the name of a security configuration parameter (see below). Currently the \u003ccode\u003eSecurityPermission\u003c/code\u003e object is used to guard access to the \u003ca href\u003d\"AccessControlContext.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eAccessControlContext\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"Policy.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePolicy\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"Security.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"Signer.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSigner\u003c/code\u003e\u003c/a\u003e, and \u003ca href\u003d\"Identity.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eIdentity\u003c/code\u003e\u003c/a\u003e objects. \u003c/p\u003e\n\u003cp\u003e The following table lists the standard \u003ccode\u003eSecurityPermission\u003c/code\u003e target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  target name, what the permission allows, and associated risks\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003ePermission Target Name\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eWhat the Permission Allows\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eRisks of Allowing this Permission\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eauthProvider.{provider name}\u003c/th\u003e \n   \u003ctd\u003eAllow the named provider to be an AuthProvider for login and logout operations. \u003c/td\u003e \n   \u003ctd\u003eThis allows the named provider to perform login and logout operations. The named provider must extend \u003ccode\u003eAuthProvider\u003c/code\u003e and care must be taken to grant to a trusted provider since login operations involve sensitive authentication information such as PINs and passwords. \u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ecreateAccessControlContext\u003c/th\u003e \n   \u003ctd\u003eCreation of an AccessControlContext\u003c/td\u003e \n   \u003ctd\u003eThis allows someone to instantiate an AccessControlContext with a \u003ccode\u003eDomainCombiner\u003c/code\u003e. Extreme care must be taken when granting this permission. Malicious code could create a DomainCombiner that augments the set of permissions granted to code, and even grant the code \u003ca href\u003d\"AllPermission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eAllPermission\u003c/code\u003e\u003c/a\u003e.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetDomainCombiner\u003c/th\u003e \n   \u003ctd\u003eRetrieval of an AccessControlContext\u0027s DomainCombiner\u003c/td\u003e \n   \u003ctd\u003eThis allows someone to retrieve an AccessControlContext\u0027s \u003ccode\u003eDomainCombiner\u003c/code\u003e. Since DomainCombiners may contain sensitive information, this could potentially lead to a privacy leak.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetPolicy\u003c/th\u003e \n   \u003ctd\u003eRetrieval of the system-wide security policy (specifically, of the currently-installed Policy object)\u003c/td\u003e \n   \u003ctd\u003eThis allows someone to query the policy via the \u003ccode\u003egetPermissions\u003c/code\u003e call, which discloses which permissions would be granted to a given CodeSource. While revealing the policy does not compromise the security of the system, it does provide malicious code with additional information which it may use to better aim an attack. It is wise not to divulge more information than necessary.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetPolicy\u003c/th\u003e \n   \u003ctd\u003eSetting of the system-wide security policy (specifically, the Policy object)\u003c/td\u003e \n   \u003ctd\u003eGranting this permission is extremely dangerous, as malicious code may grant itself all the necessary permissions it needs to successfully mount an attack on the system.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003ecreatePolicy.{policy type}\u003c/th\u003e \n   \u003ctd\u003eGetting an instance of a Policy implementation from a provider\u003c/td\u003e \n   \u003ctd\u003eGranting this permission enables code to obtain a Policy object. Malicious code may query the Policy object to determine what permissions have been granted to code other than itself.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetProperty.{key}\u003c/th\u003e \n   \u003ctd\u003eRetrieval of the security property with the specified key\u003c/td\u003e \n   \u003ctd\u003eDepending on the particular key for which access has been granted, the code may have access to the list of security providers, as well as the location of the system-wide and user security policies. while revealing this information does not compromise the security of the system, it does provide malicious code with additional information which it may use to better aim an attack.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetProperty.{key}\u003c/th\u003e \n   \u003ctd\u003eSetting of the security property with the specified key\u003c/td\u003e \n   \u003ctd\u003eThis could include setting a security provider or defining the location of the system-wide security policy. Malicious code that has permission to set a new security provider may set a rogue provider that steals confidential information such as cryptographic private keys. In addition, malicious code with permission to set the location of the system-wide security policy may point it to a security policy that grants the attacker all the necessary permissions it requires to successfully mount an attack on the system.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003einsertProvider\u003c/th\u003e \n   \u003ctd\u003eAddition of a new provider\u003c/td\u003e \n   \u003ctd\u003eThis would allow somebody to introduce a possibly malicious provider (e.g., one that discloses the private keys passed to it) as the highest-priority provider. This would be possible because the Security object (which manages the installed providers) currently does not check the integrity or authenticity of a provider before attaching it. The \"insertProvider\" permission subsumes the \"insertProvider.{provider name}\" permission (see the section below for more information).\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eremoveProvider.{provider name}\u003c/th\u003e \n   \u003ctd\u003eRemoval of the specified provider\u003c/td\u003e \n   \u003ctd\u003eThis may change the behavior or disable execution of other parts of the program. If a provider subsequently requested by the program has been removed, execution may fail. Also, if the removed provider is not explicitly requested by the rest of the program, but it would normally be the provider chosen when a cryptography service is requested (due to its previous order in the list of providers), a different provider will be chosen instead, or no suitable provider will be found, thereby resulting in program failure.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eclearProviderProperties.{provider name}\u003c/th\u003e \n   \u003ctd\u003e\"Clearing\" of a Provider so that it no longer contains the properties used to look up services implemented by the provider\u003c/td\u003e \n   \u003ctd\u003eThis disables the lookup of services implemented by the provider. This may thus change the behavior or disable execution of other parts of the program that would normally utilize the Provider, as described under the \"removeProvider.{provider name}\" permission.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eputProviderProperty.{provider name}\u003c/th\u003e \n   \u003ctd\u003eSetting of properties for the specified Provider\u003c/td\u003e \n   \u003ctd\u003eThe provider properties each specify the name and location of a particular service implemented by the provider. By granting this permission, you let code replace the service specification with another one, thereby specifying a different implementation.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eremoveProviderProperty.{provider name}\u003c/th\u003e \n   \u003ctd\u003eRemoval of properties from the specified Provider\u003c/td\u003e \n   \u003ctd\u003eThis disables the lookup of services implemented by the provider. They are no longer accessible due to removal of the properties specifying their names and locations. This may change the behavior or disable execution of other parts of the program that would normally utilize the Provider, as described under the \"removeProvider.{provider name}\" permission.\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The following permissions have been superseded by newer permissions or are associated with classes that have been deprecated: \u003ca href\u003d\"Identity.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eIdentity\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"IdentityScope.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eIdentityScope\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"Signer.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSigner\u003c/code\u003e\u003c/a\u003e. Use of them is discouraged. See the applicable classes for more information. \u003c/p\u003e\n\u003ctable class\u003d\"striped\"\u003e \n \u003ccaption style\u003d\"display:none\"\u003e\n  target name, what the permission allows, and associated risks\n \u003c/caption\u003e \n \u003cthead\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"col\"\u003ePermission Target Name\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eWhat the Permission Allows\u003c/th\u003e \n   \u003cth scope\u003d\"col\"\u003eRisks of Allowing this Permission\u003c/th\u003e \n  \u003c/tr\u003e \n \u003c/thead\u003e \n \u003ctbody\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003einsertProvider.{provider name}\u003c/th\u003e \n   \u003ctd\u003eAddition of a new provider, with the specified name\u003c/td\u003e \n   \u003ctd\u003eUse of this permission is discouraged from further use because it is possible to circumvent the name restrictions by overriding the \u003ca href\u003d\"Provider.html#getName()\"\u003e\u003ccode\u003eProvider.getName()\u003c/code\u003e\u003c/a\u003e method. Also, there is an equivalent level of risk associated with granting code permission to insert a provider with a specific name, or any name it chooses. Users should use the \"insertProvider\" permission instead. \u003cp\u003eThis would allow somebody to introduce a possibly malicious provider (e.g., one that discloses the private keys passed to it) as the highest-priority provider. This would be possible because the Security object (which manages the installed providers) currently does not check the integrity or authenticity of a provider before attaching it.\u003c/p\u003e\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetSystemScope\u003c/th\u003e \n   \u003ctd\u003eSetting of the system identity scope\u003c/td\u003e \n   \u003ctd\u003eThis would allow an attacker to configure the system identity scope with certificates that should not be trusted, thereby granting applet or application code signed with those certificates privileges that would have been denied by the system\u0027s original identity scope.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetIdentityPublicKey\u003c/th\u003e \n   \u003ctd\u003eSetting of the public key for an Identity\u003c/td\u003e \n   \u003ctd\u003eIf the identity is marked as \"trusted\", this allows an attacker to introduce a different public key (e.g., its own) that is not trusted by the system\u0027s identity scope, thereby granting applet or application code signed with that public key privileges that would have been denied otherwise.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetIdentityInfo\u003c/th\u003e \n   \u003ctd\u003eSetting of a general information string for an Identity\u003c/td\u003e \n   \u003ctd\u003eThis allows attackers to set the general description for an identity. This may trick applications into using a different identity than intended or may prevent applications from finding a particular identity.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eaddIdentityCertificate\u003c/th\u003e \n   \u003ctd\u003eAddition of a certificate for an Identity\u003c/td\u003e \n   \u003ctd\u003eThis allows attackers to set a certificate for an identity\u0027s public key. This is dangerous because it affects the trust relationship across the system. This public key suddenly becomes trusted to a wider audience than it otherwise would be.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eremoveIdentityCertificate\u003c/th\u003e \n   \u003ctd\u003eRemoval of a certificate for an Identity\u003c/td\u003e \n   \u003ctd\u003eThis allows attackers to remove a certificate for an identity\u0027s public key. This is dangerous because it affects the trust relationship across the system. This public key suddenly becomes considered less trustworthy than it otherwise would be.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003eprintIdentity\u003c/th\u003e \n   \u003ctd\u003eViewing the name of a principal and optionally the scope in which it is used, and whether or not it is considered \"trusted\" in that scope\u003c/td\u003e \n   \u003ctd\u003eThe scope that is printed out may be a filename, in which case it may convey local system information. For example, here\u0027s a sample printout of an identity named \"carol\", who is marked not trusted in the user\u0027s identity database:\u003cbr\u003e carol[/home/luehe/identitydb.obj][not trusted]\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003egetSignerPrivateKey\u003c/th\u003e \n   \u003ctd\u003eRetrieval of a Signer\u0027s private key\u003c/td\u003e \n   \u003ctd\u003eIt is very dangerous to allow access to a private key; private keys are supposed to be kept secret. Otherwise, code can use the private key to sign various files and claim the signature came from the Signer.\u003c/td\u003e \n  \u003c/tr\u003e \n  \u003ctr\u003e \n   \u003cth scope\u003d\"row\"\u003esetSignerKeyPair\u003c/th\u003e \n   \u003ctd\u003eSetting of the key pair (public key and private key) for a Signer\u003c/td\u003e \n   \u003ctd\u003eThis would allow an attacker to replace somebody else\u0027s (the \"target\u0027s\") keypair with a possibly weaker keypair (e.g., a keypair of a smaller keysize). This also would allow the attacker to listen in on encrypted communication between the target and its peers. The target\u0027s peers might wrap an encryption session key under the target\u0027s \"new\" public key, which would allow the attacker (who possesses the corresponding private key) to unwrap the session key and decipher the communication data encrypted under that session key.\u003c/td\u003e \n  \u003c/tr\u003e \n \u003c/tbody\u003e \n\u003c/table\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/BasicPermission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eBasicPermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permissions.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissions\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PermissionCollection.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissionCollection\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityManager\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.security.SecurityPermission\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "implNote": [
      "Implementations may define additional target names, but should use naming conventions such as reverse domain name notation to avoid name clashes."
    ],
    "since": [
      "1.2"
    ]
  }
}