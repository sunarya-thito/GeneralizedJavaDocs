{
  "packageName": "java.security",
  "simpleName": "SecureRandomSpi",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "seed"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineSetSeed",
      "comment": "Reseeds this random object with the given seed. The seed supplements, rather than replaces, the existing seed. Thus, repeated calls are guaranteed never to reduce randomness.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eseed\u003c/code\u003e - the seed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineNextBytes",
      "comment": "Generates a user-specified number of random bytes. Some random number generators can only generate a limited amount of random bytes per invocation. If the size of bytes is greater than this limit, the implementation should invoke its generation process multiple times to completely fill the buffer before returning from this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - the array to be filled in with random bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        },
        {
          "type": {
            "name": "java.security.SecureRandomParameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineNextBytes",
      "comment": "Generates a user-specified number of random bytes with additional parameters. Some random number generators can only generate a limited amount of random bytes per invocation. If the size of bytes is greater than this limit, the implementation should invoke its generation process multiple times to completely fill the buffer before returning from this method.",
      "tagMap": {
        "implSpec": [
          "The default implementation throws an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e."
        ],
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - the array to be filled in with random bytes",
          "\u003ccode\u003eparams\u003c/code\u003e - additional parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the implementation has not overridden this method",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparams\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, illegal or unsupported by this \n\u003ccode\u003eSecureRandom\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "numBytes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineGenerateSeed",
      "comment": "Returns the given number of seed bytes. This call may be used to seed other random number generators.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enumBytes\u003c/code\u003e - the number of seed bytes to generate."
        ],
        "return": [
          "the seed bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.SecureRandomParameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineReseed",
      "comment": "Reseeds this random object with entropy input read from its entropy source with additional parameters. If this method is called by SecureRandom.reseed(), params will be null. Do not override this method if the implementation does not support reseeding.",
      "tagMap": {
        "implSpec": [
          "The default implementation throws an \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eUnsupportedOperationException\u003c/code\u003e\u003c/a\u003e."
        ],
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - extra parameters, can be \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the implementation has not overridden this method",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparams\u003c/code\u003e is illegal or unsupported by this \n\u003ccode\u003eSecureRandom\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.SecureRandomParameters",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineGetParameters",
      "comment": "Returns the effective SecureRandomParameters for this SecureRandom instance.",
      "tagMap": {
        "implSpec": [
          "The default implementation returns \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "return": [
          "the effective \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomParameters.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eSecureRandomParameters\u003c/code\u003e\u003c/a\u003e parameters, or \n\u003ccode\u003enull\u003c/code\u003e if no parameters were used."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a Human-readable string representation of this SecureRandom.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string representation"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor without a parameter.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.security.SecureRandomParameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor with a parameter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomParameters.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eSecureRandomParameters\u003c/code\u003e\u003c/a\u003e object. This argument can be \n\u003ccode\u003enull\u003c/code\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparams\u003c/code\u003e is unrecognizable or unsupported by this \n\u003ccode\u003eSecureRandom\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.security.SecureRandomSpi",
  "comment": "This class defines the \n\u003ci\u003eService Provider Interface\u003c/i\u003e (\n\u003cb\u003eSPI\u003c/b\u003e) for the \n\u003ca href\u003d\"SecureRandom.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSecureRandom\u003c/code\u003e\u003c/a\u003e class. \n\u003cp\u003e All the abstract methods in this class must be implemented by each service provider who wishes to supply the implementation of a cryptographically strong pseudo-random number generator.\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "If the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html#%3Cinit%3E(java.security.SecureRandomParameters)\"\u003e\u003ccode\u003eSecureRandomSpi(SecureRandomParameters)\u003c/code\u003e\u003c/a\u003e constructor is overridden in an implementation, it will always be called whenever a \n\u003ccode\u003eSecureRandom\u003c/code\u003e is instantiated. Precisely, if an object is instantiated with one of \n\u003ccode\u003eSecureRandom\u003c/code\u003e\u0027s \n\u003ccode\u003egetInstance\u003c/code\u003e methods \n\u003cem\u003ewithout\u003c/em\u003e a \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomParameters.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eSecureRandomParameters\u003c/code\u003e\u003c/a\u003e parameter, the constructor will be called with a \n\u003ccode\u003enull\u003c/code\u003e argument and the implementation is responsible for creating its own \n\u003ccode\u003eSecureRandomParameters\u003c/code\u003e parameter for use when \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html#engineGetParameters()\"\u003e\u003ccode\u003eengineGetParameters()\u003c/code\u003e\u003c/a\u003e is called. If an object is instantiated with one of \n\u003ccode\u003eSecureRandom\u003c/code\u003e\u0027s \n\u003ccode\u003egetInstance\u003c/code\u003e methods \n\u003cem\u003ewith\u003c/em\u003e a \n\u003ccode\u003eSecureRandomParameters\u003c/code\u003e argument, the constructor will be called with that argument. The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html#engineGetParameters()\"\u003e\u003ccode\u003eengineGetParameters()\u003c/code\u003e\u003c/a\u003e method must not return \n\u003ccode\u003enull\u003c/code\u003e. \n\u003cp\u003e Otherwise, if the \u003ccode\u003eSecureRandomSpi(SecureRandomParameters)\u003c/code\u003e constructor is not overridden in an implementation, the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html#%3Cinit%3E()\"\u003e\u003ccode\u003eSecureRandomSpi()\u003c/code\u003e\u003c/a\u003e constructor must be overridden and it will be called if an object is instantiated with one of \u003ccode\u003eSecureRandom\u003c/code\u003e\u0027s \u003ccode\u003egetInstance\u003c/code\u003e methods \u003cem\u003ewithout\u003c/em\u003e a \u003ccode\u003eSecureRandomParameters\u003c/code\u003e argument. Calling one of \u003ccode\u003eSecureRandom\u003c/code\u003e\u0027s \u003ccode\u003egetInstance\u003c/code\u003e methods \u003cem\u003ewith\u003c/em\u003e a \u003ccode\u003eSecureRandomParameters\u003c/code\u003e argument will never return an instance of this implementation. The \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html#engineGetParameters()\"\u003e\u003ccode\u003eengineGetParameters()\u003c/code\u003e\u003c/a\u003e method must return \u003ccode\u003enull\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e See \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandom.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSecureRandom\u003c/code\u003e\u003c/a\u003e for additional details on thread safety. By default, a \u003ccode\u003eSecureRandomSpi\u003c/code\u003e implementation is considered to be not safe for use by multiple concurrent threads and \u003ccode\u003eSecureRandom\u003c/code\u003e will synchronize access to each of the applicable engine methods (see \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandom.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSecureRandom\u003c/code\u003e\u003c/a\u003e for the list of methods). However, if a \u003ccode\u003eSecureRandomSpi\u003c/code\u003e implementation is thread-safe, the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#service-attributes\"\u003e service provider attribute\u003c/a\u003e \"ThreadSafe\" should be set to \"true\" during its registration, as follows: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e put(\"SecureRandom.AlgName ThreadSafe\", \"true\");\u003c/pre\u003e \n\u003c/blockquote\u003e or \n\u003cblockquote\u003e\n \u003cpre\u003e putService(new Service(this, \"SecureRandom\", \"AlgName\", className,\n          null, Map.of(\"ThreadSafe\", \"true\")));\u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003ccode\u003eSecureRandom\u003c/code\u003e will call the applicable engine methods without any synchronization.\n\u003cp\u003e\u003c/p\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.security.SecureRandomSpi\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}