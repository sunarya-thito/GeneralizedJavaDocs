{
  "packageName": "java.security",
  "simpleName": "AccessController",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doPrivileged",
      "comment": "Performs the specified PrivilegedAction with privileges enabled. The action is performed with all of the permissions possessed by the caller\u0027s protection domain. If the action\u0027s run method throws an (unchecked) exception, it will propagate through this method. Note that any DomainCombiner associated with the current AccessControlContext will be ignored while the action is performed.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value returned by the PrivilegedAction\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction,AccessControlContext)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedExceptionAction)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedExceptionAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivilegedWithCombiner(java.security.PrivilegedAction)\"\u003e\u003ccode\u003edoPrivilegedWithCombiner(PrivilegedAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DomainCombiner.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eDomainCombiner\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the action is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value returned by the action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doPrivilegedWithCombiner",
      "comment": "Performs the specified PrivilegedAction with privileges enabled. The action is performed with all of the permissions possessed by the caller\u0027s protection domain. If the action\u0027s run method throws an (unchecked) exception, it will propagate through this method. This method preserves the current AccessControlContext\u0027s DomainCombiner (which may be null) while the action is performed.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value returned by the PrivilegedAction\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DomainCombiner.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eDomainCombiner\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the action is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value returned by the action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doPrivileged",
      "comment": "Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext. The action is performed with the intersection of the permissions possessed by the caller\u0027s protection domain, and those possessed by the domains represented by the specified AccessControlContext. If the action\u0027s run method throws an (unchecked) exception, it will propagate through this method. If a security manager is installed and the specified AccessControlContext was not created by system code and the caller\u0027s ProtectionDomain has not been granted the \"createAccessControlContext\" SecurityPermission, then the action is performed with no permissions.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value returned by the PrivilegedAction\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedExceptionAction,AccessControlContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed.",
          "\u003ccode\u003econtext\u003c/code\u003e - an \n\u003ci\u003eaccess control context\u003c/i\u003e representing the restriction to be applied to the caller\u0027s domain\u0027s privileges before performing the specified action. If the context is \n\u003ccode\u003enull\u003c/code\u003e, then no additional restriction is applied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the action is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value returned by the action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doPrivileged",
      "comment": "Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments. The action is performed with the intersection of the permissions possessed by the caller\u0027s protection domain, and those possessed by the domains represented by the specified AccessControlContext. If the action\u0027s run method throws an (unchecked) exception, it will propagate through this method. If a security manager is installed and the specified AccessControlContext was not created by system code and the caller\u0027s ProtectionDomain has not been granted the \"createAccessControlContext\" SecurityPermission, then the action is performed with no permissions.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value returned by the PrivilegedAction\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedExceptionAction,AccessControlContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed.",
          "\u003ccode\u003econtext\u003c/code\u003e - an \n\u003ci\u003eaccess control context\u003c/i\u003e representing the restriction to be applied to the caller\u0027s domain\u0027s privileges before performing the specified action. If the context is \n\u003ccode\u003enull\u003c/code\u003e, then no additional restriction is applied.",
          "\u003ccode\u003eperms\u003c/code\u003e - the \n\u003ccode\u003ePermission\u003c/code\u003e arguments which limit the scope of the caller\u0027s privileges. The number of arguments is variable."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if action or perms or any element of perms is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value returned by the action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doPrivilegedWithCombiner",
      "comment": "Performs the specified PrivilegedAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments. The action is performed with the intersection of the permissions possessed by the caller\u0027s protection domain, and those possessed by the domains represented by the specified AccessControlContext. If the action\u0027s run method throws an (unchecked) exception, it will propagate through this method. This method preserves the current AccessControlContext\u0027s DomainCombiner (which may be null) while the action is performed. If a security manager is installed and the specified AccessControlContext was not created by system code and the caller\u0027s ProtectionDomain has not been granted the \"createAccessControlContext\" SecurityPermission, then the action is performed with no permissions.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value returned by the PrivilegedAction\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedExceptionAction,AccessControlContext)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DomainCombiner.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eDomainCombiner\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed.",
          "\u003ccode\u003econtext\u003c/code\u003e - an \n\u003ci\u003eaccess control context\u003c/i\u003e representing the restriction to be applied to the caller\u0027s domain\u0027s privileges before performing the specified action. If the context is \n\u003ccode\u003enull\u003c/code\u003e, then no additional restriction is applied.",
          "\u003ccode\u003eperms\u003c/code\u003e - the \n\u003ccode\u003ePermission\u003c/code\u003e arguments which limit the scope of the caller\u0027s privileges. The number of arguments is variable."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if action or perms or any element of perms is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value returned by the action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doPrivileged",
      "comment": "Performs the specified PrivilegedExceptionAction with privileges enabled. The action is performed with all of the permissions possessed by the caller\u0027s protection domain. If the action\u0027s run method throws an unchecked exception, it will propagate through this method. Note that any DomainCombiner associated with the current AccessControlContext will be ignored while the action is performed.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value returned by the PrivilegedExceptionAction\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedExceptionAction,AccessControlContext)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction)\"\u003e\u003ccode\u003edoPrivilegedWithCombiner(PrivilegedExceptionAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DomainCombiner.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eDomainCombiner\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PrivilegedActionException.html\" title\u003d\"class in java.security\"\u003ePrivilegedActionException\u003c/a\u003e\u003c/code\u003e - if the specified action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method threw a \n\u003ci\u003echecked\u003c/i\u003e exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the action is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value returned by the action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doPrivilegedWithCombiner",
      "comment": "Performs the specified PrivilegedExceptionAction with privileges enabled. The action is performed with all of the permissions possessed by the caller\u0027s protection domain. If the action\u0027s run method throws an unchecked exception, it will propagate through this method. This method preserves the current AccessControlContext\u0027s DomainCombiner (which may be null) while the action is performed.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value returned by the PrivilegedExceptionAction\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedExceptionAction,AccessControlContext)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DomainCombiner.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eDomainCombiner\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PrivilegedActionException.html\" title\u003d\"class in java.security\"\u003ePrivilegedActionException\u003c/a\u003e\u003c/code\u003e - if the specified action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method threw a \n\u003ci\u003echecked\u003c/i\u003e exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the action is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value returned by the action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doPrivileged",
      "comment": "Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext. The action is performed with the intersection of the permissions possessed by the caller\u0027s protection domain, and those possessed by the domains represented by the specified AccessControlContext. If the action\u0027s run method throws an unchecked exception, it will propagate through this method. If a security manager is installed and the specified AccessControlContext was not created by system code and the caller\u0027s ProtectionDomain has not been granted the \"createAccessControlContext\" SecurityPermission, then the action is performed with no permissions.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value returned by the PrivilegedExceptionAction\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction,AccessControlContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed",
          "\u003ccode\u003econtext\u003c/code\u003e - an \n\u003ci\u003eaccess control context\u003c/i\u003e representing the restriction to be applied to the caller\u0027s domain\u0027s privileges before performing the specified action. If the context is \n\u003ccode\u003enull\u003c/code\u003e, then no additional restriction is applied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PrivilegedActionException.html\" title\u003d\"class in java.security\"\u003ePrivilegedActionException\u003c/a\u003e\u003c/code\u003e - if the specified action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method threw a \n\u003ci\u003echecked\u003c/i\u003e exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the action is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value returned by the action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doPrivileged",
      "comment": "Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments. The action is performed with the intersection of the permissions possessed by the caller\u0027s protection domain, and those possessed by the domains represented by the specified AccessControlContext. If the action\u0027s run method throws an (unchecked) exception, it will propagate through this method. If a security manager is installed and the specified AccessControlContext was not created by system code and the caller\u0027s ProtectionDomain has not been granted the \"createAccessControlContext\" SecurityPermission, then the action is performed with no permissions.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value returned by the PrivilegedExceptionAction\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction,AccessControlContext)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed.",
          "\u003ccode\u003econtext\u003c/code\u003e - an \n\u003ci\u003eaccess control context\u003c/i\u003e representing the restriction to be applied to the caller\u0027s domain\u0027s privileges before performing the specified action. If the context is \n\u003ccode\u003enull\u003c/code\u003e, then no additional restriction is applied.",
          "\u003ccode\u003eperms\u003c/code\u003e - the \n\u003ccode\u003ePermission\u003c/code\u003e arguments which limit the scope of the caller\u0027s privileges. The number of arguments is variable."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PrivilegedActionException.html\" title\u003d\"class in java.security\"\u003ePrivilegedActionException\u003c/a\u003e\u003c/code\u003e - if the specified action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method threw a \n\u003ci\u003echecked\u003c/i\u003e exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if action or perms or any element of perms is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value returned by the action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "T",
        "type": "Class"
      },
      "genericParameters": [
        {
          "name": "T",
          "type": "Variable"
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "doPrivilegedWithCombiner",
      "comment": "Performs the specified PrivilegedExceptionAction with privileges enabled and restricted by the specified AccessControlContext and with a privilege scope limited by specified Permission arguments. The action is performed with the intersection of the permissions possessed by the caller\u0027s protection domain, and those possessed by the domains represented by the specified AccessControlContext. If the action\u0027s run method throws an (unchecked) exception, it will propagate through this method. This method preserves the current AccessControlContext\u0027s DomainCombiner (which may be null) while the action is performed. If a security manager is installed and the specified AccessControlContext was not created by system code and the caller\u0027s ProtectionDomain has not been granted the \"createAccessControlContext\" SecurityPermission, then the action is performed with no permissions.",
      "annotations": [],
      "tagMap": {
        "Type Parameters:": [
          "\u003ccode\u003eT\u003c/code\u003e - the type of the value returned by the PrivilegedExceptionAction\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessController.html#doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)\"\u003e\u003ccode\u003edoPrivileged(PrivilegedAction,AccessControlContext)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DomainCombiner.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eDomainCombiner\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eaction\u003c/code\u003e - the action to be performed.",
          "\u003ccode\u003econtext\u003c/code\u003e - an \n\u003ci\u003eaccess control context\u003c/i\u003e representing the restriction to be applied to the caller\u0027s domain\u0027s privileges before performing the specified action. If the context is \n\u003ccode\u003enull\u003c/code\u003e, then no additional restriction is applied.",
          "\u003ccode\u003eperms\u003c/code\u003e - the \n\u003ccode\u003ePermission\u003c/code\u003e arguments which limit the scope of the caller\u0027s privileges. The number of arguments is variable."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PrivilegedActionException.html\" title\u003d\"class in java.security\"\u003ePrivilegedActionException\u003c/a\u003e\u003c/code\u003e - if the specified action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method threw a \n\u003ci\u003echecked\u003c/i\u003e exception",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if action or perms or any element of perms is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the value returned by the action\u0027s \n\u003ccode\u003erun\u003c/code\u003e method."
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.AccessControlContext",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getContext",
      "comment": "This method takes a \"snapshot\" of the current calling context, which includes the current Thread\u0027s inherited AccessControlContext and any limited privilege scope, and places it in an AccessControlContext object. This context may then be checked at a later point, possibly in another thread.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessControlContext.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eAccessControlContext\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the AccessControlContext based on the current context."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "checkPermission",
      "comment": "Determines whether the access request indicated by the specified permission should be allowed or denied, based on the current AccessControlContext and security policy. This method quietly returns if the access request is permitted, or throws an AccessControlException otherwise. The getPermission method of the AccessControlException returns the perm Permission object instance.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eperm\u003c/code\u003e - the requested permission."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessControlException.html\" title\u003d\"class in java.security\"\u003eAccessControlException\u003c/a\u003e\u003c/code\u003e - if the specified permission is not permitted, based on the current security policy.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if the specified permission is \n\u003ccode\u003enull\u003c/code\u003e and is checked based on the security policy currently in effect."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.security.AccessController",
  "comment": "\u003cp\u003e The AccessController class is used for access control operations and decisions. \u003c/p\u003e\n\u003cp\u003e More specifically, the AccessController class is used for three purposes: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e to decide whether an access to a critical system resource is to be allowed or denied, based on the security policy currently in effect, \u003c/li\u003e\n \u003cli\u003eto mark code as being \"privileged\", thus affecting subsequent access determinations, and \u003c/li\u003e\n \u003cli\u003eto obtain a \"snapshot\" of the current calling context so access-control decisions from a different context can be made with respect to the saved context. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The \u003ca href\u003d\"#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003echeckPermission\u003c/code\u003e\u003c/a\u003e method determines whether the access request indicated by a specified permission should be granted or denied. A sample call appears below. In this example, \u003ccode\u003echeckPermission\u003c/code\u003e will determine whether or not to grant \"read\" access to the file named \"testFile\" in the \"/temp\" directory. \u003c/p\u003e\n\u003cpre\u003e\n FilePermission perm \u003d new FilePermission(\"/temp/testFile\", \"read\");\n AccessController.checkPermission(perm);\n\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e If a requested access is allowed, \u003ccode\u003echeckPermission\u003c/code\u003e returns quietly. If denied, an AccessControlException is thrown. AccessControlException can also be thrown if the requested permission is of an incorrect type or contains an invalid value. Such information is given whenever possible. Suppose the current thread traversed m callers, in the order of caller 1 to caller 2 to caller m. Then caller m invoked the \u003ccode\u003echeckPermission\u003c/code\u003e method. The \u003ccode\u003echeckPermission\u003c/code\u003e method determines whether access is granted or denied based on the following algorithm: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n for (int i \u003d m; i \u0026gt; 0; i--) {\n\n     if (caller i\u0027s domain does not have the permission)\n         throw AccessControlException\n\n     else if (caller i is marked as privileged) {\n         if (a context was specified in the call to doPrivileged)\n             context.checkPermission(permission)\n         if (limited permissions were specified in the call to doPrivileged) {\n             for (each limited permission) {\n                 if (the limited permission implies the requested permission)\n                     return;\n             }\n         } else\n             return;\n     }\n }\n\n // Next, check the context inherited when the thread was created.\n // Whenever a new thread is created, the AccessControlContext at\n // that time is stored and associated with the new thread, as the\n // \"inherited\" context.\n\n inheritedContext.checkPermission(permission);\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A caller can be marked as being \"privileged\" (see \u003ca href\u003d\"#doPrivileged(java.security.PrivilegedAction)\"\u003e\u003ccode\u003edoPrivileged\u003c/code\u003e\u003c/a\u003e and below). When making access control decisions, the \u003ccode\u003echeckPermission\u003c/code\u003e method stops checking if it reaches a caller that was marked as \"privileged\" via a \u003ccode\u003edoPrivileged\u003c/code\u003e call without a context argument (see below for information about a context argument). If that caller\u0027s domain has the specified permission and at least one limiting permission argument (if any) implies the requested permission, no further checking is done and \u003ccode\u003echeckPermission\u003c/code\u003e returns quietly, indicating that the requested access is allowed. If that domain does not have the specified permission, an exception is thrown, as usual. If the caller\u0027s domain had the specified permission but it was not implied by any limiting permission arguments given in the call to \u003ccode\u003edoPrivileged\u003c/code\u003e then the permission checking continues until there are no more callers or another \u003ccode\u003edoPrivileged\u003c/code\u003e call matches the requested permission and returns normally. \u003c/p\u003e\n\u003cp\u003e The normal use of the \"privileged\" feature is as follows. If you don\u0027t need to return a value from within the \"privileged\" block, do the following: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n somemethod() {\n     ...normal code here...\n     AccessController.doPrivileged(new PrivilegedAction\u0026lt;Void\u0026gt;() {\n         public Void run() {\n             // privileged code goes here, for example:\n             System.loadLibrary(\"awt\");\n             return null; // nothing to return\n         }\n     });\n     ...normal code here...\n }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e PrivilegedAction is an interface with a single method, named \u003ccode\u003erun\u003c/code\u003e. The above example shows creation of an implementation of that interface; a concrete implementation of the \u003ccode\u003erun\u003c/code\u003e method is supplied. When the call to \u003ccode\u003edoPrivileged\u003c/code\u003e is made, an instance of the PrivilegedAction implementation is passed to it. The \u003ccode\u003edoPrivileged\u003c/code\u003e method calls the \u003ccode\u003erun\u003c/code\u003e method from the PrivilegedAction implementation after enabling privileges, and returns the \u003ccode\u003erun\u003c/code\u003e method\u0027s return value as the \u003ccode\u003edoPrivileged\u003c/code\u003e return value (which is ignored in this example). \u003c/p\u003e\n\u003cp\u003e If you need to return a value, you can do something like the following: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n somemethod() {\n     ...normal code here...\n     String user \u003d AccessController.doPrivileged(\n         new PrivilegedAction\u0026lt;String\u0026gt;() {\n         public String run() {\n             return System.getProperty(\"user.name\");\n             }\n         });\n     ...normal code here...\n }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIf the action performed in your \u003ccode\u003erun\u003c/code\u003e method could throw a \"checked\" exception (those listed in the \u003ccode\u003ethrows\u003c/code\u003e clause of a method), then you need to use the \u003ccode\u003ePrivilegedExceptionAction\u003c/code\u003e interface instead of the \u003ccode\u003ePrivilegedAction\u003c/code\u003e interface: \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n somemethod() throws FileNotFoundException {\n     ...normal code here...\n     try {\n         FileInputStream fis \u003d AccessController.doPrivileged(\n         new PrivilegedExceptionAction\u0026lt;FileInputStream\u0026gt;() {\n             public FileInputStream run() throws FileNotFoundException {\n                 return new FileInputStream(\"someFile\");\n             }\n         });\n     } catch (PrivilegedActionException e) {\n         // e.getException() should be an instance of FileNotFoundException,\n         // as only \"checked\" exceptions will be \"wrapped\" in a\n         // PrivilegedActionException.\n         throw (FileNotFoundException) e.getException();\n     }\n     ...normal code here...\n  }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Be *very* careful in your use of the \"privileged\" construct, and always remember to make the privileged code section as small as possible. You can pass \u003ccode\u003ePermission\u003c/code\u003e arguments to further limit the scope of the \"privilege\" (see below). \u003c/p\u003e\n\u003cp\u003e Note that \u003ccode\u003echeckPermission\u003c/code\u003e always performs security checks within the context of the currently executing thread. Sometimes a security check that should be made within a given context will actually need to be done from within a \u003ci\u003edifferent\u003c/i\u003e context (for example, from within a worker thread). The \u003ca href\u003d\"#getContext()\"\u003e\u003ccode\u003egetContext\u003c/code\u003e\u003c/a\u003e method and AccessControlContext class are provided for this situation. The \u003ccode\u003egetContext\u003c/code\u003e method takes a \"snapshot\" of the current calling context, and places it in an AccessControlContext object, which it returns. A sample call is the following: \u003c/p\u003e\n\u003cpre\u003e\n AccessControlContext acc \u003d AccessController.getContext()\n\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e AccessControlContext itself has a \u003ccode\u003echeckPermission\u003c/code\u003e method that makes access decisions based on the context \u003ci\u003eit\u003c/i\u003e encapsulates, rather than that of the current execution thread. Code within a different context can thus call that method on the previously-saved AccessControlContext object. A sample call is the following: \u003c/p\u003e\n\u003cpre\u003e\n acc.checkPermission(permission)\n\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e There are also times where you don\u0027t know a priori which permissions to check the context against. In these cases you can use the doPrivileged method that takes a context. You can also limit the scope of the privileged code by passing additional \u003ccode\u003ePermission\u003c/code\u003e parameters. \u003c/p\u003e\n\u003cpre\u003e \u003ccode\u003e\n somemethod() {\n     AccessController.doPrivileged(new PrivilegedAction\u0026lt;Object\u0026gt;() {\n         public Object run() {\n             // Code goes here. Any permission checks within this\n             // run method will require that the intersection of the\n             // caller\u0027s protection domain and the snapshot\u0027s\n             // context have the desired permission. If a requested\n             // permission is not implied by the limiting FilePermission\n             // argument then checking of the thread continues beyond the\n             // caller of doPrivileged.\n         }\n     }, acc, new FilePermission(\"/temp/*\", read));\n     ...normal code here...\n }\u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Passing a limiting \u003ccode\u003ePermission\u003c/code\u003e argument of an instance of \u003ccode\u003eAllPermission\u003c/code\u003e is equivalent to calling the equivalent \u003ccode\u003edoPrivileged\u003c/code\u003e method without limiting \u003ccode\u003ePermission\u003c/code\u003e arguments. Passing a zero length array of \u003ccode\u003ePermission\u003c/code\u003e disables the code privileges so that checking always continues beyond the caller of that \u003ccode\u003edoPrivileged\u003c/code\u003e method.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/AccessControlContext.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eAccessControlContext\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}