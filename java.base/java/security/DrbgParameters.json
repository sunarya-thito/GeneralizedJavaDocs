{
  "packageName": "java.security",
  "simpleName": "DrbgParameters",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.security.DrbgParameters$Instantiation",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "strength"
          }
        },
        {
          "type": {
            "name": "java.security.DrbgParameters$Capability",
            "type": "Class"
          },
          "field": {
            "name": "capability"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "personalizationString"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "instantiation",
      "comment": "Generates a DrbgParameters.Instantiation object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estrength\u003c/code\u003e - security strength in bits, -1 for default strength if used in \n\u003ccode\u003egetInstance\u003c/code\u003e.",
          "\u003ccode\u003ecapability\u003c/code\u003e - capability",
          "\u003ccode\u003epersonalizationString\u003c/code\u003e - personalization string as a byte array, can be \n\u003ccode\u003enull\u003c/code\u003e. The content of this byte array will be copied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ecapability\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estrength\u003c/code\u003e is less than -1"
        ],
        "return": [
          "a new \n\u003ccode\u003eInstantiation\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.DrbgParameters$NextBytes",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "strength"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "predictionResistance"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "additionalInput"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "nextBytes",
      "comment": "Generates a DrbgParameters.NextBytes object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003estrength\u003c/code\u003e - requested security strength in bits. If set to -1, the effective strength will be used.",
          "\u003ccode\u003epredictionResistance\u003c/code\u003e - prediction resistance requested",
          "\u003ccode\u003eadditionalInput\u003c/code\u003e - additional input, can be \n\u003ccode\u003enull\u003c/code\u003e. The content of this byte array will be copied."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003estrength\u003c/code\u003e is less than -1"
        ],
        "return": [
          "a new \n\u003ccode\u003eNextBytes\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.DrbgParameters$Reseed",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "predictionResistance"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "additionalInput"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "reseed",
      "comment": "Generates a DrbgParameters.Reseed object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epredictionResistance\u003c/code\u003e - prediction resistance requested",
          "\u003ccode\u003eadditionalInput\u003c/code\u003e - additional input, can be \n\u003ccode\u003enull\u003c/code\u003e. The content of this byte array will be copied."
        ],
        "return": [
          "a new \n\u003ccode\u003eReseed\u003c/code\u003e object"
        ]
      }
    }
  ],
  "innerClasses": [
    "java.security.DrbgParameters$Capability",
    "java.security.DrbgParameters$NextBytes",
    "java.security.DrbgParameters$Reseed",
    "java.security.DrbgParameters$Instantiation"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.security.DrbgParameters",
  "comment": "This class specifies the parameters used by a DRBG (Deterministic Random Bit Generator). \n\u003cp\u003e According to \u003ca href\u003d\"http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-90Ar1.pdf\"\u003e NIST Special Publication 800-90A Revision 1, Recommendation for Random Number Generation Using Deterministic Random Bit Generators\u003c/a\u003e (800-90Ar1), \u003c/p\u003e\n\u003cblockquote\u003e\n  A DRBG is based on a DRBG mechanism as specified in this Recommendation and includes a source of randomness. A DRBG mechanism uses an algorithm (i.e., a DRBG algorithm) that produces a sequence of bits from an initial value that is determined by a seed that is determined from the output of the randomness source.\" \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The 800-90Ar1 specification allows for a variety of DRBG implementation choices, such as: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e an entropy source, \u003c/li\u003e\n \u003cli\u003e a DRBG mechanism (for example, Hash_DRBG), \u003c/li\u003e\n \u003cli\u003e a DRBG algorithm (for example, SHA-256 for Hash_DRBG and AES-256 for CTR_DRBG. Please note that it is not the algorithm used in \u003ca href\u003d\"SecureRandom.html#getInstance(java.lang.String)\"\u003e\u003ccode\u003eSecureRandom.getInstance(java.lang.String)\u003c/code\u003e\u003c/a\u003e, which we will call a \u003cem\u003eSecureRandom algorithm\u003c/em\u003e below), \u003c/li\u003e\n \u003cli\u003e optional features, including prediction resistance and reseeding supports, \u003c/li\u003e\n \u003cli\u003e highest security strength. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e These choices are set in each implementation and are not directly managed by the \u003ccode\u003eSecureRandom\u003c/code\u003e API. Check your DRBG provider\u0027s documentation to find an appropriate implementation for the situation. \u003c/p\u003e\n\u003cp\u003e On the other hand, the 800-90Ar1 specification does have some configurable options, such as: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e required security strength, \u003c/li\u003e\n \u003cli\u003e if prediction resistance is required, \u003c/li\u003e\n \u003cli\u003e personalization string and additional input. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A DRBG instance can be instantiated with parameters from an \u003ca href\u003d\"DrbgParameters.Instantiation.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eDrbgParameters.Instantiation\u003c/code\u003e\u003c/a\u003e object and other information (for example, the nonce, which is not managed by this API). This maps to the \u003ccode\u003eInstantiate_function\u003c/code\u003e defined in NIST SP 800-90Ar1. \u003c/p\u003e\n\u003cp\u003e A DRBG instance can be reseeded with parameters from a \u003ca href\u003d\"DrbgParameters.Reseed.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eDrbgParameters.Reseed\u003c/code\u003e\u003c/a\u003e object. This maps to the \u003ccode\u003eReseed_function\u003c/code\u003e defined in NIST SP 800-90Ar1. Calling \u003ca href\u003d\"SecureRandom.html#reseed()\"\u003e\u003ccode\u003eSecureRandom.reseed()\u003c/code\u003e\u003c/a\u003e is equivalent to calling \u003ca href\u003d\"SecureRandom.html#reseed(java.security.SecureRandomParameters)\"\u003e\u003ccode\u003eSecureRandom.reseed(SecureRandomParameters)\u003c/code\u003e\u003c/a\u003e with the effective instantiated prediction resistance flag (as returned by \u003ca href\u003d\"SecureRandom.html#getParameters()\"\u003e\u003ccode\u003eSecureRandom.getParameters()\u003c/code\u003e\u003c/a\u003e) with no additional input. \u003c/p\u003e\n\u003cp\u003e A DRBG instance generates data with additional parameters from a \u003ca href\u003d\"DrbgParameters.NextBytes.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eDrbgParameters.NextBytes\u003c/code\u003e\u003c/a\u003e object. This maps to the \u003ccode\u003eGenerate_function\u003c/code\u003e defined in NIST SP 800-90Ar1. Calling \u003ca href\u003d\"SecureRandom.html#nextBytes(byte%5B%5D)\"\u003e\u003ccode\u003eSecureRandom.nextBytes(byte[])\u003c/code\u003e\u003c/a\u003e is equivalent to calling \u003ca href\u003d\"SecureRandom.html#nextBytes(byte%5B%5D,java.security.SecureRandomParameters)\"\u003e\u003ccode\u003eSecureRandom.nextBytes(byte[], SecureRandomParameters)\u003c/code\u003e\u003c/a\u003e with the effective instantiated strength and prediction resistance flag (as returned by \u003ca href\u003d\"SecureRandom.html#getParameters()\"\u003e\u003ccode\u003eSecureRandom.getParameters()\u003c/code\u003e\u003c/a\u003e) with no additional input. \u003c/p\u003e\n\u003cp\u003e A DRBG should be implemented as a subclass of \u003ca href\u003d\"SecureRandomSpi.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSecureRandomSpi\u003c/code\u003e\u003c/a\u003e. It is recommended that the implementation contain the 1-arg \u003ca href\u003d\"SecureRandomSpi.html#%3Cinit%3E(java.security.SecureRandomParameters)\"\u003econstructor\u003c/a\u003e that takes a \u003ccode\u003eDrbgParameters.Instantiation\u003c/code\u003e argument. If implemented this way, this implementation can be chosen by any \u003ccode\u003eSecureRandom.getInstance()\u003c/code\u003e method. If it is chosen by a \u003ccode\u003eSecureRandom.getInstance()\u003c/code\u003e with a \u003ca href\u003d\"SecureRandomParameters.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eSecureRandomParameters\u003c/code\u003e\u003c/a\u003e parameter, the parameter is passed into this constructor. If it is chosen by a \u003ccode\u003eSecureRandom.getInstance()\u003c/code\u003e without a \u003ccode\u003eSecureRandomParameters\u003c/code\u003e parameter, the constructor is called with a \u003ccode\u003enull\u003c/code\u003e argument and the implementation should choose its own parameters. Its \u003ca href\u003d\"SecureRandom.html#getParameters()\"\u003e\u003ccode\u003eSecureRandom.getParameters()\u003c/code\u003e\u003c/a\u003e must always return a non-null effective \u003ccode\u003eDrbgParameters.Instantiation\u003c/code\u003e object that reflects how the DRBG is actually instantiated. A caller can use this information to determine whether a \u003ccode\u003eSecureRandom\u003c/code\u003e object is a DRBG and what features it supports. Please note that the returned value does not necessarily equal to the \u003ccode\u003eDrbgParameters.Instantiation\u003c/code\u003e object passed into the \u003ccode\u003eSecureRandom.getInstance()\u003c/code\u003e call. For example, the requested capability can be \u003ca href\u003d\"DrbgParameters.Capability.html#NONE\"\u003e\u003ccode\u003eDrbgParameters.Capability.NONE\u003c/code\u003e\u003c/a\u003e but the effective value can be \u003ca href\u003d\"DrbgParameters.Capability.html#RESEED_ONLY\"\u003e\u003ccode\u003eDrbgParameters.Capability.RESEED_ONLY\u003c/code\u003e\u003c/a\u003e if the implementation supports reseeding. The implementation must implement the \u003ca href\u003d\"SecureRandomSpi.html#engineNextBytes(byte%5B%5D,java.security.SecureRandomParameters)\"\u003e\u003ccode\u003eSecureRandomSpi.engineNextBytes(byte[], SecureRandomParameters)\u003c/code\u003e\u003c/a\u003e method which takes a \u003ccode\u003eDrbgParameters.NextBytes\u003c/code\u003e parameter. Unless the result of \u003ca href\u003d\"SecureRandom.html#getParameters()\"\u003e\u003ccode\u003eSecureRandom.getParameters()\u003c/code\u003e\u003c/a\u003e has its \u003ca href\u003d\"DrbgParameters.Instantiation.html#getCapability()\"\u003ecapability\u003c/a\u003e being \u003ca href\u003d\"DrbgParameters.Capability.html#NONE\"\u003e\u003ccode\u003eNONE\u003c/code\u003e\u003c/a\u003e, it must implement \u003ca href\u003d\"SecureRandomSpi.html#engineReseed(java.security.SecureRandomParameters)\"\u003e\u003ccode\u003eSecureRandomSpi.engineReseed(SecureRandomParameters)\u003c/code\u003e\u003c/a\u003e which takes a \u003ccode\u003eDrbgParameters.Reseed\u003c/code\u003e parameter. \u003c/p\u003e\n\u003cp\u003e On the other hand, if a DRBG implementation does not contain a constructor that has an \u003ccode\u003eDrbgParameters.Instantiation\u003c/code\u003e argument (not recommended), it can only be chosen by a \u003ccode\u003eSecureRandom.getInstance()\u003c/code\u003e without a \u003ccode\u003eSecureRandomParameters\u003c/code\u003e parameter, but will not be chosen if a \u003ccode\u003egetInstance\u003c/code\u003e method with a \u003ccode\u003eSecureRandomParameters\u003c/code\u003e parameter is called. If implemented this way, its \u003ca href\u003d\"SecureRandom.html#getParameters()\"\u003e\u003ccode\u003eSecureRandom.getParameters()\u003c/code\u003e\u003c/a\u003e must return \u003ccode\u003enull\u003c/code\u003e, and it does not need to implement either \u003ca href\u003d\"SecureRandomSpi.html#engineNextBytes(byte%5B%5D,java.security.SecureRandomParameters)\"\u003e\u003ccode\u003eSecureRandomSpi.engineNextBytes(byte[], SecureRandomParameters)\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"SecureRandomSpi.html#engineReseed(java.security.SecureRandomParameters)\"\u003e\u003ccode\u003eSecureRandomSpi.engineReseed(SecureRandomParameters)\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e A DRBG might reseed itself automatically if the seed period is bigger than the maximum seed life defined by the DRBG mechanism. \u003c/p\u003e\n\u003cp\u003e A DRBG implementation should support serialization and deserialization by retaining the configuration and effective parameters, but the internal state must not be serialized and the deserialized object must be reinstantiated. \u003c/p\u003e\n\u003cp\u003e Examples: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e SecureRandom drbg;\n byte[] buffer \u003d new byte[32];\n\n // Any DRBG is OK\n drbg \u003d SecureRandom.getInstance(\"DRBG\");\n drbg.nextBytes(buffer);\n\n SecureRandomParameters params \u003d drbg.getParameters();\n if (params instanceof DrbgParameters.Instantiation) {\n     DrbgParameters.Instantiation ins \u003d (DrbgParameters.Instantiation) params;\n     if (ins.getCapability().supportsReseeding()) {\n         drbg.reseed();\n     }\n }\n\n // The following call requests a weak DRBG instance. It is only\n // guaranteed to support 112 bits of security strength.\n drbg \u003d SecureRandom.getInstance(\"DRBG\",\n         DrbgParameters.instantiation(112, NONE, null));\n\n // Both the next two calls will likely fail, because drbg could be\n // instantiated with a smaller strength with no prediction resistance\n // support.\n drbg.nextBytes(buffer,\n         DrbgParameters.nextBytes(256, false, \"more\".getBytes()));\n drbg.nextBytes(buffer,\n         DrbgParameters.nextBytes(112, true, \"more\".getBytes()));\n\n // The following call requests a strong DRBG instance, with a\n // personalization string. If it successfully returns an instance,\n // that instance is guaranteed to support 256 bits of security strength\n // with prediction resistance available.\n drbg \u003d SecureRandom.getInstance(\"DRBG\", DrbgParameters.instantiation(\n         256, PR_AND_RESEED, \"hello\".getBytes()));\n\n // Prediction resistance is not requested in this single call,\n // but an additional input is used.\n drbg.nextBytes(buffer,\n         DrbgParameters.nextBytes(-1, false, \"more\".getBytes()));\n\n // Same for this call.\n drbg.reseed(DrbgParameters.reseed(false, \"extra\".getBytes()));\u003c/pre\u003e \n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "implSpec": [
      "By convention, a provider should name its primary DRBG implementation with the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms\"\u003e standard \u003ccode\u003eSecureRandom\u003c/code\u003e algorithm name\u003c/a\u003e \"DRBG\"."
    ],
    "implNote": [
      "The following notes apply to the \"DRBG\" implementation in the SUN provider of the JDK reference implementation. \n\u003cp\u003e This implementation supports the Hash_DRBG and HMAC_DRBG mechanisms with DRBG algorithm SHA-224, SHA-512/224, SHA-256, SHA-512/256, SHA-384 and SHA-512, and CTR_DRBG (both using derivation function and not using derivation function) with DRBG algorithm AES-128, AES-192 and AES-256. \u003c/p\u003e\n\u003cp\u003e The mechanism name and DRBG algorithm name are determined by the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003esecurity property\u003c/a\u003e \u003ccode\u003esecurerandom.drbg.config\u003c/code\u003e. The default choice is Hash_DRBG with SHA-256. \u003c/p\u003e\n\u003cp\u003e For each combination, the security strength can be requested from 112 up to the highest strength it supports. Both reseeding and prediction resistance are supported. \u003c/p\u003e\n\u003cp\u003e Personalization string is supported through the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DrbgParameters.Instantiation.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eDrbgParameters.Instantiation\u003c/code\u003e\u003c/a\u003e class and additional input is supported through the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DrbgParameters.NextBytes.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eDrbgParameters.NextBytes\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DrbgParameters.Reseed.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eDrbgParameters.Reseed\u003c/code\u003e\u003c/a\u003e classes. \u003c/p\u003e\n\u003cp\u003e If a DRBG is not instantiated with a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DrbgParameters.Instantiation.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eDrbgParameters.Instantiation\u003c/code\u003e\u003c/a\u003e object explicitly, this implementation instantiates it with a default requested strength of 128 bits, no prediction resistance request, and no personalization string. These default instantiation parameters can also be customized with the \u003ccode\u003esecurerandom.drbg.config\u003c/code\u003e security property. \u003c/p\u003e\n\u003cp\u003e This implementation reads fresh entropy from the system default entropy source determined by the security property \u003ccode\u003esecurerandom.source\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Calling \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandom.html#generateSeed(int)\"\u003e\u003ccode\u003eSecureRandom.generateSeed(int)\u003c/code\u003e\u003c/a\u003e will directly read from this system default entropy source.\u003c/p\u003e"
    ],
    "since": [
      "9"
    ]
  }
}