{
  "packageName": "java.security",
  "simpleName": "Key",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.io.Serializable",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "serialVersionUID",
      "comment": "The class fingerprint that is set to indicate serialization compatibility with a previous version of the class.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.security.Key.serialVersionUID\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getAlgorithm",
      "comment": "Returns the standard algorithm name for this key. For example, \"DSA\" would indicate that this key is a DSA key. See the key related sections (KeyFactory, KeyGenerator, KeyPairGenerator, and SecretKeyFactory) in the Java Security Standard Algorithm Names Specification for information about standard key algorithm names.",
      "tagMap": {
        "return": [
          "the name of the algorithm associated with this key."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getFormat",
      "comment": "Returns the name of the primary encoding format of this key, or null if this key does not support encoding. The primary encoding format is named in terms of the appropriate ASN.1 data format, if an ASN.1 specification for this key exists. For example, the name of the ASN.1 data format for public keys is SubjectPublicKeyInfo, as defined by the X.509 standard; in this case, the returned format is \"X.509\". Similarly, the name of the ASN.1 data format for private keys is PrivateKeyInfo, as defined by the PKCS #8 standard; in this case, the returned format is \"PKCS#8\".",
      "tagMap": {
        "return": [
          "the primary encoding format of the key."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getEncoded",
      "comment": "Returns the key in its primary encoding format, or null if this key does not support encoding.",
      "tagMap": {
        "return": [
          "the encoded key, or null if the key does not support encoding."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.security.Key",
  "comment": "The Key interface is the top-level interface for all keys. It defines the functionality shared by all key objects. All keys have three characteristics: \n\u003cul\u003e \n \u003cli\u003eAn Algorithm \u003cp\u003eThis is the key algorithm for that key. The key algorithm is usually an encryption or asymmetric operation algorithm (such as DSA or RSA), which will work with those algorithms and with related algorithms (such as MD5 with RSA, SHA-1 with RSA, Raw DSA, etc.) The name of the algorithm of a key is obtained using the \u003ca href\u003d\"#getAlgorithm()\"\u003e\u003ccode\u003egetAlgorithm\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003eAn Encoded Form \u003cp\u003eThis is an external encoded form for the key used when a standard representation of the key is needed outside the Java Virtual Machine, as when transmitting the key to some other party. The key is encoded according to a standard format (such as X.509 \u003ccode\u003eSubjectPublicKeyInfo\u003c/code\u003e or PKCS#8), and is returned using the \u003ca href\u003d\"#getEncoded()\"\u003e\u003ccode\u003egetEncoded\u003c/code\u003e\u003c/a\u003e method. Note: The syntax of the ASN.1 type \u003ccode\u003eSubjectPublicKeyInfo\u003c/code\u003e is defined as follows: \u003c/p\u003e\u003cpre\u003e SubjectPublicKeyInfo ::\u003d SEQUENCE {\n   algorithm AlgorithmIdentifier,\n   subjectPublicKey BIT STRING }\n\n AlgorithmIdentifier ::\u003d SEQUENCE {\n   algorithm OBJECT IDENTIFIER,\n   parameters ANY DEFINED BY algorithm OPTIONAL }\n \u003c/pre\u003e For more information, see \u003ca href\u003d\"http://tools.ietf.org/html/rfc5280\"\u003eRFC 5280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile\u003c/a\u003e. \u003c/li\u003e\n \u003cli\u003eA Format \u003cp\u003eThis is the name of the format of the encoded key. It is returned by the \u003ca href\u003d\"#getFormat()\"\u003e\u003ccode\u003egetFormat\u003c/code\u003e\u003c/a\u003e method. \u003c/p\u003e\u003c/li\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/ul\u003e Keys are generally obtained through key generators, certificates, key stores or other classes used to manage keys. Keys may also be obtained from key specifications (transparent representations of the underlying key material) through the use of a key factory (see \n\u003ca href\u003d\"KeyFactory.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eKeyFactory\u003c/code\u003e\u003c/a\u003e). \n\u003cp\u003e A Key should use KeyRep as its serialized representation. Note that a serialized Key may contain sensitive information which should not be exposed in untrusted environments. See the \u003ca href\u003d\"../../../../specs/serialization/security.html\"\u003e Security Appendix\u003c/a\u003e of the Serialization Specification for more information.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PublicKey.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003ePublicKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PrivateKey.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003ePrivateKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyPair.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eKeyPair\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyPairGenerator.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eKeyPairGenerator\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyFactory.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eKeyFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyRep.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eKeyRep\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/spec/KeySpec.html\" title\u003d\"interface in java.security.spec\"\u003e\u003ccode\u003eKeySpec\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Identity.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eIdentity\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Signer.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSigner\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}