{
  "packageName": "java.security",
  "simpleName": "MessageDigest",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.security.MessageDigestSpi",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.security.MessageDigest",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a MessageDigest object that implements the specified digest algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new MessageDigest object encapsulating the MessageDigestSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the name of the algorithm requested. See the MessageDigest section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#messagedigest-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard algorithm names."
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no \n\u003ccode\u003eProvider\u003c/code\u003e supports a \n\u003ccode\u003eMessageDigestSpi\u003c/code\u003e implementation for the specified algorithm",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMessageDigest\u003c/code\u003e object that implements the specified algorithm"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.MessageDigest",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchProviderException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a MessageDigest object that implements the specified digest algorithm. A new MessageDigest object encapsulating the MessageDigestSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the name of the algorithm requested. See the MessageDigest section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#messagedigest-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard algorithm names.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the name of the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the provider name is \n\u003ccode\u003enull\u003c/code\u003e or empty",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eMessageDigestSpi\u003c/code\u003e implementation for the specified algorithm is not available from the specified provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider is not registered in the security provider list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMessageDigest\u003c/code\u003e object that implements the specified algorithm"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.MessageDigest",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        },
        {
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a MessageDigest object that implements the specified digest algorithm. A new MessageDigest object encapsulating the MessageDigestSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the name of the algorithm requested. See the MessageDigest section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#messagedigest-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard algorithm names.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified provider is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eMessageDigestSpi\u003c/code\u003e implementation for the specified algorithm is not available from the specified \n\u003ccode\u003eProvider\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eMessageDigest\u003c/code\u003e object that implements the specified algorithm"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getProvider",
      "comment": "Returns the provider of this message digest object.",
      "tagMap": {
        "return": [
          "the provider of this message digest object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "update",
      "comment": "Updates the digest using the specified byte.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - the byte with which to update the digest."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "input"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "update",
      "comment": "Updates the digest using the specified array of bytes, starting at the specified offset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - the array of bytes.",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset to start from in the array of bytes.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of bytes to use, starting at \n\u003ccode\u003eoffset\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "input"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "update",
      "comment": "Updates the digest using the specified array of bytes.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - the array of bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "update",
      "comment": "Update the digest using the specified ByteBuffer. The digest is updated using the input.remaining() bytes starting at input.position(). Upon return, the buffer\u0027s position will be equal to its limit; its limit will not have changed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - the ByteBuffer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "digest",
      "comment": "Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made.",
      "tagMap": {
        "return": [
          "the array of bytes for the resulting hash value."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.DigestException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "buf"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "digest",
      "comment": "Completes the hash computation by performing final operations such as padding. The digest is reset after this call is made.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebuf\u003c/code\u003e - output buffer for the computed digest",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset into the output buffer to begin storing the digest",
          "\u003ccode\u003elen\u003c/code\u003e - number of bytes within buf allotted for the digest"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DigestException.html\" title\u003d\"class in java.security\"\u003eDigestException\u003c/a\u003e\u003c/code\u003e - if an error occurs."
        ],
        "return": [
          "the number of bytes placed into \n\u003ccode\u003ebuf\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "input"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "digest",
      "comment": "Performs a final update on the digest using the specified array of bytes, then completes the digest computation. That is, this method first calls update(input), passing the input array to the update method, then calls digest().",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - the input to be updated before the digest is completed."
        ],
        "return": [
          "the array of bytes for the resulting hash value."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string representation of this message digest object.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a string representation of the object."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "digesta"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "digestb"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "isEqual",
      "comment": "Compares two digests for equality. Two digests are equal if they have the same length and all bytes at corresponding positions are equal.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edigesta\u003c/code\u003e - one of the digests to compare.",
          "\u003ccode\u003edigestb\u003c/code\u003e - the other digest to compare."
        ],
        "implNote": [
          "All bytes in \n\u003ccode\u003edigesta\u003c/code\u003e are examined to determine equality. The calculation time depends only on the length of \n\u003ccode\u003edigesta\u003c/code\u003e. It does not depend on the length of \n\u003ccode\u003edigestb\u003c/code\u003e or the contents of \n\u003ccode\u003edigesta\u003c/code\u003e and \n\u003ccode\u003edigestb\u003c/code\u003e."
        ],
        "return": [
          "true if the digests are equal, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reset",
      "comment": "Resets the digest for further use.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getAlgorithm",
      "comment": "Returns a string that identifies the algorithm, independent of implementation details. The name should be a standard Java Security name (such as \"SHA-256\"). See the MessageDigest section in the Java Security Standard Algorithm Names Specification for information about standard algorithm names.",
      "tagMap": {
        "return": [
          "the name of the algorithm"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getDigestLength",
      "comment": "Returns the length of the digest in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable.",
      "tagMap": {
        "return": [
          "the digest length in bytes, or 0 if this operation is not supported by the provider and the implementation is not cloneable."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.CloneNotSupportedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Returns a clone if the implementation is cloneable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/MessageDigestSpi.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/MessageDigestSpi.html\" title\u003d\"class in java.security\"\u003eMessageDigestSpi\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CloneNotSupportedException.html\" title\u003d\"class in java.lang\"\u003eCloneNotSupportedException\u003c/a\u003e\u003c/code\u003e - if this is called on an implementation that does not support \n\u003ccode\u003eCloneable\u003c/code\u003e."
        ],
        "return": [
          "a clone if the implementation is cloneable."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a message digest with the specified algorithm name.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard name of the digest algorithm. See the MessageDigest section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#messagedigest-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard algorithm names."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.security.MessageDigest",
  "comment": "This MessageDigest class provides applications the functionality of a message digest algorithm, such as SHA-1 or SHA-256. Message digests are secure one-way hash functions that take arbitrary-sized data and output a fixed-length hash value. \n\u003cp\u003eA MessageDigest object starts out initialized. The data is processed through it using the \u003ca href\u003d\"#update(byte)\"\u003e\u003ccode\u003eupdate\u003c/code\u003e\u003c/a\u003e methods. At any point \u003ca href\u003d\"#reset()\"\u003e\u003ccode\u003ereset\u003c/code\u003e\u003c/a\u003e can be called to reset the digest. Once all the data to be updated has been updated, one of the \u003ca href\u003d\"#digest()\"\u003e\u003ccode\u003edigest\u003c/code\u003e\u003c/a\u003e methods should be called to complete the hash computation. \u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003edigest\u003c/code\u003e method can be called once for a given number of updates. After \u003ccode\u003edigest\u003c/code\u003e has been called, the MessageDigest object is reset to its initialized state. \u003c/p\u003e\n\u003cp\u003eImplementations are free to implement the Cloneable interface. Client applications can test cloneability by attempting cloning and catching the CloneNotSupportedException: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n MessageDigest md \u003d MessageDigest.getInstance(\"SHA-256\");\n\n try {\n     md.update(toChapter1);\n     MessageDigest tc1 \u003d md.clone();\n     byte[] toChapter1Digest \u003d tc1.digest();\n     md.update(toChapter2);\n     ...etc.\n } catch (CloneNotSupportedException cnse) {\n     throw new DigestException(\"couldn\u0027t make digest of partial content\");\n }\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eNote that if a given implementation is not cloneable, it is still possible to compute intermediate digests by instantiating several instances, if the number of digests is known in advance. \u003c/p\u003e\n\u003cp\u003eNote that this class is abstract and extends from \u003ccode\u003eMessageDigestSpi\u003c/code\u003e for historical reasons. Application developers should only take notice of the methods defined in this \u003ccode\u003eMessageDigest\u003c/code\u003e class; all the methods in the superclass are intended for cryptographic service providers who wish to supply their own implementations of message digest algorithms. \u003c/p\u003e\n\u003cp\u003e Every implementation of the Java platform is required to support the following standard \u003ccode\u003eMessageDigest\u003c/code\u003e algorithms: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eSHA-1\u003c/code\u003e\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003eSHA-256\u003c/code\u003e\u003c/li\u003e \n\u003c/ul\u003e These algorithms are described in the \n\u003ca href\u003d\"../../../../specs/security/standard-names.html#messagedigest-algorithms\"\u003e MessageDigest section\u003c/a\u003e of the Java Security Standard Algorithm Names Specification. Consult the release documentation for your implementation to see if any other algorithms are supported.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DigestInputStream.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eDigestInputStream\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/DigestOutputStream.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eDigestOutputStream\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}