{
  "packageName": "java.security",
  "simpleName": "Service",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getType",
      "comment": "Get the type of this service. For example, MessageDigest.",
      "tagMap": {
        "return": [
          "the type of this service"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getAlgorithm",
      "comment": "Return the name of the algorithm of this service. For example, SHA-1.",
      "tagMap": {
        "return": [
          "the algorithm of this service"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getProvider",
      "comment": "Return the Provider of this service.",
      "tagMap": {
        "return": [
          "the Provider of this service"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getClassName",
      "comment": "Return the name of the class implementing this service.",
      "tagMap": {
        "return": [
          "the name of the class implementing this service"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getAttribute",
      "comment": "Return the value of the specified attribute or null if this attribute is not set for this Service.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the name of the requested attribute"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if name is null"
        ],
        "return": [
          "the value of the specified attribute or null if the attribute is not present"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "constructorParameter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "newInstance",
      "comment": "Return a new instance of the implementation described by this service. The security provider framework uses this method to construct implementations. Applications will typically not need to call it. The default implementation uses reflection to invoke the standard constructor for this type of service. Security providers can override this method to implement instantiation in a different way. For details and the values of constructorParameter that are valid for the various types of services see the Java Cryptography Architecture (JCA) Reference Guide.",
      "tagMap": {
        "param": [
          "\u003ccode\u003econstructorParameter\u003c/code\u003e - the value to pass to the constructor, or null if this type of service does not use a constructorParameter."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidParameterException\u003c/a\u003e\u003c/code\u003e - if the value of constructorParameter is invalid for this type of service.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if instantiation failed for any other reason."
        ],
        "return": [
          "a new implementation of this service"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "parameter"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "supportsParameter",
      "comment": "Test whether this Service can use the specified parameter. Returns false if this service cannot use the parameter. Returns true if this service can use the parameter, if a fast test is infeasible, or if the status is unknown. The security provider framework uses this method with some types of services to quickly exclude non-matching implementations for consideration. Applications will typically not need to call it. For details and the values of parameter that are valid for the various types of services see the top of this class and the Java Cryptography Architecture (JCA) Reference Guide. Security providers can override it to implement their own test.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparameter\u003c/code\u003e - the parameter to test"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidParameterException\u003c/a\u003e\u003c/code\u003e - if the value of parameter is invalid for this type of service or if this method cannot be used with this type of service"
        ],
        "return": [
          "false if this service cannot use the specified parameter; true if it can possibly use the parameter"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Return a String representation of this service.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a String representation of this service."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "className"
          }
        },
        {
          "type": {
            "name": "java.util.List",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "aliases"
          }
        },
        {
          "type": {
            "name": "java.util.Map",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              },
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "attributes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Construct a new service.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider that offers this service",
          "\u003ccode\u003etype\u003c/code\u003e - the type of this service",
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the algorithm name",
          "\u003ccode\u003eclassName\u003c/code\u003e - the name of the class implementing this service",
          "\u003ccode\u003ealiases\u003c/code\u003e - List of aliases or null if algorithm has no aliases",
          "\u003ccode\u003eattributes\u003c/code\u003e - Map of attributes or null if this implementation has no attributes"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if provider, type, algorithm, or className is null"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 9,
  "name": "java.security.Provider$Service",
  "comment": "The description of a security service. It encapsulates the properties of a service and contains a factory method to obtain new implementation instances of this service. \n\u003cp\u003eEach service has a provider that offers the service, a type, an algorithm name, and the name of the class that implements the service. Optionally, it also includes a list of alternate algorithm names for this service (aliases) and attributes, which are a map of (name, value) String pairs. \u003c/p\u003e\n\u003cp\u003eThis class defines the methods \u003ca href\u003d\"#supportsParameter(java.lang.Object)\"\u003e\u003ccode\u003esupportsParameter()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#newInstance(java.lang.Object)\"\u003e\u003ccode\u003enewInstance()\u003c/code\u003e\u003c/a\u003e which are used by the Java security framework when it searches for suitable services and instantiates them. The valid arguments to those methods depend on the type of service. For the service types defined within Java SE, see the \u003ca href\u003d\"https://docs.oracle.com/pls/topic/lookup?ctx\u003djavase16\u0026amp;id\u003dsecurity_guide_jca\"\u003eJava Cryptography Architecture (JCA) Reference Guide\u003c/a\u003e for the valid values. Note that components outside of Java SE can define additional types of services and their behavior. \u003c/p\u003e\n\u003cp\u003eInstances of this class are immutable.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.5"
    ]
  }
}