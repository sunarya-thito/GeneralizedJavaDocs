{
  "packageName": "java.security",
  "simpleName": "PolicySpi",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.ProtectionDomain",
            "type": "Class"
          },
          "field": {
            "name": "domain"
          }
        },
        {
          "type": {
            "name": "java.security.Permission",
            "type": "Class"
          },
          "field": {
            "name": "permission"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineImplies",
      "comment": "Check whether the policy has granted a Permission to a ProtectionDomain.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edomain\u003c/code\u003e - the ProtectionDomain to check.",
          "\u003ccode\u003epermission\u003c/code\u003e - check whether this permission is granted to the specified domain."
        ],
        "return": [
          "boolean true if the permission is granted to the domain."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineRefresh",
      "comment": "Refreshes/reloads the policy configuration. The behavior of this method depends on the implementation. For example, calling refresh on a file-based policy will cause the file to be re-read. The default implementation of this method does nothing. This method should be overridden if a refresh operation is supported by the policy implementation.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.security.PermissionCollection",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.CodeSource",
            "type": "Class"
          },
          "field": {
            "name": "codesource"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineGetPermissions",
      "comment": "Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource. The default implementation of this method returns Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden if the policy implementation can return a set of permissions granted to a CodeSource.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodesource\u003c/code\u003e - the CodeSource to which the returned PermissionCollection has been granted."
        ],
        "return": [
          "a set of permissions granted to the specified CodeSource. If this operation is supported, the returned set of permissions must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.PermissionCollection",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.ProtectionDomain",
            "type": "Class"
          },
          "field": {
            "name": "domain"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineGetPermissions",
      "comment": "Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain. The default implementation of this method returns Policy.UNSUPPORTED_EMPTY_COLLECTION object. This method can be overridden if the policy implementation can return a set of permissions granted to a ProtectionDomain.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edomain\u003c/code\u003e - the ProtectionDomain to which the returned PermissionCollection has been granted."
        ],
        "return": [
          "a set of permissions granted to the specified ProtectionDomain. If this operation is supported, the returned set of permissions must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.security.PolicySpi",
  "comment": "This class defines the \n\u003ci\u003eService Provider Interface\u003c/i\u003e (\n\u003cb\u003eSPI\u003c/b\u003e) for the \n\u003ccode\u003ePolicy\u003c/code\u003e class. All the abstract methods in this class must be implemented by each service provider who wishes to supply a Policy implementation. \n\u003cp\u003e Subclass implementations of this abstract class must provide a public constructor that takes a \u003ccode\u003ePolicy.Parameters\u003c/code\u003e object as an input parameter. This constructor also must throw an IllegalArgumentException if it does not understand the \u003ccode\u003ePolicy.Parameters\u003c/code\u003e input.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}