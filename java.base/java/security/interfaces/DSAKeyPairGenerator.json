{
  "packageName": "java.security.interfaces",
  "simpleName": "DSAKeyPairGenerator",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.InvalidParameterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.security.interfaces.DSAParams",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        },
        {
          "type": {
            "name": "java.security.SecureRandom",
            "type": "Class"
          },
          "field": {
            "name": "random"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "initialize",
      "comment": "Initializes the key pair generator using the DSA family parameters (p,q and g) and an optional SecureRandom bit source. If a SecureRandom bit source is needed but not supplied, i.e. null, a default SecureRandom instance will be used.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - the parameters to use to generate the keys.",
          "\u003ccode\u003erandom\u003c/code\u003e - the random bit source to use to generate key bits; can be null."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidParameterException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eparams\u003c/code\u003e value is invalid, null, or unsupported."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.InvalidParameterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "modlen"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "genParams"
          }
        },
        {
          "type": {
            "name": "java.security.SecureRandom",
            "type": "Class"
          },
          "field": {
            "name": "random"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "initialize",
      "comment": "Initializes the key pair generator for a given modulus length (instead of parameters), and an optional SecureRandom bit source. If a SecureRandom bit source is needed but not supplied, i.e. null, a default SecureRandom instance will be used. If genParams is true, this method generates new p, q and g parameters. If it is false, the method uses precomputed parameters for the modulus length requested. If there are no precomputed parameters for that modulus length, an exception will be thrown.",
      "tagMap": {
        "param": [
          "\u003ccode\u003emodlen\u003c/code\u003e - the modulus length in bits. Valid values are any multiple of 64 between 512 and 1024, inclusive, 2048, and 3072.",
          "\u003ccode\u003erandom\u003c/code\u003e - the random bit source to use to generate key bits; can be null.",
          "\u003ccode\u003egenParams\u003c/code\u003e - whether or not to generate new parameters for the modulus length requested."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidParameterException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003emodlen\u003c/code\u003e is invalid, or unsupported, or if \n\u003ccode\u003egenParams\u003c/code\u003e is false and there are no precomputed parameters for the requested modulus length."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.security.interfaces.DSAKeyPairGenerator",
  "comment": "An interface to an object capable of generating DSA key pairs. \n\u003cp\u003eThe \u003ccode\u003einitialize\u003c/code\u003e methods may each be called any number of times. If no \u003ccode\u003einitialize\u003c/code\u003e method is called on a DSAKeyPairGenerator, each provider that implements this interface should supply (and document) a default initialization. Note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the DSAKeyPairGenerator instead of relying on provider-specific defaults. \u003c/p\u003e\n\u003cp\u003eUsers wishing to indicate DSA-specific parameters, and to generate a key pair suitable for use with the DSA algorithm typically \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003eGet a key pair generator for the DSA algorithm by calling the KeyPairGenerator \u003ccode\u003egetInstance\u003c/code\u003e method with \"DSA\" as its argument. \u003c/li\u003e\n \u003cli\u003eCheck if the returned key pair generator is an instance of DSAKeyPairGenerator before casting the result to a DSAKeyPairGenerator and calling one of the \u003ccode\u003einitialize\u003c/code\u003e methods from this DSAKeyPairGenerator interface. \u003c/li\u003e\n \u003cli\u003eGenerate a key pair by calling the \u003ccode\u003egenerateKeyPair\u003c/code\u003e method of the KeyPairGenerator class. \u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eNote: it is not always necessary to do algorithm-specific initialization for a DSA key pair generator. That is, it is not always necessary to call an \u003ccode\u003einitialize\u003c/code\u003e method in this interface. Algorithm-independent initialization using the \u003ccode\u003einitialize\u003c/code\u003e method in the KeyPairGenerator interface is all that is needed when you accept defaults for algorithm-specific parameters. \u003c/p\u003e\n\u003cp\u003eNote: Some earlier implementations of this interface may not support larger values of DSA parameters such as 3072-bit.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyPairGenerator.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eKeyPairGenerator\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}