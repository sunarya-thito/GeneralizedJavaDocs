{
  "packageName": "java.security",
  "simpleName": "SecureRandom",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.util.Random",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.security.SecureRandom",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the name of the RNG algorithm. See the \n\u003ccode\u003eSecureRandom\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard RNG algorithm names."
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no \n\u003ccode\u003eProvider\u003c/code\u003e supports a \n\u003ccode\u003eSecureRandomSpi\u003c/code\u003e implementation for the specified algorithm",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eSecureRandom\u003c/code\u003e object"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.SecureRandom",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchProviderException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the name of the RNG algorithm. See the \n\u003ccode\u003eSecureRandom\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard RNG algorithm names.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the name of the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the provider name is \n\u003ccode\u003enull\u003c/code\u003e or empty",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eSecureRandomSpi\u003c/code\u003e implementation for the specified algorithm is not available from the specified provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider is not registered in the security provider list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eSecureRandom\u003c/code\u003e object"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.SecureRandom",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        },
        {
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the name of the RNG algorithm. See the \n\u003ccode\u003eSecureRandom\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard RNG algorithm names.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified provider is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eSecureRandomSpi\u003c/code\u003e implementation for the specified algorithm is not available from the specified \n\u003ccode\u003eProvider\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eSecureRandom\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.SecureRandom",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        },
        {
          "type": {
            "name": "java.security.SecureRandomParameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports the specified algorithm and the specified SecureRandomParameters is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the name of the RNG algorithm. See the \n\u003ccode\u003eSecureRandom\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard RNG algorithm names.",
          "\u003ccode\u003eparams\u003c/code\u003e - the \n\u003ccode\u003eSecureRandomParameters\u003c/code\u003e the newly created \n\u003ccode\u003eSecureRandom\u003c/code\u003e object must support."
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified params is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no Provider supports a \n\u003ccode\u003eSecureRandomSpi\u003c/code\u003e implementation for the specified algorithm and parameters",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eSecureRandom\u003c/code\u003e object"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.SecureRandom",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchProviderException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        },
        {
          "type": {
            "name": "java.security.SecureRandomParameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the name of the RNG algorithm. See the \n\u003ccode\u003eSecureRandom\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard RNG algorithm names.",
          "\u003ccode\u003eparams\u003c/code\u003e - the \n\u003ccode\u003eSecureRandomParameters\u003c/code\u003e the newly created \n\u003ccode\u003eSecureRandom\u003c/code\u003e object must support.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the name of the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the provider name is \n\u003ccode\u003enull\u003c/code\u003e or empty, or params is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the specified provider does not support a \n\u003ccode\u003eSecureRandomSpi\u003c/code\u003e implementation for the specified algorithm and parameters",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider is not registered in the security provider list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eSecureRandom\u003c/code\u003e object"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.SecureRandom",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "algorithm"
          }
        },
        {
          "type": {
            "name": "java.security.SecureRandomParameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        },
        {
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a SecureRandom object that implements the specified Random Number Generator (RNG) algorithm and supports the specified SecureRandomParameters request. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the name of the RNG algorithm. See the \n\u003ccode\u003eSecureRandom\u003c/code\u003e section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#securerandom-number-generation-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard RNG algorithm names.",
          "\u003ccode\u003eparams\u003c/code\u003e - the \n\u003ccode\u003eSecureRandomParameters\u003c/code\u003e the newly created \n\u003ccode\u003eSecureRandom\u003c/code\u003e object must support.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified provider or params is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the specified provider does not support a \n\u003ccode\u003eSecureRandomSpi\u003c/code\u003e implementation for the specified algorithm and parameters",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eSecureRandom\u003c/code\u003e object"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getProvider",
      "comment": "Returns the provider of this SecureRandom object.",
      "tagMap": {
        "return": [
          "the provider of this \n\u003ccode\u003eSecureRandom\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAlgorithm",
      "comment": "Returns the name of the algorithm implemented by this SecureRandom object.",
      "tagMap": {
        "return": [
          "the name of the algorithm or \n\u003ccode\u003eunknown\u003c/code\u003e if the algorithm name cannot be determined."
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a Human-readable string representation of this SecureRandom.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the string representation"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.SecureRandomParameters",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParameters",
      "comment": "Returns the effective SecureRandomParameters for this SecureRandom instance. The returned value can be different from the SecureRandomParameters object passed into a getInstance method, but it cannot change during the lifetime of this SecureRandom object. A caller can use the returned value to find out what features this SecureRandom supports.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSecureRandomSpi\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the effective \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomParameters.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eSecureRandomParameters\u003c/code\u003e\u003c/a\u003e parameters, or \n\u003ccode\u003enull\u003c/code\u003e if no parameters were used."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "seed"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSeed",
      "comment": "Reseeds this random object with the given seed. The seed supplements, rather than replaces, the existing seed. Thus, repeated calls are guaranteed never to reduce randomness. A PRNG SecureRandom will not seed itself automatically if setSeed is called before any nextBytes or reseed calls. The caller should make sure that the seed argument contains enough entropy for the security of this SecureRandom.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandom.html#getSeed(int)\"\u003e\u003ccode\u003egetSeed(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eseed\u003c/code\u003e - the seed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "seed"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSeed",
      "comment": "Reseeds this random object, using the eight bytes contained in the given long seed. The given seed supplements, rather than replaces, the existing seed. Thus, repeated calls are guaranteed never to reduce randomness. This method is defined for compatibility with java.util.Random.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandom.html#getSeed(int)\"\u003e\u003ccode\u003egetSeed(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#setSeed(long)\"\u003esetSeed\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eseed\u003c/code\u003e - the seed."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextBytes",
      "comment": "Generates a user-specified number of random bytes.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#nextBytes(byte%5B%5D)\"\u003enextBytes\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - the array to be filled in with random bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        },
        {
          "type": {
            "name": "java.security.SecureRandomParameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "nextBytes",
      "comment": "Generates a user-specified number of random bytes with additional parameters.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - the array to be filled in with random bytes",
          "\u003ccode\u003eparams\u003c/code\u003e - additional parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ebytes\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the underlying provider implementation has not overridden this method",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparams\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, illegal or unsupported by this \n\u003ccode\u003eSecureRandom\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "numBits"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 20,
      "name": "next",
      "comment": "Generates an integer containing the user-specified number of pseudo-random bits (right justified, with leading zeros). This method overrides a java.util.Random method, and serves to provide a source of random bits to all of the methods inherited from that class (for example, nextInt, nextLong, and nextFloat).",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html#next(int)\"\u003enext\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003eRandom\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003enumBits\u003c/code\u003e - number of pseudo-random bits to be generated, where \n\u003ccode\u003e0 \u0026lt;\u003d numBits \u0026lt;\u003d 32\u003c/code\u003e."
        ],
        "return": [
          "an \n\u003ccode\u003eint\u003c/code\u003e containing the user-specified number of pseudo-random bits (right justified, with leading zeros)."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "numBytes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getSeed",
      "comment": "Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself. This call may be used to seed other random number generators. This method is only included for backwards compatibility. The caller is encouraged to use one of the alternative getInstance methods to obtain a SecureRandom object, and then call the generateSeed method to obtain seed bytes from that object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandom.html#setSeed(byte%5B%5D)\"\u003e\u003ccode\u003esetSeed(byte[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enumBytes\u003c/code\u003e - the number of seed bytes to generate."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enumBytes\u003c/code\u003e is negative"
        ],
        "return": [
          "the seed bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "numBytes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "generateSeed",
      "comment": "Returns the given number of seed bytes, computed using the seed generation algorithm that this class uses to seed itself. This call may be used to seed other random number generators.",
      "tagMap": {
        "param": [
          "\u003ccode\u003enumBytes\u003c/code\u003e - the number of seed bytes to generate."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003enumBytes\u003c/code\u003e is negative"
        ],
        "return": [
          "the seed bytes."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.SecureRandom",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstanceStrong",
      "comment": "Returns a SecureRandom object that was selected by using the algorithms/providers specified in the securerandom.strongAlgorithms Security property. Some situations require strong random values, such as when creating high-value/long-lived secrets like RSA public/private keys. To help guide applications in selecting a suitable strong SecureRandom implementation, Java distributions include a list of known strong SecureRandom implementations in the securerandom.strongAlgorithms Security property. Every implementation of the Java platform is required to support at least one strong SecureRandom implementation.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity.getProperty(String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no algorithm is available"
        ],
        "return": [
          "a strong \n\u003ccode\u003eSecureRandom\u003c/code\u003e implementation as indicated by the \n\u003ccode\u003esecurerandom.strongAlgorithms\u003c/code\u003e Security property"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reseed",
      "comment": "Reseeds this SecureRandom with entropy input read from its entropy source.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the underlying provider implementation has not overridden this method."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.SecureRandomParameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reseed",
      "comment": "Reseeds this SecureRandom with entropy input read from its entropy source with additional parameters. Note that entropy is obtained from an entropy source. While some data in params may contain entropy, its main usage is to provide diversity.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - extra parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the underlying provider implementation has not overridden this method.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparams\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, illegal or unsupported by this \n\u003ccode\u003eSecureRandom\u003c/code\u003e"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a secure random number generator (RNG) implementing the default random number algorithm. This constructor traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports a SecureRandom (RNG) algorithm is returned. If none of the Providers support a RNG algorithm, then an implementation-specific default is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method. See the SecureRandom section in the Java Security Standard Algorithm Names Specification for information about standard RNG algorithm names.",
      "tagMap": {}
    },
    {
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "seed"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructs a secure random number generator (RNG) implementing the default random number algorithm. The SecureRandom instance is seeded with the specified seed bytes. This constructor traverses the list of registered security Providers, starting with the most preferred Provider. A new SecureRandom object encapsulating the SecureRandomSpi implementation from the first Provider that supports a SecureRandom (RNG) algorithm is returned. If none of the Providers support a RNG algorithm, then an implementation-specific default is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method. See the SecureRandom section in the Java Security Standard Algorithm Names Specification for information about standard RNG algorithm names.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eseed\u003c/code\u003e - the seed."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.security.SecureRandomSpi",
            "type": "Class"
          },
          "field": {
            "name": "secureRandomSpi"
          }
        },
        {
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a SecureRandom object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esecureRandomSpi\u003c/code\u003e - the \n\u003ccode\u003eSecureRandom\u003c/code\u003e implementation.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.security.SecureRandom",
  "comment": "This class provides a cryptographically strong random number generator (RNG). \n\u003cp\u003eA cryptographically strong random number minimally complies with the statistical random number generator tests specified in \u003ca href\u003d\"http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.140-2.pdf\"\u003e \u003ci\u003eFIPS 140-2, Security Requirements for Cryptographic Modules\u003c/i\u003e\u003c/a\u003e, section 4.9.1. Additionally, \u003ccode\u003eSecureRandom\u003c/code\u003e must produce non-deterministic output. Therefore any seed material passed to a \u003ccode\u003eSecureRandom\u003c/code\u003e object must be unpredictable, and all \u003ccode\u003eSecureRandom\u003c/code\u003e output sequences must be cryptographically strong, as described in \u003ca href\u003d\"http://tools.ietf.org/html/rfc4086\"\u003e \u003ci\u003eRFC 4086: Randomness Requirements for Security\u003c/i\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e Many \u003ccode\u003eSecureRandom\u003c/code\u003e implementations are in the form of a pseudo-random number generator (PRNG, also known as deterministic random bits generator or DRBG), which means they use a deterministic algorithm to produce a pseudo-random sequence from a random seed. Other implementations may produce true random numbers, and yet others may use a combination of both techniques. \u003c/p\u003e\n\u003cp\u003eA caller obtains a \u003ccode\u003eSecureRandom\u003c/code\u003e instance via the no-argument constructor or one of the \u003ccode\u003egetInstance\u003c/code\u003e methods. For example: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e SecureRandom r1 \u003d new SecureRandom();\n SecureRandom r2 \u003d SecureRandom.getInstance(\"NativePRNG\");\n SecureRandom r3 \u003d SecureRandom.getInstance(\"DRBG\",\n         DrbgParameters.instantiation(128, RESEED_ONLY, null));\u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The third statement above returns a \u003ccode\u003eSecureRandom\u003c/code\u003e object of the specific algorithm supporting the specific instantiate parameters. The implementation\u0027s effective instantiated parameters must match this minimum request but is not necessarily the same. For example, even if the request does not require a certain feature, the actual instantiation can provide the feature. An implementation may lazily instantiate a \u003ccode\u003eSecureRandom\u003c/code\u003e until it\u0027s actually used, but the effective instantiate parameters must be determined right after it\u0027s created and \u003ca href\u003d\"#getParameters()\"\u003e\u003ccode\u003egetParameters()\u003c/code\u003e\u003c/a\u003e should always return the same result unchanged. \u003c/p\u003e\n\u003cp\u003e Typical callers of \u003ccode\u003eSecureRandom\u003c/code\u003e invoke the following methods to retrieve random bytes: \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e SecureRandom random \u003d new SecureRandom();\n byte[] bytes \u003d new byte[20];\n random.nextBytes(bytes);\u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Callers may also invoke the \u003ca href\u003d\"#generateSeed(int)\"\u003e\u003ccode\u003egenerateSeed(int)\u003c/code\u003e\u003c/a\u003e method to generate a given number of seed bytes (to seed other random number generators, for example): \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e byte[] seed \u003d random.generateSeed(20);\u003c/pre\u003e \n\u003c/blockquote\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e A newly created PRNG \u003ccode\u003eSecureRandom\u003c/code\u003e object is not seeded (except if it is created by \u003ca href\u003d\"#%3Cinit%3E(byte%5B%5D)\"\u003e\u003ccode\u003eSecureRandom(byte[])\u003c/code\u003e\u003c/a\u003e). The first call to \u003ccode\u003enextBytes\u003c/code\u003e will force it to seed itself from an implementation- specific entropy source. This self-seeding will not occur if \u003ccode\u003esetSeed\u003c/code\u003e was previously called. \u003c/p\u003e\n\u003cp\u003e A \u003ccode\u003eSecureRandom\u003c/code\u003e can be reseeded at any time by calling the \u003ccode\u003ereseed\u003c/code\u003e or \u003ccode\u003esetSeed\u003c/code\u003e method. The \u003ccode\u003ereseed\u003c/code\u003e method reads entropy input from its entropy source to reseed itself. The \u003ccode\u003esetSeed\u003c/code\u003e method requires the caller to provide the seed. \u003c/p\u003e\n\u003cp\u003e Please note that \u003ccode\u003ereseed\u003c/code\u003e may not be supported by all \u003ccode\u003eSecureRandom\u003c/code\u003e implementations. \u003c/p\u003e\n\u003cp\u003e Some \u003ccode\u003eSecureRandom\u003c/code\u003e implementations may accept a \u003ca href\u003d\"SecureRandomParameters.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eSecureRandomParameters\u003c/code\u003e\u003c/a\u003e parameter in its \u003ca href\u003d\"#nextBytes(byte%5B%5D,java.security.SecureRandomParameters)\"\u003e\u003ccode\u003enextBytes(byte[], SecureRandomParameters)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#reseed(java.security.SecureRandomParameters)\"\u003e\u003ccode\u003ereseed(SecureRandomParameters)\u003c/code\u003e\u003c/a\u003e methods to further control the behavior of the methods. \u003c/p\u003e\n\u003cp\u003e Note: Depending on the implementation, the \u003ccode\u003egenerateSeed\u003c/code\u003e, \u003ccode\u003ereseed\u003c/code\u003e and \u003ccode\u003enextBytes\u003c/code\u003e methods may block as entropy is being gathered, for example, if the entropy source is /dev/random on various Unix-like operating systems. \u003c/p\u003e\n\u003ch2\u003e Thread safety \u003c/h2\u003e \n\u003ccode\u003eSecureRandom\u003c/code\u003e objects are safe for use by multiple concurrent threads.",
  "tagMap": {
    "implSpec": [
      "A \n\u003ccode\u003eSecureRandom\u003c/code\u003e service provider can advertise that it is thread-safe by setting the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#service-attributes\"\u003eservice provider attribute\u003c/a\u003e \"ThreadSafe\" to \"true\" when registering the provider. Otherwise, this class will instead synchronize access to the following methods of the \n\u003ccode\u003eSecureRandomSpi\u003c/code\u003e implementation: \n\u003cul\u003e \n \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html#engineSetSeed(byte%5B%5D)\"\u003e\u003ccode\u003eSecureRandomSpi.engineSetSeed(byte[])\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html#engineNextBytes(byte%5B%5D)\"\u003e\u003ccode\u003eSecureRandomSpi.engineNextBytes(byte[])\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html#engineNextBytes(byte%5B%5D,java.security.SecureRandomParameters)\"\u003e\u003ccode\u003eSecureRandomSpi.engineNextBytes(byte[], SecureRandomParameters)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html#engineGenerateSeed(int)\"\u003e\u003ccode\u003eSecureRandomSpi.engineGenerateSeed(int)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n \u003cli\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html#engineReseed(java.security.SecureRandomParameters)\"\u003e\u003ccode\u003eSecureRandomSpi.engineReseed(SecureRandomParameters)\u003c/code\u003e\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e"
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SecureRandomSpi.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSecureRandomSpi\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Random.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eRandom\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.security.SecureRandom\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}