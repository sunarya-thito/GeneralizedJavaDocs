{
  "packageName": "java.security",
  "simpleName": "PrivateKey",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "interfaces": [
    {
      "name": "java.security.Key",
      "type": "Class"
    },
    {
      "name": "javax.security.auth.Destroyable",
      "type": "Class"
    }
  ],
  "members": [
    {
      "type": {
        "name": "long",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 24,
      "name": "serialVersionUID",
      "comment": "The class fingerprint that is set to indicate serialization compatibility with a previous version of the class.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/constant-values.html#java.security.PrivateKey.serialVersionUID\"\u003eConstant Field Values\u003c/a\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.security.PrivateKey",
  "comment": "A private key. The purpose of this interface is to group (and provide type safety for) all private key interfaces. \n\u003cp\u003e Note: The specialized private key interfaces extend this interface. See, for example, the \u003ccode\u003eDSAPrivateKey\u003c/code\u003e interface in \u003ca href\u003d\"interfaces/package-summary.html\"\u003e\u003ccode\u003ejava.security.interfaces\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e Implementations should override the default \u003ccode\u003edestroy\u003c/code\u003e and \u003ccode\u003eisDestroyed\u003c/code\u003e methods from the \u003ca href\u003d\"../../javax/security/auth/Destroyable.html\" title\u003d\"interface in javax.security.auth\"\u003e\u003ccode\u003eDestroyable\u003c/code\u003e\u003c/a\u003e interface to enable sensitive key information to be destroyed, cleared, or in the case where such information is immutable, unreferenced. Finally, since \u003ccode\u003ePrivateKey\u003c/code\u003e is \u003ccode\u003eSerializable\u003c/code\u003e, implementations should also override \u003ca href\u003d\"../io/ObjectOutputStream.html#writeObject(java.lang.Object)\"\u003e\u003ccode\u003eObjectOutputStream.writeObject(java.lang.Object)\u003c/code\u003e\u003c/a\u003e to prevent keys that have been destroyed from being serialized.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Key.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PublicKey.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003ePublicKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Certificate.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003eCertificate\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Signature.html#initVerify(java.security.PublicKey)\"\u003e\u003ccode\u003eSignature.initVerify(java.security.PublicKey)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/interfaces/DSAPrivateKey.html\" title\u003d\"interface in java.security.interfaces\"\u003e\u003ccode\u003eDSAPrivateKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/interfaces/RSAPrivateKey.html\" title\u003d\"interface in java.security.interfaces\"\u003e\u003ccode\u003eRSAPrivateKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/interfaces/RSAPrivateCrtKey.html\" title\u003d\"interface in java.security.interfaces\"\u003e\u003ccode\u003eRSAPrivateCrtKey\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}