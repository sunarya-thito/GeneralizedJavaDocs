{
  "packageName": "java.security.cert",
  "simpleName": "CertPathBuilderSpi",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.security.cert.CertPathBuilderResult",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineBuild",
      "comment": "Attempts to build a certification path using the specified algorithm parameter set.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - the algorithm parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertPathBuilderException.html\" title\u003d\"class in java.security.cert\"\u003eCertPathBuilderException\u003c/a\u003e\u003c/code\u003e - if the builder is unable to construct a certification path that satisfies the specified parameters",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if the specified parameters are inappropriate for this \n\u003ccode\u003eCertPathBuilder\u003c/code\u003e"
        ],
        "return": [
          "the result of the build algorithm"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.CertPathChecker",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "engineGetRevocationChecker",
      "comment": "Returns a CertPathChecker that this implementation uses to check the revocation status of certificates. A PKIX implementation returns objects of type PKIXRevocationChecker. The primary purpose of this method is to allow callers to specify additional input parameters and options specific to revocation checking. See the class description of CertPathBuilder for an example. This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an UnsupportedOperationException.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this method is not supported"
        ],
        "return": [
          "a \n\u003ccode\u003eCertPathChecker\u003c/code\u003e that this implementation uses to check the revocation status of certificates"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "The default constructor.",
      "annotations": [],
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.security.cert.CertPathBuilderSpi",
  "comment": "The \n\u003ci\u003eService Provider Interface\u003c/i\u003e (\n\u003cb\u003eSPI\u003c/b\u003e) for the \n\u003ca href\u003d\"CertPathBuilder.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eCertPathBuilder\u003c/code\u003e\u003c/a\u003e class. All \n\u003ccode\u003eCertPathBuilder\u003c/code\u003e implementations must include a class (the SPI class) that extends this class (\n\u003ccode\u003eCertPathBuilderSpi\u003c/code\u003e) and implements all of its methods. In general, instances of this class should only be accessed through the \n\u003ccode\u003eCertPathBuilder\u003c/code\u003e class. For details, see the Java Cryptography Architecture. \n\u003cp\u003e \u003cb\u003eConcurrent Access\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003e Instances of this class need not be protected against concurrent access from multiple threads. Threads that need to access a single \u003ccode\u003eCertPathBuilderSpi\u003c/code\u003e instance concurrently should synchronize amongst themselves and provide the necessary locking before calling the wrapping \u003ccode\u003eCertPathBuilder\u003c/code\u003e object. \u003c/p\u003e\n\u003cp\u003e However, implementations of \u003ccode\u003eCertPathBuilderSpi\u003c/code\u003e may still encounter concurrency issues, since multiple threads each manipulating a different \u003ccode\u003eCertPathBuilderSpi\u003c/code\u003e instance need not synchronize.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}