{
  "packageName": "java.security.cert",
  "simpleName": "X509Certificate",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.security.cert.Certificate",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.cert.CertificateExpiredException",
          "type": "Class"
        },
        {
          "name": "java.security.cert.CertificateNotYetValidException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "checkValidity",
      "comment": "Checks that the certificate is currently valid. It is if the current date and time are within the validity period given in the certificate. The validity period consists of two date/time values: the first and last dates (and times) on which the certificate is valid. It is defined in ASN.1 as:  validity             Validity\n\n Validity ::\u003d SEQUENCE {\n     notBefore      CertificateValidityDate,\n     notAfter       CertificateValidityDate }\n\n CertificateValidityDate ::\u003d CHOICE {\n     utcTime        UTCTime,\n     generalTime    GeneralizedTime }",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateExpiredException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateExpiredException\u003c/a\u003e\u003c/code\u003e - if the certificate has expired.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateNotYetValidException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateNotYetValidException\u003c/a\u003e\u003c/code\u003e - if the certificate is not yet valid."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.cert.CertificateExpiredException",
          "type": "Class"
        },
        {
          "name": "java.security.cert.CertificateNotYetValidException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "date"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "checkValidity",
      "comment": "Checks that the given date is within the certificate\u0027s validity period. In other words, this determines whether the certificate would be valid at the given date/time.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509Certificate.html#checkValidity()\"\u003e\u003ccode\u003echeckValidity()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edate\u003c/code\u003e - the Date to check against to see if this certificate is valid at that date/time."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateExpiredException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateExpiredException\u003c/a\u003e\u003c/code\u003e - if the certificate has expired with respect to the \n\u003ccode\u003edate\u003c/code\u003e supplied.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateNotYetValidException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateNotYetValidException\u003c/a\u003e\u003c/code\u003e - if the certificate is not yet valid with respect to the \n\u003ccode\u003edate\u003c/code\u003e supplied."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getVersion",
      "comment": "Gets the version (version number) value from the certificate. The ASN.1 definition for this is:  version  [0] EXPLICIT Version DEFAULT v1\n\n Version ::\u003d  INTEGER  {  v1(0), v2(1), v3(2)  }",
      "tagMap": {
        "return": [
          "the version number, i.e. 1, 2 or 3."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSerialNumber",
      "comment": "Gets the serialNumber value from the certificate. The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is:  serialNumber     CertificateSerialNumber\n\n CertificateSerialNumber  ::\u003d  INTEGER",
      "tagMap": {
        "return": [
          "the serial number."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Principal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getIssuerDN",
      "comment": "Gets the issuer (issuer distinguished name) value from the certificate. The issuer name identifies the entity that signed (and issued) the certificate. The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is:  issuer    Name\n\n Name ::\u003d CHOICE { RDNSequence }\n RDNSequence ::\u003d SEQUENCE OF RelativeDistinguishedName\n RelativeDistinguishedName ::\u003d\n     SET OF AttributeValueAssertion\n\n AttributeValueAssertion ::\u003d SEQUENCE {\n                               AttributeType,\n                               AttributeValue }\n AttributeType ::\u003d OBJECT IDENTIFIER\n AttributeValue ::\u003d ANY\n The Name describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the AttributeValue component is determined by the AttributeType; in general it will be a directoryString. A directoryString is usually one of PrintableString, TeletexString or UniversalString.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "16"
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "a Principal whose name is the issuer distinguished name."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.security.auth.x500.X500Principal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIssuerX500Principal",
      "comment": "Returns the issuer (issuer distinguished name) value from the certificate as an X500Principal. It is recommended that subclasses override this method.",
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eX500Principal\u003c/code\u003e representing the issuer distinguished name"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Principal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSubjectDN",
      "comment": "Gets the subject (subject distinguished name) value from the certificate. If the subject value is empty, then the getName() method of the returned Principal object returns an empty string (\"\"). The ASN.1 definition for this is:  subject    Name\n See getIssuerDN for Name and other relevant definitions.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "16"
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "a Principal whose name is the subject name."
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.security.auth.x500.X500Principal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSubjectX500Principal",
      "comment": "Returns the subject (subject distinguished name) value from the certificate as an X500Principal. If the subject value is empty, then the getName() method of the returned X500Principal object returns an empty string (\"\"). It is recommended that subclasses override this method.",
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eX500Principal\u003c/code\u003e representing the subject distinguished name"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getNotBefore",
      "comment": "Gets the notBefore date from the validity period of the certificate. The relevant ASN.1 definitions are:  validity             Validity\n\n Validity ::\u003d SEQUENCE {\n     notBefore      CertificateValidityDate,\n     notAfter       CertificateValidityDate }\n\n CertificateValidityDate ::\u003d CHOICE {\n     utcTime        UTCTime,\n     generalTime    GeneralizedTime }",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509Certificate.html#checkValidity()\"\u003e\u003ccode\u003echeckValidity()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the start date of the validity period."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getNotAfter",
      "comment": "Gets the notAfter date from the validity period of the certificate. See getNotBefore for relevant ASN.1 definitions.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509Certificate.html#checkValidity()\"\u003e\u003ccode\u003echeckValidity()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the end date of the validity period."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "throwsClasses": [
        {
          "name": "java.security.cert.CertificateEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getTBSCertificate",
      "comment": "Gets the DER-encoded certificate information, the tbsCertificate from this certificate. This can be used to verify the signature independently.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateEncodingException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateEncodingException\u003c/a\u003e\u003c/code\u003e - if an encoding error occurs."
        ],
        "return": [
          "the DER-encoded certificate information."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSignature",
      "comment": "Gets the signature value (the raw signature bits) from the certificate. The ASN.1 definition for this is:  signature     BIT STRING",
      "tagMap": {
        "return": [
          "the signature."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSigAlgName",
      "comment": "Gets the signature algorithm name for the certificate signature algorithm. An example is the string \"SHA256withRSA\". The ASN.1 definition for this is:  signatureAlgorithm   AlgorithmIdentifier\n\n AlgorithmIdentifier  ::\u003d  SEQUENCE  {\n     algorithm               OBJECT IDENTIFIER,\n     parameters              ANY DEFINED BY algorithm OPTIONAL  }\n                             -- contains a value of the type\n                             -- registered for use with the\n                             -- algorithm object identifier value\n The algorithm name is determined from the algorithm OID string.",
      "tagMap": {
        "return": [
          "the signature algorithm name."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSigAlgOID",
      "comment": "Gets the signature algorithm OID string from the certificate. An OID is represented by a set of nonnegative whole numbers separated by periods. For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1 with DSA signature algorithm defined in RFC 3279: Algorithms and Identifiers for the Internet X.509 Public Key Infrastructure Certificate and CRL Profile. See getSigAlgName for relevant ASN.1 definitions.",
      "tagMap": {
        "return": [
          "the signature algorithm OID string."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSigAlgParams",
      "comment": "Gets the DER-encoded signature algorithm parameters from this certificate\u0027s signature algorithm. In most cases, the signature algorithm parameters are null; the parameters are usually supplied with the certificate\u0027s public key. If access to individual parameter values is needed then use AlgorithmParameters and instantiate with the name returned by getSigAlgName. See getSigAlgName for relevant ASN.1 definitions.",
      "tagMap": {
        "return": [
          "the DER-encoded signature algorithm parameters, or null if no parameters are present."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getIssuerUniqueID",
      "comment": "Gets the issuerUniqueID value from the certificate. The issuer unique identifier is present in the certificate to handle the possibility of reuse of issuer names over time. RFC 5280 recommends that names not be reused and that conforming certificates not make use of unique identifiers. Applications conforming to that profile should be capable of parsing unique identifiers and making comparisons. The ASN.1 definition for this is:  issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL\n\n UniqueIdentifier  ::\u003d  BIT STRING",
      "tagMap": {
        "return": [
          "the issuer unique identifier or null if it is not present in the certificate."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getSubjectUniqueID",
      "comment": "Gets the subjectUniqueID value from the certificate. The ASN.1 definition for this is:  subjectUniqueID  [2]  IMPLICIT UniqueIdentifier OPTIONAL\n\n UniqueIdentifier  ::\u003d  BIT STRING",
      "tagMap": {
        "return": [
          "the subject unique identifier or null if it is not present in the certificate."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getKeyUsage",
      "comment": "Gets a boolean array representing bits of the KeyUsage extension, (OID \u003d 2.5.29.15). The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate. The ASN.1 definition for this is:  KeyUsage ::\u003d BIT STRING {\n     digitalSignature        (0),\n     nonRepudiation          (1),\n     keyEncipherment         (2),\n     dataEncipherment        (3),\n     keyAgreement            (4),\n     keyCertSign             (5),\n     cRLSign                 (6),\n     encipherOnly            (7),\n     decipherOnly            (8) }\n RFC 5280 recommends that when used, this be marked as a critical extension.",
      "tagMap": {
        "return": [
          "the KeyUsage extension of this certificate, represented as an array of booleans. The order of KeyUsage values in the array is the same as in the above ASN.1 definition. The array will contain a value for each KeyUsage defined above. If the KeyUsage list encoded in the certificate is longer than the above list, it will not be truncated. Returns null if this certificate does not contain a KeyUsage extension."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.List",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.cert.CertificateParsingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExtendedKeyUsage",
      "comment": "Gets an unmodifiable list of Strings representing the OBJECT IDENTIFIERs of the ExtKeyUsageSyntax field of the extended key usage extension, (OID \u003d 2.5.29.37). It indicates one or more purposes for which the certified public key may be used, in addition to or in place of the basic purposes indicated in the key usage extension field. The ASN.1 definition for this is:  ExtKeyUsageSyntax ::\u003d SEQUENCE SIZE (1..MAX) OF KeyPurposeId\n\n KeyPurposeId ::\u003d OBJECT IDENTIFIER\n Key purposes may be defined by any organization with a need. Object identifiers used to identify key purposes shall be assigned in accordance with IANA or ITU-T Rec. X.660 | ISO/IEC/ITU 9834-1. This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not abstract and it provides a default implementation. Subclasses should override this method with a correct implementation.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateParsingException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateParsingException\u003c/a\u003e\u003c/code\u003e - if the extension cannot be decoded"
        ],
        "return": [
          "the ExtendedKeyUsage extension of this certificate, as an unmodifiable list of object identifiers represented as Strings. Returns null if this certificate does not contain an ExtendedKeyUsage extension."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "getBasicConstraints",
      "comment": "Gets the certificate constraints path length from the critical BasicConstraints extension, (OID \u003d 2.5.29.19). The basic constraints extension identifies whether the subject of the certificate is a Certificate Authority (CA) and how deep a certification path may exist through that CA. The pathLenConstraint field (see below) is meaningful only if cA is set to TRUE. In this case, it gives the maximum number of CA certificates that may follow this certificate in a certification path. A value of zero indicates that only an end-entity certificate may follow in the path. The ASN.1 definition for this is:  BasicConstraints ::\u003d SEQUENCE {\n     cA                  BOOLEAN DEFAULT FALSE,\n     pathLenConstraint   INTEGER (0..MAX) OPTIONAL }",
      "tagMap": {
        "return": [
          "the value of \n\u003ccode\u003epathLenConstraint\u003c/code\u003e if the BasicConstraints extension is present in the certificate and the subject of the certificate is a CA, otherwise -1. If the subject of the certificate is a CA and \n\u003ccode\u003epathLenConstraint\u003c/code\u003e does not appear, \n\u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e is returned to indicate that there is no limit to the allowed length of the certification path."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.cert.CertificateParsingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSubjectAlternativeNames",
      "comment": "Gets an immutable collection of subject alternative names from the SubjectAltName extension, (OID \u003d 2.5.29.17). The ASN.1 definition of the SubjectAltName extension is:  SubjectAltName ::\u003d GeneralNames\n\n GeneralNames :: \u003d SEQUENCE SIZE (1..MAX) OF GeneralName\n\n GeneralName ::\u003d CHOICE {\n      otherName                       [0]     OtherName,\n      rfc822Name                      [1]     IA5String,\n      dNSName                         [2]     IA5String,\n      x400Address                     [3]     ORAddress,\n      directoryName                   [4]     Name,\n      ediPartyName                    [5]     EDIPartyName,\n      uniformResourceIdentifier       [6]     IA5String,\n      iPAddress                       [7]     OCTET STRING,\n      registeredID                    [8]     OBJECT IDENTIFIER}\n If this certificate does not contain a SubjectAltName extension, null is returned. Otherwise, a Collection is returned with an entry representing each GeneralName included in the extension. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). RFC 822, DNS, and URI names are returned as Strings, using the well-established string formats for those types (subject to the restrictions included in RFC 5280). IPv4 address names are returned using dotted quad notation. IPv6 address names are returned in the form \"a1:a2:...:a8\", where a1-a8 are hexadecimal values representing the eight 16-bit pieces of the address. OID names are returned as Strings represented as a series of nonnegative integers separated by periods. And directory names (distinguished names) are returned in RFC 2253 string format. No standard string format is defined for otherNames, X.400 names, EDI party names, or any other type of names. They are returned as byte arrays containing the ASN.1 DER encoded form of the name. Note that the Collection returned may contain more than one name of the same type. Also, note that the returned Collection is immutable and any entries containing byte arrays are cloned to protect against subsequent modifications. This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not abstract and it provides a default implementation. Subclasses should override this method with a correct implementation.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateParsingException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateParsingException\u003c/a\u003e\u003c/code\u003e - if the extension cannot be decoded"
        ],
        "return": [
          "an immutable \n\u003ccode\u003eCollection\u003c/code\u003e of subject alternative names (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.cert.CertificateParsingException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIssuerAlternativeNames",
      "comment": "Gets an immutable collection of issuer alternative names from the IssuerAltName extension, (OID \u003d 2.5.29.18). The ASN.1 definition of the IssuerAltName extension is:  IssuerAltName ::\u003d GeneralNames\n The ASN.1 definition of GeneralNames is defined in getSubjectAlternativeNames. If this certificate does not contain an IssuerAltName extension, null is returned. Otherwise, a Collection is returned with an entry representing each GeneralName included in the extension. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). For more details about the formats used for each name type, see the getSubjectAlternativeNames method. Note that the Collection returned may contain more than one name of the same type. Also, note that the returned Collection is immutable and any entries containing byte arrays are cloned to protect against subsequent modifications. This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not abstract and it provides a default implementation. Subclasses should override this method with a correct implementation.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateParsingException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateParsingException\u003c/a\u003e\u003c/code\u003e - if the extension cannot be decoded"
        ],
        "return": [
          "an immutable \n\u003ccode\u003eCollection\u003c/code\u003e of issuer alternative names (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.cert.CertificateException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        },
        {
          "name": "java.security.InvalidKeyException",
          "type": "Class"
        },
        {
          "name": "java.security.SignatureException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.security.PublicKey",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        },
        {
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "field": {
            "name": "sigProvider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "verify",
      "comment": "Verifies that this certificate was signed using the private key that corresponds to the specified public key. This method uses the signature verification engine supplied by the specified provider. Note that the specified Provider object does not have to be registered in the provider list. This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not abstract and it provides a default implementation.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/Certificate.html#verify(java.security.PublicKey,java.security.Provider)\"\u003everify\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/Certificate.html\" title\u003d\"class in java.security.cert\"\u003eCertificate\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the PublicKey used to carry out the verification.",
          "\u003ccode\u003esigProvider\u003c/code\u003e - the signature provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - on unsupported signature algorithms.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidKeyException.html\" title\u003d\"class in java.security\"\u003eInvalidKeyException\u003c/a\u003e\u003c/code\u003e - on incorrect key.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SignatureException.html\" title\u003d\"class in java.security\"\u003eSignatureException\u003c/a\u003e\u003c/code\u003e - on signature errors.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - on encoding errors.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if the method is not supported"
        ],
        "since": [
          "1.8"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Constructor for X.509 certificates.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.security.cert.X509Certificate",
  "comment": "\u003cp\u003e Abstract class for X.509 certificates. This provides a standard way to access all the attributes of an X.509 certificate. \u003c/p\u003e\n\u003cp\u003e In June of 1996, the basic X.509 v3 format was completed by ISO/IEC and ANSI X9, which is described below in ASN.1: \u003c/p\u003e\n\u003cpre\u003e Certificate  ::\u003d  SEQUENCE  {\n     tbsCertificate       TBSCertificate,\n     signatureAlgorithm   AlgorithmIdentifier,\n     signature            BIT STRING  }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e These certificates are widely used to support authentication and other functionality in Internet security systems. Common applications include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL), code signing for trusted software distribution, and Secure Electronic Transactions (SET). \u003c/p\u003e\n\u003cp\u003e These certificates are managed and vouched for by \u003cem\u003eCertificate Authorities\u003c/em\u003e (CAs). CAs are services which create certificates by placing data in the X.509 standard format and then digitally signing that data. CAs act as trusted third parties, making introductions between principals who have no direct knowledge of each other. CA certificates are either signed by themselves, or by some other CA such as a \"root\" CA. \u003c/p\u003e\n\u003cp\u003e More information can be found in \u003ca href\u003d\"http://tools.ietf.org/html/rfc5280\"\u003eRFC 5280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e The ASN.1 definition of \u003ccode\u003etbsCertificate\u003c/code\u003e is: \u003c/p\u003e\n\u003cpre\u003e TBSCertificate  ::\u003d  SEQUENCE  {\n     version         [0]  EXPLICIT Version DEFAULT v1,\n     serialNumber         CertificateSerialNumber,\n     signature            AlgorithmIdentifier,\n     issuer               Name,\n     validity             Validity,\n     subject              Name,\n     subjectPublicKeyInfo SubjectPublicKeyInfo,\n     issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n                          -- If present, version must be v2 or v3\n     subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n                          -- If present, version must be v2 or v3\n     extensions      [3]  EXPLICIT Extensions OPTIONAL\n                          -- If present, version must be v3\n     }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Certificates are instantiated using a certificate factory. The following is an example of how to instantiate an X.509 certificate: \u003c/p\u003e\n\u003cpre\u003e try (InputStream inStream \u003d new FileInputStream(\"fileName-of-cert\")) {\n     CertificateFactory cf \u003d CertificateFactory.getInstance(\"X.509\");\n     X509Certificate cert \u003d (X509Certificate)cf.generateCertificate(inStream);\n }\n \u003c/pre\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/Certificate.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eCertificate\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateFactory.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eCertificateFactory\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509Extension.html\" title\u003d\"interface in java.security.cert\"\u003e\u003ccode\u003eX509Extension\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.security.cert.X509Certificate\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}