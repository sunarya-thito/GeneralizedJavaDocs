{
  "packageName": "java.security.cert",
  "simpleName": "X509CertSelector",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.cert.X509Certificate",
            "type": "Class"
          },
          "field": {
            "name": "cert"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCertificate",
      "comment": "Sets the certificateEquals criterion. The specified X509Certificate must be equal to the X509Certificate passed to the match method. If null, then this check is not applied. This method is particularly useful when it is necessary to match a single certificate. Although other criteria can be specified in conjunction with the certificateEquals criterion, it is usually not practical or necessary.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getCertificate()\"\u003e\u003ccode\u003egetCertificate()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecert\u003c/code\u003e - the \n\u003ccode\u003eX509Certificate\u003c/code\u003e to match (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.math.BigInteger",
            "type": "Class"
          },
          "field": {
            "name": "serial"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSerialNumber",
      "comment": "Sets the serialNumber criterion. The specified serial number must match the certificate serial number in the X509Certificate. If null, any certificate serial number will do.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getSerialNumber()\"\u003e\u003ccode\u003egetSerialNumber()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eserial\u003c/code\u003e - the certificate serial number to match (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.security.auth.x500.X500Principal",
            "type": "Class"
          },
          "field": {
            "name": "issuer"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setIssuer",
      "comment": "Sets the issuer criterion. The specified distinguished name must match the issuer distinguished name in the X509Certificate. If null, any issuer distinguished name will do.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eissuer\u003c/code\u003e - a distinguished name as X500Principal (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "issuerDN"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setIssuer",
      "comment": "Sets the issuer criterion. The specified distinguished name must match the issuer distinguished name in the X509Certificate. If null, any issuer distinguished name will do. If issuerDN is not null, it should contain a distinguished name, in RFC 2253 format.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "16"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eissuerDN\u003c/code\u003e - a distinguished name in RFC 2253 format (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a parsing error occurs (incorrect form for DN)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "issuerDN"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setIssuer",
      "comment": "Sets the issuer criterion. The specified distinguished name must match the issuer distinguished name in the X509Certificate. If null is specified, the issuer criterion is disabled and any issuer distinguished name will do. If issuerDN is not null, it should contain a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is as follows. \n Name ::\u003d CHOICE {\n   RDNSequence }\n\n RDNSequence ::\u003d SEQUENCE OF RelativeDistinguishedName\n\n RelativeDistinguishedName ::\u003d\n   SET SIZE (1 .. MAX) OF AttributeTypeAndValue\n\n AttributeTypeAndValue ::\u003d SEQUENCE {\n   type     AttributeType,\n   value    AttributeValue }\n\n AttributeType ::\u003d OBJECT IDENTIFIER\n\n AttributeValue ::\u003d ANY DEFINED BY AttributeType\n ....\n DirectoryString ::\u003d CHOICE {\n       teletexString           TeletexString (SIZE (1..MAX)),\n       printableString         PrintableString (SIZE (1..MAX)),\n       universalString         UniversalString (SIZE (1..MAX)),\n       utf8String              UTF8String (SIZE (1.. MAX)),\n       bmpString               BMPString (SIZE (1..MAX)) }\n Note that the byte array specified here is cloned to protect against subsequent modifications.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eissuerDN\u003c/code\u003e - a byte array containing the distinguished name in ASN.1 DER encoded form (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an encoding error occurs (incorrect form for DN)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "javax.security.auth.x500.X500Principal",
            "type": "Class"
          },
          "field": {
            "name": "subject"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSubject",
      "comment": "Sets the subject criterion. The specified distinguished name must match the subject distinguished name in the X509Certificate. If null, any subject distinguished name will do.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esubject\u003c/code\u003e - a distinguished name as X500Principal (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "subjectDN"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSubject",
      "comment": "Sets the subject criterion. The specified distinguished name must match the subject distinguished name in the X509Certificate. If null, any subject distinguished name will do. If subjectDN is not null, it should contain a distinguished name, in RFC 2253 format.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "16"
            }
          ]
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003esubjectDN\u003c/code\u003e - a distinguished name in RFC 2253 format (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a parsing error occurs (incorrect form for DN)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "subjectDN"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSubject",
      "comment": "Sets the subject criterion. The specified distinguished name must match the subject distinguished name in the X509Certificate. If null, any subject distinguished name will do. If subjectDN is not null, it should contain a single DER encoded distinguished name, as defined in X.501. For the ASN.1 notation for this structure, see setIssuer(byte[]).",
      "tagMap": {
        "param": [
          "\u003ccode\u003esubjectDN\u003c/code\u003e - a byte array containing the distinguished name in ASN.1 DER format (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an encoding error occurs (incorrect form for DN)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "subjectKeyID"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSubjectKeyIdentifier",
      "comment": "Sets the subjectKeyIdentifier criterion. The X509Certificate must contain a SubjectKeyIdentifier extension for which the contents of the extension matches the specified criterion value. If the criterion value is null, no subjectKeyIdentifier check will be done. If subjectKeyID is not null, it should contain a single DER encoded value corresponding to the contents of the extension value (not including the object identifier, criticality setting, and encapsulating OCTET STRING) for a SubjectKeyIdentifier extension. The ASN.1 notation for this structure follows. \n SubjectKeyIdentifier ::\u003d KeyIdentifier\n\n KeyIdentifier ::\u003d OCTET STRING\n Since the format of subject key identifiers is not mandated by any standard, subject key identifiers are not parsed by the X509CertSelector. Instead, the values are compared using a byte-by-byte comparison. Note that the byte array supplied here is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getSubjectKeyIdentifier()\"\u003e\u003ccode\u003egetSubjectKeyIdentifier()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003esubjectKeyID\u003c/code\u003e - the subject key identifier (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "authorityKeyID"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setAuthorityKeyIdentifier",
      "comment": "Sets the authorityKeyIdentifier criterion. The X509Certificate must contain an AuthorityKeyIdentifier extension for which the contents of the extension value matches the specified criterion value. If the criterion value is null, no authorityKeyIdentifier check will be done. If authorityKeyID is not null, it should contain a single DER encoded value corresponding to the contents of the extension value (not including the object identifier, criticality setting, and encapsulating OCTET STRING) for an AuthorityKeyIdentifier extension. The ASN.1 notation for this structure follows. \n AuthorityKeyIdentifier ::\u003d SEQUENCE {\n    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\n    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\n    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\n\n KeyIdentifier ::\u003d OCTET STRING\n Authority key identifiers are not parsed by the X509CertSelector. Instead, the values are compared using a byte-by-byte comparison. When the keyIdentifier field of AuthorityKeyIdentifier is populated, the value is usually taken from the SubjectKeyIdentifier extension in the issuer\u0027s certificate. Note, however, that the result of X509Certificate.getExtensionValue(\u003cSubjectKeyIdentifier Object Identifier\u003e) on the issuer\u0027s certificate may NOT be used directly as the input to setAuthorityKeyIdentifier. This is because the SubjectKeyIdentifier contains only a KeyIdentifier OCTET STRING, and not a SEQUENCE of KeyIdentifier, GeneralNames, and CertificateSerialNumber. In order to use the extension value of the issuer certificate\u0027s SubjectKeyIdentifier extension, it will be necessary to extract the value of the embedded KeyIdentifier OCTET STRING, then DER encode this OCTET STRING inside a SEQUENCE. For more details on SubjectKeyIdentifier, see setSubjectKeyIdentifier(byte[] subjectKeyID). Note also that the byte array supplied here is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getAuthorityKeyIdentifier()\"\u003e\u003ccode\u003egetAuthorityKeyIdentifier()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eauthorityKeyID\u003c/code\u003e - the authority key identifier (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "certValid"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setCertificateValid",
      "comment": "Sets the certificateValid criterion. The specified date must fall within the certificate validity period for the X509Certificate. If null, no certificateValid check will be done. Note that the Date supplied here is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getCertificateValid()\"\u003e\u003ccode\u003egetCertificateValid()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecertValid\u003c/code\u003e - the \n\u003ccode\u003eDate\u003c/code\u003e to check (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Date",
            "type": "Class"
          },
          "field": {
            "name": "privateKeyValid"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPrivateKeyValid",
      "comment": "Sets the privateKeyValid criterion. The specified date must fall within the private key validity period for the X509Certificate. If null, no privateKeyValid check will be done. Note that the Date supplied here is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getPrivateKeyValid()\"\u003e\u003ccode\u003egetPrivateKeyValid()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprivateKeyValid\u003c/code\u003e - the \n\u003ccode\u003eDate\u003c/code\u003e to check (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "oid"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSubjectPublicKeyAlgID",
      "comment": "Sets the subjectPublicKeyAlgID criterion. The X509Certificate must contain a subject public key with the specified algorithm. If null, no subjectPublicKeyAlgID check will be done.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getSubjectPublicKeyAlgID()\"\u003e\u003ccode\u003egetSubjectPublicKeyAlgID()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eoid\u003c/code\u003e - The object identifier (OID) of the algorithm to check for (or \n\u003ccode\u003enull\u003c/code\u003e). An OID is represented by a set of nonnegative integers separated by periods."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the OID is invalid, such as the first component being not 0, 1 or 2 or the second component being greater than 39."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.PublicKey",
            "type": "Class"
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSubjectPublicKey",
      "comment": "Sets the subjectPublicKey criterion. The X509Certificate must contain the specified subject public key. If null, no subjectPublicKey check will be done.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getSubjectPublicKey()\"\u003e\u003ccode\u003egetSubjectPublicKey()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - the subject public key to check for (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "key"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSubjectPublicKey",
      "comment": "Sets the subjectPublicKey criterion. The X509Certificate must contain the specified subject public key. If null, no subjectPublicKey check will be done. Because this method allows the public key to be specified as a byte array, it may be used for unknown key types. If key is not null, it should contain a single DER encoded SubjectPublicKeyInfo structure, as defined in X.509. The ASN.1 notation for this structure is as follows. \n SubjectPublicKeyInfo  ::\u003d  SEQUENCE  {\n   algorithm            AlgorithmIdentifier,\n   subjectPublicKey     BIT STRING  }\n\n AlgorithmIdentifier  ::\u003d  SEQUENCE  {\n   algorithm               OBJECT IDENTIFIER,\n   parameters              ANY DEFINED BY algorithm OPTIONAL  }\n                              -- contains a value of the type\n                              -- registered for use with the\n                              -- algorithm object identifier value\n Note that the byte array supplied here is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getSubjectPublicKey()\"\u003e\u003ccode\u003egetSubjectPublicKey()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekey\u003c/code\u003e - a byte array containing the subject public key in ASN.1 DER form (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an encoding error occurs (incorrect form for subject public key)"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "keyUsage"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setKeyUsage",
      "comment": "Sets the keyUsage criterion. The X509Certificate must allow the specified keyUsage values. If null, no keyUsage check will be done. Note that an X509Certificate that has no keyUsage extension implicitly allows all keyUsage values. Note that the boolean array supplied here is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getKeyUsage()\"\u003e\u003ccode\u003egetKeyUsage()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyUsage\u003c/code\u003e - a boolean array in the same format as the boolean array returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509Certificate.html#getKeyUsage()\"\u003e\u003ccode\u003eX509Certificate.getKeyUsage()\u003c/code\u003e\u003c/a\u003e. Or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "keyPurposeSet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setExtendedKeyUsage",
      "comment": "Sets the extendedKeyUsage criterion. The X509Certificate must allow the specified key purposes in its extended key usage extension. If keyPurposeSet is empty or null, no extendedKeyUsage check will be done. Note that an X509Certificate that has no extendedKeyUsage extension implicitly allows all key purposes. Note that the Set is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getExtendedKeyUsage()\"\u003e\u003ccode\u003egetExtendedKeyUsage()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeyPurposeSet\u003c/code\u003e - a \n\u003ccode\u003eSet\u003c/code\u003e of key purpose OIDs in string format (or \n\u003ccode\u003enull\u003c/code\u003e). Each OID is represented by a set of nonnegative integers separated by periods."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if the OID is invalid, such as the first component being not 0, 1 or 2 or the second component being greater than 39."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "matchAllNames"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setMatchAllSubjectAltNames",
      "comment": "Enables/disables matching all of the subjectAlternativeNames specified in the setSubjectAlternativeNames or addSubjectAlternativeName methods. If enabled, the X509Certificate must contain all of the specified subject alternative names. If disabled, the X509Certificate must contain at least one of the specified subject alternative names. The matchAllNames flag is true by default.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getMatchAllSubjectAltNames()\"\u003e\u003ccode\u003egetMatchAllSubjectAltNames()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ematchAllNames\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, the flag is enabled; if \n\u003ccode\u003efalse\u003c/code\u003e, the flag is disabled."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "java.util.List",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "names"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setSubjectAlternativeNames",
      "comment": "Sets the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see setMatchAllSubjectAltNames). This method allows the caller to specify, with a single method call, the complete set of subject alternative names for the subjectAlternativeNames criterion. The specified value replaces the previous value for the subjectAlternativeNames criterion. The names parameter (if not null) is a Collection with one entry for each name to be included in the subject alternative name criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If null is supplied as the value for this argument, no subjectAlternativeNames check will be performed. Each subject alternative name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see addSubjectAlternativeName(int type, String name) and addSubjectAlternativeName(int type, byte [] name). Note: for distinguished names, specify the byte array form instead of the String form. See the note in addSubjectAlternativeName(int, String) for more information. Note that the names parameter can contain duplicate names (same name and name type), but they may be removed from the Collection of names returned by the getSubjectAlternativeNames method. Note that a deep copy is performed on the Collection to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getSubjectAlternativeNames()\"\u003e\u003ccode\u003egetSubjectAlternativeNames()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enames\u003c/code\u003e - a \n\u003ccode\u003eCollection\u003c/code\u003e of names (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a parsing error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addSubjectAlternativeName",
      "comment": "Adds a name to the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see setMatchAllSubjectAltNames). This method allows the caller to add a name to the set of subject alternative names. The specified name is added to any previous value for the subjectAlternativeNames criterion. If the specified name is a duplicate, it may be ignored. The name is provided in string format. RFC 822, DNS, and URI names use the well-established string formats for those types (subject to the restrictions included in RFC 5280). IPv4 address names are supplied using dotted quad notation. OID address names are represented as a series of nonnegative integers separated by periods. And directory names (distinguished names) are supplied in RFC 2253 format. No standard string format is defined for otherNames, X.400 names, EDI party names, IPv6 address names, or any other type of names. They should be specified using the addSubjectAlternativeName(int type, byte [] name) method. Note: for distinguished names, use addSubjectAlternativeName(int, byte[]) instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the name type (0-8, as specified in RFC 5280, section 4.2.1.6)",
          "\u003ccode\u003ename\u003c/code\u003e - the name in string form (not \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a parsing error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addSubjectAlternativeName",
      "comment": "Adds a name to the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see setMatchAllSubjectAltNames). This method allows the caller to add a name to the set of subject alternative names. The specified name is added to any previous value for the subjectAlternativeNames criterion. If the specified name is a duplicate, it may be ignored. The name is provided as a byte array. This byte array should contain the DER encoded name, as it would appear in the GeneralName structure defined in RFC 5280 and X.509. The encoded byte array should only contain the encoded value of the name, and should not include the tag associated with the name in the GeneralName structure. The ASN.1 definition of this structure appears below. \n  GeneralName ::\u003d CHOICE {\n       otherName                       [0]     OtherName,\n       rfc822Name                      [1]     IA5String,\n       dNSName                         [2]     IA5String,\n       x400Address                     [3]     ORAddress,\n       directoryName                   [4]     Name,\n       ediPartyName                    [5]     EDIPartyName,\n       uniformResourceIdentifier       [6]     IA5String,\n       iPAddress                       [7]     OCTET STRING,\n       registeredID                    [8]     OBJECT IDENTIFIER}\n Note that the byte array supplied here is cloned to protect against subsequent modifications.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the name type (0-8, as listed above)",
          "\u003ccode\u003ename\u003c/code\u003e - a byte array containing the name in ASN.1 DER encoded form"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a parsing error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "bytes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setNameConstraints",
      "comment": "Sets the name constraints criterion. The X509Certificate must have subject and subject alternative names that meet the specified name constraints. The name constraints are specified as a byte array. This byte array should contain the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in RFC 5280 and X.509. The ASN.1 definition of this structure appears below. \n  NameConstraints ::\u003d SEQUENCE {\n       permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n       excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n\n  GeneralSubtrees ::\u003d SEQUENCE SIZE (1..MAX) OF GeneralSubtree\n\n  GeneralSubtree ::\u003d SEQUENCE {\n       base                    GeneralName,\n       minimum         [0]     BaseDistance DEFAULT 0,\n       maximum         [1]     BaseDistance OPTIONAL }\n\n  BaseDistance ::\u003d INTEGER (0..MAX)\n\n  GeneralName ::\u003d CHOICE {\n       otherName                       [0]     OtherName,\n       rfc822Name                      [1]     IA5String,\n       dNSName                         [2]     IA5String,\n       x400Address                     [3]     ORAddress,\n       directoryName                   [4]     Name,\n       ediPartyName                    [5]     EDIPartyName,\n       uniformResourceIdentifier       [6]     IA5String,\n       iPAddress                       [7]     OCTET STRING,\n       registeredID                    [8]     OBJECT IDENTIFIER}\n Note that the byte array supplied here is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getNameConstraints()\"\u003e\u003ccode\u003egetNameConstraints()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ebytes\u003c/code\u003e - a byte array containing the ASN.1 DER encoding of a NameConstraints extension to be used for checking name constraints. Only the value of the extension is included, not the OID or criticality flag. Can be \n\u003ccode\u003enull\u003c/code\u003e, in which case no name constraints check will be performed."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a parsing error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "minMaxPathLen"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setBasicConstraints",
      "comment": "Sets the basic constraints constraint. If the value is greater than or equal to zero, X509Certificates must include a basicConstraints extension with a pathLen of at least this value. If the value is -2, only end-entity certificates are accepted. If the value is -1, no check is done. This constraint is useful when building a certification path forward (from the target toward the trust anchor. If a partial path has been built, any candidate certificate must have a maxPathLen value greater than or equal to the number of certificates in the partial path.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getBasicConstraints()\"\u003e\u003ccode\u003egetBasicConstraints()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eminMaxPathLen\u003c/code\u003e - the value for the basic constraints constraint"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the value is less than -2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Set",
            "parameters": [
              {
                "name": "java.lang.String",
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "certPolicySet"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPolicy",
      "comment": "Sets the policy constraint. The X509Certificate must include at least one of the specified policies in its certificate policies extension. If certPolicySet is empty, then the X509Certificate must include at least some specified policy in its certificate policies extension. If certPolicySet is null, no policy check will be performed. Note that the Set is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getPolicy()\"\u003e\u003ccode\u003egetPolicy()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ecertPolicySet\u003c/code\u003e - a \n\u003ccode\u003eSet\u003c/code\u003e of certificate policy OIDs in string format (or \n\u003ccode\u003enull\u003c/code\u003e). Each OID is represented by a set of nonnegative integers separated by periods."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a parsing error occurs on the OID such as the first component is not 0, 1 or 2 or the second component is greater than 39."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.util.Collection",
            "parameters": [
              {
                "name": "java.util.List",
                "parameters": [
                  {
                    "type": "Wildcard"
                  }
                ],
                "type": "Class"
              }
            ],
            "type": "Class"
          },
          "field": {
            "name": "names"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setPathToNames",
      "comment": "Sets the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified names. This method allows the caller to specify, with a single method call, the complete set of names which the X509Certificates\u0027s name constraints must permit. The specified value replaces the previous value for the pathToNames criterion. This constraint is useful when building a certification path forward (from the target toward the trust anchor. If a partial path has been built, any candidate certificate must not include name constraints that would prohibit building a path to any of the names in the partial path. The names parameter (if not null) is a Collection with one entry for each name to be included in the pathToNames criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If null is supplied as the value for this argument, no pathToNames check will be performed. Each name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see addPathToName(int type, String name) and addPathToName(int type, byte [] name). Note: for distinguished names, specify the byte array form instead of the String form. See the note in addPathToName(int, String) for more information. Note that the names parameter can contain duplicate names (same name and name type), but they may be removed from the Collection of names returned by the getPathToNames method. Note that a deep copy is performed on the Collection to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#getPathToNames()\"\u003e\u003ccode\u003egetPathToNames()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003enames\u003c/code\u003e - a \n\u003ccode\u003eCollection\u003c/code\u003e with one entry per name (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a parsing error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addPathToName",
      "comment": "Adds a name to the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified name. This method allows the caller to add a name to the set of names which the X509Certificates\u0027s name constraints must permit. The specified name is added to any previous value for the pathToNames criterion. If the name is a duplicate, it may be ignored. The name is provided in string format. RFC 822, DNS, and URI names use the well-established string formats for those types (subject to the restrictions included in RFC 5280). IPv4 address names are supplied using dotted quad notation. OID address names are represented as a series of nonnegative integers separated by periods. And directory names (distinguished names) are supplied in RFC 2253 format. No standard string format is defined for otherNames, X.400 names, EDI party names, IPv6 address names, or any other type of names. They should be specified using the addPathToName(int type, byte [] name) method. Note: for distinguished names, use addPathToName(int, byte[]) instead. This method should not be relied on as it can fail to match some certificates because of a loss of encoding information in the RFC 2253 String form of some distinguished names.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the name type (0-8, as specified in RFC 5280, section 4.2.1.6)",
          "\u003ccode\u003ename\u003c/code\u003e - the name in string form"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a parsing error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "name"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "addPathToName",
      "comment": "Adds a name to the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified name. This method allows the caller to add a name to the set of names which the X509Certificates\u0027s name constraints must permit. The specified name is added to any previous value for the pathToNames criterion. If the name is a duplicate, it may be ignored. The name is provided as a byte array. This byte array should contain the DER encoded name, as it would appear in the GeneralName structure defined in RFC 5280 and X.509. The ASN.1 definition of this structure appears in the documentation for addSubjectAlternativeName(int type, byte [] name). Note that the byte array supplied here is cloned to protect against subsequent modifications.",
      "tagMap": {
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the name type (0-8, as specified in RFC 5280, section 4.2.1.6)",
          "\u003ccode\u003ename\u003c/code\u003e - a byte array containing the name in ASN.1 DER encoded form"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if a parsing error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.X509Certificate",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCertificate",
      "comment": "Returns the certificateEquals criterion. The specified X509Certificate must be equal to the X509Certificate passed to the match method. If null, this check is not applied.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setCertificate(java.security.cert.X509Certificate)\"\u003e\u003ccode\u003esetCertificate(java.security.cert.X509Certificate)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eX509Certificate\u003c/code\u003e to match (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.math.BigInteger",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSerialNumber",
      "comment": "Returns the serialNumber criterion. The specified serial number must match the certificate serial number in the X509Certificate. If null, any certificate serial number will do.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setSerialNumber(java.math.BigInteger)\"\u003e\u003ccode\u003esetSerialNumber(java.math.BigInteger)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the certificate serial number to match (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.security.auth.x500.X500Principal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIssuer",
      "comment": "Returns the issuer criterion as an X500Principal. This distinguished name must match the issuer distinguished name in the X509Certificate. If null, the issuer criterion is disabled and any issuer distinguished name will do.",
      "tagMap": {
        "return": [
          "the required issuer distinguished name as X500Principal (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIssuerAsString",
      "comment": "Returns the issuer criterion as a String. This distinguished name must match the issuer distinguished name in the X509Certificate. If null, the issuer criterion is disabled and any issuer distinguished name will do. If the value returned is not null, it is a distinguished name, in RFC 2253 format.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "16"
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the required issuer distinguished name in RFC 2253 format (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getIssuerAsBytes",
      "comment": "Returns the issuer criterion as a byte array. This distinguished name must match the issuer distinguished name in the X509Certificate. If null, the issuer criterion is disabled and any issuer distinguished name will do. If the value returned is not null, it is a byte array containing a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is supplied in the documentation for setIssuer(byte[]). Note that the byte array returned is cloned to protect against subsequent modifications.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an encoding error occurs"
        ],
        "return": [
          "a byte array containing the required issuer distinguished name in ASN.1 DER format (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "javax.security.auth.x500.X500Principal",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSubject",
      "comment": "Returns the subject criterion as an X500Principal. This distinguished name must match the subject distinguished name in the X509Certificate. If null, the subject criterion is disabled and any subject distinguished name will do.",
      "tagMap": {
        "return": [
          "the required subject distinguished name as X500Principal (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSubjectAsString",
      "comment": "Returns the subject criterion as a String. This distinguished name must match the subject distinguished name in the X509Certificate. If null, the subject criterion is disabled and any subject distinguished name will do. If the value returned is not null, it is a distinguished name, in RFC 2253 format.",
      "annotations": [
        {
          "type": "Deprecated",
          "values": [
            {
              "name": "since",
              "value": "16"
            }
          ]
        }
      ],
      "tagMap": {
        "return": [
          "the required subject distinguished name in RFC 2253 format (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSubjectAsBytes",
      "comment": "Returns the subject criterion as a byte array. This distinguished name must match the subject distinguished name in the X509Certificate. If null, the subject criterion is disabled and any subject distinguished name will do. If the value returned is not null, it is a byte array containing a single DER encoded distinguished name, as defined in X.501. The ASN.1 notation for this structure is supplied in the documentation for setSubject(byte[]). Note that the byte array returned is cloned to protect against subsequent modifications.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an encoding error occurs"
        ],
        "return": [
          "a byte array containing the required subject distinguished name in ASN.1 DER format (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSubjectKeyIdentifier",
      "comment": "Returns the subjectKeyIdentifier criterion. The X509Certificate must contain a SubjectKeyIdentifier extension with the specified value. If null, no subjectKeyIdentifier check will be done. Note that the byte array returned is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setSubjectKeyIdentifier(byte%5B%5D)\"\u003e\u003ccode\u003esetSubjectKeyIdentifier(byte[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the key identifier (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAuthorityKeyIdentifier",
      "comment": "Returns the authorityKeyIdentifier criterion. The X509Certificate must contain a AuthorityKeyIdentifier extension with the specified value. If null, no authorityKeyIdentifier check will be done. Note that the byte array returned is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setAuthorityKeyIdentifier(byte%5B%5D)\"\u003e\u003ccode\u003esetAuthorityKeyIdentifier(byte[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the key identifier (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCertificateValid",
      "comment": "Returns the certificateValid criterion. The specified date must fall within the certificate validity period for the X509Certificate. If null, no certificateValid check will be done. Note that the Date returned is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setCertificateValid(java.util.Date)\"\u003e\u003ccode\u003esetCertificateValid(java.util.Date)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eDate\u003c/code\u003e to check (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPrivateKeyValid",
      "comment": "Returns the privateKeyValid criterion. The specified date must fall within the private key validity period for the X509Certificate. If null, no privateKeyValid check will be done. Note that the Date returned is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setPrivateKeyValid(java.util.Date)\"\u003e\u003ccode\u003esetPrivateKeyValid(java.util.Date)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the \n\u003ccode\u003eDate\u003c/code\u003e to check (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSubjectPublicKeyAlgID",
      "comment": "Returns the subjectPublicKeyAlgID criterion. The X509Certificate must contain a subject public key with the specified algorithm. If null, no subjectPublicKeyAlgID check will be done.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setSubjectPublicKeyAlgID(java.lang.String)\"\u003e\u003ccode\u003esetSubjectPublicKeyAlgID(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the object identifier (OID) of the signature algorithm to check for (or \n\u003ccode\u003enull\u003c/code\u003e). An OID is represented by a set of nonnegative integers separated by periods."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.PublicKey",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSubjectPublicKey",
      "comment": "Returns the subjectPublicKey criterion. The X509Certificate must contain the specified subject public key. If null, no subjectPublicKey check will be done.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setSubjectPublicKey(java.security.PublicKey)\"\u003e\u003ccode\u003esetSubjectPublicKey(java.security.PublicKey)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the subject public key to check for (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getKeyUsage",
      "comment": "Returns the keyUsage criterion. The X509Certificate must allow the specified keyUsage values. If null, no keyUsage check will be done. Note that the boolean array returned is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setKeyUsage(boolean%5B%5D)\"\u003e\u003ccode\u003esetKeyUsage(boolean[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a boolean array in the same format as the boolean array returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509Certificate.html#getKeyUsage()\"\u003e\u003ccode\u003eX509Certificate.getKeyUsage()\u003c/code\u003e\u003c/a\u003e. Or \n\u003ccode\u003enull\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getExtendedKeyUsage",
      "comment": "Returns the extendedKeyUsage criterion. The X509Certificate must allow the specified key purposes in its extended key usage extension. If the keyPurposeSet returned is empty or null, no extendedKeyUsage check will be done. Note that an X509Certificate that has no extendedKeyUsage extension implicitly allows all key purposes.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setExtendedKeyUsage(java.util.Set)\"\u003e\u003ccode\u003esetExtendedKeyUsage(java.util.Set\u0026lt;java.lang.String\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an immutable \n\u003ccode\u003eSet\u003c/code\u003e of key purpose OIDs in string format (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getMatchAllSubjectAltNames",
      "comment": "Indicates if the X509Certificate must contain all or at least one of the subjectAlternativeNames specified in the setSubjectAlternativeNames or addSubjectAlternativeName methods. If true, the X509Certificate must contain all of the specified subject alternative names. If false, the X509Certificate must contain at least one of the specified subject alternative names.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setMatchAllSubjectAltNames(boolean)\"\u003e\u003ccode\u003esetMatchAllSubjectAltNames(boolean)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the flag is enabled; \n\u003ccode\u003efalse\u003c/code\u003e if the flag is disabled. The flag is \n\u003ccode\u003etrue\u003c/code\u003e by default."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getSubjectAlternativeNames",
      "comment": "Returns a copy of the subjectAlternativeNames criterion. The X509Certificate must contain all or at least one of the specified subjectAlternativeNames, depending on the value of the matchAllNames flag (see getMatchAllSubjectAltNames). If the value returned is null, no subjectAlternativeNames check will be performed. If the value returned is not null, it is a Collection with one entry for each name to be included in the subject alternative name criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. Note that the Collection returned may contain duplicate names (same name and name type). Each subject alternative name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see addSubjectAlternativeName(int type, String name) and addSubjectAlternativeName(int type, byte [] name). Note that a deep copy is performed on the Collection to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setSubjectAlternativeNames(java.util.Collection)\"\u003e\u003ccode\u003esetSubjectAlternativeNames(java.util.Collection\u0026lt;java.util.List\u0026lt;?\u0026gt;\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eCollection\u003c/code\u003e of names (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getNameConstraints",
      "comment": "Returns the name constraints criterion. The X509Certificate must have subject and subject alternative names that meet the specified name constraints. The name constraints are returned as a byte array. This byte array contains the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in RFC 5280 and X.509. The ASN.1 notation for this structure is supplied in the documentation for setNameConstraints(byte [] bytes). Note that the byte array returned is cloned to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setNameConstraints(byte%5B%5D)\"\u003e\u003ccode\u003esetNameConstraints(byte[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a byte array containing the ASN.1 DER encoding of a NameConstraints extension used for checking name constraints. \n\u003ccode\u003enull\u003c/code\u003e if no name constraints check will be performed."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getBasicConstraints",
      "comment": "Returns the basic constraints constraint. If the value is greater than or equal to zero, the X509Certificates must include a basicConstraints extension with a pathLen of at least this value. If the value is -2, only end-entity certificates are accepted. If the value is -1, no basicConstraints check is done.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setBasicConstraints(int)\"\u003e\u003ccode\u003esetBasicConstraints(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the value for the basic constraints constraint"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPolicy",
      "comment": "Returns the policy criterion. The X509Certificate must include at least one of the specified policies in its certificate policies extension. If the Set returned is empty, then the X509Certificate must include at least some specified policy in its certificate policies extension. If the Set returned is null, no policy check will be performed.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setPolicy(java.util.Set)\"\u003e\u003ccode\u003esetPolicy(java.util.Set\u0026lt;java.lang.String\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an immutable \n\u003ccode\u003eSet\u003c/code\u003e of certificate policy OIDs in string format (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "name": "java.util.List",
            "parameters": [
              {
                "type": "Wildcard"
              }
            ],
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPathToNames",
      "comment": "Returns a copy of the pathToNames criterion. The X509Certificate must not include name constraints that would prohibit building a path to the specified names. If the value returned is null, no pathToNames check will be performed. If the value returned is not null, it is a Collection with one entry for each name to be included in the pathToNames criterion. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. Note that the Collection returned may contain duplicate names (same name and name type). Each name in the Collection may be specified either as a String or as an ASN.1 encoded byte array. For more details about the formats used, see addPathToName(int type, String name) and addPathToName(int type, byte [] name). Note that a deep copy is performed on the Collection to protect against subsequent modifications.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CertSelector.html#setPathToNames(java.util.Collection)\"\u003e\u003ccode\u003esetPathToNames(java.util.Collection\u0026lt;java.util.List\u0026lt;?\u0026gt;\u0026gt;)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eCollection\u003c/code\u003e of names (or \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Return a printable representation of the CertSelector.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eString\u003c/code\u003e describing the contents of the \n\u003ccode\u003eCertSelector\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.cert.Certificate",
            "type": "Class"
          },
          "field": {
            "name": "cert"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "match",
      "comment": "Decides whether a Certificate should be selected.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertSelector.html#match(java.security.cert.Certificate)\"\u003ematch\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertSelector.html\" title\u003d\"interface in java.security.cert\"\u003eCertSelector\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecert\u003c/code\u003e - the \n\u003ccode\u003eCertificate\u003c/code\u003e to be checked"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the \n\u003ccode\u003eCertificate\u003c/code\u003e should be selected, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Returns a copy of this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertSelector.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertSelector.html\" title\u003d\"interface in java.security.cert\"\u003eCertSelector\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the copy"
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates an X509CertSelector. Initially, no criteria are set so any X509Certificate will match.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.security.cert.X509CertSelector",
  "comment": "A \n\u003ccode\u003eCertSelector\u003c/code\u003e that selects \n\u003ccode\u003eX509Certificates\u003c/code\u003e that match all specified criteria. This class is particularly useful when selecting certificates from a \n\u003ccode\u003eCertStore\u003c/code\u003e to build a PKIX-compliant certification path. \n\u003cp\u003e When first constructed, an \u003ccode\u003eX509CertSelector\u003c/code\u003e has no criteria enabled and each of the \u003ccode\u003eget\u003c/code\u003e methods return a default value (\u003ccode\u003enull\u003c/code\u003e, or \u003ccode\u003e-1\u003c/code\u003e for the \u003ca href\u003d\"#getBasicConstraints()\"\u003e\u003ccode\u003egetBasicConstraints\u003c/code\u003e\u003c/a\u003e method). Therefore, the \u003ca href\u003d\"#match(java.security.cert.Certificate)\"\u003e\u003ccode\u003ematch\u003c/code\u003e\u003c/a\u003e method would return \u003ccode\u003etrue\u003c/code\u003e for any \u003ccode\u003eX509Certificate\u003c/code\u003e. Typically, several criteria are enabled (by calling \u003ca href\u003d\"#setIssuer(javax.security.auth.x500.X500Principal)\"\u003e\u003ccode\u003esetIssuer(X500Principal)\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"#setKeyUsage(boolean%5B%5D)\"\u003e\u003ccode\u003esetKeyUsage\u003c/code\u003e\u003c/a\u003e, for instance) and then the \u003ccode\u003eX509CertSelector\u003c/code\u003e is passed to \u003ca href\u003d\"CertStore.html#getCertificates(java.security.cert.CertSelector)\"\u003e\u003ccode\u003eCertStore.getCertificates\u003c/code\u003e\u003c/a\u003e or some similar method. \u003c/p\u003e\n\u003cp\u003e Several criteria can be enabled (by calling \u003ca href\u003d\"#setIssuer(javax.security.auth.x500.X500Principal)\"\u003e\u003ccode\u003esetIssuer(X500Principal)\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#setSerialNumber(java.math.BigInteger)\"\u003e\u003ccode\u003esetSerialNumber\u003c/code\u003e\u003c/a\u003e, for example) such that the \u003ccode\u003ematch\u003c/code\u003e method usually uniquely matches a single \u003ccode\u003eX509Certificate\u003c/code\u003e. We say usually, since it is possible for two issuing CAs to have the same distinguished name and each issue a certificate with the same serial number. Other unique combinations include the issuer, subject, subjectKeyIdentifier and/or the subjectPublicKey criteria. \u003c/p\u003e\n\u003cp\u003e Please refer to \u003ca href\u003d\"http://tools.ietf.org/html/rfc5280\"\u003eRFC 5280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile\u003c/a\u003e for definitions of the X.509 certificate extensions mentioned below. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eConcurrent Access\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003e Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertSelector.html\" title\u003d\"interface in java.security.cert\"\u003e\u003ccode\u003eCertSelector\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509Certificate.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eX509Certificate\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.4"
    ]
  }
}