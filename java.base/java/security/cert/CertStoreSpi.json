{
  "packageName": "java.security.cert",
  "simpleName": "CertStoreSpi",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "java.security.cert.Certificate",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineGetCertificates",
      "comment": "Returns a Collection of Certificates that match the specified selector. If no Certificates match the selector, an empty Collection will be returned. For some CertStore types, the resulting Collection may not contain all of the Certificates that match the selector. For instance, an LDAP CertStore may not search all entries in the directory. Instead, it may just search entries that are likely to contain the Certificates it is looking for. Some CertStore implementations (especially LDAP CertStores) may throw a CertStoreException unless a non-null CertSelector is provided that includes specific criteria that can be used to find the certificates. Issuer and/or subject names are especially useful criteria.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eselector\u003c/code\u003e - A \n\u003ccode\u003eCertSelector\u003c/code\u003e used to select which \n\u003ccode\u003eCertificate\u003c/code\u003es should be returned. Specify \n\u003ccode\u003enull\u003c/code\u003e to return all \n\u003ccode\u003eCertificate\u003c/code\u003es (if supported)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertStoreException.html\" title\u003d\"class in java.security.cert\"\u003eCertStoreException\u003c/a\u003e\u003c/code\u003e - if an exception occurs"
        ],
        "return": [
          "A \n\u003ccode\u003eCollection\u003c/code\u003e of \n\u003ccode\u003eCertificate\u003c/code\u003es that match the specified selector (never \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "java.security.cert.CRL",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "engineGetCRLs",
      "comment": "Returns a Collection of CRLs that match the specified selector. If no CRLs match the selector, an empty Collection will be returned. For some CertStore types, the resulting Collection may not contain all of the CRLs that match the selector. For instance, an LDAP CertStore may not search all entries in the directory. Instead, it may just search entries that are likely to contain the CRLs it is looking for. Some CertStore implementations (especially LDAP CertStores) may throw a CertStoreException unless a non-null CRLSelector is provided that includes specific criteria that can be used to find the CRLs. Issuer names and/or the certificate to be checked are especially useful.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eselector\u003c/code\u003e - A \n\u003ccode\u003eCRLSelector\u003c/code\u003e used to select which \n\u003ccode\u003eCRL\u003c/code\u003es should be returned. Specify \n\u003ccode\u003enull\u003c/code\u003e to return all \n\u003ccode\u003eCRL\u003c/code\u003es (if supported)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertStoreException.html\" title\u003d\"class in java.security.cert\"\u003eCertStoreException\u003c/a\u003e\u003c/code\u003e - if an exception occurs"
        ],
        "return": [
          "A \n\u003ccode\u003eCollection\u003c/code\u003e of \n\u003ccode\u003eCRL\u003c/code\u003es that match the specified selector (never \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.security.InvalidAlgorithmParameterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.security.cert.CertStoreParameters",
            "type": "Class"
          },
          "name": "params",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "The sole constructor.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - the initialization parameters (may be \n\u003ccode\u003enull\u003c/code\u003e)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if the initialization parameters are inappropriate for this \n\u003ccode\u003eCertStoreSpi\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.security.cert.CertStoreSpi",
  "comment": "The \n\u003ci\u003eService Provider Interface\u003c/i\u003e (\n\u003cb\u003eSPI\u003c/b\u003e) for the \n\u003ca href\u003d\"CertStore.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eCertStore\u003c/code\u003e\u003c/a\u003e class. All \n\u003ccode\u003eCertStore\u003c/code\u003e implementations must include a class (the SPI class) that extends this class (\n\u003ccode\u003eCertStoreSpi\u003c/code\u003e), provides a constructor with a single argument of type \n\u003ccode\u003eCertStoreParameters\u003c/code\u003e, and implements all of its methods. In general, instances of this class should only be accessed through the \n\u003ccode\u003eCertStore\u003c/code\u003e class. For details, see the Java Cryptography Architecture. \n\u003cp\u003e \u003cb\u003eConcurrent Access\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003e The public methods of all \u003ccode\u003eCertStoreSpi\u003c/code\u003e objects must be thread-safe. That is, multiple threads may concurrently invoke these methods on a single \u003ccode\u003eCertStoreSpi\u003c/code\u003e object (or more than one) with no ill effects. This allows a \u003ccode\u003eCertPathBuilder\u003c/code\u003e to search for a CRL while simultaneously searching for further certificates, for instance. \u003c/p\u003e\n\u003cp\u003e Simple \u003ccode\u003eCertStoreSpi\u003c/code\u003e implementations will probably ensure thread safety by adding a \u003ccode\u003esynchronized\u003c/code\u003e keyword to their \u003ccode\u003eengineGetCertificates\u003c/code\u003e and \u003ccode\u003eengineGetCRLs\u003c/code\u003e methods. More sophisticated ones may allow truly concurrent access.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}