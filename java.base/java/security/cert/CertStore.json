{
  "packageName": "java.security.cert",
  "simpleName": "CertStore",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "java.security.cert.Certificate",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getCertificates",
      "comment": "Returns a Collection of Certificates that match the specified selector. If no Certificates match the selector, an empty Collection will be returned. For some CertStore types, the resulting Collection may not contain all of the Certificates that match the selector. For instance, an LDAP CertStore may not search all entries in the directory. Instead, it may just search entries that are likely to contain the Certificates it is looking for. Some CertStore implementations (especially LDAP CertStores) may throw a CertStoreException unless a non-null CertSelector is provided that includes specific criteria that can be used to find the certificates. Issuer and/or subject names are especially useful criteria.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eselector\u003c/code\u003e - A \n\u003ccode\u003eCertSelector\u003c/code\u003e used to select which \n\u003ccode\u003eCertificate\u003c/code\u003es should be returned. Specify \n\u003ccode\u003enull\u003c/code\u003e to return all \n\u003ccode\u003eCertificate\u003c/code\u003es (if supported)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertStoreException.html\" title\u003d\"class in java.security.cert\"\u003eCertStoreException\u003c/a\u003e\u003c/code\u003e - if an exception occurs"
        ],
        "return": [
          "A \n\u003ccode\u003eCollection\u003c/code\u003e of \n\u003ccode\u003eCertificate\u003c/code\u003es that match the specified selector (never \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "java.security.cert.CRL",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getCRLs",
      "comment": "Returns a Collection of CRLs that match the specified selector. If no CRLs match the selector, an empty Collection will be returned. For some CertStore types, the resulting Collection may not contain all of the CRLs that match the selector. For instance, an LDAP CertStore may not search all entries in the directory. Instead, it may just search entries that are likely to contain the CRLs it is looking for. Some CertStore implementations (especially LDAP CertStores) may throw a CertStoreException unless a non-null CRLSelector is provided that includes specific criteria that can be used to find the CRLs. Issuer names and/or the certificate to be checked are especially useful.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eselector\u003c/code\u003e - A \n\u003ccode\u003eCRLSelector\u003c/code\u003e used to select which \n\u003ccode\u003eCRL\u003c/code\u003es should be returned. Specify \n\u003ccode\u003enull\u003c/code\u003e to return all \n\u003ccode\u003eCRL\u003c/code\u003es (if supported)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertStoreException.html\" title\u003d\"class in java.security.cert\"\u003eCertStoreException\u003c/a\u003e\u003c/code\u003e - if an exception occurs"
        ],
        "return": [
          "A \n\u003ccode\u003eCollection\u003c/code\u003e of \n\u003ccode\u003eCRL\u003c/code\u003es that match the specified selector (never \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.CertStore",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a CertStore object that implements the specified CertStore type and is initialized with the specified parameters. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new CertStore object encapsulating the CertStoreSpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method. The CertStore that is returned is initialized with the specified CertStoreParameters. The type of parameters needed may vary between different types of CertStores. Note that the specified CertStoreParameters object is cloned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the name of the requested \n\u003ccode\u003eCertStore\u003c/code\u003e type. See the CertStore section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#certstore-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard types.",
          "\u003ccode\u003eparams\u003c/code\u003e - the initialization parameters (may be \n\u003ccode\u003enull\u003c/code\u003e)."
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if the specified initialization parameters are inappropriate for this \n\u003ccode\u003eCertStore\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no \n\u003ccode\u003eProvider\u003c/code\u003e supports a \n\u003ccode\u003eCertStoreSpi\u003c/code\u003e implementation for the specified type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eCertStore\u003c/code\u003e object that implements the specified \n\u003ccode\u003eCertStore\u003c/code\u003e type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.CertStore",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a CertStore object that implements the specified CertStore type. A new CertStore object encapsulating the CertStoreSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method. The CertStore that is returned is initialized with the specified CertStoreParameters. The type of parameters needed may vary between different types of CertStores. Note that the specified CertStoreParameters object is cloned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the requested \n\u003ccode\u003eCertStore\u003c/code\u003e type. See the CertStore section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#certstore-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard types.",
          "\u003ccode\u003eparams\u003c/code\u003e - the initialization parameters (may be \n\u003ccode\u003enull\u003c/code\u003e).",
          "\u003ccode\u003eprovider\u003c/code\u003e - the name of the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eprovider\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e or empty",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if the specified initialization parameters are inappropriate for this \n\u003ccode\u003eCertStore\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eCertStoreSpi\u003c/code\u003e implementation for the specified type is not available from the specified provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider is not registered in the security provider list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eCertStore\u003c/code\u003e object that implements the specified type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.CertStore",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a CertStore object that implements the specified CertStore type. A new CertStore object encapsulating the CertStoreSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list. The CertStore that is returned is initialized with the specified CertStoreParameters. The type of parameters needed may vary between different types of CertStores. Note that the specified CertStoreParameters object is cloned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the requested \n\u003ccode\u003eCertStore\u003c/code\u003e type. See the CertStore section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#certstore-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard types.",
          "\u003ccode\u003eparams\u003c/code\u003e - the initialization parameters (may be \n\u003ccode\u003enull\u003c/code\u003e).",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eprovider\u003c/code\u003e is null",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if the specified initialization parameters are inappropriate for this \n\u003ccode\u003eCertStore\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eCertStoreSpi\u003c/code\u003e implementation for the specified type is not available from the specified Provider object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a \n\u003ccode\u003eCertStore\u003c/code\u003e object that implements the specified type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.CertStoreParameters",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getCertStoreParameters",
      "comment": "Returns the parameters used to initialize this CertStore. Note that the CertStoreParameters object is cloned before it is returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the parameters used to initialize this \n\u003ccode\u003eCertStore\u003c/code\u003e (may be \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getType",
      "comment": "Returns the type of this CertStore.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the type of this \n\u003ccode\u003eCertStore\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getProvider",
      "comment": "Returns the provider of this CertStore.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the provider of this \n\u003ccode\u003eCertStore\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getDefaultType",
      "comment": "Returns the default CertStore type as specified by the certstore.type security property, or the string \"LDAP\" if no such property exists. The default CertStore type can be used by applications that do not want to use a hard-coded type when calling one of the getInstance methods, and want to provide a default CertStore type in case a user does not specify its own. The default CertStore type can be changed by setting the value of the certstore.type security property to the desired type.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003esecurity properties\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default \n\u003ccode\u003eCertStore\u003c/code\u003e type as specified by the \n\u003ccode\u003ecertstore.type\u003c/code\u003e security property, or the string \"LDAP\" if no such property exists."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.security.cert.CertStoreSpi",
            "type": "Class"
          },
          "name": "storeSpi",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "name": "provider",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.cert.CertStoreParameters",
            "type": "Class"
          },
          "name": "params",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a CertStore object of the given type, and encapsulates the given provider implementation (SPI object) in it.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estoreSpi\u003c/code\u003e - the provider implementation",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider",
          "\u003ccode\u003etype\u003c/code\u003e - the type",
          "\u003ccode\u003eparams\u003c/code\u003e - the initialization parameters (may be \n\u003ccode\u003enull\u003c/code\u003e)"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.security.cert.CertStore",
  "comment": "A class for retrieving \n\u003ccode\u003eCertificate\u003c/code\u003es and \n\u003ccode\u003eCRL\u003c/code\u003es from a repository. \n\u003cp\u003e This class uses a provider-based architecture. To create a \u003ccode\u003eCertStore\u003c/code\u003e, call one of the static \u003ccode\u003egetInstance\u003c/code\u003e methods, passing in the type of \u003ccode\u003eCertStore\u003c/code\u003e desired, any applicable initialization parameters and optionally the name of the provider desired. \u003c/p\u003e\n\u003cp\u003e Once the \u003ccode\u003eCertStore\u003c/code\u003e has been created, it can be used to retrieve \u003ccode\u003eCertificate\u003c/code\u003es and \u003ccode\u003eCRL\u003c/code\u003es by calling its \u003ca href\u003d\"#getCertificates(java.security.cert.CertSelector)\"\u003e\u003ccode\u003egetCertificates\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#getCRLs(java.security.cert.CRLSelector)\"\u003e\u003ccode\u003egetCRLs\u003c/code\u003e\u003c/a\u003e methods. \u003c/p\u003e\n\u003cp\u003e Unlike a \u003ca href\u003d\"../KeyStore.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eKeyStore\u003c/code\u003e\u003c/a\u003e, which provides access to a cache of private keys and trusted certificates, a \u003ccode\u003eCertStore\u003c/code\u003e is designed to provide access to a potentially vast repository of untrusted certificates and CRLs. For example, an LDAP implementation of \u003ccode\u003eCertStore\u003c/code\u003e provides access to certificates and CRLs stored in one or more directories using the LDAP protocol and the schema as defined in the RFC service attribute. \u003c/p\u003e\n\u003cp\u003e Every implementation of the Java platform is required to support the following standard \u003ccode\u003eCertStore\u003c/code\u003e type: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eCollection\u003c/code\u003e\u003c/li\u003e \n\u003c/ul\u003e This type is described in the \n\u003ca href\u003d\"../../../../../specs/security/standard-names.html#certstore-types\"\u003e CertStore section\u003c/a\u003e of the Java Security Standard Algorithm Names Specification. Consult the release documentation for your implementation to see if any other types are supported. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e \u003cb\u003eConcurrent Access\u003c/b\u003e \u003c/p\u003e\n\u003cp\u003e All public methods of \u003ccode\u003eCertStore\u003c/code\u003e objects must be thread-safe. That is, multiple threads may concurrently invoke these methods on a single \u003ccode\u003eCertStore\u003c/code\u003e object (or more than one) with no ill effects. This allows a \u003ccode\u003eCertPathBuilder\u003c/code\u003e to search for a CRL while simultaneously searching for further certificates, for instance. \u003c/p\u003e\n\u003cp\u003e The static methods of this class are also guaranteed to be thread-safe. Multiple threads may concurrently invoke the static methods defined in this class with no ill effects.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.4"
    ]
  }
}