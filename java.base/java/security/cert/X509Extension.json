{
  "packageName": "java.security.cert",
  "simpleName": "X509Extension",
  "moduleName": "java.base",
  "type": "INTERFACE",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "hasUnsupportedCriticalExtension",
      "comment": "Check if there is a critical extension that is not supported.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if a critical extension is found that is not supported, otherwise \n\u003ccode\u003efalse\u003c/code\u003e."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getCriticalExtensionOIDs",
      "comment": "Gets a Set of the OID strings for the extension(s) marked CRITICAL in the certificate/CRL managed by the object implementing this interface. Here is sample code to get a Set of critical extensions from an X509Certificate and print the OIDs: \n X509Certificate cert \u003d null;\n try (InputStream inStrm \u003d new FileInputStream(\"DER-encoded-Cert\")) {\n     CertificateFactory cf \u003d CertificateFactory.getInstance(\"X.509\");\n     cert \u003d (X509Certificate)cf.generateCertificate(inStrm);\n }\n\n Set\u003cString\u003e critSet \u003d cert.getCriticalExtensionOIDs();\n if (critSet !\u003d null \u0026\u0026 !critSet.isEmpty()) {\n     System.out.println(\"Set of critical extensions:\");\n     for (String oid : critSet) {\n         System.out.println(oid);\n     }\n }",
      "tagMap": {
        "return": [
          "a Set (or an empty Set if none are marked critical) of the extension OID strings for extensions that are marked critical. If there are no extensions present at all, then this method returns null."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Set",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getNonCriticalExtensionOIDs",
      "comment": "Gets a Set of the OID strings for the extension(s) marked NON-CRITICAL in the certificate/CRL managed by the object implementing this interface. Here is sample code to get a Set of non-critical extensions from an X509CRL revoked certificate entry and print the OIDs: \n CertificateFactory cf \u003d null;\n X509CRL crl \u003d null;\n try (InputStream inStrm \u003d new FileInputStream(\"DER-encoded-CRL\")) {\n     cf \u003d CertificateFactory.getInstance(\"X.509\");\n     crl \u003d (X509CRL)cf.generateCRL(inStrm);\n }\n\n byte[] certData \u003d \u003cDER-encoded certificate data\u003e\n ByteArrayInputStream bais \u003d new ByteArrayInputStream(certData);\n X509Certificate cert \u003d (X509Certificate)cf.generateCertificate(bais);\n X509CRLEntry badCert \u003d\n              crl.getRevokedCertificate(cert.getSerialNumber());\n\n if (badCert !\u003d null) {\n     Set\u003cString\u003e nonCritSet \u003d badCert.getNonCriticalExtensionOIDs();\n     if (nonCritSet !\u003d null)\n         for (String oid : nonCritSet) {\n             System.out.println(oid);\n         }\n }",
      "tagMap": {
        "return": [
          "a Set (or an empty Set if none are marked non-critical) of the extension OID strings for extensions that are marked non-critical. If there are no extensions present at all, then this method returns null."
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "oid"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 0,
      "name": "getExtensionValue",
      "comment": "Gets the DER-encoded OCTET string for the extension value (extnValue) identified by the passed-in oid String. The oid string is represented by a set of nonnegative whole numbers separated by periods. For example: Examples of OIDs and extension names OID (Object Identifier) Extension Name 2.5.29.14 SubjectKeyIdentifier 2.5.29.15 KeyUsage 2.5.29.16 PrivateKeyUsage 2.5.29.17 SubjectAlternativeName 2.5.29.18 IssuerAlternativeName 2.5.29.19 BasicConstraints 2.5.29.30 NameConstraints 2.5.29.33 PolicyMappings 2.5.29.35 AuthorityKeyIdentifier 2.5.29.36 PolicyConstraints",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoid\u003c/code\u003e - the Object Identifier value for the extension."
        ],
        "return": [
          "the DER-encoded octet string of the extension value or null if it is not present."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 513,
  "name": "java.security.cert.X509Extension",
  "comment": "Interface for an X.509 extension. \n\u003cp\u003eThe extensions defined for X.509 v3 \u003ca href\u003d\"X509Certificate.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eCertificates\u003c/code\u003e\u003c/a\u003e and v2 \u003ca href\u003d\"X509CRL.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eCRLs\u003c/code\u003e\u003c/a\u003e (Certificate Revocation Lists) provide methods for associating additional attributes with users or public keys, for managing the certification hierarchy, and for managing CRL distribution. The X.509 extensions format also allows communities to define private extensions to carry information unique to those communities. \u003c/p\u003e\n\u003cp\u003eEach extension in a certificate/CRL may be designated as critical or non-critical. A certificate/CRL-using system (an application validating a certificate/CRL) must reject the certificate/CRL if it encounters a critical extension it does not recognize. A non-critical extension may be ignored if it is not recognized. \u003c/p\u003e\n\u003cp\u003e The ASN.1 definition for this is: \u003c/p\u003e\n\u003cpre\u003e Extensions  ::\u003d  SEQUENCE SIZE (1..MAX) OF Extension\n\n Extension  ::\u003d  SEQUENCE  {\n     extnId        OBJECT IDENTIFIER,\n     critical      BOOLEAN DEFAULT FALSE,\n     extnValue     OCTET STRING\n                   -- contains a DER encoding of a value\n                   -- of the type registered for use with\n                   -- the extnId object identifier value\n }\n \u003c/pre\u003e Since not all extensions are known, the \n\u003ccode\u003egetExtensionValue\u003c/code\u003e method returns the DER-encoded OCTET STRING of the extension value (i.e., the \n\u003ccode\u003eextnValue\u003c/code\u003e). This can then be handled by a \n\u003cem\u003eClass\u003c/em\u003e that understands the extension.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.2"
    ]
  }
}