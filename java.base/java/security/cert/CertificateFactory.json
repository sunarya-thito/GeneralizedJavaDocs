{
  "packageName": "java.security.cert",
  "simpleName": "CertificateFactory",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.security.cert.CertificateFactory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Returns a certificate factory object that implements the specified certificate type. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new CertificateFactory object encapsulating the CertificateFactorySpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the name of the requested certificate type. See the CertificateFactory section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#certificatefactory-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard certificate types."
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if no \n\u003ccode\u003eProvider\u003c/code\u003e supports a \n\u003ccode\u003eCertificateFactorySpi\u003c/code\u003e implementation for the specified type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a certificate factory object for the specified type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.CertificateFactory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Returns a certificate factory object for the specified certificate type. A new CertificateFactory object encapsulating the CertificateFactorySpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the certificate type. See the CertificateFactory section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#certificatefactory-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard certificate types.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the name of the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eCertificateFactorySpi\u003c/code\u003e implementation for the specified algorithm is not available from the specified provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the provider name is \n\u003ccode\u003enull\u003c/code\u003e or empty",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider is not registered in the security provider list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a certificate factory object for the specified type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.CertificateFactory",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Returns a certificate factory object for the specified certificate type. A new CertificateFactory object encapsulating the CertificateFactorySpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the certificate type. See the CertificateFactory section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#certificatefactory-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard certificate types.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eCertificateFactorySpi\u003c/code\u003e implementation for the specified algorithm is not available from the specified \n\u003ccode\u003eProvider\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003eprovider\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a certificate factory object for the specified type"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getProvider",
      "comment": "Returns the provider of this certificate factory.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the provider of this certificate factory."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getType",
      "comment": "Returns the name of the certificate type associated with this certificate factory.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the name of the certificate type associated with this certificate factory."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.Certificate",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "generateCertificate",
      "comment": "Generates a certificate object and initializes it with the data read from the input stream inStream. In order to take advantage of the specialized certificate format supported by this certificate factory, the returned certificate object can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the returned certificate object can be typecast to the X509Certificate class. In the case of a certificate factory for X.509 certificates, the certificate provided in inStream must be DER-encoded and may be supplied in binary or printable (Base64) encoding. If the certificate is provided in Base64 encoding, it must be bounded at the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at the end by -----END CERTIFICATE-----. Note that if the given input stream does not support mark and reset, this method will consume the entire input stream. Otherwise, each call to this method consumes one certificate and the read position of the input stream is positioned to the next available byte after the inherent end-of-certificate marker. If the data in the input stream does not contain an inherent end-of-certificate marker (other than EOF) and there is trailing data after the certificate is parsed, a CertificateException is thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einStream\u003c/code\u003e - an input stream with the certificate data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - on parsing errors."
        ],
        "return": [
          "a certificate object initialized with the data from the input stream."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Iterator",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getCertPathEncodings",
      "comment": "Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first. See the CertPath Encodings section in the Java Security Standard Algorithm Names Specification for information about standard encoding names and their formats. Attempts to modify the returned Iterator via its remove method result in an UnsupportedOperationException.",
      "annotations": [],
      "tagMap": {
        "return": [
          "an \n\u003ccode\u003eIterator\u003c/code\u003e over the names of the supported \n\u003ccode\u003eCertPath\u003c/code\u003e encodings (as \n\u003ccode\u003eString\u003c/code\u003es)"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.CertPath",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "generateCertPath",
      "comment": "Generates a CertPath object and initializes it with the data read from the InputStream inStream. The data is assumed to be in the default encoding. The name of the default encoding is the first element of the Iterator returned by the getCertPathEncodings method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einStream\u003c/code\u003e - an \n\u003ccode\u003eInputStream\u003c/code\u003e containing the data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if an exception occurs while decoding"
        ],
        "return": [
          "a \n\u003ccode\u003eCertPath\u003c/code\u003e initialized with the data from the \n\u003ccode\u003eInputStream\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.CertPath",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "generateCertPath",
      "comment": "Generates a CertPath object and initializes it with the data read from the InputStream inStream. The data is assumed to be in the specified encoding. See the CertPath Encodings section in the Java Security Standard Algorithm Names Specification for information about standard encoding names and their formats.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einStream\u003c/code\u003e - an \n\u003ccode\u003eInputStream\u003c/code\u003e containing the data",
          "\u003ccode\u003eencoding\u003c/code\u003e - the encoding used for the data"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if an exception occurs while decoding or the encoding requested is not supported"
        ],
        "return": [
          "a \n\u003ccode\u003eCertPath\u003c/code\u003e initialized with the data from the \n\u003ccode\u003eInputStream\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.CertPath",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "generateCertPath",
      "comment": "Generates a CertPath object and initializes it with a List of Certificates. The certificates supplied must be of a type supported by the CertificateFactory. They will be copied out of the supplied List object.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecertificates\u003c/code\u003e - a \n\u003ccode\u003eList\u003c/code\u003e of \n\u003ccode\u003eCertificate\u003c/code\u003es"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if an exception occurs"
        ],
        "return": [
          "a \n\u003ccode\u003eCertPath\u003c/code\u003e initialized with the supplied list of certificates"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "java.security.cert.Certificate",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "generateCertificates",
      "comment": "Returns a (possibly empty) collection view of the certificates read from the given input stream inStream. In order to take advantage of the specialized certificate format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the elements in the returned collection can be typecast to the X509Certificate class. In the case of a certificate factory for X.509 certificates, inStream may contain a sequence of DER-encoded certificates in the formats described for generateCertificate. In addition, inStream may contain a PKCS#7 certificate chain. This is a PKCS#7 SignedData object, with the only significant field being certificates. In particular, the signature and the contents are ignored. This format allows multiple certificates to be downloaded at once. If no certificates are present, an empty collection is returned. Note that if the given input stream does not support mark and reset, this method will consume the entire input stream.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einStream\u003c/code\u003e - the input stream with the certificates."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - on parsing errors."
        ],
        "return": [
          "a (possibly empty) collection view of java.security.cert.Certificate objects initialized with the data from the input stream."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.CRL",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "generateCRL",
      "comment": "Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream. In order to take advantage of the specialized CRL format supported by this certificate factory, the returned CRL object can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the returned CRL object can be typecast to the X509CRL class. Note that if the given input stream does not support mark and reset, this method will consume the entire input stream. Otherwise, each call to this method consumes one CRL and the read position of the input stream is positioned to the next available byte after the inherent end-of-CRL marker. If the data in the input stream does not contain an inherent end-of-CRL marker (other than EOF) and there is trailing data after the CRL is parsed, a CRLException is thrown.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einStream\u003c/code\u003e - an input stream with the CRL data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CRLException.html\" title\u003d\"class in java.security.cert\"\u003eCRLException\u003c/a\u003e\u003c/code\u003e - on parsing errors."
        ],
        "return": [
          "a CRL object initialized with the data from the input stream."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Collection",
        "parameters": [
          {
            "upperBounds": [
              {
                "name": "java.security.cert.CRL",
                "type": "Class"
              }
            ],
            "type": "Wildcard"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "generateCRLs",
      "comment": "Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream. In order to take advantage of the specialized CRL format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the elements in the returned collection can be typecast to the X509CRL class. In the case of a certificate factory for X.509 CRLs, inStream may contain a sequence of DER-encoded CRLs. In addition, inStream may contain a PKCS#7 CRL set. This is a PKCS#7 SignedData object, with the only significant field being crls. In particular, the signature and the contents are ignored. This format allows multiple CRLs to be downloaded at once. If no CRLs are present, an empty collection is returned. Note that if the given input stream does not support mark and reset, this method will consume the entire input stream.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003einStream\u003c/code\u003e - the input stream with the CRLs."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CRLException.html\" title\u003d\"class in java.security.cert\"\u003eCRLException\u003c/a\u003e\u003c/code\u003e - on parsing errors."
        ],
        "return": [
          "a (possibly empty) collection view of java.security.cert.CRL objects initialized with the data from the input stream."
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.security.cert.CertificateFactorySpi",
            "type": "Class"
          },
          "name": "certFacSpi",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "name": "provider",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a CertificateFactory object of the given type, and encapsulates the given provider implementation (SPI object) in it.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecertFacSpi\u003c/code\u003e - the provider implementation.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider.",
          "\u003ccode\u003etype\u003c/code\u003e - the certificate type."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.security.cert.CertificateFactory",
  "comment": "This class defines the functionality of a certificate factory, which is used to generate certificate, certification path (\n\u003ccode\u003eCertPath\u003c/code\u003e) and certificate revocation list (CRL) objects from their encodings. \n\u003cp\u003eFor encodings consisting of multiple certificates, use \u003ccode\u003egenerateCertificates\u003c/code\u003e when you want to parse a collection of possibly unrelated certificates. Otherwise, use \u003ccode\u003egenerateCertPath\u003c/code\u003e when you want to generate a \u003ccode\u003eCertPath\u003c/code\u003e (a certificate chain) and subsequently validate it with a \u003ccode\u003eCertPathValidator\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eA certificate factory for X.509 must return certificates that are an instance of \u003ccode\u003ejava.security.cert.X509Certificate\u003c/code\u003e, and CRLs that are an instance of \u003ccode\u003ejava.security.cert.X509CRL\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003eThe following example reads a file with Base64 encoded certificates, which are each bounded at the beginning by -----BEGIN CERTIFICATE-----, and bounded at the end by -----END CERTIFICATE-----. We convert the \u003ccode\u003eFileInputStream\u003c/code\u003e (which does not support \u003ccode\u003emark\u003c/code\u003e and \u003ccode\u003ereset\u003c/code\u003e) to a \u003ccode\u003eBufferedInputStream\u003c/code\u003e (which supports those methods), so that each call to \u003ccode\u003egenerateCertificate\u003c/code\u003e consumes only one certificate, and the read position of the input stream is positioned to the next certificate in the file: \u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\n FileInputStream fis \u003d new FileInputStream(filename);\n BufferedInputStream bis \u003d new BufferedInputStream(fis);\n\n CertificateFactory cf \u003d CertificateFactory.getInstance(\"X.509\");\n\n while (bis.available() \u0026gt; 0) {\n    Certificate cert \u003d cf.generateCertificate(bis);\n    System.out.println(cert.toString());\n }\n \u003c/code\u003e\u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eThe following example parses a PKCS#7-formatted certificate reply stored in a file and extracts all the certificates from it: \u003c/p\u003e\n\u003cpre\u003e FileInputStream fis \u003d new FileInputStream(filename);\n CertificateFactory cf \u003d CertificateFactory.getInstance(\"X.509\");\n Collection c \u003d cf.generateCertificates(fis);\n Iterator i \u003d c.iterator();\n while (i.hasNext()) {\n    Certificate cert \u003d (Certificate)i.next();\n    System.out.println(cert);\n }\n \u003c/pre\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Every implementation of the Java platform is required to support the following standard \u003ccode\u003eCertificateFactory\u003c/code\u003e type: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eX.509\u003c/code\u003e\u003c/li\u003e \n\u003c/ul\u003e and the following standard \n\u003ccode\u003eCertPath\u003c/code\u003e encodings: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003ePKCS7\u003c/code\u003e\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003ePkiPath\u003c/code\u003e\u003c/li\u003e \n\u003c/ul\u003e The type and encodings are described in the \n\u003ca href\u003d\"../../../../../specs/security/standard-names.html#certificatefactory-types\"\u003e CertificateFactory section\u003c/a\u003e and the \n\u003ca href\u003d\"../../../../../specs/security/standard-names.html#certpath-encodings\"\u003e CertPath Encodings section\u003c/a\u003e of the Java Security Standard Algorithm Names Specification. Consult the release documentation for your implementation to see if any other types or encodings are supported.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/Certificate.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eCertificate\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509Certificate.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eX509Certificate\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertPath.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eCertPath\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CRL.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eCRL\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/X509CRL.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eX509CRL\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}