{
  "packageName": "java.security",
  "simpleName": "KeyPairGenerator",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.security.KeyPairGeneratorSpi",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAlgorithm",
      "comment": "Returns the standard name of the algorithm for this key pair generator. See the KeyPairGenerator section in the Java Security Standard Algorithm Names Specification for information about standard algorithm names.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the standard string name of the algorithm."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.KeyPairGenerator",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyPairGenerator object encapsulating the KeyPairGeneratorSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard string name of the algorithm. See the KeyPairGenerator section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#keypairgenerator-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard algorithm names."
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no \n\u003ccode\u003eProvider\u003c/code\u003e supports a \n\u003ccode\u003eKeyPairGeneratorSpi\u003c/code\u003e implementation for the specified algorithm",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eKeyPairGenerator\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.KeyPairGenerator",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm. A new KeyPairGenerator object encapsulating the KeyPairGeneratorSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard string name of the algorithm. See the KeyPairGenerator section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#keypairgenerator-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard algorithm names.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the string name of the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the provider name is \n\u003ccode\u003enull\u003c/code\u003e or empty",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eKeyPairGeneratorSpi\u003c/code\u003e implementation for the specified algorithm is not available from the specified provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider is not registered in the security provider list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eKeyPairGenerator\u003c/code\u003e object"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.KeyPairGenerator",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a KeyPairGenerator object that generates public/private key pairs for the specified algorithm. A new KeyPairGenerator object encapsulating the KeyPairGeneratorSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard string name of the algorithm. See the KeyPairGenerator section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#keypairgenerator-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard algorithm names.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified provider is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eKeyPairGeneratorSpi\u003c/code\u003e implementation for the specified algorithm is not available from the specified \n\u003ccode\u003eProvider\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealgorithm\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "the new \n\u003ccode\u003eKeyPairGenerator\u003c/code\u003e object"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getProvider",
      "comment": "Returns the provider of this key pair generator object.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the provider of this key pair generator object"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "initialize",
      "comment": "Initializes the key pair generator for a certain keysize using a default parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness is used.)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekeysize\u003c/code\u003e - the keysize. This is an algorithm-specific metric, such as modulus length, specified in number of bits."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidParameterException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ekeysize\u003c/code\u003e is not supported by this KeyPairGenerator object."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "initialize",
      "comment": "Initializes the key pair generator for a certain keysize with the given source of randomness (and a default parameter set).",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyPairGeneratorSpi.html#initialize(int,java.security.SecureRandom)\"\u003einitialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyPairGeneratorSpi.html\" title\u003d\"class in java.security\"\u003eKeyPairGeneratorSpi\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ekeysize\u003c/code\u003e - the keysize. This is an algorithm-specific metric, such as modulus length, specified in number of bits.",
          "\u003ccode\u003erandom\u003c/code\u003e - the source of randomness."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidParameterException\u003c/a\u003e\u003c/code\u003e - if the \n\u003ccode\u003ekeysize\u003c/code\u003e is not supported by this KeyPairGenerator object."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "initialize",
      "comment": "Initializes the key pair generator using the specified parameter set and the SecureRandom implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of SecureRandom, a system-provided source of randomness is used.) This concrete method has been added to this previously-defined abstract class. This method calls the KeyPairGeneratorSpi initialize method, passing it params and a source of randomness (obtained from the highest-priority installed provider or system-provided if none of the installed providers supply one). That initialize method always throws an UnsupportedOperationException if it is not overridden by the provider.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - the parameter set used to generate the keys."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if the given parameters are inappropriate for this key pair generator."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "initialize",
      "comment": "Initializes the key pair generator with the given parameter set and source of randomness. This concrete method has been added to this previously-defined abstract class. This method calls the KeyPairGeneratorSpi initialize method, passing it params and random. That initialize method always throws an UnsupportedOperationException if it is not overridden by the provider.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyPairGeneratorSpi.html#initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)\"\u003einitialize\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyPairGeneratorSpi.html\" title\u003d\"class in java.security\"\u003eKeyPairGeneratorSpi\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - the parameter set used to generate the keys.",
          "\u003ccode\u003erandom\u003c/code\u003e - the source of randomness."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if the given parameters are inappropriate for this key pair generator."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.KeyPair",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "genKeyPair",
      "comment": "Generates a key pair. If this KeyPairGenerator has not been initialized explicitly, provider-specific defaults will be used for the size and other (algorithm-specific) values of the generated keys. This will generate a new key pair every time it is called. This method is functionally equivalent to generateKeyPair.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the generated key pair"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.KeyPair",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "generateKeyPair",
      "comment": "Generates a key pair. If this KeyPairGenerator has not been initialized explicitly, provider-specific defaults will be used for the size and other (algorithm-specific) values of the generated keys. This will generate a new key pair every time it is called. This method is functionally equivalent to genKeyPair.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyPairGeneratorSpi.html#generateKeyPair()\"\u003egenerateKeyPair\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyPairGeneratorSpi.html\" title\u003d\"class in java.security\"\u003eKeyPairGeneratorSpi\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the generated key pair"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "algorithm",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a KeyPairGenerator object for the specified algorithm.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealgorithm\u003c/code\u003e - the standard string name of the algorithm. See the KeyPairGenerator section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#keypairgenerator-algorithms\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard algorithm names."
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.security.KeyPairGenerator",
  "comment": "The KeyPairGenerator class is used to generate pairs of public and private keys. Key pair generators are constructed using the \n\u003ccode\u003egetInstance\u003c/code\u003e factory methods (static methods that return instances of a given class). \n\u003cp\u003eA Key pair generator for a particular algorithm creates a public/private key pair that can be used with this algorithm. It also associates algorithm-specific parameters with each of the generated keys. \u003c/p\u003e\n\u003cp\u003eThere are two ways to generate a key pair: in an algorithm-independent manner, and in an algorithm-specific manner. The only difference between the two is the initialization of the object: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003cb\u003eAlgorithm-Independent Initialization\u003c/b\u003e \u003cp\u003eAll key pair generators share the concepts of a keysize and a source of randomness. The keysize is interpreted differently for different algorithms (e.g., in the case of the \u003ci\u003eDSA\u003c/i\u003e algorithm, the keysize corresponds to the length of the modulus). There is an \u003ca href\u003d\"#initialize(int,java.security.SecureRandom)\"\u003e\u003ccode\u003einitialize\u003c/code\u003e\u003c/a\u003e method in this KeyPairGenerator class that takes these two universally shared types of arguments. There is also one that takes just a \u003ccode\u003ekeysize\u003c/code\u003e argument, and uses the \u003ccode\u003eSecureRandom\u003c/code\u003e implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of \u003ccode\u003eSecureRandom\u003c/code\u003e, a system-provided source of randomness is used.) \u003c/p\u003e\u003cp\u003eSince no other parameters are specified when you call the above algorithm-independent \u003ccode\u003einitialize\u003c/code\u003e methods, it is up to the provider what to do about the algorithm-specific parameters (if any) to be associated with each of the keys. \u003c/p\u003e\u003cp\u003eIf the algorithm is the \u003ci\u003eDSA\u003c/i\u003e algorithm, and the keysize (modulus size) is 512, 768, 1024, or 2048, then the \u003ci\u003eSun\u003c/i\u003e provider uses a set of precomputed values for the \u003ccode\u003ep\u003c/code\u003e, \u003ccode\u003eq\u003c/code\u003e, and \u003ccode\u003eg\u003c/code\u003e parameters. If the modulus size is not one of the above values, the \u003ci\u003eSun\u003c/i\u003e provider creates a new set of parameters. Other providers might have precomputed parameter sets for more than just the modulus sizes mentioned above. Still others might not have a list of precomputed parameters at all and instead always create new parameter sets. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e\u003cb\u003eAlgorithm-Specific Initialization\u003c/b\u003e \u003cp\u003eFor situations where a set of algorithm-specific parameters already exists (e.g., so-called \u003ci\u003ecommunity parameters\u003c/i\u003e in DSA), there are two \u003ca href\u003d\"#initialize(java.security.spec.AlgorithmParameterSpec)\"\u003e\u003ccode\u003einitialize\u003c/code\u003e\u003c/a\u003e methods that have an \u003ccode\u003eAlgorithmParameterSpec\u003c/code\u003e argument. One also has a \u003ccode\u003eSecureRandom\u003c/code\u003e argument, while the other uses the \u003ccode\u003eSecureRandom\u003c/code\u003e implementation of the highest-priority installed provider as the source of randomness. (If none of the installed providers supply an implementation of \u003ccode\u003eSecureRandom\u003c/code\u003e, a system-provided source of randomness is used.) \u003c/p\u003e\u003c/li\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIn case the client does not explicitly initialize the KeyPairGenerator (via a call to an \u003ccode\u003einitialize\u003c/code\u003e method), each provider must supply (and document) a default initialization. See the Keysize Restriction sections of the \u003ca href\u003d\"https://docs.oracle.com/pls/topic/lookup?ctx\u003djavase16\u0026amp;id\u003dsecurity_guide_jdk_providers\"\u003eJDK Providers\u003c/a\u003e document for information on the KeyPairGenerator defaults used by JDK providers. However, note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the KeyPairGenerator instead of relying on provider-specific defaults. \u003c/p\u003e\n\u003cp\u003eNote that this class is abstract and extends from \u003ccode\u003eKeyPairGeneratorSpi\u003c/code\u003e for historical reasons. Application developers should only take notice of the methods defined in this \u003ccode\u003eKeyPairGenerator\u003c/code\u003e class; all the methods in the superclass are intended for cryptographic service providers who wish to supply their own implementations of key pair generators. \u003c/p\u003e\n\u003cp\u003e Every implementation of the Java platform is required to support the following standard \u003ccode\u003eKeyPairGenerator\u003c/code\u003e algorithms and keysizes in parentheses: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eDiffieHellman\u003c/code\u003e (1024, 2048, 4096)\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003eDSA\u003c/code\u003e (1024, 2048)\u003c/li\u003e \n \u003cli\u003e\u003ccode\u003eRSA\u003c/code\u003e (1024, 2048, 4096)\u003c/li\u003e \n\u003c/ul\u003e These algorithms are described in the \n\u003ca href\u003d\"../../../../specs/security/standard-names.html#keypairgenerator-algorithms\"\u003e KeyPairGenerator section\u003c/a\u003e of the Java Security Standard Algorithm Names Specification. Consult the release documentation for your implementation to see if any other algorithms are supported.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/spec/AlgorithmParameterSpec.html\" title\u003d\"interface in java.security.spec\"\u003e\u003ccode\u003eAlgorithmParameterSpec\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.1"
    ]
  }
}