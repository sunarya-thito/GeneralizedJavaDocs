{
  "packageName": "java.security",
  "simpleName": "SignatureSpi",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.security.SecureRandom",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "appRandom",
      "comment": "Application-specified source of randomness.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.InvalidKeyException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.security.PublicKey",
            "type": "Class"
          },
          "field": {
            "name": "publicKey"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineInitVerify",
      "comment": "Initializes this signature object with the specified public key for verification operations.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epublicKey\u003c/code\u003e - the public key of the identity whose signature is going to be verified."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidKeyException.html\" title\u003d\"class in java.security\"\u003eInvalidKeyException\u003c/a\u003e\u003c/code\u003e - if the key is improperly encoded, parameters are missing, and so on."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.InvalidKeyException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.security.PrivateKey",
            "type": "Class"
          },
          "field": {
            "name": "privateKey"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineInitSign",
      "comment": "Initializes this signature object with the specified private key for signing operations.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprivateKey\u003c/code\u003e - the private key of the identity whose signature will be generated."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidKeyException.html\" title\u003d\"class in java.security\"\u003eInvalidKeyException\u003c/a\u003e\u003c/code\u003e - if the key is improperly encoded, parameters are missing, and so on."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.InvalidKeyException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.security.PrivateKey",
            "type": "Class"
          },
          "field": {
            "name": "privateKey"
          }
        },
        {
          "type": {
            "name": "java.security.SecureRandom",
            "type": "Class"
          },
          "field": {
            "name": "random"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineInitSign",
      "comment": "Initializes this signature object with the specified private key and source of randomness for signing operations. This concrete method has been added to this previously-defined abstract class. (For backwards compatibility, it cannot be abstract.)",
      "tagMap": {
        "param": [
          "\u003ccode\u003eprivateKey\u003c/code\u003e - the private key of the identity whose signature will be generated.",
          "\u003ccode\u003erandom\u003c/code\u003e - the source of randomness"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidKeyException.html\" title\u003d\"class in java.security\"\u003eInvalidKeyException\u003c/a\u003e\u003c/code\u003e - if the key is improperly encoded, parameters are missing, and so on."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.SignatureException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineUpdate",
      "comment": "Updates the data to be signed or verified using the specified byte.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the byte to use for the update."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SignatureException.html\" title\u003d\"class in java.security\"\u003eSignatureException\u003c/a\u003e\u003c/code\u003e - if the engine is not initialized properly."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.SignatureException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "b"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "off"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineUpdate",
      "comment": "Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the array of bytes",
          "\u003ccode\u003eoff\u003c/code\u003e - the offset to start from in the array of bytes",
          "\u003ccode\u003elen\u003c/code\u003e - the number of bytes to use, starting at offset"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SignatureException.html\" title\u003d\"class in java.security\"\u003eSignatureException\u003c/a\u003e\u003c/code\u003e - if the engine is not initialized properly"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.nio.ByteBuffer",
            "type": "Class"
          },
          "field": {
            "name": "input"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineUpdate",
      "comment": "Updates the data to be signed or verified using the specified ByteBuffer. Processes the data.remaining() bytes starting at data.position(). Upon return, the buffer\u0027s position will be equal to its limit; its limit will not have changed.",
      "tagMap": {
        "param": [
          "\u003ccode\u003einput\u003c/code\u003e - the ByteBuffer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "byte",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "throwsClasses": [
        {
          "name": "java.security.SignatureException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineSign",
      "comment": "Returns the signature bytes of all the data updated so far. The format of the signature depends on the underlying signature scheme.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SignatureException.html\" title\u003d\"class in java.security\"\u003eSignatureException\u003c/a\u003e\u003c/code\u003e - if the engine is not initialized properly or if this signature algorithm is unable to process the input data provided."
        ],
        "return": [
          "the signature bytes of the signing operation\u0027s result."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.SignatureException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "outbuf"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineSign",
      "comment": "Finishes this signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset. The format of the signature depends on the underlying signature scheme. The signature implementation is reset to its initial state (the state it was in after a call to one of the engineInitSign methods) and can be reused to generate further signatures with the same private key. This method should be abstract, but we leave it concrete for binary compatibility. Knowledgeable providers should override this method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eoutbuf\u003c/code\u003e - buffer for the signature result.",
          "\u003ccode\u003eoffset\u003c/code\u003e - offset into \n\u003ccode\u003eoutbuf\u003c/code\u003e where the signature is stored.",
          "\u003ccode\u003elen\u003c/code\u003e - number of bytes within \n\u003ccode\u003eoutbuf\u003c/code\u003e allotted for the signature. Both this default implementation and the SUN provider do not return partial digests. If the value of this parameter is less than the actual signature length, this method will throw a SignatureException. This parameter is ignored if its value is greater than or equal to the actual signature length."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SignatureException.html\" title\u003d\"class in java.security\"\u003eSignatureException\u003c/a\u003e\u003c/code\u003e - if the engine is not initialized properly, if this signature algorithm is unable to process the input data provided, or if \n\u003ccode\u003elen\u003c/code\u003e is less than the actual signature length."
        ],
        "return": [
          "the number of bytes placed into \n\u003ccode\u003eoutbuf\u003c/code\u003e"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.SignatureException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "sigBytes"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineVerify",
      "comment": "Verifies the passed-in signature.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esigBytes\u003c/code\u003e - the signature bytes to be verified."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SignatureException.html\" title\u003d\"class in java.security\"\u003eSignatureException\u003c/a\u003e\u003c/code\u003e - if the engine is not initialized properly, the passed-in signature is improperly encoded or of the wrong type, if this signature algorithm is unable to process the input data provided, etc."
        ],
        "return": [
          "true if the signature was verified, false if not."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.SignatureException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "sigBytes"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "offset"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "length"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineVerify",
      "comment": "Verifies the passed-in signature in the specified array of bytes, starting at the specified offset. Note: Subclasses should overwrite the default implementation.",
      "tagMap": {
        "param": [
          "\u003ccode\u003esigBytes\u003c/code\u003e - the signature bytes to be verified.",
          "\u003ccode\u003eoffset\u003c/code\u003e - the offset to start from in the array of bytes.",
          "\u003ccode\u003elength\u003c/code\u003e - the number of bytes to use, starting at offset."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/SignatureException.html\" title\u003d\"class in java.security\"\u003eSignatureException\u003c/a\u003e\u003c/code\u003e - if the engine is not initialized properly, the passed-in signature is improperly encoded or of the wrong type, if this signature algorithm is unable to process the input data provided, etc."
        ],
        "return": [
          "true if the signature was verified, false if not."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.InvalidParameterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "param"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "value"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineSetParameter",
      "comment": "Sets the specified algorithm parameter to the specified value. This method supplies a general-purpose mechanism through which it is possible to set the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparam\u003c/code\u003e - the string identifier of the parameter.",
          "\u003ccode\u003evalue\u003c/code\u003e - the parameter value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidParameterException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparam\u003c/code\u003e is an invalid parameter for this signature algorithm engine, the parameter is already set and cannot be set again, a security exception occurs, and so on."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.InvalidAlgorithmParameterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.security.spec.AlgorithmParameterSpec",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineSetParameter",
      "comment": "This method is overridden by providers to initialize this signature engine with the specified parameter set.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eparams\u003c/code\u003e - the parameters"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this method is not overridden by a provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidAlgorithmParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidAlgorithmParameterException\u003c/a\u003e\u003c/code\u003e - if this method is overridden by a provider and the given parameters are inappropriate for this signature engine"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.AlgorithmParameters",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "engineGetParameters",
      "comment": "This method is overridden by providers to return the parameters used with this signature engine. If this signature engine has been initialized with parameters (by calling engineSetParameter(AlgorithmParameterSpec) or engineSetParameter(String, Object)) and the underlying signature implementation supports returning the parameters as AlgorithmParameters, this method returns the same parameters. If the parameters were not set, this method may return a combination of default and randomly generated parameter values if the underlying signature implementation supports it and can successfully generate them. Otherwise, null is returned.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/UnsupportedOperationException.html\" title\u003d\"class in java.lang\"\u003eUnsupportedOperationException\u003c/a\u003e\u003c/code\u003e - if this method is not overridden by a provider"
        ],
        "return": [
          "the parameters used with this signature engine, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.InvalidParameterException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "param"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1028,
      "name": "engineGetParameter",
      "comment": "Gets the value of the specified algorithm parameter. This method supplies a general-purpose mechanism through which it is possible to get the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time.",
      "annotations": [
        {
          "type": "Deprecated"
        }
      ],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparam\u003c/code\u003e - the string name of the parameter."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/InvalidParameterException.html\" title\u003d\"class in java.security\"\u003eInvalidParameterException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eparam\u003c/code\u003e is an invalid parameter for this engine, or another exception occurs while trying to get this parameter."
        ],
        "return": [
          "the object that represents the parameter value, or \n\u003ccode\u003enull\u003c/code\u003e if there is none."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.Object",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.lang.CloneNotSupportedException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "clone",
      "comment": "Returns a clone if the implementation is cloneable.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Cloneable.html\" title\u003d\"interface in java.lang\"\u003e\u003ccode\u003eCloneable\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#clone()\"\u003eclone\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/CloneNotSupportedException.html\" title\u003d\"class in java.lang\"\u003eCloneNotSupportedException\u003c/a\u003e\u003c/code\u003e - if this is called on an implementation that does not support \n\u003ccode\u003eCloneable\u003c/code\u003e."
        ],
        "return": [
          "a clone if the implementation is cloneable."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.security.SignatureSpi",
  "comment": "This class defines the \n\u003ci\u003eService Provider Interface\u003c/i\u003e (\n\u003cb\u003eSPI\u003c/b\u003e) for the \n\u003ccode\u003eSignature\u003c/code\u003e class, which is used to provide the functionality of a digital signature algorithm. Digital signatures are used for authentication and integrity assurance of digital data. \n\u003cp\u003e All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular signature algorithm.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Signature.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eSignature\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}