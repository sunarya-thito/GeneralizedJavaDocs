{
  "packageName": "java.security",
  "simpleName": "PermissionCollection",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.Permission",
            "type": "Class"
          },
          "field": {
            "name": "permission"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "add",
      "comment": "Adds a permission object to the current collection of permission objects.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epermission\u003c/code\u003e - the Permission object to add."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if this PermissionCollection object has been marked readonly",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if this PermissionCollection object is a homogeneous collection and the permission is not of the correct type."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.Permission",
            "type": "Class"
          },
          "field": {
            "name": "permission"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "implies",
      "comment": "Checks to see if the specified permission is implied by the collection of Permission objects held in this PermissionCollection.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epermission\u003c/code\u003e - the Permission object to compare."
        ],
        "return": [
          "true if \"permission\" is implied by the permissions in the collection, false if not."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "java.security.Permission",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1025,
      "name": "elements",
      "comment": "Returns an enumeration of all the Permission objects in the collection.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PermissionCollection.html#elementsAsStream()\"\u003e\u003ccode\u003eelementsAsStream()\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "an enumeration of all the Permissions."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.stream.Stream",
        "parameters": [
          {
            "name": "java.security.Permission",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "elementsAsStream",
      "comment": "Returns a stream of all the Permission objects in the collection. The collection should not be modified (see add(java.security.Permission)) during the execution of the terminal stream operation. Otherwise, the result of the terminal stream operation is undefined.",
      "tagMap": {
        "implSpec": [
          "The default implementation creates a stream whose source is derived from the enumeration returned from a call to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PermissionCollection.html#elements()\"\u003e\u003ccode\u003eelements()\u003c/code\u003e\u003c/a\u003e."
        ],
        "return": [
          "a stream of all the Permissions."
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setReadOnly",
      "comment": "Marks this PermissionCollection object as \"readonly\". After a PermissionCollection object is marked as readonly, no new Permission objects can be added to it using add.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isReadOnly",
      "comment": "Returns true if this PermissionCollection object is marked as readonly. If it is readonly, no new Permission objects can be added to it using add. By default, the object is not readonly. It can be set to readonly by a call to setReadOnly.",
      "tagMap": {
        "return": [
          "true if this PermissionCollection object is marked as readonly, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns a string describing this PermissionCollection object, providing information about all the permissions it contains. The format is:  super.toString() (\n   // enumerate all the Permission\n   // objects and call toString() on them,\n   // one per line..\n ) super.toString is a call to the toString method of this object\u0027s superclass, which is Object. The result is this PermissionCollection\u0027s type name followed by this object\u0027s hashcode, thus enabling clients to differentiate different PermissionCollections object, even if they contain the same permissions.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "information about this PermissionCollection object, as described above."
        ]
      }
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.security.PermissionCollection",
  "comment": "Abstract class representing a collection of Permission objects. \n\u003cp\u003eWith a PermissionCollection, you can: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e add a permission to the collection using the \u003ccode\u003eadd\u003c/code\u003e method. \u003c/li\u003e\n \u003cli\u003e check to see if a particular permission is implied in the collection, using the \u003ccode\u003eimplies\u003c/code\u003e method. \u003c/li\u003e\n \u003cli\u003e enumerate all the permissions, using the \u003ccode\u003eelements\u003c/code\u003e method. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eWhen it is desirable to group together a number of Permission objects of the same type, the \u003ccode\u003enewPermissionCollection\u003c/code\u003e method on that particular type of Permission object should first be called. The default behavior (from the Permission class) is to simply return null. Subclasses of class Permission override the method if they need to store their permissions in a particular PermissionCollection object in order to provide the correct semantics when the \u003ccode\u003ePermissionCollection.implies\u003c/code\u003e method is called. If a non-null value is returned, that PermissionCollection must be used. If null is returned, then the caller of \u003ccode\u003enewPermissionCollection\u003c/code\u003e is free to store permissions of the given type in any PermissionCollection they choose (one that uses a Hashtable, one that uses a Vector, etc). \u003c/p\u003e\n\u003cp\u003eThe PermissionCollection returned by the \u003ccode\u003ePermission.newPermissionCollection\u003c/code\u003e method is a homogeneous collection, which stores only Permission objects for a given Permission type. A PermissionCollection may also be heterogeneous. For example, Permissions is a PermissionCollection subclass that represents a collection of PermissionCollections. That is, its members are each a homogeneous PermissionCollection. For example, a Permissions object might have a FilePermissionCollection for all the FilePermission objects, a SocketPermissionCollection for all the SocketPermission objects, and so on. Its \u003ccode\u003eadd\u003c/code\u003e method adds a permission to the appropriate collection. \u003c/p\u003e\n\u003cp\u003eWhenever a permission is added to a heterogeneous PermissionCollection such as Permissions, and the PermissionCollection doesn\u0027t yet contain a PermissionCollection of the specified permission\u0027s type, the PermissionCollection should call the \u003ccode\u003enewPermissionCollection\u003c/code\u003e method on the permission\u0027s class to see if it requires a special PermissionCollection. If \u003ccode\u003enewPermissionCollection\u003c/code\u003e returns null, the PermissionCollection is free to store the permission in any type of PermissionCollection it desires (one using a Hashtable, one using a Vector, etc.). For example, the Permissions object uses a default PermissionCollection implementation that stores the permission objects in a Hashtable. \u003c/p\u003e\n\u003cp\u003e Subclass implementations of PermissionCollection should assume that they may be called simultaneously from multiple threads, and therefore should be synchronized properly. Furthermore, Enumerations returned via the \u003ccode\u003eelements\u003c/code\u003e method are not \u003cem\u003efail-fast\u003c/em\u003e. Modifications to a collection should not be performed while enumerating over that collection.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permissions.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissions\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.security.PermissionCollection\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}