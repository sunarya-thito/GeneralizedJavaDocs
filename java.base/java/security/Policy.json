{
  "packageName": "java.security",
  "simpleName": "Policy",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.security.PermissionCollection",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "UNSUPPORTED_EMPTY_COLLECTION",
      "comment": "A read-only empty PermissionCollection instance.",
      "tagMap": {
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Policy",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getPolicy",
      "comment": "Returns the installed Policy object. This value should not be cached, as it may be changed by a call to setPolicy. This method first calls SecurityManager.checkPermission with a SecurityPermission(\"getPolicy\") permission to ensure it\u0027s ok to get the Policy object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Policy.html#setPolicy(java.security.Policy)\"\u003e\u003ccode\u003esetPolicy(java.security.Policy)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow getting the Policy object."
        ],
        "return": [
          "the installed Policy."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.Policy",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "setPolicy",
      "comment": "Sets the system-wide Policy object. This method first calls SecurityManager.checkPermission with a SecurityPermission(\"setPolicy\") permission to ensure it\u0027s ok to set the Policy.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkPermission(java.security.Permission)\"\u003e\u003ccode\u003eSecurityManager.checkPermission(Permission)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Policy.html#getPolicy()\"\u003e\u003ccode\u003egetPolicy()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the new system Policy object."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckPermission\u003c/code\u003e method doesn\u0027t allow setting the Policy."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Policy",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.security.Policy$Parameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a Policy object of the specified type. This method traverses the list of registered security providers, starting with the most preferred Provider. A new Policy object encapsulating the PolicySpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the specified Policy type. See the Policy section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#policy-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard Policy types.",
          "\u003ccode\u003eparams\u003c/code\u003e - parameters for the Policy, which may be null."
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified parameters are not understood by the \n\u003ccode\u003ePolicySpi\u003c/code\u003e implementation from the selected \n\u003ccode\u003eProvider\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if no \n\u003ccode\u003eProvider\u003c/code\u003e supports a \n\u003ccode\u003ePolicySpi\u003c/code\u003e implementation for the specified type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the caller does not have permission to get a \n\u003ccode\u003ePolicy\u003c/code\u003e instance for the specified type."
        ],
        "return": [
          "the new \n\u003ccode\u003ePolicy\u003c/code\u003e object"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Policy",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchProviderException",
          "type": "Class"
        },
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.security.Policy$Parameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a Policy object of the specified type. A new Policy object encapsulating the PolicySpi implementation from the specified provider is returned. The specified provider must be registered in the provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the specified Policy type. See the Policy section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#policy-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard Policy types.",
          "\u003ccode\u003eparams\u003c/code\u003e - parameters for the Policy, which may be null.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified provider is \n\u003ccode\u003enull\u003c/code\u003e or empty, or if the specified parameters are not understood by the \n\u003ccode\u003ePolicySpi\u003c/code\u003e implementation from the specified provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the specified provider does not support a \n\u003ccode\u003ePolicySpi\u003c/code\u003e implementation for the specified type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider is not registered in the security provider list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the caller does not have permission to get a \n\u003ccode\u003ePolicy\u003c/code\u003e instance for the specified type"
        ],
        "return": [
          "the new \n\u003ccode\u003ePolicy\u003c/code\u003e object"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Policy",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.security.NoSuchAlgorithmException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "type"
          }
        },
        {
          "type": {
            "name": "java.security.Policy$Parameters",
            "type": "Class"
          },
          "field": {
            "name": "params"
          }
        },
        {
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "field": {
            "name": "provider"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a Policy object of the specified type. A new Policy object encapsulating the PolicySpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the specified Policy type. See the Policy section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#policy-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for a list of standard Policy types.",
          "\u003ccode\u003eparams\u003c/code\u003e - parameters for the Policy, which may be null.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the Provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003eProvider\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, or if the specified parameters are not understood by the \n\u003ccode\u003ePolicySpi\u003c/code\u003e implementation from the specified \n\u003ccode\u003eProvider\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003eProvider\u003c/code\u003e does not support a \n\u003ccode\u003ePolicySpi\u003c/code\u003e implementation for the specified type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if the caller does not have permission to get a \n\u003ccode\u003ePolicy\u003c/code\u003e instance for the specified type"
        ],
        "return": [
          "the new \n\u003ccode\u003ePolicy\u003c/code\u003e object"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getProvider",
      "comment": "Return the Provider of this Policy. This Policy instance will only have a Provider if it was obtained via a call to Policy.getInstance. Otherwise this method returns null.",
      "tagMap": {
        "return": [
          "the Provider of this Policy, or null."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getType",
      "comment": "Return the type of this Policy. This Policy instance will only have a type if it was obtained via a call to Policy.getInstance. Otherwise this method returns null.",
      "tagMap": {
        "return": [
          "the type of this Policy, or null."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Policy$Parameters",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParameters",
      "comment": "Return Policy parameters. This Policy instance will only have parameters if it was obtained via a call to Policy.getInstance. Otherwise this method returns null.",
      "tagMap": {
        "return": [
          "Policy parameters, or null."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.PermissionCollection",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.CodeSource",
            "type": "Class"
          },
          "field": {
            "name": "codesource"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPermissions",
      "comment": "Return a PermissionCollection object containing the set of permissions granted to the specified CodeSource. Applications are discouraged from calling this method since this operation may not be supported by all policy implementations. Applications should solely rely on the implies method to perform policy checks. If an application absolutely must call a getPermissions method, it should call getPermissions(ProtectionDomain). The default implementation of this method returns Policy.UNSUPPORTED_EMPTY_COLLECTION. This method can be overridden if the policy implementation can return a set of permissions granted to a CodeSource.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ecodesource\u003c/code\u003e - the CodeSource to which the returned PermissionCollection has been granted."
        ],
        "return": [
          "a set of permissions granted to the specified CodeSource. If this operation is supported, the returned set of permissions must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.PermissionCollection",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.ProtectionDomain",
            "type": "Class"
          },
          "field": {
            "name": "domain"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPermissions",
      "comment": "Return a PermissionCollection object containing the set of permissions granted to the specified ProtectionDomain. Applications are discouraged from calling this method since this operation may not be supported by all policy implementations. Applications should rely on the implies method to perform policy checks. The default implementation of this method first retrieves the permissions returned via getPermissions(CodeSource) (the CodeSource is taken from the specified ProtectionDomain), as well as the permissions located inside the specified ProtectionDomain. All of these permissions are then combined and returned in a new PermissionCollection object. If getPermissions(CodeSource) returns Policy.UNSUPPORTED_EMPTY_COLLECTION, then this method returns the permissions contained inside the specified ProtectionDomain in a new PermissionCollection object. This method can be overridden if the policy implementation supports returning a set of permissions granted to a ProtectionDomain.",
      "tagMap": {
        "param": [
          "\u003ccode\u003edomain\u003c/code\u003e - the ProtectionDomain to which the returned PermissionCollection has been granted."
        ],
        "return": [
          "a set of permissions granted to the specified ProtectionDomain. If this operation is supported, the returned set of permissions must be a new mutable instance and it must support heterogeneous Permission types. If this operation is not supported, Policy.UNSUPPORTED_EMPTY_COLLECTION is returned."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.ProtectionDomain",
            "type": "Class"
          },
          "field": {
            "name": "domain"
          }
        },
        {
          "type": {
            "name": "java.security.Permission",
            "type": "Class"
          },
          "field": {
            "name": "permission"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "implies",
      "comment": "Evaluates the global policy for the permissions granted to the ProtectionDomain and tests whether the permission is granted.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/ProtectionDomain.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProtectionDomain\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003edomain\u003c/code\u003e - the ProtectionDomain to test",
          "\u003ccode\u003epermission\u003c/code\u003e - the Permission object to be tested for implication."
        ],
        "return": [
          "true if \"permission\" is a proper subset of a permission granted to this ProtectionDomain."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "refresh",
      "comment": "Refreshes/reloads the policy configuration. The behavior of this method depends on the implementation. For example, calling refresh on a file-based policy will cause the file to be re-read. The default implementation of this method does nothing. This method should be overridden if a refresh operation is supported by the policy implementation.",
      "tagMap": {}
    },
    {
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Constructor for subclasses to call.",
      "tagMap": {}
    }
  ],
  "innerClasses": [
    "java.security.Policy$Parameters"
  ],
  "memberType": "JavaClass",
  "modifiers": 1025,
  "name": "java.security.Policy",
  "comment": "A Policy object is responsible for determining whether code executing in the Java runtime environment has permission to perform a security-sensitive operation. \n\u003cp\u003e There is only one Policy object installed in the runtime at any given time. A Policy object can be installed by calling the \u003ccode\u003esetPolicy\u003c/code\u003e method. The installed Policy object can be obtained by calling the \u003ccode\u003egetPolicy\u003c/code\u003e method. \u003c/p\u003e\n\u003cp\u003e If no Policy object has been installed in the runtime, a call to \u003ccode\u003egetPolicy\u003c/code\u003e installs an instance of the default Policy implementation (a default subclass implementation of this abstract class). The default Policy implementation can be changed by setting the value of the \u003ccode\u003epolicy.provider\u003c/code\u003e security property to the fully qualified name of the desired Policy subclass implementation. The system class loader is used to load this class. \u003c/p\u003e\n\u003cp\u003e Application code can directly subclass Policy to provide a custom implementation. In addition, an instance of a Policy object can be constructed by invoking one of the \u003ccode\u003egetInstance\u003c/code\u003e factory methods with a standard type. The default policy type is \"JavaPolicy\". \u003c/p\u003e\n\u003cp\u003e Once a Policy instance has been installed (either by default, or by calling \u003ccode\u003esetPolicy\u003c/code\u003e), the Java runtime invokes its \u003ccode\u003eimplies\u003c/code\u003e method when it needs to determine whether executing code (encapsulated in a ProtectionDomain) can perform SecurityManager-protected operations. How a Policy object retrieves its policy data is up to the Policy implementation itself. The policy data may be stored, for example, in a flat ASCII file, in a serialized binary file of the Policy class, or in a database. \u003c/p\u003e\n\u003cp\u003e The \u003ccode\u003erefresh\u003c/code\u003e method causes the policy object to refresh/reload its data. This operation is implementation-dependent. For example, if the policy object stores its data in configuration files, calling \u003ccode\u003erefresh\u003c/code\u003e will cause it to re-read the configuration policy files. If a refresh operation is not supported, this method does nothing. Note that refreshed policy may not have an effect on classes in a particular ProtectionDomain. This is dependent on the Policy provider\u0027s implementation of the \u003ccode\u003eimplies\u003c/code\u003e method and its PermissionCollection caching strategy.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/ProtectionDomain.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProtectionDomain\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003esecurity properties\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}