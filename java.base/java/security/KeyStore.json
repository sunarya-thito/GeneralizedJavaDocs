{
  "packageName": "java.security",
  "simpleName": "KeyStore",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.security.KeyStore",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a keystore object of the specified type. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyStore object encapsulating the KeyStoreSpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type of keystore. See the KeyStore section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#keystore-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard keystore types."
        ],
        "implNote": [
          "The JDK Reference Implementation additionally uses the \n\u003ccode\u003ejdk.security.provider.preferred\u003c/code\u003e \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSecurity\u003c/code\u003e\u003c/a\u003e property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html#getProviders()\"\u003e\u003ccode\u003eSecurity.getProviders()\u003c/code\u003e\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if no \n\u003ccode\u003eProvider\u003c/code\u003e supports a \n\u003ccode\u003eKeyStoreSpi\u003c/code\u003e implementation for the specified type",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a keystore object of the specified type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.KeyStore",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a keystore object of the specified type. A new KeyStore object encapsulating the KeyStoreSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type of keystore. See the KeyStore section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#keystore-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard keystore types.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the name of the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the provider name is \n\u003ccode\u003enull\u003c/code\u003e or empty",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003eKeyStoreSpi\u003c/code\u003e implementation for the specified type is not available from the specified provider",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchProviderException.html\" title\u003d\"class in java.security\"\u003eNoSuchProviderException\u003c/a\u003e\u003c/code\u003e - if the specified provider is not registered in the security provider list",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a keystore object of the specified type"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.KeyStore",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "getInstance",
      "comment": "Returns a keystore object of the specified type. A new KeyStore object encapsulating the KeyStoreSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003etype\u003c/code\u003e - the type of keystore. See the KeyStore section in the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/security/standard-names.html#keystore-types\"\u003e Java Security Standard Algorithm Names Specification\u003c/a\u003e for information about standard keystore types.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the specified provider is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003eKeyStoreSpi\u003c/code\u003e implementation for the specified type is not available from the specified \n\u003ccode\u003eProvider\u003c/code\u003e object",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003etype\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "a keystore object of the specified type"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getDefaultType",
      "comment": "Returns the default keystore type as specified by the keystore.type security property, or the string \"jks\" (acronym for \"Java keystore\") if no such property exists. The default keystore type can be used by applications that do not want to use a hard-coded keystore type when calling one of the getInstance methods, and want to provide a default keystore type in case a user does not specify its own. The default keystore type can be changed by setting the value of the keystore.type security property to the desired keystore type.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Security.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003esecurity properties\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "the default keystore type as specified by the \n\u003ccode\u003ekeystore.type\u003c/code\u003e security property, or the string \"jks\" if no such property exists."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Provider",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getProvider",
      "comment": "Returns the provider of this keystore.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the provider of this keystore."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getType",
      "comment": "Returns the type of this keystore.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the type of this keystore."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.Key",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getKey",
      "comment": "Returns the key associated with the given alias, using the given password to recover it. The key must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry with a PrivateKeyEntry or SecretKeyEntry.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name",
          "\u003ccode\u003epassword\u003c/code\u003e - the password for recovering the key"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the algorithm for recovering the key cannot be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/UnrecoverableKeyException.html\" title\u003d\"class in java.security\"\u003eUnrecoverableKeyException\u003c/a\u003e\u003c/code\u003e - if the key cannot be recovered (e.g., the given password is wrong)."
        ],
        "return": [
          "the requested key, or null if the given alias does not exist or does not identify a key-related entry."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.Certificate",
        "type": "Class",
        "arrayDimensions": 1
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getCertificateChain",
      "comment": "Returns the certificate chain associated with the given alias. The certificate chain must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry with a PrivateKeyEntry.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)."
        ],
        "return": [
          "the certificate chain (ordered with the user\u0027s certificate first followed by zero or more certificate authorities), or null if the given alias does not exist or does not contain a certificate chain"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.cert.Certificate",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getCertificate",
      "comment": "Returns the certificate associated with the given alias. If the given alias name identifies an entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the trusted certificate contained in that entry is returned. If the given alias name identifies an entry created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the first element of the certificate chain in that entry is returned.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)."
        ],
        "return": [
          "the certificate, or null if the given alias does not exist or does not contain a certificate."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Date",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getCreationDate",
      "comment": "Returns the creation date of the entry identified by the given alias.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)."
        ],
        "return": [
          "the creation date of this entry, or null if the given alias does not exist"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setKeyEntry",
      "comment": "Assigns the given key to the given alias, protecting it with the given password. If the given key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key. If the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name",
          "\u003ccode\u003ekey\u003c/code\u003e - the key to be associated with the alias",
          "\u003ccode\u003epassword\u003c/code\u003e - the password to protect the key",
          "\u003ccode\u003echain\u003c/code\u003e - the certificate chain for the corresponding public key (only required if the given key is of type \n\u003ccode\u003ejava.security.PrivateKey\u003c/code\u003e)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded), the given key cannot be protected, or this operation fails for some other reason"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setKeyEntry",
      "comment": "Assigns the given key (that has already been protected) to the given alias. If the protected key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key. If the underlying keystore implementation is of type jks, key must be encoded as an EncryptedPrivateKeyInfo as defined in the PKCS #8 standard. If the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain).",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name",
          "\u003ccode\u003ekey\u003c/code\u003e - the key (in protected format) to be associated with the alias",
          "\u003ccode\u003echain\u003c/code\u003e - the certificate chain for the corresponding public key (only useful if the protected key is of type \n\u003ccode\u003ejava.security.PrivateKey\u003c/code\u003e)."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded), or if this operation fails for some other reason."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setCertificateEntry",
      "comment": "Assigns the given trusted certificate to the given alias. If the given alias identifies an existing entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, the trusted certificate in the existing entry is overridden by the given certificate.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name",
          "\u003ccode\u003ecert\u003c/code\u003e - the certificate"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized, or the given alias already exists and does not identify an entry containing a trusted certificate, or this operation fails for some other reason."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "deleteEntry",
      "comment": "Deletes the entry identified by the given alias from this keystore.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized, or if the entry cannot be removed."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.util.Enumeration",
        "parameters": [
          {
            "name": "java.lang.String",
            "type": "Class"
          }
        ],
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "aliases",
      "comment": "Lists all the alias names of this keystore.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)."
        ],
        "return": [
          "enumeration of the alias names"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "containsAlias",
      "comment": "Checks if the given alias exists in this keystore.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)."
        ],
        "return": [
          "true if the alias exists, false otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "size",
      "comment": "Retrieves the number of entries in this keystore.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)."
        ],
        "return": [
          "the number of entries in this keystore"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isKeyEntry",
      "comment": "Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias for the keystore entry to be checked"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)."
        ],
        "return": [
          "true if the entry identified by the given alias is a key-related entry, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "isCertificateEntry",
      "comment": "Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias for the keystore entry to be checked"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)."
        ],
        "return": [
          "true if the entry identified by the given alias contains a trusted certificate, false otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getCertificateAlias",
      "comment": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate. This method attempts to match the given certificate with each keystore entry. If the entry being considered was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the given certificate is compared to that entry\u0027s certificate. If the entry being considered was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the given certificate is compared to the first element of that entry\u0027s certificate chain.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ecert\u003c/code\u003e - the certificate to match with."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)."
        ],
        "return": [
          "the alias name of the first entry with a matching certificate, or null if no such entry exists in this keystore."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "store",
      "comment": "Stores this keystore to the given output stream, and protects its integrity with the given password.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estream\u003c/code\u003e - the output stream to which this keystore is written.",
          "\u003ccode\u003epassword\u003c/code\u003e - the password to generate the keystore integrity check"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded).",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there was an I/O problem with data",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the appropriate data integrity algorithm could not be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if any of the certificates included in the keystore data could not be stored"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "store",
      "comment": "Stores this keystore using the given LoadStoreParameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparam\u003c/code\u003e - the \n\u003ccode\u003eLoadStoreParameter\u003c/code\u003e that specifies how to store the keystore, which may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003eLoadStoreParameter\u003c/code\u003e input is not recognized",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there was an I/O problem with data",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the appropriate data integrity algorithm could not be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if any of the certificates included in the keystore data could not be stored"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "load",
      "comment": "Loads this KeyStore from the given input stream. A password may be given to unlock the keystore (e.g. the keystore resides on a hardware token device), or to check the integrity of the keystore data. If a password is not given for integrity checking, then integrity checking is not performed. In order to create an empty keystore, or if the keystore cannot be initialized from a stream, pass null as the stream argument. Note that if this keystore has already been loaded, it is reinitialized and loaded again from the given input stream.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003estream\u003c/code\u003e - the input stream from which the keystore is loaded, or \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003epassword\u003c/code\u003e - the password used to check the integrity of the keystore, the password used to unlock the keystore, or \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an I/O or format problem with the keystore data, if a password is required but not given, or if the given password was incorrect. If the error is due to a wrong password, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getCause()\"\u003e\u003ccode\u003ecause\u003c/code\u003e\u003c/a\u003e of the \n\u003ccode\u003eIOException\u003c/code\u003e should be an \n\u003ccode\u003eUnrecoverableKeyException\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the algorithm used to check the integrity of the keystore cannot be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if any of the certificates in the keystore could not be loaded"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "load",
      "comment": "Loads this keystore using the given LoadStoreParameter. Note that if this KeyStore has already been loaded, it is reinitialized and loaded again from the given parameter.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparam\u003c/code\u003e - the \n\u003ccode\u003eLoadStoreParameter\u003c/code\u003e that specifies how to load the keystore, which may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if the given \n\u003ccode\u003eLoadStoreParameter\u003c/code\u003e input is not recognized",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an I/O or format problem with the keystore data. If the error is due to an incorrect \n\u003ccode\u003eProtectionParameter\u003c/code\u003e (e.g. wrong password) the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getCause()\"\u003e\u003ccode\u003ecause\u003c/code\u003e\u003c/a\u003e of the \n\u003ccode\u003eIOException\u003c/code\u003e should be an \n\u003ccode\u003eUnrecoverableKeyException\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the algorithm used to check the integrity of the keystore cannot be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if any of the certificates in the keystore could not be loaded"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.KeyStore$Entry",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getEntry",
      "comment": "Gets a keystore Entry for the specified alias with the specified protection parameter.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStore.html#setEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)\"\u003e\u003ccode\u003esetEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - get the keystore \n\u003ccode\u003eEntry\u003c/code\u003e for this alias",
          "\u003ccode\u003eprotParam\u003c/code\u003e - the \n\u003ccode\u003eProtectionParameter\u003c/code\u003e used to protect the \n\u003ccode\u003eEntry\u003c/code\u003e, which may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealias\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the algorithm for recovering the entry cannot be found",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/UnrecoverableEntryException.html\" title\u003d\"class in java.security\"\u003eUnrecoverableEntryException\u003c/a\u003e\u003c/code\u003e - if the specified \n\u003ccode\u003eprotParam\u003c/code\u003e were insufficient or invalid",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/UnrecoverableKeyException.html\" title\u003d\"class in java.security\"\u003eUnrecoverableKeyException\u003c/a\u003e\u003c/code\u003e - if the entry is a \n\u003ccode\u003ePrivateKeyEntry\u003c/code\u003e or \n\u003ccode\u003eSecretKeyEntry\u003c/code\u003e and the specified \n\u003ccode\u003eprotParam\u003c/code\u003e does not contain the information needed to recover the key (e.g. wrong password)",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)."
        ],
        "return": [
          "the keystore \n\u003ccode\u003eEntry\u003c/code\u003e for the specified alias, or \n\u003ccode\u003enull\u003c/code\u003e if there is no such entry"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "setEntry",
      "comment": "Saves a keystore Entry under the specified alias. The protection parameter is used to protect the Entry. If an entry already exists for the specified alias, it is overridden.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStore.html#getEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)\"\u003e\u003ccode\u003egetEntry(String, KeyStore.ProtectionParameter)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - save the keystore \n\u003ccode\u003eEntry\u003c/code\u003e under this alias",
          "\u003ccode\u003eentry\u003c/code\u003e - the \n\u003ccode\u003eEntry\u003c/code\u003e to save",
          "\u003ccode\u003eprotParam\u003c/code\u003e - the \n\u003ccode\u003eProtectionParameter\u003c/code\u003e used to protect the \n\u003ccode\u003eEntry\u003c/code\u003e, which may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealias\u003c/code\u003e or \n\u003ccode\u003eentry\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded), or if this operation fails for some other reason"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "entryInstanceOf",
      "comment": "Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ealias\u003c/code\u003e - the alias name",
          "\u003ccode\u003eentryClass\u003c/code\u003e - the entry class"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if \n\u003ccode\u003ealias\u003c/code\u003e or \n\u003ccode\u003eentryClass\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if the keystore has not been initialized (loaded)"
        ],
        "return": [
          "true if the keystore \n\u003ccode\u003eEntry\u003c/code\u003e for the specified \n\u003ccode\u003ealias\u003c/code\u003e is an instance or subclass of the specified \n\u003ccode\u003eentryClass\u003c/code\u003e, false otherwise"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.KeyStore",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Returns a loaded keystore object of the appropriate keystore type. First the keystore type is determined by probing the specified file. Then a keystore object is instantiated and loaded using the data from that file. A password may be given to unlock the keystore (e.g. the keystore resides on a hardware token device), or to check the integrity of the keystore data. If a password is not given for integrity checking, then integrity checking is not performed. This method traverses the list of registered security providers, starting with the most preferred Provider. For each KeyStoreSpi implementation supported by a Provider, it invokes the engineProbe method to determine if it supports the specified keystore. A new KeyStore object is returned that encapsulates the KeyStoreSpi implementation from the first Provider that supports the specified file. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the keystore file",
          "\u003ccode\u003epassword\u003c/code\u003e - the keystore password, which may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if no Provider supports a KeyStoreSpi implementation for the specified keystore file.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an I/O or format problem with the keystore data, if a password is required but not given, or if the given password was incorrect. If the error is due to a wrong password, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getCause()\"\u003e\u003ccode\u003ecause\u003c/code\u003e\u003c/a\u003e of the \n\u003ccode\u003eIOException\u003c/code\u003e should be an \n\u003ccode\u003eUnrecoverableKeyException\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the algorithm used to check the integrity of the keystore cannot be found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if any of the certificates in the keystore could not be loaded.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if file does not exist or does not refer to a normal file.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if file is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.io.FileDescriptor)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.io.FileDescriptor)\u003c/code\u003e\u003c/a\u003e method denies read access to the specified file."
        ],
        "return": [
          "a keystore object loaded with keystore data"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.KeyStore",
        "type": "Class"
      },
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 25,
      "name": "getInstance",
      "comment": "Returns a loaded keystore object of the appropriate keystore type. First the keystore type is determined by probing the specified file. Then a keystore object is instantiated and loaded using the data from that file. A LoadStoreParameter may be supplied which specifies how to unlock the keystore data or perform an integrity check. This method traverses the list of registered security providers, starting with the most preferred Provider. For each KeyStoreSpi implementation supported by a Provider, it invokes the engineProbe method to determine if it supports the specified keystore. A new KeyStore object is returned that encapsulates the KeyStoreSpi implementation from the first Provider that supports the specified file. Note that the list of registered providers may be retrieved via the Security.getProviders() method.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Provider.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003eProvider\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the keystore file",
          "\u003ccode\u003eparam\u003c/code\u003e - the \n\u003ccode\u003eLoadStoreParameter\u003c/code\u003e that specifies how to load the keystore, which may be \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/KeyStoreException.html\" title\u003d\"class in java.security\"\u003eKeyStoreException\u003c/a\u003e\u003c/code\u003e - if no Provider supports a KeyStoreSpi implementation for the specified keystore file.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if there is an I/O or format problem with the keystore data. If the error is due to an incorrect \n\u003ccode\u003eProtectionParameter\u003c/code\u003e (e.g. wrong password) the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Throwable.html#getCause()\"\u003e\u003ccode\u003ecause\u003c/code\u003e\u003c/a\u003e of the \n\u003ccode\u003eIOException\u003c/code\u003e should be an \n\u003ccode\u003eUnrecoverableKeyException\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/NoSuchAlgorithmException.html\" title\u003d\"class in java.security\"\u003eNoSuchAlgorithmException\u003c/a\u003e\u003c/code\u003e - if the algorithm used to check the integrity of the keystore cannot be found.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/CertificateException.html\" title\u003d\"class in java.security.cert\"\u003eCertificateException\u003c/a\u003e\u003c/code\u003e - if any of the certificates in the keystore could not be loaded.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if file does not exist or does not refer to a normal file, or if param is not recognized.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - if file is \n\u003ccode\u003enull\u003c/code\u003e.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.io.FileDescriptor)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.io.FileDescriptor)\u003c/code\u003e\u003c/a\u003e method denies read access to the specified file."
        ],
        "return": [
          "a keystore object loaded with keystore data"
        ],
        "since": [
          "9"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.security.KeyStoreSpi",
            "type": "Class"
          },
          "name": "keyStoreSpi",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.security.Provider",
            "type": "Class"
          },
          "name": "provider",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "type",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 4,
      "comment": "Creates a KeyStore object of the given type, and encapsulates the given provider implementation (SPI object) in it.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ekeyStoreSpi\u003c/code\u003e - the provider implementation.",
          "\u003ccode\u003eprovider\u003c/code\u003e - the provider.",
          "\u003ccode\u003etype\u003c/code\u003e - the keystore type."
        ]
      }
    }
  ],
  "innerClasses": [
    "java.security.KeyStore$Builder",
    "java.security.KeyStore$Entry",
    "java.security.KeyStore$TrustedCertificateEntry",
    "java.security.KeyStore$LoadStoreParameter",
    "java.security.KeyStore$PasswordProtection",
    "java.security.KeyStore$CallbackHandlerProtection",
    "java.security.KeyStore$PrivateKeyEntry",
    "java.security.KeyStore$SecretKeyEntry",
    "java.security.KeyStore$ProtectionParameter"
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.security.KeyStore",
  "comment": "This class represents a storage facility for cryptographic keys and certificates. \n\u003cp\u003e A \u003ccode\u003eKeyStore\u003c/code\u003e manages different types of entries. Each type of entry implements the \u003ccode\u003eKeyStore.Entry\u003c/code\u003e interface. Three basic \u003ccode\u003eKeyStore.Entry\u003c/code\u003e implementations are provided: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003cb\u003eKeyStore.PrivateKeyEntry\u003c/b\u003e \u003cp\u003e This type of entry holds a cryptographic \u003ccode\u003ePrivateKey\u003c/code\u003e, which is optionally stored in a protected format to prevent unauthorized access. It is also accompanied by a certificate chain for the corresponding public key. \u003c/p\u003e\u003cp\u003e Private keys and certificate chains are used by a given entity for self-authentication. Applications for this authentication include software distribution organizations which sign JAR files as part of releasing and/or licensing software. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e\u003cb\u003eKeyStore.SecretKeyEntry\u003c/b\u003e \u003cp\u003e This type of entry holds a cryptographic \u003ccode\u003eSecretKey\u003c/code\u003e, which is optionally stored in a protected format to prevent unauthorized access. \u003c/p\u003e\u003c/li\u003e\n \u003cli\u003e\u003cb\u003eKeyStore.TrustedCertificateEntry\u003c/b\u003e \u003cp\u003e This type of entry contains a single public key \u003ccode\u003eCertificate\u003c/code\u003e belonging to another party. It is called a \u003ci\u003etrusted certificate\u003c/i\u003e because the keystore owner trusts that the public key in the certificate indeed belongs to the identity identified by the \u003ci\u003esubject\u003c/i\u003e (owner) of the certificate. \u003c/p\u003e\u003cp\u003eThis type of entry can be used to authenticate other parties. \u003c/p\u003e\u003c/li\u003e\n \u003cp\u003e\u003c/p\u003e\n \u003cp\u003e\u003c/p\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Each entry in a keystore is identified by an \"alias\" string. In the case of private keys and their associated certificate chains, these strings distinguish among the different ways in which the entity may authenticate itself. For example, the entity may authenticate itself using different certificate authorities, or using different public key algorithms. \u003c/p\u003e\n\u003cp\u003e Whether aliases are case sensitive is implementation dependent. In order to avoid problems, it is recommended not to use aliases in a KeyStore that only differ in case. \u003c/p\u003e\n\u003cp\u003e Whether keystores are persistent, and the mechanisms used by the keystore if it is persistent, are not specified here. This allows use of a variety of techniques for protecting sensitive (e.g., private or secret) keys. Smart cards or other integrated cryptographic engines (SafeKeyper) are one option, and simpler mechanisms such as files may also be used (in a variety of formats). \u003c/p\u003e\n\u003cp\u003e Typical ways to request a KeyStore object include specifying an existing keystore file, relying on the default type and providing a specific keystore type. \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003eTo specify an existing keystore file: \u003cpre\u003e    // get keystore password\n    char[] password \u003d getPassword();\n\n    // probe the keystore file and load the keystore entries\n    KeyStore ks \u003d KeyStore.getInstance(new File(\"keyStoreName\"), password);\n\u003c/pre\u003e The system will probe the specified file to determine its keystore type and return a keystore implementation with its entries already loaded. When this approach is used there is no need to call the keystore\u0027s \u003ca href\u003d\"#load(java.io.InputStream,char%5B%5D)\"\u003e\u003ccode\u003eload\u003c/code\u003e\u003c/a\u003e method. \u003c/li\u003e\n \u003cli\u003eTo rely on the default type: \u003cpre\u003e    KeyStore ks \u003d KeyStore.getInstance(KeyStore.getDefaultType());\n \u003c/pre\u003e The system will return a keystore implementation for the default type. \u003c/li\u003e\n \u003cli\u003eTo provide a specific keystore type: \u003cpre\u003e      KeyStore ks \u003d KeyStore.getInstance(\"JKS\");\n \u003c/pre\u003e The system will return the most preferred implementation of the specified keystore type available in the environment. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Before a keystore can be accessed, it must be \u003ca href\u003d\"#load(java.io.InputStream,char%5B%5D)\"\u003e\u003ccode\u003eloaded\u003c/code\u003e\u003c/a\u003e (unless it was already loaded during instantiation). \u003c/p\u003e\n\u003cpre\u003e    KeyStore ks \u003d KeyStore.getInstance(KeyStore.getDefaultType());\n\n    // get user password and file input stream\n    char[] password \u003d getPassword();\n\n    try (FileInputStream fis \u003d new FileInputStream(\"keyStoreName\")) {\n        ks.load(fis, password);\n    }\n \u003c/pre\u003e To create an empty keystore using the above \n\u003ccode\u003eload\u003c/code\u003e method, pass \n\u003ccode\u003enull\u003c/code\u003e as the \n\u003ccode\u003eInputStream\u003c/code\u003e argument. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Once the keystore has been loaded, it is possible to read existing entries from the keystore, or to write new entries into the keystore: \u003c/p\u003e\n\u003cpre\u003e    KeyStore.ProtectionParameter protParam \u003d\n        new KeyStore.PasswordProtection(password);\n\n    // get my private key\n    KeyStore.PrivateKeyEntry pkEntry \u003d (KeyStore.PrivateKeyEntry)\n        ks.getEntry(\"privateKeyAlias\", protParam);\n    PrivateKey myPrivateKey \u003d pkEntry.getPrivateKey();\n\n    // save my secret key\n    javax.crypto.SecretKey mySecretKey;\n    KeyStore.SecretKeyEntry skEntry \u003d\n        new KeyStore.SecretKeyEntry(mySecretKey);\n    ks.setEntry(\"secretKeyAlias\", skEntry, protParam);\n\n    // store away the keystore\n    try (FileOutputStream fos \u003d new FileOutputStream(\"newKeyStoreName\")) {\n        ks.store(fos, password);\n    }\n \u003c/pre\u003e Note that although the same password may be used to load the keystore, to protect the private key entry, to protect the secret key entry, and to store the keystore (as is shown in the sample code above), different passwords or other protection parameters may also be used. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Every implementation of the Java platform is required to support the following standard \u003ccode\u003eKeyStore\u003c/code\u003e type: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003ePKCS12\u003c/code\u003e\u003c/li\u003e \n\u003c/ul\u003e This type is described in the \n\u003ca href\u003d\"../../../../specs/security/standard-names.html#keystore-types\"\u003e KeyStore section\u003c/a\u003e of the Java Security Standard Algorithm Names Specification. Consult the release documentation for your implementation to see if any other types are supported.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PrivateKey.html\" title\u003d\"interface in java.security\"\u003e\u003ccode\u003ePrivateKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/javax/crypto/SecretKey.html\" title\u003d\"interface in javax.crypto\"\u003e\u003ccode\u003eSecretKey\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/cert/Certificate.html\" title\u003d\"class in java.security.cert\"\u003e\u003ccode\u003eCertificate\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}