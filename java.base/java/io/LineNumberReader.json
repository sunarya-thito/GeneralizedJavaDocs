{
  "packageName": "java.io",
  "simpleName": "LineNumberReader",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.io.BufferedReader",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "lineNumber"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLineNumber",
      "comment": "Set the current line number.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/LineNumberReader.html#getLineNumber()\"\u003e\u003ccode\u003egetLineNumber()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003elineNumber\u003c/code\u003e - An int specifying the line number"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getLineNumber",
      "comment": "Get the current line number.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/LineNumberReader.html#setLineNumber(int)\"\u003e\u003ccode\u003esetLineNumber(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "The current line number"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "read",
      "comment": "Read a single character. Line terminators are compressed into single newline (\u0027\\n\u0027) characters. The current line number is incremented whenever a line terminator is read, or when the end of the stream is reached and the last character in the stream is not a line terminator.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html#read()\"\u003eread\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html\" title\u003d\"class in java.io\"\u003eBufferedReader\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ],
        "return": [
          "The character read, or -1 if the end of the stream has been reached"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "cbuf"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "off"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "read",
      "comment": "Read characters into a portion of an array. Line terminators are compressed into single newline (\u0027\\n\u0027) characters. The current line number is incremented whenever a line terminator is read, or when the end of the stream is reached and the last character in the stream is not a line terminator.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html#read(char%5B%5D,int,int)\"\u003eread\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html\" title\u003d\"class in java.io\"\u003eBufferedReader\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecbuf\u003c/code\u003e - Destination buffer",
          "\u003ccode\u003eoff\u003c/code\u003e - Offset at which to start storing characters",
          "\u003ccode\u003elen\u003c/code\u003e - Maximum number of characters to read"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003eoff\u003c/code\u003e is negative, or \n\u003ccode\u003elen\u003c/code\u003e is negative, or \n\u003ccode\u003elen\u003c/code\u003e is greater than \n\u003ccode\u003ecbuf.length - off\u003c/code\u003e"
        ],
        "return": [
          "The number of characters read, or -1 if the end of the stream has already been reached"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readLine",
      "comment": "Read a line of text. Line terminators are compressed into single newline (\u0027\\n\u0027) characters. The current line number is incremented whenever a line terminator is read, or when the end of the stream is reached and the last character in the stream is not a line terminator.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#readAllLines(java.nio.file.Path,java.nio.charset.Charset)\"\u003e\u003ccode\u003eFiles.readAllLines(java.nio.file.Path, java.nio.charset.Charset)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html#readLine()\"\u003ereadLine\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html\" title\u003d\"class in java.io\"\u003eBufferedReader\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ],
        "return": [
          "A String containing the contents of the line, not including any \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/LineNumberReader.html#lt\"\u003eline termination characters\u003c/a\u003e, or \n\u003ccode\u003enull\u003c/code\u003e if the end of the stream has been reached"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "n"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "skip",
      "comment": "Skip characters.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html#skip(long)\"\u003eskip\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html\" title\u003d\"class in java.io\"\u003eBufferedReader\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003en\u003c/code\u003e - The number of characters to skip"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003en\u003c/code\u003e is negative"
        ],
        "return": [
          "The number of characters actually skipped"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "readAheadLimit"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mark",
      "comment": "Mark the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point, and will also reset the line number appropriately.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html#mark(int)\"\u003emark\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html\" title\u003d\"class in java.io\"\u003eBufferedReader\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ereadAheadLimit\u003c/code\u003e - Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reset",
      "comment": "Reset the stream to the most recent mark.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html#reset()\"\u003ereset\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/BufferedReader.html\" title\u003d\"class in java.io\"\u003eBufferedReader\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If the stream has not been marked, or if the mark has been invalidated"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a new line-numbering reader, using the default input-buffer size.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - A Reader object to provide the underlying stream"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.Reader",
            "type": "Class"
          },
          "field": {
            "name": "in"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "sz"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Create a new line-numbering reader, reading characters into a buffer of the given size.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ein\u003c/code\u003e - A Reader object to provide the underlying stream",
          "\u003ccode\u003esz\u003c/code\u003e - An int specifying the size of the buffer"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.io.LineNumberReader",
  "comment": "A buffered character-input stream that keeps track of line numbers. This class defines methods \n\u003ca href\u003d\"#setLineNumber(int)\"\u003e\u003ccode\u003esetLineNumber(int)\u003c/code\u003e\u003c/a\u003e and \n\u003ca href\u003d\"#getLineNumber()\"\u003e\u003ccode\u003egetLineNumber()\u003c/code\u003e\u003c/a\u003e for setting and getting the current line number respectively. \n\u003cp\u003e By default, line numbering begins at 0. This number increments at every \u003ca href\u003d\"#lt\"\u003eline terminator\u003c/a\u003e as the data is read, and at the end of the stream if the last character in the stream is not a line terminator. This number can be changed with a call to \u003ccode\u003esetLineNumber(int)\u003c/code\u003e. Note however, that \u003ccode\u003esetLineNumber(int)\u003c/code\u003e does not actually change the current position in the stream; it only changes the value that will be returned by \u003ccode\u003egetLineNumber()\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e A line is considered to be \u003ca id\u003d\"lt\"\u003eterminated\u003c/a\u003e by any one of a line feed (\u0027\\n\u0027), a carriage return (\u0027\\r\u0027), or a carriage return followed immediately by a linefeed, or any of the previous terminators followed by end of stream, or end of stream not preceded by another terminator.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.1"
    ]
  }
}