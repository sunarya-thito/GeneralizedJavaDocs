{
  "packageName": "java.io",
  "simpleName": "Console",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "java.io.PrintWriter",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "writer",
      "comment": "Retrieves the unique PrintWriter object associated with this console.",
      "tagMap": {
        "return": [
          "The printwriter associated with this console"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Reader",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "reader",
      "comment": "Retrieves the unique Reader object associated with this console. This method is intended to be used by sophisticated applications, for example, a Scanner object which utilizes the rich parsing/scanning functionality provided by the Scanner:  Console con \u003d System.console();\n if (con !\u003d null) {\n     Scanner sc \u003d new Scanner(con.reader());\n     ...\n }\n For simple applications requiring only line-oriented reading, use readLine(java.lang.String, java.lang.Object...). The bulk read operations read(char[]) , read(char[], int, int) and read(java.nio.CharBuffer) on the returned object will not read in characters beyond the line bound for each invocation, even if the destination buffer has space for more characters. The Reader\u0027s read methods may block if a line bound has not been entered or reached on the console\u0027s input device. A line bound is considered to be any one of a line feed (\u0027\\n\u0027), a carriage return (\u0027\\r\u0027), a carriage return followed immediately by a linefeed, or an end of stream.",
      "tagMap": {
        "return": [
          "The reader associated with this console"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Console",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "fmt"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Writes a formatted string to this console\u0027s output stream using the specified format string and arguments.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efmt\u003c/code\u003e - A format string as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eFormat string syntax\u003c/a\u003e",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e. The behaviour on a \n\u003ccode\u003enull\u003c/code\u003e argument depends on the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification."
        ],
        "return": [
          "This console"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.Console",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "format"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "printf",
      "comment": "A convenience method to write a formatted string to this console\u0027s output stream using the specified format string and arguments. An invocation of this method of the form con.printf(format, args) behaves in exactly the same way as the invocation of con.format(format, args) .",
      "tagMap": {
        "param": [
          "\u003ccode\u003eformat\u003c/code\u003e - A format string as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eFormat string syntax\u003c/a\u003e.",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e. The behaviour on a \n\u003ccode\u003enull\u003c/code\u003e argument depends on the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification."
        ],
        "return": [
          "This console"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "fmt"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readLine",
      "comment": "Provides a formatted prompt, then reads a single line of text from the console.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efmt\u003c/code\u003e - A format string as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eFormat string syntax\u003c/a\u003e.",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOError.html\" title\u003d\"class in java.io\"\u003eIOError\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs."
        ],
        "return": [
          "A string containing the line read from the console, not including any line-termination characters, or \n\u003ccode\u003enull\u003c/code\u003e if an end of stream has been reached."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readLine",
      "comment": "Reads a single line of text from the console.",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOError.html\" title\u003d\"class in java.io\"\u003eIOError\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs."
        ],
        "return": [
          "A string containing the line read from the console, not including any line-termination characters, or \n\u003ccode\u003enull\u003c/code\u003e if an end of stream has been reached."
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "fmt"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readPassword",
      "comment": "Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efmt\u003c/code\u003e - A format string as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eFormat string syntax\u003c/a\u003e for the prompt text.",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOError.html\" title\u003d\"class in java.io\"\u003eIOError\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs."
        ],
        "return": [
          "A character array containing the password or passphrase read from the console, not including any line-termination characters, or \n\u003ccode\u003enull\u003c/code\u003e if an end of stream has been reached."
        ]
      }
    },
    {
      "returnType": {
        "name": "char",
        "type": "Class",
        "arrayDimensions": [
          {}
        ]
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "readPassword",
      "comment": "Reads a password or passphrase from the console with echoing disabled",
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOError.html\" title\u003d\"class in java.io\"\u003eIOError\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs."
        ],
        "return": [
          "A character array containing the password or passphrase read from the console, not including any line-termination characters, or \n\u003ccode\u003enull\u003c/code\u003e if an end of stream has been reached."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "flush",
      "comment": "Flushes the console and forces any buffered output to be written immediately .",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Flushable.html#flush()\"\u003eflush\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Flushable.html\" title\u003d\"interface in java.io\"\u003eFlushable\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.io.Console",
  "comment": "Methods to access the character-based console device, if any, associated with the current Java virtual machine. \n\u003cp\u003e Whether a virtual machine has a console is dependent upon the underlying platform and also upon the manner in which the virtual machine is invoked. If the virtual machine is started from an interactive command line without redirecting the standard input and output streams then its console will exist and will typically be connected to the keyboard and display from which the virtual machine was launched. If the virtual machine is started automatically, for example by a background job scheduler, then it will typically not have a console. \u003c/p\u003e\n\u003cp\u003e If this virtual machine has a console then it is represented by a unique instance of this class which can be obtained by invoking the \u003ca href\u003d\"../lang/System.html#console()\"\u003e\u003ccode\u003eSystem.console()\u003c/code\u003e\u003c/a\u003e method. If no console device is available then an invocation of that method will return \u003ccode\u003enull\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e Read and write operations are synchronized to guarantee the atomic completion of critical operations; therefore invoking methods \u003ca href\u003d\"#readLine()\"\u003e\u003ccode\u003ereadLine()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#readPassword()\"\u003e\u003ccode\u003ereadPassword()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#format(java.lang.String,java.lang.Object...)\"\u003e\u003ccode\u003eformat()\u003c/code\u003e\u003c/a\u003e, \u003ca href\u003d\"#printf(java.lang.String,java.lang.Object...)\"\u003e\u003ccode\u003eprintf()\u003c/code\u003e\u003c/a\u003e as well as the read, format and write operations on the objects returned by \u003ca href\u003d\"#reader()\"\u003e\u003ccode\u003ereader()\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#writer()\"\u003e\u003ccode\u003ewriter()\u003c/code\u003e\u003c/a\u003e may block in multithreaded scenarios. \u003c/p\u003e\n\u003cp\u003e Invoking \u003ccode\u003eclose()\u003c/code\u003e on the objects returned by the \u003ca href\u003d\"#reader()\"\u003e\u003ccode\u003ereader()\u003c/code\u003e\u003c/a\u003e and the \u003ca href\u003d\"#writer()\"\u003e\u003ccode\u003ewriter()\u003c/code\u003e\u003c/a\u003e will not close the underlying stream of those objects. \u003c/p\u003e\n\u003cp\u003e The console-read methods return \u003ccode\u003enull\u003c/code\u003e when the end of the console input stream is reached, for example by typing control-D on Unix or control-Z on Windows. Subsequent read operations will succeed if additional characters are later entered on the console\u0027s input device. \u003c/p\u003e\n\u003cp\u003e Unless otherwise specified, passing a \u003ccode\u003enull\u003c/code\u003e argument to any method in this class will cause a \u003ca href\u003d\"../lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e\u003c/a\u003e to be thrown. \u003c/p\u003e\n\u003cp\u003e \u003cb\u003eSecurity note:\u003c/b\u003e If an application needs to read a password or other secure data, it should use \u003ca href\u003d\"#readPassword()\"\u003e\u003ccode\u003ereadPassword()\u003c/code\u003e\u003c/a\u003e or \u003ca href\u003d\"#readPassword(java.lang.String,java.lang.Object...)\"\u003e\u003ccode\u003ereadPassword(String, Object...)\u003c/code\u003e\u003c/a\u003e and manually zero the returned character array after processing to minimize the lifetime of sensitive data in memory. \u003c/p\u003e\n\u003cblockquote\u003e\n \u003cpre\u003e\u003ccode\u003e\n Console cons;\n char[] passwd;\n if ((cons \u003d System.console()) !\u003d null \u0026amp;\u0026amp;\n     (passwd \u003d cons.readPassword(\"[%s]\", \"Password:\")) !\u003d null) {\n     ...\n     java.util.Arrays.fill(passwd, \u0027 \u0027);\n }\n \u003c/code\u003e\u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.6"
    ]
  }
}