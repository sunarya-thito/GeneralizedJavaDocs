{
  "packageName": "java.io",
  "simpleName": "FileOutputStream",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.io.OutputStream",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "b",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "write",
      "comment": "Writes the specified byte to this file output stream. Implements the write method of OutputStream.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/OutputStream.html#write(int)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/OutputStream.html\" title\u003d\"class in java.io\"\u003eOutputStream\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the byte to be written."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "b",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "write",
      "comment": "Writes b.length bytes from the specified byte array to this file output stream.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/OutputStream.html#write(byte%5B%5D,int,int)\"\u003e\u003ccode\u003eOutputStream.write(byte[], int, int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/OutputStream.html#write(byte%5B%5D)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/OutputStream.html\" title\u003d\"class in java.io\"\u003eOutputStream\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the data."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "byte",
            "type": "Class",
            "arrayDimensions": 1
          },
          "name": "b",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "off",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "int",
            "type": "Class"
          },
          "name": "len",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "write",
      "comment": "Writes len bytes from the specified byte array starting at offset off to this file output stream.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/OutputStream.html#write(byte%5B%5D,int,int)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/OutputStream.html\" title\u003d\"class in java.io\"\u003eOutputStream\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - the data.",
          "\u003ccode\u003eoff\u003c/code\u003e - the start offset in the data.",
          "\u003ccode\u003elen\u003c/code\u003e - the number of bytes to write."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "close",
      "comment": "Closes this file output stream and releases any system resources associated with this stream. This file output stream may no longer be used for writing bytes. If this stream has an associated channel then the channel is closed as well.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/OutputStream.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/OutputStream.html\" title\u003d\"class in java.io\"\u003eOutputStream\u003c/a\u003e\u003c/code\u003e"
        ],
        "apiNote": [
          "Overriding \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileOutputStream.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e to perform cleanup actions is reliable only when called directly or when called by try-with-resources. Do not depend on finalization to invoke \n\u003ccode\u003eclose\u003c/code\u003e; finalization is not reliable and is deprecated. If cleanup of native resources is needed, other mechanisms such as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ref/Cleaner.html\" title\u003d\"class in java.lang.ref\"\u003eCleaner\u003c/a\u003e should be used."
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html\" title\u003d\"interface in java.io\"\u003eCloseable\u003c/a\u003e\u003c/code\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.FileDescriptor",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 17,
      "name": "getFD",
      "comment": "Returns the file descriptor associated with this stream.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileDescriptor.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eFileDescriptor\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs."
        ],
        "return": [
          "the \n\u003ccode\u003eFileDescriptor\u003c/code\u003e object that represents the connection to the file in the file system being used by this \n\u003ccode\u003eFileOutputStream\u003c/code\u003e object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.channels.FileChannel",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getChannel",
      "comment": "Returns the unique FileChannel object associated with this file output stream. The initial position of the returned channel will be equal to the number of bytes written to the file so far unless this stream is in append mode, in which case it will be equal to the size of the file. Writing bytes to this stream will increment the channel\u0027s position accordingly. Changing the channel\u0027s position, either explicitly or by writing, will change this stream\u0027s file position.",
      "annotations": [],
      "tagMap": {
        "return": [
          "the file channel associated with this file output stream"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a file output stream to write to the file with the specified name. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkWrite method is called with name as its argument. If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown.",
      "annotations": [],
      "tagMap": {
        "implSpec": [
          "Invoking this constructor with the parameter \n\u003ccode\u003ename\u003c/code\u003e is equivalent to invoking \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileOutputStream.html#%3Cinit%3E(java.lang.String,boolean)\"\u003e\u003ccode\u003enew FileOutputStream(name, false)\u003c/code\u003e\u003c/a\u003e."
        ],
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the system-dependent filename"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckWrite\u003c/code\u003e method denies write access to the file."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "name",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "append",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a file output stream to write to the file with the specified name. If the second argument is true, then bytes will be written to the end of the file rather than the beginning. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkWrite method is called with name as its argument. If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ename\u003c/code\u003e - the system-dependent file name",
          "\u003ccode\u003eappend\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, then bytes will be written to the end of the file rather than the beginning"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckWrite\u003c/code\u003e method denies write access to the file."
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "file",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a file output stream to write to the file represented by the specified File object. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkWrite method is called with the path represented by the file argument as its argument. If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html#getPath()\"\u003e\u003ccode\u003eFile.getPath()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the file to be opened for writing."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckWrite\u003c/code\u003e method denies write access to the file."
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "file",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "append",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a file output stream to write to the file represented by the specified File object. If the second argument is true, then bytes will be written to the end of the file rather than the beginning. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkWrite method is called with the path represented by the file argument as its argument. If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html#getPath()\"\u003e\u003ccode\u003eFile.getPath()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eSecurityException\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - the file to be opened for writing.",
          "\u003ccode\u003eappend\u003c/code\u003e - if \n\u003ccode\u003etrue\u003c/code\u003e, then bytes will be written to the end of the file rather than the beginning"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckWrite\u003c/code\u003e method denies write access to the file."
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.FileDescriptor",
            "type": "Class"
          },
          "name": "fdObj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a file output stream to write to the specified file descriptor, which represents an existing connection to an actual file in the file system. First, if there is a security manager, its checkWrite method is called with the file descriptor fdObj argument as its argument. If fdObj is null then a NullPointerException is thrown. This constructor does not throw an exception if fdObj is invalid. However, if the methods are invoked on the resulting stream to attempt I/O on the stream, an IOException is thrown.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.io.FileDescriptor)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efdObj\u003c/code\u003e - the file descriptor to be opened for writing"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - if a security manager exists and its \n\u003ccode\u003echeckWrite\u003c/code\u003e method denies write access to the file descriptor"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.io.FileOutputStream",
  "annotations": [],
  "tagMap": {
    "implSpec": [
      "If this FileOutputStream has been subclassed and the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileOutputStream.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e method has been overridden, the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileOutputStream.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e method will be called when the FileInputStream is unreachable. Otherwise, it is implementation specific how the resource cleanup described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileOutputStream.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e is performed."
    ],
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eFile\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileDescriptor.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eFileDescriptor\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileInputStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003eFileInputStream\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)\"\u003e\u003ccode\u003eFiles.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)\u003c/code\u003e\u003c/a\u003e"
    ],
    "apiNote": [
      "To release resources used by this stream \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileOutputStream.html#close()\"\u003e\u003ccode\u003eclose()\u003c/code\u003e\u003c/a\u003e should be called directly or by try-with-resources. Subclasses are responsible for the cleanup of resources acquired by the subclass. Subclasses that override \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#finalize()\"\u003e\u003ccode\u003eObject.finalize()\u003c/code\u003e\u003c/a\u003e in order to perform cleanup should be modified to use alternative cleanup mechanisms such as \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/ref/Cleaner.html\" title\u003d\"class in java.lang.ref\"\u003e\u003ccode\u003eCleaner\u003c/code\u003e\u003c/a\u003e and remove the overriding \n\u003ccode\u003efinalize\u003c/code\u003e method."
    ],
    "since": [
      "1.0"
    ]
  }
}