{
  "packageName": "java.io",
  "simpleName": "FilePermission",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.security.Permission",
    "type": "Class"
  },
  "members": [
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.security.Permission",
            "type": "Class"
          },
          "field": {
            "name": "p"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "implies",
      "comment": "Checks if this FilePermission object \"implies\" the specified permission. More specifically, this method returns true if: p is an instanceof FilePermission, p\u0027s actions are a proper subset of this object\u0027s actions, and p\u0027s pathname is implied by this object\u0027s pathname. For example, \"/tmp/*\" implies \"/tmp/foo\", since \"/tmp/*\" encompasses all files in the \"/tmp\" directory, including the one named \"foo\". Precisely, a simple pathname implies another simple pathname if and only if they are equal. A simple pathname never implies a wildcard pathname. A wildcard pathname implies another wildcard pathname if and only if all simple pathnames implied by the latter are implied by the former. A wildcard pathname implies a simple pathname if and only if if the wildcard flag is \"*\", the simple pathname\u0027s path must be right inside the wildcard pathname\u0027s path. if the wildcard flag is \"-\", the simple pathname\u0027s path must be recursively inside the wildcard pathname\u0027s path. \"\u003c\u003cALL FILES\u003e\u003e\" implies every other pathname. No pathname, except for \"\u003c\u003cALL FILES\u003e\u003e\" itself, implies \"\u003c\u003cALL FILES\u003e\u003e\".",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#implies(java.security.Permission)\"\u003eimplies\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ep\u003c/code\u003e - the permission to check against."
        ],
        "implNote": [
          "If \n\u003ccode\u003ejdk.io.permissionsUseCanonicalPath\u003c/code\u003e is \n\u003ccode\u003etrue\u003c/code\u003e, a simple \n\u003ccode\u003ecpath\u003c/code\u003e is inside a wildcard \n\u003ccode\u003ecpath\u003c/code\u003e if and only if after removing the base name (the last name in the pathname\u0027s name sequence) from the former the remaining part is equal to the latter, a simple \n\u003ccode\u003ecpath\u003c/code\u003e is recursively inside a wildcard \n\u003ccode\u003ecpath\u003c/code\u003e if and only if the former starts with the latter. \n\u003cp\u003e If \u003ccode\u003ejdk.io.permissionsUseCanonicalPath\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, a simple \u003ccode\u003enpath\u003c/code\u003e is inside a wildcard \u003ccode\u003enpath\u003c/code\u003e if and only if \u003ccode\u003e simple_npath.relativize(wildcard_npath)\u003c/code\u003e is exactly \"..\", a simple \u003ccode\u003enpath\u003c/code\u003e is recursively inside a wildcard \u003ccode\u003enpath\u003c/code\u003e if and only if \u003ccode\u003esimple_npath.relativize(wildcard_npath)\u003c/code\u003e is a series of one or more \"..\". This means \"/-\" implies \"/foo\" but not \"foo\". \u003c/p\u003e\n\u003cp\u003e An invalid \u003ccode\u003eFilePermission\u003c/code\u003e does not imply any object except for itself. An invalid \u003ccode\u003eFilePermission\u003c/code\u003e is not implied by any object except for itself or a \u003ccode\u003eFilePermission\u003c/code\u003e on \"\u0026lt;\u0026lt;ALL FILES\u0026gt;\u0026gt;\" whose actions is a superset of this invalid \u003ccode\u003eFilePermission\u003c/code\u003e. Even if two \u003ccode\u003eFilePermission\u003c/code\u003e are created with the same invalid path, one does not imply the other.\u003c/p\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the specified permission is not \n\u003ccode\u003enull\u003c/code\u003e and is implied by this object, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Checks two FilePermission objects for equality. Checks that obj is a FilePermission, and has the same pathname and actions as this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - the object we are testing for equality with this object."
        ],
        "implNote": [
          "More specifically, two pathnames are the same if and only if they have the same wildcard flag and their \n\u003ccode\u003ecpath\u003c/code\u003e (if \n\u003ccode\u003ejdk.io.permissionsUseCanonicalPath\u003c/code\u003e is \n\u003ccode\u003etrue\u003c/code\u003e) or \n\u003ccode\u003enpath\u003c/code\u003e (if \n\u003ccode\u003ejdk.io.permissionsUseCanonicalPath\u003c/code\u003e is \n\u003ccode\u003efalse\u003c/code\u003e) are equal. Or they are both \"\u0026lt;\u0026lt;ALL FILES\u0026gt;\u0026gt;\". \n\u003cp\u003e When \u003ccode\u003ejdk.io.permissionsUseCanonicalPath\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, an invalid \u003ccode\u003eFilePermission\u003c/code\u003e does not equal to any object except for itself, even if they are created using the same invalid path.\u003c/p\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if obj is a FilePermission, and has the same pathname and actions as this FilePermission object, \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Returns the hash code value for this object.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a hash code value for this object."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getActions",
      "comment": "Returns the \"canonical string representation\" of the actions. That is, this method always returns present actions in the following order: read, write, execute, delete, readlink. For example, if this FilePermission object allows both write and read actions, a call to getActions will return the string \"read,write\".",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#getActions()\"\u003egetActions\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "the canonical string representation of the actions."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.security.PermissionCollection",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "newPermissionCollection",
      "comment": "Returns a new PermissionCollection object for storing FilePermission objects. FilePermission objects must be stored in a manner that allows them to be inserted into the collection in any order, but that also enables the PermissionCollection implies method to be implemented in an efficient (and consistent) manner. For example, if you have two FilePermissions: \"/tmp/-\", \"read\" \"/tmp/scratch/foo\", \"write\" and you are calling the implies method with the FilePermission:    \"/tmp/scratch/foo\", \"read,write\",\n then the implies function must take into account both the \"/tmp/-\" and \"/tmp/scratch/foo\" permissions, so the effective permission is \"read,write\", and implies returns true. The \"implies\" semantics for FilePermissions are handled properly by the PermissionCollection object returned by this newPermissionCollection method.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html#newPermissionCollection()\"\u003enewPermissionCollection\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003ePermission\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "a new PermissionCollection object suitable for storing FilePermissions."
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "path"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "actions"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new FilePermission object with the specified actions. path is the pathname of a file or directory, and actions contains a comma-separated list of the desired actions granted on the file or directory. Possible actions are \"read\", \"write\", \"execute\", \"delete\", and \"readlink\". A pathname that ends in \"/*\" (where \"/\" is the file separator character, File.separatorChar) indicates all the files and directories contained in that directory. A pathname that ends with \"/-\" indicates (recursively) all files and subdirectories contained in that directory. The special pathname \"\u003c\u003cALL FILES\u003e\u003e\" matches any file. A pathname consisting of a single \"*\" indicates all the files in the current directory, while a pathname consisting of a single \"-\" indicates all the files in the current directory and (recursively) all files and subdirectories contained in the current directory. A pathname containing an empty string represents an empty path.",
      "tagMap": {
        "param": [
          "\u003ccode\u003epath\u003c/code\u003e - the pathname of the file/directory.",
          "\u003ccode\u003eactions\u003c/code\u003e - the action string."
        ],
        "implNote": [
          "In this implementation, the \n\u003ccode\u003e\u003cspan id\u003d\"jdk.io.permissionsUseCanonicalPath\" class\u003d\"search-tag-result\"\u003ejdk.io.permissionsUseCanonicalPath\u003c/span\u003e\u003c/code\u003e system property dictates how the \n\u003ccode\u003epath\u003c/code\u003e argument is processed and stored. \n\u003cp\u003e If the value of the system property is set to \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003epath\u003c/code\u003e is canonicalized and stored as a String object named \u003ccode\u003ecpath\u003c/code\u003e. This means a relative path is converted to an absolute path, a Windows DOS-style 8.3 path is expanded to a long path, and a symbolic link is resolved to its target, etc. \u003c/p\u003e\n\u003cp\u003e If the value of the system property is set to \u003ccode\u003efalse\u003c/code\u003e, \u003ccode\u003epath\u003c/code\u003e is converted to a \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html\" title\u003d\"interface in java.nio.file\"\u003e\u003ccode\u003ePath\u003c/code\u003e\u003c/a\u003e object named \u003ccode\u003enpath\u003c/code\u003e after \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html#normalize()\"\u003e\u003ccode\u003enormalization\u003c/code\u003e\u003c/a\u003e. No canonicalization is performed which means the underlying file system is not accessed. If an \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/InvalidPathException.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003eInvalidPathException\u003c/code\u003e\u003c/a\u003e is thrown during the conversion, this \u003ccode\u003eFilePermission\u003c/code\u003e will be labeled as invalid. \u003c/p\u003e\n\u003cp\u003e In either case, the \"*\" or \"-\" character at the end of a wildcard \u003ccode\u003epath\u003c/code\u003e is removed before canonicalization or normalization. It is stored in a separate wildcard flag field. \u003c/p\u003e\n\u003cp\u003e The default value of the \u003ccode\u003ejdk.io.permissionsUseCanonicalPath\u003c/code\u003e system property is \u003ccode\u003efalse\u003c/code\u003e in this implementation. \u003c/p\u003e\n\u003cp\u003e The value can also be set with a security property using the same name, but setting a system property will override the security property value.\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - if actions is \n\u003ccode\u003enull\u003c/code\u003e, empty, malformed or contains an action other than the specified possible actions"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 17,
  "name": "java.io.FilePermission",
  "comment": "This class represents access to a file or directory. A FilePermission consists of a pathname and a set of actions valid for that pathname. \n\u003cp\u003e Pathname is the pathname of the file or directory granted the specified actions. A pathname that ends in \"/*\" (where \"/\" is the file separator character, \u003ccode\u003eFile.separatorChar\u003c/code\u003e) indicates all the files and directories contained in that directory. A pathname that ends with \"/-\" indicates (recursively) all files and subdirectories contained in that directory. Such a pathname is called a wildcard pathname. Otherwise, it\u0027s a simple pathname. \u003c/p\u003e\n\u003cp\u003e A pathname consisting of the special token \"\u0026lt;\u0026lt;ALL FILES\u0026gt;\u0026gt;\" matches \u003cb\u003eany\u003c/b\u003e file. \u003c/p\u003e\n\u003cp\u003e Note: A pathname consisting of a single \"*\" indicates all the files in the current directory, while a pathname consisting of a single \"-\" indicates all the files in the current directory and (recursively) all files and subdirectories contained in the current directory. \u003c/p\u003e\n\u003cp\u003e The actions to be granted are passed to the constructor in a string containing a list of one or more comma-separated keywords. The possible keywords are \"read\", \"write\", \"execute\", \"delete\", and \"readlink\". Their meaning is defined as follows: \u003c/p\u003e\n\u003cdl\u003e \n \u003cdt\u003e\n   read \n \u003c/dt\u003e\n \u003cdd\u003e\n   read permission \n \u003c/dd\u003e\n \u003cdt\u003e\n   write \n \u003c/dt\u003e\n \u003cdd\u003e\n   write permission \n \u003c/dd\u003e\n \u003cdt\u003e\n   execute \n \u003c/dt\u003e\n \u003cdd\u003e\n   execute permission. Allows \n  \u003ccode\u003eRuntime.exec\u003c/code\u003e to be called. Corresponds to \n  \u003ccode\u003eSecurityManager.checkExec\u003c/code\u003e. \n \u003c/dd\u003e\n \u003cdt\u003e\n   delete \n \u003c/dt\u003e\n \u003cdd\u003e\n   delete permission. Allows \n  \u003ccode\u003eFile.delete\u003c/code\u003e to be called. Corresponds to \n  \u003ccode\u003eSecurityManager.checkDelete\u003c/code\u003e. \n \u003c/dd\u003e\n \u003cdt\u003e\n   readlink \n \u003c/dt\u003e\n \u003cdd\u003e\n   read link permission. Allows the target of a \n  \u003ca href\u003d\"../nio/file/package-summary.html#links\"\u003esymbolic link\u003c/a\u003e to be read by invoking the \n  \u003ca href\u003d\"../nio/file/Files.html#readSymbolicLink(java.nio.file.Path)\"\u003e\u003ccode\u003ereadSymbolicLink \u003c/code\u003e\u003c/a\u003e method. \n \u003c/dd\u003e\n\u003c/dl\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The actions string is converted to lowercase before processing. \u003c/p\u003e\n\u003cp\u003e Be careful when granting FilePermissions. Think about the implications of granting read and especially write access to various files and directories. The \"\u0026lt;\u0026lt;ALL FILES\u0026gt;\u0026gt;\" permission with write action is especially dangerous. This grants permission to write to the entire file system. One thing this effectively allows is replacement of the system binary, including the JVM runtime environment. \u003c/p\u003e\n\u003cp\u003e Please note: Code can always read a file from the same directory it\u0027s in (or a subdirectory of that directory); it does not need explicit permission to do so.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permission.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermission\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/Permissions.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissions\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/security/PermissionCollection.html\" title\u003d\"class in java.security\"\u003e\u003ccode\u003ePermissionCollection\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "1.2"
    ]
  }
}