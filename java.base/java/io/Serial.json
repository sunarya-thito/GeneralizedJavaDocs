{
  "packageName": "java.io",
  "simpleName": "Serial",
  "moduleName": "java.base",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.io.Serial",
  "comment": "Indicates that an annotated field or method is part of the \n\u003ca href\u003d\"Serializable.html\" title\u003d\"interface in java.io\"\u003eserialization mechanism\u003c/a\u003e defined by the \n\u003ccite\u003eJava Object Serialization Specification\u003c/cite\u003e. This annotation type is intended to allow compile-time checking of serialization-related declarations, analogous to the checking enabled by the \n\u003ca href\u003d\"../lang/Override.html\" title\u003d\"annotation in java.lang\"\u003e\u003ccode\u003eOverride\u003c/code\u003e\u003c/a\u003e annotation type to validate method overriding. \n\u003ccode\u003eSerializable\u003c/code\u003e classes are encouraged to use \n\u003ccode\u003e@Serial\u003c/code\u003e annotations to help a compiler catch mis-declared serialization-related fields and methods, mis-declarations that may otherwise be difficult to detect. \n\u003cp\u003eSpecifically, annotations of this type should be applied to serialization-related methods and fields in classes declared to be \u003ccode\u003eSerializable\u003c/code\u003e. The five serialization-related methods are: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eprivate void writeObject(java.io.ObjectOutputStream stream) throws IOException\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eprivate void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eprivate void readObjectNoData() throws ObjectStreamException\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ci\u003eANY-ACCESS-MODIFIER\u003c/i\u003e \u003ccode\u003eObject writeReplace() throws ObjectStreamException\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ci\u003eANY-ACCESS-MODIFIER\u003c/i\u003e \u003ccode\u003eObject readResolve() throws ObjectStreamException\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e The two serialization-related fields are: \n\u003cul\u003e \n \u003cli\u003e\u003ccode\u003eprivate static final ObjectStreamField[] serialPersistentFields\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003e\u003ccode\u003eprivate static final long serialVersionUID\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e Compilers are encouraged to validate that a method or field marked with a \n\u003ccode\u003e@Serial\u003c/code\u003e annotation is one of the defined serialization-related methods or fields declared in a meaningful context and issue a warning if that is not the case. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003eIt is a semantic error to apply this annotation to other fields or methods, including: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003efields or methods in a class that is not \u003ccode\u003eSerializable\u003c/code\u003e \u003c/li\u003e\n \u003cli\u003efields or methods of the proper structural declaration, but in a type where they are ineffectual. For example, \u003ccode\u003eenum\u003c/code\u003e types are defined to have a \u003ccode\u003eserialVersionUID\u003c/code\u003e of \u003ccode\u003e0L\u003c/code\u003e so a \u003ccode\u003eserialVersionUID\u003c/code\u003e field declared in an \u003ccode\u003eenum\u003c/code\u003e type is ignored. The five serialization-related methods identified above are likewise ignored for an \u003ccode\u003eenum\u003c/code\u003e type. \u003c/li\u003e\n \u003cli\u003ein a class that is \u003ccode\u003eExternalizable\u003c/code\u003e: \n  \u003cul\u003e \n   \u003cli\u003e method declarations of \u003ccode\u003ewriteObject\u003c/code\u003e, \u003ccode\u003e readObject\u003c/code\u003e, and \u003ccode\u003ereadObjectNoData\u003c/code\u003e \u003c/li\u003e\n   \u003cli\u003ea field declaration for \u003ccode\u003eserialPersistentFields\u003c/code\u003e \u003c/li\u003e\n  \u003c/ul\u003e While the \u003ccode\u003eExternalizable\u003c/code\u003e interface extends \u003ccode\u003e Serializable\u003c/code\u003e, the three methods and one field above are \u003cem\u003enot\u003c/em\u003e used for externalizable classes. \u003c/li\u003e\n\u003c/ul\u003e Note that serialization mechanism accesses its designated fields and methods reflectively and those fields and methods may appear otherwise unused in a \n\u003ccode\u003eSerializable\u003c/code\u003e class.\n\u003cp\u003e\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Serializable.html\" title\u003d\"interface in java.io\"\u003e\u003ccode\u003eSerializable\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Externalizable.html\" title\u003d\"interface in java.io\"\u003e\u003ccode\u003eExternalizable\u003c/code\u003e\u003c/a\u003e"
    ],
    "since": [
      "14"
    ]
  }
}