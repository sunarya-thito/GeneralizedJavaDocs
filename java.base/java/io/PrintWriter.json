{
  "packageName": "java.io",
  "simpleName": "PrintWriter",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.io.Writer",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "java.io.Writer",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 4,
      "name": "out",
      "comment": "The underlying character-output stream of this PrintWriter.",
      "tagMap": {
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "flush",
      "comment": "Flushes the stream.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintWriter.html#checkError()\"\u003e\u003ccode\u003echeckError()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Flushable.html#flush()\"\u003eflush\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Flushable.html\" title\u003d\"interface in java.io\"\u003eFlushable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html#flush()\"\u003eflush\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html\" title\u003d\"class in java.io\"\u003eWriter\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "close",
      "comment": "Closes the stream and releases any system resources associated with it. Closing a previously closed stream has no effect.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/PrintWriter.html#checkError()\"\u003e\u003ccode\u003echeckError()\u003c/code\u003e\u003c/a\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/AutoCloseable.html\" title\u003d\"interface in java.lang\"\u003eAutoCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Closeable.html\" title\u003d\"interface in java.io\"\u003eCloseable\u003c/a\u003e\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html#close()\"\u003eclose\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html\" title\u003d\"class in java.io\"\u003eWriter\u003c/a\u003e\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "checkError",
      "comment": "Flushes the stream if it\u0027s not closed and checks its error state.",
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the print stream has encountered an error, either on the underlying output stream or during a format conversion."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "setError",
      "comment": "Indicates that an error has occurred. This method will cause subsequent invocations of checkError() to return true until clearError() is invoked.",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 4,
      "name": "clearError",
      "comment": "Clears the error state of this stream. This method will cause subsequent invocations of checkError() to return false until another write operation fails and invokes setError().",
      "tagMap": {
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "write",
      "comment": "Writes a single character.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html#write(int)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html\" title\u003d\"class in java.io\"\u003eWriter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - int specifying a character to be written."
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "buf"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "off"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "write",
      "comment": "Writes A Portion of an array of characters.",
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html#write(char%5B%5D,int,int)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html\" title\u003d\"class in java.io\"\u003eWriter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ebuf\u003c/code\u003e - Array of characters",
          "\u003ccode\u003eoff\u003c/code\u003e - Offset from which to start writing characters",
          "\u003ccode\u003elen\u003c/code\u003e - Number of characters to write"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the values of the \n\u003ccode\u003eoff\u003c/code\u003e and \n\u003ccode\u003elen\u003c/code\u003e parameters cause the corresponding method of the underlying \n\u003ccode\u003eWriter\u003c/code\u003e to throw an \n\u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "buf"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "write",
      "comment": "Writes an array of characters. This method cannot be inherited from the Writer class because it must suppress I/O exceptions.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html#write(char%5B%5D)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html\" title\u003d\"class in java.io\"\u003eWriter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ebuf\u003c/code\u003e - Array of characters to be written"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "off"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "len"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "write",
      "comment": "Writes a portion of a string.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html#write(java.lang.String,int,int)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html\" title\u003d\"class in java.io\"\u003eWriter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - A String",
          "\u003ccode\u003eoff\u003c/code\u003e - Offset from which to start writing characters",
          "\u003ccode\u003elen\u003c/code\u003e - Number of characters to write"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If the values of the \n\u003ccode\u003eoff\u003c/code\u003e and \n\u003ccode\u003elen\u003c/code\u003e parameters cause the corresponding method of the underlying \n\u003ccode\u003eWriter\u003c/code\u003e to throw an \n\u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "write",
      "comment": "Writes a string. This method cannot be inherited from the Writer class because it must suppress I/O exceptions.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html#write(java.lang.String)\"\u003ewrite\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html\" title\u003d\"class in java.io\"\u003eWriter\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - String to be written"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "b"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints a boolean value. The string produced by String.valueOf(boolean) is translated into bytes according to the platform\u0027s default character encoding, and these bytes are written in exactly the manner of the write(int) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eb\u003c/code\u003e - The \n\u003ccode\u003eboolean\u003c/code\u003e to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints a character. The character is translated into one or more bytes according to the platform\u0027s default character encoding, and these bytes are written in exactly the manner of the write(int) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - The \n\u003ccode\u003echar\u003c/code\u003e to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "i"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints an integer. The string produced by String.valueOf(int) is translated into bytes according to the platform\u0027s default character encoding, and these bytes are written in exactly the manner of the write(int) method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html#toString(int)\"\u003e\u003ccode\u003eInteger.toString(int)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ei\u003c/code\u003e - The \n\u003ccode\u003eint\u003c/code\u003e to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints a long integer. The string produced by String.valueOf(long) is translated into bytes according to the platform\u0027s default character encoding, and these bytes are written in exactly the manner of the write(int) method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Long.html#toString(long)\"\u003e\u003ccode\u003eLong.toString(long)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ccode\u003elong\u003c/code\u003e to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "f"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints a floating-point number. The string produced by String.valueOf(float) is translated into bytes according to the platform\u0027s default character encoding, and these bytes are written in exactly the manner of the write(int) method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Float.html#toString(float)\"\u003e\u003ccode\u003eFloat.toString(float)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ef\u003c/code\u003e - The \n\u003ccode\u003efloat\u003c/code\u003e to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "d"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints a double-precision floating-point number. The string produced by String.valueOf(double) is translated into bytes according to the platform\u0027s default character encoding, and these bytes are written in exactly the manner of the write(int) method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Double.html#toString(double)\"\u003e\u003ccode\u003eDouble.toString(double)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003ed\u003c/code\u003e - The \n\u003ccode\u003edouble\u003c/code\u003e to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints an array of characters. The characters are converted into bytes according to the platform\u0027s default character encoding, and these bytes are written in exactly the manner of the write(int) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - The array of chars to be printed"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003es\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "s"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints a string. If the argument is null then the string \"null\" is printed. Otherwise, the string\u0027s characters are converted into bytes according to the platform\u0027s default character encoding, and these bytes are written in exactly the manner of the write(int) method.",
      "tagMap": {
        "param": [
          "\u003ccode\u003es\u003c/code\u003e - The \n\u003ccode\u003eString\u003c/code\u003e to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "obj"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "print",
      "comment": "Prints an object. The string produced by the String.valueOf(Object) method is translated into bytes according to the platform\u0027s default character encoding, and these bytes are written in exactly the manner of the write(int) method.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003e\u003ccode\u003eObject.toString()\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The \n\u003ccode\u003eObject\u003c/code\u003e to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "println",
      "comment": "Terminates the current line by writing the line separator string. The line separator is System.lineSeparator() and is not necessarily a single newline character (\u0027\\n\u0027).",
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "println",
      "comment": "Prints a boolean value and then terminates the line. This method behaves as though it invokes print(boolean) and then println().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003eboolean\u003c/code\u003e value to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "println",
      "comment": "Prints a character and then terminates the line. This method behaves as though it invokes print(char) and then println().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003echar\u003c/code\u003e value to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "println",
      "comment": "Prints an integer and then terminates the line. This method behaves as though it invokes print(int) and then println().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003eint\u003c/code\u003e value to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "long",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "println",
      "comment": "Prints a long integer and then terminates the line. This method behaves as though it invokes print(long) and then println().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003elong\u003c/code\u003e value to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "float",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "println",
      "comment": "Prints a floating-point number and then terminates the line. This method behaves as though it invokes print(float) and then println().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003efloat\u003c/code\u003e value to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "double",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "println",
      "comment": "Prints a double-precision floating-point number and then terminates the line. This method behaves as though it invokes print(double) and then println().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003edouble\u003c/code\u003e value to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class",
            "arrayDimensions": [
              {}
            ]
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "println",
      "comment": "Prints an array of characters and then terminates the line. This method behaves as though it invokes print(char[]) and then println().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the array of \n\u003ccode\u003echar\u003c/code\u003e values to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "println",
      "comment": "Prints a String and then terminates the line. This method behaves as though it invokes print(String) and then println().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - the \n\u003ccode\u003eString\u003c/code\u003e value to be printed"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "x"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "println",
      "comment": "Prints an Object and then terminates the line. This method calls at first String.valueOf(x) to get the printed object\u0027s string value, then behaves as though it invokes print(String) and then println().",
      "tagMap": {
        "param": [
          "\u003ccode\u003ex\u003c/code\u003e - The \n\u003ccode\u003eObject\u003c/code\u003e to be printed."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.PrintWriter",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "format"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "printf",
      "comment": "A convenience method to write a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer. An invocation of this method of the form out.printf(format, args) behaves in exactly the same way as the invocation \n     out.format(format, args)",
      "tagMap": {
        "param": [
          "\u003ccode\u003eformat\u003c/code\u003e - A format string as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eFormat string syntax\u003c/a\u003e.",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e. The behaviour on a \n\u003ccode\u003enull\u003c/code\u003e argument depends on the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003eformat\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "This writer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.PrintWriter",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "format"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "printf",
      "comment": "A convenience method to write a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer. An invocation of this method of the form out.printf(l, format, args) behaves in exactly the same way as the invocation \n     out.format(l, format, args)",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied.",
          "\u003ccode\u003eformat\u003c/code\u003e - A format string as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eFormat string syntax\u003c/a\u003e.",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e. The behaviour on a \n\u003ccode\u003enull\u003c/code\u003e argument depends on the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003eformat\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "This writer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.PrintWriter",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "format"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Writes a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer. The locale always used is the one returned by Locale.getDefault(), regardless of any previous invocations of other formatting methods on this object.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eformat\u003c/code\u003e - A format string as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eFormat string syntax\u003c/a\u003e.",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e. The behaviour on a \n\u003ccode\u003enull\u003c/code\u003e argument depends on the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the Formatter class specification.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003eformat\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "This writer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.PrintWriter",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.util.Locale",
            "type": "Class"
          },
          "field": {
            "name": "l"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "format"
          }
        },
        {
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "field": {
            "name": "args"
          },
          "varArgs": {}
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "format",
      "comment": "Writes a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer.",
      "tagMap": {
        "param": [
          "\u003ccode\u003el\u003c/code\u003e - The \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Locale.html\" title\u003d\"class in java.util\"\u003elocale\u003c/a\u003e to apply during formatting. If \n\u003ccode\u003el\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e then no localization is applied.",
          "\u003ccode\u003eformat\u003c/code\u003e - A format string as described in \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003eFormat string syntax\u003c/a\u003e.",
          "\u003ccode\u003eargs\u003c/code\u003e - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by \n\u003ccite\u003eThe Java Virtual Machine Specification\u003c/cite\u003e. The behaviour on a \n\u003ccode\u003enull\u003c/code\u003e argument depends on the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#syntax\"\u003econversion\u003c/a\u003e."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/IllegalFormatException.html\" title\u003d\"class in java.util\"\u003eIllegalFormatException\u003c/a\u003e\u003c/code\u003e - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Formatter.html#detail\"\u003eDetails\u003c/a\u003e section of the formatter class specification.",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003eformat\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "This writer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.PrintWriter",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "csq"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the specified character sequence to this writer. An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation \n     out.write(csq.toString())\n Depending on the specification of toString for the character sequence csq, the entire sequence may not be appended. For instance, invoking the toString method of a character buffer will return a subsequence whose content depends upon the buffer\u0027s position and limit.",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html#append(java.lang.CharSequence)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html\" title\u003d\"class in java.io\"\u003eWriter\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html#append(java.lang.CharSequence)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html\" title\u003d\"interface in java.lang\"\u003eAppendable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecsq\u003c/code\u003e - The character sequence to append. If \n\u003ccode\u003ecsq\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, then the four characters \n\u003ccode\u003e\"null\"\u003c/code\u003e are appended to this writer."
        ],
        "return": [
          "This writer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.PrintWriter",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "java.lang.CharSequence",
            "type": "Class"
          },
          "field": {
            "name": "csq"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "start"
          }
        },
        {
          "type": {
            "name": "int",
            "type": "Class"
          },
          "field": {
            "name": "end"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends a subsequence of the specified character sequence to this writer. An invocation of this method of the form out.append(csq, start, end) when csq is not null, behaves in exactly the same way as the invocation \n     out.write(csq.subSequence(start, end).toString())",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html#append(java.lang.CharSequence,int,int)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html\" title\u003d\"class in java.io\"\u003eWriter\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html#append(java.lang.CharSequence,int,int)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html\" title\u003d\"interface in java.lang\"\u003eAppendable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ecsq\u003c/code\u003e - The character sequence from which a subsequence will be appended. If \n\u003ccode\u003ecsq\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e, then characters will be appended as if \n\u003ccode\u003ecsq\u003c/code\u003e contained the four characters \n\u003ccode\u003e\"null\"\u003c/code\u003e.",
          "\u003ccode\u003estart\u003c/code\u003e - The index of the first character in the subsequence",
          "\u003ccode\u003eend\u003c/code\u003e - The index of the character following the last character in the subsequence"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IndexOutOfBoundsException.html\" title\u003d\"class in java.lang\"\u003eIndexOutOfBoundsException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003estart\u003c/code\u003e or \n\u003ccode\u003eend\u003c/code\u003e are negative, \n\u003ccode\u003estart\u003c/code\u003e is greater than \n\u003ccode\u003eend\u003c/code\u003e, or \n\u003ccode\u003eend\u003c/code\u003e is greater than \n\u003ccode\u003ecsq.length()\u003c/code\u003e"
        ],
        "return": [
          "This writer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.PrintWriter",
        "type": "Class"
      },
      "parameters": [
        {
          "type": {
            "name": "char",
            "type": "Class"
          },
          "field": {
            "name": "c"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "append",
      "comment": "Appends the specified character to this writer. An invocation of this method of the form out.append(c) behaves in exactly the same way as the invocation \n     out.write(c)",
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html#append(char)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/Writer.html\" title\u003d\"class in java.io\"\u003eWriter\u003c/a\u003e\u003c/code\u003e"
        ],
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html#append(char)\"\u003eappend\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Appendable.html\" title\u003d\"interface in java.lang\"\u003eAppendable\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003ec\u003c/code\u003e - The 16-bit character to append"
        ],
        "return": [
          "This writer"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.Writer",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new PrintWriter, without automatic line flushing.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - A character-output stream"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.Writer",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "autoFlush"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new PrintWriter.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - A character-output stream",
          "\u003ccode\u003eautoFlush\u003c/code\u003e - A boolean; if true, the \n\u003ccode\u003eprintln\u003c/code\u003e, \n\u003ccode\u003eprintf\u003c/code\u003e, or \n\u003ccode\u003eformat\u003c/code\u003e methods will flush the output buffer"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new PrintWriter, without automatic line flushing, from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will convert characters into bytes using the default character encoding.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/OutputStreamWriter.html#%3Cinit%3E(java.io.OutputStream)\"\u003e\u003ccode\u003eOutputStreamWriter(java.io.OutputStream)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - An output stream"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "autoFlush"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new PrintWriter from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will convert characters into bytes using the default character encoding.",
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/OutputStreamWriter.html#%3Cinit%3E(java.io.OutputStream)\"\u003e\u003ccode\u003eOutputStreamWriter(java.io.OutputStream)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - An output stream",
          "\u003ccode\u003eautoFlush\u003c/code\u003e - A boolean; if true, the \n\u003ccode\u003eprintln\u003c/code\u003e, \n\u003ccode\u003eprintf\u003c/code\u003e, or \n\u003ccode\u003eformat\u003c/code\u003e methods will flush the output buffer"
        ]
      }
    },
    {
      "parameters": [
        {
          "type": {
            "name": "java.io.OutputStream",
            "type": "Class"
          },
          "field": {
            "name": "out"
          }
        },
        {
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "field": {
            "name": "autoFlush"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new PrintWriter from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will convert characters into bytes using the specified charset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003eout\u003c/code\u003e - An output stream",
          "\u003ccode\u003eautoFlush\u003c/code\u003e - A boolean; if true, the \n\u003ccode\u003eprintln\u003c/code\u003e, \n\u003ccode\u003eprintf\u003c/code\u003e, or \n\u003ccode\u003eformat\u003c/code\u003e methods will flush the output buffer",
          "\u003ccode\u003echarset\u003c/code\u003e - A \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "fileName"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new PrintWriter, without automatic line flushing, with the specified file name. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will encode characters using the default charset for this instance of the Java virtual machine.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efileName\u003c/code\u003e - The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - If the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(fileName)\u003c/code\u003e\u003c/a\u003e denies write access to the file"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        },
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "fileName"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "csn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new PrintWriter, without automatic line flushing, with the specified file name and charset. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will encode characters using the provided charset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efileName\u003c/code\u003e - The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.",
          "\u003ccode\u003ecsn\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - If the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(fileName)\u003c/code\u003e\u003c/a\u003e denies write access to the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named charset is not supported"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "fileName"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new PrintWriter, without automatic line flushing, with the specified file name and charset. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will encode characters using the provided charset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efileName\u003c/code\u003e - The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.",
          "\u003ccode\u003echarset\u003c/code\u003e - A \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(fileName)\u003c/code\u003e\u003c/a\u003e denies write access to the file"
        ],
        "since": [
          "10"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new PrintWriter, without automatic line flushing, with the specified file. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will encode characters using the default charset for this instance of the Java virtual machine.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(file.getPath())\u003c/code\u003e\u003c/a\u003e denies write access to the file"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.FileNotFoundException",
          "type": "Class"
        },
        {
          "name": "java.io.UnsupportedEncodingException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        },
        {
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "field": {
            "name": "csn"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new PrintWriter, without automatic line flushing, with the specified file and charset. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will encode characters using the provided charset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.",
          "\u003ccode\u003ecsn\u003c/code\u003e - The name of a supported \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/FileNotFoundException.html\" title\u003d\"class in java.io\"\u003eFileNotFoundException\u003c/a\u003e\u003c/code\u003e - If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(file.getPath())\u003c/code\u003e\u003c/a\u003e denies write access to the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/UnsupportedEncodingException.html\" title\u003d\"class in java.io\"\u003eUnsupportedEncodingException\u003c/a\u003e\u003c/code\u003e - If the named charset is not supported"
        ],
        "since": [
          "1.5"
        ]
      }
    },
    {
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "field": {
            "name": "file"
          }
        },
        {
          "type": {
            "name": "java.nio.charset.Charset",
            "type": "Class"
          },
          "field": {
            "name": "charset"
          }
        }
      ],
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new PrintWriter, without automatic line flushing, with the specified file and charset. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will encode characters using the provided charset.",
      "tagMap": {
        "param": [
          "\u003ccode\u003efile\u003c/code\u003e - The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered.",
          "\u003ccode\u003echarset\u003c/code\u003e - A \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/charset/Charset.html\" title\u003d\"class in java.nio.charset\"\u003echarset\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - if an I/O error occurs while opening or creating the file",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager is present and \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.io.FileDescriptor)\"\u003e\u003ccode\u003echeckWrite(file.getPath())\u003c/code\u003e\u003c/a\u003e denies write access to the file"
        ],
        "since": [
          "10"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.io.PrintWriter",
  "comment": "Prints formatted representations of objects to a text-output stream. This class implements all of the \n\u003ccode\u003eprint\u003c/code\u003e methods found in \n\u003ca href\u003d\"PrintStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003ePrintStream\u003c/code\u003e\u003c/a\u003e. It does not contain methods for writing raw bytes, for which a program should use unencoded byte streams. \n\u003cp\u003e Unlike the \u003ca href\u003d\"PrintStream.html\" title\u003d\"class in java.io\"\u003e\u003ccode\u003ePrintStream\u003c/code\u003e\u003c/a\u003e class, if automatic flushing is enabled it will be done only when one of the \u003ccode\u003eprintln\u003c/code\u003e, \u003ccode\u003eprintf\u003c/code\u003e, or \u003ccode\u003eformat\u003c/code\u003e methods is invoked, rather than whenever a newline character happens to be output. These methods use the platform\u0027s own notion of line separator rather than the newline character. \u003c/p\u003e\n\u003cp\u003e Methods in this class never throw I/O exceptions, although some of its constructors may. The client may inquire as to whether any errors have occurred by invoking \u003ca href\u003d\"#checkError()\"\u003e\u003ccode\u003echeckError()\u003c/code\u003e\u003c/a\u003e. \u003c/p\u003e\n\u003cp\u003e This class always replaces malformed and unmappable character sequences with the charset\u0027s default replacement string. The \u003ca href\u003d\"../nio/charset/CharsetEncoder.html\" title\u003d\"class in java.nio.charset\"\u003eCharsetEncoder\u003c/a\u003e class should be used when more control over the encoding process is required.\u003c/p\u003e",
  "tagMap": {
    "since": [
      "1.1"
    ]
  }
}