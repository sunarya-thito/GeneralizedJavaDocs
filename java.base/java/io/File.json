{
  "packageName": "java.io",
  "simpleName": "File",
  "moduleName": "java.base",
  "type": "CLASS",
  "superClass": {
    "name": "java.lang.Object",
    "type": "Class"
  },
  "members": [
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "separatorChar",
      "comment": "The system-dependent default name-separator character. This field is initialized to contain the first character of the value of the system property file.separator. On UNIX systems the value of this field is \u0027/\u0027; on Microsoft Windows systems it is \u0027\\\\\u0027.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "separator",
      "comment": "The system-dependent default name-separator character, represented as a string for convenience. This string contains a single character, namely separatorChar.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "type": {
        "name": "char",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "pathSeparatorChar",
      "comment": "The system-dependent path-separator character. This field is initialized to contain the first character of the value of the system property path.separator. This character is used to separate filenames in a sequence of files given as a path list. On UNIX systems, this character is \u0027:\u0027; on Microsoft Windows systems it is \u0027;\u0027.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#getProperty(java.lang.String)\"\u003e\u003ccode\u003eSystem.getProperty(java.lang.String)\u003c/code\u003e\u003c/a\u003e"
        ]
      }
    },
    {
      "type": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "memberType": "JavaField",
      "modifiers": 25,
      "name": "pathSeparator",
      "comment": "The system-dependent path-separator character, represented as a string for convenience. This string contains a single character, namely pathSeparatorChar.",
      "annotations": [],
      "tagMap": {}
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getName",
      "comment": "Returns the name of the file or directory denoted by this abstract pathname. This is just the last name in the pathname\u0027s name sequence. If the pathname\u0027s name sequence is empty, then the empty string is returned.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The name of the file or directory denoted by this abstract pathname, or the empty string if this pathname\u0027s name sequence is empty"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParent",
      "comment": "Returns the pathname string of this abstract pathname\u0027s parent, or null if this pathname does not name a parent directory. The parent of an abstract pathname consists of the pathname\u0027s prefix, if any, and each name in the pathname\u0027s name sequence except for the last. If the name sequence is empty then the pathname does not name a parent directory.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The pathname string of the parent directory named by this abstract pathname, or \n\u003ccode\u003enull\u003c/code\u003e if this pathname does not name a parent"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getParentFile",
      "comment": "Returns the abstract pathname of this abstract pathname\u0027s parent, or null if this pathname does not name a parent directory. The parent of an abstract pathname consists of the pathname\u0027s prefix, if any, and each name in the pathname\u0027s name sequence except for the last. If the name sequence is empty then the pathname does not name a parent directory.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The abstract pathname of the parent directory named by this abstract pathname, or \n\u003ccode\u003enull\u003c/code\u003e if this pathname does not name a parent"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getPath",
      "comment": "Converts this abstract pathname into a pathname string. The resulting string uses the default name-separator character to separate the names in the name sequence.",
      "annotations": [],
      "tagMap": {
        "return": [
          "The string form of this abstract pathname"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isAbsolute",
      "comment": "Tests whether this abstract pathname is absolute. The definition of absolute pathname is system dependent. On UNIX systems, a pathname is absolute if its prefix is \"/\". On Microsoft Windows systems, a pathname is absolute if its prefix is a drive specifier followed by \"\\\\\", or if its prefix is \"\\\\\\\\\".",
      "annotations": [],
      "tagMap": {
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if this abstract pathname is absolute, \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAbsolutePath",
      "comment": "Returns the absolute pathname string of this abstract pathname. If this abstract pathname is already absolute, then the pathname string is simply returned as if by the getPath() method. If this abstract pathname is the empty abstract pathname then the pathname string of the current user directory, which is named by the system property user.dir, is returned. Otherwise this pathname is resolved in a system-dependent way. On UNIX systems, a relative pathname is made absolute by resolving it against the current user directory. On Microsoft Windows systems, a relative pathname is made absolute by resolving it against the current directory of the drive named by the pathname, if any; if not, it is resolved against the current user directory.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html#isAbsolute()\"\u003e\u003ccode\u003eisAbsolute()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a required system property value cannot be accessed."
        ],
        "return": [
          "The absolute pathname string denoting the same file or directory as this abstract pathname"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getAbsoluteFile",
      "comment": "Returns the absolute form of this abstract pathname. Equivalent to new File(this.getAbsolutePath()).",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a required system property value cannot be accessed."
        ],
        "return": [
          "The absolute abstract pathname denoting the same file or directory as this abstract pathname"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCanonicalPath",
      "comment": "Returns the canonical pathname string of this abstract pathname. A canonical pathname is both absolute and unique. The precise definition of canonical form is system-dependent. This method first converts this pathname to absolute form if necessary, as if by invoking the getAbsolutePath() method, and then maps it to its unique form in a system-dependent way. This typically involves removing redundant names such as \".\" and \"..\" from the pathname, resolving symbolic links (on UNIX platforms), and converting drive letters to a standard case (on Microsoft Windows platforms). Every pathname that denotes an existing file or directory has a unique canonical form. Every pathname that denotes a nonexistent file or directory also has a unique canonical form. The canonical form of the pathname of a nonexistent file or directory may be different from the canonical form of the same pathname after the file or directory is created. Similarly, the canonical form of the pathname of an existing file or directory may be different from the canonical form of the same pathname after the file or directory is deleted.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html#toRealPath(java.nio.file.LinkOption...)\"\u003e\u003ccode\u003ePath.toRealPath(java.nio.file.LinkOption...)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs, which is possible because the construction of the canonical pathname may require filesystem queries",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a required system property value cannot be accessed, or if a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.io.FileDescriptor)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.io.FileDescriptor)\u003c/code\u003e\u003c/a\u003e method denies read access to the file"
        ],
        "return": [
          "The canonical pathname string denoting the same file or directory as this abstract pathname"
        ],
        "since": [
          "1.1"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getCanonicalFile",
      "comment": "Returns the canonical form of this abstract pathname. Equivalent to new File(this.getCanonicalPath()).",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html#toRealPath(java.nio.file.LinkOption...)\"\u003e\u003ccode\u003ePath.toRealPath(java.nio.file.LinkOption...)\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurs, which is possible because the construction of the canonical pathname may require filesystem queries",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a required system property value cannot be accessed, or if a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.io.FileDescriptor)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.io.FileDescriptor)\u003c/code\u003e\u003c/a\u003e method denies read access to the file"
        ],
        "return": [
          "The canonical pathname string denoting the same file or directory as this abstract pathname"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URL",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.net.MalformedURLException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toURL",
      "comment": "Converts this abstract pathname into a file: URL. The exact form of the URL is system-dependent. If it can be determined that the file denoted by this abstract pathname is a directory, then the resulting URL will end with a slash.",
      "annotations": [
        {
          "type": {
            "name": "Deprecated",
            "type": "Class"
          }
        }
      ],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html#toURI()\"\u003e\u003ccode\u003etoURI()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URI.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURI\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URI.html#toURL()\"\u003e\u003ccode\u003eURI.toURL()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URL.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURL\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/MalformedURLException.html\" title\u003d\"class in java.net\"\u003eMalformedURLException\u003c/a\u003e\u003c/code\u003e - If the path cannot be parsed as a URL"
        ],
        "return": [
          "A URL object representing the equivalent file URL"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.net.URI",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toURI",
      "comment": "Constructs a file: URI that represents this abstract pathname. The exact form of the URI is system-dependent. If it can be determined that the file denoted by this abstract pathname is a directory, then the resulting URI will end with a slash. For a given abstract pathname f, it is guaranteed that new File( f.toURI()).equals( f.getAbsoluteFile()) so long as the original abstract pathname, the URI, and the new abstract pathname are all created in (possibly different invocations of) the same Java virtual machine. Due to the system-dependent nature of abstract pathnames, however, this relationship typically does not hold when a file: URI that is created in a virtual machine on one operating system is converted into an abstract pathname in a virtual machine on a different operating system. Note that when this abstract pathname represents a UNC pathname then all components of the UNC (including the server name component) are encoded in the URI path. The authority component is undefined, meaning that it is represented as null. The Path class defines the toUri method to encode the server name in the authority component of the resulting URI. The toPath method may be used to obtain a Path representing this abstract pathname.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html#%3Cinit%3E(java.net.URI)\"\u003e\u003ccode\u003eFile(java.net.URI)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URI.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURI\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URI.html#toURL()\"\u003e\u003ccode\u003eURI.toURL()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a required system property value cannot be accessed."
        ],
        "return": [
          "An absolute, hierarchical URI with a scheme equal to \n\u003ccode\u003e\"file\"\u003c/code\u003e, a path representing this abstract pathname, and undefined authority, query, and fragment components"
        ],
        "since": [
          "1.4"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canRead",
      "comment": "Tests whether the application can read the file denoted by this abstract pathname. On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to read files that are marked as unreadable. Consequently this method may return true even though the file does not have read permissions.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies read access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the file specified by this abstract pathname exists \n\u003cem\u003eand\u003c/em\u003e can be read by the application; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canWrite",
      "comment": "Tests whether the application can modify the file denoted by this abstract pathname. On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to modify files that are marked read-only. Consequently this method may return true even though the file is marked read-only.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the file system actually contains a file denoted by this abstract pathname \n\u003cem\u003eand\u003c/em\u003e the application is allowed to write to the file; \n\u003ccode\u003efalse\u003c/code\u003e otherwise."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "exists",
      "comment": "Tests whether the file or directory denoted by this abstract pathname exists.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies read access to the file or directory"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the file or directory denoted by this abstract pathname exists; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isDirectory",
      "comment": "Tests whether the file denoted by this abstract pathname is a directory. Where it is required to distinguish an I/O exception from the case that the file is not a directory, or where several attributes of the same file are required at the same time, then the Files.readAttributes method may be used.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies read access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the file denoted by this abstract pathname exists \n\u003cem\u003eand\u003c/em\u003e is a directory; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isFile",
      "comment": "Tests whether the file denoted by this abstract pathname is a normal file. A file is normal if it is not a directory and, in addition, satisfies other system-dependent criteria. Any non-directory file created by a Java application is guaranteed to be a normal file. Where it is required to distinguish an I/O exception from the case that the file is not a normal file, or where several attributes of the same file are required at the same time, then the Files.readAttributes method may be used.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies read access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the file denoted by this abstract pathname exists \n\u003cem\u003eand\u003c/em\u003e is a normal file; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "isHidden",
      "comment": "Tests whether the file named by this abstract pathname is a hidden file. The exact definition of hidden is system-dependent. On UNIX systems, a file is considered to be hidden if its name begins with a period character (\u0027.\u0027). On Microsoft Windows systems, a file is considered to be hidden if it has been marked as such in the filesystem.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies read access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the file denoted by this abstract pathname is hidden according to the conventions of the underlying platform"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "lastModified",
      "comment": "Returns the time that the file denoted by this abstract pathname was last modified.",
      "annotations": [],
      "tagMap": {
        "apiNote": [
          "While the unit of time of the return value is milliseconds, the granularity of the value depends on the underlying file system and may be larger. For example, some file systems use time stamps in units of seconds. \n\u003cp\u003e Where it is required to distinguish an I/O exception from the case where \u003ccode\u003e0L\u003c/code\u003e is returned, or where several attributes of the same file are required at the same time, or where the time of last access or the creation time are required, then the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption...)\"\u003e\u003ccode\u003eFiles.readAttributes\u003c/code\u003e\u003c/a\u003e method may be used. If however only the time of last modification is required, then the \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption...)\"\u003e\u003ccode\u003eFiles.getLastModifiedTime\u003c/code\u003e\u003c/a\u003e method may be used instead.\u003c/p\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies read access to the file"
        ],
        "return": [
          "A \n\u003ccode\u003elong\u003c/code\u003e value representing the time the file was last modified, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970), or \n\u003ccode\u003e0L\u003c/code\u003e if the file does not exist or if an I/O error occurs. The value may be negative indicating the number of milliseconds before the epoch"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "length",
      "comment": "Returns the length of the file denoted by this abstract pathname. The return value is unspecified if this pathname denotes a directory. Where it is required to distinguish an I/O exception from the case that 0L is returned, or where several attributes of the same file are required at the same time, then the Files.readAttributes method may be used.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies read access to the file"
        ],
        "return": [
          "The length, in bytes, of the file denoted by this abstract pathname, or \n\u003ccode\u003e0L\u003c/code\u003e if the file does not exist. Some operating systems may return \n\u003ccode\u003e0L\u003c/code\u003e for pathnames denoting system-dependent entities such as devices or pipes."
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "createNewFile",
      "comment": "Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist. The check for the existence of the file and the creation of the file if it does not exist are a single operation that is atomic with respect to all other filesystem activities that might affect the file. Note: this method should not be used for file-locking, as the resulting protocol cannot be made to work reliably. The FileLock facility should be used instead.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If an I/O error occurred",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if the named file does not exist and was successfully created; \n\u003ccode\u003efalse\u003c/code\u003e if the named file already exists"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "delete",
      "comment": "Deletes the file or directory denoted by this abstract pathname. If this pathname denotes a directory, then the directory must be empty in order to be deleted. Note that the Files class defines the delete method to throw an IOException when a file cannot be deleted. This is useful for error reporting and to diagnose why a file cannot be deleted.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkDelete(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies delete access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the file or directory is successfully deleted; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "void",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "deleteOnExit",
      "comment": "Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates. Files (or directories) are deleted in the reverse order that they are registered. Invoking this method to delete a file or directory that is already registered for deletion has no effect. Deletion will be attempted only for normal termination of the virtual machine, as defined by the Java Language Specification. Once deletion has been requested, it is not possible to cancel the request. This method should therefore be used with care. Note: this method should not be used for file-locking, as the resulting protocol cannot be made to work reliably. The FileLock facility should be used instead.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html#delete()\"\u003e\u003ccode\u003edelete()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkDelete(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkDelete(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies delete access to the file"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "list",
      "comment": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname. If this abstract pathname does not denote a directory, then this method returns null. Otherwise an array of strings is returned, one for each file or directory in the directory. Names denoting the directory itself and the directory\u0027s parent directory are not included in the result. Each string is a file name rather than a complete path. There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order. Note that the Files class defines the newDirectoryStream method to open a directory and iterate over the names of the files in the directory. This may use less resources when working with very large directories, and may be more responsive when working with remote directories.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e method denies read access to the directory"
        ],
        "return": [
          "An array of strings naming the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns \n\u003ccode\u003enull\u003c/code\u003e if this abstract pathname does not denote a directory, or if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.FilenameFilter",
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "list",
      "comment": "Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the list() method, except that the strings in the returned array must satisfy the filter. If the given filter is null then all names are accepted. Otherwise, a name satisfies the filter if and only if the value true results when the FilenameFilter.accept(File, String) method of the filter is invoked on this abstract pathname and the name of a file or directory in the directory that it denotes.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path,java.lang.String)\"\u003e\u003ccode\u003eFiles.newDirectoryStream(Path,String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efilter\u003c/code\u003e - A filename filter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e method denies read access to the directory"
        ],
        "return": [
          "An array of strings naming the files and directories in the directory denoted by this abstract pathname that were accepted by the given \n\u003ccode\u003efilter\u003c/code\u003e. The array will be empty if the directory is empty or if no names were accepted by the filter. Returns \n\u003ccode\u003enull\u003c/code\u003e if this abstract pathname does not denote a directory, or if an I/O error occurs."
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "listFiles",
      "comment": "Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname. If this abstract pathname does not denote a directory, then this method returns null. Otherwise an array of File objects is returned, one for each file or directory in the directory. Pathnames denoting the directory itself and the directory\u0027s parent directory are not included in the result. Each resulting abstract pathname is constructed from this abstract pathname using the File(File, String) constructor. Therefore if this pathname is absolute then each resulting pathname is absolute; if this pathname is relative then each resulting pathname will be relative to the same directory. There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order. Note that the Files class defines the newDirectoryStream method to open a directory and iterate over the names of the files in the directory. This may use less resources when working with very large directories.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e method denies read access to the directory"
        ],
        "return": [
          "An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns \n\u003ccode\u003enull\u003c/code\u003e if this abstract pathname does not denote a directory, or if an I/O error occurs."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.FilenameFilter",
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "listFiles",
      "comment": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the listFiles() method, except that the pathnames in the returned array must satisfy the filter. If the given filter is null then all pathnames are accepted. Otherwise, a pathname satisfies the filter if and only if the value true results when the FilenameFilter.accept(File, String) method of the filter is invoked on this abstract pathname and the name of a file or directory in the directory that it denotes.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path,java.lang.String)\"\u003e\u003ccode\u003eFiles.newDirectoryStream(Path,String)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efilter\u003c/code\u003e - A filename filter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e method denies read access to the directory"
        ],
        "return": [
          "An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns \n\u003ccode\u003enull\u003c/code\u003e if this abstract pathname does not denote a directory, or if an I/O error occurs."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.FileFilter",
            "type": "Class"
          },
          "name": "filter",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "listFiles",
      "comment": "Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter. The behavior of this method is the same as that of the listFiles() method, except that the pathnames in the returned array must satisfy the filter. If the given filter is null then all pathnames are accepted. Otherwise, a pathname satisfies the filter if and only if the value true results when the FileFilter.accept(File) method of the filter is invoked on the pathname.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter)\"\u003e\u003ccode\u003eFiles.newDirectoryStream(Path,java.nio.file.DirectoryStream.Filter)\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003efilter\u003c/code\u003e - A file filter"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e method denies read access to the directory"
        ],
        "return": [
          "An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns \n\u003ccode\u003enull\u003c/code\u003e if this abstract pathname does not denote a directory, or if an I/O error occurs."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mkdir",
      "comment": "Creates the directory named by this abstract pathname.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method does not permit the named directory to be created"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the directory was created; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "mkdirs",
      "comment": "Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories. Note that if this operation fails it may have succeeded in creating some of the necessary parent directories.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(java.lang.String)\u003c/code\u003e\u003c/a\u003e method does not permit verification of the existence of the named directory and all necessary parent directories; or if the \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method does not permit the named directory and all necessary parent directories to be created"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the directory was created, along with all necessary parent directories; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "dest",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "renameTo",
      "comment": "Renames the file denoted by this abstract pathname. Many aspects of the behavior of this method are inherently platform-dependent: The rename operation might not be able to move a file from one filesystem to another, it might not be atomic, and it might not succeed if a file with the destination abstract pathname already exists. The return value should always be checked to make sure that the rename operation was successful. Note that the Files class defines the move method to move or rename a file in a platform independent manner.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003edest\u003c/code\u003e - The new abstract pathname for the named file"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to either the old or new pathnames",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If parameter \n\u003ccode\u003edest\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the renaming succeeded; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "long",
            "type": "Class"
          },
          "name": "time",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setLastModified",
      "comment": "Sets the last-modified time of the file or directory named by this abstract pathname. All platforms support file-modification times to the nearest second, but some provide more precision. The argument will be truncated to fit the supported precision. If the operation succeeds and no intervening operations on the file take place, then the next invocation of the lastModified() method will return the (possibly truncated) time argument that was passed to this method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003etime\u003c/code\u003e - The new last-modified time, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970)"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the argument is negative",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to the named file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the operation succeeded; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setReadOnly",
      "comment": "Marks the file or directory named by this abstract pathname so that only read operations are allowed. After invoking this method the file or directory will not change until it is either deleted or marked to allow write access. On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to modify files that are marked read-only. Whether or not a read-only file or directory may be deleted depends upon the underlying system.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to the named file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the operation succeeded; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "writable",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "ownerOnly",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setWritable",
      "comment": "Sets the owner\u0027s or everybody\u0027s write permission for this abstract pathname. On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to modify files that disallow write operations. The Files class defines methods that operate on file attributes including file permissions. This may be used when finer manipulation of file permissions is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewritable\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e, sets the access permission to allow write operations; if \n\u003ccode\u003efalse\u003c/code\u003e to disallow write operations",
          "\u003ccode\u003eownerOnly\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e, the write permission applies only to the owner\u0027s write permission; otherwise, it applies to everybody. If the underlying file system can not distinguish the owner\u0027s write permission from that of others, then the permission will apply to everybody, regardless of this value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to the named file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "writable",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setWritable",
      "comment": "A convenience method to set the owner\u0027s write permission for this abstract pathname. On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to modify files that disallow write operations. An invocation of this method of the form file.setWritable(arg) behaves in exactly the same way as the invocation \n     file.setWritable(arg, true)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ewritable\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e, sets the access permission to allow write operations; if \n\u003ccode\u003efalse\u003c/code\u003e to disallow write operations"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "readable",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "ownerOnly",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setReadable",
      "comment": "Sets the owner\u0027s or everybody\u0027s read permission for this abstract pathname. On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to read files that are marked as unreadable. The Files class defines methods that operate on file attributes including file permissions. This may be used when finer manipulation of file permissions is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereadable\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e, sets the access permission to allow read operations; if \n\u003ccode\u003efalse\u003c/code\u003e to disallow read operations",
          "\u003ccode\u003eownerOnly\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e, the read permission applies only to the owner\u0027s read permission; otherwise, it applies to everybody. If the underlying file system can not distinguish the owner\u0027s read permission from that of others, then the permission will apply to everybody, regardless of this value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If \n\u003ccode\u003ereadable\u003c/code\u003e is \n\u003ccode\u003efalse\u003c/code\u003e and the underlying file system does not implement a read permission, then the operation will fail."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "readable",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setReadable",
      "comment": "A convenience method to set the owner\u0027s read permission for this abstract pathname. On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to read files that are marked as unreadable. An invocation of this method of the form file.setReadable(arg) behaves in exactly the same way as the invocation \n     file.setReadable(arg, true)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003ereadable\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e, sets the access permission to allow read operations; if \n\u003ccode\u003efalse\u003c/code\u003e to disallow read operations"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If \n\u003ccode\u003ereadable\u003c/code\u003e is \n\u003ccode\u003efalse\u003c/code\u003e and the underlying file system does not implement a read permission, then the operation will fail."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "executable",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "ownerOnly",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setExecutable",
      "comment": "Sets the owner\u0027s or everybody\u0027s execute permission for this abstract pathname. On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to execute files that are not marked executable. The Files class defines methods that operate on file attributes including file permissions. This may be used when finer manipulation of file permissions is required.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexecutable\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e, sets the access permission to allow execute operations; if \n\u003ccode\u003efalse\u003c/code\u003e to disallow execute operations",
          "\u003ccode\u003eownerOnly\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e, the execute permission applies only to the owner\u0027s execute permission; otherwise, it applies to everybody. If the underlying file system can not distinguish the owner\u0027s execute permission from that of others, then the permission will apply to everybody, regardless of this value."
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If \n\u003ccode\u003eexecutable\u003c/code\u003e is \n\u003ccode\u003efalse\u003c/code\u003e and the underlying file system does not implement an execute permission, then the operation will fail."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "boolean",
            "type": "Class"
          },
          "name": "executable",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "setExecutable",
      "comment": "A convenience method to set the owner\u0027s execute permission for this abstract pathname. On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to execute files that are not marked executable. An invocation of this method of the form file.setExcutable(arg) behaves in exactly the same way as the invocation \n     file.setExecutable(arg, true)",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eexecutable\u003c/code\u003e - If \n\u003ccode\u003etrue\u003c/code\u003e, sets the access permission to allow execute operations; if \n\u003ccode\u003efalse\u003c/code\u003e to disallow execute operations"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies write access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the operation succeeded. The operation will fail if the user does not have permission to change the access permissions of this abstract pathname. If \n\u003ccode\u003eexecutable\u003c/code\u003e is \n\u003ccode\u003efalse\u003c/code\u003e and the underlying file system does not implement an execute permission, then the operation will fail."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "canExecute",
      "comment": "Tests whether the application can execute the file denoted by this abstract pathname. On some platforms it may be possible to start the Java virtual machine with special privileges that allow it to execute files that are not marked executable. Consequently this method may return true even though the file does not have execute permissions.",
      "annotations": [],
      "tagMap": {
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkExec(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkExec(java.lang.String)\u003c/code\u003e\u003c/a\u003e method denies execute access to the file"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the abstract pathname exists \n\u003cem\u003eand\u003c/em\u003e the application is allowed to execute the file"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class",
        "arrayDimensions": 1
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "listRoots",
      "comment": "List the available filesystem roots. A particular Java platform may support zero or more hierarchically-organized file systems. Each file system has a root directory from which all other files in that file system can be reached. Windows platforms, for example, have a root directory for each active drive; UNIX platforms have a single root directory, namely \"/\". The set of available filesystem roots is affected by various system-level operations such as the insertion or ejection of removable media and the disconnecting or unmounting of physical or virtual disk drives. This method returns an array of File objects that denote the root directories of the available filesystem roots. It is guaranteed that the canonical pathname of any file physically present on the local machine will begin with one of the roots returned by this method. The canonical pathname of a file that resides on some other machine and is accessed via a remote-filesystem protocol such as SMB or NFS may or may not begin with one of the roots returned by this method. If the pathname of a remote file is syntactically indistinguishable from the pathname of a local file then it will begin with one of the roots returned by this method. Thus, for example, File objects denoting the root directories of the mapped network drives of a Windows platform will be returned by this method, while File objects containing UNC pathnames will not be returned by this method. Unlike most methods in this class, this method does not throw security exceptions. If a security manager exists and its SecurityManager.checkRead(String) method denies read access to a particular root directory, then that directory will not appear in the result.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileStore.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003eFileStore\u003c/code\u003e\u003c/a\u003e"
        ],
        "return": [
          "An array of \n\u003ccode\u003eFile\u003c/code\u003e objects denoting the available filesystem roots, or \n\u003ccode\u003enull\u003c/code\u003e if the set of roots could not be determined. The array will be empty if there are no filesystem roots."
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getTotalSpace",
      "comment": "Returns the size of the partition named by this abstract pathname. If the total number of bytes in the partition is greater than Long.MAX_VALUE, then Long.MAX_VALUE will be returned.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileStore.html#getTotalSpace()\"\u003e\u003ccode\u003eFileStore.getTotalSpace()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager has been installed and it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"getFileSystemAttributes\")\u003c/code\u003e or its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e method denies read access to the file named by this abstract pathname"
        ],
        "return": [
          "The size, in bytes, of the partition or \n\u003ccode\u003e0L\u003c/code\u003e if this abstract pathname does not name a partition or if the size cannot be obtained"
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getFreeSpace",
      "comment": "Returns the number of unallocated bytes in the partition named by this abstract path name. If the number of unallocated bytes in the partition is greater than Long.MAX_VALUE, then Long.MAX_VALUE will be returned. The returned number of unallocated bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes. The number of unallocated bytes is most likely to be accurate immediately after this call. It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this virtual machine. This method makes no guarantee that write operations to this file system will succeed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileStore.html#getUnallocatedSpace()\"\u003e\u003ccode\u003eFileStore.getUnallocatedSpace()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager has been installed and it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"getFileSystemAttributes\")\u003c/code\u003e or its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e method denies read access to the file named by this abstract pathname"
        ],
        "return": [
          "The number of unallocated bytes on the partition or \n\u003ccode\u003e0L\u003c/code\u003e if the abstract pathname does not name a partition or if this number cannot be obtained. This value will be less than or equal to the total file system size returned by \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html#getTotalSpace()\"\u003e\u003ccode\u003egetTotalSpace()\u003c/code\u003e\u003c/a\u003e."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "long",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "getUsableSpace",
      "comment": "Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname. If the number of available bytes in the partition is greater than Long.MAX_VALUE, then Long.MAX_VALUE will be returned. When possible, this method checks for write permissions and other operating system restrictions and will therefore usually provide a more accurate estimate of how much new data can actually be written than getFreeSpace(). The returned number of available bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes. The number of available bytes is most likely to be accurate immediately after this call. It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this virtual machine. This method makes no guarantee that write operations to this file system will succeed.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileStore.html#getUsableSpace()\"\u003e\u003ccode\u003eFileStore.getUsableSpace()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager has been installed and it denies \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/RuntimePermission.html\" title\u003d\"class in java.lang\"\u003e\u003ccode\u003eRuntimePermission\u003c/code\u003e\u003c/a\u003e\n\u003ccode\u003e(\"getFileSystemAttributes\")\u003c/code\u003e or its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkRead(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkRead(String)\u003c/code\u003e\u003c/a\u003e method denies read access to the file named by this abstract pathname"
        ],
        "return": [
          "The number of available bytes on the partition or \n\u003ccode\u003e0L\u003c/code\u003e if the abstract pathname does not name a partition or if this number cannot be obtained. On systems where this information is not available, this method will be equivalent to a call to \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html#getFreeSpace()\"\u003e\u003ccode\u003egetFreeSpace()\u003c/code\u003e\u003c/a\u003e."
        ],
        "since": [
          "1.6"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "prefix",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "suffix",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "directory",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createTempFile",
      "comment": "Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name. If this method returns successfully then it is guaranteed that: The file denoted by the returned abstract pathname did not exist before this method was invoked, and Neither this method nor any of its variants will return the same abstract pathname again in the current invocation of the virtual machine. This method provides only part of a temporary-file facility. To arrange for a file created by this method to be deleted automatically, use the deleteOnExit() method. The prefix argument must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as \"hjb\" or \"mail\". The suffix argument may be null, in which case the suffix \".tmp\" will be used. To create the new file, the prefix and the suffix may first be adjusted to fit the limitations of the underlying platform. If the prefix is too long then it will be truncated, but its first three characters will always be preserved. If the suffix is too long then it too will be truncated, but if it begins with a period character (\u0027.\u0027) then the period and the first three characters following it will always be preserved. Once these adjustments have been made the name of the new file will be generated by concatenating the prefix, five or more internally-generated characters, and the suffix. If the directory argument is null then the system-dependent default temporary-file directory will be used. The default temporary-file directory is specified by the system property java.io.tmpdir. On UNIX systems the default value of this property is typically \"/tmp\" or \"/var/tmp\"; on Microsoft Windows systems it is typically \"C:\\\\WINNT\\\\TEMP\". A different value may be given to this system property when the Java virtual machine is invoked, but programmatic changes to this property are not guaranteed to have any effect upon the temporary directory used by this method.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - The prefix string to be used in generating the file\u0027s name; must be at least three characters long",
          "\u003ccode\u003esuffix\u003c/code\u003e - The suffix string to be used in generating the file\u0027s name; may be \n\u003ccode\u003enull\u003c/code\u003e, in which case the suffix \n\u003ccode\u003e\".tmp\"\u003c/code\u003e will be used",
          "\u003ccode\u003edirectory\u003c/code\u003e - The directory in which the file is to be created, or \n\u003ccode\u003enull\u003c/code\u003e if the default temporary-file directory is to be used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003eprefix\u003c/code\u003e argument contains fewer than three characters",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If a file could not be created",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method does not allow a file to be created"
        ],
        "return": [
          "An abstract pathname denoting a newly-created empty file"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.io.File",
        "type": "Class"
      },
      "throwsClasses": [
        {
          "name": "java.io.IOException",
          "type": "Class"
        }
      ],
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "prefix",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "suffix",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 9,
      "name": "createTempFile",
      "comment": "Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name. Invoking this method is equivalent to invoking createTempFile(prefix, suffix, null). The Files.createTempFile method provides an alternative method to create an empty file in the temporary-file directory. Files created by that method may have more restrictive access permissions to files created by this method and so may be more suited to security-sensitive applications.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Files.html#createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute...)\"\u003e\u003ccode\u003eFiles.createTempDirectory(String,FileAttribute[])\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003eprefix\u003c/code\u003e - The prefix string to be used in generating the file\u0027s name; must be at least three characters long",
          "\u003ccode\u003esuffix\u003c/code\u003e - The suffix string to be used in generating the file\u0027s name; may be \n\u003ccode\u003enull\u003c/code\u003e, in which case the suffix \n\u003ccode\u003e\".tmp\"\u003c/code\u003e will be used"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003eprefix\u003c/code\u003e argument contains fewer than three characters",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/IOException.html\" title\u003d\"class in java.io\"\u003eIOException\u003c/a\u003e\u003c/code\u003e - If a file could not be created",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityException.html\" title\u003d\"class in java.lang\"\u003eSecurityException\u003c/a\u003e\u003c/code\u003e - If a security manager exists and its \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/SecurityManager.html#checkWrite(java.lang.String)\"\u003e\u003ccode\u003eSecurityManager.checkWrite(java.lang.String)\u003c/code\u003e\u003c/a\u003e method does not allow a file to be created"
        ],
        "return": [
          "An abstract pathname denoting a newly-created empty file"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "pathname",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "compareTo",
      "comment": "Compares two abstract pathnames lexicographically. The ordering defined by this method depends upon the underlying system. On UNIX systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows systems it is not.",
      "annotations": [],
      "tagMap": {
        "Specified by:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html#compareTo(T)\"\u003ecompareTo\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in interface\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Comparable.html\" title\u003d\"interface in java.lang\"\u003eComparable\u003c/a\u003e\u0026lt;\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html\" title\u003d\"class in java.io\"\u003eFile\u003c/a\u003e\u0026gt;\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003epathname\u003c/code\u003e - The abstract pathname to be compared to this abstract pathname"
        ],
        "return": [
          "Zero if the argument is equal to this abstract pathname, a value less than zero if this abstract pathname is lexicographically less than the argument, or a value greater than zero if this abstract pathname is lexicographically greater than the argument"
        ],
        "since": [
          "1.2"
        ]
      }
    },
    {
      "returnType": {
        "name": "boolean",
        "type": "Class"
      },
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.Object",
            "type": "Class"
          },
          "name": "obj",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "equals",
      "comment": "Tests this abstract pathname for equality with the given object. Returns true if and only if the argument is not null and is an abstract pathname that denotes the same file or directory as this abstract pathname. Whether or not two abstract pathnames are equal depends upon the underlying system. On UNIX systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows systems it is not.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003e\u003ccode\u003eObject.hashCode()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/HashMap.html\" title\u003d\"class in java.util\"\u003e\u003ccode\u003eHashMap\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003eequals\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "param": [
          "\u003ccode\u003eobj\u003c/code\u003e - The object to be compared with this abstract pathname"
        ],
        "return": [
          "\u003ccode\u003etrue\u003c/code\u003e if and only if the objects are the same; \n\u003ccode\u003efalse\u003c/code\u003e otherwise"
        ]
      }
    },
    {
      "returnType": {
        "name": "int",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "hashCode",
      "comment": "Computes a hash code for this abstract pathname. Because equality of abstract pathnames is inherently system-dependent, so is the computation of their hash codes. On UNIX systems, the hash code of an abstract pathname is equal to the exclusive or of the hash code of its pathname string and the decimal value 1234321. On Microsoft Windows systems, the hash code is equal to the exclusive or of the hash code of its pathname string converted to lower case and the decimal value 1234321. Locale is not taken into account on lowercasing the pathname string.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\"\u003e\u003ccode\u003eObject.equals(java.lang.Object)\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/System.html#identityHashCode(java.lang.Object)\"\u003e\u003ccode\u003eSystem.identityHashCode(java.lang.Object)\u003c/code\u003e\u003c/a\u003e"
        ],
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#hashCode()\"\u003ehashCode\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "A hash code for this abstract pathname"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.lang.String",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toString",
      "comment": "Returns the pathname string of this abstract pathname. This is just the string returned by the getPath() method.",
      "annotations": [],
      "tagMap": {
        "Overrides:": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html#toString()\"\u003etoString\u003c/a\u003e\u003c/code\u003e\u0026nbsp;in class\u0026nbsp;\n\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Object.html\" title\u003d\"class in java.lang\"\u003eObject\u003c/a\u003e\u003c/code\u003e"
        ],
        "return": [
          "The string form of this abstract pathname"
        ]
      }
    },
    {
      "returnType": {
        "name": "java.nio.file.Path",
        "type": "Class"
      },
      "parameters": [],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "name": "toPath",
      "comment": "Returns a java.nio.file.Path object constructed from this abstract path. The resulting Path is associated with the default-filesystem. The first invocation of this method works as if invoking it were equivalent to evaluating the expression:  FileSystems.getDefault().getPath(this.getPath());\n Subsequent invocations of this method return the same Path. If this abstract pathname is the empty abstract pathname then this method returns a Path that may be used to access the current user directory.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/Path.html#toFile()\"\u003e\u003ccode\u003ePath.toFile()\u003c/code\u003e\u003c/a\u003e"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/InvalidPathException.html\" title\u003d\"class in java.nio.file\"\u003eInvalidPathException\u003c/a\u003e\u003c/code\u003e - if a \n\u003ccode\u003ePath\u003c/code\u003e object cannot be constructed from the abstract path (see \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/nio/file/FileSystem.html#getPath(java.lang.String,java.lang.String...)\"\u003e\u003ccode\u003eFileSystem.getPath\u003c/code\u003e\u003c/a\u003e)"
        ],
        "return": [
          "a \n\u003ccode\u003ePath\u003c/code\u003e constructed from this abstract path"
        ],
        "since": [
          "1.7"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "pathname",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new File instance by converting the given pathname string into an abstract pathname. If the given string is the empty string, then the result is the empty abstract pathname.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003epathname\u003c/code\u003e - A pathname string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If the \n\u003ccode\u003epathname\u003c/code\u003e argument is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "parent",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "child",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new File instance from a parent pathname string and a child pathname string. If parent is null then the new File instance is created as if by invoking the single-argument File constructor on the given child pathname string. Otherwise the parent pathname string is taken to denote a directory, and the child pathname string is taken to denote either a directory or a file. If the child pathname string is absolute then it is converted into a relative pathname in a system-dependent way. If parent is the empty string then the new File instance is created by converting child into an abstract pathname and resolving the result against a system-dependent default directory. Otherwise each pathname string is converted into an abstract pathname and the child abstract pathname is resolved against the parent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - The parent pathname string",
          "\u003ccode\u003echild\u003c/code\u003e - The child pathname string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003echild\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.io.File",
            "type": "Class"
          },
          "name": "parent",
          "varargs": false
        },
        {
          "annotations": [],
          "type": {
            "name": "java.lang.String",
            "type": "Class"
          },
          "name": "child",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new File instance from a parent abstract pathname and a child pathname string. If parent is null then the new File instance is created as if by invoking the single-argument File constructor on the given child pathname string. Otherwise the parent abstract pathname is taken to denote a directory, and the child pathname string is taken to denote either a directory or a file. If the child pathname string is absolute then it is converted into a relative pathname in a system-dependent way. If parent is the empty abstract pathname then the new File instance is created by converting child into an abstract pathname and resolving the result against a system-dependent default directory. Otherwise each pathname string is converted into an abstract pathname and the child abstract pathname is resolved against the parent.",
      "annotations": [],
      "tagMap": {
        "param": [
          "\u003ccode\u003eparent\u003c/code\u003e - The parent abstract pathname",
          "\u003ccode\u003echild\u003c/code\u003e - The child pathname string"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003echild\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e"
        ]
      }
    },
    {
      "parameters": [
        {
          "annotations": [],
          "type": {
            "name": "java.net.URI",
            "type": "Class"
          },
          "name": "uri",
          "varargs": false
        }
      ],
      "isDefaultMethod": false,
      "memberType": "JavaMethod",
      "modifiers": 1,
      "comment": "Creates a new File instance by converting the given file: URI into an abstract pathname. The exact form of a file: URI is system-dependent, hence the transformation performed by this constructor is also system-dependent. For a given abstract pathname f it is guaranteed that new File( f.toURI()).equals( f.getAbsoluteFile()) so long as the original abstract pathname, the URI, and the new abstract pathname are all created in (possibly different invocations of) the same Java virtual machine. This relationship typically does not hold, however, when a file: URI that is created in a virtual machine on one operating system is converted into an abstract pathname in a virtual machine on a different operating system.",
      "annotations": [],
      "tagMap": {
        "see": [
          "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/io/File.html#toURI()\"\u003e\u003ccode\u003etoURI()\u003c/code\u003e\u003c/a\u003e, \n\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/net/URI.html\" title\u003d\"class in java.net\"\u003e\u003ccode\u003eURI\u003c/code\u003e\u003c/a\u003e"
        ],
        "param": [
          "\u003ccode\u003euri\u003c/code\u003e - An absolute, hierarchical URI with a scheme equal to \n\u003ccode\u003e\"file\"\u003c/code\u003e, a non-empty path component, and undefined authority, query, and fragment components"
        ],
        "throws": [
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/NullPointerException.html\" title\u003d\"class in java.lang\"\u003eNullPointerException\u003c/a\u003e\u003c/code\u003e - If \n\u003ccode\u003euri\u003c/code\u003e is \n\u003ccode\u003enull\u003c/code\u003e",
          "\u003ccode\u003e\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/IllegalArgumentException.html\" title\u003d\"class in java.lang\"\u003eIllegalArgumentException\u003c/a\u003e\u003c/code\u003e - If the preconditions on the parameter do not hold"
        ],
        "since": [
          "1.4"
        ]
      }
    }
  ],
  "memberType": "JavaClass",
  "modifiers": 1,
  "name": "java.io.File",
  "comment": "An abstract representation of file and directory pathnames. \n\u003cp\u003e User interfaces and operating systems use system-dependent \u003cem\u003epathname strings\u003c/em\u003e to name files and directories. This class presents an abstract, system-independent view of hierarchical pathnames. An \u003cem\u003eabstract pathname\u003c/em\u003e has two components: \u003c/p\u003e\n\u003col\u003e \n \u003cli\u003e An optional system-dependent \u003cem\u003eprefix\u003c/em\u003e string, such as a disk-drive specifier, \u003ccode\u003e\"/\"\u003c/code\u003e\u0026nbsp;for the UNIX root directory, or \u003ccode\u003e\"\\\\\\\\\"\u003c/code\u003e\u0026nbsp;for a Microsoft Windows UNC pathname, and \u003c/li\u003e\n \u003cli\u003e A sequence of zero or more string \u003cem\u003enames\u003c/em\u003e. \u003c/li\u003e\n\u003c/ol\u003e The first name in an abstract pathname may be a directory name or, in the case of Microsoft Windows UNC pathnames, a hostname. Each subsequent name in an abstract pathname denotes a directory; the last name may denote either a directory or a file. The \n\u003cem\u003eempty\u003c/em\u003e abstract pathname has no prefix and an empty name sequence. \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e The conversion of a pathname string to or from an abstract pathname is inherently system-dependent. When an abstract pathname is converted into a pathname string, each name is separated from the next by a single copy of the default \u003cem\u003eseparator character\u003c/em\u003e. The default name-separator character is defined by the system property \u003ccode\u003efile.separator\u003c/code\u003e, and is made available in the public static fields \u003ca href\u003d\"#separator\"\u003e\u003ccode\u003eseparator\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"#separatorChar\"\u003e\u003ccode\u003eseparatorChar\u003c/code\u003e\u003c/a\u003e of this class. When a pathname string is converted into an abstract pathname, the names within it may be separated by the default name-separator character or by any other name-separator character that is supported by the underlying system. \u003c/p\u003e\n\u003cp\u003e A pathname, whether abstract or in string form, may be either \u003cem\u003eabsolute\u003c/em\u003e or \u003cem\u003erelative\u003c/em\u003e. An absolute pathname is complete in that no other information is required in order to locate the file that it denotes. A relative pathname, in contrast, must be interpreted in terms of information taken from some other pathname. By default the classes in the \u003ccode\u003ejava.io\u003c/code\u003e package always resolve relative pathnames against the current user directory. This directory is named by the system property \u003ccode\u003euser.dir\u003c/code\u003e, and is typically the directory in which the Java virtual machine was invoked. \u003c/p\u003e\n\u003cp\u003e The \u003cem\u003eparent\u003c/em\u003e of an abstract pathname may be obtained by invoking the \u003ca href\u003d\"#getParent()\"\u003e\u003ccode\u003egetParent()\u003c/code\u003e\u003c/a\u003e method of this class and consists of the pathname\u0027s prefix and each name in the pathname\u0027s name sequence except for the last. Each directory\u0027s absolute pathname is an ancestor of any \u003ccode\u003eFile\u003c/code\u003e object with an absolute abstract pathname which begins with the directory\u0027s absolute pathname. For example, the directory denoted by the abstract pathname \u003ccode\u003e\"/usr\"\u003c/code\u003e is an ancestor of the directory denoted by the pathname \u003ccode\u003e\"/usr/local/bin\"\u003c/code\u003e. \u003c/p\u003e\n\u003cp\u003e The prefix concept is used to handle root directories on UNIX platforms, and drive specifiers, root directories and UNC pathnames on Microsoft Windows platforms, as follows: \u003c/p\u003e\n\u003cul\u003e \n \u003cli\u003e For UNIX platforms, the prefix of an absolute pathname is always \u003ccode\u003e\"/\"\u003c/code\u003e. Relative pathnames have no prefix. The abstract pathname denoting the root directory has the prefix \u003ccode\u003e\"/\"\u003c/code\u003e and an empty name sequence. \u003c/li\u003e\n \u003cli\u003e For Microsoft Windows platforms, the prefix of a pathname that contains a drive specifier consists of the drive letter followed by \u003ccode\u003e\":\"\u003c/code\u003e and possibly followed by \u003ccode\u003e\"\\\\\"\u003c/code\u003e if the pathname is absolute. The prefix of a UNC pathname is \u003ccode\u003e\"\\\\\\\\\"\u003c/code\u003e; the hostname and the share name are the first two names in the name sequence. A relative pathname that does not specify a drive has no prefix. \u003c/li\u003e\n\u003c/ul\u003e \n\u003cp\u003e\u003c/p\u003e\n\u003cp\u003e Instances of this class may or may not denote an actual file-system object such as a file or a directory. If it does denote such an object then that object resides in a \u003ci\u003epartition\u003c/i\u003e. A partition is an operating system-specific portion of storage for a file system. A single storage device (e.g. a physical disk-drive, flash memory, CD-ROM) may contain multiple partitions. The object, if any, will reside on the partition \u003ca id\u003d\"partName\"\u003enamed\u003c/a\u003e by some ancestor of the absolute form of this pathname. \u003c/p\u003e\n\u003cp\u003e A file system may implement restrictions to certain operations on the actual file-system object, such as reading, writing, and executing. These restrictions are collectively known as \u003ci\u003eaccess permissions\u003c/i\u003e. The file system may have multiple sets of access permissions on a single object. For example, one set may apply to the object\u0027s \u003ci\u003eowner\u003c/i\u003e, and another may apply to all other users. The access permissions on an object may cause some methods in this class to fail. \u003c/p\u003e\n\u003cp\u003e Instances of the \u003ccode\u003eFile\u003c/code\u003e class are immutable; that is, once created, the abstract pathname represented by a \u003ccode\u003eFile\u003c/code\u003e object will never change. \u003c/p\u003e\n\u003ch2\u003eInteroperability with \u003ccode\u003ejava.nio.file\u003c/code\u003e package\u003c/h2\u003e \n\u003cp\u003e The \u003ca href\u003d\"../../java/nio/file/package-summary.html\"\u003e\u003ccode\u003ejava.nio.file\u003c/code\u003e\u003c/a\u003e package defines interfaces and classes for the Java virtual machine to access files, file attributes, and file systems. This API may be used to overcome many of the limitations of the \u003ccode\u003ejava.io.File\u003c/code\u003e class. The \u003ca href\u003d\"#toPath()\"\u003e\u003ccode\u003etoPath\u003c/code\u003e\u003c/a\u003e method may be used to obtain a \u003ca href\u003d\"../nio/file/Path.html\" title\u003d\"interface in java.nio.file\"\u003e\u003ccode\u003ePath\u003c/code\u003e\u003c/a\u003e that uses the abstract path represented by a \u003ccode\u003eFile\u003c/code\u003e object to locate a file. The resulting \u003ccode\u003ePath\u003c/code\u003e may be used with the \u003ca href\u003d\"../nio/file/Files.html\" title\u003d\"class in java.nio.file\"\u003e\u003ccode\u003eFiles\u003c/code\u003e\u003c/a\u003e class to provide more efficient and extensive access to additional file operations, file attributes, and I/O exceptions to help diagnose errors when an operation on a file fails.\u003c/p\u003e",
  "tagMap": {
    "see": [
      "\u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/api/serialized-form.html#java.io.File\"\u003eSerialized Form\u003c/a\u003e"
    ],
    "since": [
      "1.0"
    ]
  }
}